uint64_t operations_research::sat::`anonymous namespace'::LnsSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::LnsSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v4;

  v3 = *((_QWORD *)this + 80);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2)|| (operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  }
}

uint64_t operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_24F984B70;
  a3[1] = a2;
  a3[2] = this;
  a3[3] = a3;
  return this;
}

void operations_research::sat::`anonymous namespace'::LnsSolver::Synchronize(operations_research::sat::NeighborhoodGenerator **this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3;
  operations_research::sat::NeighborhoodGenerator *v4;
  absl::lts_2020_02_25::Mutex *v5;
  double v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  absl::lts_2020_02_25::Mutex *v14;
  absl::lts_2020_02_25::Mutex *v15;
  absl::lts_2020_02_25::Mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  operations_research::sat::NeighborhoodGenerator::Synchronize(this[6], a2);
  v3 = *((double *)this + 5);
  v4 = this[6];
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)v4 + 40), v5);
  v6 = *((double *)v4 + 15);
  absl::lts_2020_02_25::Mutex::Unlock((operations_research::sat::NeighborhoodGenerator *)((char *)v4 + 40), v7, v8, v9, v10, v11, v12, v13);
  *((double *)this + 5) = v6;
  v14 = (absl::lts_2020_02_25::Mutex *)*((_QWORD *)this[80] + 2);
  absl::lts_2020_02_25::Mutex::Lock(v14, v15);
  *(double *)(*((_QWORD *)v14 + 1) + 112) = v6 - v3 + *(double *)(*((_QWORD *)v14 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock(v14, v16, v17, v18, v19, v20, v21, v22);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F984B70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984B70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  absl::lts_2020_02_25::Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  absl::lts_2020_02_25::Mutex *v17;
  uint64_t v18;
  absl::lts_2020_02_25::Mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  absl::lts_2020_02_25::Mutex *v27;
  uint64_t v28;
  uint64_t v29;
  absl::lts_2020_02_25::Mutex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  absl::lts_2020_02_25::Mutex *v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t InnerObjectiveUpperBound;
  absl::lts_2020_02_25::Mutex *v44;
  absl::lts_2020_02_25::Mutex *v45;
  _QWORD *v46;
  _QWORD *v47;
  absl::lts_2020_02_25::Mutex *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _BYTE *v56;
  google::protobuf::Arena *v57;
  std::string *v58;
  absl::lts_2020_02_25::Mutex *v59;
  uint64_t v60;
  absl::lts_2020_02_25::Mutex *v61;
  uint64_t v62;
  absl::lts_2020_02_25::Mutex *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  absl::lts_2020_02_25::Mutex *v71;
  absl::lts_2020_02_25::Mutex *v72;
  uint64_t v73;
  absl::lts_2020_02_25::Mutex *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  void **v85;
  std::string *v86;
  std::string::size_type size;
  _QWORD *v88;
  _QWORD *v89;
  std::string *v90;
  std::string::size_type v91;
  _QWORD *v92;
  std::string::size_type v93;
  std::string *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  absl::lts_2020_02_25::Mutex *v100;
  absl::lts_2020_02_25::Mutex *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  operations_research::sat::SatParameters *v110;
  uint64_t v111;
  operations_research::sat::Model *v112;
  operations_research::sat::Model *v113;
  operations_research::sat::Model *v114;
  absl::lts_2020_02_25::Mutex *v115;
  std::string::size_type v116;
  std::string *data;
  std::string::size_type v118;
  std::string *v119;
  google::protobuf::Arena *v120;
  std::string *v121;
  google::protobuf::Arena *v122;
  _QWORD *v123;
  operations_research::sat *v124;
  uint64_t v125;
  absl::lts_2020_02_25::Mutex *v126;
  const operations_research::sat::CpSolverResponse *v127;
  int v128;
  operations_research::sat::SharedResponseManager **v129;
  uint64_t InnerObjectiveLowerBound;
  absl::lts_2020_02_25::Mutex *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  const void *v138;
  size_t v139;
  char *v140;
  uint64_t v141;
  operations_research::sat *v142;
  unsigned __int8 **v143;
  absl::lts_2020_02_25::Mutex *v144;
  absl::lts_2020_02_25::Mutex *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  uint64_t *v157;
  uint64_t v158;
  const void *v159;
  uint64_t v160;
  size_t v161;
  char *v162;
  int IsFeasible;
  unsigned __int8 **v164;
  absl::lts_2020_02_25::Mutex *v165;
  absl::lts_2020_02_25::Mutex *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  __int128 v176;
  std::string *v177;
  std::string::size_type v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  std::string *v185;
  std::string::size_type v186;
  _QWORD *v187;
  uint64_t v188;
  absl::lts_2020_02_25::Mutex *v189;
  absl::lts_2020_02_25::Mutex *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  void *v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  std::string *v212;
  std::string::size_type v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  std::string v217;
  std::string v218;
  const void *v219;
  std::string *v220[2];
  size_t __sz;
  void *v222;
  void *v223;
  uint64_t v224;
  _BYTE v225[144];
  void *v226[2];
  uint64_t v227;
  _QWORD **v228;
  _QWORD *v229[2];
  void *v230;
  _QWORD *v231;
  uint64_t v232;
  std::string v233;
  std::string v234;
  __int16 v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  std::string *v239;
  uint64_t *v240;
  void *v241;
  __int128 v242;
  uint64_t v243;
  _BYTE v244[16];
  unsigned int v245[2];
  uint64_t v246;
  int v247;
  void *v248;
  void *v249;
  uint64_t v250;
  void *v251;
  std::string::size_type v252;
  double v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  std::string v261[2];
  std::string v262;
  _QWORD v263[4];
  uint64_t v264;
  uint64_t v265;
  uint64_t v266[21];
  void *v267;
  char *v268;
  void *v269;
  char v270;
  _BYTE v271[24];
  _BYTE *v272;
  std::string __str;
  void **v274;
  void *__p;
  void *v276;
  int8x8_t v277;
  char v278;
  char v279;
  int v280;
  uint64_t v281;
  int v282;
  _QWORD __dst[313];
  _OWORD v284[156];
  uint64_t v285[3];

  v0 = MEMORY[0x24BDAC7A8]();
  v285[0] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 640);
  if (!operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v2 + 32), v3)&& (operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v2 + 16), v4) & 1) == 0)
  {
    __dst[0] = *(_QWORD *)(v0 + 8);
    LODWORD(__dst[1]) = *(_DWORD *)(v1 + 336);
    v250 = 0;
    v248 = 0;
    v249 = 0;
    std::seed_seq::__init[abi:ne180100]<int const*>((uint64_t)&v248, (int *)__dst, (int *)&__dst[1] + 1);
    std::seed_seq::generate[abi:ne180100]<unsigned int *>((unint64_t)&v248, v284, v285);
    memcpy(__dst, v284, 0x9C0uLL);
    __dst[312] = 0;
    if ((__dst[0] & 0x80000000) == 0)
    {
      v6 = 4;
      while (!*(_DWORD *)((char *)__dst + v6))
      {
        v6 += 4;
        if (v6 == 2496)
        {
          LODWORD(__dst[0]) = 0x80000000;
          break;
        }
      }
    }
    v7 = *(_QWORD *)(v1 + 48);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v7 + 40), v5);
    v8 = *(double *)(v7 + 72);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v7 + 40), v9, v10, v11, v12, v13, v14, v15);
    v16 = *(_QWORD *)(v1 + 48);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v16 + 40), v17);
    v18 = *(_QWORD *)(v16 + 88);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v16 + 40), v19, v20, v21, v22, v23, v24, v25);
    operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v244, 0);
    v26 = *(_QWORD **)(*(_QWORD *)(v1 + 640) + 32);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v26 + 39), v27);
    v29 = v26[44];
    v28 = v26[45];
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v26 + 39), v30, v31, v32, v33, v34, v35, v36);
    if ((int)(-858993459 * ((unint64_t)(v28 - v29) >> 3)) < 1)
    {
      v247 = 0;
      InnerObjectiveUpperBound = operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(*(operations_research::sat::SharedResponseManager **)(*(_QWORD *)(v1 + 640) + 32), v37);
      v42 = InnerObjectiveUpperBound;
    }
    else
    {
      v247 = 2;
      operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(v26 + 38, (absl::lts_2020_02_25::Mutex *)__dst, (uint64_t)v284);
      v38 = (uint64_t *)*((_QWORD *)&v284[0] + 1);
      v39 = *(uint64_t **)&v284[1];
      if (*((_QWORD *)&v284[0] + 1) != *(_QWORD *)&v284[1])
      {
        v40 = v245[0];
        do
        {
          v41 = *v38;
          if (v40 == v245[1])
            google::protobuf::RepeatedField<long long>::Reserve(v245, v40 + 1);
          *(_QWORD *)(v246 + 8 * v40) = v41;
          v245[0] = v40 + 1;
          ++v38;
          ++v40;
        }
        while (v38 != v39);
      }
      operations_research::sat::SharedSolutionRepository<long long>::GetSolution((uint64_t)(v26 + 38), 0, (uint64_t)&v274);
      v42 = (uint64_t)v274;
      if (__p)
      {
        v276 = __p;
        operator delete(__p);
      }
      InnerObjectiveUpperBound = *(_QWORD *)&v284[0];
      if (*((_QWORD *)&v284[0] + 1))
      {
        *(_QWORD *)&v284[1] = *((_QWORD *)&v284[0] + 1);
        operator delete(*((void **)&v284[0] + 1));
      }
    }
    v235 = 0;
    operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&v236, 0);
    v241 = 0;
    HIBYTE(v243) = 0;
    LOBYTE(v242) = 0;
    v44 = (absl::lts_2020_02_25::Mutex *)(*(_QWORD *)(v1 + 56) + 248);
    absl::lts_2020_02_25::Mutex::Lock(v44, v45);
    (*(void (**)(_OWORD *__return_ptr, _QWORD, _BYTE *, _QWORD *, double))(**(_QWORD **)(v1 + 48) + 16))(v284, *(_QWORD *)(v1 + 48), v244, __dst, v8);
    v235 = v284[0];
    v46 = (_QWORD *)(v237 & 0xFFFFFFFFFFFFFFFELL);
    if ((v237 & 1) != 0)
    {
      v46 = (_QWORD *)*v46;
      v47 = (_QWORD *)(*(_QWORD *)&v284[1] & 0xFFFFFFFFFFFFFFFELL);
      if ((v284[1] & 1) == 0)
      {
LABEL_21:
        if (v46 != v47)
        {
LABEL_22:
          operations_research::sat::CpModelProto::CopyFrom((operations_research::sat::CpModelProto *)&v236, (const operations_research::sat::CpModelProto *)((char *)v284 + 8));
          goto LABEL_26;
        }
LABEL_25:
        operations_research::sat::CpModelProto::InternalSwap((operations_research::sat::CpModelProto *)&v236, (operations_research::sat::CpModelProto *)((char *)v284 + 8));
LABEL_26:
        v241 = (void *)*((_QWORD *)&v284[9] + 1);
        if (SHIBYTE(v243) < 0)
          operator delete((void *)v242);
        v242 = v284[10];
        v243 = *(_QWORD *)&v284[11];
        BYTE7(v284[11]) = 0;
        LOBYTE(v284[10]) = 0;
        operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)((char *)v284 + 8));
        absl::lts_2020_02_25::Mutex::Unlock(v44, v48, v49, v50, v51, v52, v53, v54);
        *(_QWORD *)&v284[0] = "lns_";
        *((_QWORD *)&v284[0] + 1) = 4;
        v56 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(_QWORD *)(v0 + 8), &v276, v55);
        v274 = &v276;
        __p = (void *)(v56 - (_BYTE *)&v276);
        absl::lts_2020_02_25::StrCat((uint64_t)v284, (uint64_t)&v274, &__str);
        v57 = (google::protobuf::Arena *)(v237 & 0xFFFFFFFFFFFFFFFELL);
        if ((v237 & 1) != 0)
        {
          v57 = *(google::protobuf::Arena **)v57;
          v58 = v239;
          if (v239 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_30;
        }
        else
        {
          v58 = v239;
          if (v239 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_30:
            std::string::operator=(v58, &__str);
            goto LABEL_33;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(&v239, v57, (__int128 *)&__str);
LABEL_33:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!(_BYTE)v235)
            goto LABEL_196;
        }
        else if (!(_BYTE)v235)
        {
LABEL_196:
          if ((SHIBYTE(v243) & 0x80000000) == 0)
            goto LABEL_198;
          goto LABEL_197;
        }
        v215 = v241;
        v60 = *(_QWORD *)(v1 + 48);
        v61 = (absl::lts_2020_02_25::Mutex *)(v60 + 40);
        absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v60 + 40), v59);
        v216 = InnerObjectiveUpperBound;
        v62 = *(_QWORD *)(v60 + 104);
        absl::lts_2020_02_25::Mutex::Unlock(v61, v63, v64, v65, v66, v67, v68, v69);
        v70 = *(_QWORD *)(v1 + 48);
        v71 = (absl::lts_2020_02_25::Mutex *)(v70 + 40);
        absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v70 + 40), v72);
        v73 = *(_QWORD *)(v70 + 96);
        absl::lts_2020_02_25::Mutex::Unlock(v71, v74, v75, v76, v77, v78, v79, v80);
        if (v73 <= 1)
          v81 = 1;
        else
          v81 = v73;
        if (*(char *)(v1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v234, *(const std::string::value_type **)(v1 + 8), *(_QWORD *)(v1 + 16));
        }
        else
        {
          v82 = *(_OWORD *)(v1 + 8);
          v234.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 24);
          *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v82;
        }
        v83 = v216;
        v84 = (void *)HIBYTE(v243);
        if (v243 < 0)
          v84 = (void *)*((_QWORD *)&v242 + 1);
        if (v84)
        {
          *(_QWORD *)&v284[0] = "_";
          *((_QWORD *)&v284[0] + 1) = 1;
          if (v243 >= 0)
            v85 = (void **)&v242;
          else
            v85 = (void **)v242;
          v274 = v85;
          __p = v84;
          absl::lts_2020_02_25::StrAppend(&v234, (uint64_t)v284, (uint64_t)&v274);
        }
        *(_QWORD *)&v284[0] = &v234;
        *((_QWORD *)&v284[0] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
        *(double *)&v284[1] = v8;
        *((_QWORD *)&v284[1] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        *(_QWORD *)&v284[2] = *(_QWORD *)(v0 + 8);
        *((_QWORD *)&v284[2] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        *(_QWORD *)&v284[3] = v18;
        *((_QWORD *)&v284[3] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        *(double *)&v284[4] = (double)v62 / (double)v81;
        *((_QWORD *)&v284[4] + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("%s(d=%0.2f s=%i t=%0.2f p=%0.2f)", 32, (uint64_t)v284, 5, (uint64_t)&v233);
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v274, (const operations_research::sat::SatParameters *)(v1 + 64));
        v281 = v18;
        v279 = 0;
        LODWORD(v276) = v276 | 0x400400;
        v278 = 0;
        v277 = vorr_s8(v277, (int8x8_t)0x2000008000);
        v282 = 0;
        if (FLAGS_cp_model_dump_lns)
        {
          *(_QWORD *)&v284[0] = FLAGS_cp_model_dump_prefix;
          *((_QWORD *)&v284[0] + 1) = strlen((const char *)FLAGS_cp_model_dump_prefix);
          v86 = v239;
          size = HIBYTE(v239->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) != 0)
          {
            v86 = (std::string *)v239->__r_.__value_.__r.__words[0];
            size = v239->__r_.__value_.__l.__size_;
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
          __str.__r_.__value_.__l.__size_ = size;
          v263[0] = ".pbtxt";
          v263[1] = 6;
          absl::lts_2020_02_25::StrCat((uint64_t)v284, (uint64_t)&__str, (uint64_t)v263, &v218);
          google::LogMessage::LogMessage((google::LogMessage *)v284, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2281);
          v88 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v284);
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Dumping LNS model to '", 22);
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = &v218;
          else
            v90 = (std::string *)v218.__r_.__value_.__r.__words[0];
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          else
            v91 = v218.__r_.__value_.__l.__size_;
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"'.", 2);
          google::LogMessage::~LogMessage((google::LogMessage *)v284);
          v93 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          v94 = &v218;
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v93 = v218.__r_.__value_.__l.__size_;
            v94 = (std::string *)v218.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)&v284[0] = v94;
          *((_QWORD *)&v284[0] + 1) = v93;
          file::SetTextProto((const char **)v284, (const google::protobuf::Message *)&v236, 47802, v263);
          if (v263[0])
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__str, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2283);
            v123 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__str);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Check failed: (file::SetTextProto(name, neighborhood.cp_model, file::Defaults())).ok() ", 87);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__str);
          }
          if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v218.__r_.__value_.__l.__data_);
        }
        v214 = v42;
        v226[0] = 0;
        v226[1] = 0;
        v229[0] = 0;
        v229[1] = 0;
        v227 = 0;
        v228 = v229;
        v232 = 0;
        v230 = 0;
        v231 = 0;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v284, (const operations_research::sat::SatParameters *)&v274);
        v272 = 0;
        v95 = operator new(0x248uLL);
        *v95 = &off_24F985078;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v95 + 1), (const operations_research::sat::SatParameters *)v284);
        v272 = v95;
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v284);
        *(_QWORD *)&v284[0] = v226;
        if (!v272)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(std::string *__return_ptr, _BYTE *, _OWORD *))(*(_QWORD *)v272 + 48))(&__str, v272, v284);
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__str);
        v96 = v272;
        if (v272 == v271)
        {
          v97 = 4;
          v96 = v271;
        }
        else
        {
          if (!v272)
            goto LABEL_70;
          v97 = 5;
        }
        (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_70:
        v98 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v226);
        v99 = *(uint64_t **)(*(_QWORD *)(v1 + 640) + 16);
        absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v99, v100);
        operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v98, v99[1]);
        absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v99, v101, v102, v103, v104, v105, v106, v107);
        v108 = v238;
        operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v225, 0);
        v222 = 0;
        v223 = 0;
        v224 = 0;
        LOBYTE(v284[0]) = 1;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)((char *)v284 + 8), 0);
        *((_QWORD *)&v284[36] + 1) = 0;
        v109 = *off_2540794B0[0] >= 3
            && (off_2540794B0[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_2540794B0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3));
        LOBYTE(v284[0]) = v109;
        v110 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v226);
        operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)((char *)v284 + 8), v110);
        *((_QWORD *)&v284[36] + 1) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v226);
        v111 = operator new();
        *(_OWORD *)(v111 + 16) = 0u;
        *(_OWORD *)(v111 + 32) = 0u;
        *(_OWORD *)v111 = 0u;
        *(_QWORD *)(v111 + 48) = &v236;
        *(_QWORD *)(v111 + 56) = v225;
        *(_WORD *)(v111 + 64) = 256;
        *(_QWORD *)(v111 + 72) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v111 + 80) = 0u;
        *(_OWORD *)(v111 + 96) = 0u;
        *(_OWORD *)(v111 + 112) = 0u;
        *(_OWORD *)(v111 + 128) = 0u;
        *(_OWORD *)(v111 + 144) = 0u;
        *(_OWORD *)(v111 + 160) = 0u;
        *(_OWORD *)(v111 + 176) = 0u;
        *(_QWORD *)(v111 + 192) = 0;
        *(_QWORD *)(v111 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v111 + 208) = 0u;
        *(_OWORD *)(v111 + 224) = 0u;
        *(_OWORD *)(v111 + 240) = 0u;
        *(_OWORD *)(v111 + 256) = 0u;
        *(_QWORD *)(v111 + 272) = 0;
        *(_QWORD *)(v111 + 280) = v111 + 248;
        *(_OWORD *)(v111 + 288) = 0u;
        *(_OWORD *)(v111 + 304) = 0u;
        *(_DWORD *)(v111 + 288) = -1;
        *(_OWORD *)(v111 + 360) = 0u;
        *(_OWORD *)(v111 + 320) = 0u;
        *(_OWORD *)(v111 + 336) = 0u;
        *(_DWORD *)(v111 + 352) = 0;
        *(_QWORD *)(v111 + 376) = 0;
        *(_QWORD *)(v111 + 384) = v111 + 352;
        *(_OWORD *)(v111 + 392) = 0u;
        *(_OWORD *)(v111 + 408) = 0u;
        *(_DWORD *)(v111 + 392) = -1;
        *(_OWORD *)(v111 + 424) = 0u;
        *(_OWORD *)(v111 + 440) = 0u;
        *(_QWORD *)(v111 + 456) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v111 + 512) = 0u;
        *(_QWORD *)(v111 + 528) = 0;
        *(_OWORD *)(v111 + 489) = 0u;
        *(_OWORD *)(v111 + 464) = 0u;
        *(_OWORD *)(v111 + 480) = 0u;
        *(_QWORD *)(v111 + 536) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_QWORD *)(v111 + 616) = 0;
        *(_BYTE *)(v111 + 608) = 0;
        *(_OWORD *)(v111 + 576) = 0u;
        *(_OWORD *)(v111 + 592) = 0u;
        *(_OWORD *)(v111 + 544) = 0u;
        *(_OWORD *)(v111 + 560) = 0u;
        *(_OWORD *)(v111 + 768) = 0u;
        *(_OWORD *)(v111 + 784) = 0u;
        *(_OWORD *)(v111 + 736) = 0u;
        *(_OWORD *)(v111 + 752) = 0u;
        *(_OWORD *)(v111 + 704) = 0u;
        *(_OWORD *)(v111 + 720) = 0u;
        *(_OWORD *)(v111 + 672) = 0u;
        *(_OWORD *)(v111 + 688) = 0u;
        *(_OWORD *)(v111 + 656) = 0u;
        *(_QWORD *)(v111 + 800) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_QWORD *)(v111 + 840) = 0;
        *(_OWORD *)(v111 + 824) = 0u;
        *(_OWORD *)(v111 + 808) = 0u;
        *(_QWORD *)(v111 + 848) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_QWORD *)(v111 + 936) = 0;
        *(_OWORD *)(v111 + 920) = 0u;
        *(_OWORD *)(v111 + 904) = 0u;
        *(_OWORD *)(v111 + 888) = 0u;
        *(_OWORD *)(v111 + 872) = 0u;
        *(_OWORD *)(v111 + 856) = 0u;
        *(_QWORD *)(v111 + 944) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_QWORD *)(v111 + 984) = 0;
        *(_OWORD *)(v111 + 968) = 0u;
        *(_OWORD *)(v111 + 952) = 0u;
        *(_QWORD *)(v111 + 992) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_QWORD *)(v111 + 1032) = 0;
        *(_OWORD *)(v111 + 1016) = 0u;
        *(_OWORD *)(v111 + 1000) = 0u;
        *(_OWORD *)(v111 + 1048) = 0u;
        *(_QWORD *)(v111 + 1040) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v111 + 1336) = 0u;
        *(_OWORD *)(v111 + 1352) = 0u;
        *(_OWORD *)(v111 + 1304) = 0u;
        *(_OWORD *)(v111 + 1320) = 0u;
        *(_OWORD *)(v111 + 1272) = 0u;
        *(_OWORD *)(v111 + 1288) = 0u;
        *(_OWORD *)(v111 + 1240) = 0u;
        *(_OWORD *)(v111 + 1256) = 0u;
        *(_OWORD *)(v111 + 1208) = 0u;
        *(_OWORD *)(v111 + 1224) = 0u;
        *(_OWORD *)(v111 + 1176) = 0u;
        *(_OWORD *)(v111 + 1192) = 0u;
        *(_OWORD *)(v111 + 1144) = 0u;
        *(_OWORD *)(v111 + 1160) = 0u;
        *(_OWORD *)(v111 + 1112) = 0u;
        *(_OWORD *)(v111 + 1128) = 0u;
        *(_OWORD *)(v111 + 1080) = 0u;
        *(_OWORD *)(v111 + 1096) = 0u;
        *(_OWORD *)(v111 + 1064) = 0u;
        *(_QWORD *)(v111 + 1368) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v111 + 1376) = 0u;
        *(_OWORD *)(v111 + 1392) = 0u;
        *(_QWORD *)(v111 + 1408) = 0;
        operations_research::sat::PresolveCpModel((unsigned __int8 *)v284, v111, (uint64_t)&v222, (__n128)0);
        operations_research::sat::PresolveContext::~PresolveContext((void **)v111);
        MEMORY[0x22E31DF78]();
        operations_research::sat::SharedResponseManager::SharedResponseManager((uint64_t)v263, 0, 0, (uint64_t)&v236, *(_QWORD *)(*(_QWORD *)(v1 + 640) + 8), *(_QWORD *)(*(_QWORD *)(v1 + 640) + 16));
        operations_research::sat::SharedResponseManager::GetResponse((operations_research::sat::SharedResponseManager *)v263, v115, (operations_research::sat::CpSolverResponse *)&v218);
        v116 = HIBYTE(v220[0]->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v220[0]->__r_.__value_.__r.__words[2]) < 0)
        {
          if (v220[0]->__r_.__value_.__l.__size_)
          {
LABEL_77:
            if ((v116 & 0x80u) == 0)
              data = v220[0];
            else
              data = (std::string *)v220[0]->__r_.__value_.__l.__data_;
            if ((v116 & 0x80u) != 0)
              v116 = v220[0]->__r_.__value_.__l.__size_;
            v251 = data;
            v252 = v116;
            v262.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
            v262.__r_.__value_.__l.__size_ = 1;
            v118 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
            v119 = &v233;
            if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v118 = v233.__r_.__value_.__l.__size_;
              v119 = (std::string *)v233.__r_.__value_.__r.__words[0];
            }
            v261[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
            v261[0].__r_.__value_.__l.__size_ = v118;
            absl::lts_2020_02_25::StrCat((uint64_t)&v251, (uint64_t)&v262, (uint64_t)v261, &v217);
            v120 = (google::protobuf::Arena *)(v218.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
            if ((v218.__r_.__value_.__s.__data_[8] & 1) != 0)
            {
              v120 = *(google::protobuf::Arena **)v120;
              v121 = v220[0];
              if ((uint64_t *)v220[0] != &google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_86;
            }
            else
            {
              v121 = v220[0];
              if ((uint64_t *)v220[0] != &google::protobuf::internal::fixed_address_empty_string)
              {
LABEL_86:
                std::string::operator=(v121, &v217);
                goto LABEL_94;
              }
            }
            google::protobuf::internal::ArenaStringPtr::CreateInstance(v220, v120, (__int128 *)&v217);
LABEL_94:
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v217.__r_.__value_.__l.__data_);
            goto LABEL_98;
          }
        }
        else if (*((_BYTE *)&v220[0]->__r_.__value_.__s + 23))
        {
          goto LABEL_77;
        }
        v122 = (google::protobuf::Arena *)(v218.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
        if ((v218.__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          v122 = *(google::protobuf::Arena **)v122;
          if ((uint64_t *)v220[0] != &google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_90;
        }
        else if ((uint64_t *)v220[0] != &google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_90:
          std::string::operator=(v220[0], &v233);
LABEL_98:
          v124 = (operations_research::sat *)__sz;
          v125 = v98[14];
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 32))(*(_QWORD *)(v1 + 48)))
          {
            v128 = __sz;
            if ((_DWORD)__sz == 3)
              operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(*(_QWORD *)(*(_QWORD *)(v1 + 640) + 32), (absl::lts_2020_02_25::Mutex *)v220[0]);
            v129 = *(operations_research::sat::SharedResponseManager ***)(v1 + 640);
            if (*v129 == (operations_research::sat::SharedResponseManager *)&operations_research::sat::_CpModelProto_default_instance_
              || !*((_QWORD *)*v129 + 15))
            {
              v152 = 0;
              InnerObjectiveLowerBound = 0;
            }
            else
            {
              InnerObjectiveLowerBound = operations_research::sat::SharedResponseManager::GetInnerObjectiveLowerBound(v129[4], v126);
              v132 = operations_research::sat::SharedResponseManager::GetInnerObjectiveLowerBound((operations_research::sat::SharedResponseManager *)v263, v131);
              v133 = v240;
              v134 = &operations_research::sat::_CpObjectiveProto_default_instance_;
              if (!v240)
                v133 = &operations_research::sat::_CpObjectiveProto_default_instance_;
              if (v132 == 0x8000000000000000)
              {
                v135 = -INFINITY;
              }
              else if (v132 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v135 = INFINITY;
              }
              else
              {
                v135 = (double)v132;
              }
              v153 = *((double *)v133 + 12);
              v154 = v135 + *((double *)v133 + 11);
              v155 = 1.0;
              if (v153 == 0.0)
                v153 = 1.0;
              v156 = v154 * v153;
              v157 = *(uint64_t **)(v1 + 640);
              if (*(_QWORD *)(*v157 + 120))
                v134 = *(uint64_t **)(*v157 + 120);
              if (*((double *)v134 + 12) != 0.0)
                v155 = *((double *)v134 + 12);
              v152 = vcvtpd_s64_f64(v156 / v155 - *((double *)v134 + 11) + -0.000001);
              if (InnerObjectiveLowerBound < v152)
                operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds(v157[4], (absl::lts_2020_02_25::Mutex *)&v233, v152, 0x7FFFFFFFFFFFFFFELL);
            }
            if (((v128 - 2) & 0xFFFFFFFD) == 0)
            {
              v158 = **(_QWORD **)(v1 + 640);
              v159 = v219;
              v160 = SLODWORD(v218.__r_.__value_.__r.__words[2]);
              v253 = 0.0;
              v251 = 0;
              v252 = 0;
              if (LODWORD(v218.__r_.__value_.__r.__words[2]))
              {
                if ((v218.__r_.__value_.__r.__words[2] & 0x80000000) != 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v161 = 8 * SLODWORD(v218.__r_.__value_.__r.__words[2]);
                v251 = operator new(v161);
                v252 = (std::string::size_type)v251;
                v162 = (char *)v251 + 8 * v160;
                v253 = *(double *)&v162;
                memcpy(v251, v159, v161);
                v252 = (std::string::size_type)v162;
              }
              IsFeasible = operations_research::sat::SolutionIsFeasible(v158, (uint64_t)&v251, 0, 0);
              v83 = v216;
              if (v251)
              {
                v252 = (std::string::size_type)v251;
                operator delete(v251);
              }
              if (IsFeasible)
              {
                operations_research::sat::SharedResponseManager::NewSolution(*(operations_research::sat::SharedResponseManager **)(*(_QWORD *)(v1 + 640) + 32), (const operations_research::sat::CpSolverResponse *)&v218, 0);
                if ((_DWORD)__sz == 4)
                {
                  operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(*(_QWORD *)(*(_QWORD *)(v1 + 640) + 32), (absl::lts_2020_02_25::Mutex *)v220[0]);
                  v164 = *(unsigned __int8 ***)(*(_QWORD *)(v1 + 640) + 16);
                  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v164, v165);
                  atomic_store(1u, v164[3]);
                  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v164, v166, v167, v168, v169, v170, v171, v172);
                }
              }
              operations_research::sat::SharedRelaxationSolutionRepository::NewRelaxationSolution(*(void ***)(*(_QWORD *)(v1 + 640) + 40), &v218.__r_.__value_.__l.__data_);
            }
            v141 = 0;
          }
          else
          {
            v136 = SLODWORD(v218.__r_.__value_.__r.__words[2]);
            if (LODWORD(v218.__r_.__value_.__r.__words[2]))
            {
              v137 = **(_QWORD **)(v1 + 640);
              v138 = v219;
              v253 = 0.0;
              v251 = 0;
              v252 = 0;
              if ((v218.__r_.__value_.__r.__words[2] & 0x80000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v139 = 8 * SLODWORD(v218.__r_.__value_.__r.__words[2]);
              v251 = operator new(v139);
              v252 = (std::string::size_type)v251;
              v140 = (char *)v251 + 8 * v136;
              v253 = *(double *)&v140;
              memcpy(v251, v138, v139);
              v252 = (std::string::size_type)v140;
              if ((operations_research::sat::SolutionIsFeasible(v137, (uint64_t)&v251, 0, 0) & 1) == 0)
              {
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v262, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2395);
                v210 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v262);
                v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)"Check failed: SolutionIsFeasible( *shared_->model_proto, std::vector<int64>(local_response.solution().begin(), local_response.solution().end())) ", 145);
                if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v212 = &v233;
                else
                  v212 = (std::string *)v233.__r_.__value_.__r.__words[0];
                if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v213 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                else
                  v213 = v233.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)v212, v213);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v262);
              }
              if (v251)
              {
                v252 = (std::string::size_type)v251;
                operator delete(v251);
              }
            }
            if ((_DWORD)__sz == 4 || (v141 = v216, (_DWORD)__sz == 2))
            {
              v142 = *(_QWORD *)(**(_QWORD **)(v1 + 640) + 120)
                   ? *(operations_research::sat **)(**(_QWORD **)(v1 + 640) + 120)
                   : (operations_research::sat *)&operations_research::sat::_CpObjectiveProto_default_instance_;
              v141 = operations_research::sat::ComputeInnerObjective(v142, (const operations_research::sat::CpObjectiveProto *)&v218, v127);
              if ((_DWORD)__sz == 4 || (_DWORD)__sz == 2)
                operations_research::sat::SharedResponseManager::NewSolution(*(operations_research::sat::SharedResponseManager **)(*(_QWORD *)(v1 + 640) + 32), (const operations_research::sat::CpSolverResponse *)&v218, 0);
            }
            if (!HIBYTE(v235) && (__sz - 3) <= 1)
            {
              operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(*(_QWORD *)(*(_QWORD *)(v1 + 640) + 32), (absl::lts_2020_02_25::Mutex *)v220[0]);
              v143 = *(unsigned __int8 ***)(*(_QWORD *)(v1 + 640) + 16);
              absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v143, v144);
              atomic_store(1u, v143[3]);
              absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v143, v145, v146, v147, v148, v149, v150, v151);
            }
            v152 = 0;
            InnerObjectiveLowerBound = 0;
          }
          v173 = *(_QWORD **)(v1 + 48);
          v251 = v215;
          LODWORD(v252) = (_DWORD)v124;
          v253 = v8;
          v254 = v18;
          v255 = v125;
          v256 = v214;
          v257 = v83;
          v258 = v141;
          v259 = InnerObjectiveLowerBound;
          v260 = v152;
          operations_research::sat::NeighborhoodGenerator::AddSolveData(v173, (absl::lts_2020_02_25::Mutex *)&v251);
          if (*off_2540794B8[0] >= 2)
          {
            v174 = *(_QWORD *)(v0 + 8);
            if (off_2540794B8[0] != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_2540794B8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)2))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v217, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2426);
              v175 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v217);
              if (*(char *)(v1 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(v1 + 8), *(_QWORD *)(v1 + 16));
              }
              else
              {
                v176 = *(_OWORD *)(v1 + 8);
                v262.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 24);
                *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v176;
              }
              if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v177 = &v262;
              else
                v177 = (std::string *)v262.__r_.__value_.__r.__words[0];
              if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v178 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
              else
                v178 = v262.__r_.__value_.__l.__size_;
              v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)v177, v178);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)": [difficulty: ", 15);
              v180 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)", id: ", 6);
              v181 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)", deterministic_time: ", 22);
              v182 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)" / ", 3);
              v183 = (_QWORD *)std::ostream::operator<<();
              v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)", status: ", 10);
              operations_research::ProtoEnumToString<operations_research::sat::CpSolverStatus>(v124, v261);
              if ((v261[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v185 = v261;
              else
                v185 = (std::string *)v261[0].__r_.__value_.__r.__words[0];
              if ((v261[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v186 = HIBYTE(v261[0].__r_.__value_.__r.__words[2]);
              else
                v186 = v261[0].__r_.__value_.__l.__size_;
              v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)v185, v186);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)", num calls: ", 13);
              v188 = *(_QWORD *)(v1 + 48);
              absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v188 + 40), v189);
              absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v188 + 40), v190, v191, v192, v193, v194, v195, v196);
              v197 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)", UCB1 Score: ", 14);
              operations_research::sat::NeighborhoodGenerator::GetUCBScore(*(operations_research::sat::NeighborhoodGenerator **)(v1 + 48), (absl::lts_2020_02_25::Mutex *)(int)v174);
              v198 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)", p: ", 5);
              v199 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"]", 1);
              if (SHIBYTE(v261[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v261[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v262.__r_.__value_.__l.__data_);
              google::LogMessage::~LogMessage((google::LogMessage *)&v217);
            }
          }
          operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&v218);
          if (v270 < 0)
            operator delete(v269);
          v200 = (char *)v267;
          if (!v267)
          {
LABEL_183:
            operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v266);
            operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&v265);
            absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v264);
            operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)((char *)v284 + 8));
            if (v222)
            {
              v223 = v222;
              operator delete(v222);
            }
            operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v225);
            v205 = v230;
            if (v230)
            {
              v206 = v231;
              v207 = v230;
              if (v231 != v230)
              {
                do
                {
                  v209 = *--v206;
                  v208 = v209;
                  *v206 = 0;
                  if (v209)
                    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
                }
                while (v206 != v205);
                v207 = v230;
              }
              v231 = v205;
              operator delete(v207);
            }
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v228, v229[0]);
            if (SHIBYTE(v227) < 0)
            {
              operator delete(v226[0]);
              operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v274);
              if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_195:
                if ((SHIBYTE(v234.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_196;
                goto LABEL_203;
              }
            }
            else
            {
              operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v274);
              if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_195;
            }
            operator delete(v233.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v234.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_196;
LABEL_203:
            operator delete(v234.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v243) & 0x80000000) == 0)
            {
LABEL_198:
              operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&v236);
              operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v244);
              if (v248)
              {
                v249 = v248;
                operator delete(v248);
              }
              return;
            }
LABEL_197:
            operator delete((void *)v242);
            goto LABEL_198;
          }
          v201 = v268;
          v202 = v267;
          if (v268 == v267)
          {
LABEL_182:
            v268 = v200;
            operator delete(v202);
            goto LABEL_183;
          }
          while (1)
          {
            v203 = (char *)*((_QWORD *)v201 - 1);
            if (v201 - 32 == v203)
            {
              v203 = v201 - 32;
              v204 = 4;
            }
            else
            {
              if (!v203)
                goto LABEL_177;
              v204 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v203 + 8 * v204))();
LABEL_177:
            v201 -= 40;
            if (v201 == v200)
            {
              v202 = v267;
              goto LABEL_182;
            }
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v220, v122, (__int128 *)&v233);
        goto LABEL_98;
      }
    }
    else
    {
      v47 = (_QWORD *)(*(_QWORD *)&v284[1] & 0xFFFFFFFFFFFFFFFELL);
      if ((v284[1] & 1) == 0)
        goto LABEL_21;
    }
    if (v46 != (_QWORD *)*v47)
      goto LABEL_22;
    goto LABEL_25;
  }
}

void sub_22DB118D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_19LnsSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::LnsSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(_QWORD *a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  unint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  _BYTE *v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  absl::lts_2020_02_25::Mutex *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (uint64_t)a2;
  v6 = (absl::lts_2020_02_25::Mutex *)(a1 + 1);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), a2);
  v14 = (char *)a1[3];
  v16 = (uint64_t *)a1[6];
  v15 = (_QWORD *)a1[7];
  v17 = *v16;
  v60 = (void **)(a1 + 3);
  a1[4] = v14;
  if (v15 == v16)
  {
    v45 = -858993459 * (v15 - v16);
    v42 = __OFSUB__(v45, 1);
    v46 = v45 - 1;
    if (v46 < 0 == v42)
    {
LABEL_40:
      LODWORD(v61) = 0;
      HIDWORD(v61) = v46;
      v62 = v61;
      v47 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v3, (int *)&v62);
      goto LABEL_46;
    }
LABEL_43:
    v47 = 0;
    goto LABEL_46;
  }
  v56 = v3;
  v57 = a3;
  v58 = v6;
  v59 = v17;
  v18 = 0;
  do
  {
    v21 = (int *)&v16[5 * v18];
    if (*(_QWORD *)v21 == v17 && v21[8] <= 100)
    {
      v22 = a1[5];
      if ((unint64_t)v14 < v22)
      {
        *(_DWORD *)v14 = v18;
        v19 = (uint64_t)(v14 + 4);
LABEL_4:
        a1[4] = v19;
        v14 = (char *)v19;
        goto LABEL_5;
      }
      v23 = (char *)*v60;
      v24 = v14 - (_BYTE *)*v60;
      v25 = v24 >> 2;
      v26 = (v24 >> 2) + 1;
      if (v26 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)v23;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = operator new(4 * v28);
        v30 = &v29[4 * v25];
        *v30 = v18;
        v19 = (uint64_t)(v30 + 1);
        if (v14 == v23)
          goto LABEL_23;
      }
      else
      {
        v29 = 0;
        v30 = (_DWORD *)(4 * v25);
        *(_DWORD *)(4 * v25) = v18;
        v19 = 4 * v25 + 4;
        if (v14 == v23)
          goto LABEL_23;
      }
      v31 = v14 - 4 - v23;
      if (v31 >= 0xBC)
      {
        if (&v29[v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v24 - 4])
        {
          v32 = v14;
        }
        else if (&v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          v32 = v14;
        }
        else if ((unint64_t)(v14 - &v29[v24]) >= 0x20)
        {
          v34 = (v31 >> 2) + 1;
          v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v32 = &v14[-v35];
          v30 = (_DWORD *)((char *)v30 - v35);
          v36 = &v29[4 * v25 - 16];
          v37 = v14 - 16;
          v38 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 8;
          }
          while (v38);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_23;
        }
        else
        {
          v32 = v14;
        }
      }
      else
      {
        v32 = v14;
      }
      do
      {
        v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--v30 = v33;
      }
      while (v32 != v23);
LABEL_23:
      a1[3] = v30;
      a1[4] = v19;
      a1[5] = &v29[4 * v28];
      if (v23)
      {
        operator delete(v23);
        v16 = (uint64_t *)a1[6];
        v15 = (_QWORD *)a1[7];
      }
      v17 = v59;
      goto LABEL_4;
    }
LABEL_5:
    ++v18;
    v20 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v16);
  }
  while (v20 > v18);
  v40 = *v60;
  if (*v60 == v14)
  {
    a3 = v57;
    v6 = v58;
    v3 = v56;
    v42 = __OFSUB__((_DWORD)v20, 1);
    v46 = v20 - 1;
    if (v46 < 0 == v42)
      goto LABEL_40;
    goto LABEL_43;
  }
  v41 = (unint64_t)(v14 - v40) >> 2;
  v42 = __OFSUB__((_DWORD)v41, 1);
  v43 = v41 - 1;
  a3 = v57;
  v6 = v58;
  v7 = (absl::lts_2020_02_25::Mutex *)v56;
  if (v43 < 0 != v42)
  {
    v44 = 0;
  }
  else
  {
    LODWORD(v61) = 0;
    HIDWORD(v61) = v43;
    v62 = v61;
    v44 = (int)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v56, (int *)&v62);
    v40 = *v60;
  }
  v47 = *(_DWORD *)&v40[4 * v44];
LABEL_46:
  v48 = a1[6] + 40 * v47;
  v49 = *(_DWORD *)(v48 + 32) + 1;
  *(_DWORD *)(v48 + 32) = v49;
  v50 = *(_QWORD *)v48;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v50;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v52 = *(_BYTE **)(v48 + 8);
  v51 = *(_BYTE **)(v48 + 16);
  v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = (char *)operator new(v51 - v52);
    *(_QWORD *)(a3 + 8) = v54;
    v55 = &v54[8 * (v53 >> 3)];
    *(_QWORD *)(a3 + 24) = v55;
    memcpy(v54, v52, v53);
    *(_QWORD *)(a3 + 16) = v55;
  }
  *(_DWORD *)(a3 + 32) = v49;
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_22DB12154(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, absl::lts_2020_02_25::Mutex *a12)
{
  absl::lts_2020_02_25::Mutex *v12;

  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<long long>::GetSolution(uint64_t a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;

  v3 = (int)a2;
  v6 = (absl::lts_2020_02_25::Mutex *)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 8), a2);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = (uint64_t *)(v14 + 40 * v3);
  v16 = *v15;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v18 = (_BYTE *)v15[1];
  v17 = (_BYTE *)v15[2];
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a3 + 8) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a3 + 24) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a3 + 16) = v21;
  }
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v14 + 40 * v3 + 32);
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_22DB12264(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 16) = v12;
    operator delete(v12);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::PostsolveResponseWrapper(char a1, uint64_t a2, operations_research::sat::CpModelProto *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  __n128 v9;
  int v10;
  BOOL v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void **p_p;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t *v27;
  void **v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  operations_research::sat::Model *v39;
  operations_research::sat::Model *v40;
  absl::lts_2020_02_25::Mutex *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int *v67;
  _BYTE v68[24];
  int v69;
  uint64_t v70;
  _BYTE v71[16];
  _QWORD v72[2];
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  unint64_t v83[3];
  int8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[11];
  int v88;
  int v89;
  void *v90;
  char *v91;
  void *v92;
  char v93;
  void *v94[2];
  uint64_t v95;
  _QWORD **v96;
  _QWORD *v97[2];
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  void *__p;
  _BYTE v103[24];
  _BYTE *v104;
  uint64_t v105;

  v7 = a4;
  v105 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    operations_research::sat::PostsolveResponse(a2, (uint64_t)a3, a4, a6);
    return;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v68, a3);
  v10 = *(_DWORD *)(a6 + 152);
  v11 = v10 == 4 || v10 == 2;
  if (v11 && v69)
  {
    if (*(int *)(a6 + 16) >= 1)
    {
      for (i = 0; i < *(int *)(a6 + 16); ++i)
      {
        v13 = *(_QWORD *)(v70 + 8 * *(int *)(*v7 + 4 * i) + 8);
        *(_DWORD *)(v13 + 16) = 0;
        v14 = (unsigned int *)(v13 + 16);
        v15 = *(_QWORD *)(a6 + 24);
        v16 = *(_QWORD *)(v15 + 8 * i);
        v17 = *(_DWORD *)(v13 + 20);
        if (v17)
        {
          v18 = *(_QWORD **)(v13 + 24);
          *v18 = v16;
          *(_DWORD *)(v13 + 16) = 1;
          v19 = *(_QWORD *)(v15 + 8 * i);
          if (v17 == 1)
            goto LABEL_15;
        }
        else
        {
          google::protobuf::RepeatedField<long long>::Reserve(v14, 1);
          v20 = *(_QWORD *)(a6 + 24);
          v21 = *(_DWORD *)(v13 + 20);
          v18 = *(_QWORD **)(v13 + 24);
          *v18 = v16;
          *(_DWORD *)(v13 + 16) = 1;
          v19 = *(_QWORD *)(v20 + 8 * i);
          if (v21 == 1)
          {
LABEL_15:
            google::protobuf::RepeatedField<long long>::Reserve(v14, 2);
            v18 = *(_QWORD **)(v13 + 24);
          }
        }
        v18[1] = v19;
        *v14 = 2;
      }
    }
    v64 = a5;
    v67 = (unsigned int *)(a6 + 40);
    if (*(int *)(a6 + 40) >= 1)
    {
      v22 = 0;
      p_p = &__p;
      v65 = v7;
      do
      {
        v24 = *(_QWORD *)(v70 + 8 * *(int *)(*v7 + 4 * v22) + 8);
        v25 = (unsigned int *)(v24 + 16);
        operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v24 + 24), *(int *)(v24 + 16), v83, v9);
        operations_research::Domain::Domain(v72, *(_QWORD *)(*(_QWORD *)(a6 + 48) + 8 * v22), *(_QWORD *)(*(_QWORD *)(a6 + 72) + 8 * v22));
        operations_research::Domain::IntersectionWith(v83, (const operations_research::Domain *)v72, &v101);
        *(_DWORD *)(v24 + 16) = 0;
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 16), v101 >> 1);
        v26 = v101 & 1;
        if ((v101 & 1) != 0)
          v27 = (uint64_t *)__p;
        else
          v27 = (uint64_t *)p_p;
        if (v101 >= 2)
        {
          v28 = p_p;
          v29 = &v27[2 * (v101 >> 1)];
          v30 = *(_DWORD *)(v24 + 16);
          do
          {
            v31 = *v27;
            v32 = *(_DWORD *)(v24 + 20);
            v33 = v30 + 1;
            if (v30 == v32)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v25, v30 + 1);
              v32 = *(_DWORD *)(v24 + 20);
            }
            v34 = *(_QWORD *)(v24 + 24);
            *(_QWORD *)(v34 + 8 * v30) = v31;
            *(_DWORD *)(v24 + 16) = v33;
            v35 = v27[1];
            v30 += 2;
            if (v33 == v32)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v25, v30);
              v34 = *(_QWORD *)(v24 + 24);
            }
            *(_QWORD *)(v34 + 8 * v33) = v35;
            *v25 = v30;
            v27 += 2;
          }
          while (v27 != v29);
          v26 = v101 & 1;
          p_p = v28;
          v7 = v65;
        }
        if (v26)
          operator delete(__p);
        if ((v72[0] & 1) != 0)
        {
          operator delete((void *)v72[1]);
          if ((v83[0] & 1) != 0)
LABEL_37:
            operator delete((void *)v83[1]);
        }
        else if ((v83[0] & 1) != 0)
        {
          goto LABEL_37;
        }
        ++v22;
      }
      while (v22 < (int)*v67);
    }
    v94[1] = 0;
    v94[0] = 0;
    v97[0] = 0;
    v97[1] = 0;
    v95 = 0;
    v96 = v97;
    v100 = 0;
    v98 = 0;
    v99 = 0;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v83, 0);
    v88 = 0;
    v84 = vorr_s8(v84, (int8x8_t)0x2004000000);
    v89 = 0;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v101, (const operations_research::sat::SatParameters *)v83);
    v104 = 0;
    v36 = operator new(0x248uLL);
    *v36 = &off_24F985078;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v36 + 1), (const operations_research::sat::SatParameters *)&v101);
    v104 = v36;
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v101);
    v72[0] = v94;
    if (!v104)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(unint64_t *__return_ptr, _BYTE *, _QWORD *))(*(_QWORD *)v104 + 48))(&v101, v104, v72);
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v101);
    v37 = v104;
    if (v104 == v103)
    {
      v38 = 4;
      v37 = v103;
    }
    else
    {
      if (!v104)
      {
LABEL_44:
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v83);
        operations_research::TimeLimit::Infinite(&v82);
        v78 = 0;
        v79 = v82;
        v80 = 0;
        v81 = *(char **)(v82 + 120);
        if (!v81)
        {
          v81 = &v80;
          *(_QWORD *)(v82 + 120) = &v80;
        }
        operations_research::sat::SharedResponseManager::SharedResponseManager((uint64_t)v83, 0, 0, (uint64_t)v68, v64, (uint64_t)&v78);
        operations_research::sat::SharedResponseManager::GetResponse((operations_research::sat::SharedResponseManager *)v83, v41, (operations_research::sat::CpSolverResponse *)v72);
        if (v77 != 2 && v77 != 4)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v71, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1677);
          v63 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: postsolve_response.status() == CpSolverStatus::FEASIBLE || postsolve_response.status() == CpSolverStatus::OPTIMAL ", 128);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v71);
        }
        *(_DWORD *)(a6 + 64) = 0;
        *(_DWORD *)(a6 + 16) = 0;
        *(_DWORD *)(a6 + 40) = 0;
        if (v73)
        {
          if (a2 >= 1)
          {
            v42 = 0;
            do
            {
              v43 = *(_QWORD *)(v74 + 8 * v42);
              v44 = v42 + 1;
              if ((_DWORD)v42 == *(_DWORD *)(a6 + 20))
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(a6 + 16), v42 + 1);
              *(_QWORD *)(*(_QWORD *)(a6 + 24) + 8 * v42) = v43;
              *(_DWORD *)(a6 + 16) = v44;
              ++v42;
            }
            while (a2 != v44);
          }
        }
        else if (a2 >= 1)
        {
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = *(_QWORD *)(v75 + 8 * v46);
            v48 = *(unsigned int *)(a6 + 40);
            v49 = v45;
            if ((_DWORD)v48 == *(_DWORD *)(a6 + 44))
            {
              google::protobuf::RepeatedField<long long>::Reserve(v67, v48 + 1);
              v49 = *(_DWORD *)(a6 + 64);
            }
            *(_QWORD *)(*(_QWORD *)(a6 + 48) + 8 * v48) = v47;
            *(_DWORD *)(a6 + 40) = v48 + 1;
            v50 = *(_QWORD *)(v76 + 8 * v46);
            v45 = v49 + 1;
            if (v49 == *(_DWORD *)(a6 + 68))
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(a6 + 64), v49 + 1);
            *(_QWORD *)(*(_QWORD *)(a6 + 72) + 8 * v49) = v50;
            *(_DWORD *)(a6 + 64) = v45;
            ++v46;
          }
          while (a2 != v46);
        }
        operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v72);
        if (v93 < 0)
          operator delete(v92);
        v51 = (char *)v90;
        if (!v90)
          goto LABEL_74;
        v52 = v91;
        v53 = v90;
        if (v91 == v90)
        {
LABEL_73:
          v91 = v51;
          operator delete(v53);
LABEL_74:
          operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v87);
          operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&v86);
          absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v85);
          if (v81 == &v80)
            *(_QWORD *)(v79 + 120) = 0;
          absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v78);
          v56 = v82;
          v82 = 0;
          if (v56)
          {
            v57 = *(void **)(v56 + 40);
            if (v57)
            {
              *(_QWORD *)(v56 + 48) = v57;
              operator delete(v57);
            }
            MEMORY[0x22E31DF78](v56, 0x1030C40021678CBLL);
          }
          v58 = v98;
          if (v98)
          {
            v59 = v99;
            v60 = v98;
            if (v99 != v98)
            {
              do
              {
                v62 = *--v59;
                v61 = v62;
                *v59 = 0;
                if (v62)
                  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
              }
              while (v59 != v58);
              v60 = v98;
            }
            v99 = v58;
            operator delete(v60);
          }
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v96, v97[0]);
          if (SHIBYTE(v95) < 0)
            operator delete(v94[0]);
          goto LABEL_90;
        }
        while (1)
        {
          v54 = (char *)*((_QWORD *)v52 - 1);
          if (v52 - 32 == v54)
          {
            v54 = v52 - 32;
            v55 = 4;
          }
          else
          {
            if (!v54)
              goto LABEL_68;
            v55 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_68:
          v52 -= 40;
          if (v52 == v51)
          {
            v53 = v90;
            goto LABEL_73;
          }
        }
      }
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_44;
  }
LABEL_90:
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v68);
}

void sub_22DB129DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t a66;
  uint64_t a68;
  uint64_t a69;
  __int16 a70;
  uint64_t v70;

  operations_research::sat::SharedResponseManager::~SharedResponseManager((operations_research::sat::SharedResponseManager *)&a70);
  if (a68 == v70)
    *(_QWORD *)(a66 + 120) = 0;
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&a65);
  std::unique_ptr<operations_research::TimeLimit>::~unique_ptr[abi:ne180100](&a69);
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x428]);
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&a14);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGenerator::AddSolveData(_QWORD *a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = (absl::lts_2020_02_25::Mutex *)(a1 + 5);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 5), a2);
  v13 = (_OWORD *)a1[7];
  v12 = a1[8];
  if ((unint64_t)v13 >= v12)
  {
    v18 = (_OWORD *)a1[6];
    v19 = 0xCCCCCCCCCCCCCCCDLL * (v13 - v18) + 1;
    if (v19 > 0x333333333333333)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v18) >> 4);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x199999999999999)
      v21 = 0x333333333333333;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = (char *)operator new(80 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[16 * (v13 - v18)];
    v24 = *((_OWORD *)a2 + 3);
    *((_OWORD *)v23 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)v23 + 3) = v24;
    *((_OWORD *)v23 + 4) = *((_OWORD *)a2 + 4);
    v25 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v23 = *(_OWORD *)a2;
    *((_OWORD *)v23 + 1) = v25;
    v17 = v23 + 80;
    if (v13 != v18)
    {
      do
      {
        *((_OWORD *)v23 - 5) = *(v13 - 5);
        v26 = *(v13 - 4);
        v27 = *(v13 - 3);
        v28 = *(v13 - 1);
        *((_OWORD *)v23 - 2) = *(v13 - 2);
        *((_OWORD *)v23 - 1) = v28;
        *((_OWORD *)v23 - 4) = v26;
        *((_OWORD *)v23 - 3) = v27;
        v23 -= 80;
        v13 -= 5;
      }
      while (v13 != v18);
      v13 = (_OWORD *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v17;
    a1[8] = &v22[80 * v21];
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v13 = *(_OWORD *)a2;
    v14 = *((_OWORD *)a2 + 1);
    v15 = *((_OWORD *)a2 + 2);
    v16 = *((_OWORD *)a2 + 4);
    v13[3] = *((_OWORD *)a2 + 3);
    v13[4] = v16;
    v13[1] = v14;
    v13[2] = v15;
    v17 = v13 + 5;
  }
  a1[7] = v17;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_22DB12CF0(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void std::seed_seq::__init[abi:ne180100]<int const*>(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *(char **)(a1 + 8);
    while (1)
    {
      v8 = *v4;
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v6 >= v9)
        break;
      *(_DWORD *)v6 = v8;
      v7 = (uint64_t)(v6 + 4);
LABEL_4:
      *(_QWORD *)(a1 + 8) = v7;
      ++v4;
      v6 = (char *)v7;
      if (v4 == a3)
        return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v6[-*(_QWORD *)a1];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v12];
      *v17 = v8;
      v7 = (uint64_t)(v17 + 1);
      if (v6 == v10)
        goto LABEL_29;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = v8;
      v7 = 4 * v12 + 4;
      if (v6 == v10)
        goto LABEL_29;
    }
    v18 = v6 - 4 - v10;
    if (v18 >= 0xBC)
    {
      if (&v16[v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v11 - 4])
      {
        v19 = v6;
      }
      else if (&v6[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
      {
        v19 = v6;
      }
      else if ((unint64_t)(v6 - v16 - v11) >= 0x20)
      {
        v20 = (v18 >> 2) + 1;
        v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        v19 = &v6[-v21];
        v17 = (_DWORD *)((char *)v17 - v21);
        v22 = &v16[4 * v12 - 16];
        v23 = v6 - 16;
        v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 8;
        }
        while (v24);
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v19 = v6;
      }
    }
    else
    {
      v19 = v6;
    }
    do
    {
      v26 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--v17 = v26;
    }
    while (v19 != v10);
LABEL_29:
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v16[4 * v15];
    if (v10)
      operator delete(v10);
    goto LABEL_4;
  }
}

unint64_t std::seed_seq::generate[abi:ne180100]<unsigned int *>(unint64_t result, _DWORD *__b, _BYTE *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;

  if (__b == (_DWORD *)a3)
    return result;
  v4 = (int **)result;
  v5 = a3 - (_BYTE *)__b;
  if (a3 - (_BYTE *)__b >= 1)
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = v5 >> 2;
  v8 = *v4;
  v7 = v4[1];
  v9 = (char *)v7 - (char *)*v4;
  v10 = v9 >> 2;
  v11 = 11;
  v12 = 7;
  v13 = 5;
  v14 = 3;
  v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18)
    v14 = v15 >> 1;
  if ((unint64_t)v5 <= 0x98)
    v13 = v14;
  if ((unint64_t)v5 <= 0x10C)
    v12 = v13;
  if ((unint64_t)v5 <= 0x9B8)
    v11 = v12;
  v16 = (unint64_t)v9 >> 2;
  v17 = (v6 - v11) >> 1;
  v18 = v17 + v11;
  v19 = v10 + 1;
  if (v10 + 1 > v6)
    v20 = v10 + 1;
  else
    v20 = v5 >> 2;
  v21 = __b[v17];
  v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  v24 = v17 % v6;
  result = v18 / v6;
  v25 = v18 % v6;
  if (v7 == v8)
  {
    v26 = 0;
    if (v19 >= v6)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = 2;
    if (v19 > 2)
      v27 = v10 + 1;
    result = v27 - 1;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      v28 = __b[v24];
      v29 = __b[v26] ^ __b[v15] ^ v28;
      v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      v32 = *v8++;
      v31 = v32;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6)
      goto LABEL_49;
  }
  v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6)
      v26 = 0;
    else
      ++v26;
    if (v15 + 1 == v6)
      v15 = 0;
    else
      ++v15;
    if (v24 + 1 == v6)
      v24 = 0;
    else
      ++v24;
    v35 = __b[v24];
    if (v25 + 1 == v6)
      v25 = 0;
    else
      ++v25;
    v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    v37 = v36 + v26;
    result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v39 = __b[v24];
      v40 = v39 + __b[v26] + __b[v15];
      v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      v42 = v41 - v26;
      result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

uint64_t operations_research::sat::RelaxationInducedNeighborhoodGenerator::RelaxationInducedNeighborhoodGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  std::string *v13;
  __int128 v14;
  _QWORD *v16;
  _BYTE v17[16];

  *(_QWORD *)a1 = off_24F982810;
  v13 = (std::string *)(a1 + 8);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v14 = *a7;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)a1 = &unk_24F982A18;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 144) = a4;
  *(_QWORD *)(a1 + 152) = a5;
  *(_QWORD *)(a1 + 160) = a6;
  if (!a5 && !(a4 | a6))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.h", 441);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: lp_solutions_ != nullptr || relaxation_solutions_ != nullptr || incomplete_solutions != nullptr ", 110);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return a1;
}

void sub_22DB132E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB132E8(_Unwind_Exception *a1)
{
  operations_research::sat::NeighborhoodGenerator *v1;

  operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F984BF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F984BF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  operations_research::sat::SharedResponseManager::UpdatePrimalIntegral(*(operations_research::sat::SharedResponseManager **)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedR"
                     "esponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS"
                                "0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t operations_research::sat::`anonymous namespace'::`anonymous namespace'::GetOrCreateVariableWithTightBound(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t ConstantIntegerVariable;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  operations_research::sat::IntegerTrail *v27;
  uint64_t (***v28)();
  uint64_t v29;
  operations_research::sat::IntegerTrail *v30;
  unint64_t v32[2];
  uint64_t v33;
  uint64_t *v34;
  uint64_t (**v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t (**v39)();
  int v40;
  uint64_t (***v41)();
  uint64_t (**v42)();
  int v43;
  uint64_t (***v44)();
  uint64_t (**v45)();
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
  {
    v45 = &off_24F984A48;
    v46 = 0;
    v47 = &v45;
    v30 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
    ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v30, v46);
    v28 = v47;
    if (v47 == &v45)
    {
      v29 = 4;
      v28 = &v45;
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  if (a2 - a1 != 16)
    goto LABEL_6;
  v4 = *((_QWORD *)a1 + 1);
  if (v4 == -1)
    return *(_DWORD *)a1 ^ 1u;
  if (v4 != 1)
  {
LABEL_6:
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD **)(a3 + 32);
    do
    {
      v9 = *(_DWORD *)a1;
      v10 = *(_DWORD *)a1;
      v11 = *((_QWORD *)a1 + 1);
      v44 = &v42;
      v12 = a3 + 32;
      v13 = v8;
      do
      {
        v14 = v13[4];
        v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v16 = v13;
        else
          v16 = v13 + 1;
        if (v15)
          v12 = (uint64_t)v13;
        v13 = (_QWORD *)*v16;
      }
      while (*v16);
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 40) + 12 * v10);
      v41 = &v39;
      v18 = a3 + 32;
      v19 = v8;
      do
      {
        v20 = v19[4];
        v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v22 = v19;
        else
          v22 = v19 + 1;
        if (v21)
          v18 = (uint64_t)v19;
        v19 = (_QWORD *)*v22;
      }
      while (*v22);
      v23 = v17 * v11;
      v24 = v11 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 40) + 12 * (v9 ^ 1));
      if (-v24 < v23)
        v25 = -v24;
      else
        v25 = v23;
      v6 += v25;
      if (v23 <= -v24)
        v26 = -v24;
      else
        v26 = v23;
      v7 += v26;
      a1 += 16;
    }
    while (a1 != a2);
    v42 = &off_24F982FF8;
    v43 = v9;
    v40 = v9;
    v35 = &off_24F984000;
    v36 = v6;
    v37 = v7;
    v38 = &v35;
    v39 = &off_24F9830C0;
    v32[0] = v6;
    v33 = v7;
    if (v6 > v7)
    {
      v34 = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)v32, (int)&v33, "lb <= ub");
      if (v34)
      {
        google::LogMessageFatal::LogMessageFatal(v32, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1338, &v34);
        google::LogMessage::stream((google::LogMessage *)v32);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v32);
      }
    }
    v27 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
    ConstantIntegerVariable = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v27, v36, v37);
    v28 = v38;
    if (v38 == &v35)
    {
      v29 = 4;
      v28 = &v35;
      goto LABEL_37;
    }
LABEL_34:
    if (!v28)
      return ConstantIntegerVariable;
    v29 = 5;
LABEL_37:
    (*v28)[v29]();
    return ConstantIntegerVariable;
  }
  return *(unsigned int *)a1;
}

void sub_22DB13684(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB1368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 32);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 56);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::`anonymous namespace'::`anonymous namespace'::GetOrCreateVariableGreaterOrEqualToSumOf(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t ConstantIntegerVariable;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  operations_research::sat::IntegerTrail *v50;
  uint64_t (***v51)();
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  unsigned int *v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  unsigned int v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  _BYTE *v78;
  _QWORD *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v99;
  unsigned int VariableWithTightBound;
  char *v101;
  unint64_t v102;
  void *__p;
  void *v104;
  char *v105;
  void *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint64_t (**v112)();
  uint64_t v113;
  uint64_t (***v114)();
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  if (v4 == v5)
  {
    v112 = &off_24F984A48;
    v113 = 0;
    v114 = &v112;
    v50 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
    ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v50, v113);
    v51 = v114;
    if (v114 == &v112)
    {
      v52 = 4;
      v51 = &v112;
    }
    else
    {
      if (!v114)
        return ConstantIntegerVariable;
      v52 = 5;
    }
    (*v51)[v52]();
    return ConstantIntegerVariable;
  }
  if (v5 - v4 == 16)
  {
    v6 = *((_QWORD *)v4 + 1);
    if (v6 == -1)
      return *(_DWORD *)v4 ^ 1u;
    if (v6 == 1)
      return *(unsigned int *)v4;
  }
  v99 = a2;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  __p = 0;
  v104 = 0;
  v105 = 0;
  v8 = *a1;
  v101 = a1[1];
  if (*a1 == v101)
  {
    v13 = 0;
    v14 = 0;
    v10 = 0;
    v12 = 0;
    v9 = 0;
    v54 = 0;
    v106 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 1;
    goto LABEL_73;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    while (1)
    {
      v102 = (unint64_t)v11;
      if (v10 >= v12)
        break;
      *(_DWORD *)v10 = *(_DWORD *)v8;
      v10 += 4;
      if (v9 >= v11)
        goto LABEL_29;
LABEL_8:
      *(_QWORD *)v9 = *((_QWORD *)v8 + 1);
      v9 += 8;
      v8 += 16;
      if (v8 == v101)
        goto LABEL_70;
    }
    v15 = v10 - v13;
    v16 = (v10 - v13) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
    {
      v107 = (uint64_t)v10;
      v108 = v12;
      v105 = v11;
      v106 = v13;
      __p = v14;
      v104 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v12 - v13) >> 1 > v17)
      v17 = (v12 - v13) >> 1;
    if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = v10;
      v20 = v9;
      if (v18 >> 62)
        goto LABEL_133;
      v21 = operator new(4 * v18);
      v9 = v20;
      v10 = v19;
      v22 = &v21[4 * v16];
      *(_DWORD *)v22 = *(_DWORD *)v8;
      v23 = (uint64_t)(v22 + 4);
      if (v19 == v13)
        goto LABEL_26;
    }
    else
    {
      v21 = 0;
      v22 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = *(_DWORD *)v8;
      v23 = 4 * v16 + 4;
      if (v10 == v13)
        goto LABEL_26;
    }
    v24 = v10 - 4 - v13;
    if (v24 < 0xBC)
    {
      v25 = v10;
      goto LABEL_25;
    }
    if (&v21[v15 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v15 - 4])
    {
      v25 = v10;
      do
      {
LABEL_25:
        v26 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v22 - 1) = v26;
        v22 -= 4;
      }
      while (v25 != v13);
      goto LABEL_26;
    }
    if (&v10[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
    {
      v25 = v10;
      goto LABEL_25;
    }
    if ((unint64_t)(v10 - &v21[v15]) < 0x20)
    {
      v25 = v10;
      goto LABEL_25;
    }
    v38 = (v24 >> 2) + 1;
    v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v39];
    v22 -= v39;
    v40 = &v21[4 * v16 - 16];
    v41 = v10 - 16;
    v42 = v38 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_25;
LABEL_26:
    v12 = &v21[4 * v18];
    if (v13)
    {
      v27 = v9;
      operator delete(v13);
      v9 = v27;
    }
    v13 = v22;
    v10 = (char *)v23;
    v11 = (char *)v102;
    if ((unint64_t)v9 < v102)
      goto LABEL_8;
LABEL_29:
    v28 = v9 - v14;
    v29 = (v9 - v14) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
    {
      v107 = (uint64_t)v10;
      v108 = v12;
      v105 = v11;
      v106 = v13;
      __p = v14;
      v104 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v11 - v14) >> 2 > v30)
      v30 = (v11 - v14) >> 2;
    v19 = v10;
    if ((unint64_t)(v11 - v14) >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
    {
      v20 = v9;
      if (v31 >> 61)
      {
LABEL_133:
        v107 = (uint64_t)v19;
        v108 = v12;
        v105 = (char *)v102;
        v106 = v13;
        __p = v14;
        v104 = v20;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v32 = operator new(8 * v31);
      v9 = v20;
      v33 = &v32[8 * v29];
      *(_QWORD *)v33 = *((_QWORD *)v8 + 1);
      v34 = (uint64_t)(v33 + 8);
      if (v9 == v14)
        goto LABEL_43;
    }
    else
    {
      v32 = 0;
      v33 = (char *)(8 * v29);
      *(_QWORD *)(8 * v29) = *((_QWORD *)v8 + 1);
      v34 = 8 * v29 + 8;
      if (v9 == v14)
        goto LABEL_43;
    }
    v35 = v9 - 8 - v14;
    if (v35 < 0x168)
    {
      v36 = v9;
      goto LABEL_42;
    }
    if (&v32[v28 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v32[v28 - 8])
    {
      v36 = v9;
      do
      {
LABEL_42:
        v37 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *((_QWORD *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v36 != v14);
      goto LABEL_43;
    }
    if (&v9[-(v35 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      v36 = v9;
      goto LABEL_42;
    }
    if ((unint64_t)(v9 - &v32[v28]) < 0x20)
    {
      v36 = v9;
      goto LABEL_42;
    }
    v44 = (v35 >> 3) + 1;
    v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v9[-v45];
    v33 -= v45;
    v46 = &v32[8 * v29 - 16];
    v47 = (__int128 *)(v9 - 16);
    v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v49 = *v47;
      *(v46 - 1) = *(v47 - 1);
      *v46 = v49;
      v46 -= 2;
      v47 -= 2;
      v48 -= 4;
    }
    while (v48);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_42;
LABEL_43:
    v11 = &v32[8 * v31];
    if (v14)
      operator delete(v14);
    v14 = v33;
    v9 = (char *)v34;
    v10 = v19;
    v8 += 16;
  }
  while (v8 != v101);
LABEL_70:
  v107 = (uint64_t)v10;
  v108 = v12;
  v105 = v11;
  v106 = v13;
  __p = v14;
  v104 = v9;
  if (v10 < v12)
  {
    ConstantIntegerVariable = VariableWithTightBound;
    *(_DWORD *)v10 = VariableWithTightBound;
    v53 = (uint64_t)(v10 + 4);
    goto LABEL_87;
  }
  v54 = v11;
  v55 = v10 - v13;
  v56 = (v10 - v13) >> 2;
  v57 = v56 + 1;
  if ((unint64_t)(v56 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_73:
  if ((v12 - v13) >> 1 > v57)
    v57 = (v12 - v13) >> 1;
  if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
    v58 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v58 = v57;
  ConstantIntegerVariable = VariableWithTightBound;
  if (!v58)
  {
    v61 = 0;
    v62 = (unsigned int *)(4 * v56);
    v63 = 0;
    *(_DWORD *)(4 * v56) = VariableWithTightBound;
    v53 = 4 * v56 + 4;
    v64 = v10 - v13;
    if (v10 != v13)
      goto LABEL_81;
LABEL_103:
    v11 = v54;
    v106 = v62;
    v107 = v53;
    v108 = v63;
    if (v13)
      goto LABEL_86;
    goto LABEL_87;
  }
  if (v58 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v59 = v10;
  v60 = v9;
  v61 = operator new(4 * v58);
  v9 = v60;
  v10 = v59;
  v62 = (unsigned int *)&v61[4 * v56];
  v63 = &v61[4 * v58];
  *v62 = VariableWithTightBound;
  v53 = (uint64_t)(v62 + 1);
  v64 = v59 - v13;
  if (v59 == v13)
    goto LABEL_103;
LABEL_81:
  v65 = v64 - 4;
  if (v65 < 0x2C || (unint64_t)(v10 - &v61[v55]) < 0x20)
  {
    v66 = v10;
    v11 = v54;
    goto LABEL_84;
  }
  v83 = (v65 >> 2) + 1;
  v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
  v66 = &v10[-v84];
  v62 = (unsigned int *)((char *)v62 - v84);
  v85 = &v61[4 * v56 - 16];
  v86 = v10 - 16;
  v87 = v83 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v88 = *(_OWORD *)v86;
    *(v85 - 1) = *((_OWORD *)v86 - 1);
    *v85 = v88;
    v85 -= 2;
    v86 -= 32;
    v87 -= 8;
  }
  while (v87);
  v11 = v54;
  if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
  {
    do
    {
LABEL_84:
      v67 = *((_DWORD *)v66 - 1);
      v66 -= 4;
      *--v62 = v67;
    }
    while (v66 != v13);
  }
  v106 = v62;
  v107 = v53;
  v108 = v63;
  if (v13)
  {
LABEL_86:
    v68 = v9;
    operator delete(v13);
    v9 = v68;
  }
LABEL_87:
  v107 = v53;
  if (v9 < v11)
  {
    *(_QWORD *)v9 = -1;
    v69 = v9 + 8;
    goto LABEL_122;
  }
  v70 = v11;
  v71 = v9 - v14;
  v72 = (v9 - v14) >> 3;
  v73 = v72 + 1;
  if ((unint64_t)(v72 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v74 = v70 - v14;
  v75 = (v70 - v14) >> 2;
  if (v75 > v73)
    v73 = v75;
  if (v74 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v73;
  if (v76)
  {
    if (v76 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v77 = v9;
    v78 = operator new(8 * v76);
    v9 = v77;
  }
  else
  {
    v78 = 0;
  }
  v79 = &v78[8 * v72];
  v80 = &v78[8 * v76];
  *v79 = -1;
  v69 = v79 + 1;
  if (v9 != v14)
  {
    v81 = v9 - v14 - 8;
    if (v81 < 0x58)
    {
      v82 = v9;
      goto LABEL_119;
    }
    if ((unint64_t)(v9 - v78 - v71) < 0x20)
    {
      v82 = v9;
      goto LABEL_119;
    }
    v89 = (v81 >> 3) + 1;
    v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
    v82 = &v9[-v90];
    v79 = (_QWORD *)((char *)v79 - v90);
    v91 = &v78[8 * v72 - 16];
    v92 = (__int128 *)(v9 - 16);
    v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v94 = *v92;
      *(v91 - 1) = *(v92 - 1);
      *v91 = v94;
      v91 -= 2;
      v92 -= 2;
      v93 -= 4;
    }
    while (v93);
    if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_119:
        v95 = *((_QWORD *)v82 - 1);
        v82 -= 8;
        *--v79 = v95;
      }
      while (v82 != v14);
    }
  }
  __p = v79;
  v105 = v80;
  if (v14)
    operator delete(v14);
LABEL_122:
  v104 = v69;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v106, (uint64_t **)&__p, 0, v110);
  v109 = v99;
  if (!v111)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v111 + 48))(v111, &v109);
  v96 = v111;
  if (v111 == v110)
  {
    v97 = 4;
    v96 = v110;
LABEL_127:
    (*(void (**)(void))(*v96 + 8 * v97))();
  }
  else if (v111)
  {
    v97 = 5;
    goto LABEL_127;
  }
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    v107 = (uint64_t)v106;
    operator delete(v106);
  }
  return ConstantIntegerVariable;
}

void sub_22DB13F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (!a17)
    _Unwind_Resume(exception_object);
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_OWORD *)v8 = xmmword_22DCEE4D0;
  *(_DWORD *)(v8 + 16) = -1;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_QWORD *)(v8 + 72) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_QWORD *)(v8 + 112) = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984CA8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d)
  {
    return v4[5];
  }
LABEL_12:
  v8 = operator new();
  *(_QWORD *)v8 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)(v8 + 40) = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LinearProgrammingDispatcher>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984DE0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

_OWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d)
    return (_OWORD *)v4[5];
LABEL_12:
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LPVariables>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984E18;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_QWORD *)(v8 + 112) = 0;
  v9 = v3;
  v10 = (_QWORD *)*v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v9 = v10;
        v11 = v10[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d)
          break;
        v10 = (_QWORD *)*v9;
        v3 = v9;
        if (!*v9)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d)
        break;
      v10 = (_QWORD *)v9[1];
      if (!v10)
      {
        v3 = v9 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v9;
    v9 = operator new(0x30uLL);
    v9[4] = &gtl::FastTypeId<operations_research::sat::SearchHeuristics>(void)::d;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v12;
    *v3 = v9;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v9;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v9[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984E50;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::CoreBasedOptimizer>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DB147D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::ConnectedComponents<int,int>::Init(std::vector<int> *this, std::vector<int>::value_type a2)
{
  std::vector<int>::pointer end;
  std::vector<int>::size_type begin_low;
  unint64_t v6;
  BOOL v7;
  std::vector<int>::size_type v8;
  uint64_t v9;
  std::vector<int>::pointer v10;
  std::vector<int>::value_type __u[4];
  uint64_t *v12;

  __u[0] = a2;
  LODWORD(v12) = 0;
  if (a2 < 0)
  {
    v12 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__u, (int)&v12, "num_nodes >= 0");
    if (v12)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/graph/connectivity.h", 73, &v12);
      google::LogMessage::stream((google::LogMessage *)__u);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__u);
    }
  }
  end = this->__end_;
  LODWORD(this->__begin_) = a2;
  begin_low = a2;
  v6 = this->__end_cap_.__value_ - end;
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    std::vector<int>::__append((std::vector<int> *)&this->__end_, v8);
    begin_low = SLODWORD(this->__begin_);
  }
  else if (!v7)
  {
    this->__end_cap_.__value_ = &end[a2];
  }
  __u[0] = 1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 32), begin_low, __u);
  if (SLODWORD(this->__begin_) >= 1)
  {
    v9 = 0;
    v10 = this->__end_;
    do
    {
      v10[v9] = v9;
      ++v9;
    }
    while (v9 < SLODWORD(this->__begin_));
  }
}

void sub_22DB148D8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE v13[16];

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6 + 32))
  {
LABEL_11:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v13, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
  }
  return v6 + 40;
}

void sub_22DB14994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD *operations_research::ConnectedComponents<int,int>::~ConnectedComponents(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

char *std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>(operations_research::sat::LinearConstraint **a1, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  operations_research::sat::LinearConstraint *v9;
  operations_research::sat::LinearConstraint *v10;
  operations_research::sat::LinearConstraint *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  operations_research::sat::LinearConstraint *v15;
  void *v16;
  void *v17;
  operations_research::sat::LinearConstraint *v19;
  operations_research::sat::LinearConstraint *v20;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 58)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    v8 = 0;
  }
  v19 = (operations_research::sat::LinearConstraint *)&v8[64 * v3];
  v20 = (operations_research::sat::LinearConstraint *)&v8[64 * v7];
  operations_research::sat::LinearConstraint::LinearConstraint(v19, a2);
  v9 = (operations_research::sat::LinearConstraint *)((char *)v19 + 64);
  v10 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = v20;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = (char *)v19 + v12;
      v14 = (char *)v11 + v12;
      *((_OWORD *)v13 - 4) = *(_OWORD *)((char *)v11 + v12 - 64);
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v13 - 4) = 0;
      *((_QWORD *)v13 - 6) = 0;
      *((_OWORD *)v13 - 3) = *(_OWORD *)((char *)v11 + v12 - 48);
      *((_QWORD *)v13 - 4) = *(_QWORD *)((char *)v11 + v12 - 32);
      *((_QWORD *)v14 - 6) = 0;
      *((_QWORD *)v14 - 5) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)((char *)v11 + v12 - 24);
      *((_QWORD *)v13 - 1) = *(_QWORD *)((char *)v11 + v12 - 8);
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 1) = 0;
      v12 -= 64;
    }
    while ((operations_research::sat::LinearConstraint *)((char *)v11 + v12) != v10);
    v15 = *a1;
    v11 = a1[1];
    *a1 = (operations_research::sat::LinearConstraint *)((char *)v19 + v12);
    a1[1] = v9;
    a1[2] = v20;
    if (v11 != v15)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v11 - 3);
        if (v16)
        {
          *((_QWORD *)v11 - 2) = v16;
          operator delete(v16);
        }
        v17 = (void *)*((_QWORD *)v11 - 6);
        if (v17)
        {
          *((_QWORD *)v11 - 5) = v17;
          operator delete(v17);
        }
        v11 = (operations_research::sat::LinearConstraint *)((char *)v11 - 64);
      }
      while (v11 != v15);
      v11 = v15;
    }
  }
  if (v11)
    operator delete(v11);
  return (char *)v19 + 64;
}

void sub_22DB14B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::sat::LinearConstraint>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

operations_research::sat::LinearConstraint *operations_research::sat::LinearConstraint::LinearConstraint(operations_research::sat::LinearConstraint *this, const operations_research::sat::LinearConstraint *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *((_QWORD *)this + 4) = v9;
    memcpy(v8, v6, v7);
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 5);
  v10 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *((_QWORD *)this + 5) = v13;
    *((_QWORD *)this + 6) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *((_QWORD *)this + 7) = v14;
    memcpy(v13, v11, v12);
    *((_QWORD *)this + 6) = v14;
  }
  return this;
}

void sub_22DB14C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984C70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984C70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    if (v4)
    {
      v5 = a2[6];
      v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          v7 = *(void **)(v5 - 24);
          if (v7)
          {
            *(_QWORD *)(v5 - 16) = v7;
            operator delete(v7);
          }
          v8 = *(void **)(v5 - 48);
          if (v8)
          {
            *(_QWORD *)(v5 - 40) = v8;
            operator delete(v8);
          }
          v5 -= 64;
        }
        while (v5 != v4);
        v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::ObjectiveDefinition>::~Delete(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24F984CA8;
  v4 = a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ObjectiveDefinition>::~Delete(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24F984CA8;
  v3 = a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E31DF78);
}

void std::default_delete<operations_research::sat::ObjectiveDefinition>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 96))
    {
      operator delete(*(void **)(a2 + 72));
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 72) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
    }
    v3 = *(_QWORD **)(a2 + 104);
    if (v3)
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
    v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(_QWORD *)(a2 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a2 + 24);
    if (v5)
    {
      *(_QWORD *)(a2 + 32) = v5;
      operator delete(v5);
    }
    JUMPOUT(0x22E31DF78);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 4 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = a1[2];
  a1[5] = (char *)(v9 - (_QWORD)v10);
  v11 = a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v23 = a1[4];
    if (!v23)
      return;
LABEL_21:
    *((_QWORD *)v23 + 4) = v13 >> 3;
    *((_QWORD *)v23 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[(_QWORD)v4] & 0x80000000) == 0)
    {
      v17 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)&v5[4 * (_QWORD)v12];
      v18 = ((v17 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v17);
      v19 = *a1;
      v20 = a1[3];
      v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      v22 = *(_QWORD *)&(*a1)[v21] & (~*(_QWORD *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v21 = (v14 + v21) & (unint64_t)v20;
          v22 = *(_QWORD *)&v19[v21] & (~*(_QWORD *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      v15 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v13 += v14;
      v16 = v18 & 0x7F;
      v19[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_DWORD *)&a1[1][4 * v15] = *(_DWORD *)&v5[4 * (_QWORD)v12];
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  v23 = a1[4];
  if (v23)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 4 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_DWORD *)(v25 + 4 * v18) = *(_DWORD *)(v25 + 4 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_DWORD *)(v25 + 4 * v14);
          *(_DWORD *)(v25 + 4 * v14) = *(_DWORD *)(v25 + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F984CE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984CE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::operator()(uint64_t a1)
{
  absl::lts_2020_02_25::Mutex *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds(*(_QWORD *)(a1 + 24), *(absl::lts_2020_02_25::Mutex **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 144) + 20 * *(int *)(a1 + 8)), -*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 144) + 20 * (*(_DWORD *)(a1 + 8) ^ 1)));
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD **)(v3 + 32);
  v4 = (_QWORD *)(v3 + 32);
  v5 = v6;
  do
  {
    v7 = v5[4];
    v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v4 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (!*(_BYTE *)(v4[5] + 153))
    operations_research::sat::SharedResponseManager::Synchronize(*(operations_research::sat::SharedResponseManager **)(a1 + 24), v2);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20Int"
                     "egerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTyp"
                                "eINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_132RegisterObjectiveBestBoundExportEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBestBoundExport(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target_type()
{
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24F984D60;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F984D60;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  std::string *v3;
  __int128 v4;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_24F984D60;
  v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v4;
  return v2;
}

void sub_22DB157AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = off_24F984D60;
  v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    result = *(__n128 *)(a1 + 32);
    v8 = *(_OWORD *)(a1 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v8;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    result = *(__n128 *)(a1 + 32);
    v7 = *(_OWORD *)(a1 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t result;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v21[12];

  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 340))
    return 1;
  v5 = operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveLowerBound(*(operations_research::sat::SharedResponseManager **)(a1 + 56), a2);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 12 * *(int *)(*(_QWORD *)(a1 + 48) + 16));
  if (v5 <= v7
    || (*(_DWORD *)v21 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16),
        *(_QWORD *)&v21[4] = v5,
        result = operations_research::sat::IntegerTrail::Enqueue(v6, *(uint64_t *)v21, SHIDWORD(v5), 0, 0, 0, 0),
        (_DWORD)result))
  {
    v8 = operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveUpperBound(*(operations_research::sat::SharedResponseManager **)(a1 + 56), v4);
    v9 = *(_QWORD *)(a1 + 40);
    if (v8 >= -*(_QWORD *)(*(_QWORD *)(v9 + 40) + 12 * (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 16) ^ 1)))
    {
      if (v5 <= v7)
        return 1;
    }
    else
    {
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v8 >= (uint64_t)0x8000000000000002)
        v10 = -v8;
      *(_DWORD *)v21 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16) ^ 1;
      *(_QWORD *)&v21[4] = v10;
      if ((operations_research::sat::IntegerTrail::Enqueue(v9, *(uint64_t *)v21, SHIDWORD(v10), 0, 0, 0, 0) & 1) == 0)
        return 0;
    }
    {
      google::LogMessage::LogMessage((google::LogMessage *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1109);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"'", 1);
      v13 = *(char *)(a1 + 31);
      if (v13 >= 0)
        v14 = a1 + 8;
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 31);
      else
        v15 = *(_QWORD *)(a1 + 16);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"' imports objective bounds: external [", 38);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"], current [", 12);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"]", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v21);
    }
    return operations_research::sat::SatSolver::FinishPropagation(*(operations_research::sat::SatSolver **)(a1 + 32));
  }
  return result;
}

void sub_22DB15B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManag"
                     "erEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedRe"
                                "sponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_129RegisterObjectiveBoundsImportEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterObjectiveBoundsImport(operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingDispatcher>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1[1];
  *a1 = &off_24F984DE0;
  a1[1] = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 24))
    {
      operator delete(*(void **)v2);
      *(_QWORD *)(v2 + 40) = 0;
      *(_QWORD *)v2 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
    }
    v3 = *(_QWORD **)(v2 + 32);
    if (v3)
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
    MEMORY[0x22E31DF78](v2, 0x1030C40438D7BFDLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingDispatcher>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  *a1 = &off_24F984DE0;
  a1[1] = 0;
  if (v1)
  {
    if (*(_QWORD *)(v1 + 24))
    {
      operator delete(*(void **)v1);
      *(_QWORD *)(v1 + 40) = 0;
      *(_QWORD *)v1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v1 + 8) = 0;
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)(v1 + 24) = 0;
    }
    v2 = *(_QWORD **)(v1 + 32);
    if (v2)
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
    MEMORY[0x22E31DF78](v1, 0x1030C40438D7BFDLL);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LPVariables>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F984E18;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LPVariables>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F984E18;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x1020C4055CCDE27);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristics>::~Delete(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24F984E50;
  v4 = (_QWORD *)a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<operations_research::sat::SearchHeuristics>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristics>::~Delete(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24F984E50;
  v3 = (_QWORD *)a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<operations_research::sat::SearchHeuristics>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E31DF78);
}

void std::default_delete<operations_research::sat::SearchHeuristics>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;

  if (a2)
  {
    v3 = (_QWORD *)a2[14];
    if (v3 == a2 + 11)
    {
      v4 = 4;
      v3 = a2 + 11;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)a2[10];
    if (v5 == a2 + 7)
    {
      v6 = 4;
      v5 = a2 + 7;
    }
    else
    {
      if (!v5)
      {
LABEL_13:
        v7 = a2[3];
        if (!v7)
        {
LABEL_24:
          v13 = (char *)*a2;
          if (!*a2)
            goto LABEL_35;
          v14 = (char *)a2[1];
          v15 = (char *)*a2;
          if (v14 == v13)
          {
LABEL_34:
            a2[1] = v13;
            operator delete(v15);
LABEL_35:
            JUMPOUT(0x22E31DF78);
          }
          while (1)
          {
            v18 = v14 - 32;
            v16 = (char *)*((_QWORD *)v14 - 1);
            if (v14 - 32 == v16)
            {
              v16 = v14 - 32;
              v17 = 4;
            }
            else
            {
              if (!v16)
                goto LABEL_29;
              v17 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_29:
            v14 = v18;
            if (v18 == v13)
            {
              v15 = (char *)*a2;
              goto LABEL_34;
            }
          }
        }
        v8 = a2[4];
        v9 = (void *)a2[3];
        if (v8 == v7)
        {
LABEL_23:
          a2[4] = v7;
          operator delete(v9);
          goto LABEL_24;
        }
        while (1)
        {
          v12 = v8 - 32;
          v10 = *(_QWORD **)(v8 - 8);
          if ((_QWORD *)(v8 - 32) == v10)
          {
            v10 = (_QWORD *)(v8 - 32);
            v11 = 4;
          }
          else
          {
            if (!v10)
              goto LABEL_18;
            v11 = 5;
          }
          (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
          v8 = v12;
          if (v12 == v7)
          {
            v9 = (void *)a2[3];
            goto LABEL_23;
          }
        }
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_13;
  }
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24F984E88;
  if (*(char *)(result + 47) < 0)
  {
    operator delete(*(void **)(result + 24));
    return v1;
  }
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F984E88;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  std::string *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24F984E88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = (std::string *)(v2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_22DB16114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a2 = off_24F984E88;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (std::string *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  }
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    __p = v1;
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  operations_research::sat::CpSolverResponse *v2;
  google::protobuf::Arena *v3;
  std::string *v4;
  _BYTE v5[8];
  uint64_t v6;
  std::string *v7;

  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v5, 0);
  v3 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v3 = *(google::protobuf::Arena **)v3;
    v4 = v7;
    if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_5:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v7, v3, (__int128 *)(a1 + 24));
    goto LABEL_6;
  }
  v4 = v7;
  if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_5;
LABEL_3:
  std::string::operator=(v4, (const std::string *)(a1 + 24));
LABEL_6:
  operations_research::sat::SharedResponseManager::NewSolution(*(operations_research::sat::SharedResponseManager **)(a1 + 48), (const operations_research::sat::CpSolverResponse *)v5, *(operations_research::sat::Model **)(a1 + 16));
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v5);
}

void sub_22DB162A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseMa"
                     "nagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21Share"
                                "dResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_111LoadCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::`anonymous namespace'::FillSolutionInResponse(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::Model *a3, operations_research::sat::CpSolverResponse *a4)
{
  _QWORD *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  operations_research::sat::_anonymous_namespace_ *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  BOOL v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t (***v90)();
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  char *v110;
  unsigned int *v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t (***v115)();
  uint64_t v116;
  int v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  BOOL v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t (***v126)();
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  BOOL v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t (***v141)();
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  unsigned int *v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int *v152;
  uint64_t v154;
  _QWORD *v156;
  _QWORD *v157;
  _BYTE v158[16];
  void *__p;
  char *v160;
  char *v161;
  uint64_t (**v162)();
  int v163;
  uint64_t (***v164)();
  uint64_t (**v165)();
  int v166;
  uint64_t (***v167)();
  uint64_t (**v168)();
  int v169[4];
  uint64_t (***v170)();
  uint64_t (**v171)();
  int v172[4];
  uint64_t (***v173)();
  uint64_t (**v174)();
  unsigned int v175[4];
  uint64_t (***v176)();
  uint64_t (**v177)();
  signed int v178;
  uint64_t (***v179)();
  uint64_t (**v180)();
  signed int v181;
  uint64_t (***v182)();
  uint64_t (**v183)();
  signed int v184;
  uint64_t (***v185)();
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)a3 + 4) = 0;
  *((_DWORD *)a3 + 10) = 0;
  v152 = (unsigned int *)((char *)a3 + 40);
  *((_DWORD *)a3 + 16) = 0;
  v151 = (unsigned int *)((char *)a3 + 64);
  v6 = (char *)a2 + 32;
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v5)
  {
    v7 = (char *)a2 + 32;
    v8 = (_QWORD *)*((_QWORD *)a2 + 4);
    do
    {
      v9 = v8[4];
      v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = (char *)v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 == v6
      || *((_QWORD *)v7 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
    {
      v12 = 0;
    }
    else
    {
      v12 = (_QWORD *)*((_QWORD *)v7 + 5);
    }
    v13 = (char *)a2 + 32;
    v14 = (_QWORD *)*((_QWORD *)a2 + 4);
    do
    {
      v15 = v14[4];
      v16 = v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
        v17 = v14;
      else
        v17 = v14 + 1;
      if (v16)
        v13 = (char *)v14;
      v14 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v13 == v6
      || *((_QWORD *)v13 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
    {
      v154 = 0;
    }
    else
    {
      v154 = *((_QWORD *)v13 + 5);
    }
    v18 = (char *)a2 + 32;
    do
    {
      v19 = v5[4];
      v20 = v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v21 = v5;
      else
        v21 = v5 + 1;
      if (v20)
        v18 = (char *)v5;
      v5 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 == v6
      || *((_QWORD *)v18 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
    {
      v150 = 0;
    }
    else
    {
      v150 = *((_QWORD *)v18 + 5);
    }
  }
  else
  {
    v154 = 0;
    v12 = 0;
    v150 = 0;
  }
  __p = 0;
  v160 = 0;
  v161 = 0;
  LODWORD(v22) = *((_DWORD *)this + 6);
  v156 = (_QWORD *)((char *)a2 + 32);
  v157 = v12;
  if ((int)v22 < 1)
  {
LABEL_153:
    if ((int)v22 < 1)
      goto LABEL_209;
    v112 = 0;
    while (1)
    {
      v113 = *(_DWORD *)(v12[6] + 4 * v112);
      if (v113 != -1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(v154 + 24) + (((unint64_t)(2 * v113) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v113 & 0x1Fu))) & 3) != 0)
        {
          v168 = &off_24F984EF8;
          v169[0] = 2 * v113;
          v170 = &v168;
          v114 = std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(v169, (uint64_t)a2);
          v115 = v170;
          if (v170 == &v168)
          {
            v115 = &v168;
            v116 = 4;
LABEL_199:
            (*v115)[v116]();
          }
          else if (v170)
          {
            v116 = 5;
            goto LABEL_199;
          }
          v143 = *((unsigned int *)a3 + 10);
          if ((_DWORD)v143 == *((_DWORD *)a3 + 11))
            google::protobuf::RepeatedField<long long>::Reserve(v152, v143 + 1);
          v144 = v114;
          *(_QWORD *)(*((_QWORD *)a3 + 6) + 8 * v143) = v114;
          *((_DWORD *)a3 + 10) = v143 + 1;
          v145 = *((unsigned int *)a3 + 16);
          v131 = v145 + 1;
          if ((_DWORD)v145 == *((_DWORD *)a3 + 17))
            google::protobuf::RepeatedField<long long>::Reserve(v151, v145 + 1);
          *(_QWORD *)(*((_QWORD *)a3 + 9) + 8 * v145) = v144;
        }
        else
        {
          v129 = *((unsigned int *)a3 + 10);
          if ((_DWORD)v129 == *((_DWORD *)a3 + 11))
            google::protobuf::RepeatedField<long long>::Reserve(v152, v129 + 1);
          *(_QWORD *)(*((_QWORD *)a3 + 6) + 8 * v129) = 0;
          *((_DWORD *)a3 + 10) = v129 + 1;
          v130 = *((unsigned int *)a3 + 16);
          v131 = v130 + 1;
          if ((_DWORD)v130 == *((_DWORD *)a3 + 17))
            google::protobuf::RepeatedField<long long>::Reserve(v151, v130 + 1);
          *(_QWORD *)(*((_QWORD *)a3 + 9) + 8 * v130) = 1;
        }
        *((_DWORD *)a3 + 16) = v131;
        v12 = v157;
        goto LABEL_157;
      }
      v117 = *(_DWORD *)(*v12 + 4 * v112);
      v165 = &off_24F982FF8;
      v166 = v117;
      v167 = &v165;
      v118 = v156;
      v119 = (_QWORD *)*v156;
      do
      {
        v120 = v119[4];
        v121 = v120 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v120 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v122 = v119;
        else
          v122 = v119 + 1;
        if (v121)
          v118 = v119;
        v119 = (_QWORD *)*v122;
      }
      while (*v122);
      v123 = *(_QWORD *)(*(_QWORD *)(v118[5] + 40) + 12 * v117);
      v124 = *((unsigned int *)a3 + 10);
      v125 = v124 + 1;
      if ((_DWORD)v124 != *((_DWORD *)a3 + 11))
        break;
      google::protobuf::RepeatedField<long long>::Reserve(v152, v124 + 1);
      v126 = v167;
      *(_QWORD *)(*((_QWORD *)a3 + 6) + 8 * v124) = v123;
      *((_DWORD *)a3 + 10) = v125;
      if (v126 == &v165)
        goto LABEL_181;
      v127 = v157;
      if (!v126)
        goto LABEL_183;
      v128 = 5;
LABEL_182:
      (*v126)[v128]();
LABEL_183:
      v132 = *(_DWORD *)(*v127 + 4 * v112);
      v162 = &off_24F9830C0;
      v163 = v132;
      v164 = &v162;
      v133 = v156;
      v134 = (_QWORD *)*v156;
      do
      {
        v135 = v134[4];
        v136 = v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v137 = v134;
        else
          v137 = v134 + 1;
        if (v136)
          v133 = v134;
        v134 = (_QWORD *)*v137;
      }
      while (*v137);
      v138 = -*(_QWORD *)(*(_QWORD *)(v133[5] + 40) + 12 * (v132 ^ 1));
      v139 = *((unsigned int *)a3 + 16);
      v140 = v139 + 1;
      if ((_DWORD)v139 != *((_DWORD *)a3 + 17))
      {
        *(_QWORD *)(*((_QWORD *)a3 + 9) + 8 * v139) = v138;
        *((_DWORD *)a3 + 16) = v140;
LABEL_196:
        v141 = &v162;
        v142 = 4;
        v12 = v157;
LABEL_197:
        (*v141)[v142]();
        goto LABEL_157;
      }
      google::protobuf::RepeatedField<long long>::Reserve(v151, v139 + 1);
      v141 = v164;
      *(_QWORD *)(*((_QWORD *)a3 + 9) + 8 * v139) = v138;
      *((_DWORD *)a3 + 16) = v140;
      if (v141 == &v162)
        goto LABEL_196;
      v12 = v157;
      if (v141)
      {
        v142 = 5;
        goto LABEL_197;
      }
LABEL_157:
      if (++v112 >= *((int *)this + 6))
        goto LABEL_209;
    }
    *(_QWORD *)(*((_QWORD *)a3 + 6) + 8 * v124) = v123;
    *((_DWORD *)a3 + 10) = v125;
LABEL_181:
    v126 = &v165;
    v128 = 4;
    v127 = v157;
    goto LABEL_182;
  }
  v23 = 0;
  v149 = (unsigned int *)((char *)a3 + 16);
  do
  {
    v25 = *(_DWORD *)(*v12 + 4 * v23);
    if (v25 == -1)
    {
      v38 = 2 * *(_DWORD *)(v12[6] + 4 * v23);
      if (((*(_QWORD *)(*(_QWORD *)(v154 + 24) + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v38 & 0x3E)) & 3) == 0)
        goto LABEL_152;
      v171 = &off_24F984EF8;
      v172[0] = v38;
      v173 = &v171;
      v39 = std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(v172, (uint64_t)a2);
      v40 = v39;
      v41 = v160;
      if (v160 < v161)
      {
        *(_QWORD *)v160 = v39;
        v42 = (uint64_t)(v41 + 8);
        goto LABEL_139;
      }
      v65 = (char *)__p;
      v66 = v160 - (_BYTE *)__p;
      v67 = (v160 - (_BYTE *)__p) >> 3;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v69 = v161 - (_BYTE *)__p;
      if ((v161 - (_BYTE *)__p) >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v71 = (char *)operator new(8 * v70);
        v72 = (uint64_t *)&v71[8 * v67];
        *v72 = v40;
        v42 = (uint64_t)(v72 + 1);
        if (v41 == v65)
          goto LABEL_137;
      }
      else
      {
        v71 = 0;
        v72 = (uint64_t *)(8 * v67);
        *(_QWORD *)(8 * v67) = v40;
        v42 = 8 * v67 + 8;
        if (v41 == v65)
        {
LABEL_137:
          __p = v72;
          v160 = (char *)v42;
          v161 = &v71[8 * v70];
          if (v65)
            operator delete(v65);
LABEL_139:
          v37 = this;
          v160 = (char *)v42;
          v90 = v173;
          if (v173 == &v171)
          {
            v90 = &v171;
            goto LABEL_41;
          }
          goto LABEL_140;
        }
      }
      v100 = v41 - 8 - v65;
      if (v100 < 0x58)
        goto LABEL_221;
      if ((unint64_t)(v41 - &v71[v66]) < 0x20)
        goto LABEL_221;
      v101 = (v100 >> 3) + 1;
      v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      v103 = &v41[-v102];
      v72 = (uint64_t *)((char *)v72 - v102);
      v104 = &v71[8 * v67 - 16];
      v105 = v41 - 16;
      v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v107 = *(_OWORD *)v105;
        *((_OWORD *)v104 - 1) = *((_OWORD *)v105 - 1);
        *(_OWORD *)v104 = v107;
        v104 -= 32;
        v105 -= 32;
        v106 -= 4;
      }
      while (v106);
      v41 = v103;
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_221:
        do
        {
          v108 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v72 = v108;
        }
        while (v41 != v65);
      }
      goto LABEL_137;
    }
    v26 = *(_DWORD *)(*v12 + 4 * v23);
    v27 = *(int *)(*(_QWORD *)(v150 + 408) + 4 * v25);
    if ((_DWORD)v27 == -1)
    {
      v29 = *(_QWORD **)v6;
    }
    else
    {
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v150 + 936) + 24) + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v29 = *(_QWORD **)v6;
      if (((v28 >> *(_DWORD *)(*(_QWORD *)(v150 + 408) + 4 * v25)) & 1) != 0)
      {
        v183 = &off_24F982FF8;
        v184 = v25;
        v30 = v6;
        v185 = &v183;
        do
        {
          v31 = v29[4];
          v32 = v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
            v33 = v29;
          else
            v33 = v29 + 1;
          if (v32)
            v30 = (char *)v29;
          v29 = (_QWORD *)*v33;
        }
        while (*v33);
        v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v30 + 5) + 40) + 12 * v26);
        v35 = v160;
        if (v160 < v161)
        {
          *(_QWORD *)v160 = v34;
          v36 = (uint64_t)(v35 + 8);
          v37 = this;
          goto LABEL_146;
        }
        v73 = (char *)__p;
        v74 = v160 - (_BYTE *)__p;
        v75 = (v160 - (_BYTE *)__p) >> 3;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v77 = v161 - (_BYTE *)__p;
        if ((v161 - (_BYTE *)__p) >> 2 > v76)
          v76 = v77 >> 2;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
          v78 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = &v79[8 * v75];
          *(_QWORD *)v80 = v34;
          v36 = (uint64_t)(v80 + 8);
          if (v35 != v73)
          {
LABEL_110:
            v81 = v35 - 8 - v73;
            v37 = this;
            if (v81 < 0x58)
              goto LABEL_222;
            if ((unint64_t)(v35 - &v79[v74]) < 0x20)
              goto LABEL_222;
            v82 = (v81 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = &v35[-v83];
            v80 -= v83;
            v85 = &v79[8 * v75 - 16];
            v86 = v35 - 16;
            v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v88 = *(_OWORD *)v86;
              *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
              *(_OWORD *)v85 = v88;
              v85 -= 32;
              v86 -= 32;
              v87 -= 4;
            }
            while (v87);
            v35 = v84;
            if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_222:
              do
              {
                v89 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v80 - 1) = v89;
                v80 -= 8;
              }
              while (v35 != v73);
            }
            __p = v80;
            v160 = (char *)v36;
            v161 = &v79[8 * v78];
            if (!v73)
            {
LABEL_145:
              v6 = (char *)v156;
LABEL_146:
              v160 = (char *)v36;
              v90 = &v183;
              v24 = 4;
LABEL_42:
              v12 = v157;
LABEL_43:
              (*v90)[v24]();
              goto LABEL_44;
            }
LABEL_117:
            operator delete(v73);
            v90 = v185;
            v160 = (char *)v36;
            if (v185 == &v183)
            {
              v90 = &v183;
LABEL_41:
              v24 = 4;
              v6 = (char *)v156;
              goto LABEL_42;
            }
            goto LABEL_140;
          }
        }
        else
        {
          v79 = 0;
          v80 = (char *)(8 * v75);
          *(_QWORD *)(8 * v75) = v34;
          v36 = 8 * v75 + 8;
          if (v35 != v73)
            goto LABEL_110;
        }
        v37 = this;
        __p = v80;
        v160 = (char *)v36;
        v161 = &v79[8 * v78];
        if (!v73)
          goto LABEL_145;
        goto LABEL_117;
      }
    }
    v180 = &off_24F982FF8;
    v181 = v25;
    v43 = v6;
    v44 = v29;
    v182 = &v180;
    do
    {
      v45 = v44[4];
      v46 = v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v47 = v44;
      else
        v47 = v44 + 1;
      if (v46)
        v43 = (char *)v44;
      v44 = (_QWORD *)*v47;
    }
    while (*v47);
    v48 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v43 + 5) + 40) + 12 * v25);
    v177 = &off_24F9830C0;
    v178 = v25;
    v179 = &v177;
    v49 = v6;
    do
    {
      v50 = v29[4];
      v51 = v50 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v50 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v52 = v29;
      else
        v52 = v29 + 1;
      if (v51)
        v49 = (char *)v29;
      v29 = (_QWORD *)*v52;
    }
    while (*v52);
    if (v48 + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v49 + 5) + 40) + 12 * (v25 ^ 1)))
    {
LABEL_152:
      v160 = (char *)__p;
      goto LABEL_153;
    }
    v174 = &off_24F983218;
    v175[0] = v25;
    v176 = &v174;
    v53 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v175, (uint64_t)a2);
    v54 = v53;
    v55 = v160;
    if (v160 < v161)
    {
      *(_QWORD *)v160 = v53;
      v56 = (uint64_t)(v55 + 8);
      goto LABEL_128;
    }
    v57 = (char *)__p;
    v58 = v160 - (_BYTE *)__p;
    v59 = (v160 - (_BYTE *)__p) >> 3;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v61 = v161 - (_BYTE *)__p;
    if ((v161 - (_BYTE *)__p) >> 2 > v60)
      v60 = v61 >> 2;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v62 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v63 = (char *)operator new(8 * v62);
      v64 = (unint64_t *)&v63[8 * v59];
      *v64 = v54;
      v56 = (uint64_t)(v64 + 1);
      if (v55 == v57)
        goto LABEL_126;
LABEL_120:
      v91 = v55 - 8 - v57;
      if (v91 < 0x58)
        goto LABEL_223;
      if ((unint64_t)(v55 - &v63[v58]) < 0x20)
        goto LABEL_223;
      v92 = (v91 >> 3) + 1;
      v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      v94 = &v55[-v93];
      v64 = (unint64_t *)((char *)v64 - v93);
      v95 = &v63[8 * v59 - 16];
      v96 = v55 - 16;
      v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98 = *(_OWORD *)v96;
        *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
        *(_OWORD *)v95 = v98;
        v95 -= 32;
        v96 -= 32;
        v97 -= 4;
      }
      while (v97);
      v55 = v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_223:
        do
        {
          v99 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *--v64 = v99;
        }
        while (v55 != v57);
      }
      goto LABEL_126;
    }
    v63 = 0;
    v64 = (unint64_t *)(8 * v59);
    *(_QWORD *)(8 * v59) = v54;
    v56 = 8 * v59 + 8;
    if (v55 != v57)
      goto LABEL_120;
LABEL_126:
    __p = v64;
    v160 = (char *)v56;
    v161 = &v63[8 * v62];
    if (v57)
      operator delete(v57);
LABEL_128:
    v37 = this;
    v160 = (char *)v56;
    v90 = v176;
    if (v176 == &v174)
    {
      v90 = &v174;
      goto LABEL_41;
    }
LABEL_140:
    v6 = (char *)v156;
    v12 = v157;
    if (v90)
    {
      v24 = 5;
      goto LABEL_43;
    }
LABEL_44:
    ++v23;
    v22 = *((int *)v37 + 6);
  }
  while (v23 < v22);
  v109 = (char *)__p;
  v110 = v160;
  if (__p == v160)
    goto LABEL_153;
  if (!FLAGS_cp_model_check_intermediate_solutions)
  {
    v111 = v149;
    if (__p == v160)
      goto LABEL_209;
    goto LABEL_205;
  }
  v111 = v149;
  if (!operations_research::sat::SolutionIsFeasible((uint64_t)this, (uint64_t)&__p, 0, 0))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v158, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 348);
    v148 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v158);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"Check failed: SolutionIsFeasible(model_proto, solution) ", 56);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v158);
  }
  v109 = (char *)__p;
  v110 = v160;
  if (__p != v160)
  {
LABEL_205:
    v146 = *((_DWORD *)a3 + 4);
    do
    {
      v147 = *(_QWORD *)v109;
      if (v146 == *((_DWORD *)a3 + 5))
        google::protobuf::RepeatedField<long long>::Reserve(v111, v146 + 1);
      *(_QWORD *)(*((_QWORD *)a3 + 3) + 8 * v146) = v147;
      *((_DWORD *)a3 + 4) = v146 + 1;
      v109 += 8;
      ++v146;
    }
    while (v109 != v110);
  }
LABEL_209:
  if (__p)
  {
    v160 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DB16F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F984EF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F984EF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>((int *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(int *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _BYTE v12[16];

  v4 = *(_QWORD **)(a2 + 32);
  v2 = (_QWORD *)(a2 + 32);
  v3 = v4;
  do
  {
    v5 = v3[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v2 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  v8 = *a1;
  v9 = *(_QWORD *)(v2[5] + 24);
  if (((*(_QWORD *)(v9 + (((unint64_t)(2 * ((int)v8 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 & 0x3E)) & 3) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.h", 977);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: trail->Assignment().VariableIsAssigned(l.Variable()) ", 67);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  return (*(_QWORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1;
}

void sub_22DB17204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CoreBasedOptimizer>::~Delete(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)a1[1];
  *a1 = &off_24F984F88;
  a1[1] = 0;
  if (!v2)
    return a1;
  v3 = (_QWORD *)v2[14];
  if (v3 == v2 + 11)
  {
    v4 = 4;
    v3 = v2 + 11;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (void *)v2[7];
  if (v5)
  {
    v2[8] = v5;
    operator delete(v5);
  }
  MEMORY[0x22E31DF78](v2, 0x1020C40A8D2B3AFLL);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CoreBasedOptimizer>::~Delete(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v1 = (_QWORD *)a1[1];
  *a1 = &off_24F984F88;
  a1[1] = 0;
  if (!v1)
    goto LABEL_10;
  v2 = (_QWORD *)v1[14];
  if (v2 == v1 + 11)
  {
    v3 = 4;
    v2 = v1 + 11;
  }
  else
  {
    if (!v2)
    {
LABEL_7:
      v4 = (void *)v1[7];
      if (v4)
      {
        v1[8] = v4;
        operator delete(v4);
      }
      MEMORY[0x22E31DF78](v1, 0x1020C40A8D2B3AFLL);
LABEL_10:
      JUMPOUT(0x22E31DF78);
    }
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_7;
}

uint64_t absl::Cleanup<operations_research::sat::`anonymous namespace'::QuickSolveWithHint(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>::~Cleanup(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    operations_research::sat::SatParameters::CopyFrom(*(operations_research::sat::SatParameters **)(a1 + 8), (const operations_research::sat::SatParameters *)(a1 + 16));
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 16));
  return a1;
}

void operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0::operator()(uint64_t a1)
{
  operations_research::sat::CpSolverResponse *v2;
  google::protobuf::Arena *v3;
  std::string *v4;
  _BYTE v5[8];
  uint64_t v6;
  std::string *v7;

  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v5, 0);
  v3 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v3 = *(google::protobuf::Arena **)v3;
    v4 = v7;
    if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_5:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v7, v3, *(__int128 **)(a1 + 16));
    goto LABEL_6;
  }
  v4 = v7;
  if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_5;
LABEL_3:
  std::string::operator=(v4, *(const std::string **)(a1 + 16));
LABEL_6:
  operations_research::sat::SharedResponseManager::NewSolution(**(operations_research::sat::SharedResponseManager ***)(a1 + 24), (const operations_research::sat::CpSolverResponse *)v5, **(operations_research::sat::Model ***)(a1 + 8));
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v5);
}

void sub_22DB17434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F984FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984FC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedRes"
                     "ponseManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_"
                                "21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_22DB176D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(a1, a2[1]);
    if ((a2[4] & 1) != 0)
      operator delete((void *)a2[5]);
    operator delete(a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void **v17;
  __int128 v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  BOOL v27;
  const void **v28;
  char v29;
  BOOL v30;
  const void **v31;
  const void **v32;
  const void **v33;
  int v34;
  int v35;
  size_t v36;
  const void **v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;
  _BOOL4 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __n128 *v46;
  unint64_t v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  const void *v52;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  int v11;
  int v12;
  size_t v13;
  const void **v14;
  size_t v15;
  const void *v16;
  size_t v17;
  _BOOL4 v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  BOOL v32;
  __int128 v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;

  if ((const void **)result != a2)
  {
    v35 = v2;
    v36 = v3;
    v5 = result;
    v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      v7 = 0;
      v8 = (const void **)result;
      do
      {
        v10 = v8;
        v8 = v6;
        v11 = *((char *)v10 + 23);
        v12 = *((char *)v10 + 47);
        if (v12 >= 0)
          v13 = *((unsigned __int8 *)v10 + 47);
        else
          v13 = (size_t)v10[4];
        if (v12 >= 0)
          v14 = v6;
        else
          v14 = (const void **)v10[3];
        if (v11 >= 0)
          v15 = *((unsigned __int8 *)v10 + 23);
        else
          v15 = (size_t)v10[1];
        if (v11 >= 0)
          v16 = v10;
        else
          v16 = *v10;
        if (v15 >= v13)
          v17 = v13;
        else
          v17 = v15;
        result = memcmp(v14, v16, v17);
        v18 = v13 < v15;
        if ((_DWORD)result)
          v18 = (int)result < 0;
        if (v18)
        {
          v34 = v8[2];
          v19 = (unint64_t)v34;
          v33 = *(_OWORD *)v8;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v20 = HIBYTE(v19);
          if ((v20 & 0x80u) == 0)
            v21 = v20;
          else
            v21 = *((_QWORD *)&v33 + 1);
          if ((v20 & 0x80u) == 0)
            v22 = &v33;
          else
            v22 = (__int128 *)v33;
          v23 = v7;
          do
          {
            v24 = v5 + v23;
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v5 + v23);
            *(_QWORD *)(v24 + 40) = *(_QWORD *)(v5 + v23 + 16);
            *(_BYTE *)(v24 + 23) = 0;
            *(_BYTE *)v24 = 0;
            if (!v23)
            {
              v9 = v5;
              goto LABEL_5;
            }
            v27 = *(const void **)(v24 - 24);
            v25 = v24 - 24;
            v26 = v27;
            v28 = *(char *)(v25 + 23);
            if (v28 >= 0)
              v29 = *(unsigned __int8 *)(v25 + 23);
            else
              v29 = *(_QWORD *)(v25 + 8);
            if (v28 >= 0)
              v30 = (const void *)v25;
            else
              v30 = v26;
            if (v29 >= v21)
              v31 = v21;
            else
              v31 = v29;
            result = memcmp(v22, v30, v31);
            v32 = v21 < v29;
            if ((_DWORD)result)
              v32 = (int)result < 0;
            v23 -= 24;
          }
          while (v32);
          v9 = v5 + v23 + 24;
LABEL_5:
          *(_OWORD *)v9 = v33;
          *(_QWORD *)(v9 + 16) = v34;
        }
        v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

const void **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  const void **i;
  const void **v7;
  int v8;
  int v9;
  size_t v10;
  const void **v11;
  size_t v12;
  const void *v13;
  size_t v14;
  _BOOL4 v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  __int128 *v19;
  const void **v20;
  const void **v21;
  size_t v22;
  const void **v23;
  const void **v24;
  size_t v25;
  size_t v26;
  const void **v27;
  size_t v28;
  BOOL v29;
  __int128 v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;

  if (result != a2)
  {
    v32 = v2;
    v33 = v3;
    v5 = result;
    for (i = result + 3; v5 + 3 != a2; i = v5 + 3)
    {
      v7 = v5;
      v5 = i;
      v8 = *((char *)v7 + 23);
      v9 = *((char *)v7 + 47);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)v7 + 47);
      else
        v10 = (size_t)v7[4];
      if (v9 >= 0)
        v11 = i;
      else
        v11 = (const void **)v7[3];
      if (v8 >= 0)
        v12 = *((unsigned __int8 *)v7 + 23);
      else
        v12 = (size_t)v7[1];
      if (v8 >= 0)
        v13 = v7;
      else
        v13 = *v7;
      if (v12 >= v10)
        v14 = v10;
      else
        v14 = v12;
      result = (const void **)memcmp(v11, v13, v14);
      v15 = v10 < v12;
      if ((_DWORD)result)
        v15 = (int)result < 0;
      if (v15)
      {
        v31 = v5[2];
        v16 = (unint64_t)v31;
        v30 = *(_OWORD *)v5;
        v5[1] = 0;
        v5[2] = 0;
        *v5 = 0;
        v17 = HIBYTE(v16);
        if ((v17 & 0x80u) == 0)
          v18 = v17;
        else
          v18 = *((_QWORD *)&v30 + 1);
        if ((v17 & 0x80u) == 0)
          v19 = &v30;
        else
          v19 = (__int128 *)v30;
        v20 = v5;
        do
        {
          v21 = v20 - 3;
          *(_OWORD *)v20 = *(_OWORD *)(v20 - 3);
          v20[2] = *(v20 - 1);
          *((_BYTE *)v20 - 1) = 0;
          *((_BYTE *)v20 - 24) = 0;
          v22 = *((unsigned __int8 *)v20 - 25);
          v23 = v20 - 6;
          v24 = (const void **)*(v20 - 6);
          v25 = (size_t)*(v20 - 5);
          if ((v22 & 0x80u) == 0)
            v26 = v22;
          else
            v26 = v25;
          if ((v22 & 0x80u) == 0)
            v27 = v23;
          else
            v27 = v24;
          if (v26 >= v18)
            v28 = v18;
          else
            v28 = v26;
          result = (const void **)memcmp(v19, v27, v28);
          v29 = (int)result < 0;
          if (!(_DWORD)result)
            v29 = v18 < v26;
          v20 = v21;
        }
        while (v29);
        *(_OWORD *)v21 = v30;
        v21[2] = v31;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3)
{
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  const void *v21;
  __int128 v22;
  const void *v23;
  const void *v24;
  __int128 v25;
  const void *v26;
  int v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  unint64_t v39;
  __int128 v40;
  const void *v41;
  size_t v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  const void *v51;
  __int128 v52;
  const void *v53;

  v6 = *((char *)a1 + 23);
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v6 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  if (v6 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = v8 < v10;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v15 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v8 >= v16)
    v18 = v16;
  else
    v18 = v8;
  v19 = memcmp(v17, v9, v18);
  v20 = v16 < v8;
  if (v19)
    v20 = v19 < 0;
  if (v14)
  {
    if (v20)
    {
      v21 = a1[2];
      v22 = *(_OWORD *)a1;
      v23 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
      return 1;
    }
    v39 = (unint64_t)a1[2];
    v40 = *(_OWORD *)a1;
    v41 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v41;
    *(_OWORD *)a2 = v40;
    a2[2] = (const void *)v39;
    v42 = HIBYTE(v39);
    v43 = *((char *)a3 + 23);
    if (v43 >= 0)
      v44 = *((unsigned __int8 *)a3 + 23);
    else
      v44 = (size_t)a3[1];
    if (v43 >= 0)
      v45 = a3;
    else
      v45 = *a3;
    if ((v42 & 0x80u) == 0)
      v46 = v42;
    else
      v46 = (size_t)a2[1];
    if ((v42 & 0x80u) == 0)
      v47 = a2;
    else
      v47 = *a2;
    if (v46 >= v44)
      v48 = v44;
    else
      v48 = v46;
    v49 = memcmp(v45, v47, v48);
    v50 = v44 < v46;
    if (v49)
      v50 = v49 < 0;
    if (!v50)
      return 1;
    v51 = a2[2];
    v52 = *(_OWORD *)a2;
    v53 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v53;
    *(_OWORD *)a3 = v52;
    a3[2] = v51;
    return 2;
  }
  if (v20)
  {
    v24 = a2[2];
    v25 = *(_OWORD *)a2;
    v26 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v26;
    *(_OWORD *)a3 = v25;
    a3[2] = v24;
    v27 = *((char *)a1 + 23);
    v28 = *((char *)a2 + 23);
    if (v28 >= 0)
      v29 = *((unsigned __int8 *)a2 + 23);
    else
      v29 = (size_t)a2[1];
    if (v28 >= 0)
      v30 = a2;
    else
      v30 = *a2;
    if (v27 >= 0)
      v31 = *((unsigned __int8 *)a1 + 23);
    else
      v31 = (size_t)a1[1];
    if (v27 >= 0)
      v32 = a1;
    else
      v32 = *a1;
    if (v31 >= v29)
      v33 = v29;
    else
      v33 = v31;
    v34 = memcmp(v30, v32, v33);
    v35 = v29 < v31;
    if (v34)
      v35 = v34 < 0;
    if (!v35)
      return 1;
    v36 = a1[2];
    v37 = *(_OWORD *)a1;
    v38 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
    return 2;
  }
  return 0;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, const void **a2)
{
  const void **v2;
  int v4;
  size_t v5;
  __int128 *v6;
  size_t v7;
  const void **v8;
  size_t v9;
  int v10;
  BOOL v11;
  const void **v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  const void **v19;
  const void **v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  const void **v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  const void **v36;
  __int128 v37;
  size_t v38;
  __int128 *v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  const void **v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  BOOL v52;
  void **v53;
  __int128 v54;
  __int128 v55;
  __int128 v57;
  const void *v58;
  __int128 v59;
  const void *v60;

  v2 = a2;
  v58 = a1[2];
  v57 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v4 = *((char *)a2 - 1);
  if (SHIBYTE(v58) >= 0)
    v5 = HIBYTE(v58);
  else
    v5 = *((_QWORD *)&v57 + 1);
  if (SHIBYTE(v58) >= 0)
    v6 = &v57;
  else
    v6 = (__int128 *)v57;
  if (v4 >= 0)
    v7 = *((unsigned __int8 *)a2 - 1);
  else
    v7 = (size_t)*(a2 - 2);
  if (v4 >= 0)
    v8 = a2 - 3;
  else
    v8 = (const void **)*(a2 - 3);
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  v11 = v5 < v7;
  if (v10)
    v11 = v10 < 0;
  if (v11)
  {
    v12 = a1 + 3;
    do
    {
      v13 = *((char *)v12 + 23);
      if (v13 >= 0)
        v14 = *((unsigned __int8 *)v12 + 23);
      else
        v14 = (size_t)v12[1];
      if (v13 >= 0)
        v15 = v12;
      else
        v15 = *v12;
      if (v14 >= v5)
        v16 = v5;
      else
        v16 = v14;
      v17 = memcmp(v6, v15, v16);
      v18 = v5 < v14;
      if (v17)
        v18 = v17 < 0;
      v12 += 3;
    }
    while (!v18);
    v19 = v12 - 3;
  }
  else
  {
    v20 = a1 + 3;
    do
    {
      v19 = v20;
      if (v20 >= v2)
        break;
      v21 = *((char *)v20 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v20 + 23);
      else
        v22 = (size_t)v20[1];
      if (v21 >= 0)
        v23 = v20;
      else
        v23 = *v20;
      if (v22 >= v5)
        v24 = v5;
      else
        v24 = v22;
      v25 = memcmp(v6, v23, v24);
      v26 = v25 < 0;
      if (!v25)
        v26 = v5 < v22;
      v20 = v19 + 3;
    }
    while (!v26);
  }
  if (v19 < v2)
  {
    v27 = v2 - 3;
    do
    {
      v28 = *((char *)v27 + 23);
      if (v28 >= 0)
        v29 = *((unsigned __int8 *)v27 + 23);
      else
        v29 = (size_t)v27[1];
      if (v28 >= 0)
        v30 = v27;
      else
        v30 = *v27;
      if (v29 >= v5)
        v31 = v5;
      else
        v31 = v29;
      v32 = memcmp(v6, v30, v31);
      v33 = v5 < v29;
      if (v32)
        v33 = v32 < 0;
      v27 -= 3;
    }
    while (v33);
    v2 = v27 + 3;
  }
  for (; v19 < v2; v2 = v46 + 3)
  {
    v34 = *(_OWORD *)v19;
    v60 = v19[2];
    v59 = v34;
    v35 = *(_OWORD *)v2;
    v19[2] = v2[2];
    *(_OWORD *)v19 = v35;
    v36 = v19 + 3;
    v37 = v59;
    v2[2] = v60;
    *(_OWORD *)v2 = v37;
    if (SHIBYTE(v58) >= 0)
      v38 = HIBYTE(v58);
    else
      v38 = *((_QWORD *)&v57 + 1);
    if (SHIBYTE(v58) >= 0)
      v39 = &v57;
    else
      v39 = (__int128 *)v57;
    do
    {
      v40 = *((char *)v36 + 23);
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v36 + 23);
      else
        v41 = (size_t)v36[1];
      if (v40 >= 0)
        v42 = v36;
      else
        v42 = *v36;
      if (v41 >= v38)
        v43 = v38;
      else
        v43 = v41;
      v44 = memcmp(v39, v42, v43);
      v45 = v38 < v41;
      if (v44)
        v45 = v44 < 0;
      v36 += 3;
    }
    while (!v45);
    v19 = v36 - 3;
    v46 = v2 - 3;
    do
    {
      v47 = *((char *)v46 + 23);
      if (v47 >= 0)
        v48 = *((unsigned __int8 *)v46 + 23);
      else
        v48 = (size_t)v46[1];
      if (v47 >= 0)
        v49 = v46;
      else
        v49 = *v46;
      if (v48 >= v38)
        v50 = v38;
      else
        v50 = v48;
      v51 = memcmp(v39, v49, v50);
      v52 = v38 < v48;
      if (v51)
        v52 = v51 < 0;
      v46 -= 3;
    }
    while (v52);
  }
  v53 = (void **)(v19 - 3);
  if (v19 - 3 == a1)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*v53);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v54 = *(_OWORD *)v53;
    a1[2] = *(v19 - 1);
    *(_OWORD *)a1 = v54;
    *((_BYTE *)v19 - 1) = 0;
    *((_BYTE *)v19 - 24) = 0;
  }
  v55 = v57;
  *(v19 - 1) = v58;
  *(_OWORD *)v53 = v55;
  return v19;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  __int128 *v8;
  int v9;
  size_t v10;
  char *v11;
  size_t v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  const void **v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  const void **v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  const void **v32;
  __int128 v33;
  __int128 v34;
  const void **v35;
  __int128 v36;
  size_t v37;
  __int128 *v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  BOOL v44;
  const void **v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  const void *v59;

  v4 = 0;
  v57 = *((_QWORD *)a1 + 2);
  v5 = v57;
  v56 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  else
    v7 = *((_QWORD *)&v56 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = &v56;
  else
    v8 = (__int128 *)v56;
  do
  {
    v9 = *((char *)a1 + v4 + 47);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a1 + v4 + 47);
    else
      v10 = *(_QWORD *)((char *)a1 + v4 + 32);
    if (v9 >= 0)
      v11 = (char *)a1 + v4 + 24;
    else
      v11 = *(char **)((char *)a1 + v4 + 24);
    if (v7 >= v10)
      v12 = v10;
    else
      v12 = v7;
    v13 = memcmp(v11, v8, v12);
    v14 = v10 < v7;
    if (v13)
      v14 = v13 < 0;
    v4 += 24;
  }
  while (v14);
  v15 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    v24 = (const void **)(a2 - 24);
    while (1)
    {
      v23 = (unint64_t)(v24 + 3);
      if (v15 >= (unint64_t)(v24 + 3))
        break;
      v25 = *((char *)v24 + 23);
      if (v25 >= 0)
        v26 = *((unsigned __int8 *)v24 + 23);
      else
        v26 = (size_t)v24[1];
      if (v25 >= 0)
        v27 = v24;
      else
        v27 = *v24;
      if (v7 >= v26)
        v28 = v26;
      else
        v28 = v7;
      v29 = memcmp(v27, v8, v28);
      v30 = v26 < v7;
      if (v29)
        v30 = v29 < 0;
      v24 -= 3;
      if (v30)
      {
        v23 = (unint64_t)(v24 + 3);
        break;
      }
    }
  }
  else
  {
    v16 = (const void **)(a2 - 24);
    do
    {
      v17 = *((char *)v16 + 23);
      if (v17 >= 0)
        v18 = *((unsigned __int8 *)v16 + 23);
      else
        v18 = (size_t)v16[1];
      if (v17 >= 0)
        v19 = v16;
      else
        v19 = *v16;
      if (v7 >= v18)
        v20 = v18;
      else
        v20 = v7;
      v21 = memcmp(v19, v8, v20);
      v22 = v18 < v7;
      if (v21)
        v22 = v21 < 0;
      v16 -= 3;
    }
    while (!v22);
    v23 = (unint64_t)(v16 + 3);
  }
  if (v15 >= v23)
  {
    v31 = v15;
    v52 = v15 - 24;
    if ((__int128 *)(v15 - 24) != a1)
    {
LABEL_84:
      if (*((char *)a1 + 23) < 0)
        operator delete(*(void **)a1);
      v53 = *(_OWORD *)v52;
      *((_QWORD *)a1 + 2) = *(_QWORD *)(v52 + 16);
      *a1 = v53;
      *(_BYTE *)(v31 - 1) = 0;
      *(_BYTE *)(v31 - 24) = 0;
      goto LABEL_90;
    }
  }
  else
  {
    v31 = v15;
    v32 = (const void **)v23;
    do
    {
      v33 = *(_OWORD *)v31;
      v59 = *(const void **)(v31 + 16);
      v58 = v33;
      v34 = *(_OWORD *)v32;
      *(_QWORD *)(v31 + 16) = v32[2];
      *(_OWORD *)v31 = v34;
      v35 = (const void **)(v31 + 24);
      v36 = v58;
      v32[2] = v59;
      *(_OWORD *)v32 = v36;
      if (v57 >= 0)
        v37 = HIBYTE(v57);
      else
        v37 = *((_QWORD *)&v56 + 1);
      if (v57 >= 0)
        v38 = &v56;
      else
        v38 = (__int128 *)v56;
      do
      {
        v39 = *((char *)v35 + 23);
        if (v39 >= 0)
          v40 = *((unsigned __int8 *)v35 + 23);
        else
          v40 = (size_t)v35[1];
        if (v39 >= 0)
          v41 = v35;
        else
          v41 = *v35;
        if (v37 >= v40)
          v42 = v40;
        else
          v42 = v37;
        v43 = memcmp(v41, v38, v42);
        v44 = v40 < v37;
        if (v43)
          v44 = v43 < 0;
        v35 += 3;
      }
      while (v44);
      v31 = (unint64_t)(v35 - 3);
      v45 = v32 - 3;
      do
      {
        v46 = *((char *)v45 + 23);
        if (v46 >= 0)
          v47 = *((unsigned __int8 *)v45 + 23);
        else
          v47 = (size_t)v45[1];
        if (v46 >= 0)
          v48 = v45;
        else
          v48 = *v45;
        if (v37 >= v47)
          v49 = v47;
        else
          v49 = v37;
        v50 = memcmp(v48, v38, v49);
        v51 = v47 < v37;
        if (v50)
          v51 = v50 < 0;
        v45 -= 3;
      }
      while (!v51);
      v32 = v45 + 3;
    }
    while (v31 < (unint64_t)v32);
    v52 = v31 - 24;
    if ((__int128 *)(v31 - 24) != a1)
      goto LABEL_84;
  }
  if (*(char *)(v31 - 1) < 0)
    operator delete(*(void **)v52);
LABEL_90:
  v54 = v56;
  *(_QWORD *)(v52 + 16) = v57;
  *(_OWORD *)v52 = v54;
  return v52;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  int v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void **v19;
  const void **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  int v38;
  size_t v39;
  __int128 *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  __int128 v46;
  const void *v47;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *(char *)(a1 + 23);
      v8 = *((char *)a2 - 1);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      if (v8 >= 0)
        v10 = a2 - 3;
      else
        v10 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      if (v7 >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      if (v11 >= v9)
        v13 = v9;
      else
        v13 = v11;
      v14 = memcmp(v10, v12, v13);
      v15 = v9 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
      {
        v16 = *(const void **)(a1 + 16);
        v17 = *(_OWORD *)a1;
        v18 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v18;
        *(_OWORD *)v6 = v17;
        v6[2] = v16;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
      return 1;
    default:
      v19 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v20 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v24 = *((char *)v19 + 23);
    v25 = *((char *)v20 + 23);
    if (v25 >= 0)
      v26 = *((unsigned __int8 *)v20 + 23);
    else
      v26 = (size_t)v20[1];
    if (v25 >= 0)
      v27 = v20;
    else
      v27 = *v20;
    if (v24 >= 0)
      v28 = *((unsigned __int8 *)v19 + 23);
    else
      v28 = (size_t)v19[1];
    if (v24 >= 0)
      v29 = v19;
    else
      v29 = *v19;
    if (v28 >= v26)
      v30 = v26;
    else
      v30 = v28;
    v31 = memcmp(v27, v29, v30);
    v32 = v26 < v28;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v46 = *(_OWORD *)v20;
      v47 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v33 = v21;
      do
      {
        v34 = a1 + v33;
        *(_OWORD *)(v34 + 72) = *(_OWORD *)(a1 + v33 + 48);
        *(_QWORD *)(v34 + 88) = *(_QWORD *)(a1 + v33 + 64);
        *(_BYTE *)(v34 + 71) = 0;
        *(_BYTE *)(v34 + 48) = 0;
        if (v33 == -48)
        {
          v23 = a1;
          goto LABEL_24;
        }
        v37 = *(const void **)(v34 + 24);
        v35 = v34 + 24;
        v36 = v37;
        v38 = *(char *)(v35 + 23);
        if (SHIBYTE(v47) >= 0)
          v39 = HIBYTE(v47);
        else
          v39 = *((_QWORD *)&v46 + 1);
        if (SHIBYTE(v47) >= 0)
          v40 = &v46;
        else
          v40 = (__int128 *)v46;
        if (v38 >= 0)
          v41 = *(unsigned __int8 *)(v35 + 23);
        else
          v41 = *(_QWORD *)(v35 + 8);
        if (v38 >= 0)
          v42 = (const void *)v35;
        else
          v42 = v36;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        v33 -= 24;
      }
      while (v45);
      v23 = a1 + v33 + 72;
LABEL_24:
      *(_OWORD *)v23 = v46;
      *(_QWORD *)(v23 + 16) = v47;
      if (++v22 == 8)
        return v20 + 3 == a2;
    }
    v19 = v20;
    v21 += 24;
    v20 += 3;
    if (v20 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  __n128 result;
  _BOOL4 v17;
  const void *v18;
  __int128 v19;
  const void *v20;
  int v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a3 + 23);
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = *a4;
  if (v8 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = *((_QWORD *)a3 + 1);
  if (v8 >= 0)
    v13 = a3;
  else
    v13 = *(const void **)a3;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v17 = v10 < v12;
  if (v15)
    v17 = v15 < 0;
  if (v17)
  {
    v18 = (const void *)*((_QWORD *)a3 + 2);
    v19 = *a3;
    v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    v21 = *((char *)a2 + 23);
    v22 = *((char *)a3 + 23);
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a3 + 23);
    else
      v23 = *((_QWORD *)a3 + 1);
    if (v22 >= 0)
      v24 = a3;
    else
      v24 = *(const void **)a3;
    if (v21 >= 0)
      v25 = *((unsigned __int8 *)a2 + 23);
    else
      v25 = *((_QWORD *)a2 + 1);
    if (v21 >= 0)
      v26 = a2;
    else
      v26 = *(const void **)a2;
    if (v25 >= v23)
      v27 = v23;
    else
      v27 = v25;
    v28 = memcmp(v24, v26, v27);
    v29 = v23 < v25;
    if (v28)
      v29 = v28 < 0;
    if (v29)
    {
      v30 = *((_QWORD *)a2 + 2);
      v31 = *a2;
      v32 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v32;
      *a3 = v31;
      *((_QWORD *)a3 + 2) = v30;
      v33 = *(char *)(a1 + 23);
      v34 = *((char *)a2 + 23);
      if (v34 >= 0)
        v35 = *((unsigned __int8 *)a2 + 23);
      else
        v35 = *((_QWORD *)a2 + 1);
      if (v34 >= 0)
        v36 = a2;
      else
        v36 = *(const void **)a2;
      if (v33 >= 0)
        v37 = *(unsigned __int8 *)(a1 + 23);
      else
        v37 = *(_QWORD *)(a1 + 8);
      if (v33 >= 0)
        v38 = (const void *)a1;
      else
        v38 = *(const void **)a1;
      if (v37 >= v35)
        v39 = v35;
      else
        v39 = v37;
      v40 = memcmp(v36, v38, v39);
      v41 = v35 < v37;
      if (v40)
        v41 = v40 < 0;
      if (v41)
      {
        v42 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v43 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v43;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v42;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  __int128 *v15;
  size_t v16;
  int v17;
  __n128 result;
  _BOOL4 v19;
  const void *v20;
  __int128 v21;
  const void *v22;
  int v23;
  int v24;
  size_t v25;
  __int128 *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a4 + 23);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a4 + 23);
  else
    v14 = *((_QWORD *)a4 + 1);
  if (v10 >= 0)
    v15 = a4;
  else
    v15 = *(__int128 **)a4;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v19 = v12 < v14;
  if (v17)
    v19 = v17 < 0;
  if (v19)
  {
    v20 = (const void *)*((_QWORD *)a4 + 2);
    v21 = *a4;
    v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((_QWORD *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    v23 = *(char *)(a3 + 23);
    v24 = *((char *)a4 + 23);
    if (v24 >= 0)
      v25 = *((unsigned __int8 *)a4 + 23);
    else
      v25 = *((_QWORD *)a4 + 1);
    if (v24 >= 0)
      v26 = a4;
    else
      v26 = *(__int128 **)a4;
    if (v23 >= 0)
      v27 = *(unsigned __int8 *)(a3 + 23);
    else
      v27 = *(_QWORD *)(a3 + 8);
    if (v23 >= 0)
      v28 = (const void *)a3;
    else
      v28 = *(const void **)a3;
    if (v27 >= v25)
      v29 = v25;
    else
      v29 = v27;
    v30 = memcmp(v26, v28, v29);
    v31 = v25 < v27;
    if (v30)
      v31 = v30 < 0;
    if (v31)
    {
      v32 = *(_QWORD *)(a3 + 16);
      v33 = *(_OWORD *)a3;
      v34 = *((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(_QWORD *)(a3 + 16) = v34;
      *a4 = v33;
      *((_QWORD *)a4 + 2) = v32;
      v35 = *(char *)(a2 + 23);
      v36 = *(char *)(a3 + 23);
      if (v36 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      if (v36 >= 0)
        v38 = (const void *)a3;
      else
        v38 = *(const void **)a3;
      if (v35 >= 0)
        v39 = *(unsigned __int8 *)(a2 + 23);
      else
        v39 = *(_QWORD *)(a2 + 8);
      if (v35 >= 0)
        v40 = (const void *)a2;
      else
        v40 = *(const void **)a2;
      if (v39 >= v37)
        v41 = v37;
      else
        v41 = v39;
      v42 = memcmp(v38, v40, v41);
      v43 = v37 < v39;
      if (v42)
        v43 = v42 < 0;
      if (v43)
      {
        v44 = *(_QWORD *)(a2 + 16);
        v45 = *(_OWORD *)a2;
        v46 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v46;
        *(_OWORD *)a3 = v45;
        *(_QWORD *)(a3 + 16) = v44;
        v47 = *(char *)(a1 + 23);
        v48 = *(char *)(a2 + 23);
        if (v48 >= 0)
          v49 = *(unsigned __int8 *)(a2 + 23);
        else
          v49 = *(_QWORD *)(a2 + 8);
        if (v48 >= 0)
          v50 = (const void *)a2;
        else
          v50 = *(const void **)a2;
        if (v47 >= 0)
          v51 = *(unsigned __int8 *)(a1 + 23);
        else
          v51 = *(_QWORD *)(a1 + 8);
        if (v47 >= 0)
          v52 = (const void *)a1;
        else
          v52 = *(const void **)a1;
        if (v51 >= v49)
          v53 = v49;
        else
          v53 = v51;
        v54 = memcmp(v50, v52, v53);
        v55 = v49 < v51;
        if (v54)
          v55 = v54 < 0;
        if (v55)
        {
          v56 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v57 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v57;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  signed __int8 v14;
  signed __int8 v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  __int8 *v20;
  size_t v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  __n128 *v25;
  int v26;
  int v27;
  size_t v28;
  __n128 *v29;
  size_t v30;
  __n128 *v31;
  size_t v32;
  int v33;
  __n128 result;
  BOOL v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  __n128 *v42;
  size_t v43;
  __int8 *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  BOOL v48;
  __n128 *v49;
  int v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  __n128 *v58;
  __n128 v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v67 = v4;
    v68 = v5;
    v7 = a4;
    v8 = a1;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = a3;
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (__n128 *)(a1 + 24 * v11);
      v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        v25 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        v14 = v12[2].n128_i8[15];
        v15 = v12[1].n128_i8[7];
        v61 = (__n128 *)v12[1].n128_u64[1];
        v62 = (__n128 *)v12->n128_u64[0];
        if (v15 >= 0)
          v16 = v12[1].n128_u8[7];
        else
          v16 = v12->n128_u64[1];
        if (v15 >= 0)
          v17 = (const void *)(a1 + 24 * v11);
        else
          v17 = (const void *)v12->n128_u64[0];
        v18 = v6 >> 1;
        if (v14 >= 0)
          v19 = v12[2].n128_u8[15];
        else
          v19 = v12[2].n128_u64[0];
        if (v14 >= 0)
          v20 = &v12[1].n128_i8[8];
        else
          v20 = (__int8 *)v12[1].n128_u64[1];
        if (v19 >= v16)
          v21 = v16;
        else
          v21 = v19;
        v22 = memcmp(v17, v20, v21);
        v23 = v16 >= v19;
        v9 = v18;
        v24 = !v23;
        if (v22)
          v24 = v22 < 0;
        v48 = !v24;
        v25 = v62;
        if (!v48)
        {
          v25 = v61;
          v12 = (__n128 *)((char *)v12 + 24);
          v11 = v13;
        }
      }
      v26 = v7[1].n128_i8[7];
      v27 = v12[1].n128_i8[7];
      if (v27 >= 0)
        v28 = v12[1].n128_u8[7];
      else
        v28 = v12->n128_u64[1];
      if (v27 >= 0)
        v29 = v12;
      else
        v29 = v25;
      if (v26 >= 0)
        v30 = v7[1].n128_u8[7];
      else
        v30 = v7->n128_u64[1];
      if (v26 >= 0)
        v31 = v7;
      else
        v31 = (__n128 *)v7->n128_u64[0];
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
      v33 = memcmp(v29, v31, v32);
      v35 = v28 < v30;
      if (v33)
        v35 = v33 < 0;
      if (!v35)
      {
        v65 = *v7;
        v66 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v63 = v9;
        v64 = v10;
        do
        {
          v58 = v12;
          v59 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *v7 = v59;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11)
            break;
          v60 = (2 * v11) | 1;
          v12 = (__n128 *)(v8 + 24 * v60);
          v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            v36 = v12[2].n128_i8[15];
            v37 = v12[1].n128_u64[1];
            v38 = v12[1].n128_i8[7];
            v39 = v12->n128_u64[0];
            v40 = v8;
            if (v38 >= 0)
              v41 = v12[1].n128_u8[7];
            else
              v41 = v12->n128_u64[1];
            if (v38 >= 0)
              v42 = v12;
            else
              v42 = (__n128 *)v12->n128_u64[0];
            if (v36 >= 0)
              v43 = v12[2].n128_u8[15];
            else
              v43 = v12[2].n128_u64[0];
            if (v36 >= 0)
              v44 = &v12[1].n128_i8[8];
            else
              v44 = (__int8 *)v12[1].n128_u64[1];
            if (v43 >= v41)
              v45 = v41;
            else
              v45 = v43;
            v46 = memcmp(v42, v44, v45);
            v23 = v41 >= v43;
            v8 = v40;
            v47 = !v23;
            if (v46)
              v47 = v46 < 0;
            v48 = !v47;
            if (v47)
              v49 = (__n128 *)v37;
            else
              v49 = (__n128 *)v39;
            if (!v48)
              v12 = (__n128 *)((char *)v12 + 24);
            v9 = v63;
            v10 = v64;
            if (v48)
              v11 = v60;
          }
          else
          {
            v49 = (__n128 *)v12->n128_u64[0];
            v11 = v60;
          }
          v50 = v12[1].n128_i8[7];
          v51 = v50 >= 0 ? v12[1].n128_u8[7] : v12->n128_u64[1];
          v52 = v50 >= 0 ? v12 : v49;
          v53 = v66 >= 0 ? HIBYTE(v66) : v65.n128_u64[1];
          v54 = v66 >= 0 ? &v65 : (__n128 *)v65.n128_u64[0];
          v55 = v53 >= v51 ? v51 : v53;
          v56 = memcmp(v52, v54, v55);
          v57 = v51 < v53;
          if (v56)
            v57 = v56 < 0;
          v7 = v58;
        }
        while (!v57);
        result = v65;
        v58[1].n128_u64[0] = v66;
        *v58 = result;
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  __int128 v21;
  uint64_t v24;
  char v25;
  _BYTE v27[15];

  if (a4 >= 2)
  {
    v5 = 0;
    v24 = *(_QWORD *)a1;
    *(_QWORD *)v27 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v27[7] = *(_QWORD *)(a1 + 15);
    v25 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v6 = (unint64_t)(a4 - 2) >> 1;
    v7 = a1;
    do
    {
      v9 = v7 + 24 * v5 + 24;
      v10 = 2 * v5;
      v5 = (2 * v5) | 1;
      v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        v12 = *(char *)(v9 + 47);
        v13 = *(char *)(v9 + 23);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(v9 + 23);
        else
          v14 = *(_QWORD *)(v9 + 8);
        if (v13 >= 0)
          v15 = (const void *)v9;
        else
          v15 = *(const void **)v9;
        if (v12 >= 0)
          v16 = *(unsigned __int8 *)(v9 + 47);
        else
          v16 = *(_QWORD *)(v9 + 32);
        if (v12 >= 0)
          v17 = (const void *)(v9 + 24);
        else
          v17 = *(const void **)(v9 + 24);
        if (v16 >= v14)
          v18 = v14;
        else
          v18 = v16;
        v19 = memcmp(v15, v17, v18);
        v20 = v14 < v16;
        if (v19)
          v20 = v19 < 0;
        if (v20)
        {
          v9 += 24;
          v5 = v11;
        }
      }
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)v9;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v9 + 23) = 0;
      *(_BYTE *)v9 = 0;
      v7 = v9;
    }
    while (v5 <= v6);
    if (v9 == a2 - 24)
    {
      *(_QWORD *)v9 = v24;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)v27;
      *(_QWORD *)(v9 + 15) = *(_QWORD *)&v27[7];
      *(_BYTE *)(v9 + 23) = v25;
    }
    else
    {
      v21 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v9 = v21;
      *(_QWORD *)(a2 - 24) = v24;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v27;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v27[7];
      *(_BYTE *)(a2 - 1) = v25;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v9 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 24 - a1) >> 3));
    }
  }
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  double result;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  int v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v35 = v4;
    v36 = v5;
    v8 = v6 >> 1;
    v9 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v10 = (__int128 *)(a2 - 24);
    v11 = *(char *)(a2 - 1);
    v12 = *((char *)v9 + 23);
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v9 + 23);
    else
      v13 = *((_QWORD *)v9 + 1);
    if (v12 >= 0)
      v14 = (const void *)(a1 + 24 * (v6 >> 1));
    else
      v14 = *(const void **)v9;
    if (v11 >= 0)
      v15 = *(unsigned __int8 *)(a2 - 1);
    else
      v15 = *(_QWORD *)(a2 - 16);
    if (v11 >= 0)
      v16 = (const void *)(a2 - 24);
    else
      v16 = *(const void **)(a2 - 24);
    if (v15 >= v13)
      v17 = v13;
    else
      v17 = v15;
    v18 = memcmp(v14, v16, v17);
    v20 = v13 < v15;
    if (v18)
      v20 = v18 < 0;
    if (v20)
    {
      v34 = *((_QWORD *)v10 + 2);
      v21 = v34;
      v33 = *v10;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      v22 = HIBYTE(v21);
      if ((v22 & 0x80u) == 0)
        v23 = v22;
      else
        v23 = *((_QWORD *)&v33 + 1);
      if ((v22 & 0x80u) == 0)
        v24 = &v33;
      else
        v24 = (__int128 *)v33;
      do
      {
        v25 = v9;
        v26 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v26;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v27 = *((char *)v9 + 23);
        v28 = v27 >= 0 ? *((unsigned __int8 *)v9 + 23) : *((_QWORD *)v9 + 1);
        v29 = v27 >= 0 ? (const void *)(a1 + 24 * v8) : *(const void **)v9;
        v30 = v23 >= v28 ? v28 : v23;
        v31 = memcmp(v29, v24, v30);
        v32 = v28 < v23;
        if (v31)
          v32 = v31 < 0;
        v10 = v25;
      }
      while (v32);
      result = *(double *)&v33;
      *v25 = v33;
      *((_QWORD *)v25 + 2) = v34;
    }
  }
  return result;
}

char *absl::lts_2020_02_25::strings_internal::JoinAlgorithm<std::__wrap_iter<std::string const*>,void>@<X0>(char *__src@<X0>, char *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (__src == a2)
    return __src;
  v8 = (uint64_t)__src;
  v9 = a5;
  if (__src[23] < 0)
  {
    v10 = *((_QWORD *)__src + 1);
    v11 = __src + 24;
    if (__src + 24 == a2)
      goto LABEL_10;
  }
  else
  {
    v10 = __src[23];
    v11 = __src + 24;
    if (__src + 24 == a2)
      goto LABEL_10;
  }
  v12 = v11;
  do
  {
    while ((v12[23] & 0x80000000) == 0)
    {
      v10 += a4 + v12[23];
      v12 += 24;
      if (v12 == a2)
        goto LABEL_10;
    }
    v10 += a4 + *((_QWORD *)v12 + 1);
    v12 += 24;
  }
  while (v12 != a2);
LABEL_10:
  if (v10)
  {
    if (v10 >= 0x17
      && (std::string::__grow_by(v9, 0x16uLL, v10 - 22, 0, 0, 0, 0),
          v9->__r_.__value_.__l.__size_ = 0,
          SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0))
    {
      v13 = (std::string *)v9->__r_.__value_.__r.__words[0];
      v9->__r_.__value_.__l.__size_ = v10;
    }
    else
    {
      *((_BYTE *)&v9->__r_.__value_.__s + 23) = v10 & 0x7F;
      v13 = v9;
    }
    v13->__r_.__value_.__s.__data_[v10] = 0;
    if ((v9->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
    if (*(char *)(v8 + 23) < 0)
    {
      __src = (char *)memcpy(v9, *(const void **)v8, *(_QWORD *)(v8 + 8));
      LODWORD(v14) = *(char *)(v8 + 23);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_18:
        v14 = v14;
        if (v11 == a2)
          return __src;
        goto LABEL_22;
      }
    }
    else
    {
      __src = (char *)memcpy(v9, (const void *)v8, *(unsigned __int8 *)(v8 + 23));
      LODWORD(v14) = *(char *)(v8 + 23);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_18;
    }
    v14 = *(_QWORD *)(v8 + 8);
    if (v11 != a2)
    {
LABEL_22:
      v15 = (char *)v9 + v14;
      while (1)
      {
        memcpy(v15, a3, a4);
        if (v11[23] < 0)
        {
          v16 = &v15[a4];
          __src = (char *)memcpy(v16, *(const void **)v11, *((_QWORD *)v11 + 1));
          v17 = v11[23];
          if ((v17 & 0x80000000) == 0)
            goto LABEL_23;
LABEL_28:
          v15 = &v16[*((_QWORD *)v11 + 1)];
          v11 += 24;
          if (v11 == a2)
            return __src;
        }
        else
        {
          v16 = &v15[a4];
          __src = (char *)memcpy(v16, v11, v11[23]);
          v17 = v11[23];
          if (v17 < 0)
            goto LABEL_28;
LABEL_23:
          v15 = &v16[v17];
          v11 += 24;
          if (v11 == a2)
            return __src;
        }
      }
    }
  }
  return __src;
}

void sub_22DB195D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SolutionObservers>::~Delete(_QWORD *a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = (void **)a1[1];
  *a1 = &off_24F985040;
  a1[1] = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (!*v2)
    {
LABEL_13:
      MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
      return a1;
    }
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_12:
      v2[1] = v3;
      operator delete(v5);
      goto LABEL_13;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = (char *)*((_QWORD *)v4 - 1);
      if (v4 - 32 == v6)
      {
        v6 = v4 - 32;
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_7;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_7:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_12;
      }
    }
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SolutionObservers>::~Delete(_QWORD *a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v1 = (void **)a1[1];
  *a1 = &off_24F985040;
  a1[1] = 0;
  if (!v1)
LABEL_14:
    JUMPOUT(0x22E31DF78);
  v2 = (char *)*v1;
  if (!*v1)
  {
LABEL_13:
    MEMORY[0x22E31DF78](v1, 0x20C40960023A9);
    goto LABEL_14;
  }
  v3 = (char *)v1[1];
  v4 = *v1;
  if (v3 == v2)
  {
LABEL_12:
    v1[1] = v2;
    operator delete(v4);
    goto LABEL_13;
  }
  while (1)
  {
    v7 = v3 - 32;
    v5 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v5)
    {
      v5 = v3 - 32;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_7:
    v3 = v7;
    if (v7 == v2)
    {
      v4 = *v1;
      goto LABEL_12;
    }
  }
}

_QWORD *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24F985078;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 1));
  return a1;
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24F985078;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 1));
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  const operations_research::sat::SatParameters *v1;
  _QWORD *v2;

  v1 = (const operations_research::sat::SatParameters *)(a1 + 8);
  v2 = operator new(0x248uLL);
  *v2 = &off_24F985078;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v2 + 1), v1);
  return v2;
}

void sub_22DB1981C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F985078;
  return operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(a2 + 1), (const operations_research::sat::SatParameters *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::destroy_deallocate(uint64_t a1)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 8));
  operator delete((void *)a1);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, operations_research::sat::SatParameters *a3@<X8>)
{
  const operations_research::sat::SatParameters *v4;
  uint64_t v5;
  operations_research::sat::SatParameters *v6;
  operations_research::sat::SatParameters **v7;

  v4 = (const operations_research::sat::SatParameters *)(a1 + 8);
  v5 = *a2;
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*a2);
  operations_research::sat::SatParameters::CopyFrom(v6, v4);
  v7 = (operations_research::sat::SatParameters **)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v5);
  operations_research::sat::SatSolver::SetParameters(v7, v4);
  return operations_research::sat::SatParameters::SatParameters(a3, v4);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v3) & 0x80000000) == 0)
      {
        v6 = *v4 + v2;
        if (*(_QWORD *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
        }
        v5 = *(_QWORD **)(v6 + 40);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v4 = 0;
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::~raw_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v3) & 0x80000000) == 0)
      {
        v6 = *v4 + v2;
        if (*(_QWORD *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
        }
        v5 = *(_QWORD **)(v6 + 40);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v4 = 0;
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  return a1;
}

void operations_research::sat::DomainDeductions::~DomainDeductions(operations_research::sat::DomainDeductions *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 136);
    do
    {
      if ((*(char *)(*((_QWORD *)this + 16) + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        if ((*(_BYTE *)(v6 + 8) & 1) != 0)
        {
          operator delete(*(void **)(v6 + 16));
          v2 = *((_QWORD *)this + 19);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*((void **)this + 16));
    *((_QWORD *)this + 16) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    *v5 = 0;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 20);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    v9 = *((_QWORD *)this + 14);
    v10 = (void *)*((_QWORD *)this + 13);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 14);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v8;
    operator delete(v10);
  }
  v14 = (void *)*((_QWORD *)this + 10);
  if (v14)
  {
    *((_QWORD *)this + 11) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 5) = v15;
    operator delete(v15);
  }
  v16 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v16;
    operator delete(v16);
  }
}

void operations_research::sat::PresolveContext::~PresolveContext(void **this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void **v33;
  void **v34;
  void *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  void *v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  void **v45;
  void **v46;
  void *v47;
  void **v48;
  char v49;
  void *v50;
  void *v51;
  _QWORD *v52;
  void **v53;
  void **v54;
  void *v55;
  void **v56;
  char v57;
  void **v58;
  void **v59;
  void *v60;
  void **v61;
  char v62;
  void *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  void **v70;
  void **v71;
  void *v72;
  _QWORD *v73;
  void **v74;
  void **v75;
  void *v76;
  _QWORD *v77;

  if (this[174])
  {
    operator delete(this[171]);
    this[171] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[176] = 0;
    this[172] = 0;
    this[174] = 0;
    this[173] = 0;
  }
  v2 = this[175];
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  v3 = this[168];
  if (v3)
  {
    this[169] = v3;
    operator delete(v3);
  }
  v4 = this[165];
  if (v4)
  {
    this[166] = v4;
    operator delete(v4);
  }
  v5 = this[162];
  if (v5)
  {
    this[163] = v5;
    operator delete(v5);
  }
  v6 = this[159];
  if (v6)
  {
    this[160] = v6;
    operator delete(v6);
  }
  v7 = this[156];
  if (v7)
  {
    this[157] = v7;
    operator delete(v7);
  }
  v8 = this[153];
  if (v8)
  {
    this[154] = v8;
    operator delete(v8);
  }
  v9 = this[149];
  if (v9)
  {
    this[150] = v9;
    operator delete(v9);
  }
  v10 = this[146];
  if (v10)
  {
    this[147] = v10;
    operator delete(v10);
  }
  v11 = this[143];
  if (v11)
  {
    this[144] = v11;
    operator delete(v11);
  }
  v12 = this[140];
  if (v12)
  {
    this[141] = v12;
    operator delete(v12);
  }
  v13 = this[137];
  if (v13)
  {
    this[138] = v13;
    operator delete(v13);
  }
  v14 = (char *)this[133];
  if (v14)
  {
    v15 = 0;
    v16 = 8;
    do
    {
      if ((v15[(_QWORD)this[130]] & 0x80000000) == 0)
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this[131] + v16);
        v14 = (char *)this[133];
      }
      ++v15;
      v16 += 56;
    }
    while (v15 != v14);
    operator delete(this[130]);
    this[130] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[135] = 0;
    this[132] = 0;
    this[133] = 0;
    this[131] = 0;
  }
  v17 = this[134];
  if (v17)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  v18 = (char *)this[127];
  if (v18)
  {
    v19 = 0;
    v20 = 8;
    do
    {
      if ((v19[(_QWORD)this[124]] & 0x80000000) == 0)
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this[125] + v20);
        v18 = (char *)this[127];
      }
      ++v19;
      v20 += 56;
    }
    while (v19 != v18);
    operator delete(this[124]);
    this[124] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[129] = 0;
    this[126] = 0;
    this[127] = 0;
    this[125] = 0;
  }
  v21 = this[128];
  if (v21)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v21);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::~raw_hash_set((uint64_t)(this + 118));
  std::deque<int>::~deque[abi:ne180100]((uint64_t)(this + 112));
  if (this[109])
  {
    operator delete(this[106]);
    this[106] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[111] = 0;
    this[107] = 0;
    this[109] = 0;
    this[108] = 0;
  }
  v22 = this[110];
  if (v22)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v22);
  if (this[103])
  {
    operator delete(this[100]);
    this[100] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[105] = 0;
    this[101] = 0;
    this[103] = 0;
    this[102] = 0;
  }
  v23 = this[104];
  if (v23)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v23);
  v24 = this[97];
  if (v24)
  {
    this[98] = v24;
    operator delete(v24);
  }
  v25 = (char *)this[94];
  if (v25)
  {
    v26 = (char *)this[95];
    v27 = this[94];
    if (v26 != v25)
    {
      v28 = (char *)this[95];
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = this[94];
    }
    this[95] = v25;
    operator delete(v27);
  }
  v31 = this[91];
  if (v31)
  {
    this[92] = v31;
    operator delete(v31);
  }
  v32 = this[88];
  if (v32)
  {
    this[89] = v32;
    operator delete(v32);
  }
  v33 = (void **)this[85];
  if (v33)
  {
    v34 = (void **)this[86];
    v35 = this[85];
    if (v34 != v33)
    {
      do
      {
        if (*(v34 - 3))
        {
          operator delete(*(v34 - 6));
          *(v34 - 1) = 0;
          *(v34 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v34 - 5) = 0;
          *(v34 - 4) = 0;
          *(v34 - 3) = 0;
        }
        v36 = *(v34 - 2);
        if (v36)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v36);
        v34 -= 6;
      }
      while (v34 != v33);
      v35 = this[85];
    }
    this[86] = v33;
    operator delete(v35);
  }
  v37 = (char *)this[82];
  if (v37)
  {
    v38 = (char *)this[83];
    v39 = this[82];
    if (v38 != v37)
    {
      v40 = (char *)this[83];
      do
      {
        v42 = (void *)*((_QWORD *)v40 - 3);
        v40 -= 24;
        v41 = v42;
        if (v42)
        {
          *((_QWORD *)v38 - 2) = v41;
          operator delete(v41);
        }
        v38 = v40;
      }
      while (v40 != v37);
      v39 = this[82];
    }
    this[83] = v37;
    operator delete(v39);
  }
  if (((_BYTE)this[77] & 1) != 0)
    operator delete(this[78]);
  v43 = this[73];
  if (v43)
  {
    this[74] = v43;
    operator delete(v43);
  }
  if (this[70])
  {
    operator delete(this[67]);
    this[67] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[72] = 0;
    this[68] = 0;
    this[70] = 0;
    this[69] = 0;
  }
  v44 = this[71];
  if (v44)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v44);
  v45 = (void **)this[64];
  if (v45)
  {
    v46 = (void **)this[65];
    v47 = this[64];
    if (v46 != v45)
    {
      v48 = (void **)this[65];
      do
      {
        v49 = *((_BYTE *)v48 - 24);
        v48 -= 3;
        if ((v49 & 1) != 0)
          operator delete(*(v46 - 2));
        v46 = v48;
      }
      while (v48 != v45);
      v47 = this[64];
    }
    this[65] = v45;
    operator delete(v47);
  }
  operations_research::sat::DomainDeductions::~DomainDeductions((operations_research::sat::DomainDeductions *)(this + 41));
  v50 = this[38];
  if (v50)
  {
    this[39] = v50;
    operator delete(v50);
  }
  v51 = this[32];
  if (v51)
  {
    this[33] = v51;
    operator delete(v51);
  }
  if (this[28])
  {
    operator delete(this[25]);
    this[30] = 0;
    this[25] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[26] = 0;
    this[27] = 0;
    this[28] = 0;
  }
  v52 = this[29];
  if (v52)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v52);
  v53 = (void **)this[22];
  if (v53)
  {
    v54 = (void **)this[23];
    v55 = this[22];
    if (v54 != v53)
    {
      v56 = (void **)this[23];
      do
      {
        v57 = *((_BYTE *)v56 - 24);
        v56 -= 3;
        if ((v57 & 1) != 0)
          operator delete(*(v54 - 2));
        v54 = v56;
      }
      while (v56 != v53);
      v55 = this[22];
    }
    this[23] = v53;
    operator delete(v55);
  }
  v58 = (void **)this[19];
  if (v58)
  {
    v59 = (void **)this[20];
    v60 = this[19];
    if (v59 != v58)
    {
      v61 = (void **)this[20];
      do
      {
        v62 = *((_BYTE *)v61 - 24);
        v61 -= 3;
        if ((v62 & 1) != 0)
          operator delete(*(v59 - 2));
        v59 = v61;
      }
      while (v61 != v58);
      v60 = this[19];
    }
    this[20] = v58;
    operator delete(v60);
  }
  v63 = this[16];
  if (v63)
  {
    this[17] = v63;
    operator delete(v63);
  }
  v64 = (char *)this[12];
  if (v64)
  {
    v65 = 0;
    v66 = 0;
    v67 = this + 10;
    do
    {
      if ((v66[(_QWORD)this[9]] & 0x80000000) == 0)
      {
        v68 = *v67 + v65;
        if (*(char *)(v68 + 23) < 0)
        {
          operator delete(*(void **)v68);
          v64 = (char *)this[12];
        }
      }
      ++v66;
      v65 += 32;
    }
    while (v66 != v64);
    operator delete(this[9]);
    this[9] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[14] = 0;
    this[11] = 0;
    this[12] = 0;
    *v67 = 0;
  }
  v69 = this[13];
  if (v69)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v69);
  v70 = (void **)this[3];
  if (v70)
  {
    v71 = (void **)this[4];
    v72 = this[3];
    if (v71 != v70)
    {
      do
      {
        if (*(v71 - 3))
        {
          operator delete(*(v71 - 6));
          *(v71 - 1) = 0;
          *(v71 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v71 - 5) = 0;
          *(v71 - 4) = 0;
          *(v71 - 3) = 0;
        }
        v73 = *(v71 - 2);
        if (v73)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v73);
        v71 -= 6;
      }
      while (v71 != v70);
      v72 = this[3];
    }
    this[4] = v70;
    operator delete(v72);
  }
  v74 = (void **)*this;
  if (*this)
  {
    v75 = (void **)this[1];
    v76 = *this;
    if (v75 != v74)
    {
      do
      {
        if (*(v75 - 3))
        {
          operator delete(*(v75 - 6));
          *(v75 - 1) = 0;
          *(v75 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v75 - 5) = 0;
          *(v75 - 4) = 0;
          *(v75 - 3) = 0;
        }
        v77 = *(v75 - 2);
        if (v77)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v77);
        v75 -= 6;
      }
      while (v75 != v74);
      v76 = *this;
    }
    this[1] = v74;
    operator delete(v76);
  }
}

void operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0::operator()(const google::protobuf::Message **a1)
{
  google::LogMessage *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  const char **v8;
  std::string::size_type v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  std::string __p;
  _QWORD v14[6];
  uint64_t v15;
  size_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = FLAGS_cp_model_dump_prefix;
  v16 = strlen((const char *)FLAGS_cp_model_dump_prefix);
  v14[0] = "response.pbtxt";
  v14[1] = 14;
  absl::lts_2020_02_25::StrCat((uint64_t)&v15, (uint64_t)v14, &__p);
  v2 = google::LogMessage::LogMessage((google::LogMessage *)&v15, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2737);
  v3 = (_QWORD *)google::LogMessage::stream(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Dumping response proto to '", 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"'.", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)&v15);
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v9 = __p.__r_.__value_.__l.__size_;
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v15 = (uint64_t)v10;
  v16 = v9;
  file::SetTextProto(v8, *a1, 47802, &v12);
  if (v12)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2738);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: (file::SetTextProto(file, final_response, file::Defaults())).ok() ", 80);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22DB1A424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F985108;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F985108;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0::operator()((const google::protobuf::Message **)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  const operations_research::sat::CpSolverResponse *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _BYTE v8[16];

  google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2778);
  v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
  v3 = *(_QWORD *)(a1 + 8);
  if ((_UNKNOWN *)v3 == &operations_research::sat::_CpModelProto_default_instance_)
    v4 = 0;
  else
    v4 = (const operations_research::sat::CpSolverResponse *)(*(_QWORD *)(v3 + 120) != 0);
  operations_research::sat::CpSolverResponseStats(*(operations_research::sat **)a1, v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::LogMessage::~LogMessage((google::LogMessage *)v8);
}

void sub_22DB1A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F985188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F985188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1::operator()(a1 + 8);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24F985208;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F985208;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::operator()(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  google::protobuf::Arena *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  absl::lts_2020_02_25 *CurrentTimeNanos;
  absl::lts_2020_02_25::Mutex *v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  size_t v47;
  char *v48;
  absl::lts_2020_02_25::Mutex *v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v55;
  uint64_t v56;
  absl::lts_2020_02_25::Mutex *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  operations_research::sat::IntegerVariableProto *v66;
  const operations_research::sat::IntegerVariableProto *v67;
  int *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v77;
  uint64_t v78;
  unint64_t v79;
  void **v80;
  unint64_t v81;
  _QWORD *v82;
  void *__p;
  void *v84;
  absl::lts_2020_02_25::Mutex *v85;
  uint64_t *v86;
  int v87;

  v75 = *a2;
  v82 = (_QWORD *)a1[5];
  v2 = a1[8];
  v3 = a1[3];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(v2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v2);
  v6 = (void **)v5[1];
  v7 = (void **)v5[2];
  if (v7 == v6)
  {
    v31 = v75;
    v30 = a1;
    v28 = v5;
    v5[5] = 0;
    v39 = 0;
    goto LABEL_41;
  }
  v8 = v5[4];
  v9 = (unint64_t)v6[v8 / 0xAA] + 24 * (v8 % 0xAA);
  v74 = v5;
  v73 = v5 + 5;
  v79 = (unint64_t)v6[(v5[5] + v8) / 0xAA] + 24 * ((v5[5] + v8) % 0xAA);
  if (v9 == v79)
  {
    v29 = v5 + 5;
    v28 = v5;
    v31 = v75;
    v30 = a1;
    if (v7 != v6)
      goto LABEL_30;
LABEL_59:
    *v29 = 0;
    v39 = 0;
    goto LABEL_41;
  }
  v10 = &v6[v8 / 0xAA];
  v77 = (unsigned int *)(v3 + 40);
  v78 = v3;
  do
  {
    v11 = *(int **)(v3 + 56);
    v80 = v10;
    if (!v11)
    {
      v13 = *(_DWORD *)(v3 + 52);
      goto LABEL_14;
    }
    v12 = *(int *)(v3 + 48);
    v13 = *v11;
    if ((int)v12 >= *v11)
    {
      if (v13 != *(_DWORD *)(v3 + 52))
      {
LABEL_15:
        *v11 = v13 + 1;
        v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v3 + 40));
        v20 = *(_QWORD *)(v3 + 56);
        v21 = *(int *)(v3 + 48);
        *(_DWORD *)(v3 + 48) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = v14;
        if (*(_DWORD *)(v14 + 60) == 3)
          goto LABEL_16;
LABEL_8:
        operations_research::sat::ConstraintProto::clear_constraint(v14);
        *(_DWORD *)(v14 + 60) = 3;
        v15 = *(_QWORD *)(v14 + 8);
        v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) != 0)
          v16 = *(google::protobuf::Arena **)v16;
        v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v16);
        *(_QWORD *)(v14 + 48) = v17;
        v18 = *(int **)v9;
        v19 = *(int **)(v9 + 8);
        v81 = v9;
        if (*(int **)v9 == v19)
          goto LABEL_27;
LABEL_19:
        while (1)
        {
          v22 = *v18;
          v23 = (uint64_t)*v18 >> 1;
          v24 = *(_QWORD *)(v4 + 72);
          if (v23 >= (*(_QWORD *)(v4 + 80) - v24) >> 2)
            break;
          v25 = *(_DWORD *)(v24 + 4 * v23);
          LODWORD(__p) = v25;
          v87 = -1;
          if (v25 == -1)
            goto LABEL_23;
LABEL_25:
          v26 = *(_DWORD *)(*v82 + 4 * v25);
          v27 = *(unsigned int *)(v17 + 16);
          if ((_DWORD)v27 == *(_DWORD *)(v17 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v17 + 16), v27 + 1);
          *(_DWORD *)(*(_QWORD *)(v17 + 24) + 4 * v27) = v26 ^ -(v22 & 1);
          *(_DWORD *)(v17 + 16) = v27 + 1;
          if (++v18 == v19)
            goto LABEL_27;
        }
        LODWORD(__p) = -1;
        v87 = -1;
LABEL_23:
        v86 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&__p, (int)&v87, "var != -1");
        if (v86)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2705, &v86);
          google::LogMessage::stream((google::LogMessage *)&__p);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
        v25 = -1;
        goto LABEL_25;
      }
LABEL_14:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v77, v13 + 1);
      v11 = *(int **)(v3 + 56);
      v13 = *v11;
      goto LABEL_15;
    }
    *(_DWORD *)(v3 + 48) = v12 + 1;
    v14 = *(_QWORD *)&v11[2 * v12 + 2];
    if (*(_DWORD *)(v14 + 60) != 3)
      goto LABEL_8;
LABEL_16:
    v17 = *(_QWORD *)(v14 + 48);
    v18 = *(int **)v9;
    v19 = *(int **)(v9 + 8);
    v81 = v9;
    if (*(int **)v9 != v19)
      goto LABEL_19;
LABEL_27:
    v10 = v80;
    v9 = v81 + 24;
    if (v81 + 24 - (_QWORD)*v80 == 4080)
    {
      v10 = v80 + 1;
      v9 = (unint64_t)v80[1];
    }
    v3 = v78;
  }
  while (v9 != v79);
  v29 = v73;
  v28 = v74;
  v6 = (void **)v74[1];
  v7 = (void **)v74[2];
  v31 = v75;
  v30 = a1;
  if (v7 == v6)
    goto LABEL_59;
LABEL_30:
  v32 = v28[4];
  v33 = &v6[v32 / 0xAA];
  v34 = (unint64_t)*v33;
  v35 = (unint64_t)*v33 + 24 * (v32 % 0xAA);
  v36 = (unint64_t)v6[(v28[5] + v32) / 0xAA] + 24 * ((v28[5] + v32) % 0xAA);
  if (v35 != v36)
  {
    do
    {
      v37 = *(void **)v35;
      if (*(_QWORD *)v35)
      {
        *(_QWORD *)(v35 + 8) = v37;
        operator delete(v37);
        v34 = (unint64_t)*v33;
      }
      v35 += 24;
      if (v35 - v34 == 4080)
      {
        v38 = (unint64_t)v33[1];
        ++v33;
        v34 = v38;
        v35 = v38;
      }
    }
    while (v35 != v36);
    v6 = (void **)v28[1];
    v7 = (void **)v28[2];
  }
  *v29 = 0;
  v39 = (char *)v7 - (char *)v6;
  if (v39 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v40 = v28[2];
      v6 = (void **)(v28[1] + 8);
      v28[1] = v6;
      v39 = v40 - (_QWORD)v6;
    }
    while (v39 > 0x10);
  }
LABEL_41:
  if (v39 >> 3 == 1)
  {
    v41 = 85;
  }
  else
  {
    if (v39 >> 3 != 2)
      goto LABEL_46;
    v41 = 170;
  }
  v28[4] = v41;
LABEL_46:
  v44 = *(int *)(v31 + 16);
  if (!(_DWORD)v44)
  {
    if (!*(_BYTE *)(v30[2] + 130)
      || ((v50 = *(_DWORD *)(v30[1] + 24), *(_DWORD *)(v30[3] + 24) >= v50) ? (v51 = v50 < 1) : (v51 = 1), v51))
    {
LABEL_56:
      v52 = v30[6];
      if (*(_BYTE *)v52)
      {
        CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
        v53 = (uint64_t)CurrentTimeNanos + *(_QWORD *)(v52 + 16) - *(_QWORD *)(v52 + 8);
      }
      else
      {
        v53 = *(_QWORD *)(v52 + 16);
      }
      *(double *)(v31 + 208) = (double)v53 * 0.000000001;
      v54 = v30[7];
      if (*(_BYTE *)v54)
        v55 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos) - *(_QWORD *)(v54 + 8) + *(_QWORD *)(v54 + 16);
      else
        v55 = *(_QWORD *)(v54 + 16);
      *(double *)(v31 + 216) = (double)v55 * 0.000000001;
      v49 = (absl::lts_2020_02_25::Mutex *)v30[4];
      absl::lts_2020_02_25::Mutex::ReaderLock(v49, v43);
      v56 = *(_QWORD *)(*((_QWORD *)v49 + 1) + 112);
      absl::lts_2020_02_25::Mutex::ReaderUnlock(v49, v57, v58, v59, v60, v61, v62, v63);
      *(_QWORD *)(v31 + 224) = v56;
      return v49 & 1;
    }
    v65 = 0;
    while (1)
    {
      v67 = *(const operations_research::sat::IntegerVariableProto **)(*(_QWORD *)(v30[3] + 32) + 8 * v65 + 8);
      v68 = *(int **)(v31 + 104);
      if (!v68)
        break;
      v69 = *(int *)(v31 + 96);
      v70 = *v68;
      if ((int)v69 >= *v68)
      {
        if (v70 != *(_DWORD *)(v31 + 100))
          goto LABEL_74;
        goto LABEL_73;
      }
      *(_DWORD *)(v31 + 96) = v69 + 1;
      v66 = *(operations_research::sat::IntegerVariableProto **)&v68[2 * v69 + 2];
LABEL_67:
      operations_research::sat::IntegerVariableProto::CopyFrom(v66, v67);
      if (++v65 >= *(int *)(v30[1] + 24))
        goto LABEL_56;
    }
    v70 = *(_DWORD *)(v31 + 100);
LABEL_73:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v31 + 88), v70 + 1);
    v68 = *(int **)(v31 + 104);
    v70 = *v68;
LABEL_74:
    *v68 = v70 + 1;
    v66 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v31 + 88));
    v71 = *(_QWORD *)(v31 + 104);
    v72 = *(int *)(v31 + 96);
    *(_DWORD *)(v31 + 96) = v72 + 1;
    *(_QWORD *)(v71 + 8 * v72 + 8) = v66;
    goto LABEL_67;
  }
  v45 = v30[1];
  v46 = *(const void **)(v31 + 24);
  v84 = 0;
  v85 = 0;
  __p = 0;
  if ((v44 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v47 = 8 * v44;
  v48 = (char *)operator new(8 * v44);
  v49 = (absl::lts_2020_02_25::Mutex *)&v48[8 * v44];
  __p = v48;
  v85 = v49;
  memcpy(v48, v46, v47);
  v84 = v49;
  LOBYTE(v49) = operations_research::sat::SolutionIsFeasible(v45, (uint64_t)&__p, v30[3], (int **)v30[5]);
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  return v49 & 1;
}

void sub_22DB1AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DB1AE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target_type()
{
}

_OWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d)
    return (_OWORD *)v4[5];
LABEL_12:
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F985288;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::PostsolveClauses>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24F985288;
  a1[1] = 0;
  if (v2)
  {
    v3 = std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](v2);
    MEMORY[0x22E31DF78](v3, 0x1080C40BE8D5F09);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PostsolveClauses>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24F985288;
  a1[1] = 0;
  if (v2)
  {
    v3 = std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](v2);
    MEMORY[0x22E31DF78](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__value_func<BOOL ()(operations_research::sat::CpSolverResponse *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB1B290(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24F9852D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24F9852D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  absl::lts_2020_02_25::Mutex *v7;
  absl::lts_2020_02_25 *CurrentTimeNanos;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  int v14;
  absl::lts_2020_02_25::Mutex *v15;
  uint64_t v16;
  absl::lts_2020_02_25::Mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  v4 = a1[1];
  v5 = *(_DWORD *)(v4 + 24);
  v6 = (int *)(*a2 + 16);
  if (*v6 > 0
    || *(int *)(v3 + 40) >= 1
    && (v6 = (int *)(v3 + 64), v14 = *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 40) = v5, v14 >= 1))
  {
    *v6 = v5;
  }
  v7 = (absl::lts_2020_02_25::Mutex *)(v4 + 16);
  CurrentTimeNanos = (absl::lts_2020_02_25 *)(v3 + 88);
  if (*(_BYTE *)(a1[2] + 130))
    v9 = CurrentTimeNanos == v7;
  else
    v9 = 1;
  if (!v9)
  {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>((uint64_t)CurrentTimeNanos, (uint64_t)v7);
    v10 = a1[3];
    if (!*(_BYTE *)v10)
      goto LABEL_11;
LABEL_9:
    CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    v11 = (uint64_t)CurrentTimeNanos + *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8);
    goto LABEL_12;
  }
  v10 = a1[3];
  if (*(_BYTE *)v10)
    goto LABEL_9;
LABEL_11:
  v11 = *(_QWORD *)(v10 + 16);
LABEL_12:
  *(double *)(v3 + 208) = (double)v11 * 0.000000001;
  v12 = a1[5];
  if (*(_BYTE *)v12)
    v13 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos) - *(_QWORD *)(v12 + 8) + *(_QWORD *)(v12 + 16);
  else
    v13 = *(_QWORD *)(v12 + 16);
  *(double *)(v3 + 216) = (double)v13 * 0.000000001;
  v15 = (absl::lts_2020_02_25::Mutex *)a1[4];
  absl::lts_2020_02_25::Mutex::ReaderLock(v15, v7);
  v16 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 112);
  absl::lts_2020_02_25::Mutex::ReaderUnlock(v15, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v3 + 224) = v16;
  return 1;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24F985350;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24F985350;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::operator()(_QWORD *a1, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  _BYTE v18[16];
  int v19;
  const void *v20;

  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v18, a2);
  v3 = a1[5];
  __p = v18;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 48))(v4, &__p);
  v5 = v19;
  if (v19 && FLAGS_cp_model_check_intermediate_solutions)
  {
    v6 = a1[1];
    v7 = v20;
    v16 = 0;
    v17 = 0;
    __p = 0;
    if (v19 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = 8 * v19;
    v9 = (char *)operator new(v8);
    v10 = &v9[8 * v5];
    __p = v9;
    v17 = v10;
    memcpy(v9, v7, v8);
    v16 = v10;
    operations_research::sat::SolutionIsFeasible(v6, (uint64_t)&__p, 0, 0);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
  v11 = (uint64_t *)a1[2];
  v12 = *v11;
  v13 = v11[1];
  if (*v11 != v13)
  {
    do
    {
      v14 = *(_QWORD *)(v12 + 24);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 48))(v14, v18);
      v12 += 32;
    }
    while (v12 != v13);
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v18);
}

void sub_22DB1B68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&a12);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F9853D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F9853D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  unsigned __int8 **v2;
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 ***)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v2, a2);
  atomic_store(1u, v2[3]);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::target_type()
{
}

void operations_research::sat::SetToNegatedLinearExpression(operations_research::sat *this, const operations_research::sat::LinearExpressionProto *a2, operations_research::sat::LinearExpressionProto *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  operations_research::sat::LinearExpressionProto::Clear(a2);
  if (*((int *)this + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v5);
      v7 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v7 == *((_DWORD *)a2 + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a2 + 4, v7 + 1);
      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v7) = ~v6;
      *((_DWORD *)a2 + 4) = v7 + 1;
      v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5);
      v9 = *((unsigned int *)a2 + 10);
      if ((_DWORD)v9 == *((_DWORD *)a2 + 11))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a2 + 10, v9 + 1);
      *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v9) = v8;
      *((_DWORD *)a2 + 10) = v9 + 1;
      ++v5;
    }
    while (v5 < *((int *)this + 4));
  }
  *((_QWORD *)a2 + 8) = -*((_QWORD *)this + 8);
}

void operations_research::sat::GetReferencesUsedByConstraint(operations_research::sat *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  int v37;
  char *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t *v41;
  int v42;
  _DWORD *v43;
  uint64_t *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  switch(*((_DWORD *)this + 15))
  {
    case 3:
    case 4:
    case 5:
    case 0x1A:
      v5 = 0;
      v6 = *((_QWORD *)this + 6);
      v7 = (unint64_t *)(a2 + 24);
      v8 = *(int *)(v6 + 16);
      v9 = *(char **)(v6 + 24);
      v10 = &v9[4 * v8];
      goto LABEL_33;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v31 = *((_QWORD *)this + 6);
      v32 = *(_DWORD *)(v31 + 36);
      v33 = operator new(4uLL);
      *v33 = v32;
      v5 = v33 + 1;
      *(_QWORD *)(a2 + 8) = v33 + 1;
      *(_QWORD *)(a2 + 16) = v33 + 1;
      *(_QWORD *)a2 = v33;
      v8 = *(int *)(v31 + 16);
      v9 = *(char **)(v31 + 24);
      goto LABEL_32;
    case 0xC:
    case 0xD:
    case 0x10:
    case 0x19:
      v5 = 0;
      v11 = (uint64_t *)*((_QWORD *)this + 6);
      goto LABEL_4;
    case 0xE:
      v13 = *((_QWORD *)this + 6);
      v14 = *(_DWORD *)(v13 + 36);
      v15 = operator new(4uLL);
      *v15 = v14;
      *(_QWORD *)(a2 + 8) = v15 + 1;
      *(_QWORD *)(a2 + 16) = v15 + 1;
      *(_QWORD *)a2 = v15;
      v16 = *(_DWORD *)(v13 + 40);
      v17 = operator new(8uLL);
      v5 = v17 + 2;
      *v17 = *v15;
      v17[1] = v16;
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 8) = v17 + 2;
      *(_QWORD *)(a2 + 16) = v17 + 2;
      operator delete(v15);
      *(_QWORD *)(a2 + 8) = v5;
      if (*((_DWORD *)this + 15) == 14)
        v11 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v11 = &operations_research::sat::_ElementConstraintProto_default_instance_;
LABEL_4:
      v8 = *((int *)v11 + 4);
      v9 = (char *)v11[3];
      goto LABEL_32;
    case 0xF:
    case 0x17:
      v5 = 0;
      v12 = *((_QWORD *)this + 6);
      v7 = (unint64_t *)(a2 + 24);
      v8 = *(int *)(v12 + 64);
      v9 = *(char **)(v12 + 72);
      v10 = &v9[4 * v8];
      goto LABEL_33;
    case 0x11:
      v5 = 0;
      v26 = *((_QWORD *)this + 6);
      v8 = *(int *)(v26 + 112);
      v9 = *(char **)(v26 + 120);
      goto LABEL_32;
    case 0x12:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, *(char **)(*((_QWORD *)this + 6) + 24), (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24) + 4 * *(int *)(*((_QWORD *)this + 6) + 16)), *(int *)(*((_QWORD *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 18)
        v27 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v27 = &operations_research::sat::_InverseConstraintProto_default_instance_;
      v8 = *((int *)v27 + 10);
      v9 = (char *)v27[6];
      v5 = *(void **)(a2 + 8);
      goto LABEL_32;
    case 0x13:
      v34 = *((_QWORD *)this + 6);
      v35 = *(_DWORD *)(v34 + 16);
      v36 = operator new(4uLL);
      *v36 = v35;
      *(_QWORD *)(a2 + 8) = v36 + 1;
      *(_QWORD *)(a2 + 16) = v36 + 1;
      *(_QWORD *)a2 = v36;
      v37 = *(_DWORD *)(v34 + 20);
      v38 = (char *)operator new(8uLL);
      v39 = v38 + 8;
      *(_DWORD *)v38 = *v36;
      *((_DWORD *)v38 + 1) = v37;
      *(_QWORD *)a2 = v38;
      *(_QWORD *)(a2 + 8) = v38 + 8;
      *(_QWORD *)(a2 + 16) = v38 + 8;
      operator delete(v36);
      v40 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = v38 + 8;
      if (*((_DWORD *)this + 15) == 19)
        v41 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v41 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      v42 = *((_DWORD *)v41 + 6);
      if ((unint64_t)v39 >= v40)
      {
        v45 = *(_BYTE **)a2;
        v46 = ((uint64_t)v39 - *(_QWORD *)a2) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v48 = v40 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v50 = (char *)operator new(4 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[4 * v46];
        v52 = &v50[4 * v49];
        *(_DWORD *)v51 = v42;
        v43 = v51 + 4;
        if (v39 != (_DWORD *)v45)
        {
          v53 = v38 - v45 + 4;
          if (v53 < 0x1C)
            goto LABEL_67;
          v54 = (v53 >> 2) + 1;
          v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          v39 = (_DWORD *)((char *)v39 - v55);
          v51 -= v55;
          v56 = &v50[4 * v46 - 16];
          v57 = v38 - 8;
          v58 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v59 = *(_OWORD *)v57;
            *((_OWORD *)v56 - 1) = *((_OWORD *)v57 - 1);
            *(_OWORD *)v56 = v59;
            v56 -= 32;
            v57 -= 32;
            v58 -= 8;
          }
          while (v58);
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_67:
            do
            {
              v60 = *--v39;
              *((_DWORD *)v51 - 1) = v60;
              v51 -= 4;
            }
            while (v39 != (_DWORD *)v45);
          }
        }
        *(_QWORD *)a2 = v51;
        *(_QWORD *)(a2 + 8) = v43;
        *(_QWORD *)(a2 + 16) = v52;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *((_DWORD *)v38 + 2) = v42;
        v43 = v38 + 12;
      }
      *(_QWORD *)(a2 + 8) = v43;
      return;
    case 0x16:
      v28 = *((_QWORD *)this + 6);
      v29 = *(_DWORD *)(v28 + 60);
      v30 = operator new(4uLL);
      *v30 = v29;
      v5 = v30 + 1;
      *(_QWORD *)(a2 + 8) = v30 + 1;
      *(_QWORD *)(a2 + 16) = v30 + 1;
      *(_QWORD *)a2 = v30;
      v8 = *(int *)(v28 + 40);
      v9 = *(char **)(v28 + 48);
LABEL_32:
      v10 = &v9[4 * v8];
      v7 = (unint64_t *)a2;
      goto LABEL_33;
    case 0x18:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, *(char **)(*((_QWORD *)this + 6) + 24), (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24) + 4 * *(int *)(*((_QWORD *)this + 6) + 16)), *(int *)(*((_QWORD *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 24)
        v44 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v44 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
      v7 = (unint64_t *)(a2 + 24);
      v8 = *((int *)v44 + 16);
      v9 = (char *)v44[9];
      v5 = *(void **)(a2 + 32);
      v10 = &v9[4 * v8];
LABEL_33:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(v7, v5, v9, v10, v8);
      return;
    case 0x1B:
      v18 = *(uint64_t **)(*((_QWORD *)this + 6) + 40);
      if (!v18)
        v18 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, (char *)v18[3], (char *)(v18[3] + 4 * *((int *)v18 + 4)), *((int *)v18 + 4));
      v19 = 0;
      if (*((_DWORD *)this + 15) != 27)
        goto LABEL_12;
      while (1)
      {
        v20 = (uint64_t *)*((_QWORD *)this + 6);
        if (v19 >= *((int *)v20 + 6))
          break;
        while (1)
        {
          v21 = *(_QWORD *)(v20[4] + 8 * v19 + 8);
          std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, *(void **)(a2 + 8), *(char **)(v21 + 24), (char *)(*(_QWORD *)(v21 + 24) + 4 * *(int *)(v21 + 16)), *(int *)(v21 + 16));
          ++v19;
          if (*((_DWORD *)this + 15) == 27)
            break;
LABEL_12:
          v20 = &operations_research::sat::_LinearArgumentProto_default_instance_;
          if (v19 >= (int)qword_25408AAC8)
            return;
        }
      }
      return;
    case 0x1C:
      v22 = *(uint64_t **)(*((_QWORD *)this + 6) + 40);
      if (!v22)
        v22 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, (char *)v22[3], (char *)(v22[3] + 4 * *((int *)v22 + 4)), *((int *)v22 + 4));
      v23 = 0;
      if (*((_DWORD *)this + 15) != 28)
        goto LABEL_20;
      break;
    default:
      return;
  }
  while (1)
  {
    v24 = (uint64_t *)*((_QWORD *)this + 6);
    if (v23 >= *((int *)v24 + 6))
      break;
    while (1)
    {
      v25 = *(_QWORD *)(v24[4] + 8 * v23 + 8);
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, *(void **)(a2 + 8), *(char **)(v25 + 24), (char *)(*(_QWORD *)(v25 + 24) + 4 * *(int *)(v25 + 16)), *(int *)(v25 + 16));
      ++v23;
      if (*((_DWORD *)this + 15) == 28)
        break;
LABEL_20:
      v24 = &operations_research::sat::_LinearArgumentProto_default_instance_;
      if (v23 >= (int)qword_25408AAC8)
        return;
    }
  }
}

void sub_22DB1BEA8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BEBC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BED0(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BEE4(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BEF8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF0C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF20(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF34(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF48(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF5C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF70(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF84(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BF98(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB1BFAC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ApplyToAllLiteralIndices(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = result;
  v4 = *(int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = 4 * v4;
    do
    {
      v43 = v5;
      v7 = *(_QWORD *)(v3 + 24);
      if (!v7)
LABEL_41:
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v43);
      v5 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  switch(*(_DWORD *)(a2 + 60))
  {
    case 3:
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(int *)(v8 + 16);
      if (!(_DWORD)v9)
        return result;
      v10 = *(_QWORD *)(v8 + 24);
      v11 = 4 * v9;
      while (1)
      {
        v43 = v10;
        v12 = *(_QWORD *)(v3 + 24);
        if (!v12)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v43);
        v10 += 4;
        v11 -= 4;
        if (!v11)
          return result;
      }
      goto LABEL_41;
    case 4:
      v13 = *(_QWORD *)(a2 + 48);
      v14 = *(int *)(v13 + 16);
      if (!(_DWORD)v14)
        return result;
      v15 = *(_QWORD *)(v13 + 24);
      v16 = 4 * v14;
      while (1)
      {
        v43 = v15;
        v17 = *(_QWORD *)(v3 + 24);
        if (!v17)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v43);
        v15 += 4;
        v16 -= 4;
        if (!v16)
          return result;
      }
      goto LABEL_41;
    case 5:
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(int *)(v18 + 16);
      if (!(_DWORD)v19)
        return result;
      v20 = *(_QWORD *)(v18 + 24);
      v21 = 4 * v19;
      while (1)
      {
        v43 = v20;
        v22 = *(_QWORD *)(v3 + 24);
        if (!v22)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v43);
        v20 += 4;
        v21 -= 4;
        if (!v21)
          return result;
      }
      goto LABEL_41;
    case 0xF:
      v23 = *(_QWORD *)(a2 + 48);
      v24 = *(int *)(v23 + 64);
      if (!(_DWORD)v24)
        return result;
      v25 = *(_QWORD *)(v23 + 72);
      v26 = 4 * v24;
      while (1)
      {
        v43 = v25;
        v27 = *(_QWORD *)(v3 + 24);
        if (!v27)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v43);
        v25 += 4;
        v26 -= 4;
        if (!v26)
          return result;
      }
      goto LABEL_41;
    case 0x17:
      v28 = *(_QWORD *)(a2 + 48);
      v29 = *(int *)(v28 + 64);
      if (!(_DWORD)v29)
        return result;
      v30 = *(_QWORD *)(v28 + 72);
      v31 = 4 * v29;
      while (1)
      {
        v43 = v30;
        v32 = *(_QWORD *)(v3 + 24);
        if (!v32)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 48))(v32, &v43);
        v30 += 4;
        v31 -= 4;
        if (!v31)
          return result;
      }
      goto LABEL_41;
    case 0x18:
      v33 = *(_QWORD *)(a2 + 48);
      v34 = *(int *)(v33 + 64);
      if (!(_DWORD)v34)
        return result;
      v35 = *(_QWORD *)(v33 + 72);
      v36 = 4 * v34;
      while (1)
      {
        v43 = v35;
        v37 = *(_QWORD *)(v3 + 24);
        if (!v37)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 48))(v37, &v43);
        v35 += 4;
        v36 -= 4;
        if (!v36)
          return result;
      }
      goto LABEL_41;
    case 0x1A:
      v38 = *(_QWORD *)(a2 + 48);
      v39 = *(int *)(v38 + 16);
      if (!(_DWORD)v39)
        return result;
      v40 = *(_QWORD *)(v38 + 24);
      v41 = 4 * v39;
      break;
    default:
      return result;
  }
  do
  {
    v43 = v40;
    v42 = *(_QWORD *)(v3 + 24);
    if (!v42)
      goto LABEL_41;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v43);
    v40 += 4;
    v41 -= 4;
  }
  while (v41);
  return result;
}

uint64_t operations_research::sat::ApplyToAllVariableIndices(uint64_t result, operations_research::sat::ConstraintProto *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::Arena **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::Arena **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::Arena **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::Arena **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  google::protobuf::Arena *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  google::protobuf::Arena *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  google::protobuf::Arena **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  google::protobuf::Arena *v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  google::protobuf::Arena *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  google::protobuf::Arena *v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  google::protobuf::Arena *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  google::protobuf::Arena *v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  google::protobuf::Arena *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  google::protobuf::Arena *v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  google::protobuf::Arena *v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  google::protobuf::Arena *v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  google::protobuf::Arena *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  google::protobuf::Arena **v137;
  uint64_t v138;
  uint64_t v139;
  google::protobuf::Arena *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  google::protobuf::Arena *v144;
  _QWORD *v145;
  uint64_t v146;
  google::protobuf::Arena *v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  google::protobuf::Arena *v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  google::protobuf::Arena *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  google::protobuf::Arena *v163;
  uint64_t v164;
  google::protobuf::Arena **v165;
  int *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int *v170;

  v3 = result;
  switch(*((_DWORD *)this + 15))
  {
    case 7:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v4 = *(_QWORD *)(result + 24);
      if (!v4)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v4 + 48))(v4, &v170);
      if (*((_DWORD *)this + 15) != 7)
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 7;
        v102 = *((_QWORD *)this + 1);
        v103 = (google::protobuf::Arena *)(v102 & 0xFFFFFFFFFFFFFFFELL);
        if ((v102 & 1) != 0)
          v103 = *(google::protobuf::Arena **)v103;
        v104 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v103);
        *((_QWORD *)this + 6) = v104;
        *(_DWORD *)(v104 + 36) = v169;
        if (*((_DWORD *)this + 15) != 7)
          goto LABEL_5;
LABEL_134:
        result = *((_QWORD *)this + 6);
        v7 = *(int *)(result + 16);
        if ((_DWORD)v7)
          goto LABEL_135;
        return result;
      }
      *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
      if (*((_DWORD *)this + 15) == 7)
        goto LABEL_134;
LABEL_5:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 7;
      v5 = *((_QWORD *)this + 1);
      v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((v5 & 1) == 0)
      {
        result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v6);
        *((_QWORD *)this + 6) = result;
        v7 = *(int *)(result + 16);
        if (!(_DWORD)v7)
          return result;
LABEL_135:
        v105 = *(int **)(result + 24);
        v106 = 4 * v7;
        while (1)
        {
          v170 = v105;
          v107 = *(_QWORD *)(v3 + 24);
          if (!v107)
            break;
          result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v107 + 48))(v107, &v170);
          ++v105;
          v106 -= 4;
          if (!v106)
            return result;
        }
        goto LABEL_224;
      }
      result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*(google::protobuf::Arena **)v6);
      *((_QWORD *)this + 6) = result;
      v7 = *(int *)(result + 16);
      if ((_DWORD)v7)
        goto LABEL_135;
      return result;
    case 8:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v8 = *(_QWORD *)(result + 24);
      if (!v8)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v8 + 48))(v8, &v170);
      if (*((_DWORD *)this + 15) == 8)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
        if (*((_DWORD *)this + 15) != 8)
          goto LABEL_11;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 8;
        v108 = *((_QWORD *)this + 1);
        v109 = (google::protobuf::Arena *)(v108 & 0xFFFFFFFFFFFFFFFELL);
        if ((v108 & 1) != 0)
          v109 = *(google::protobuf::Arena **)v109;
        v110 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v109);
        *((_QWORD *)this + 6) = v110;
        *(_DWORD *)(v110 + 36) = v169;
        if (*((_DWORD *)this + 15) != 8)
        {
LABEL_11:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 8;
          v9 = *((_QWORD *)this + 1);
          v10 = (google::protobuf::Arena **)(v9 & 0xFFFFFFFFFFFFFFFELL);
          if ((v9 & 1) != 0)
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v10);
            *((_QWORD *)this + 6) = result;
            v11 = *(int *)(result + 16);
            if (!(_DWORD)v11)
              return result;
          }
          else
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v10);
            *((_QWORD *)this + 6) = result;
            v11 = *(int *)(result + 16);
            if (!(_DWORD)v11)
              return result;
          }
LABEL_143:
          v111 = *(int **)(result + 24);
          v112 = 4 * v11;
          while (1)
          {
            v170 = v111;
            v113 = *(_QWORD *)(v3 + 24);
            if (!v113)
              break;
            result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v113 + 48))(v113, &v170);
            ++v111;
            v112 -= 4;
            if (!v112)
              return result;
          }
          goto LABEL_224;
        }
      }
      result = *((_QWORD *)this + 6);
      v11 = *(int *)(result + 16);
      if (!(_DWORD)v11)
        return result;
      goto LABEL_143;
    case 9:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v12 = *(_QWORD *)(result + 24);
      if (!v12)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v12 + 48))(v12, &v170);
      if (*((_DWORD *)this + 15) == 9)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
        if (*((_DWORD *)this + 15) != 9)
          goto LABEL_17;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 9;
        v114 = *((_QWORD *)this + 1);
        v115 = (google::protobuf::Arena *)(v114 & 0xFFFFFFFFFFFFFFFELL);
        if ((v114 & 1) != 0)
          v115 = *(google::protobuf::Arena **)v115;
        v116 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v115);
        *((_QWORD *)this + 6) = v116;
        *(_DWORD *)(v116 + 36) = v169;
        if (*((_DWORD *)this + 15) != 9)
        {
LABEL_17:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 9;
          v13 = *((_QWORD *)this + 1);
          v14 = (google::protobuf::Arena **)(v13 & 0xFFFFFFFFFFFFFFFELL);
          if ((v13 & 1) != 0)
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v14);
            *((_QWORD *)this + 6) = result;
            v15 = *(int *)(result + 16);
            if (!(_DWORD)v15)
              return result;
          }
          else
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v14);
            *((_QWORD *)this + 6) = result;
            v15 = *(int *)(result + 16);
            if (!(_DWORD)v15)
              return result;
          }
LABEL_151:
          v117 = *(int **)(result + 24);
          v118 = 4 * v15;
          while (1)
          {
            v170 = v117;
            v119 = *(_QWORD *)(v3 + 24);
            if (!v119)
              break;
            result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v119 + 48))(v119, &v170);
            ++v117;
            v118 -= 4;
            if (!v118)
              return result;
          }
          goto LABEL_224;
        }
      }
      result = *((_QWORD *)this + 6);
      v15 = *(int *)(result + 16);
      if (!(_DWORD)v15)
        return result;
      goto LABEL_151;
    case 0xA:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v16 = *(_QWORD *)(result + 24);
      if (!v16)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v16 + 48))(v16, &v170);
      if (*((_DWORD *)this + 15) == 10)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
        if (*((_DWORD *)this + 15) != 10)
          goto LABEL_23;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 10;
        v120 = *((_QWORD *)this + 1);
        v121 = (google::protobuf::Arena *)(v120 & 0xFFFFFFFFFFFFFFFELL);
        if ((v120 & 1) != 0)
          v121 = *(google::protobuf::Arena **)v121;
        v122 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v121);
        *((_QWORD *)this + 6) = v122;
        *(_DWORD *)(v122 + 36) = v169;
        if (*((_DWORD *)this + 15) != 10)
        {
LABEL_23:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 10;
          v17 = *((_QWORD *)this + 1);
          v18 = (google::protobuf::Arena **)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v18);
            *((_QWORD *)this + 6) = result;
            v19 = *(int *)(result + 16);
            if (!(_DWORD)v19)
              return result;
          }
          else
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v18);
            *((_QWORD *)this + 6) = result;
            v19 = *(int *)(result + 16);
            if (!(_DWORD)v19)
              return result;
          }
LABEL_159:
          v123 = *(int **)(result + 24);
          v124 = 4 * v19;
          while (1)
          {
            v170 = v123;
            v125 = *(_QWORD *)(v3 + 24);
            if (!v125)
              break;
            result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v125 + 48))(v125, &v170);
            ++v123;
            v124 -= 4;
            if (!v124)
              return result;
          }
          goto LABEL_224;
        }
      }
      result = *((_QWORD *)this + 6);
      v19 = *(int *)(result + 16);
      if (!(_DWORD)v19)
        return result;
      goto LABEL_159;
    case 0xB:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v20 = *(_QWORD *)(result + 24);
      if (!v20)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v20 + 48))(v20, &v170);
      if (*((_DWORD *)this + 15) == 11)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
        if (*((_DWORD *)this + 15) != 11)
          goto LABEL_29;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 11;
        v126 = *((_QWORD *)this + 1);
        v127 = (google::protobuf::Arena *)(v126 & 0xFFFFFFFFFFFFFFFELL);
        if ((v126 & 1) != 0)
          v127 = *(google::protobuf::Arena **)v127;
        v128 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v127);
        *((_QWORD *)this + 6) = v128;
        *(_DWORD *)(v128 + 36) = v169;
        if (*((_DWORD *)this + 15) != 11)
        {
LABEL_29:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 11;
          v21 = *((_QWORD *)this + 1);
          v22 = (google::protobuf::Arena **)(v21 & 0xFFFFFFFFFFFFFFFELL);
          if ((v21 & 1) != 0)
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v22);
            *((_QWORD *)this + 6) = result;
            v23 = *(int *)(result + 16);
            if (!(_DWORD)v23)
              return result;
          }
          else
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v22);
            *((_QWORD *)this + 6) = result;
            v23 = *(int *)(result + 16);
            if (!(_DWORD)v23)
              return result;
          }
LABEL_167:
          v129 = *(int **)(result + 24);
          v130 = 4 * v23;
          while (1)
          {
            v170 = v129;
            v131 = *(_QWORD *)(v3 + 24);
            if (!v131)
              break;
            result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v131 + 48))(v131, &v170);
            ++v129;
            v130 -= 4;
            if (!v130)
              return result;
          }
          goto LABEL_224;
        }
      }
      result = *((_QWORD *)this + 6);
      v23 = *(int *)(result + 16);
      if (!(_DWORD)v23)
        return result;
      goto LABEL_167;
    case 0xC:
      v24 = *((_QWORD *)this + 6);
      v25 = *(int *)(v24 + 16);
      if (!(_DWORD)v25)
        return result;
      v26 = *(int **)(v24 + 24);
      v27 = 4 * v25;
      while (1)
      {
        v170 = v26;
        v28 = *(_QWORD *)(v3 + 24);
        if (!v28)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v28 + 48))(v28, &v170);
        ++v26;
        v27 -= 4;
        if (!v27)
          return result;
      }
      goto LABEL_224;
    case 0xD:
      v29 = *((_QWORD *)this + 6);
      v30 = *(int *)(v29 + 16);
      if (!(_DWORD)v30)
        return result;
      v31 = *(int **)(v29 + 24);
      v32 = 4 * v30;
      while (1)
      {
        v170 = v31;
        v33 = *(_QWORD *)(v3 + 24);
        if (!v33)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v33 + 48))(v33, &v170);
        ++v31;
        v32 -= 4;
        if (!v32)
          return result;
      }
      goto LABEL_224;
    case 0xE:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
      v170 = &v169;
      v34 = *(_QWORD *)(result + 24);
      if (!v34)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v34 + 48))(v34, &v170);
      if (*((_DWORD *)this + 15) == 14)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 36) = v169;
        if (*((_DWORD *)this + 15) != 14)
        {
LABEL_45:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 14;
          v35 = *((_QWORD *)this + 1);
          v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
          if ((v35 & 1) != 0)
            v36 = *(google::protobuf::Arena **)v36;
          v37 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v36);
          *((_QWORD *)this + 6) = v37;
LABEL_175:
          v169 = *(_DWORD *)(v37 + 40);
          v170 = &v169;
          v135 = *(_QWORD *)(v3 + 24);
          if (!v135)
            goto LABEL_224;
          (*(void (**)(uint64_t, int **))(*(_QWORD *)v135 + 48))(v135, &v170);
          if (*((_DWORD *)this + 15) == 14)
          {
            *(_DWORD *)(*((_QWORD *)this + 6) + 40) = v169;
            if (*((_DWORD *)this + 15) != 14)
              goto LABEL_178;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 14;
            v152 = *((_QWORD *)this + 1);
            v153 = (google::protobuf::Arena *)(v152 & 0xFFFFFFFFFFFFFFFELL);
            if ((v152 & 1) != 0)
              v153 = *(google::protobuf::Arena **)v153;
            v154 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v153);
            *((_QWORD *)this + 6) = v154;
            *(_DWORD *)(v154 + 40) = v169;
            if (*((_DWORD *)this + 15) != 14)
            {
LABEL_178:
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
              *((_DWORD *)this + 15) = 14;
              v136 = *((_QWORD *)this + 1);
              v137 = (google::protobuf::Arena **)(v136 & 0xFFFFFFFFFFFFFFFELL);
              if ((v136 & 1) != 0)
              {
                result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v137);
                *((_QWORD *)this + 6) = result;
                v138 = *(int *)(result + 16);
                if (!(_DWORD)v138)
                  return result;
              }
              else
              {
                result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v137);
                *((_QWORD *)this + 6) = result;
                v138 = *(int *)(result + 16);
                if (!(_DWORD)v138)
                  return result;
              }
LABEL_203:
              v155 = *(int **)(result + 24);
              v156 = 4 * v138;
              while (1)
              {
                v170 = v155;
                v157 = *(_QWORD *)(v3 + 24);
                if (!v157)
                  break;
                result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v157 + 48))(v157, &v170);
                ++v155;
                v156 -= 4;
                if (!v156)
                  return result;
              }
              goto LABEL_224;
            }
          }
          result = *((_QWORD *)this + 6);
          v138 = *(int *)(result + 16);
          if (!(_DWORD)v138)
            return result;
          goto LABEL_203;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 14;
        v132 = *((_QWORD *)this + 1);
        v133 = (google::protobuf::Arena *)(v132 & 0xFFFFFFFFFFFFFFFELL);
        if ((v132 & 1) != 0)
          v133 = *(google::protobuf::Arena **)v133;
        v134 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v133);
        *((_QWORD *)this + 6) = v134;
        *(_DWORD *)(v134 + 36) = v169;
        if (*((_DWORD *)this + 15) != 14)
          goto LABEL_45;
      }
      v37 = *((_QWORD *)this + 6);
      goto LABEL_175;
    case 0x10:
      v38 = *((_QWORD *)this + 6);
      v39 = *(int *)(v38 + 16);
      if (!(_DWORD)v39)
        return result;
      v40 = *(int **)(v38 + 24);
      v41 = 4 * v39;
      while (1)
      {
        v170 = v40;
        v42 = *(_QWORD *)(v3 + 24);
        if (!v42)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v42 + 48))(v42, &v170);
        ++v40;
        v41 -= 4;
        if (!v41)
          return result;
      }
      goto LABEL_224;
    case 0x11:
      v43 = *((_QWORD *)this + 6);
      v44 = *(int *)(v43 + 112);
      if (!(_DWORD)v44)
        return result;
      v45 = *(int **)(v43 + 120);
      v46 = 4 * v44;
      while (1)
      {
        v170 = v45;
        v47 = *(_QWORD *)(v3 + 24);
        if (!v47)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v47 + 48))(v47, &v170);
        ++v45;
        v46 -= 4;
        if (!v46)
          return result;
      }
      goto LABEL_224;
    case 0x12:
      v48 = *((_QWORD *)this + 6);
      v49 = *(int *)(v48 + 16);
      if (!(_DWORD)v49)
        goto LABEL_63;
      v50 = *(int **)(v48 + 24);
      v51 = 4 * v49;
      do
      {
        v170 = v50;
        v52 = *(_QWORD *)(v3 + 24);
        if (!v52)
          goto LABEL_224;
        (*(void (**)(uint64_t, int **))(*(_QWORD *)v52 + 48))(v52, &v170);
        ++v50;
        v51 -= 4;
      }
      while (v51);
      if (*((_DWORD *)this + 15) == 18)
      {
LABEL_63:
        result = *((_QWORD *)this + 6);
        v53 = *(int *)(result + 40);
        if (!(_DWORD)v53)
          return result;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 18;
        v164 = *((_QWORD *)this + 1);
        v165 = (google::protobuf::Arena **)(v164 & 0xFFFFFFFFFFFFFFFELL);
        if ((v164 & 1) != 0)
        {
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(*v165);
          *((_QWORD *)this + 6) = result;
          v53 = *(int *)(result + 40);
          if (!(_DWORD)v53)
            return result;
        }
        else
        {
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>((google::protobuf::Arena *)v165);
          *((_QWORD *)this + 6) = result;
          v53 = *(int *)(result + 40);
          if (!(_DWORD)v53)
            return result;
        }
      }
      v166 = *(int **)(result + 48);
      v167 = 4 * v53;
      while (1)
      {
        v170 = v166;
        v168 = *(_QWORD *)(v3 + 24);
        if (!v168)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v168 + 48))(v168, &v170);
        ++v166;
        v167 -= 4;
        if (!v167)
          return result;
      }
      goto LABEL_224;
    case 0x13:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 16);
      v170 = &v169;
      v54 = *(_QWORD *)(result + 24);
      if (!v54)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v54 + 48))(v54, &v170);
      if (*((_DWORD *)this + 15) == 19)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 16) = v169;
        if (*((_DWORD *)this + 15) != 19)
        {
LABEL_68:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 19;
          v55 = *((_QWORD *)this + 1);
          v56 = (google::protobuf::Arena *)(v55 & 0xFFFFFFFFFFFFFFFELL);
          if ((v55 & 1) != 0)
            v56 = *(google::protobuf::Arena **)v56;
          v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v56);
          *((_QWORD *)this + 6) = v57;
LABEL_185:
          v169 = *((_DWORD *)v57 + 5);
          v170 = &v169;
          v142 = *(_QWORD *)(v3 + 24);
          if (!v142)
            goto LABEL_224;
          (*(void (**)(uint64_t, int **))(*(_QWORD *)v142 + 48))(v142, &v170);
          if (*((_DWORD *)this + 15) == 19)
          {
            *(_DWORD *)(*((_QWORD *)this + 6) + 20) = v169;
            if (*((_DWORD *)this + 15) != 19)
            {
LABEL_188:
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
              *((_DWORD *)this + 15) = 19;
              v143 = *((_QWORD *)this + 1);
              v144 = (google::protobuf::Arena *)(v143 & 0xFFFFFFFFFFFFFFFELL);
              if ((v143 & 1) != 0)
                v144 = *(google::protobuf::Arena **)v144;
              v145 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v144);
              *((_QWORD *)this + 6) = v145;
              goto LABEL_211;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 19;
            v158 = *((_QWORD *)this + 1);
            v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
            if ((v158 & 1) != 0)
              v159 = *(google::protobuf::Arena **)v159;
            v160 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v159);
            *((_QWORD *)this + 6) = v160;
            *((_DWORD *)v160 + 5) = v169;
            if (*((_DWORD *)this + 15) != 19)
              goto LABEL_188;
          }
          v145 = (_QWORD *)*((_QWORD *)this + 6);
LABEL_211:
          v169 = *((_DWORD *)v145 + 6);
          v170 = &v169;
          v161 = *(_QWORD *)(v3 + 24);
          if (!v161)
            goto LABEL_224;
          (*(void (**)(uint64_t, int **))(*(_QWORD *)v161 + 48))(v161, &v170);
          if (*((_DWORD *)this + 15) == 19)
          {
            result = *((_QWORD *)this + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 19;
            v162 = *((_QWORD *)this + 1);
            v163 = (google::protobuf::Arena *)(v162 & 0xFFFFFFFFFFFFFFFELL);
            if ((v162 & 1) != 0)
              v163 = *(google::protobuf::Arena **)v163;
            result = (uint64_t)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v163);
            *((_QWORD *)this + 6) = result;
          }
          *(_DWORD *)(result + 24) = v169;
          return result;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 19;
        v139 = *((_QWORD *)this + 1);
        v140 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v140 = *(google::protobuf::Arena **)v140;
        v141 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v140);
        *((_QWORD *)this + 6) = v141;
        *((_DWORD *)v141 + 4) = v169;
        if (*((_DWORD *)this + 15) != 19)
          goto LABEL_68;
      }
      v57 = (_QWORD *)*((_QWORD *)this + 6);
      goto LABEL_185;
    case 0x16:
      v169 = *(_DWORD *)(*((_QWORD *)this + 6) + 60);
      v170 = &v169;
      v58 = *(_QWORD *)(result + 24);
      if (!v58)
        goto LABEL_224;
      (*(void (**)(uint64_t, int **))(*(_QWORD *)v58 + 48))(v58, &v170);
      if (*((_DWORD *)this + 15) == 22)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 60) = v169;
        if (*((_DWORD *)this + 15) != 22)
          goto LABEL_74;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 22;
        v146 = *((_QWORD *)this + 1);
        v147 = (google::protobuf::Arena *)(v146 & 0xFFFFFFFFFFFFFFFELL);
        if ((v146 & 1) != 0)
          v147 = *(google::protobuf::Arena **)v147;
        v148 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v147);
        *((_QWORD *)this + 6) = v148;
        *(_DWORD *)(v148 + 60) = v169;
        if (*((_DWORD *)this + 15) != 22)
        {
LABEL_74:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 22;
          v59 = *((_QWORD *)this + 1);
          v60 = (google::protobuf::Arena **)(v59 & 0xFFFFFFFFFFFFFFFELL);
          if ((v59 & 1) != 0)
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v60);
            *((_QWORD *)this + 6) = result;
            v61 = *(int *)(result + 40);
            if (!(_DWORD)v61)
              return result;
          }
          else
          {
            result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v60);
            *((_QWORD *)this + 6) = result;
            v61 = *(int *)(result + 40);
            if (!(_DWORD)v61)
              return result;
          }
LABEL_195:
          v149 = *(int **)(result + 48);
          v150 = 4 * v61;
          while (1)
          {
            v170 = v149;
            v151 = *(_QWORD *)(v3 + 24);
            if (!v151)
              break;
            result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v151 + 48))(v151, &v170);
            ++v149;
            v150 -= 4;
            if (!v150)
              return result;
          }
          goto LABEL_224;
        }
      }
      result = *((_QWORD *)this + 6);
      v61 = *(int *)(result + 40);
      if (!(_DWORD)v61)
        return result;
      goto LABEL_195;
    case 0x18:
      v62 = *((_QWORD *)this + 6);
      v63 = *(int *)(v62 + 16);
      if (!(_DWORD)v63)
        return result;
      v64 = *(int **)(v62 + 24);
      v65 = 4 * v63;
      while (1)
      {
        v170 = v64;
        v66 = *(_QWORD *)(v3 + 24);
        if (!v66)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v66 + 48))(v66, &v170);
        ++v64;
        v65 -= 4;
        if (!v65)
          return result;
      }
      goto LABEL_224;
    case 0x19:
      v67 = *((_QWORD *)this + 6);
      v68 = *(int *)(v67 + 16);
      if (!(_DWORD)v68)
        return result;
      v69 = *(int **)(v67 + 24);
      v70 = 4 * v68;
      while (1)
      {
        v170 = v69;
        v71 = *(_QWORD *)(v3 + 24);
        if (!v71)
          break;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v71 + 48))(v71, &v170);
        ++v69;
        v70 -= 4;
        if (!v70)
          return result;
      }
      goto LABEL_224;
    case 0x1B:
      v72 = *((_QWORD *)this + 6);
      result = *(_QWORD *)(v72 + 40);
      if (!result)
      {
        v73 = *(_QWORD *)(v72 + 8);
        v74 = (google::protobuf::Arena *)(v73 & 0xFFFFFFFFFFFFFFFELL);
        if ((v73 & 1) != 0)
          v74 = *(google::protobuf::Arena **)v74;
        result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v74);
        *(_QWORD *)(v72 + 40) = result;
      }
      v75 = *(int *)(result + 16);
      if (!(_DWORD)v75)
        goto LABEL_95;
      v76 = *(int **)(result + 24);
      v77 = 4 * v75;
      do
      {
        v170 = v76;
        v78 = *(_QWORD *)(v3 + 24);
        if (!v78)
          goto LABEL_224;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v78 + 48))(v78, &v170);
        ++v76;
        v77 -= 4;
      }
      while (v77);
LABEL_95:
      for (i = 0; ; ++i)
      {
        if (*((_DWORD *)this + 15) == 27)
        {
          result = *((_QWORD *)this + 6);
          if (i >= *(int *)(result + 24))
            return result;
          v80 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * i + 8);
          v81 = *(int *)(v80 + 16);
          if ((_DWORD)v81)
            goto LABEL_105;
        }
        else
        {
          if (i >= (int)qword_25408AAC8)
            return result;
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 27;
          v82 = *((_QWORD *)this + 1);
          v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
          if ((v82 & 1) != 0)
            v83 = *(google::protobuf::Arena **)v83;
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v83);
          *((_QWORD *)this + 6) = result;
          v80 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * i + 8);
          v81 = *(int *)(v80 + 16);
          if ((_DWORD)v81)
          {
LABEL_105:
            v84 = *(int **)(v80 + 24);
            v85 = 4 * v81;
            while (1)
            {
              v170 = v84;
              v86 = *(_QWORD *)(v3 + 24);
              if (!v86)
                break;
              result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v86 + 48))(v86, &v170);
              ++v84;
              v85 -= 4;
              if (!v85)
                goto LABEL_96;
            }
LABEL_224:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
LABEL_96:
        ;
      }
    case 0x1C:
      v87 = *((_QWORD *)this + 6);
      result = *(_QWORD *)(v87 + 40);
      if (!result)
      {
        v88 = *(_QWORD *)(v87 + 8);
        v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
        if ((v88 & 1) != 0)
          v89 = *(google::protobuf::Arena **)v89;
        result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v89);
        *(_QWORD *)(v87 + 40) = result;
      }
      v90 = *(int *)(result + 16);
      if (!(_DWORD)v90)
        goto LABEL_117;
      v91 = *(int **)(result + 24);
      v92 = 4 * v90;
      do
      {
        v170 = v91;
        v93 = *(_QWORD *)(v3 + 24);
        if (!v93)
          goto LABEL_224;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v93 + 48))(v93, &v170);
        ++v91;
        v92 -= 4;
      }
      while (v92);
LABEL_117:
      v94 = 0;
      while (2)
      {
        if (*((_DWORD *)this + 15) == 28)
        {
          result = *((_QWORD *)this + 6);
          if (v94 >= *(int *)(result + 24))
            return result;
          v95 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v94 + 8);
          v96 = *(int *)(v95 + 16);
          if (!(_DWORD)v96)
            goto LABEL_118;
        }
        else
        {
          if (v94 >= (int)qword_25408AAC8)
            return result;
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 28;
          v97 = *((_QWORD *)this + 1);
          v98 = (google::protobuf::Arena *)(v97 & 0xFFFFFFFFFFFFFFFELL);
          if ((v97 & 1) != 0)
            v98 = *(google::protobuf::Arena **)v98;
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v98);
          *((_QWORD *)this + 6) = result;
          v95 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v94 + 8);
          v96 = *(int *)(v95 + 16);
          if (!(_DWORD)v96)
          {
LABEL_118:
            ++v94;
            continue;
          }
        }
        break;
      }
      v99 = *(int **)(v95 + 24);
      v100 = 4 * v96;
      do
      {
        v170 = v99;
        v101 = *(_QWORD *)(v3 + 24);
        if (!v101)
          goto LABEL_224;
        result = (*(uint64_t (**)(uint64_t, int **))(*(_QWORD *)v101 + 48))(v101, &v170);
        ++v99;
        v100 -= 4;
      }
      while (v100);
      goto LABEL_118;
    default:
      return result;
  }
}

uint64_t operations_research::sat::ApplyToAllIntervalIndices(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::Arena **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 60);
  switch(v4)
  {
    case 22:
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *(int *)(v10 + 16);
      if (!(_DWORD)v11)
        return result;
      v12 = *(_QWORD *)(v10 + 24);
      v13 = 4 * v11;
      while (1)
      {
        v26 = v12;
        v14 = *(_QWORD *)(v3 + 24);
        if (!v14)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v26);
        v12 += 4;
        v13 -= 4;
        if (!v13)
          return result;
      }
      goto LABEL_29;
    case 21:
      v15 = *(_QWORD *)(a2 + 48);
      v16 = *(int *)(v15 + 16);
      if (!(_DWORD)v16)
        goto LABEL_19;
      v17 = *(_QWORD *)(v15 + 24);
      v18 = 4 * v16;
      do
      {
        v26 = v17;
        v19 = *(_QWORD *)(v3 + 24);
        if (!v19)
          goto LABEL_29;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v26);
        v17 += 4;
        v18 -= 4;
      }
      while (v18);
      if (*(_DWORD *)(a2 + 60) != 21)
      {
        operations_research::sat::ConstraintProto::clear_constraint(a2);
        *(_DWORD *)(a2 + 60) = 21;
        v21 = *(_QWORD *)(a2 + 8);
        v22 = (google::protobuf::Arena **)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
        {
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(*v22);
          *(_QWORD *)(a2 + 48) = result;
          v20 = *(int *)(result + 40);
          if (!(_DWORD)v20)
            return result;
        }
        else
        {
          result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>((google::protobuf::Arena *)v22);
          *(_QWORD *)(a2 + 48) = result;
          v20 = *(int *)(result + 40);
          if (!(_DWORD)v20)
            return result;
        }
      }
      else
      {
LABEL_19:
        result = *(_QWORD *)(a2 + 48);
        v20 = *(int *)(result + 40);
        if (!(_DWORD)v20)
          return result;
      }
      v23 = *(_QWORD *)(result + 48);
      v24 = 4 * v20;
      while (1)
      {
        v26 = v23;
        v25 = *(_QWORD *)(v3 + 24);
        if (!v25)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v26);
        v23 += 4;
        v24 -= 4;
        if (!v24)
          return result;
      }
LABEL_29:
      std::__throw_bad_function_call[abi:ne180100]();
    case 20:
      v5 = *(_QWORD *)(a2 + 48);
      v6 = *(int *)(v5 + 16);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v5 + 24);
        v8 = 4 * v6;
        while (1)
        {
          v26 = v7;
          v9 = *(_QWORD *)(v3 + 24);
          if (!v9)
            break;
          result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v26);
          v7 += 4;
          v8 -= 4;
          if (!v8)
            return result;
        }
        goto LABEL_29;
      }
      break;
  }
  return result;
}

uint64_t operations_research::sat::ConstraintCaseName(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_22DB1D330 + 4 * byte_22DCF051C[a1]))();
}

void sub_22DB1D330(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "kEmpty");
}

void sub_22DB1D354(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kIntMin");
}

void sub_22DB1D37C(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kLinear");
}

void sub_22DB1D3A4(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kCircuit");
}

void sub_22DB1D3C8(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kIntDiv");
}

void sub_22DB1D3F0(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kIntMod");
}

void sub_22DB1D418(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kIntMax");
}

void sub_22DB1D440(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kIntProd");
}

void sub_22DB1D464(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kAllDiff");
}

void sub_22DB1D488(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "kTable");
}

void sub_22DB1D4AC(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kInverse");
}

void sub_22DB1D4D0(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kLinMax");
}

void sub_22DB1D4F8(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kLinMin");
}

void sub_22DB1D520(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kBoolOr");
}

void sub_22DB1D548(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kBoolAnd");
}

void sub_22DB1D56C(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kBoolXor");
}

void sub_22DB1D590(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "kNoOverlap");
}

void sub_22DB1D5B8(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "kNoOverlap2D");
}

void sub_22DB1D5E4(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "kRoutes");
}

void sub_22DB1D60C(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "kReservoir");
}

void sub_22DB1D634(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "kElement");
}

void sub_22DB1D658(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "kAutomaton");
}

void sub_22DB1D680(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "kCircuitCovering");
}

void sub_22DB1D6A0(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "kInterval");
}

void sub_22DB1D6C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "kCumulative");
}

void sub_22DB1D6F0(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "kAtMostOne");
}

void operations_research::sat::UsedVariables(operations_research::sat *this@<X0>, _QWORD *a2@<X8>)
{
  int *v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  int32x4_t v11;
  int v12;
  int *v13;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int *v24;
  unint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  unint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  int *v57;
  int v58;
  int v59;
  int *v60;
  int v61;
  _BYTE *v62;
  int *v63;
  char *v64;
  char *v65;
  int64_t v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  operations_research::sat *v70;
  void *v71;
  int *v72;
  int *v73;
  void *__p;
  int *v75;

  operations_research::sat::GetReferencesUsedByConstraint(this, (uint64_t)&v71);
  v5 = v72;
  if (v71 != v72)
  {
    v6 = (char *)v72 - (_BYTE *)v71 - 4;
    v7 = (int *)v71;
    if (v6 < 0x1C)
      goto LABEL_108;
    v8 = (v6 >> 2) + 1;
    v7 = (int *)((char *)v71 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8));
    v9 = (int8x16_t *)((char *)v71 + 16);
    v10 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v11 = vmaxq_s32((int32x4_t)vmvnq_s8(*v9), *(int32x4_t *)v9);
      v9[-1] = (int8x16_t)vmaxq_s32((int32x4_t)vmvnq_s8(v9[-1]), (int32x4_t)v9[-1]);
      *v9 = (int8x16_t)v11;
      v9 += 2;
      v10 -= 8;
    }
    while (v10);
    if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_108:
      do
      {
        v12 = *v7;
        if (~*v7 > *v7)
          v12 = ~v12;
        *v7++ = v12;
      }
      while (v7 != v5);
    }
  }
  v69 = a2;
  v70 = this;
  v13 = (int *)__p;
  v14 = v75;
  if (__p != v75)
  {
    while (1)
    {
      v16 = ~*v13 <= *v13 ? *v13 : ~*v13;
      if (v5 >= v73)
        break;
      *v5 = v16;
      v15 = v5 + 1;
LABEL_12:
      v72 = v15;
      ++v13;
      v5 = v15;
      if (v13 == v14)
        goto LABEL_44;
    }
    v17 = (int *)v71;
    v18 = (char *)v5 - (_BYTE *)v71;
    v19 = ((char *)v5 - (_BYTE *)v71) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = (char *)v73 - (_BYTE *)v71;
    if (((char *)v73 - (_BYTE *)v71) >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(4 * v22);
      v24 = (int *)&v23[4 * v19];
      *v24 = v16;
      v15 = v24 + 1;
      if (v5 == v17)
        goto LABEL_31;
    }
    else
    {
      v23 = 0;
      v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v16;
      v15 = (int *)(4 * v19 + 4);
      if (v5 == v17)
        goto LABEL_31;
    }
    v25 = (char *)(v5 - 1) - (char *)v17;
    if (v25 >= 0xBC)
    {
      if (&v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4])
      {
        v26 = v5;
      }
      else if ((int *)((char *)v5 - (v25 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v5 - 1)
      {
        v26 = v5;
      }
      else if ((unint64_t)((char *)v5 - v23 - v18) >= 0x20)
      {
        v28 = (v25 >> 2) + 1;
        v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        v26 = &v5[v29 / 0xFFFFFFFFFFFFFFFCLL];
        v24 = (int *)((char *)v24 - v29);
        v30 = &v23[4 * v19 - 16];
        v31 = v5 - 4;
        v32 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 8;
          v32 -= 8;
        }
        while (v32);
        if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_31:
          v71 = v24;
          v72 = v15;
          v73 = (int *)&v23[4 * v22];
          if (v17)
            operator delete(v17);
          goto LABEL_12;
        }
      }
      else
      {
        v26 = v5;
      }
    }
    else
    {
      v26 = v5;
    }
    do
    {
      v27 = *--v26;
      *--v24 = v27;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v15 = v5;
LABEL_44:
  v34 = *((int *)v70 + 4);
  if ((_DWORD)v34)
  {
    v35 = (int *)*((_QWORD *)v70 + 3);
    v36 = &v35[v34];
    while (1)
    {
      v38 = ~*v35 <= *v35 ? *v35 : ~*v35;
      if (v15 >= v73)
        break;
      *v15 = v38;
      v37 = (uint64_t)(v15 + 1);
LABEL_47:
      v72 = (int *)v37;
      ++v35;
      v15 = (int *)v37;
      if (v35 == v36)
        goto LABEL_78;
    }
    v39 = (int *)v71;
    v40 = (char *)v15 - (_BYTE *)v71;
    v41 = ((char *)v15 - (_BYTE *)v71) >> 2;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v43 = (char *)v73 - (_BYTE *)v71;
    if (((char *)v73 - (_BYTE *)v71) >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = operator new(4 * v44);
      v46 = (int *)&v45[4 * v41];
      *v46 = v38;
      v37 = (uint64_t)(v46 + 1);
      if (v15 == v39)
        goto LABEL_66;
    }
    else
    {
      v45 = 0;
      v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v38;
      v37 = 4 * v41 + 4;
      if (v15 == v39)
        goto LABEL_66;
    }
    v47 = (char *)(v15 - 1) - (char *)v39;
    if (v47 >= 0xBC)
    {
      if (&v45[v40 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
      {
        v48 = v15;
      }
      else if ((int *)((char *)v15 - (v47 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v15 - 1)
      {
        v48 = v15;
      }
      else if ((unint64_t)((char *)v15 - v45 - v40) >= 0x20)
      {
        v50 = (v47 >> 2) + 1;
        v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v15[v51 / 0xFFFFFFFFFFFFFFFCLL];
        v46 = (int *)((char *)v46 - v51);
        v52 = &v45[4 * v41 - 16];
        v53 = (__int128 *)(v15 - 4);
        v54 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v55 = *v53;
          *(v52 - 1) = *(v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 2;
          v54 -= 8;
        }
        while (v54);
        if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_66:
          v71 = v46;
          v72 = (int *)v37;
          v73 = (int *)&v45[4 * v44];
          if (v39)
            operator delete(v39);
          goto LABEL_47;
        }
      }
      else
      {
        v48 = v15;
      }
    }
    else
    {
      v48 = v15;
    }
    do
    {
      v49 = *--v48;
      *--v46 = v49;
    }
    while (v48 != v39);
    goto LABEL_66;
  }
LABEL_78:
  std::__sort<std::__less<int,int> &,int *>();
  v56 = (char *)v72;
  if (v71 != v72)
  {
    v57 = (int *)((char *)v71 + 4);
    while (v57 != v72)
    {
      v58 = *(v57 - 1);
      v59 = *v57++;
      if (v58 == v59)
      {
        v60 = v57 - 2;
        while (v57 != (int *)v56)
        {
          v61 = v58;
          v58 = *v57;
          if (v61 != *v57)
          {
            v60[1] = v58;
            ++v60;
          }
          ++v57;
        }
        v64 = (char *)(v60 + 1);
        v65 = (char *)(v56 - (char *)(v60 + 1));
        if (v56 == (char *)(v60 + 1))
          break;
        if (v56 != &v65[(_QWORD)v64])
          memmove(v60 + 1, &v65[(_QWORD)v64], 0);
        v56 = v64;
        v72 = (int *)v64;
        *v69 = 0;
        v69[1] = 0;
        v69[2] = 0;
        v62 = v71;
        if (v56 != v71)
          goto LABEL_98;
        goto LABEL_91;
      }
    }
  }
  *v69 = 0;
  v69[1] = 0;
  v69[2] = 0;
  v62 = v71;
  if (v56 == v71)
  {
LABEL_91:
    v63 = (int *)__p;
    if (!__p)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_98:
  v66 = v56 - v62;
  if (v56 - v62 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v67 = (char *)operator new(v56 - v62);
  *v69 = v67;
  v68 = &v67[4 * (v66 >> 2)];
  v69[2] = v68;
  memcpy(v67, v62, v66);
  v69[1] = v68;
  v63 = (int *)__p;
  if (__p)
  {
LABEL_92:
    v75 = v63;
    operator delete(v63);
    v62 = v71;
  }
LABEL_93:
  if (v62)
  {
    v72 = (int *)v62;
    operator delete(v62);
  }
}

void sub_22DB1DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::UsedIntervals@<X0>(operations_research::sat *this@<X0>, unint64_t *a2@<X8>)
{
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t result;
  char *v12;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  unint64_t v18;
  int64_t v19;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = *((_DWORD *)this + 15);
  if (v5 != 20)
  {
    if (v5 == 21)
    {
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a2, 0, *(char **)(*((_QWORD *)this + 6) + 24), (char *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24) + 4 * *(int *)(*((_QWORD *)this + 6) + 16)), *(int *)(*((_QWORD *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 21)
        v10 = (uint64_t *)*((_QWORD *)this + 6);
      else
        v10 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
      v8 = *((int *)v10 + 10);
      v9 = (char *)v10[6];
      v6 = (void *)a2[1];
      goto LABEL_9;
    }
    if (v5 != 22)
      goto LABEL_10;
  }
  v6 = 0;
  v7 = *((_QWORD *)this + 6);
  v8 = *(int *)(v7 + 16);
  v9 = *(char **)(v7 + 24);
LABEL_9:
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a2, v6, v9, &v9[4 * v8], v8);
LABEL_10:
  result = std::__sort<std::__less<int,int> &,int *>();
  v12 = (char *)a2[1];
  if ((char *)*a2 != v12)
  {
    v13 = (char *)(*a2 + 4);
    while (v13 != v12)
    {
      v14 = *((_DWORD *)v13 - 1);
      v15 = *(_DWORD *)v13;
      v13 += 4;
      if (v14 == v15)
      {
        v16 = v13 - 8;
        while (v13 != v12)
        {
          v17 = v14;
          v14 = *(_DWORD *)v13;
          if (v17 != *(_DWORD *)v13)
          {
            *((_DWORD *)v16 + 1) = v14;
            v16 += 4;
          }
          v13 += 4;
        }
        v18 = (unint64_t)(v16 + 4);
        v19 = v12 - (v16 + 4);
        if (v12 != v16 + 4)
        {
          if (v12 != (char *)(v18 + v19))
            result = (uint64_t)memmove(v16 + 4, (const void *)(v18 + v19), 0);
          a2[1] = v18;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_22DB1DE48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ComputeInnerObjective(operations_research::sat *this, const operations_research::sat::CpObjectiveProto *a2, const operations_research::sat::CpSolverResponse *a3)
{
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v3 = *((unsigned int *)this + 4);
  if ((int)v3 < 1)
    return 0;
  v5 = *((_DWORD *)a2 + 4);
  v4 = (char *)a2 + 16;
  if (v5)
    v6 = v4;
  else
    v6 = v4 + 24;
  v7 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)v6 + 1);
  if ((_DWORD)v3 == 1)
  {
    v10 = 0;
    result = 0;
LABEL_21:
    v23 = (_DWORD *)(v8 + 4 * v10);
    v24 = v3 - v10;
    v25 = (uint64_t *)(v7 + 8 * v10);
    do
    {
      v27 = *v25++;
      v26 = v27;
      LODWORD(v27) = *v23++;
      v28 = v27;
      if (~(_DWORD)v27 <= (int)v27)
        v29 = v28;
      else
        v29 = ~v28;
      if (v28 < 0)
        v26 = -v26;
      result += v26 * *(_QWORD *)(v9 + 8 * v29);
      --v24;
    }
    while (v24);
    return result;
  }
  v12 = 0;
  v13 = 0;
  v10 = v3 & 0xFFFFFFFE;
  v14 = (uint64_t *)(v7 + 8);
  v15 = (int *)(v8 + 4);
  v16 = v10;
  do
  {
    v17 = *(v14 - 1);
    v18 = *v14;
    v19 = *(v15 - 1);
    v20 = *v15;
    if (~v19 <= v19)
      v21 = *(v15 - 1);
    else
      v21 = ~v19;
    if (~*v15 <= v20)
      v22 = *v15;
    else
      v22 = ~v20;
    if (v19 < 0)
      v17 = -v17;
    if (v20 < 0)
      v18 = -v18;
    v12 += v17 * *(_QWORD *)(v9 + 8 * v21);
    v13 += v18 * *(_QWORD *)(v9 + 8 * v22);
    v14 += 2;
    v15 += 2;
    v16 -= 2;
  }
  while (v16);
  result = v13 + v12;
  if (v10 != v3)
    goto LABEL_21;
  return result;
}

void operations_research::sat::Cumulative(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;

  v10 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = v9 - *(_QWORD *)a1;
  if (v9 == *(_QWORD *)a1)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - *(_QWORD *)a1);
    v13 = &v12[4 * (v11 >> 2)];
    memcpy(v12, v10, v11);
  }
  v15 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v16 = v14 - *(_QWORD *)a2;
  if (v14 == *(_QWORD *)a2)
  {
    v18 = 0;
    v17 = 0;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v16 >> 2) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v16);
    v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, v16);
  }
  v26 = *a3;
  LODWORD(v27) = *((_DWORD *)a3 + 4);
  *((_QWORD *)&v27 + 1) = a4;
  *(_QWORD *)(a5 + 24) = 0;
  v19 = (char *)operator new(0x58uLL);
  *(_QWORD *)v19 = &off_24F985450;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 0;
  v20 = v13 - v12;
  if (v13 != v12)
  {
    if (v20 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = (char *)operator new(v13 - v12);
    *((_QWORD *)v19 + 1) = v21;
    v22 = &v21[4 * (v20 >> 2)];
    *((_QWORD *)v19 + 3) = v22;
    memcpy(v21, v12, v13 - v12);
    *((_QWORD *)v19 + 2) = v22;
  }
  *((_QWORD *)v19 + 4) = 0;
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0;
  v23 = v18 - v17;
  if (v18 != v17)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v23 >> 2) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = (char *)operator new(v23);
    *((_QWORD *)v19 + 4) = v24;
    v25 = &v24[4 * (v23 >> 2)];
    *((_QWORD *)v19 + 6) = v25;
    memcpy(v24, v17, v23);
    *((_QWORD *)v19 + 5) = v25;
  }
  *(_OWORD *)(v19 + 56) = v26;
  *(_OWORD *)(v19 + 72) = v27;
  *(_QWORD *)(a5 + 24) = v19;
  if (v17)
    operator delete(v17);
  if (v12)
    operator delete(v12);
}

void sub_22DB1E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB1E1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  void **v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    v9[5] = v13;
    operator delete(v13);
  }
  v14 = *v10;
  if (*v10)
  {
    v9[2] = v14;
    operator delete(v14);
  }
  operator delete(v9);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB1E1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F985450;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F985450;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_24F985450;
  std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB1E318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F985450;
  return std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  operations_research::sat::GenericLiteralWatcher *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  operations_research::sat::Model *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  int AssociatedLiteral;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  _DWORD *v38;
  operations_research::sat::IntegerTrail *v39;
  _QWORD *v40;
  operations_research::sat::SatParameters *v41;
  operations_research::sat::SatParameters *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  unint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  BOOL v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  operations_research::sat::TimeTablingPerTask *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  __int128 *v84;
  operations_research::sat::SchedulingConstraintHelper **v85;
  _QWORD *v86;
  _QWORD *v87;
  operations_research::sat::GenericLiteralWatcher *v88;
  _QWORD *v89;
  operations_research::sat::IntegerTrail *v90;
  uint64_t v91;
  unsigned int *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  __int128 *v97;
  operations_research::sat::SatParameters *v98;
  _QWORD *v99;
  __int128 v100;
  int v101;
  __int128 v102;
  char *v103;
  __int128 v104;
  int v105;
  __int128 v106;
  int v107;
  __int128 v108;
  __int128 v109;
  __int128 __p;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113[2];
  uint64_t **v114;
  uint64_t **v115;
  void *v116;
  void *v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    return;
  v3 = a1;
  v4 = *a2;
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  v92 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v4);
  v90 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v4);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v4);
  v7 = *(_QWORD *)(v3 + 32);
  v88 = v6;
  v89 = (_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v93 = v2;
  v94 = v3;
  v99 = v5;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = (_QWORD *)(v4 + 32);
    v97 = (__int128 *)(v3 + 56);
    v96 = (_QWORD *)(v4 + 32);
    v91 = v4;
    do
    {
      v11 = *(int *)(*v2 + 4 * v9);
      v12 = *(_DWORD *)(v5[11] + 4 * v11);
      if (v12 == -1)
      {
        if (*(_QWORD *)(v5[14] + 8 * v11))
        {
LABEL_10:
          v13 = (_QWORD *)*v10;
          if (!*v10)
            goto LABEL_21;
          v14 = v10;
          do
          {
            v15 = v13[4];
            v16 = v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
            if (v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              v17 = v13;
            else
              v17 = v13 + 1;
            if (v16)
              v14 = v13;
            v13 = (_QWORD *)*v17;
          }
          while (*v17);
          if (v14 != v10
            && v14[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          {
            v18 = v14[5];
          }
          else
          {
LABEL_21:
            v18 = 0;
          }
          *(_QWORD *)&v108 = v18;
          *((_QWORD *)&v108 + 1) = 0x8000000000000002;
          v19 = (__int128 *)(v7 + 20 * v9);
          v109 = 0u;
          __p = 0u;
          v111 = 0;
          v20 = *v19;
          v107 = *((_DWORD *)v19 + 4);
          v106 = v20;
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v108, (int *)&v106, 1);
          v104 = *v97;
          v105 = *((_DWORD *)v97 + 4);
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v108, (int *)&v104, -1);
          operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v108, (uint64_t)v113);
          v102 = 0uLL;
          v103 = 0;
          v22 = *v2;
          v23 = *(int *)(*v2 + 4 * v9);
          v24 = *(_DWORD *)(v5[2] + 4 * v23);
          if (v24 != -1)
          {
            v25 = (char *)operator new(4uLL);
            *(_DWORD *)v25 = v24;
            v26 = v25 + 4;
            *(_QWORD *)&v102 = v25;
            v103 = v25 + 4;
            v23 = *(int *)(v22 + 4 * v9);
            *((_QWORD *)&v102 + 1) = v25 + 4;
            v27 = *(_DWORD *)(v5[11] + 4 * v23);
            if (v27 != -1)
              goto LABEL_24;
LABEL_28:
            if (!*(_QWORD *)(v5[14] + 8 * v23))
              goto LABEL_29;
LABEL_25:
            v28 = v26;
            v29 = v25;
            v10 = v96;
            if (v25 != v28)
            {
LABEL_26:
              operations_research::sat::LoadConditionalLinearConstraint(v29, (int *)((v28 - v29) >> 2), v113, (operations_research::sat::LinearConstraint *)v4);
LABEL_43:
              if (v29)
                operator delete(v29);
              if (v116)
              {
                v117 = v116;
                operator delete(v116);
              }
              v5 = v99;
              if (v114)
              {
                v115 = v114;
                operator delete(v114);
              }
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              v7 = *(_QWORD *)(v3 + 32);
              v8 = *(_QWORD *)(v3 + 40);
              goto LABEL_5;
            }
LABEL_42:
            operations_research::sat::LoadLinearConstraint((operations_research::sat *)v113, (const operations_research::sat::LinearConstraint *)v4, v21);
            goto LABEL_43;
          }
          v26 = 0;
          v25 = 0;
          v27 = *(_DWORD *)(v5[11] + 4 * v23);
          if (v27 == -1)
            goto LABEL_28;
LABEL_24:
          if (*(_QWORD *)(*(_QWORD *)(*v5 + 40) + 12 * v27))
            goto LABEL_25;
LABEL_29:
          LODWORD(v100) = v27;
          *(_QWORD *)((char *)&v100 + 4) = 1;
          AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v92, (const char *)v100, 0);
          v31 = v26 - v25;
          v32 = (v26 - v25) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v34 = AssociatedLiteral;
          if (v31 >> 1 > v33)
            v33 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          v95 &= 0xFFFFFFFF00000000;
          if (v35)
          {
            if (v35 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v36 = (char *)operator new(4 * v35);
            v29 = &v36[4 * v32];
            *(_DWORD *)v29 = v34;
            v28 = v29 + 4;
            if (v26 != v25)
            {
LABEL_38:
              v37 = (v26 - 4 - v25) & 0xFFFFFFFFFFFFFFFCLL;
              v29 = &v36[v31 - v37 - 4];
              memcpy(v29, &v26[-v37 - 4], v37 + 4);
            }
          }
          else
          {
            v36 = 0;
            v29 = (char *)(4 * v32);
            v38 = (_DWORD *)(4 * v32);
            *v38 = AssociatedLiteral;
            v28 = (char *)(v38 + 1);
            if (v26 != v25)
              goto LABEL_38;
          }
          v4 = v91;
          v10 = v96;
          *(_QWORD *)&v102 = v29;
          *((_QWORD *)&v102 + 1) = v28;
          v103 = &v36[4 * v35];
          if (v25)
            operator delete(v25);
          v2 = v93;
          v3 = v94;
          if (v29 != v28)
            goto LABEL_26;
          goto LABEL_42;
        }
      }
      else if (*(_QWORD *)(*(_QWORD *)(*v5 + 40) + 12 * (v12 ^ 1)))
      {
        goto LABEL_10;
      }
LABEL_5:
      ++v9;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 2) > v9);
  }
  v40 = v89;
  v39 = v90;
  if (*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8) == 4)
    return;
  v41 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(v4);
  v42 = v41;
  if (!*((_BYTE *)v41 + 444))
    goto LABEL_108;
  v98 = v41;
  v108 = 0uLL;
  *(_QWORD *)&v109 = 0;
  v44 = *(_QWORD *)(v3 + 8);
  v43 = *(_QWORD *)(v3 + 16);
  if (v43 == v44)
  {
    v2 = v93;
    goto LABEL_105;
  }
  v45 = 0;
  v46 = 0;
  do
  {
    v48 = *(_DWORD *)(v44 + 4 * v46);
    v49 = *(_DWORD *)(v5[11] + 4 * v48);
    if (v49 == -1)
    {
      if (*(uint64_t *)(v5[14] + 8 * v48) < 1)
        goto LABEL_60;
    }
    else if (*(uint64_t *)(*(_QWORD *)(*v5 + 40) + 12 * v49) < 1)
    {
      goto LABEL_60;
    }
    v50 = (int *)(*v40 + 20 * v46);
    v51 = *(_QWORD *)(v50 + 3);
    if (*v50 != -1)
      v51 += *(_QWORD *)(*((_QWORD *)v39 + 5) + 12 * *v50) * *(_QWORD *)(v50 + 1);
    v52 = *(_DWORD *)(v3 + 56);
    v53 = *(_QWORD *)(v3 + 68);
    if (v52 != -1)
      v53 -= *(_QWORD *)(*((_QWORD *)v39 + 5) + 12 * (v52 ^ 1)) * *(_QWORD *)(v3 + 60);
    if (2 * v51 > v53)
    {
      if ((unint64_t)v45 < (unint64_t)v109)
      {
        *(_DWORD *)v45 = v48;
        v47 = (uint64_t)(v45 + 4);
      }
      else
      {
        v54 = (char *)v108;
        v55 = &v45[-v108];
        v56 = (uint64_t)&v45[-v108] >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v58 = v109 - v108;
        if ((uint64_t)(v109 - v108) >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = operator new(4 * v59);
          v61 = &v60[4 * v56];
          *v61 = *(_DWORD *)(v44 + 4 * v46);
          v47 = (uint64_t)(v61 + 1);
          if (v45 != v54)
          {
LABEL_80:
            v62 = v45 - 4 - v54;
            if (v62 < 0xBC
              || &v55[(_QWORD)v60 - 4 - (v62 & 0xFFFFFFFFFFFFFFFCLL)] > &v55[(_QWORD)v60 - 4]
              || &v45[-(v62 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v45 - 4
              || (unint64_t)(v45 - v60 - (_QWORD)v55) < 0x20)
            {
              v63 = v45;
              v5 = v99;
            }
            else
            {
              v65 = (v62 >> 2) + 1;
              v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
              v63 = &v45[-v66];
              v61 = (_DWORD *)((char *)v61 - v66);
              v67 = &v60[4 * v56 - 16];
              v68 = v45 - 16;
              v69 = v65 & 0x7FFFFFFFFFFFFFF8;
              v5 = v99;
              do
              {
                v70 = *(_OWORD *)v68;
                *(v67 - 1) = *((_OWORD *)v68 - 1);
                *v67 = v70;
                v67 -= 2;
                v68 -= 32;
                v69 -= 8;
              }
              while (v69);
              if (v65 == (v65 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_83:
                *(_QWORD *)&v108 = v61;
                *((_QWORD *)&v108 + 1) = v47;
                *(_QWORD *)&v109 = &v60[4 * v59];
                if (v54)
                  goto LABEL_84;
                goto LABEL_85;
              }
            }
            do
            {
              v64 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *--v61 = v64;
            }
            while (v63 != v54);
            goto LABEL_83;
          }
        }
        else
        {
          v60 = 0;
          v61 = (_DWORD *)(4 * v56);
          *(_DWORD *)(4 * v56) = v48;
          v47 = 4 * v56 + 4;
          if (v45 != v54)
            goto LABEL_80;
        }
        v5 = v99;
        *(_QWORD *)&v108 = v61;
        *((_QWORD *)&v108 + 1) = v47;
        *(_QWORD *)&v109 = &v60[4 * v59];
        if (v54)
        {
LABEL_84:
          operator delete(v54);
          v44 = *(_QWORD *)(v94 + 8);
          v43 = *(_QWORD *)(v94 + 16);
        }
LABEL_85:
        v40 = v89;
        v39 = v90;
      }
      *((_QWORD *)&v108 + 1) = v47;
      v45 = (char *)v47;
      v3 = v94;
    }
LABEL_60:
    ++v46;
  }
  while (v46 < (v43 - v44) >> 2);
  v71 = (unint64_t)&v45[-v108] > 4;
  v2 = v93;
  if (v71)
  {
    operations_research::sat::Disjunctive((uint64_t)&v108, (uint64_t)v113);
    *(_QWORD *)&v102 = v4;
    if (!v115)
      std::__throw_bad_function_call[abi:ne180100]();
    ((void (*)(uint64_t **, __int128 *))(*v115)[6])(v115, &v102);
    v72 = v115;
    if (v115 == v113)
    {
      v73 = 4;
      v72 = v113;
    }
    else
    {
      if (!v115)
        goto LABEL_105;
      v73 = 5;
    }
    ((void (*)(uint64_t **))(*v72)[v73])(v72);
  }
LABEL_105:
  v74 = *((_QWORD *)&v108 + 1) - v108;
  v75 = *(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8);
  if ((_QWORD)v108)
  {
    *((_QWORD *)&v108 + 1) = v108;
    operator delete((void *)v108);
  }
  v76 = v74 == v75;
  v42 = v98;
  if (!v76)
  {
LABEL_108:
    if (!*(_QWORD *)(v3 + 80))
    {
      v77 = operator new();
      operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(v77, v2, v4);
      *(_QWORD *)(v3 + 80) = v77;
      v78 = (_QWORD *)operator new();
      *v78 = &off_24F983868;
      v78[1] = v77;
      *(_QWORD *)&v108 = v78;
      v79 = *(_QWORD **)(v4 + 56);
      if ((unint64_t)v79 >= *(_QWORD *)(v4 + 64))
      {
        *(_QWORD *)(v4 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v4 + 48), &v108);
      }
      else
      {
        *v79 = v78;
        *(_QWORD *)(v4 + 56) = v79 + 1;
      }
    }
    v80 = (operations_research::sat::TimeTablingPerTask *)operator new();
    v108 = *(_OWORD *)(v3 + 56);
    LODWORD(v109) = *(_DWORD *)(v3 + 72);
    operations_research::sat::TimeTablingPerTask::TimeTablingPerTask(v80, v40, &v108, v39, *(_QWORD *)(v3 + 80));
    operations_research::sat::TimeTablingPerTask::RegisterWith(v80, v88);
    v81 = (_QWORD *)operator new();
    *v81 = &off_24F9854C0;
    v81[1] = v80;
    *(_QWORD *)&v102 = v81;
    v82 = *(_QWORD **)(v4 + 56);
    if ((unint64_t)v82 >= *(_QWORD *)(v4 + 64))
    {
      v83 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v4 + 48), &v102);
    }
    else
    {
      *v82 = v81;
      v83 = (char *)(v82 + 1);
    }
    v84 = (__int128 *)(v3 + 56);
    *(_QWORD *)(v4 + 56) = v83;
    if (*((_BYTE *)v42 + 121))
    {
      v102 = *v84;
      LODWORD(v103) = *(_DWORD *)(v3 + 72);
      operations_research::sat::AddCumulativeOverloadChecker(v40, (uint64_t)&v102, *(_QWORD **)(v3 + 80), v4);
    }
    if (*((_BYTE *)v42 + 122))
    {
      v85 = (operations_research::sat::SchedulingConstraintHelper **)operator new();
      v100 = *v84;
      v101 = *(_DWORD *)(v3 + 72);
      operations_research::sat::TimeTableEdgeFinding::TimeTableEdgeFinding(v85, v40, &v100, *(_QWORD *)(v3 + 80), v39);
      operations_research::sat::TimeTableEdgeFinding::RegisterWith(v85, v88);
      v86 = (_QWORD *)operator new();
      *v86 = &off_24F9854F8;
      v86[1] = v85;
      v112 = v86;
      v87 = *(_QWORD **)(v4 + 56);
      if ((unint64_t)v87 >= *(_QWORD *)(v4 + 64))
      {
        *(_QWORD *)(v4 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v4 + 48), &v112);
      }
      else
      {
        *v87 = v86;
        *(_QWORD *)(v4 + 56) = v87 + 1;
      }
    }
  }
}

void sub_22DB1ED7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

void sub_22DB1EDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DB1EEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41)
    JUMPOUT(0x22DB1EEECLL);
  JUMPOUT(0x22DB1EEA0);
}

uint64_t std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_E"
                     "iEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVar"
                                "iable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26"
                                "SchedulingConstraintHelperEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  return a1;
}

void sub_22DB1F06C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadLinearConstraint(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, operations_research::sat::Model *a3)
{
  const operations_research::sat::LinearConstraint *v3;
  uint64_t *v4;
  unsigned int **v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int **v33;
  uint64_t *v35;
  void *__p;
  uint64_t v37;
  char *v38;
  const operations_research::sat::LinearConstraint *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v3 = a2;
  v4 = (uint64_t *)this;
  v44 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int **)((char *)this + 16);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    __p = 0;
    v37 = 0;
    v38 = 0;
    v7 = (uint64_t *)*((_QWORD *)this + 5);
    v6 = (uint64_t *)*((_QWORD *)this + 6);
    if (v7 != v6)
    {
      v33 = (unsigned int **)((char *)this + 16);
      v35 = (uint64_t *)*((_QWORD *)this + 6);
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        while (1)
        {
          v11 = *v7;
          if (v8 >= v9)
            break;
          *(_QWORD *)v8 = v11;
          v8 += 8;
          v37 = (uint64_t)v8;
          if (++v7 == v6)
            goto LABEL_34;
        }
        v12 = (v8 - v10) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
        {
          v38 = v9;
          __p = v10;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v9 - v10) >> 2 > v13)
          v13 = (v9 - v10) >> 2;
        if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 61)
          {
            v38 = v9;
            __p = v10;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v15 = operator new(8 * v14);
          v16 = &v15[8 * v12];
          *(_QWORD *)v16 = v11;
          v17 = (uint64_t)(v16 + 8);
          if (v8 == v10)
            goto LABEL_20;
        }
        else
        {
          v15 = 0;
          v16 = (char *)(8 * v12);
          *(_QWORD *)(8 * v12) = v11;
          v17 = 8 * v12 + 8;
          if (v8 == v10)
            goto LABEL_20;
        }
        v18 = v8 - 8 - v10;
        if (v18 >= 0x168)
        {
          if (&v15[v8 - v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v10 - 8])
          {
            v19 = v8;
          }
          else if (&v8[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
          {
            v19 = v8;
          }
          else if ((unint64_t)(v10 - v15) >= 0x20)
          {
            v21 = (v18 >> 3) + 1;
            v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
            v19 = &v8[-v22];
            v16 -= v22;
            v23 = &v15[8 * v12 - 16];
            v24 = v8 - 16;
            v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v26 = *(_OWORD *)v24;
              *(v23 - 1) = *((_OWORD *)v24 - 1);
              *v23 = v26;
              v23 -= 2;
              v24 -= 32;
              v25 -= 4;
            }
            while (v25);
            if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_20;
          }
          else
          {
            v19 = v8;
          }
        }
        else
        {
          v19 = v8;
        }
        do
        {
          v20 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v19 != v10);
LABEL_20:
        v9 = &v15[8 * v14];
        if (v10)
          operator delete(v10);
        v10 = v16;
        v6 = v35;
        v37 = v17;
        ++v7;
        v8 = (char *)v17;
        if (v7 == v35)
        {
LABEL_34:
          v38 = v9;
          v5 = v33;
          v3 = a2;
          v4 = (uint64_t *)this;
          __p = v10;
          v27 = *((_QWORD *)this + 1);
          if (v27 >= 0x7FFFFFFFFFFFFFFELL)
            goto LABEL_46;
          goto LABEL_40;
        }
      }
    }
    __p = 0;
    v27 = *((_QWORD *)this + 1);
    if (v27 >= 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_46;
LABEL_40:
    operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(v5, (uint64_t **)&__p, v27, v42);
    v39 = v3;
    if (!v43)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, const operations_research::sat::LinearConstraint **))(*v43 + 48))(v43, &v39);
    v28 = v43;
    if (v43 == v42)
    {
      v29 = 4;
      v28 = v42;
    }
    else
    {
      if (!v43)
        goto LABEL_46;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_46:
    if (*v4 < (uint64_t)0x8000000000000003)
      goto LABEL_53;
    operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>(v5, (uint64_t)&__p, *v4, v40);
    v39 = v3;
    if (!v41)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, const operations_research::sat::LinearConstraint **))(*v41 + 48))(v41, &v39);
    v30 = v41;
    if (v41 == v40)
    {
      v31 = 4;
      v30 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_53;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_53:
    if (__p)
    {
      v37 = (uint64_t)__p;
      operator delete(__p);
    }
    return;
  }
  if (*(uint64_t *)this > 0 || (*((_QWORD *)this + 1) & 0x8000000000000000) != 0)
    *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2) + 496) = 1;
}

void sub_22DB1F44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v26;
  uint64_t v27;

  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadConditionalLinearConstraint(const void *a1, int *a2, uint64_t **this, operations_research::sat::LinearConstraint *a4)
{
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  char **v38;
  void *__p;
  uint64_t v41;
  char *v42;
  void *v43;
  void *v44;
  char *v45;
  operations_research::sat::LinearConstraint *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t (**v51)();
  int *v52[2];
  uint64_t (***v53)();
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    operations_research::sat::LoadLinearConstraint((operations_research::sat *)this, a4, (operations_research::sat::Model *)this);
    return;
  }
  if (this[2] != this[3])
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    if (4 * (_QWORD)a2 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v38 = (char **)(this + 2);
    v7 = (char *)operator new(4 * (_QWORD)a2);
    v8 = &v7[4 * ((4 * (uint64_t)a2) >> 2)];
    v43 = v7;
    v45 = v8;
    memcpy(v7, a1, 4 * (_QWORD)a2);
    v44 = v8;
    __p = 0;
    v41 = 0;
    v42 = 0;
    v9 = this[5];
    v10 = this[6];
    v37 = (uint64_t *)this;
    if (v9 != v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        while (1)
        {
          v14 = *v9;
          if (v11 >= v12)
            break;
          *(_QWORD *)v11 = v14;
          v11 += 8;
          v41 = (uint64_t)v11;
          if (++v9 == v10)
            goto LABEL_36;
        }
        v15 = (v11 - v13) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v12 - v13) >> 2 > v16)
          v16 = (v12 - v13) >> 2;
        if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * v17);
          v19 = &v18[8 * v15];
          *v19 = v14;
          v20 = (uint64_t)(v19 + 1);
          if (v11 == v13)
            goto LABEL_22;
        }
        else
        {
          v18 = 0;
          v19 = (_QWORD *)(8 * v15);
          *(_QWORD *)(8 * v15) = v14;
          v20 = 8 * v15 + 8;
          if (v11 == v13)
            goto LABEL_22;
        }
        v21 = v11 - 8 - v13;
        if (v21 >= 0x168)
        {
          if (&v18[v11 - v13 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v18[v11 - v13 - 8])
          {
            v22 = v11;
          }
          else if (&v11[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
          {
            v22 = v11;
          }
          else if ((unint64_t)(v13 - v18) >= 0x20)
          {
            v24 = (v21 >> 3) + 1;
            v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
            v22 = &v11[-v25];
            v19 = (_QWORD *)((char *)v19 - v25);
            v26 = &v18[8 * v15 - 16];
            v27 = v11 - 16;
            v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *(_OWORD *)v27;
              *(v26 - 1) = *((_OWORD *)v27 - 1);
              *v26 = v29;
              v26 -= 2;
              v27 -= 32;
              v28 -= 4;
            }
            while (v28);
            if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_22;
          }
          else
          {
            v22 = v11;
          }
        }
        else
        {
          v22 = v11;
        }
        do
        {
          v23 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v19 = v23;
        }
        while (v22 != v13);
LABEL_22:
        v12 = &v18[8 * v17];
        __p = v19;
        v42 = v12;
        if (v13)
          operator delete(v13);
        v13 = (char *)v19;
        v41 = v20;
        ++v9;
        v11 = (char *)v20;
      }
      while (v9 != v10);
    }
LABEL_36:
    v30 = v37[1];
    if (v30 < 0x7FFFFFFFFFFFFFFELL)
    {
      operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((const void **)&v43, v38, (uint64_t **)&__p, v30, (uint64_t)v49);
      v46 = a4;
      if (!v50)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, operations_research::sat::LinearConstraint **))(*(_QWORD *)v50 + 48))(v50, &v46);
      v31 = v50;
      if (v50 == v49)
      {
        v32 = 4;
        v31 = v49;
      }
      else
      {
        if (!v50)
          goto LABEL_49;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
LABEL_49:
    if (*v37 >= (uint64_t)0x8000000000000003)
    {
      operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((const void **)&v43, v38, (uint64_t)&__p, *v37, (uint64_t)v47);
      v46 = a4;
      if (!v48)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, operations_research::sat::LinearConstraint **))(*(_QWORD *)v48 + 48))(v48, &v46);
      v35 = v48;
      if (v48 == v47)
      {
        v36 = 4;
        v35 = v47;
        goto LABEL_55;
      }
      if (v48)
      {
        v36 = 5;
LABEL_55:
        (*(void (**)(void))(*v35 + 8 * v36))();
      }
    }
    if (__p)
    {
      v41 = (uint64_t)__p;
      operator delete(__p);
    }
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    return;
  }
  if ((uint64_t)*this > 0 || ((unint64_t)this[1] & 0x8000000000000000) != 0)
  {
    v51 = &off_24F980568;
    v52[0] = (int *)a1;
    v52[1] = a2;
    v53 = &v51;
    operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v52, (uint64_t)a4);
    v33 = v53;
    if (v53 == &v51)
    {
      v34 = 4;
      v33 = &v51;
    }
    else
    {
      if (!v53)
        return;
      v34 = 5;
    }
    (*v33)[v34]();
  }
}

void sub_22DB1F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(_QWORD *)(v27 - 104);
  if (v29 == v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v27 - 128) + 32))(v27 - 128);
    _Unwind_Resume(exception_object);
  }
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::TimeTablingPerTask>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9854C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::TimeTablingPerTask>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9854C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::TimeTableEdgeFinding>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9854F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::TimeTableEdgeFinding>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9854F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::AddCumulativeOverloadChecker(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  char *v56;
  char *v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  unint64_t *v63;
  uint64_t v64;
  operations_research::sat::GenericLiteralWatcher *v65;
  uint64_t v66;
  _QWORD *v67;
  operations_research::sat::IntegerTrail *v68;
  __int128 v69;
  int v70;
  void *__p;
  void *v72;
  char *v73;
  unint64_t v74[2];
  uint64_t *v75;
  _BYTE v76[20];
  _BYTE v77[20];
  char *v78;
  char *v79;
  char *v80;

  v65 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a4);
  v68 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v8 = a3[5] - a3[4];
  *(_QWORD *)v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
  LODWORD(v74[0]) = v8 >> 2;
  v66 = a4;
  v64 = a2;
  if (*(_QWORD *)v77 != SLODWORD(v74[0]))
  {
    *(_QWORD *)v76 = google::MakeCheckOpString<unsigned long,int>((int)v77, (int)v74, "demands.size() == num_tasks");
    if (*(_QWORD *)v76)
    {
      v63 = google::LogMessageFatal::LogMessageFatal((unint64_t *)v77, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 49, (uint64_t **)v76);
      google::LogMessage::stream((google::LogMessage *)v63);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v77);
    }
  }
  if ((int)(v8 >> 2) < 1)
  {
LABEL_85:
    v53 = operator new();
    __p = 0;
    v72 = 0;
    v73 = 0;
    v54 = v78;
    v55 = v79 - v78;
    if (v79 != v78)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v55 >> 2) > 0xCCCCCCCCCCCCCCCLL)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v56 = (char *)operator new(v79 - v78);
      v57 = &v56[4 * (v55 >> 2)];
      __p = v56;
      v73 = v57;
      memcpy(v56, v54, v55);
      v72 = v57;
    }
    v69 = *(_OWORD *)v64;
    v70 = *(_DWORD *)(v64 + 16);
    operations_research::sat::CumulativeEnergyConstraint::CumulativeEnergyConstraint(v53, (uint64_t)&__p, &v69, (uint64_t)v68, (uint64_t)a3);
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
    v58 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v65, v53);
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v53 + 64), v58, v65, 1, 1);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v65, v58);
    v59 = (_QWORD *)operator new();
    *v59 = &off_24F985588;
    v59[1] = v53;
    *(_QWORD *)v77 = v59;
    v60 = *(_QWORD **)(v66 + 56);
    if ((unint64_t)v60 >= *(_QWORD *)(v66 + 64))
    {
      *(_QWORD *)(v66 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v66 + 48), v77);
      v61 = v78;
      if (!v78)
        return;
    }
    else
    {
      *v60 = v59;
      *(_QWORD *)(v66 + 56) = v60 + 1;
      v61 = v78;
      if (!v78)
        return;
    }
    goto LABEL_94;
  }
  v9 = 0;
  v10 = (v8 >> 2);
  v67 = a1;
  while (1)
  {
    while (1)
    {
      v14 = *(_DWORD *)(a3[10] + 4 * v9);
      if (v14 == -1)
      {
        v15 = (uint64_t *)(a3[13] + 8 * v9);
        goto LABEL_10;
      }
      if (!(*(_QWORD *)(*((_QWORD *)v68 + 5) + 12 * v14) + *(_QWORD *)(*((_QWORD *)v68 + 5) + 12 * (v14 ^ 1))))
      {
        v15 = (uint64_t *)(*(_QWORD *)(a3[1] + 40) + 12 * v14);
LABEL_10:
        v16 = 0;
        v17 = *v15;
        v14 = -1;
        goto LABEL_12;
      }
      v17 = 0;
      v16 = 1;
LABEL_12:
      *(_DWORD *)v77 = v14;
      *(_QWORD *)&v77[4] = v16;
      *(_QWORD *)&v77[12] = v17;
      v18 = *a1 + 20 * v9;
      v19 = *(_DWORD *)(v18 + 16);
      *(_OWORD *)v76 = *(_OWORD *)v18;
      *(_DWORD *)&v76[16] = v19;
      if (*(_DWORD *)v76 != -1)
        break;
      if (v14 == -1)
      {
        LODWORD(v74[0]) = 0;
        if ((*(_QWORD *)&v76[12] & 0x8000000000000000) != 0)
        {
          v75 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v76[12], (int)v74, "demand.constant >= 0");
          if (v75)
          {
            google::LogMessageFatal::LogMessageFatal(v74, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 61, &v75);
            google::LogMessage::stream((google::LogMessage *)v74);
            goto LABEL_107;
          }
          v17 = *(_QWORD *)&v77[12];
          LODWORD(v74[0]) = 0;
          if ((*(_QWORD *)&v77[12] & 0x8000000000000000) == 0)
            goto LABEL_31;
LABEL_83:
          v75 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v77[12], (int)v74, "duration.constant >= 0");
          if (v75)
          {
            google::LogMessageFatal::LogMessageFatal(v74, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 62, &v75);
            google::LogMessage::stream((google::LogMessage *)v74);
LABEL_107:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v74);
          }
          v17 = *(_QWORD *)&v77[12];
          goto LABEL_31;
        }
        LODWORD(v74[0]) = 0;
        if (v17 < 0)
          goto LABEL_83;
LABEL_31:
        v28 = v17 * *(_QWORD *)&v76[12];
        v29 = v79;
        if (v79 >= v80)
        {
          v38 = v78;
          v39 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v78) >> 2);
          v40 = v39 + 1;
          if (v39 + 1 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v80 - v78) >> 2) > v40)
            v40 = 0x999999999999999ALL * ((v80 - v78) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v80 - v78) >> 2) >= 0x666666666666666)
            v41 = 0xCCCCCCCCCCCCCCCLL;
          else
            v41 = v40;
          if (v41 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v42 = (char *)operator new(20 * v41);
          v43 = &v42[4 * ((v29 - v38) >> 2)];
          *(_DWORD *)v43 = -1;
          *(_QWORD *)(v43 + 4) = 0;
          *(_QWORD *)(v43 + 12) = v28;
          if (v29 == v38)
          {
            v47 = v43 + 20;
            v78 = &v42[4 * ((v29 - v38) >> 2)];
            v79 = v43 + 20;
            v80 = &v42[20 * v41];
            if (!v38)
              goto LABEL_63;
          }
          else
          {
            v44 = &v42[20 * v39];
            do
            {
              v45 = *(_OWORD *)(v29 - 20);
              v46 = v44 - 20;
              *((_DWORD *)v44 - 1) = *((_DWORD *)v29 - 1);
              *(_OWORD *)(v44 - 20) = v45;
              v29 -= 20;
              v44 -= 20;
            }
            while (v29 != v38);
            v47 = v43 + 20;
            v78 = v46;
            v79 = v43 + 20;
            v80 = &v42[20 * v41];
            if (!v38)
              goto LABEL_63;
          }
          operator delete(v38);
LABEL_63:
          a1 = v67;
          v79 = v47;
          if (++v9 == v10)
            goto LABEL_85;
        }
        else
        {
          *(_DWORD *)v79 = -1;
          *(_QWORD *)(v29 + 4) = 0;
          *(_QWORD *)(v29 + 12) = v28;
          v79 = v29 + 20;
          if (++v9 == v10)
            goto LABEL_85;
        }
      }
      else
      {
        LODWORD(v74[0]) = 0;
        if ((*(_QWORD *)&v76[12] & 0x8000000000000000) != 0)
        {
          v75 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v76[12], (int)v74, "demand.constant >= 0");
          if (v75)
          {
            google::LogMessageFatal::LogMessageFatal(v74, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 65, &v75);
            google::LogMessage::stream((google::LogMessage *)v74);
            goto LABEL_107;
          }
        }
        v25 = v79;
        if (v79 >= v80)
        {
          v30 = v78;
          v31 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v78) >> 2) + 1;
          if (v31 > 0xCCCCCCCCCCCCCCCLL)
LABEL_100:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v80 - v78) >> 2) > v31)
            v31 = 0x999999999999999ALL * ((v80 - v78) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v80 - v78) >> 2) >= 0x666666666666666)
            v32 = 0xCCCCCCCCCCCCCCCLL;
          else
            v32 = v31;
          if (v32)
          {
            if (v32 > 0xCCCCCCCCCCCCCCCLL)
LABEL_101:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v33 = (char *)operator new(20 * v32);
          }
          else
          {
            v33 = 0;
          }
          v48 = &v33[4 * ((v25 - v30) >> 2)];
          *(_OWORD *)v48 = *(_OWORD *)v77;
          *((_DWORD *)v48 + 4) = *(_DWORD *)&v77[16];
          v49 = v48;
          if (v25 == v30)
          {
            a1 = v67;
          }
          else
          {
            a1 = v67;
            do
            {
              v50 = *(_OWORD *)(v25 - 20);
              *((_DWORD *)v49 - 1) = *((_DWORD *)v25 - 1);
              *(_OWORD *)(v49 - 20) = v50;
              v49 -= 20;
              v25 -= 20;
            }
            while (v25 != v30);
            v25 = v78;
          }
          v51 = &v33[20 * v32];
          v27 = v48 + 20;
          v78 = v49;
          v79 = v48 + 20;
          v80 = v51;
          if (v25)
            operator delete(v25);
        }
        else
        {
          v26 = *(_OWORD *)v77;
          *((_DWORD *)v79 + 4) = *(_DWORD *)&v77[16];
          *(_OWORD *)v25 = v26;
          v27 = v25 + 20;
        }
        v79 = v27;
        v52 = *((_QWORD *)v27 - 1);
        *((_QWORD *)v27 - 2) *= *(_QWORD *)&v76[12];
        *((_QWORD *)v27 - 1) = v52 * *(_QWORD *)&v76[12];
        if (++v9 == v10)
          goto LABEL_85;
      }
    }
    if (v14 != -1)
      break;
    LODWORD(v74[0]) = 0;
    if (v17 < 0)
    {
      v75 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v77[12], (int)v74, "duration.constant >= 0");
      if (v75)
      {
        google::LogMessageFatal::LogMessageFatal(v74, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 70, &v75);
        google::LogMessage::stream((google::LogMessage *)v74);
        goto LABEL_107;
      }
    }
    v20 = v79;
    if (v79 < v80)
    {
      v11 = *(_OWORD *)v76;
      *((_DWORD *)v79 + 4) = *(_DWORD *)&v76[16];
      *(_OWORD *)v20 = v11;
      v12 = v20 + 20;
    }
    else
    {
      v21 = v78;
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v78) >> 2) + 1;
      if (v22 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_100;
      if (0x999999999999999ALL * ((v80 - v78) >> 2) > v22)
        v22 = 0x999999999999999ALL * ((v80 - v78) >> 2);
      if (0xCCCCCCCCCCCCCCCDLL * ((v80 - v78) >> 2) >= 0x666666666666666)
        v23 = 0xCCCCCCCCCCCCCCCLL;
      else
        v23 = v22;
      if (v23)
      {
        if (v23 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_101;
        v24 = (char *)operator new(20 * v23);
      }
      else
      {
        v24 = 0;
      }
      v34 = &v24[4 * ((v20 - v21) >> 2)];
      *(_OWORD *)v34 = *(_OWORD *)v76;
      *((_DWORD *)v34 + 4) = *(_DWORD *)&v76[16];
      v35 = v34;
      if (v20 == v21)
      {
        a1 = v67;
      }
      else
      {
        a1 = v67;
        do
        {
          v36 = *(_OWORD *)(v20 - 20);
          *((_DWORD *)v35 - 1) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v35 - 20) = v36;
          v35 -= 20;
          v20 -= 20;
        }
        while (v20 != v21);
        v20 = v78;
      }
      v37 = &v24[20 * v23];
      v12 = v34 + 20;
      v78 = v35;
      v79 = v34 + 20;
      v80 = v37;
      if (v20)
        operator delete(v20);
    }
    v79 = v12;
    v13 = *((_QWORD *)v12 - 1);
    *((_QWORD *)v12 - 2) *= *(_QWORD *)&v77[12];
    *((_QWORD *)v12 - 1) = v13 * *(_QWORD *)&v77[12];
    if (++v9 == v10)
      goto LABEL_85;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v74, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 80);
  v62 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Overload checker with variable demand and varialbe duration is currently not implemented. Skipping.", 99);
  google::LogMessage::~LogMessage((google::LogMessage *)v74);
  v61 = v78;
  if (v78)
  {
LABEL_94:
    v79 = v61;
    operator delete(v61);
  }
}

void sub_22DB20400()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_22DB20408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB20410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB20418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CumulativeEnergyConstraint::CumulativeEnergyConstraint(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  uint64_t v7;
  std::vector<int>::size_type v8;
  uint64_t v9;
  BOOL v10;
  std::vector<int>::size_type v11;
  unint64_t v13;
  unint64_t v14[2];
  int v15;
  uint64_t *v16;

  *(_QWORD *)a1 = &off_24F985540;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *a3;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree(a1 + 72);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
  v14[0] = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v15 = (unint64_t)v7 >> 2;
  v8 = (int)(v7 >> 2);
  if (v14[0] == v8)
  {
    v9 = 0;
    v10 = 1;
    v11 = v8;
    if (v8)
    {
LABEL_3:
      std::vector<int>::__append((std::vector<int> *)(a1 + 112), v11);
      return a1;
    }
  }
  else
  {
    v16 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v14, (int)&v15, "energies_.size() == num_tasks");
    if (v16)
    {
      google::LogMessageFatal::LogMessageFatal(v14, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 102, &v16);
      google::LogMessage::stream((google::LogMessage *)v14);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v14);
    }
    v9 = *(_QWORD *)(a1 + 112);
    v13 = (*(_QWORD *)(a1 + 120) - v9) >> 2;
    v10 = v8 >= v13;
    v11 = v8 - v13;
    if (v8 > v13)
      goto LABEL_3;
  }
  if (v10)
    return a1;
  *(_QWORD *)(a1 + 120) = v9 + 4 * v8;
  return a1;
}

void sub_22DB20630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB20638(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = (void *)v1[20];
  if (v5)
  {
    operator delete(v5);
    v6 = (void *)v1[17];
    if (!v6)
    {
LABEL_3:
      v7 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v6 = (void *)v1[17];
    if (!v6)
      goto LABEL_3;
  }
  v1[18] = v6;
  operator delete(v6);
  v7 = *v2;
  if (!*v2)
  {
LABEL_4:
    v8 = (void *)v1[11];
    if (!v8)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v1[15] = v7;
  operator delete(v7);
  v8 = (void *)v1[11];
  if (!v8)
  {
LABEL_5:
    v9 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[12] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[2] = v9;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CumulativeEnergyConstraint::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  operations_research::sat::SchedulingConstraintHelper **v1;
  int v2;
  uint64_t v3;
  char *started;
  int *v5;
  int *v6;
  int v7;
  uint64_t v8;
  operations_research::sat::SchedulingConstraintHelper *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  operations_research::sat::SchedulingConstraintHelper *v13;
  operations_research::sat::SchedulingConstraintHelper *v14;
  operations_research::sat::SchedulingConstraintHelper *v15;
  operations_research::sat::SchedulingConstraintHelper *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  operations_research::sat::SchedulingConstraintHelper *v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t Envelope;
  int MaxEventWithEnvelopeGreaterThan;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  int v65;
  operations_research::sat::SchedulingConstraintHelper **v66;
  operations_research::sat::SchedulingConstraintHelper *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _BYTE *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int v81;
  uint64_t OptionalEnvelope;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t result;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  operations_research::sat::SchedulingConstraintHelper *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  char *v97;
  int v98;
  operations_research::sat::SchedulingConstraintHelper *v99;
  int v100;
  int v101;
  unint64_t v102;
  int *v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  int *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  _OWORD *v116;
  int *v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  int v121;
  operations_research::sat::SchedulingConstraintHelper *v122;
  uint64_t v123;
  unint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int v135;
  operations_research::sat::SchedulingConstraintHelper *v136;
  uint64_t v137;
  unint64_t v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  int v149;
  int v150;
  operations_research::sat::SchedulingConstraintHelper *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  _BYTE *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int v165;
  _DWORD *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  int v174;
  int v175;
  operations_research::sat::SchedulingConstraintHelper *v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  operations_research::sat::SchedulingConstraintHelper **v181;
  _BYTE *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  int v190;
  operations_research::sat::SchedulingConstraintHelper *v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  _BYTE *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int v204;
  int *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  operations_research::sat::SchedulingConstraintHelper *v209;
  unint64_t v210;
  int *v211;
  uint64_t v212;
  operations_research::sat::SchedulingConstraintHelper *v213;
  unint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  void **v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  operations_research::sat::SchedulingConstraintHelper **v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  int64_t v228;
  unint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];

  v1 = this;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[8], 1);
  v2 = *((_DWORD *)v1 + 8);
  v219 = v1 + 4;
  v3 = *(uint64_t *)((char *)v1 + 44);
  if (v2 != -1)
    v3 -= *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * (v2 ^ 1)) * *(_QWORD *)((char *)v1 + 36);
  if (v3 < 1)
    return 1;
  v220 = v3;
  v1[18] = v1[17];
  v218 = (void **)(v1 + 17);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(v1[8]);
  v5 = *(int **)started;
  v6 = (int *)*((_QWORD *)started + 1);
  v224 = v1;
  if (*(int **)started != v6)
  {
    v232 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *v5;
        v8 = *(_QWORD *)(v5 + 1);
        v9 = v1[8];
        v10 = *(int *)(*((_QWORD *)v9 + 16) + 4 * *v5);
        if ((_DWORD)v10 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1)) & 1) == 0)
        {
          v11 = (uint64_t)v1[1] + 20 * *v5;
          v12 = *(_QWORD *)(v11 + 12);
          if (*(_DWORD *)v11 != -1)
            v12 -= *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * (*(_DWORD *)v11 ^ 1)) * *(_QWORD *)(v11 + 4);
          if (v12)
            break;
        }
        *((_DWORD *)v1[14] + v7) = -1;
        v5 += 3;
        if (v5 == v6)
          goto LABEL_32;
      }
      v14 = v1[18];
      v13 = v1[19];
      if (v14 >= v13)
        break;
      *(_DWORD *)v14 = v7;
      *(_QWORD *)((char *)v14 + 4) = v8;
      v15 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
LABEL_29:
      v1[18] = v15;
      *((_DWORD *)v1[14] + v7) = v232++;
      v5 += 3;
      if (v5 == v6)
        goto LABEL_32;
    }
    v16 = (operations_research::sat::SchedulingConstraintHelper *)*v218;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v218) >> 2);
    v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 2);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xAAAAAAAAAAAAAAALL)
      v20 = 0x1555555555555555;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x1555555555555555)
LABEL_246:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = (char *)operator new(12 * v20);
      v22 = (uint64_t)&v21[12 * v17];
      *(_DWORD *)v22 = v7;
      *(_QWORD *)(v22 + 4) = v8;
      v23 = v22;
      if (v14 == v16)
        goto LABEL_27;
    }
    else
    {
      v21 = 0;
      v22 = 4 * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v218) >> 2);
      *(_DWORD *)v22 = v7;
      *(_QWORD *)(v22 + 4) = v8;
      v23 = 12 * v17;
      if (v14 == v16)
        goto LABEL_27;
    }
    do
    {
      v24 = *(_QWORD *)((char *)v14 - 12);
      v14 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 - 12);
      v25 = *((_DWORD *)v14 + 2);
      *(_QWORD *)(v23 - 12) = v24;
      v23 -= 12;
      *(_DWORD *)(v23 + 8) = v25;
    }
    while (v14 != v16);
    v14 = (operations_research::sat::SchedulingConstraintHelper *)*v218;
LABEL_27:
    v15 = (operations_research::sat::SchedulingConstraintHelper *)(v22 + 12);
    v1 = v224;
    v224[17] = (operations_research::sat::SchedulingConstraintHelper *)v23;
    v224[18] = (operations_research::sat::SchedulingConstraintHelper *)(v22 + 12);
    v224[19] = (operations_research::sat::SchedulingConstraintHelper *)&v21[12 * v20];
    if (v14)
      operator delete(v14);
    goto LABEL_29;
  }
  v232 = 0;
LABEL_32:
  LOBYTE(v235[0]) = 0;
  v231 = v1 + 20;
  std::vector<BOOL>::assign((char **)v1 + 20, v232, v235);
  v26 = (uint64_t)(v1 + 9);
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)v1 + 18, v232);
  v27 = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(v1[8]);
  v28 = *((_QWORD *)v27 + 1);
  v216 = *(_QWORD *)v27;
  if (v28 == *(_QWORD *)v27)
    return 1;
  v29 = 0;
  v30 = v220;
  v222 = (uint64_t)(v1 + 9);
  while (1)
  {
    v32 = *(int *)(v28 - 12);
    v28 -= 12;
    v31 = v32;
    v33 = *((int *)v1[14] + v32);
    if ((_DWORD)v33 == -1)
      goto LABEL_35;
    v34 = *(_QWORD *)(v28 + 4);
    v35 = *(_QWORD *)((char *)v1[17] + 12 * (int)v33 + 4);
    v36 = v1[8];
    v37 = *(int *)(*((_QWORD *)v36 + 16) + 4 * v31);
    v38 = v33 >> 6;
    v217 = v28;
    if ((_DWORD)v37 == -1)
    {
      v41 = (_QWORD *)(*v231 + 8 * v38);
      v42 = 1 << v33;
      goto LABEL_45;
    }
    v39 = *(_DWORD *)(*((_QWORD *)v36 + 16) + 4 * v31);
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 + 24) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8));
    v41 = (_QWORD *)(*v231 + 8 * v38);
    v42 = 1 << v33;
    if (((v40 >> v39) & 1) == 0)
      break;
LABEL_45:
    *v41 |= v42;
    v48 = (uint64_t)v1[1] + 20 * (int)v31;
    v49 = *(_DWORD *)v48;
    v50 = *(_QWORD *)(v48 + 12);
    if (*(_DWORD *)v48 == -1)
    {
      v53 = *(_QWORD *)(v48 + 12);
    }
    else
    {
      v51 = *(_QWORD *)(v48 + 4);
      v52 = *((_QWORD *)v1[7] + 5);
      v53 = v50 - *(_QWORD *)(v52 + 12 * (v49 ^ 1)) * v51;
      v50 += *(_QWORD *)(v52 + 12 * v49) * v51;
    }
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v26, v33, v35 * v30, v50, v53);
LABEL_49:
    Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v26);
    MaxEventWithEnvelopeGreaterThan = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v26, Envelope - 1);
    v56 = *(_QWORD *)((char *)*v218 + 12 * MaxEventWithEnvelopeGreaterThan + 4);
    v57 = v34 - v56;
    if (v34 != v56)
    {
      v58 = Envelope - v56 * v220;
      if (v58 / v57 * v57 >= v58)
        v59 = v58 / v57;
      else
        v59 = v58 / v57 + 1;
      v60 = *((_DWORD *)v1 + 8);
      v61 = *(uint64_t *)((char *)v1 + 44);
      if (v60 != -1)
        v61 += *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * v60) * *(_QWORD *)((char *)v1 + 36);
      if (v59 <= v61)
      {
        v215 = 1;
        OptionalEnvelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26);
        v30 = v220;
        v47 = v34 * v220;
        if (OptionalEnvelope <= v34 * v220)
          goto LABEL_239;
        goto LABEL_85;
      }
      v226 = v59;
      v62 = MaxEventWithEnvelopeGreaterThan;
      operations_research::sat::SchedulingConstraintHelper::ClearReason(v1[8]);
      if ((int)v62 < v232)
      {
        v228 = v34;
        v229 = v56;
        do
        {
          if (((*(_QWORD *)(*v231 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
          {
            v64 = *((_DWORD *)v1[17] + 3 * v62);
            operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(v1[8], v64);
            v65 = *((_DWORD *)v1[1] + 5 * v64);
            if (v65 != -1)
            {
              v66 = v1;
              v67 = v1[8];
              v68 = *(_QWORD *)(*((_QWORD *)v66[7] + 5) + 12 * v65);
              LODWORD(v235[0]) = v65;
              *(_QWORD *)((char *)v235 + 4) = v68;
              v69 = v235[0];
              v70 = HIDWORD(v68);
              v72 = (char *)*((_QWORD *)v67 + 49);
              v71 = *((_QWORD *)v67 + 50);
              if ((unint64_t)v72 < v71)
              {
                *(_QWORD *)v72 = v235[0];
                *((_DWORD *)v72 + 2) = HIDWORD(v68);
                v63 = v72 + 12;
              }
              else
              {
                v73 = (_BYTE *)*((_QWORD *)v67 + 48);
                v74 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v73) >> 2) + 1;
                if (v74 > 0x1555555555555555)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v73) >> 2);
                if (2 * v75 > v74)
                  v74 = 2 * v75;
                if (v75 >= 0xAAAAAAAAAAAAAAALL)
                  v76 = 0x1555555555555555;
                else
                  v76 = v74;
                if (v76)
                {
                  if (v76 > 0x1555555555555555)
                    goto LABEL_246;
                  v77 = (char *)operator new(12 * v76);
                }
                else
                {
                  v77 = 0;
                }
                v78 = &v77[4 * ((v72 - v73) >> 2)];
                *(_QWORD *)v78 = v69;
                *((_DWORD *)v78 + 2) = v70;
                v79 = v78;
                if (v72 != v73)
                {
                  do
                  {
                    v80 = *(_QWORD *)(v72 - 12);
                    v72 -= 12;
                    v81 = *((_DWORD *)v72 + 2);
                    *(_QWORD *)(v79 - 12) = v80;
                    v79 -= 12;
                    *((_DWORD *)v79 + 2) = v81;
                  }
                  while (v72 != v73);
                  v72 = (char *)*((_QWORD *)v67 + 48);
                }
                v63 = v78 + 12;
                *((_QWORD *)v67 + 48) = v79;
                *((_QWORD *)v67 + 49) = v78 + 12;
                *((_QWORD *)v67 + 50) = &v77[12 * v76];
                v34 = v228;
                if (v72)
                  operator delete(v72);
              }
              *((_QWORD *)v67 + 49) = v63;
              v1 = v224;
              v56 = v229;
            }
            operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(v1[8], v64, v56);
            operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason(v1[8], v64, v34);
          }
          ++v62;
        }
        while (v232 != (_DWORD)v62);
      }
      v83 = (uint64_t)v1[8];
      if (*((_DWORD *)v1 + 8) != -1)
      {
        v84 = operations_research::sat::AffineExpression::GreaterOrEqual((uint64_t)v219, v226);
        v214 = v214 & 0xFFFFFFFF00000000 | v85;
        result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(v83, v84, v214);
        if (!(_DWORD)result)
          return result;
        v215 = 1;
        v26 = v222;
        v87 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v222);
        v30 = v220;
        v47 = v34 * v220;
        if (v87 <= v34 * v220)
          goto LABEL_239;
        goto LABEL_85;
      }
      return operations_research::sat::SchedulingConstraintHelper::ReportConflict(v1[8]);
    }
    v29 = 1;
    v30 = v220;
    v28 = v217;
LABEL_35:
    if (v28 == v216)
      return 1;
  }
  *v41 &= ~v42;
  v43 = (uint64_t)v1[1] + 20 * (int)v31;
  v44 = *(_QWORD *)(v43 + 12);
  v45 = v29;
  if (*(_DWORD *)v43 != -1)
    v44 -= *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * (*(_DWORD *)v43 ^ 1)) * *(_QWORD *)(v43 + 4);
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v26, v33, v35 * v30, v44);
  if ((v45 & 1) != 0)
    goto LABEL_49;
  v215 = 0;
  v46 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26);
  v30 = v220;
  v47 = v34 * v220;
  if (v46 <= v34 * v220)
    goto LABEL_239;
LABEL_85:
  v88 = 0x7FFFFFFFFFFFFFFFLL;
  if (v34 >= (uint64_t)0x8000000000000002)
    v88 = -v34;
  v227 = v88;
  v225 = HIDWORD(v88);
  v221 = v47;
  while (2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v1[8]);
    v233 = 0;
    v234 = 0;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v26, v47, (int *)&v234 + 1, (int *)&v234, &v233);
    v89 = SHIDWORD(v234);
    v230 = *(_QWORD *)((char *)v1[17] + 12 * SHIDWORD(v234) + 4);
    if (SHIDWORD(v234) < v232)
    {
      while (1)
      {
        if (((*(_QWORD *)(*v231 + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) == 0 || (_DWORD)v234 == (_DWORD)v89)
          goto LABEL_95;
        v98 = *((_DWORD *)v1[17] + 3 * v89);
        v99 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v99, v98);
        v100 = *(_DWORD *)(*((_QWORD *)v99 + 16) + 4 * v98);
        if (v100 != -1)
          break;
LABEL_119:
        v121 = v98;
        v122 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v122, v98);
        LODWORD(v235[0]) = *(_DWORD *)(*((_QWORD *)v122 + 4) + 4 * v98);
        *(_QWORD *)((char *)v235 + 4) = v230;
        v123 = v235[0];
        v125 = (_DWORD *)*((_QWORD *)v122 + 49);
        v124 = *((_QWORD *)v122 + 50);
        if ((unint64_t)v125 >= v124)
        {
          v127 = (_DWORD *)*((_QWORD *)v122 + 48);
          v128 = 0xAAAAAAAAAAAAAAABLL * (v125 - v127) + 1;
          if (v128 > 0x1555555555555555)
            goto LABEL_247;
          v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (_QWORD)v127) >> 2);
          if (2 * v129 > v128)
            v128 = 2 * v129;
          if (v129 >= 0xAAAAAAAAAAAAAAALL)
            v130 = 0x1555555555555555;
          else
            v130 = v128;
          if (v130)
          {
            if (v130 > 0x1555555555555555)
              goto LABEL_246;
            v131 = (char *)operator new(12 * v130);
          }
          else
          {
            v131 = 0;
          }
          v132 = &v131[4 * (v125 - v127)];
          *(_QWORD *)v132 = v123;
          *((_DWORD *)v132 + 2) = HIDWORD(v230);
          v133 = v132;
          if (v125 != v127)
          {
            do
            {
              v134 = *(_QWORD *)(v125 - 3);
              v125 -= 3;
              v135 = v125[2];
              *(_QWORD *)(v133 - 12) = v134;
              v133 -= 12;
              *((_DWORD *)v133 + 2) = v135;
            }
            while (v125 != v127);
            v125 = (_DWORD *)*((_QWORD *)v122 + 48);
          }
          v126 = v132 + 12;
          *((_QWORD *)v122 + 48) = v133;
          *((_QWORD *)v122 + 49) = v132 + 12;
          *((_QWORD *)v122 + 50) = &v131[12 * v130];
          if (v125)
            operator delete(v125);
        }
        else
        {
          *(_QWORD *)v125 = v235[0];
          v125[2] = HIDWORD(v230);
          v126 = v125 + 3;
        }
        *((_QWORD *)v122 + 49) = v126;
        v136 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v136, v98);
        LODWORD(v235[0]) = *(_DWORD *)(*((_QWORD *)v136 + 7) + 4 * v98) ^ 1;
        *(_QWORD *)((char *)v235 + 4) = v227;
        v137 = v235[0];
        v139 = (_DWORD *)*((_QWORD *)v136 + 49);
        v138 = *((_QWORD *)v136 + 50);
        if ((unint64_t)v139 >= v138)
        {
          v141 = (_DWORD *)*((_QWORD *)v136 + 48);
          v142 = 0xAAAAAAAAAAAAAAABLL * (v139 - v141) + 1;
          if (v142 > 0x1555555555555555)
            goto LABEL_247;
          v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - (_QWORD)v141) >> 2);
          if (2 * v143 > v142)
            v142 = 2 * v143;
          if (v143 >= 0xAAAAAAAAAAAAAAALL)
            v144 = 0x1555555555555555;
          else
            v144 = v142;
          if (v144)
          {
            if (v144 > 0x1555555555555555)
              goto LABEL_246;
            v145 = (char *)operator new(12 * v144);
          }
          else
          {
            v145 = 0;
          }
          v146 = &v145[4 * (v139 - v141)];
          *(_QWORD *)v146 = v137;
          *((_DWORD *)v146 + 2) = v225;
          v147 = v146;
          if (v139 != v141)
          {
            do
            {
              v148 = *(_QWORD *)(v139 - 3);
              v139 -= 3;
              v149 = v139[2];
              *(_QWORD *)(v147 - 12) = v148;
              v147 -= 12;
              *((_DWORD *)v147 + 2) = v149;
            }
            while (v139 != v141);
            v139 = (_DWORD *)*((_QWORD *)v136 + 48);
          }
          v140 = v146 + 12;
          *((_QWORD *)v136 + 48) = v147;
          *((_QWORD *)v136 + 49) = v146 + 12;
          *((_QWORD *)v136 + 50) = &v145[12 * v144];
          if (v139)
            operator delete(v139);
        }
        else
        {
          *(_QWORD *)v139 = v235[0];
          v139[2] = v225;
          v140 = v139 + 3;
        }
        *((_QWORD *)v136 + 49) = v140;
        v150 = *((_DWORD *)v1[1] + 5 * v98);
        if (v150 != -1)
        {
          v151 = v1[8];
          v152 = *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * v150);
          LODWORD(v235[0]) = *((_DWORD *)v1[1] + 5 * v121);
          *(_QWORD *)((char *)v235 + 4) = v152;
          v153 = v235[0];
          v154 = HIDWORD(v152);
          v156 = (char *)*((_QWORD *)v151 + 49);
          v155 = *((_QWORD *)v151 + 50);
          if ((unint64_t)v156 < v155)
          {
            *(_QWORD *)v156 = v235[0];
            *((_DWORD *)v156 + 2) = HIDWORD(v152);
            v97 = v156 + 12;
          }
          else
          {
            v157 = (_BYTE *)*((_QWORD *)v151 + 48);
            v158 = 0xAAAAAAAAAAAAAAABLL * ((v156 - v157) >> 2) + 1;
            if (v158 > 0x1555555555555555)
              goto LABEL_248;
            v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - (_QWORD)v157) >> 2);
            if (2 * v159 > v158)
              v158 = 2 * v159;
            if (v159 >= 0xAAAAAAAAAAAAAAALL)
              v160 = 0x1555555555555555;
            else
              v160 = v158;
            if (v160)
            {
              if (v160 > 0x1555555555555555)
                goto LABEL_246;
              v161 = (char *)operator new(12 * v160);
            }
            else
            {
              v161 = 0;
            }
            v162 = &v161[4 * ((v156 - v157) >> 2)];
            *(_QWORD *)v162 = v153;
            *((_DWORD *)v162 + 2) = v154;
            v163 = v162;
            if (v156 != v157)
            {
              do
              {
                v164 = *(_QWORD *)(v156 - 12);
                v156 -= 12;
                v165 = *((_DWORD *)v156 + 2);
                *(_QWORD *)(v163 - 12) = v164;
                v163 -= 12;
                *((_DWORD *)v163 + 2) = v165;
              }
              while (v156 != v157);
              v156 = (char *)*((_QWORD *)v151 + 48);
            }
            v97 = v162 + 12;
            *((_QWORD *)v151 + 48) = v163;
            *((_QWORD *)v151 + 49) = v162 + 12;
            *((_QWORD *)v151 + 50) = &v161[12 * v160];
            if (v156)
              operator delete(v156);
          }
          *((_QWORD *)v151 + 49) = v97;
        }
LABEL_95:
        if (v232 == (_DWORD)++v89)
          goto LABEL_90;
      }
      v101 = v100 ^ 1;
      v103 = (int *)*((_QWORD *)v99 + 46);
      v102 = *((_QWORD *)v99 + 47);
      if ((unint64_t)v103 < v102)
      {
        *v103 = v101;
        v104 = (uint64_t)(v103 + 1);
        v1 = v224;
LABEL_118:
        *((_QWORD *)v99 + 46) = v104;
        goto LABEL_119;
      }
      v105 = (int *)*((_QWORD *)v99 + 45);
      v106 = v103 - v105;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v108 = v102 - (_QWORD)v105;
      if (v108 >> 1 > v107)
        v107 = v108 >> 1;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
        v109 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      if (v109)
      {
        if (v109 >> 62)
          goto LABEL_246;
        v110 = operator new(4 * v109);
        v111 = (int *)&v110[4 * v106];
        *v111 = v101;
        v104 = (uint64_t)(v111 + 1);
        if (v103 != v105)
        {
LABEL_110:
          v112 = (char *)(v103 - 1) - (char *)v105;
          v1 = v224;
          if (v112 < 0x2C)
            goto LABEL_255;
          if ((unint64_t)((char *)v105 - v110) < 0x20)
            goto LABEL_255;
          v113 = (v112 >> 2) + 1;
          v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
          v115 = &v103[v114 / 0xFFFFFFFFFFFFFFFCLL];
          v111 = (int *)((char *)v111 - v114);
          v116 = &v110[4 * v106 - 16];
          v117 = v103 - 4;
          v118 = v113 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v119 = *(_OWORD *)v117;
            *(v116 - 1) = *((_OWORD *)v117 - 1);
            *v116 = v119;
            v116 -= 2;
            v117 -= 8;
            v118 -= 8;
          }
          while (v118);
          v103 = v115;
          if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_255:
            do
            {
              v120 = *--v103;
              *--v111 = v120;
            }
            while (v103 != v105);
          }
          *((_QWORD *)v99 + 45) = v111;
          *((_QWORD *)v99 + 46) = v104;
          *((_QWORD *)v99 + 47) = &v110[4 * v109];
          if (!v105)
            goto LABEL_118;
LABEL_117:
          operator delete(v105);
          goto LABEL_118;
        }
      }
      else
      {
        v110 = 0;
        v111 = (int *)(4 * v106);
        *(_DWORD *)(4 * v106) = v101;
        v104 = 4 * v106 + 4;
        if (v103 != v105)
          goto LABEL_110;
      }
      v1 = v224;
      *((_QWORD *)v99 + 45) = v111;
      *((_QWORD *)v99 + 46) = v104;
      *((_QWORD *)v99 + 47) = &v110[4 * v109];
      if (!v105)
        goto LABEL_118;
      goto LABEL_117;
    }
LABEL_90:
    if (*v219 != -1)
    {
      v90 = v1[8];
      v91 = *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * (*v219 ^ 1));
      LODWORD(v235[0]) = *v219 ^ 1;
      *(_QWORD *)((char *)v235 + 4) = v91;
      v92 = v235[0];
      v93 = HIDWORD(v91);
      v95 = (_DWORD *)*((_QWORD *)v90 + 49);
      v94 = *((_QWORD *)v90 + 50);
      if ((unint64_t)v95 >= v94)
      {
        v166 = (_DWORD *)*((_QWORD *)v90 + 48);
        v167 = 0xAAAAAAAAAAAAAAABLL * (v95 - v166) + 1;
        if (v167 > 0x1555555555555555)
LABEL_248:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v166) >> 2);
        if (2 * v168 > v167)
          v167 = 2 * v168;
        if (v168 >= 0xAAAAAAAAAAAAAAALL)
          v169 = 0x1555555555555555;
        else
          v169 = v167;
        if (v169)
        {
          if (v169 > 0x1555555555555555)
            goto LABEL_246;
          v170 = (char *)operator new(12 * v169);
        }
        else
        {
          v170 = 0;
        }
        v171 = &v170[4 * (v95 - v166)];
        *(_QWORD *)v171 = v92;
        *((_DWORD *)v171 + 2) = v93;
        v172 = v171;
        if (v95 != v166)
        {
          do
          {
            v173 = *(_QWORD *)(v95 - 3);
            v95 -= 3;
            v174 = v95[2];
            *(_QWORD *)(v172 - 12) = v173;
            v172 -= 12;
            *((_DWORD *)v172 + 2) = v174;
          }
          while (v95 != v166);
          v95 = (_DWORD *)*((_QWORD *)v90 + 48);
        }
        v96 = v171 + 12;
        *((_QWORD *)v90 + 48) = v172;
        *((_QWORD *)v90 + 49) = v171 + 12;
        *((_QWORD *)v90 + 50) = &v170[12 * v169];
        if (v95)
          operator delete(v95);
      }
      else
      {
        *(_QWORD *)v95 = v235[0];
        v95[2] = HIDWORD(v91);
        v96 = v95 + 3;
      }
      *((_QWORD *)v90 + 49) = v96;
    }
    v175 = *((_DWORD *)v1[17] + 3 * (int)v234);
    v176 = v1[8];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v176, v175);
    LODWORD(v235[0]) = *(_DWORD *)(*((_QWORD *)v176 + 4) + 4 * v175);
    *(_QWORD *)((char *)v235 + 4) = v230;
    v177 = v235[0];
    v179 = (char *)*((_QWORD *)v176 + 49);
    v178 = *((_QWORD *)v176 + 50);
    if ((unint64_t)v179 < v178)
    {
      *(_QWORD *)v179 = v235[0];
      *((_DWORD *)v179 + 2) = HIDWORD(v230);
      v180 = v179 + 12;
      v181 = v224;
      goto LABEL_206;
    }
    v182 = (_BYTE *)*((_QWORD *)v176 + 48);
    v183 = 0xAAAAAAAAAAAAAAABLL * ((v179 - v182) >> 2) + 1;
    if (v183 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (_QWORD)v182) >> 2);
    if (2 * v184 > v183)
      v183 = 2 * v184;
    if (v184 >= 0xAAAAAAAAAAAAAAALL)
      v185 = 0x1555555555555555;
    else
      v185 = v183;
    if (v185)
    {
      if (v185 > 0x1555555555555555)
        goto LABEL_246;
      v186 = (char *)operator new(12 * v185);
    }
    else
    {
      v186 = 0;
    }
    v187 = &v186[4 * ((v179 - v182) >> 2)];
    *(_QWORD *)v187 = v177;
    *((_DWORD *)v187 + 2) = HIDWORD(v230);
    v188 = v187;
    if (v179 == v182)
    {
      v181 = v224;
      v180 = v187 + 12;
      *((_QWORD *)v176 + 48) = v187;
      *((_QWORD *)v176 + 49) = v187 + 12;
      *((_QWORD *)v176 + 50) = &v186[12 * v185];
      if (v179)
        goto LABEL_205;
    }
    else
    {
      v181 = v224;
      do
      {
        v189 = *(_QWORD *)(v179 - 12);
        v179 -= 12;
        v190 = *((_DWORD *)v179 + 2);
        *(_QWORD *)(v188 - 12) = v189;
        v188 -= 12;
        *((_DWORD *)v188 + 2) = v190;
      }
      while (v179 != v182);
      v179 = (char *)*((_QWORD *)v176 + 48);
      v180 = v187 + 12;
      *((_QWORD *)v176 + 48) = v188;
      *((_QWORD *)v176 + 49) = v187 + 12;
      *((_QWORD *)v176 + 50) = &v186[12 * v185];
      if (v179)
LABEL_205:
        operator delete(v179);
    }
LABEL_206:
    v47 = v221;
    v26 = v222;
    *((_QWORD *)v176 + 49) = v180;
    v191 = v181[8];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v191, v175);
    LODWORD(v235[0]) = *(_DWORD *)(*((_QWORD *)v191 + 7) + 4 * v175) ^ 1;
    *(_QWORD *)((char *)v235 + 4) = v227;
    v192 = v235[0];
    v194 = (char *)*((_QWORD *)v191 + 49);
    v193 = *((_QWORD *)v191 + 50);
    if ((unint64_t)v194 < v193)
    {
      *(_QWORD *)v194 = v235[0];
      v1 = v224;
      *((_DWORD *)v194 + 2) = v225;
      v195 = v194 + 12;
      goto LABEL_226;
    }
    v196 = (_BYTE *)*((_QWORD *)v191 + 48);
    v197 = 0xAAAAAAAAAAAAAAABLL * ((v194 - v196) >> 2) + 1;
    if (v197 > 0x1555555555555555)
LABEL_247:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v193 - (_QWORD)v196) >> 2);
    if (2 * v198 > v197)
      v197 = 2 * v198;
    if (v198 >= 0xAAAAAAAAAAAAAAALL)
      v199 = 0x1555555555555555;
    else
      v199 = v197;
    if (v199)
    {
      if (v199 > 0x1555555555555555)
        goto LABEL_246;
      v200 = (char *)operator new(12 * v199);
    }
    else
    {
      v200 = 0;
    }
    v201 = &v200[4 * ((v194 - v196) >> 2)];
    *(_QWORD *)v201 = v192;
    *((_DWORD *)v201 + 2) = v225;
    v202 = v201;
    if (v194 == v196)
    {
      v1 = v224;
      v195 = v201 + 12;
      *((_QWORD *)v191 + 48) = v201;
      *((_QWORD *)v191 + 49) = v201 + 12;
      *((_QWORD *)v191 + 50) = &v200[12 * v199];
      if (v194)
        goto LABEL_224;
    }
    else
    {
      v1 = v224;
      do
      {
        v203 = *(_QWORD *)(v194 - 12);
        v194 -= 12;
        v204 = *((_DWORD *)v194 + 2);
        *(_QWORD *)(v202 - 12) = v203;
        v202 -= 12;
        *((_DWORD *)v202 + 2) = v204;
      }
      while (v194 != v196);
      v194 = (char *)*((_QWORD *)v191 + 48);
      v195 = v201 + 12;
      *((_QWORD *)v191 + 48) = v202;
      *((_QWORD *)v191 + 49) = v201 + 12;
      *((_QWORD *)v191 + 50) = &v200[12 * v199];
      if (v194)
LABEL_224:
        operator delete(v194);
    }
    v47 = v221;
    v26 = v222;
LABEL_226:
    *((_QWORD *)v191 + 49) = v195;
    v205 = (int *)((char *)v1[1] + 20 * v175);
    v206 = *(_QWORD *)(v205 + 3);
    if (*v205 != -1)
      v206 += *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * *v205) * *(_QWORD *)(v205 + 1);
    if (v233 >= v206)
    {
      v207 = operations_research::sat::AffineExpression::LowerOrEqual((uint64_t)v205, v233);
      v223 = v223 & 0xFFFFFFFF00000000 | v208;
      result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent((unint64_t *)v1[8], v175, v207, v223);
      if (!(_DWORD)result)
        return result;
      v209 = v1[8];
      v210 = *(int *)(*((_QWORD *)v209 + 16) + 4 * v175);
      if ((_DWORD)v210 == -1
        || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v209 + 24) + ((v210 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*((_QWORD *)v209 + 16) + 4 * v175)) & 1) != 0)
      {
        v211 = (int *)((char *)v1[1] + 20 * v175);
        v212 = *(_QWORD *)(v211 + 3);
        if (*v211 != -1)
          v212 += *(_QWORD *)(*((_QWORD *)v1[7] + 5) + 12 * *v211) * *(_QWORD *)(v211 + 1);
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v26, *((_DWORD *)v1[14] + v175), *(_QWORD *)((char *)v1[17] + 12 * (int)v234 + 4) * v220, v212, v233);
        if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26) <= v47)
        {
LABEL_238:
          v30 = v220;
LABEL_239:
          v28 = v217;
          v29 = v215;
          goto LABEL_35;
        }
      }
      else
      {
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v26, v234);
        if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26) <= v47)
          goto LABEL_238;
      }
      continue;
    }
    break;
  }
  v213 = v1[8];
  if (*(_DWORD *)(*((_QWORD *)v213 + 16) + 4 * v175) == -1)
    return operations_research::sat::SchedulingConstraintHelper::ReportConflict(v213);
  else
    return operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(v213, v175);
}

void operations_research::sat::SchedulingConstraintHelper::ClearReason(operations_research::sat::SchedulingConstraintHelper *this)
{
  operations_research::sat::SchedulingConstraintHelper *v2;
  unint64_t v3;
  char v4;

  *((_QWORD *)this + 49) = *((_QWORD *)this + 48);
  *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
  v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 51);
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
    v3 = (int)((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2);
    v4 = 0;
    std::vector<BOOL>::assign((char **)this + 53, v3, &v4);
  }
}

void operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  int v4;
  int v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _OWORD *v22;
  int *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(this, a2);
  v4 = *(_DWORD *)(*((_QWORD *)this + 16) + 4 * a2);
  if (v4 != -1)
  {
    v5 = v4 ^ 1;
    v7 = (int *)*((_QWORD *)this + 46);
    v6 = *((_QWORD *)this + 47);
    if ((unint64_t)v7 < v6)
    {
      *v7 = v5;
      v8 = (uint64_t)(v7 + 1);
LABEL_23:
      *((_QWORD *)this + 46) = v8;
      return;
    }
    v9 = (int *)*((_QWORD *)this + 45);
    v10 = v7 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
      v15 = (int *)&v14[4 * v10];
      v16 = &v14[4 * v13];
      *v15 = v5;
      v8 = (uint64_t)(v15 + 1);
      v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
        goto LABEL_21;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(4 * v10);
      v16 = 0;
      *(_DWORD *)(4 * v10) = v5;
      v8 = 4 * v10 + 4;
      v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
      {
LABEL_21:
        *((_QWORD *)this + 45) = v15;
        *((_QWORD *)this + 46) = v8;
        *((_QWORD *)this + 47) = v16;
        if (v9)
          operator delete(v9);
        goto LABEL_23;
      }
    }
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)((char *)v9 - v14) < 0x20)
      goto LABEL_29;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v21 = &v7[v20 / 0xFFFFFFFFFFFFFFFCLL];
    v15 = (int *)((char *)v15 - v20);
    v22 = &v14[4 * v10 - 16];
    v23 = v7 - 4;
    v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    v7 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v26 = *--v7;
        *--v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

void operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  LODWORD(v18) = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * a2);
  HIDWORD(v18) = a3;
  v6 = HIDWORD(a3);
  v8 = (_DWORD *)*((_QWORD *)a1 + 49);
  v7 = *((_QWORD *)a1 + 50);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (_DWORD *)*((_QWORD *)a1 + 48);
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 - v10) + 1;
    if (v11 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(12 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * (v8 - v10)];
    *(_QWORD *)v15 = v18;
    *((_DWORD *)v15 + 2) = v6;
    v9 = v15 + 12;
    if (v8 != v10)
    {
      do
      {
        v16 = *(_QWORD *)(v8 - 3);
        v8 -= 3;
        v17 = v8[2];
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v8 != v10);
      v8 = (_DWORD *)*((_QWORD *)a1 + 48);
    }
    *((_QWORD *)a1 + 48) = v15;
    *((_QWORD *)a1 + 49) = v9;
    *((_QWORD *)a1 + 50) = &v14[12 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v8 = v18;
    v8[2] = v6;
    v9 = v8 + 3;
  }
  *((_QWORD *)a1 + 49) = v9;
}

void operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, int64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002)
    v6 = -a3;
  LODWORD(v19) = *(_DWORD *)(*((_QWORD *)a1 + 7) + 4 * a2) ^ 1;
  HIDWORD(v19) = v6;
  v7 = HIDWORD(v6);
  v9 = (_DWORD *)*((_QWORD *)a1 + 49);
  v8 = *((_QWORD *)a1 + 50);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_DWORD *)*((_QWORD *)a1 + 48);
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0xAAAAAAAAAAAAAAALL)
      v14 = 0x1555555555555555;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(12 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * (v9 - v11)];
    *(_QWORD *)v16 = v19;
    *((_DWORD *)v16 + 2) = v7;
    v10 = v16 + 12;
    if (v9 != v11)
    {
      do
      {
        v17 = *(_QWORD *)(v9 - 3);
        v9 -= 3;
        v18 = v9[2];
        *(_QWORD *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v9 != v11);
      v9 = (_DWORD *)*((_QWORD *)a1 + 48);
    }
    *((_QWORD *)a1 + 48) = v16;
    *((_QWORD *)a1 + 49) = v10;
    *((_QWORD *)a1 + 50) = &v15[12 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v9 = v19;
    v9[2] = v7;
    v10 = v9 + 3;
  }
  *((_QWORD *)a1 + 49) = v10;
}

void operations_research::sat::CumulativeEnergyConstraint::~CumulativeEnergyConstraint(operations_research::sat::CumulativeEnergyConstraint *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985540;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985540;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB21F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CumulativeEnergyConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F985588;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CumulativeEnergyConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F985588;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LiftKnapsackCut(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, operations_research::TimeLimit *a5, uint64_t a6)
{
  _QWORD *v6;
  int *v8;
  int *v9;
  int v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t **v24;
  int v25;
  uint64_t **v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  double *v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  double *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  _OWORD *v76;
  double *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  double v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  double *v88;
  unint64_t v89;
  double *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  double *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t *v98;
  uint64_t *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  int64_t *v109;
  double v110;
  double *v111;
  double *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _DWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  int64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  int64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64_t *v146;
  _OWORD *v147;
  int64_t *v148;
  uint64_t v149;
  __int128 v150;
  int64_t v151;
  double *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  double *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double *v162;
  _OWORD *v163;
  double *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  double v168;
  double *v169;
  double *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _BYTE *v175;
  double *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double *v180;
  _OWORD *v181;
  double *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v187;
  unint64_t v188;
  void **v189;
  void **v190;
  uint64_t *v192;
  _QWORD *v195;
  char __p[20];
  char v198;
  char *v199[33];
  BOOL v200;
  double *v201;
  double *v202;
  double *v203;
  double *v204;
  double *v205;
  double *v206;
  uint64_t *v207;
  __int128 v208;
  _QWORD *v209;
  _QWORD *v210;
  unint64_t v211;
  _DWORD *v212;
  __int128 v213;
  uint64_t **v214;
  uint64_t *v215;
  uint64_t v216;

  v6 = (_QWORD *)a6;
  v215 = 0;
  v216 = 0;
  v214 = &v215;
  v8 = *(int **)(a6 + 16);
  v190 = (void **)(a6 + 16);
  v9 = *(int **)(a6 + 24);
  while (v8 != v9)
  {
    v10 = *v8;
    v11 = &v215;
    v12 = &v215;
    if (v215)
    {
      v13 = v215;
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v13;
          v14 = *(_DWORD *)((char *)v13 + 25);
          if (v10 >= v14)
            break;
          v13 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_12;
        }
        if (v14 >= v10)
          break;
        v13 = v12[1];
        if (!v13)
        {
          v11 = v12 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v15 = (char *)operator new(0x20uLL);
      *(_DWORD *)(v15 + 25) = v10;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v12;
      *v11 = (uint64_t *)v15;
      if (*v214)
      {
        v214 = (uint64_t **)*v214;
        v15 = (char *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v215, (uint64_t *)v15);
      ++v216;
    }
    ++v8;
  }
  v212 = 0;
  v213 = 0uLL;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v16 = a1[2];
  if (a1[3] != v16)
  {
    v17 = 0;
    while (1)
    {
      v19 = *(_DWORD *)(v16 + 4 * v17);
      v20 = *(_QWORD *)(a4 + 144);
      if (*(_QWORD *)(v20 + 20 * v19) || *(_QWORD *)(v20 + 20 * (v19 ^ 1)) != -1)
        goto LABEL_18;
      v21 = v215;
      if (v215)
      {
        v22 = &v215;
        do
        {
          v23 = v21;
          v24 = v22;
          v25 = *(_DWORD *)((char *)v21 + 25);
          v26 = (uint64_t **)(v21 + 1);
          if (v25 >= v19)
          {
            v26 = (uint64_t **)v23;
            v22 = (uint64_t **)v23;
          }
          v21 = *v26;
        }
        while (v21);
        if (v22 != &v215)
        {
          if (v25 < v19)
            v23 = (uint64_t *)v24;
          if (v19 >= *(_DWORD *)((char *)v23 + 25))
            goto LABEL_18;
        }
      }
      v27 = *(_QWORD *)(a1[5] + 8 * v17);
      if (*(double *)(*a2 + 8 * v19) > 0.000001)
      {
        v28 = (_DWORD *)v213;
        if ((unint64_t)v213 < *((_QWORD *)&v213 + 1))
        {
          *(_QWORD *)v213 = v27;
          v28[2] = v19;
          v29 = v28 + 3;
LABEL_65:
          *(_QWORD *)&v213 = v29;
          goto LABEL_18;
        }
        v39 = v212;
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v213 - (_QWORD)v212) >> 2);
        v41 = v40 + 1;
        if (v40 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v213 + 1) - (_QWORD)v212) >> 2) > v41)
          v41 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v213 + 1) - (_QWORD)v212) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v213 + 1) - (_QWORD)v212) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v42 = 0x1555555555555555;
        else
          v42 = v41;
        if (v42)
        {
          if (v42 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v188 = v42;
          v43 = (char *)operator new(12 * v42);
          v42 = v188;
          v44 = (uint64_t)&v43[4 * ((uint64_t)(v213 - (_QWORD)v212) >> 2)];
          *(_QWORD *)v44 = v27;
          *(_DWORD *)(v44 + 8) = v19;
          v45 = (uint64_t)&v43[12 * v40];
          if (v28 == v39)
            goto LABEL_63;
          do
          {
LABEL_61:
            v48 = *(_QWORD *)(v28 - 3);
            v28 -= 3;
            v49 = v28[2];
            *(_QWORD *)(v45 - 12) = v48;
            v45 -= 12;
            *(_DWORD *)(v45 + 8) = v49;
          }
          while (v28 != v39);
          v28 = v212;
        }
        else
        {
          v43 = 0;
          v44 = 4 * ((uint64_t)(v213 - (_QWORD)v212) >> 2);
          *(_QWORD *)v44 = v27;
          *(_DWORD *)(v44 + 8) = v19;
          v45 = 12 * v40;
          if (v28 != v39)
            goto LABEL_61;
        }
LABEL_63:
        v29 = (_DWORD *)(v44 + 12);
        v212 = (_DWORD *)v45;
        *((_QWORD *)&v213 + 1) = &v43[12 * v42];
        if (v28)
          operator delete(v28);
        goto LABEL_65;
      }
      v30 = v210;
      if ((unint64_t)v210 >= v211)
        break;
      *v210 = v27;
      v30[2] = v19;
      v18 = v30 + 3;
LABEL_17:
      v210 = v18;
LABEL_18:
      ++v17;
      v16 = a1[2];
      if (v17 >= (a1[3] - v16) >> 2)
      {
        v51 = (uint64_t *)v212;
        v50 = v213;
        goto LABEL_68;
      }
    }
    v31 = v209;
    v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v210 - (char *)v209) >> 2);
    v33 = v32 + 1;
    if (v32 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)v209) >> 2) > v33)
      v33 = 0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)v209) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (_QWORD)v209) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v34 = 0x1555555555555555;
    else
      v34 = v33;
    if (v34)
    {
      v187 = *(_QWORD *)(a1[5] + 8 * v17);
      if (v34 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = v34;
      v36 = operator new(12 * v34);
      v34 = v35;
      v37 = (uint64_t)v36 + 4 * (((char *)v210 - (char *)v209) >> 2);
      *(_QWORD *)v37 = v187;
      *(_DWORD *)(v37 + 8) = v19;
      v38 = (uint64_t)v36 + 12 * v32;
      if (v30 == v31)
        goto LABEL_57;
    }
    else
    {
      v36 = 0;
      v37 = 4 * (((char *)v210 - (char *)v209) >> 2);
      *(_QWORD *)v37 = v27;
      *(_DWORD *)(v37 + 8) = v19;
      v38 = 12 * v32;
      if (v30 == v31)
        goto LABEL_57;
    }
    do
    {
      v46 = *(_QWORD *)(v30 - 3);
      v30 -= 3;
      v47 = v30[2];
      *(_QWORD *)(v38 - 12) = v46;
      v38 -= 12;
      *(_DWORD *)(v38 + 8) = v47;
    }
    while (v30 != v31);
    v30 = v209;
LABEL_57:
    v18 = (_QWORD *)(v37 + 12);
    v209 = (_QWORD *)v38;
    v211 = (unint64_t)v36 + 12 * v34;
    if (v30)
      operator delete(v30);
    goto LABEL_17;
  }
  v51 = 0;
  v50 = 0;
LABEL_68:
  v52 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v51) >> 2));
  if ((uint64_t *)v50 == v51)
    v53 = 0;
  else
    v53 = v52;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(v50, v50, (uint64_t)v51, (uint64_t)v51, (uint64_t)v199, v53, 1);
  v55 = v209;
  v54 = v210;
  v56 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v210 - (char *)v209) >> 2));
  if (v210 == v209)
    v57 = 0;
  else
    v57 = v56;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>((uint64_t)v210, (uint64_t)v210, (uint64_t)v209, (uint64_t)v209, (uint64_t)v199, v57, 1);
  v207 = v51;
  v58 = v213;
  v208 = v213;
  v213 = 0uLL;
  v212 = 0;
  std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>,std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>>((void **)&v207, v58, v55, v54, 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v55) >> 2));
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  if (v6[3] != v6[2])
  {
    v59 = 0;
    v60 = 0;
    while (1)
    {
      v62 = (double)*(uint64_t *)(v6[5] + 8 * v60);
      v63 = v205;
      if (v205 < v206)
      {
        *v205 = v62;
        v64 = (uint64_t)(v63 + 1);
        goto LABEL_99;
      }
      v65 = v204;
      v66 = v205 - v204;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v68 = (char *)v206 - (char *)v204;
      if (((char *)v206 - (char *)v204) >> 2 > v67)
        v67 = v68 >> 2;
      v69 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v67;
      if (v69)
        break;
      v70 = 0;
      v71 = (double *)(8 * v66);
      *(double *)(8 * v66) = v62;
      v64 = 8 * v66 + 8;
      if (v63 != v65)
        goto LABEL_91;
LABEL_97:
      v204 = v71;
      v205 = (double *)v64;
      v206 = (double *)&v70[8 * v69];
      if (v65)
      {
        operator delete(v65);
        v59 = v202;
      }
LABEL_99:
      v205 = (double *)v64;
      v81 = (double)*(uint64_t *)(*a3 + 8 * v60);
      if (v59 >= v203)
      {
        v82 = v201;
        v83 = v59 - v201;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v85 = (char *)v203 - (char *)v201;
        if (((char *)v203 - (char *)v201) >> 2 > v84)
          v84 = v85 >> 2;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
        {
          if (v86 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v87 = operator new(8 * v86);
          v88 = (double *)&v87[8 * v83];
          *v88 = v81;
          v61 = (uint64_t)(v88 + 1);
          if (v59 == v82)
            goto LABEL_114;
LABEL_111:
          v89 = (char *)(v59 - 1) - (char *)v82;
          if (v89 < 0x168)
          {
            v90 = v59;
            goto LABEL_113;
          }
          if (&v87[(char *)v59 - (char *)v82 - 8 - (v89 & 0xFFFFFFFFFFFFFFF8)] > &v87[(char *)v59 - (char *)v82 - 8])
          {
            v90 = v59;
            goto LABEL_113;
          }
          if ((double *)((char *)v59 - (v89 & 0xFFFFFFFFFFFFFFF8) - 8) > v59 - 1)
          {
            v90 = v59;
            goto LABEL_113;
          }
          if ((unint64_t)((char *)v82 - v87) < 0x20)
          {
            v90 = v59;
            goto LABEL_113;
          }
          v92 = (v89 >> 3) + 1;
          v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          v90 = &v59[v93 / 0xFFFFFFFFFFFFFFF8];
          v88 = (double *)((char *)v88 - v93);
          v94 = &v87[8 * v83 - 16];
          v95 = v59 - 2;
          v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v97 = *(_OWORD *)v95;
            *(v94 - 1) = *((_OWORD *)v95 - 1);
            *v94 = v97;
            v94 -= 2;
            v95 -= 4;
            v96 -= 4;
          }
          while (v96);
          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_113:
              v91 = *((_QWORD *)v90-- - 1);
              *((_QWORD *)v88-- - 1) = v91;
            }
            while (v90 != v82);
          }
        }
        else
        {
          v87 = 0;
          v88 = (double *)(8 * v83);
          *(double *)(8 * v83) = v81;
          v61 = 8 * v83 + 8;
          if (v59 != v82)
            goto LABEL_111;
        }
LABEL_114:
        v201 = v88;
        v202 = (double *)v61;
        v203 = (double *)&v87[8 * v86];
        if (v82)
          operator delete(v82);
        goto LABEL_77;
      }
      *v59 = v81;
      v61 = (uint64_t)(v59 + 1);
LABEL_77:
      v202 = (double *)v61;
      ++v60;
      v59 = (double *)v61;
      if (v60 >= (uint64_t)(v6[3] - v6[2]) >> 2)
        goto LABEL_126;
    }
    if (v69 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v70 = operator new(8 * v69);
    v71 = (double *)&v70[8 * v66];
    *v71 = v62;
    v64 = (uint64_t)(v71 + 1);
    if (v63 == v65)
      goto LABEL_97;
LABEL_91:
    v72 = (char *)(v63 - 1) - (char *)v65;
    if (v72 < 0x58)
      goto LABEL_245;
    if ((unint64_t)((char *)v65 - v70) < 0x20)
      goto LABEL_245;
    v73 = (v72 >> 3) + 1;
    v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
    v75 = &v63[v74 / 0xFFFFFFFFFFFFFFF8];
    v71 = (double *)((char *)v71 - v74);
    v76 = &v70[8 * v66 - 16];
    v77 = v63 - 2;
    v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      *v76 = v79;
      v76 -= 2;
      v77 -= 4;
      v78 -= 4;
    }
    while (v78);
    v63 = v75;
    if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_245:
      do
      {
        v80 = *((_QWORD *)v63-- - 1);
        *((_QWORD *)v71-- - 1) = v80;
      }
      while (v63 != v65);
    }
    goto LABEL_97;
  }
LABEL_126:
  v200 = 0;
  v198 = 19;
  strcpy(__p, "Knapsack cut lifter");
  operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts((uint64_t)v199, (__int128 *)__p);
  if (v198 < 0)
  {
    operator delete(*(void **)__p);
    v99 = v207;
    v98 = (uint64_t *)v208;
    if (v207 != (uint64_t *)v208)
      goto LABEL_128;
  }
  else
  {
    v99 = v207;
    v98 = (uint64_t *)v208;
    if (v207 != (uint64_t *)v208)
    {
LABEL_128:
      v100 = 0;
      v189 = (void **)(v6 + 5);
      v195 = v6;
      v192 = v98;
      while (1)
      {
        v102 = *v99;
        v103 = *((_DWORD *)v99 + 2);
        v200 = 0;
        v104 = a1[1] - v102;
        if (v104 < 1)
          goto LABEL_131;
        operations_research::KnapsackSolverForCuts::Init(v199, (uint64_t *)&v204, (uint64_t *)&v201, (double)v104);
        v199[32] = (char *)100;
        operations_research::KnapsackSolverForCuts::Solve((operations_research::KnapsackSolverForCuts *)v199, a5, &v200);
        v105 = v6[1]
             - llround(operations_research::KnapsackSolverForCuts::GetAggregatedProfitUpperBound((operations_research::KnapsackSolverForCuts *)v199));
        if (v105 < 1)
          goto LABEL_131;
        v107 = (char *)v6[3];
        v106 = v6[4];
        if ((unint64_t)v107 < v106)
        {
          *(_DWORD *)v107 = v103;
          v6[3] = v107 + 4;
          v109 = (int64_t *)v6[6];
          v108 = v6[7];
          if ((unint64_t)v109 < v108)
            goto LABEL_136;
          goto LABEL_158;
        }
        v114 = (char *)*v190;
        v115 = v107 - (_BYTE *)*v190;
        v116 = v115 >> 2;
        v117 = (v115 >> 2) + 1;
        if (v117 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v118 = v102;
        v119 = v106 - (_QWORD)v114;
        if (v119 >> 1 > v117)
          v117 = v119 >> 1;
        v120 = (unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v117;
        if (!v120)
          break;
        if (v120 >> 62)
          goto LABEL_232;
        v121 = operator new(4 * v120);
        v122 = &v121[4 * v116];
        *v122 = v103;
        v123 = (uint64_t)(v122 + 1);
        if (v107 != v114)
          goto LABEL_149;
LABEL_155:
        v195[2] = v122;
        v195[3] = v123;
        v195[4] = &v121[4 * v120];
        if (v114)
          operator delete(v114);
        v102 = v118;
        v6 = v195;
        v195[3] = v123;
        v109 = (int64_t *)v195[6];
        v108 = v195[7];
        if ((unint64_t)v109 < v108)
        {
LABEL_136:
          *v109 = v105;
          v6[6] = v109 + 1;
          v110 = (double)v105;
          v112 = v205;
          v111 = v206;
          if (v205 < v206)
            goto LABEL_137;
          goto LABEL_178;
        }
LABEL_158:
        v133 = (int64_t *)*v189;
        v134 = (char *)v109 - (_BYTE *)*v189;
        v135 = v134 >> 3;
        v136 = (v134 >> 3) + 1;
        if (v136 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v137 = v102;
        v138 = v108 - (_QWORD)v133;
        if (v138 >> 2 > v136)
          v136 = v138 >> 2;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v136;
        if (!v139)
        {
          v140 = 0;
          v141 = (int64_t *)(8 * v135);
          *(_QWORD *)(8 * v135) = v105;
          v142 = 8 * v135 + 8;
          if (v109 == v133)
            goto LABEL_175;
LABEL_169:
          v143 = (char *)(v109 - 1) - (char *)v133;
          if (v143 < 0x58)
            goto LABEL_246;
          if ((unint64_t)((char *)v109 - &v140[v134]) < 0x20)
            goto LABEL_246;
          v144 = (v143 >> 3) + 1;
          v145 = 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
          v146 = &v109[v145 / 0xFFFFFFFFFFFFFFF8];
          v141 = (int64_t *)((char *)v141 - v145);
          v147 = &v140[8 * v135 - 16];
          v148 = v109 - 2;
          v149 = v144 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v150 = *(_OWORD *)v148;
            *(v147 - 1) = *((_OWORD *)v148 - 1);
            *v147 = v150;
            v147 -= 2;
            v148 -= 4;
            v149 -= 4;
          }
          while (v149);
          v109 = v146;
          if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_246:
            do
            {
              v151 = *--v109;
              *--v141 = v151;
            }
            while (v109 != v133);
          }
          goto LABEL_175;
        }
        if (v139 >> 61)
LABEL_232:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v140 = operator new(8 * v139);
        v141 = (int64_t *)&v140[8 * v135];
        *v141 = v105;
        v142 = (uint64_t)(v141 + 1);
        if (v109 != v133)
          goto LABEL_169;
LABEL_175:
        v195[5] = v141;
        v195[6] = v142;
        v195[7] = &v140[8 * v139];
        if (v133)
          operator delete(v133);
        v102 = v137;
        v6 = v195;
        v195[6] = v142;
        v110 = (double)v105;
        v112 = v205;
        v111 = v206;
        if (v205 < v206)
        {
LABEL_137:
          *v112 = v110;
          v113 = (uint64_t)(v112 + 1);
          goto LABEL_197;
        }
LABEL_178:
        v152 = v204;
        v153 = v112 - v204;
        v154 = v153 + 1;
        if ((unint64_t)(v153 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v155 = (char *)v111 - (char *)v204;
        if (v155 >> 2 > v154)
          v154 = v155 >> 2;
        if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v154;
        if (v156)
        {
          if (v156 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v157 = operator new(8 * v156);
          v158 = (double *)&v157[8 * v153];
          *v158 = v110;
          v113 = (uint64_t)(v158 + 1);
          if (v112 == v152)
            goto LABEL_195;
LABEL_189:
          v159 = (char *)(v112 - 1) - (char *)v152;
          if (v159 < 0x58)
            goto LABEL_247;
          if ((unint64_t)((char *)v152 - v157) < 0x20)
            goto LABEL_247;
          v160 = (v159 >> 3) + 1;
          v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
          v162 = &v112[v161 / 0xFFFFFFFFFFFFFFF8];
          v158 = (double *)((char *)v158 - v161);
          v163 = &v157[8 * v153 - 16];
          v164 = v112 - 2;
          v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v166 = *(_OWORD *)v164;
            *(v163 - 1) = *((_OWORD *)v164 - 1);
            *v163 = v166;
            v163 -= 2;
            v164 -= 4;
            v165 -= 4;
          }
          while (v165);
          v112 = v162;
          if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_247:
            do
            {
              v167 = *((_QWORD *)v112-- - 1);
              *((_QWORD *)v158-- - 1) = v167;
            }
            while (v112 != v152);
          }
          goto LABEL_195;
        }
        v157 = 0;
        v158 = (double *)(8 * v153);
        *(double *)(8 * v153) = v110;
        v113 = 8 * v153 + 8;
        if (v112 != v152)
          goto LABEL_189;
LABEL_195:
        v204 = v158;
        v205 = (double *)v113;
        v206 = (double *)&v157[8 * v156];
        if (v152)
          operator delete(v152);
LABEL_197:
        v205 = (double *)v113;
        v168 = (double)v102;
        v169 = v202;
        if (v202 >= v203)
        {
          v170 = v201;
          v171 = v202 - v201;
          v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v173 = (char *)v203 - (char *)v201;
          if (((char *)v203 - (char *)v201) >> 2 > v172)
            v172 = v173 >> 2;
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
            v174 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v174 = v172;
          if (v174)
          {
            if (v174 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v175 = operator new(8 * v174);
            v176 = (double *)&v175[8 * v171];
            *v176 = v168;
            v101 = (uint64_t)(v176 + 1);
            if (v169 == v170)
              goto LABEL_215;
LABEL_209:
            v177 = (char *)(v169 - 1) - (char *)v170;
            if (v177 < 0x58)
              goto LABEL_248;
            if ((unint64_t)((char *)v170 - v175) < 0x20)
              goto LABEL_248;
            v178 = (v177 >> 3) + 1;
            v179 = 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
            v180 = &v169[v179 / 0xFFFFFFFFFFFFFFF8];
            v176 = (double *)((char *)v176 - v179);
            v181 = &v175[8 * v171 - 16];
            v182 = v169 - 2;
            v183 = v178 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v184 = *(_OWORD *)v182;
              *(v181 - 1) = *((_OWORD *)v182 - 1);
              *v181 = v184;
              v181 -= 2;
              v182 -= 4;
              v183 -= 4;
            }
            while (v183);
            v169 = v180;
            if (v178 != (v178 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_248:
              do
              {
                v185 = *((_QWORD *)v169-- - 1);
                *((_QWORD *)v176-- - 1) = v185;
              }
              while (v169 != v170);
            }
          }
          else
          {
            v175 = 0;
            v176 = (double *)(8 * v171);
            *(double *)(8 * v171) = v168;
            v101 = 8 * v171 + 8;
            if (v169 != v170)
              goto LABEL_209;
          }
LABEL_215:
          v201 = v176;
          v202 = (double *)v101;
          v203 = (double *)&v175[8 * v174];
          if (v170)
            operator delete(v170);
          goto LABEL_130;
        }
        *v202 = v168;
        v101 = (uint64_t)(v169 + 1);
LABEL_130:
        v98 = v192;
        v202 = (double *)v101;
        v100 = 1;
LABEL_131:
        v99 = (uint64_t *)((char *)v99 + 12);
        if (v99 == v98)
          goto LABEL_219;
      }
      v121 = 0;
      v122 = (_DWORD *)(4 * v116);
      *(_DWORD *)(4 * v116) = v103;
      v123 = 4 * v116 + 4;
      if (v107 == v114)
        goto LABEL_155;
LABEL_149:
      v124 = v107 - 4 - v114;
      if (v124 < 0x2C)
        goto LABEL_249;
      if ((unint64_t)(v107 - &v121[v115]) < 0x20)
        goto LABEL_249;
      v125 = (v124 >> 2) + 1;
      v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
      v127 = &v107[-v126];
      v122 = (_DWORD *)((char *)v122 - v126);
      v128 = &v121[4 * v116 - 16];
      v129 = v107 - 16;
      v130 = v125 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v131 = *(_OWORD *)v129;
        *(v128 - 1) = *((_OWORD *)v129 - 1);
        *v128 = v131;
        v128 -= 2;
        v129 -= 32;
        v130 -= 8;
      }
      while (v130);
      v107 = v127;
      if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_249:
        do
        {
          v132 = *((_DWORD *)v107 - 1);
          v107 -= 4;
          *--v122 = v132;
        }
        while (v107 != v114);
      }
      goto LABEL_155;
    }
  }
  v100 = 0;
LABEL_219:
  operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)v199);
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    *(_QWORD *)&v208 = v207;
    operator delete(v207);
  }
  if (v209)
    operator delete(v209);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v214, v215);
  return v100 & 1;
}

void sub_22DB22EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v24;
  void *v25;

  v24 = *(void **)(v22 - 184);
  if (v24)
  {
    *(_QWORD *)(v22 - 176) = v24;
    operator delete(v24);
    v25 = *(void **)(v22 - 160);
    if (!v25)
    {
LABEL_4:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v22 - 136, *(_QWORD **)(v22 - 128));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v25 = *(void **)(v22 - 160);
    if (!v25)
      goto LABEL_4;
  }
  *(_QWORD *)(v22 - 152) = v25;
  operator delete(v25);
  goto LABEL_4;
}

_QWORD *operations_research::sat::GetPreprocessedLinearConstraint@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  void **v55;
  void **v56;
  uint64_t v57;
  _QWORD *v59;
  _QWORD *v60;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  v6 = result[2];
  v5 = result[3];
  v7 = result[1];
  if (v5 != v6)
  {
    v8 = a3;
    v9 = 0;
    v10 = 0;
    v55 = (void **)(a4 + 40);
    v56 = (void **)(a4 + 16);
    v59 = a2;
    v60 = result;
    while (1)
    {
      while (1)
      {
        v11 = *(_DWORD *)(v6 + 4 * v10);
        v12 = *(_QWORD *)(v8 + 144);
        v13 = *(_QWORD *)(result[5] + 8 * v10);
        if ((double)(uint64_t)-*(_QWORD *)(v12 + 20 * (v11 ^ 1)) - *(double *)(*a2 + 8 * v11) <= 0.9999)
          break;
        v7 -= *(_QWORD *)(v12 + 20 * v11) * v13;
        if (++v10 >= (unint64_t)((v5 - v6) >> 2))
          goto LABEL_55;
      }
      v15 = *(char **)(a4 + 24);
      v14 = *(_QWORD *)(a4 + 32);
      if ((unint64_t)v15 < v14)
      {
        *(_DWORD *)v15 = v11;
        *(_QWORD *)(a4 + 24) = v15 + 4;
        v16 = *(_QWORD *)(a4 + 56);
        if ((unint64_t)v9 >= v16)
          goto LABEL_28;
        goto LABEL_7;
      }
      v57 = v7;
      v18 = (char *)*v56;
      v19 = v15 - (_BYTE *)*v56;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v22 = v14 - (_QWORD)v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (!v23)
        break;
      if (v23 >> 62)
        goto LABEL_56;
      v24 = v23;
      v25 = operator new(4 * v23);
      v23 = v24;
      v26 = &v25[4 * v20];
      *v26 = v11;
      v27 = (uint64_t)(v26 + 1);
      if (v15 != v18)
        goto LABEL_19;
LABEL_25:
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 24) = v27;
      *(_QWORD *)(a4 + 32) = &v25[4 * v23];
      if (v18)
      {
        operator delete(v18);
        v9 = *(char **)(a4 + 48);
      }
      a2 = v59;
      result = v60;
      v7 = v57;
      v8 = a3;
      *(_QWORD *)(a4 + 24) = v27;
      v16 = *(_QWORD *)(a4 + 56);
      if ((unint64_t)v9 >= v16)
      {
LABEL_28:
        v37 = (char *)*v55;
        v38 = v9 - (_BYTE *)*v55;
        v39 = v38 >> 3;
        v40 = (v38 >> 3) + 1;
        if (v40 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v41 = v7;
        v42 = v16 - (_QWORD)v37;
        if (v42 >> 2 > v40)
          v40 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v40;
        if (v43)
        {
          if (v43 >> 61)
LABEL_56:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = operator new(8 * v43);
          v45 = &v44[8 * v39];
          *v45 = v13;
          v17 = (uint64_t)(v45 + 1);
          if (v9 != v37)
          {
LABEL_37:
            v46 = v9 - 8 - v37;
            if (v46 < 0x168
              || &v44[v38 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v44[v38 - 8]
              || &v9[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8
              || (unint64_t)(v9 - v44 - v38) < 0x20)
            {
              v47 = v9;
              v8 = a3;
            }
            else
            {
              v49 = (v46 >> 3) + 1;
              v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v9[-v50];
              v45 = (_QWORD *)((char *)v45 - v50);
              v51 = &v44[8 * v39 - 16];
              v52 = v9 - 16;
              v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
              v8 = a3;
              do
              {
                v54 = *(_OWORD *)v52;
                *(v51 - 1) = *((_OWORD *)v52 - 1);
                *v51 = v54;
                v51 -= 2;
                v52 -= 32;
                v53 -= 4;
              }
              while (v53);
              if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_40:
                *(_QWORD *)(a4 + 40) = v45;
                *(_QWORD *)(a4 + 48) = v17;
                *(_QWORD *)(a4 + 56) = &v44[8 * v43];
                if (v37)
                  goto LABEL_41;
                goto LABEL_42;
              }
            }
            do
            {
              v48 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *--v45 = v48;
            }
            while (v47 != v37);
            goto LABEL_40;
          }
        }
        else
        {
          v44 = 0;
          v45 = (_QWORD *)(8 * v39);
          *(_QWORD *)(8 * v39) = v13;
          v17 = 8 * v39 + 8;
          if (v9 != v37)
            goto LABEL_37;
        }
        v8 = a3;
        *(_QWORD *)(a4 + 40) = v45;
        *(_QWORD *)(a4 + 48) = v17;
        *(_QWORD *)(a4 + 56) = &v44[8 * v43];
        if (v37)
LABEL_41:
          operator delete(v37);
LABEL_42:
        a2 = v59;
        result = v60;
        v7 = v41;
        goto LABEL_43;
      }
LABEL_7:
      *(_QWORD *)v9 = v13;
      v17 = (uint64_t)(v9 + 8);
LABEL_43:
      *(_QWORD *)(a4 + 48) = v17;
      v9 = (char *)v17;
      v6 = result[2];
      v5 = result[3];
      if (++v10 >= (unint64_t)((v5 - v6) >> 2))
        goto LABEL_55;
    }
    v25 = 0;
    v26 = (_DWORD *)(4 * v20);
    *(_DWORD *)(4 * v20) = v11;
    v27 = 4 * v20 + 4;
    if (v15 == v18)
      goto LABEL_25;
LABEL_19:
    v28 = v15 - 4 - v18;
    if (v28 < 0x2C)
      goto LABEL_61;
    if ((unint64_t)(v15 - &v25[v19]) < 0x20)
      goto LABEL_61;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v15[-v30];
    v26 = (_DWORD *)((char *)v26 - v30);
    v32 = &v25[4 * v20 - 16];
    v33 = v15 - 16;
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    v15 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        v36 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v26 = v36;
      }
      while (v15 != v18);
    }
    goto LABEL_25;
  }
LABEL_55:
  *(_QWORD *)a4 = *result;
  *(_QWORD *)(a4 + 8) = v7;
  return result;
}

void sub_22DB2346C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint *v1;

  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

void sub_22DB23480(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint *v1;

  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, const operations_research::sat::IntegerTrail *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE v24[16];

  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3) - v3;
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 >> 2;
  v6 = *((_QWORD *)a2 + 18);
  v7 = *((_QWORD *)this + 5);
  if (v5 <= 1)
    v5 = 1;
  if (v5 < 2)
  {
    v8 = 0;
    v9 = 0;
LABEL_10:
    v15 = (uint64_t *)(v7 + 8 * v8);
    v16 = v5 - v8;
    v17 = (int *)(v3 + 4 * v8);
    do
    {
      v18 = *v17++;
      v19 = *(_QWORD *)(v6 + 20 * (v18 ^ 1));
      v20 = *v15++;
      v9 -= v20 * v19;
      --v16;
    }
    while (v16);
    goto LABEL_12;
  }
  v10 = 0;
  v11 = 0;
  v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v12 = (_DWORD *)(v3 + 4);
  v13 = (_QWORD *)(v7 + 8);
  v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v10 -= *(v13 - 1) * *(_QWORD *)(v6 + 20 * (*(v12 - 1) ^ 1));
    v11 -= *v13 * *(_QWORD *)(v6 + 20 * (*v12 ^ 1));
    v12 += 2;
    v13 += 2;
    v14 -= 2;
  }
  while (v14);
  v9 = v11 + v10;
  if (v5 != v8)
    goto LABEL_10;
LABEL_12:
  v21 = *((_QWORD *)this + 1);
  if (v9 <= v21
    && *operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
    && (operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 269);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Filtered by cover filter", 24);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
  return v9 <= v21;
}

void sub_22DB23610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CanBeFilteredUsingCutLowerBound(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int *v4;
  int *v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  double *v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  double *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  double v74;
  _QWORD *v75;
  int64_t v78;
  _QWORD *v79;
  uint64_t v80;
  double *v82;
  double *v83;
  void *__p;
  char *v85;
  char *v86;
  char v87;

  v82 = 0;
  v3 = a1;
  v83 = 0;
  v4 = (int *)a1[2];
  v5 = (int *)a1[3];
  if (v4 == v5)
  {
    v28 = 0;
    v31 = 0;
    v27 = a1[1];
    v85 = 0;
    v86 = 0;
    goto LABEL_66;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v79 = a2;
  do
  {
    while (1)
    {
      v10 = (double)(uint64_t)-*(_QWORD *)(*(_QWORD *)(a3 + 144) + 20 * (*v4 ^ 1)) - *(double *)(*a2 + 8 * *v4);
      if (v6 >= v7)
        break;
      *v6++ = v10;
      v9 = (uint64_t)v6;
      if (++v4 == v5)
        goto LABEL_33;
    }
    v11 = v6 - v8;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (((char *)v7 - (char *)v8) >> 2 > v12)
      v12 = ((char *)v7 - (char *)v8) >> 2;
    if ((unint64_t)((char *)v7 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
      v15 = (double *)&v14[8 * v11];
      *v15 = v10;
      v9 = (uint64_t)(v15 + 1);
      if (v6 == v8)
        goto LABEL_19;
    }
    else
    {
      v14 = 0;
      v15 = (double *)(8 * v11);
      *(double *)(8 * v11) = v10;
      v9 = 8 * v11 + 8;
      if (v6 == v8)
        goto LABEL_19;
    }
    v16 = (char *)(v6 - 1) - (char *)v8;
    if (v16 < 0x168)
    {
      v17 = v6;
      goto LABEL_18;
    }
    if (&v14[(char *)v6 - (char *)v8 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v6 - (char *)v8 - 8])
    {
      v17 = v6;
      do
      {
LABEL_18:
        v18 = *((_QWORD *)v17-- - 1);
        *((_QWORD *)v15-- - 1) = v18;
      }
      while (v17 != v8);
      goto LABEL_19;
    }
    if ((double *)((char *)v6 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
    {
      v17 = v6;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v8 - v14) < 0x20)
    {
      v17 = v6;
      goto LABEL_18;
    }
    v19 = (v16 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v6[v20 / 0xFFFFFFFFFFFFFFF8];
    v15 = (double *)((char *)v15 - v20);
    v21 = &v14[8 * v11 - 16];
    v22 = v6 - 2;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_18;
LABEL_19:
    v7 = (double *)&v14[8 * v13];
    if (v8)
      operator delete(v8);
    v8 = v15;
    a2 = v79;
    ++v4;
    v6 = (double *)v9;
  }
  while (v4 != v5);
LABEL_33:
  v83 = (double *)v9;
  v3 = a1;
  v26 = a1[2];
  v25 = a1[3];
  v82 = v8;
  v27 = a1[1];
  __p = 0;
  v85 = 0;
  v86 = 0;
  if (v25 != v26)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v32 = *(_QWORD *)(v3[5] + 8 * v29);
          v33 = *(_DWORD *)(v26 + 4 * v29);
          v34 = *(_QWORD *)(a3 + 144);
          v35 = *(_QWORD *)(v34 + 20 * v33);
          v36 = -(v32 * (v35 + *(_QWORD *)(v34 + 20 * (v33 ^ 1))));
          if (v28 >= v30)
            break;
          *(_QWORD *)v28 = v36;
          v28 += 8;
          v27 -= v35 * v32;
          if (++v29 >= (unint64_t)((v25 - v26) >> 2))
            goto LABEL_63;
        }
        v37 = v28 - v31;
        v38 = (v28 - v31) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
        {
          v85 = v28;
          v86 = v30;
          __p = v31;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v30 - v31) >> 2 > v39)
          v39 = (v30 - v31) >> 2;
        v40 = (unint64_t)(v30 - v31) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v39;
        v80 = *(_QWORD *)(v3[5] + 8 * v29);
        if (v40)
          break;
        v47 = 0;
        v48 = (char *)(8 * v38);
        *(_QWORD *)(8 * v38) = v36;
        v49 = 8 * v38 + 8;
        if (v28 != v31)
          goto LABEL_46;
LABEL_53:
        v3 = a1;
        v30 = &v47[8 * v40];
        if (v31)
          goto LABEL_50;
LABEL_54:
        v31 = v48;
        v28 = (char *)v49;
        v27 -= v35 * v80;
        if (++v29 >= (unint64_t)((v25 - v26) >> 2))
        {
LABEL_63:
          v85 = v28;
          v86 = v30;
          goto LABEL_66;
        }
      }
      v78 = v28 - v31;
      if (v40 >> 61)
      {
        v86 = v30;
        __p = v31;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v41 = v28;
      v42 = v27;
      v43 = v35;
      v44 = v26;
      v45 = v25;
      v46 = v40;
      v47 = operator new(8 * v40);
      v25 = v45;
      v26 = v44;
      v40 = v46;
      v35 = v43;
      v27 = v42;
      v28 = v41;
      v37 = v78;
      v48 = &v47[8 * v38];
      *(_QWORD *)v48 = v36;
      v49 = (uint64_t)(v48 + 8);
      if (v41 == v31)
        goto LABEL_53;
LABEL_46:
      v50 = v28 - 8 - v31;
      if (v50 < 0x168
        || &v47[v37 - 8 - (v50 & 0xFFFFFFFFFFFFFFF8)] > &v47[v37 - 8]
        || &v28[-(v50 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8
        || (unint64_t)(v28 - &v47[v37]) < 0x20)
      {
        v51 = v28;
        v3 = a1;
        do
        {
LABEL_48:
          v52 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *((_QWORD *)v48 - 1) = v52;
          v48 -= 8;
        }
        while (v51 != v31);
        goto LABEL_49;
      }
      v54 = (v50 >> 3) + 1;
      v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v51 = &v28[-v55];
      v48 -= v55;
      v56 = &v47[8 * v38 - 16];
      v57 = v28 - 16;
      v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      v3 = a1;
      do
      {
        v59 = *(_OWORD *)v57;
        *(v56 - 1) = *((_OWORD *)v57 - 1);
        *v56 = v59;
        v56 -= 2;
        v57 -= 32;
        v58 -= 4;
      }
      while (v58);
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_48;
LABEL_49:
      v30 = &v47[8 * v40];
      if (!v31)
        goto LABEL_54;
LABEL_50:
      v53 = (char *)v49;
      operator delete(v31);
      v26 = v3[2];
      v25 = v3[3];
      v31 = v48;
      v28 = v53;
      v27 -= v35 * v80;
      if (++v29 >= (unint64_t)((v25 - v26) >> 2))
        goto LABEL_63;
    }
  }
  v28 = 0;
  v31 = 0;
LABEL_66:
  v60 = 126 - 2 * __clz((v28 - v31) >> 3);
  __p = v31;
  if (v28 == v31)
    v61 = 0;
  else
    v61 = v60;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>((uint64_t)v31, v28, (uint64_t)&v87, v61, 1);
  if (v27 < 0)
  {
    LODWORD(v65) = 0;
    if (__p)
LABEL_74:
      operator delete(__p);
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v64 = v3[2];
    while ((v3[3] - v64) >> 2 != v62)
    {
      LODWORD(v65) = v62 + 1;
      v63 += *((_QWORD *)__p + v62++);
      if (v63 > v27)
      {
        if (!__p)
          goto LABEL_75;
        goto LABEL_74;
      }
    }
    v65 = (v3[3] - v64) >> 2;
    if (__p)
      goto LABEL_74;
  }
LABEL_75:
  v66 = &v82[(int)v65 - 1];
  if (v66 != v83)
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v82, v66, v83);
  if ((int)v65 < 1)
  {
    v69 = 0;
    if (v82)
      goto LABEL_98;
  }
  else
  {
    if ((_DWORD)v65 == 1)
    {
      v67 = 0;
      v68 = 0.0;
      goto LABEL_89;
    }
    v67 = v65 & 0xFFFFFFFE;
    v70 = v82 + 1;
    v68 = 0.0;
    v71 = v67;
    do
    {
      v68 = v68 + *(v70 - 1) + *v70;
      v70 += 2;
      v71 -= 2;
    }
    while (v71);
    if (v67 != v65)
    {
LABEL_89:
      v72 = &v82[v67];
      v73 = v65 - v67;
      do
      {
        v74 = *v72++;
        v68 = v68 + v74;
        --v73;
      }
      while (v73);
    }
    if (v68 >= 0.9999)
    {
      if (*operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
        && (operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 297);
        v75 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Filtered by kappa heuristic", 27);
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
      v69 = 1;
    }
    else
    {
      v69 = 0;
    }
LABEL_98:
    operator delete(v82);
  }
  return v69;
}

void sub_22DB23CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(_QWORD *a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  double *v6;
  unint64_t v7;
  double *v8;
  __n128 *v9;
  double v10;
  double v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double *v23;
  double *v24;
  __n128 *v25;
  double v26;
  _BOOL8 v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  _QWORD *v34;
  _QWORD *v36;
  _QWORD *v37;
  _BYTE v38[16];
  __n128 *v39;
  __n128 *v40;
  double *v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v4 = a1[2];
  if (a1[3] == v4)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (double)(uint64_t)-a1[1] + -1.0;
  v11 = 0.0;
  v12 = v40;
  v36 = a2;
  v37 = a1;
  do
  {
    v13 = *(int *)(v4 + 4 * v7);
    v14 = *(_QWORD *)(a3 + 144);
    v15 = *(_QWORD *)(a1[5] + 8 * v7);
    v16 = -*(_QWORD *)(v14 + 20 * (int)(v13 ^ 1));
    v17 = (double)v16 - *(double *)(*a2 + 8 * v13);
    v18 = (double)(v15 * (v16 - *(_QWORD *)(v14 + 20 * (int)v13)));
    if (v6 < v8)
    {
      *v6 = v17;
      v6[1] = v18;
      v12 = (__n128 *)(v6 + 2);
      goto LABEL_4;
    }
    v19 = ((char *)v6 - (char *)v9) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
    {
      v40 = v12;
      v41 = v8;
      v39 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v8 - (char *)v9) >> 3 > v20)
      v20 = ((char *)v8 - (char *)v9) >> 3;
    if ((unint64_t)((char *)v8 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
    {
      if (v21 >> 60)
      {
        v40 = v12;
        v41 = v8;
        v39 = v9;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v22 = (char *)operator new(16 * v21);
      v23 = (double *)&v22[16 * v19];
      *v23 = v17;
      v23[1] = v18;
      if (v6 == (double *)v9)
      {
LABEL_21:
        v25 = (__n128 *)v23;
        v8 = (double *)&v22[16 * v21];
        v12 = (__n128 *)(v23 + 2);
        if (!v9)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      v22 = 0;
      v23 = (double *)(16 * v19);
      *v23 = v17;
      v23[1] = v18;
      if (v6 == (double *)v9)
        goto LABEL_21;
    }
    v24 = v23;
    do
    {
      a4 = *(__n128 *)(v6 - 2);
      v25 = (__n128 *)(v24 - 2);
      *((__n128 *)v24 - 1) = a4;
      v6 -= 2;
      v24 -= 2;
    }
    while (v6 != (double *)v9);
    v8 = (double *)&v22[16 * v21];
    v12 = (__n128 *)(v23 + 2);
    if (!v9)
      goto LABEL_19;
LABEL_18:
    operator delete(v9);
LABEL_19:
    v9 = v25;
    a2 = v36;
    a1 = v37;
LABEL_4:
    v10 = v10 + (double)(v15 * v16);
    v11 = v11 + v17;
    ++v7;
    v4 = a1[2];
    v6 = (double *)v12;
  }
  while (v7 < (a1[3] - v4) >> 2);
  v40 = v12;
  v41 = v8;
  a4.n128_f64[0] = v11 + -1.0;
  v26 = v11 + -1.0 + 0.0001;
  v39 = v9;
  if (v26 >= 0.0)
  {
    v28 = 126 - 2 * __clz(v12 - v9);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    if (v12 == v9)
      v29 = 0;
    else
      v29 = v28;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(v9, v12, (uint64_t)v38, v29, 1, a4);
    v30 = 0.0;
    if (v12 == v9)
    {
LABEL_34:
      if (!v9)
        goto LABEL_36;
    }
    else
    {
      v31 = (double *)v9;
      while (1)
      {
        v32 = *v31;
        v33 = v31[1];
        if (v33 > v10)
          break;
        v30 = v30 + v32;
        v10 = v10 - v33;
        v31 += 2;
        if (v31 == (double *)v12)
          goto LABEL_34;
      }
      v30 = v30 + v10 / v33 * v32;
      if (!v9)
      {
LABEL_36:
        v27 = v30 < v26;
        if (v30 < v26
          && *operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
          && (operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 349);
          v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Filtered by knapsack upper bound", 32);
          google::LogMessage::~LogMessage((google::LogMessage *)v38);
        }
        v9 = v39;
        if (v39)
          goto LABEL_42;
        return v27;
      }
    }
    operator delete(v9);
    goto LABEL_36;
  }
  v27 = 0;
  if (!v9)
    return v27;
LABEL_42:
  v40 = v9;
  operator delete(v9);
  return v27;
}

void sub_22DB240CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConvertToKnapsackForm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  void *v27[2];
  void *__p[2];
  __int128 v29;

  v3 = a1[2];
  if (v3 != a1[3])
  {
    v5 = (uint64_t *)a1[5];
    v6 = *v5;
    if (*v5 < 0)
      v6 = -v6;
    v7 = a1[6] - (_QWORD)v5;
    if ((unint64_t)v7 >= 9)
    {
      v9 = v7 >> 3;
      if ((unint64_t)(v7 >> 3) <= 2)
        v9 = 2;
      v10 = 1;
      while (*(_QWORD *)(*(_QWORD *)(a3 + 144) + 20 * (*(_DWORD *)(v3 + 4 * v10) ^ 1))
            + *(_QWORD *)(*(_QWORD *)(a3 + 144) + 20 * *(int *)(v3 + 4 * v10))
            - 1 >= -2)
      {
        v11 = v5[v10];
        if (v11 < 0)
          v11 = -v11;
        if (v11 != v6)
          break;
        if (v9 == ++v10)
          return;
      }
      if (a1[1] <= 0x7FFFFFFFFFFFFFFDLL)
      {
        v12 = 0;
        *(_OWORD *)__p = 0u;
        v29 = 0u;
        v26 = 0u;
        *(_OWORD *)v27 = 0u;
        do
        {
          v13 = *(_QWORD *)(a1[5] + 8 * v12);
          if (v13 >= 0)
            v14 = *(_QWORD *)(a1[5] + 8 * v12);
          else
            v14 = -v13;
          operations_research::sat::LinearConstraint::AddTerm(&v26, *(_DWORD *)(v3 + 4 * v12++) ^ (v13 < 1), v14);
          v3 = a1[2];
        }
        while (v12 < (a1[3] - v3) >> 2);
        v15 = a1[1];
        *(_QWORD *)&v26 = 0x8000000000000002;
        *((_QWORD *)&v26 + 1) = v15;
        v16 = *(_QWORD *)(a2 + 8);
        if (v16 >= *(_QWORD *)(a2 + 16))
        {
          v17 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>((operations_research::sat::LinearConstraint **)a2, (const operations_research::sat::LinearConstraint *)&v26);
        }
        else
        {
          operations_research::sat::LinearConstraint::LinearConstraint(*(operations_research::sat::LinearConstraint **)(a2 + 8), (const operations_research::sat::LinearConstraint *)&v26);
          v17 = (char *)(v16 + 64);
          *(_QWORD *)(a2 + 8) = v16 + 64;
        }
        *(_QWORD *)(a2 + 8) = v17;
        if (__p[1])
        {
          *(void **)&v29 = __p[1];
          operator delete(__p[1]);
        }
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
      }
      v18 = *a1;
      if (*a1 > (uint64_t)0x8000000000000002)
      {
        *(_OWORD *)__p = 0u;
        v29 = 0u;
        v26 = 0u;
        *(_OWORD *)v27 = 0u;
        v19 = a1[2];
        if (a1[3] != v19)
        {
          v20 = 0;
          do
          {
            v21 = *(_DWORD *)(v19 + 4 * v20);
            v22 = *(_QWORD *)(a1[5] + 8 * v20);
            if (v22 >= 0)
              v23 = *(_QWORD *)(a1[5] + 8 * v20);
            else
              v23 = -v22;
            operations_research::sat::LinearConstraint::AddTerm(&v26, v21 ^ (v22 > 0), v23);
            ++v20;
            v19 = a1[2];
          }
          while (v20 < (a1[3] - v19) >> 2);
          v18 = *a1;
        }
        *(_QWORD *)&v26 = 0x8000000000000002;
        *((_QWORD *)&v26 + 1) = -v18;
        v24 = *(_QWORD *)(a2 + 8);
        if (v24 >= *(_QWORD *)(a2 + 16))
        {
          v25 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>((operations_research::sat::LinearConstraint **)a2, (const operations_research::sat::LinearConstraint *)&v26);
        }
        else
        {
          operations_research::sat::LinearConstraint::LinearConstraint(*(operations_research::sat::LinearConstraint **)(a2 + 8), (const operations_research::sat::LinearConstraint *)&v26);
          v25 = (char *)(v24 + 64);
          *(_QWORD *)(a2 + 8) = v24 + 64;
        }
        *(_QWORD *)(a2 + 8) = v25;
        if (__p[1])
        {
          *(void **)&v29 = __p[1];
          operator delete(__p[1]);
        }
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
      }
    }
  }
}

void sub_22DB2437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB24390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB243C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB243D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraint::AddTerm(_QWORD *a1, int a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v7 = (char *)a1[3];
  v6 = a1[4];
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *(_DWORD *)v7 = a2;
    v9 = (uint64_t)(v7 + 4);
    goto LABEL_22;
  }
  v10 = (char *)a1[2];
  v11 = (v7 - v10) >> 2;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      goto LABEL_44;
    v15 = operator new(4 * v14);
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v9 = (uint64_t)(v16 + 1);
    v18 = v7 - v10;
    if (v7 == v10)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_DWORD *)(4 * v11);
  v17 = 0;
  *(_DWORD *)(4 * v11) = a2;
  v9 = 4 * v11 + 4;
  v18 = v7 - v10;
  if (v7 != v10)
  {
LABEL_14:
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_49;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_49;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v8 = &v7[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v7 - 16;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        v26 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--v16 = v26;
      }
      while (v8 != v10);
    }
  }
LABEL_20:
  a1[2] = v16;
  a1[3] = v9;
  a1[4] = v17;
  if (v10)
    operator delete(v10);
LABEL_22:
  a1[3] = v9;
  v28 = (char *)a1[6];
  v27 = a1[7];
  if ((unint64_t)v28 < v27)
  {
    *(_QWORD *)v28 = a3;
    v29 = (uint64_t)(v28 + 8);
    goto LABEL_43;
  }
  v30 = (char *)a1[5];
  v31 = (v28 - v30) >> 3;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v33 = v27 - (_QWORD)v30;
  if (v33 >> 2 > v32)
    v32 = v33 >> 2;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
    v34 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (!v34)
  {
    v35 = 0;
    v36 = (_QWORD *)(8 * v31);
    v37 = 0;
    *(_QWORD *)(8 * v31) = a3;
    v29 = 8 * v31 + 8;
    v38 = v28 - v30;
    if (v28 == v30)
      goto LABEL_41;
LABEL_35:
    v39 = v38 - 8;
    if (v39 < 0x58)
      goto LABEL_50;
    if ((unint64_t)(v30 - v35) < 0x20)
      goto LABEL_50;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v28[-v41];
    v36 = (_QWORD *)((char *)v36 - v41);
    v43 = &v35[8 * v31 - 16];
    v44 = v28 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v28 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v47 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v36 = v47;
      }
      while (v28 != v30);
    }
    goto LABEL_41;
  }
  if (v34 >> 61)
LABEL_44:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v35 = operator new(8 * v34);
  v36 = &v35[8 * v31];
  v37 = &v35[8 * v34];
  *v36 = a3;
  v29 = (uint64_t)(v36 + 1);
  v38 = v28 - v30;
  if (v28 != v30)
    goto LABEL_35;
LABEL_41:
  a1[5] = v36;
  a1[6] = v29;
  a1[7] = v37;
  if (v30)
    operator delete(v30);
LABEL_43:
  a1[6] = v29;
}

void operations_research::sat::CreateKnapsackCoverCutGenerator(uint64_t **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  operations_research::sat::IntegerTrail *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36[3];
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char *v53;
  uint64_t v54;
  operations_research::sat::IntegerTrail *v55;
  void *v56[3];
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  operations_research::sat::IntegerTrail *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  void *v72[3];
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  char *v85;
  void *__p;
  void *v87;
  _QWORD v88[3];
  _QWORD *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[6] = 0;
  if (a4 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *a2, a2[1], (a2[1] - *a2) >> 2);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v10 = *a1;
  v9 = a1[1];
  while (v10 != v9)
  {
    if ((unint64_t)(v10[3] - v10[2]) >= 0xC)
      operations_research::sat::ConvertToKnapsackForm(v10, (uint64_t)&v69, (uint64_t)v8);
    v10 += 8;
  }
  if (*operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] > 0
    && (operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v72, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 441);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#knapsack constraints: ", 23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v72);
  }
  v12 = *a2;
  v13 = (int *)a2[1];
  v14 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(a3);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>((uint64_t)v56, (int *)v12, v13, 0);
  v61 = 0u;
  v62 = 0u;
  v60 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v63 = 0;
  v64 = v8;
  v65 = v14;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v36, (char **)v56);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(&v48, (uint64_t)v69, (uint64_t)v70, (v70 - (_BYTE *)v69) >> 6);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v15 = *a2;
  v16 = a2[1] - *a2;
  if (v16)
  {
    if (v16 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = operator new(v16);
    v52 = v51;
    v17 = (char *)v51 + 4 * (v16 >> 2);
    v53 = v17;
    memcpy(v51, v15, v16);
    v52 = v17;
  }
  v54 = a3;
  v55 = v8;
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v72, (uint64_t *)v36);
  v18 = operator new(0xD0uLL);
  *v18 = &off_24F9855C0;
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v18 + 1), (uint64_t *)v72);
  v89 = v18;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v88, a4 + 3);
  v19 = v89;
  if (v89 == v88)
  {
    v20 = 4;
    v19 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_20;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_20:
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  v21 = (char *)v84;
  if (v84)
  {
    v22 = v85;
    v23 = v84;
    if (v85 != v84)
    {
      do
      {
        v24 = (void *)*((_QWORD *)v22 - 3);
        if (v24)
        {
          *((_QWORD *)v22 - 2) = v24;
          operator delete(v24);
        }
        v25 = (void *)*((_QWORD *)v22 - 6);
        if (v25)
        {
          *((_QWORD *)v22 - 5) = v25;
          operator delete(v25);
        }
        v22 -= 64;
      }
      while (v22 != v21);
      v23 = v84;
    }
    v85 = v21;
    operator delete(v23);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v79)
  {
    operator delete(v76);
    v81 = 0;
    v76 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v77 = 0;
    v78 = 0;
    v79 = 0;
  }
  if (v80)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v80);
  if (v73)
  {
    operator delete(v72[0]);
    v75 = 0;
    v72[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v72[1] = 0;
    v72[2] = 0;
    v73 = 0;
  }
  if (v74)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v74);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v26 = (char *)v48;
  if (v48)
  {
    v27 = v49;
    v28 = v48;
    if (v49 != v48)
    {
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 3);
        if (v29)
        {
          *((_QWORD *)v27 - 2) = v29;
          operator delete(v29);
        }
        v30 = (void *)*((_QWORD *)v27 - 6);
        if (v30)
        {
          *((_QWORD *)v27 - 5) = v30;
          operator delete(v30);
        }
        v27 -= 64;
      }
      while (v27 != v26);
      v28 = v48;
    }
    v49 = v26;
    operator delete(v28);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v43)
  {
    operator delete(v40);
    v45 = 0;
    v40 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v41 = 0;
    v42 = 0;
    v43 = 0;
  }
  if (v44)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v44);
  if (v37)
  {
    operator delete(v36[0]);
    v39 = 0;
    v36[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v36[1] = 0;
    v36[2] = 0;
    v37 = 0;
  }
  if (v38)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v38);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if ((_QWORD)v62)
  {
    operator delete(v60);
    v60 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v63 = 0;
    *(_QWORD *)&v62 = 0;
    v61 = 0uLL;
  }
  if (*((_QWORD *)&v62 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v62 + 1));
  if (v57)
  {
    operator delete(v56[0]);
    v59 = 0;
    v56[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v56[1] = 0;
    v56[2] = 0;
    v57 = 0;
  }
  if (v58)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v58);
  v31 = (char *)v69;
  if (v69)
  {
    v32 = v70;
    v33 = v69;
    if (v70 != v69)
    {
      do
      {
        v34 = (void *)*((_QWORD *)v32 - 3);
        if (v34)
        {
          *((_QWORD *)v32 - 2) = v34;
          operator delete(v34);
        }
        v35 = (void *)*((_QWORD *)v32 - 6);
        if (v35)
        {
          *((_QWORD *)v32 - 5) = v35;
          operator delete(v35);
        }
        v32 -= 64;
      }
      while (v32 != v31);
      v33 = v69;
    }
    v70 = v31;
    operator delete(v33);
  }
}

void sub_22DB24BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void **std::vector<operations_research::sat::LinearConstraint>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::~$_0(operations_research::sat::ImpliedBoundsProcessor *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    v4 = *((_QWORD *)this + 18);
    v5 = (void *)*((_QWORD *)this + 17);
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(_QWORD *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v3;
    operator delete(v5);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(this);
}

void operations_research::sat::IntegerRoundingCutHelper::ComputeCut(int **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  unint64_t v8;
  int **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  int *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  int *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  unint64_t v99;
  double *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  double *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double *v113;
  _OWORD *v114;
  double *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  _OWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  _OWORD *v153;
  unint64_t *v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  void **v158;
  _QWORD *v159;
  int64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  google::LogMessage *v164;
  _QWORD *v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  google::LogMessage *v169;
  _QWORD *v170;
  void *v171;
  int *v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  int64_t *v176;
  int64_t v177;
  int64_t v178;
  char *v179;
  char **v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  int *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  void **v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  int64_t v196;
  uint64_t v197;
  double v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  double v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  double v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int64_t v217;
  uint64_t v218;
  double v219;
  char v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  int v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  uint64_t (**v253)();
  uint64_t v254;
  __n128 v255;
  double v256;
  double v257;
  double v258;
  double v259;
  uint64_t v260;
  double v261;
  double v262;
  int *v263;
  int *v264;
  uint64_t v265;
  int v266;
  double v267;
  double v268;
  double v269;
  double v270;
  uint64_t v271;
  int *v272;
  uint64_t v273;
  double v274;
  double v275;
  double v276;
  double v277;
  unint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int **v284;
  int *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v306;
  void *v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t **v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  _BYTE *v330;
  uint64_t *v331;
  unint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _OWORD *v337;
  char *v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  int64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  _BYTE *v364;
  uint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  _OWORD *v370;
  uint64_t *v371;
  uint64_t v372;
  __int128 v373;
  uint64_t v374;
  _QWORD *v375;
  int64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int64_t v380;
  uint64_t *v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  int v385;
  int v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  unint64_t v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  int v410;
  int v411;
  unint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int **v421;
  unint64_t v422;
  char *v423;
  char *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  char *v429;
  uint64_t v430;
  unint64_t v431;
  char *v432;
  BOOL v433;
  char *v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  char *v440;
  char *v441;
  int *v442;
  uint64_t v443;
  int v444;
  char *v445;
  int *v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  char v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int *v464;
  int *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  int v481;
  int *v482;
  int *v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  int *v494;
  uint64_t v495;
  int v496;
  operations_research::sat::LinearConstraint *v497;
  operations_research::sat::LinearConstraint *v498;
  uint64_t **v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t (**v509)();
  _QWORD *v510;
  uint64_t v511;
  uint64_t *v512;
  unint64_t v513;
  int v514;
  uint64_t v515;
  int *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  _BYTE *v528;
  uint64_t *v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  _OWORD *v535;
  uint64_t *v536;
  uint64_t v537;
  __int128 v538;
  uint64_t v539;
  BOOL v540;
  uint64_t v541;
  unint64_t *v542;
  uint64_t v543;
  unint64_t *v544;
  unint64_t *v545;
  unint64_t *v546;
  unint64_t *v547;
  unint64_t *v548;
  unint64_t *v549;
  unint64_t *v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  int64_t v554;
  uint64_t v555;
  uint64_t v557;
  _QWORD *v558;
  _QWORD *v559;
  int64_t v562;
  _QWORD *v563;
  uint64_t *v564;
  uint64_t *v565;
  uint64_t *v566;
  uint64_t v567;
  void **v568;
  uint64_t v569;
  uint64_t **v570;
  uint64_t v571;
  uint64_t v573;
  uint64_t v574;
  void **v576;
  uint64_t v577;
  uint64_t v578;
  void **v579;
  uint64_t v580;
  void **v581;
  int64_t v582;
  void **v583;
  unint64_t v584;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  void **v589;
  uint64_t **v590;
  uint64_t *v591;
  uint64_t v593;
  _QWORD v594[3];
  _QWORD *v595;
  uint64_t *v596[2];
  uint64_t *v597[3];
  uint64_t **v598;
  unint64_t v599[3];
  unint64_t *v600;
  uint64_t v601;

  v601 = *MEMORY[0x24BDAC8D0];
  v7 = a3[1] - *a3;
  v8 = v7 >> 3;
  if (!(v7 >> 3))
    return;
  v9 = a1;
  v599[0] = (a4[1] - *a4) >> 3;
  LODWORD(v594[0]) = v7 >> 3;
  v582 = (int)((uint64_t)v7 >> 3);
  v551 = v7 >> 3;
  v552 = v7;
  if (v599[0] != v582)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v599, (int)v594, "lower_bounds.size() == size");
    v9 = a1;
    LODWORD(v8) = v551;
    v7 = v552;
    if (v597[0])
    {
      v544 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 699, v597);
      google::LogMessage::stream((google::LogMessage *)v544);
      goto LABEL_821;
    }
  }
  v599[0] = (a5[1] - *a5) >> 3;
  LODWORD(v594[0]) = v8;
  if (v599[0] != v582)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v599, (int)v594, "upper_bounds.size() == size");
    v9 = a1;
    LODWORD(v8) = v551;
    v7 = v552;
    if (v597[0])
    {
      v545 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 700, v597);
      google::LogMessage::stream((google::LogMessage *)v545);
      goto LABEL_821;
    }
  }
  v10 = a7;
  v558 = a7 + 2;
  v599[0] = (uint64_t)(a7[3] - a7[2]) >> 2;
  LODWORD(v594[0]) = v8;
  if (v599[0] != v582)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v599, (int)v594, "cut->vars.size() == size");
    v10 = a7;
    v9 = a1;
    LODWORD(v8) = v551;
    v7 = v552;
    if (v597[0])
    {
      v546 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 701, v597);
      google::LogMessage::stream((google::LogMessage *)v546);
      goto LABEL_821;
    }
  }
  v11 = v10 + 5;
  v599[0] = (uint64_t)(v10[6] - v10[5]) >> 3;
  LODWORD(v594[0]) = v8;
  v563 = v10 + 5;
  if (v599[0] != v582)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v599, (int)v594, "cut->coeffs.size() == size");
    v10 = a7;
    v11 = v563;
    v9 = a1;
    LODWORD(v8) = v551;
    v7 = v552;
    if (v597[0])
    {
      v547 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 702, v597);
      google::LogMessage::stream((google::LogMessage *)v547);
      goto LABEL_821;
    }
  }
  v12 = a4;
  if (*v10 != 0x8000000000000002)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)v10, (int)&operations_research::sat::kMinIntegerValue, "cut->lb == kMinIntegerValue");
    v11 = v563;
    v9 = a1;
    v12 = a4;
    LODWORD(v8) = v551;
    v7 = v552;
    if (v597[0])
    {
      v548 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 703, v597);
      google::LogMessage::stream((google::LogMessage *)v548);
      goto LABEL_821;
    }
  }
  v9[1] = *v9;
  v589 = (void **)(v9 + 3);
  v9[4] = v9[3];
  v568 = (void **)(v9 + 6);
  v13 = v9[9];
  v9[7] = v9[6];
  v9[10] = v13;
  v570 = (uint64_t **)(v9 + 12);
  v9[13] = v9[12];
  v576 = (void **)(v9 + 15);
  v579 = (void **)(v9 + 9);
  v9[16] = v9[15];
  v593 = 0;
  if ((int)v8 > 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = *v12;
    v17 = *a5;
    v18 = (v7 >> 3);
    do
    {
      if (*(_QWORD *)(v16 + v14) != *(_QWORD *)(v17 + v14))
      {
        v19 = *(_QWORD *)(*v11 + v14);
        if (v19 < 0)
          v19 = -v19;
        if (v15 <= v19)
          v15 = v19;
        v593 = v15;
      }
      v14 += 8;
    }
    while (8 * v18 != v14);
    v573 = v18;
    LOBYTE(v599[0]) = 0;
    v559 = v9 + 21;
    std::vector<BOOL>::assign((char **)v9 + 21, v582, v599);
    v20 = 0;
    v21 = 1;
    v22 = a3;
    v23 = v573;
    while (1)
    {
      v25 = *v563;
      v26 = *(_QWORD *)(*v563 + 8 * v20);
      if (!v26)
        goto LABEL_19;
      if (v26 >= 0)
        v27 = *(_QWORD *)(*v563 + 8 * v20);
      else
        v27 = -v26;
      v28 = *(_QWORD *)(*a4 + 8 * v20);
      v29 = *(double *)(*v22 + 8 * v20);
      v30 = *(_QWORD *)(*a5 + 8 * v20);
      if ((((v30 - v28) ^ v30) & (v30 ^ v28)) >= 0)
        v31 = v30 - v28;
      else
        v31 = ((unint64_t)v30 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      v32 = (double)v28;
      v33 = -INFINITY;
      if (v28 >= (uint64_t)0x8000000000000003)
        v34 = (double)v28;
      else
        v34 = -INFINITY;
      v35 = INFINITY;
      if (v28 > 0x7FFFFFFFFFFFFFFDLL)
        v34 = INFINITY;
      v36 = vabdd_f64(v29, v34);
      v37 = (double)v30;
      if (v30 < (uint64_t)0x8000000000000003)
        v37 = -INFINITY;
      if (v30 > 0x7FFFFFFFFFFFFFFDLL)
        v37 = INFINITY;
      v38 = vabdd_f64(v29, v37);
      if (v593 >= (uint64_t)0x8000000000000003)
        v33 = (double)v593 * 0.1;
      if (v593 > 0x7FFFFFFFFFFFFFFDLL)
        v33 = INFINITY;
      if (v27 <= 0x7FFFFFFFFFFFFFFDLL)
        v35 = (double)(uint64_t)v27;
      v39 = fmax(v33 / v35, 1.0);
      if (v26 < 0 && v36 * v39 > v38 || v26 >= 1 && v36 > v38 * v39)
      {
        *(_QWORD *)(*v559 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        v26 = -v26;
        *(_QWORD *)(v25 + 8 * v20) = v26;
        v29 = -v29;
        v28 = -v30;
        v32 = (double)-v30;
      }
      if (v28 >= 0)
        v40 = v28;
      else
        v40 = -v28;
      v41 = 63 - __clz(v40);
      if (v28)
        v42 = v41;
      else
        v42 = 0;
      if (v28 < (uint64_t)0x8000000000000003)
        v32 = -INFINITY;
      if (v28 > 0x7FFFFFFFFFFFFFFDLL)
        v32 = INFINITY;
      v43 = -v26;
      v44 = v42 - __clz(v27);
      v45 = __OFADD__(v44, 2);
      if (v44 > -2)
      {
        if (v28)
        {
          v48 = ((v28 ^ (unint64_t)v43) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v49 = v27 * v40;
          if (v48 >= 0)
            v50 = v49;
          else
            v50 = -(uint64_t)v49;
          if (v49 < v48)
            v51 = v50;
          else
            v51 = v48;
          if (v44 >= 0xFFFFFFC1)
            v46 = v51;
          else
            v46 = v48;
          v45 = __OFSUB__(v46 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if (v46 - 0x7FFFFFFFFFFFFFFFLL < 2)
            goto LABEL_185;
        }
        else
        {
          v46 = 0;
        }
      }
      else
      {
        v46 = v28 * v43;
        v47 = v28 * v43 - 0x7FFFFFFFFFFFFFFFLL;
        v45 = __OFSUB__(v47, 2);
        if (v47 < 2)
          goto LABEL_185;
      }
      v52 = a7[1];
      v53 = v52 + v46;
      v54 = (v52 + v46) ^ v46;
      v55 = (v52 + v46) ^ v52;
      v56 = (v46 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v54 & v55 & 0x8000000000000000) != 0) == v45)
        v56 = v53;
      if ((unint64_t)(v56 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_185;
      a7[1] = v56;
      if (v31)
      {
        v57 = v29 - v32;
        if (fabs(v29 - v32) <= 0.01)
          goto LABEL_19;
      }
      else
      {
        *(_QWORD *)(v25 + 8 * v20) = 0;
        v57 = 0.0;
        if (fabs(0.0) <= 0.01)
          goto LABEL_19;
      }
      v59 = (char *)a1[7];
      v58 = (unint64_t)a1[8];
      if ((unint64_t)v59 < v58)
      {
        *(_QWORD *)v59 = *(_QWORD *)(v25 + 8 * v20);
        v60 = (uint64_t)(v59 + 8);
        goto LABEL_101;
      }
      v61 = (char *)*v568;
      v62 = v59 - (_BYTE *)*v568;
      v63 = v62 >> 3;
      v64 = (v62 >> 3) + 1;
      if (v64 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v65 = v58 - (_QWORD)v61;
      if (v65 >> 2 > v64)
        v64 = v65 >> 2;
      v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v64;
      if (v66)
        break;
      v67 = 0;
      v68 = (int *)(8 * v63);
      *(_QWORD *)(8 * v63) = *(_QWORD *)(v25 + 8 * v20);
      v60 = 8 * v63 + 8;
      if (v59 != v61)
        goto LABEL_93;
LABEL_99:
      a1[6] = v68;
      a1[7] = (int *)v60;
      a1[8] = (int *)&v67[8 * v66];
      if (v61)
        operator delete(v61);
LABEL_101:
      v78 = a1;
      a1[7] = (int *)v60;
      v80 = (char *)a1[1];
      v79 = (unint64_t)a1[2];
      if ((unint64_t)v80 < v79)
      {
        *(_DWORD *)v80 = v20;
        v81 = (uint64_t)(v80 + 4);
        goto LABEL_122;
      }
      v82 = (char *)*a1;
      v83 = v80 - (char *)*a1;
      v84 = v83 >> 2;
      v85 = (v83 >> 2) + 1;
      if (v85 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v86 = v79 - (_QWORD)v82;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        if (v87 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v88 = operator new(4 * v87);
        v89 = (int *)&v88[4 * v84];
        *v89 = v20;
        v81 = (uint64_t)(v89 + 1);
        if (v80 == v82)
          goto LABEL_120;
LABEL_114:
        v90 = v80 - 4 - v82;
        if (v90 < 0x2C)
          goto LABEL_824;
        if ((unint64_t)(v80 - &v88[v83]) < 0x20)
          goto LABEL_824;
        v91 = (v90 >> 2) + 1;
        v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
        v93 = &v80[-v92];
        v89 = (int *)((char *)v89 - v92);
        v94 = &v88[4 * v84 - 16];
        v95 = v80 - 16;
        v96 = v91 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v97 = *(_OWORD *)v95;
          *(v94 - 1) = *((_OWORD *)v95 - 1);
          *v94 = v97;
          v94 -= 2;
          v95 -= 32;
          v96 -= 8;
        }
        while (v96);
        v80 = v93;
        if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_824:
          do
          {
            v98 = *((_DWORD *)v80 - 1);
            v80 -= 4;
            *--v89 = v98;
          }
          while (v80 != v82);
        }
        goto LABEL_120;
      }
      v88 = 0;
      v89 = (int *)(4 * v84);
      *(_DWORD *)(4 * v84) = v20;
      v81 = 4 * v84 + 4;
      if (v80 != v82)
        goto LABEL_114;
LABEL_120:
      v78 = a1;
      *a1 = v89;
      a1[1] = (int *)v81;
      a1[2] = (int *)&v88[4 * v87];
      if (v82)
        operator delete(v82);
LABEL_122:
      v78[1] = v81;
      v100 = (double *)v78[4];
      v99 = v78[5];
      if ((unint64_t)v100 < v99)
      {
        *v100 = v57;
        v101 = (uint64_t)(v100 + 1);
        goto LABEL_143;
      }
      v102 = (double *)*v589;
      v103 = (char *)v100 - (_BYTE *)*v589;
      v104 = v103 >> 3;
      v105 = (v103 >> 3) + 1;
      if (v105 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v106 = v99 - (_QWORD)v102;
      if (v106 >> 2 > v105)
        v105 = v106 >> 2;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
        v107 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v107 = v105;
      if (v107)
      {
        if (v107 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v108 = operator new(8 * v107);
        v109 = (double *)&v108[8 * v104];
        *v109 = v57;
        v101 = (uint64_t)(v109 + 1);
        if (v100 == v102)
          goto LABEL_141;
LABEL_135:
        v110 = (char *)(v100 - 1) - (char *)v102;
        if (v110 < 0x58)
          goto LABEL_825;
        if ((unint64_t)((char *)v100 - &v108[v103]) < 0x20)
          goto LABEL_825;
        v111 = (v110 >> 3) + 1;
        v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
        v113 = &v100[v112 / 0xFFFFFFFFFFFFFFF8];
        v109 = (double *)((char *)v109 - v112);
        v114 = &v108[8 * v104 - 16];
        v115 = v100 - 2;
        v116 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v117 = *(_OWORD *)v115;
          *(v114 - 1) = *((_OWORD *)v115 - 1);
          *v114 = v117;
          v114 -= 2;
          v115 -= 4;
          v116 -= 4;
        }
        while (v116);
        v100 = v113;
        if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_825:
          do
          {
            v118 = *((_QWORD *)v100-- - 1);
            *((_QWORD *)v109-- - 1) = v118;
          }
          while (v100 != v102);
        }
        goto LABEL_141;
      }
      v108 = 0;
      v109 = (double *)(8 * v104);
      *(double *)(8 * v104) = v57;
      v101 = 8 * v104 + 8;
      if (v100 != v102)
        goto LABEL_135;
LABEL_141:
      v78 = a1;
      a1[3] = (int *)v109;
      a1[4] = (int *)v101;
      a1[5] = (int *)&v108[8 * v107];
      if (v102)
        operator delete(v102);
LABEL_143:
      v78[4] = v101;
      v120 = (uint64_t *)v78[10];
      v119 = v78[11];
      if ((unint64_t)v120 < v119)
      {
        *v120 = v31;
        v121 = (uint64_t)(v120 + 1);
        goto LABEL_164;
      }
      v122 = (uint64_t *)*v579;
      v123 = (char *)v120 - (_BYTE *)*v579;
      v124 = v123 >> 3;
      v125 = (v123 >> 3) + 1;
      if (v125 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v126 = v119 - (_QWORD)v122;
      if (v126 >> 2 > v125)
        v125 = v126 >> 2;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
        v127 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v127 = v125;
      if (v127)
      {
        if (v127 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v128 = operator new(8 * v127);
        v129 = (uint64_t *)&v128[8 * v124];
        *v129 = v31;
        v121 = (uint64_t)(v129 + 1);
        if (v120 == v122)
          goto LABEL_162;
LABEL_156:
        v130 = (char *)(v120 - 1) - (char *)v122;
        if (v130 < 0x58)
          goto LABEL_826;
        if ((unint64_t)((char *)v120 - &v128[v123]) < 0x20)
          goto LABEL_826;
        v131 = (v130 >> 3) + 1;
        v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        v133 = &v120[v132 / 0xFFFFFFFFFFFFFFF8];
        v129 = (uint64_t *)((char *)v129 - v132);
        v134 = &v128[8 * v124 - 16];
        v135 = v120 - 2;
        v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v137 = *(_OWORD *)v135;
          *(v134 - 1) = *((_OWORD *)v135 - 1);
          *v134 = v137;
          v134 -= 2;
          v135 -= 4;
          v136 -= 4;
        }
        while (v136);
        v120 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_826:
          do
          {
            v138 = *--v120;
            *--v129 = v138;
          }
          while (v120 != v122);
        }
        goto LABEL_162;
      }
      v128 = 0;
      v129 = (uint64_t *)(8 * v124);
      *(_QWORD *)(8 * v124) = v31;
      v121 = 8 * v124 + 8;
      if (v120 != v122)
        goto LABEL_156;
LABEL_162:
      v78 = a1;
      a1[9] = (int *)v129;
      a1[10] = (int *)v121;
      a1[11] = (int *)&v128[8 * v127];
      if (v122)
        operator delete(v122);
LABEL_164:
      v78[10] = v121;
      v140 = (unint64_t *)v78[13];
      v139 = v78[14];
      if ((unint64_t)v140 >= v139)
      {
        v141 = *v570;
        v142 = (char *)v140 - (char *)*v570;
        v143 = v142 >> 3;
        v144 = (v142 >> 3) + 1;
        if (v144 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v145 = v139 - (_QWORD)v141;
        if (v145 >> 2 > v144)
          v144 = v145 >> 2;
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
          v146 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v146 = v144;
        if (v146)
        {
          if (v146 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v147 = operator new(8 * v146);
          v148 = (unint64_t *)&v147[8 * v143];
          *v148 = v27;
          v24 = (uint64_t)(v148 + 1);
          if (v140 == (unint64_t *)v141)
            goto LABEL_182;
LABEL_176:
          v149 = (char *)(v140 - 1) - (char *)v141;
          if (v149 < 0x58)
            goto LABEL_827;
          if ((unint64_t)((char *)v140 - &v147[v142]) < 0x20)
            goto LABEL_827;
          v150 = (v149 >> 3) + 1;
          v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          v152 = &v140[v151 / 0xFFFFFFFFFFFFFFF8];
          v148 = (unint64_t *)((char *)v148 - v151);
          v153 = &v147[8 * v143 - 16];
          v154 = v140 - 2;
          v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v156 = *(_OWORD *)v154;
            *(v153 - 1) = *((_OWORD *)v154 - 1);
            *v153 = v156;
            v153 -= 2;
            v154 -= 4;
            v155 -= 4;
          }
          while (v155);
          v140 = v152;
          if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_827:
            do
            {
              v157 = *--v140;
              *--v148 = v157;
            }
            while (v140 != (unint64_t *)v141);
          }
        }
        else
        {
          v147 = 0;
          v148 = (unint64_t *)(8 * v143);
          *(_QWORD *)(8 * v143) = v27;
          v24 = 8 * v143 + 8;
          if (v140 != (unint64_t *)v141)
            goto LABEL_176;
        }
LABEL_182:
        a1[12] = (int *)v148;
        a1[13] = (int *)v24;
        a1[14] = (int *)&v147[8 * v146];
        if (v141)
          operator delete(v141);
        goto LABEL_18;
      }
      *v140 = v27;
      v24 = (uint64_t)(v140 + 1);
LABEL_18:
      v22 = a3;
      v23 = v573;
      a1[13] = (int *)v24;
LABEL_19:
      v21 = (uint64_t)++v20 < v582;
      if (v20 == v23)
        goto LABEL_185;
    }
    if (v66 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v67 = operator new(8 * v66);
    v68 = (int *)&v67[8 * v63];
    *(_QWORD *)v68 = *(_QWORD *)(v25 + 8 * v20);
    v60 = (uint64_t)(v68 + 2);
    if (v59 == v61)
      goto LABEL_99;
LABEL_93:
    v69 = v59 - 8 - v61;
    if (v69 < 0x58)
      goto LABEL_828;
    if ((unint64_t)(v59 - &v67[v62]) < 0x20)
      goto LABEL_828;
    v70 = (v69 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v59[-v71];
    v68 = (int *)((char *)v68 - v71);
    v73 = &v67[8 * v63 - 16];
    v74 = v59 - 16;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 32;
      v75 -= 4;
    }
    while (v75);
    v59 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_828:
      do
      {
        v77 = *((_QWORD *)v59 - 1);
        v59 -= 8;
        *((_QWORD *)v68 - 1) = v77;
        v68 -= 2;
      }
      while (v59 != v61);
    }
    goto LABEL_99;
  }
  LOBYTE(v599[0]) = 0;
  v559 = v9 + 21;
  std::vector<BOOL>::assign((char **)v9 + 21, v582, v599);
  v21 = 0;
LABEL_185:
  v158 = (void **)v563;
  v159 = a7 + 2;
  if (a1[6] == a1[7])
  {
    v168 = a7;
    if (*_MergedGlobals_9[0] >= 2)
    {
      if (_MergedGlobals_9[0] != &google::kLogSiteUninitialized
        || (v168 = a7,
            v158 = (void **)v563,
            v159 = a7 + 2,
            google::InitVLOG3__((google *)_MergedGlobals_9, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        v169 = google::LogMessage::LogMessage((google::LogMessage *)v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 793);
        v170 = (_QWORD *)google::LogMessage::stream(v169);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"Issue, nothing to cut.", 22);
        google::LogMessage::~LogMessage((google::LogMessage *)v599);
        v168 = a7;
        v158 = (void **)v563;
        v159 = a7 + 2;
      }
    }
    *v168 = 0;
    v168[1] = 0;
    v171 = (void *)v168[2];
    if (v171)
    {
      v168[3] = v171;
      operator delete(v171);
      *v159 = 0;
      v159[1] = 0;
      v159[2] = 0;
    }
    *v159 = 0;
    v159[1] = 0;
    v159[2] = 0;
    v167 = *v158;
    if (!*v158)
      goto LABEL_210;
    v168[6] = v167;
    goto LABEL_209;
  }
  LODWORD(v599[0]) = 0;
  v160 = v593;
  v161 = a7;
  if (!v593)
  {
    v597[0] = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v593, (int)v599, "max_magnitude != 0");
    if (v597[0])
    {
      v550 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 797, v597);
      google::LogMessage::stream((google::LogMessage *)v550);
LABEL_821:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v599);
    }
    v160 = v593;
    v161 = a7;
    v158 = (void **)v563;
    v159 = a7 + 2;
  }
  v162 = v161[1];
  if (v162 < 0)
    v162 = -v162;
  if (v160 <= v162)
    v163 = v162;
  else
    v163 = v160;
  v593 = v163;
  if (v21 || v163 > 0x3FFFFFFFFFFFFFFELL)
  {
    if (*off_254079500[0] >= 2)
    {
      if (off_254079500[0] != &google::kLogSiteUninitialized
        || (v161 = a7,
            v158 = (void **)v563,
            v159 = a7 + 2,
            google::InitVLOG3__((google *)off_254079500, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        v164 = google::LogMessage::LogMessage((google::LogMessage *)v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 826);
        v165 = (_QWORD *)google::LogMessage::stream(v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"Issue, overflow.", 16);
        google::LogMessage::~LogMessage((google::LogMessage *)v599);
        v161 = a7;
        v158 = (void **)v563;
        v159 = a7 + 2;
      }
    }
    *v161 = 0;
    v161[1] = 0;
    v166 = (void *)v161[2];
    if (v166)
    {
      v161[3] = v166;
      operator delete(v166);
      *v159 = 0;
      v159[1] = 0;
      v159[2] = 0;
    }
    *v159 = 0;
    v159[1] = 0;
    v159[2] = 0;
    v167 = *v158;
    if (!*v158)
      goto LABEL_210;
    v161[6] = v167;
LABEL_209:
    operator delete(v167);
    *v158 = 0;
    v158[1] = 0;
    v158[2] = 0;
LABEL_210:
    *v158 = 0;
    v158[1] = 0;
    v158[2] = 0;
    return;
  }
  v172 = a1[12];
  v173 = ((char *)a1[13] - (char *)v172) >> 3;
  v174 = 0;
  if (a1[13] != v172)
  {
    if (v173 <= 1)
      v175 = 1;
    else
      v175 = ((char *)a1[13] - (char *)v172) >> 3;
    v176 = (int64_t *)a1[12];
    do
    {
      v178 = *v176++;
      v177 = v178;
      if (v178 > (uint64_t)(v163 / 0xA))
        *(_QWORD *)&v172[2 * v174++] = v177;
      --v175;
    }
    while (v175);
  }
  if (v174 <= v173)
  {
    if (v174 < v173)
      a1[13] = &v172[2 * v174];
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v570, v174 - v173);
  }
  v180 = (char **)(a1 + 13);
  v179 = (char *)a1[13];
  v181 = (uint64_t)a1[12];
  v182 = 126 - 2 * __clz((uint64_t)&v179[-v181] >> 3);
  if (v179 == (char *)v181)
    v183 = 0;
  else
    v183 = v182;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(v181, v179, (uint64_t)v599, v183, 1);
  v184 = a1[12];
  v185 = *v180;
  if (v184 == (int *)*v180)
  {
LABEL_235:
    v190 = a7;
    v191 = v579;
    goto LABEL_242;
  }
  v186 = (char *)(v184 + 2);
  do
  {
    if (v186 == v185)
      goto LABEL_235;
    v188 = *((_QWORD *)v186 - 1);
    v187 = *(_QWORD *)v186;
    v186 += 8;
  }
  while (v188 != v187);
  v189 = v186 - 16;
  if (v186 == v185)
  {
    v190 = a7;
    v191 = v579;
  }
  else
  {
    v190 = a7;
    v191 = v579;
    do
    {
      v192 = v187;
      v187 = *(_QWORD *)v186;
      if (v192 != *(_QWORD *)v186)
      {
        *((_QWORD *)v189 + 1) = v187;
        v189 += 8;
      }
      v186 += 8;
    }
    while (v186 != v185);
  }
  v195 = (uint64_t *)(v189 + 8);
  v196 = v185 - (v189 + 8);
  if (v185 == v189 + 8)
  {
LABEL_242:
    v193 = (uint64_t *)a1[13];
    v194 = *v570;
    if (*v570 == v193)
    {
LABEL_416:
      *v190 = 0;
      v190[1] = 0;
      v307 = (void *)v190[2];
      if (v307)
      {
        v190[3] = v307;
        operator delete(v307);
        *v558 = 0;
        a7[3] = 0;
        a7[4] = 0;
      }
      *v558 = 0;
      a7[3] = 0;
      a7[4] = 0;
      v308 = (void *)*v563;
      if (*v563)
      {
        v190[6] = v308;
        operator delete(v308);
        *v563 = 0;
        v563[1] = 0;
        v563[2] = 0;
      }
      *v563 = 0;
      v563[1] = 0;
      v563[2] = 0;
      return;
    }
    goto LABEL_243;
  }
  if (v185 != (char *)v195 + v196)
    memmove(v189 + 8, (char *)v195 + v196, 0);
  v193 = v195;
  a1[13] = (int *)v195;
  v194 = *v570;
  if (*v570 == v195)
    goto LABEL_416;
LABEL_243:
  v574 = 0;
  v197 = v160 / 1000;
  v198 = 0.01;
  v554 = 0x3FFFFFFFFFFFFFFFLL / v163;
  v199 = a1;
  v564 = v193;
  v569 = v197;
  do
  {
    v200 = *v194;
    v201 = v190[1];
    v202 = v201 / *v194;
    v203 = v202 * *v194;
    v204 = v201 - (v202 - (v203 > v201)) * *v194;
    if (v204 <= v197)
      goto LABEL_246;
    v586 = v190[1];
    v205 = (char *)v199[15];
    v199[16] = v205;
    v206 = (v200 + ~v204) / v582;
    if (v206 < 1)
      goto LABEL_308;
    v207 = (double)v204;
    if (v204 < (uint64_t)0x8000000000000003)
      v207 = -INFINITY;
    v208 = v204 <= 0x7FFFFFFFFFFFFFFDLL ? v207 : INFINITY;
    v210 = v199[6];
    v209 = v199[7];
    if (v209 == v210)
    {
LABEL_308:
      v240 = (uint64_t *)v586;
      v241 = (v202 - (v203 > v586)) * v200;
      v242 = v586 - v241;
      if (v586 == v241)
        goto LABEL_245;
    }
    else
    {
      v566 = v194;
      v211 = 0;
      v212 = 0.0;
      do
      {
        v214 = *(_QWORD *)(v210 + 8 * v211);
        v215 = v214 / v200;
        if (v214 / v200 * v200 < v214)
          ++v215;
        v216 = v215 * v200;
        v217 = v215 * v200 - v214;
        v218 = v200 - v217;
        if (v200 - v217 <= v204)
        {
          v219 = (double)v218;
          if (v218 < (uint64_t)0x8000000000000003)
            v219 = -INFINITY;
          if (v218 > 0x7FFFFFFFFFFFFFFDLL)
            v219 = INFINITY;
          v212 = v212 + v219 * *((double *)*v589 + v211);
          if (v212 >= v208)
          {
            v190 = a7;
            v193 = v564;
            v194 = v566;
            goto LABEL_245;
          }
        }
        v220 = v217 >= 1 && v217 <= v206;
        if (v220)
        {
          v221 = *((_QWORD *)*v191 + v211);
          if (v221 >= 0)
            v222 = *((_QWORD *)*v191 + v211);
          else
            v222 = -v221;
          v223 = 63 - __clz(v222);
          if (!v221)
            v223 = 0;
          v224 = v223 + (__clz(v217) ^ 0x3F);
          if (v224 > 61)
          {
            if (v221)
            {
              v225 = ((v221 ^ (unint64_t)v217) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v226 = v222 * v217;
              if (v224 <= 0x3E && v226 < v225)
              {
                if (v225 >= 0)
                  v225 = v226;
                else
                  v225 = -(uint64_t)v226;
              }
            }
            else
            {
              v225 = 0;
            }
          }
          else
          {
            v225 = v221 * v217;
          }
          if (v206 >= v225)
          {
            v228 = v199[17];
            if ((unint64_t)v205 < v228)
            {
              *(_DWORD *)v205 = v211;
              *(_QWORD *)(v205 + 4) = v216;
              v213 = v205 + 12;
            }
            else
            {
              v229 = (char *)*v576;
              v230 = 0xAAAAAAAAAAAAAAABLL * ((v205 - (_BYTE *)*v576) >> 2);
              v231 = v230 + 1;
              if (v230 + 1 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228 - (_QWORD)v229) >> 2);
              if (2 * v232 > v231)
                v231 = 2 * v232;
              if (v232 >= 0xAAAAAAAAAAAAAAALL)
                v233 = 0x1555555555555555;
              else
                v233 = v231;
              if (v233)
              {
                if (v233 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v234 = (char *)operator new(12 * v233);
              }
              else
              {
                v234 = 0;
              }
              v235 = &v234[12 * v230];
              *(_DWORD *)v235 = v211;
              *(_QWORD *)(v235 + 4) = v216;
              v236 = v235;
              if (v205 == v229)
              {
                v199 = a1;
              }
              else
              {
                v199 = a1;
                do
                {
                  v237 = *(_QWORD *)(v205 - 12);
                  v205 -= 12;
                  v238 = *((_DWORD *)v205 + 2);
                  *(_QWORD *)(v236 - 12) = v237;
                  v236 -= 12;
                  *((_DWORD *)v236 + 2) = v238;
                }
                while (v205 != v229);
                v205 = (char *)*v576;
              }
              v239 = &v234[12 * v233];
              v213 = v235 + 12;
              v199[15] = v236;
              v199[16] = v235 + 12;
              v199[17] = v239;
              v191 = v579;
              if (v205)
                operator delete(v205);
              v206 = (v200 + ~v204) / v582;
            }
            v586 += v221 * v217;
            v199[16] = v213;
            v205 = v213;
            v210 = v199[6];
            v209 = v199[7];
          }
        }
        ++v211;
      }
      while (v211 < (v209 - v210) >> 3);
      v240 = (uint64_t *)v586;
      v190 = a7;
      v193 = v564;
      v194 = v566;
      v243 = (v586 / v200 - (v586 / v200 * v200 > v586)) * v200;
      v242 = v586 - v243;
      if (v586 == v243)
      {
LABEL_245:
        v197 = v569;
        goto LABEL_246;
      }
    }
    v244 = v240;
    if (v200 >= 0)
      v245 = v200;
    else
      v245 = v200 + 1;
    v246 = v245 >> 1;
    if (v246 / v242 * v242 >= v246)
      v247 = v246 / v242;
    else
      v247 = v246 / v242 + 1;
    if (v247 >= v554)
      v248 = v554;
    else
      v248 = v247;
    if (0x7FFFFFFFFFFFFFFFLL / v200 >= a2)
      v249 = a2;
    else
      v249 = 0x7FFFFFFFFFFFFFFFLL / v200;
    if (v249 == 1 || (v250 = v248 * v242, v251 = v200 - v248 * v242, v251 == 1))
    {
      v253 = &off_24F985650;
      v599[0] = (unint64_t)&off_24F985650;
      v599[1] = v248;
      v252 = v599;
      v599[2] = v200;
    }
    else
    {
      if (v251 <= v249)
      {
        v252 = (unint64_t *)operator new(0x28uLL);
        v253 = &off_24F9856E0;
        *v252 = (unint64_t)&off_24F9856E0;
        v252[1] = v251;
        v252[2] = v250;
        v252[3] = v248;
        v252[4] = v200;
      }
      else if ((uint64_t)(v250 * v249) >= v200)
      {
        v252 = (unint64_t *)operator new(0x30uLL);
        v253 = &off_24F9857E0;
        *v252 = (unint64_t)&off_24F9857E0;
        v252[1] = v251;
        v252[2] = v250;
        v252[3] = v248;
        v252[4] = v200;
        v252[5] = v249;
      }
      else
      {
        v252 = (unint64_t *)operator new(0x20uLL);
        v253 = &off_24F985760;
        *v252 = (unint64_t)&off_24F985760;
        v252[1] = v248;
        v252[2] = v200;
        v252[3] = v249;
      }
      v193 = v564;
    }
    v600 = v252;
    v597[0] = (uint64_t *)v200;
    v254 = ((uint64_t (*)(uint64_t, _QWORD *))v253[6])((uint64_t)v252, v597);
    v199 = a1;
    v255.n128_f64[0] = (double)v254;
    if (v254 < (uint64_t)0x8000000000000003)
      v255.n128_f64[0] = -INFINITY;
    if (v254 <= 0x7FFFFFFFFFFFFFFDLL)
      v256 = v255.n128_f64[0];
    else
      v256 = INFINITY;
    v257 = (double)v200;
    if (v200 < (uint64_t)0x8000000000000003)
      v257 = -INFINITY;
    if (v200 <= 0x7FFFFFFFFFFFFFFDLL)
      v258 = v257;
    else
      v258 = INFINITY;
    v255.n128_f64[0] = (double)v242;
    if (v242 < (uint64_t)0x8000000000000003)
      v255.n128_f64[0] = -INFINITY;
    if (v242 <= 0x7FFFFFFFFFFFFFFDLL)
      v259 = v255.n128_f64[0];
    else
      v259 = INFINITY;
    v597[0] = v244;
    if (!v600)
      std::__throw_bad_function_call[abi:ne180100]();
    v260 = (*(uint64_t (**)(unint64_t *, uint64_t **, __n128))(*v600 + 48))(v600, v597, v255);
    v190 = a7;
    v191 = v579;
    v261 = (double)v260;
    if (v260 < (uint64_t)0x8000000000000003)
      v261 = -INFINITY;
    if (v260 > 0x7FFFFFFFFFFFFFFDLL)
      v261 = INFINITY;
    v262 = -v261;
    v264 = a1[6];
    v263 = a1[7];
    if (v263 != v264)
    {
      v265 = 0;
      v266 = 0;
      v267 = v256 / v258;
      v268 = v259 * v267;
      v269 = 0.0;
      v270 = 0.0;
      while (1)
      {
        v271 = *(_QWORD *)&v264[2 * v265];
        v272 = a1[15];
        if (0xAAAAAAAAAAAAAAABLL * (a1[16] - v272) > v266 && v265 == v272[3 * v266])
          v271 = *(_QWORD *)&v272[3 * v266++ + 1];
        if (v271)
        {
          v597[0] = (uint64_t *)v271;
          if (!v600)
            std::__throw_bad_function_call[abi:ne180100]();
          v273 = (*(uint64_t (**)(unint64_t *, uint64_t **))(*v600 + 48))(v600, v597);
          v274 = (double)v273;
          v275 = -INFINITY;
          if (v273 < (uint64_t)0x8000000000000003)
            v274 = -INFINITY;
          if (v273 > 0x7FFFFFFFFFFFFFFDLL)
            v274 = INFINITY;
          v276 = *((double *)*v589 + v265);
          if (v271 >= (uint64_t)0x8000000000000003)
            v275 = (double)v271;
          if (v271 > 0x7FFFFFFFFFFFFFFDLL)
            v275 = INFINITY;
          v269 = v269 + -(v274 - v267 * v275) * v276;
          if (v269 >= v268)
            goto LABEL_374;
          v262 = v262 + v274 * v276;
          v270 = v270 + v274 * v274;
          v264 = a1[6];
          v263 = a1[7];
        }
        if (++v265 >= (unint64_t)(((char *)v263 - (char *)v264) >> 3))
          goto LABEL_372;
      }
    }
    v270 = 0.0;
LABEL_372:
    v277 = v262 / sqrt(v270);
    if (v277 > v198)
    {
      v574 = v200;
      v198 = v277;
    }
LABEL_374:
    v278 = v600;
    v197 = v569;
    if (v600 == v599)
    {
      v278 = v599;
      v279 = 4;
    }
    else
    {
      if (!v600)
        goto LABEL_246;
      v279 = 5;
    }
    (*(void (**)(void))(*v278 + 8 * v279))();
LABEL_246:
    ++v194;
  }
  while (v194 != v193);
  if (!v574)
    goto LABEL_416;
  v280 = v190[1];
  v281 = v280 / v574;
  v282 = v280 / v574 * v574;
  v283 = (v574 + ~v280 + (v280 / v574 - (v282 > v280)) * v574) / v582;
  if (v283 >= 1)
  {
    v284 = a1;
    v285 = *a1;
    v286 = (char *)a1[1] - (char *)*a1;
    if (!v286)
      goto LABEL_423;
    v287 = v286 >> 2;
    v288 = (uint64_t *)*v191;
    if ((unint64_t)(v286 >> 2) <= 1)
      v287 = 1;
    while (1)
    {
      v290 = *v288++;
      v289 = v290;
      if (v290 <= v283)
      {
        v291 = *v285;
        v292 = *v563;
        v293 = *(_QWORD *)(*v563 + 8 * v291);
        v294 = v293 / v574;
        if (v293 / v574 * v574 < v293)
          ++v294;
        v295 = v294 * v574;
        v296 = v294 * v574 - v293;
        if (v296 >= 0)
          v297 = v296;
        else
          v297 = -v296;
        v298 = 63 - __clz(v297);
        v299 = v295 - v293;
        if (v295 == v293)
          v298 = 0;
        if (v289 >= 0)
          v300 = v289;
        else
          v300 = -v289;
        v301 = 63 - __clz(v300);
        if (!v289)
          v301 = 0;
        v302 = v298 + v301;
        if (v302 > 61)
        {
          v303 = 0;
          if (v289 && v295 != v293)
          {
            v303 = ((v299 ^ (unint64_t)v289) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            v304 = v297 * v300;
            if (v302 <= 0x3E && v304 < v303)
            {
              if (v303 >= 0)
                v306 = v304;
              else
                v306 = -(uint64_t)v304;
              if (v283 < v306)
                goto LABEL_385;
LABEL_410:
              v190[1] += v299 * v289;
              *(_QWORD *)(v292 + 8 * v291) += v299;
              goto LABEL_385;
            }
          }
          if (v283 >= v303)
            goto LABEL_410;
        }
        else if (v283 >= v299 * v289)
        {
          goto LABEL_410;
        }
      }
LABEL_385:
      ++v285;
      if (!--v287)
      {
        v280 = v190[1];
        v281 = v280 / v574;
        v282 = v280 / v574 * v574;
        goto LABEL_423;
      }
    }
  }
  v284 = a1;
LABEL_423:
  v309 = (v281 - (v282 > v280)) * v574;
  v562 = v554;
  v580 = v280;
  v557 = v280 - v309;
  if (v280 != v309)
  {
    if (v574 >= 0)
      v310 = v574;
    else
      v310 = v574 + 1;
    v311 = v310 >> 1;
    if (v311 / v557 * v557 >= v311)
      v312 = v311 / v557;
    else
      v312 = v311 / v557 + 1;
    if (v312 >= v554)
      v312 = v554;
    v562 = v312;
  }
  if (0x7FFFFFFFFFFFFFFFLL / v574 >= a2)
    v313 = a2;
  else
    v313 = 0x7FFFFFFFFFFFFFFFLL / v574;
  if (v313 == 1 || (v314 = v562 * v557, v315 = v574 - v562 * v557, v315 == 1))
  {
    v597[0] = (uint64_t *)&off_24F985650;
    v597[1] = (uint64_t *)v562;
    v597[2] = (uint64_t *)v574;
    v598 = v597;
  }
  else
  {
    if (v315 <= v313)
    {
      v317 = (uint64_t **)operator new(0x28uLL);
      *v317 = (uint64_t *)&off_24F9856E0;
      v317[1] = (uint64_t *)v315;
      v317[2] = (uint64_t *)v314;
      v317[3] = (uint64_t *)v562;
      v317[4] = (uint64_t *)v574;
      v598 = v317;
    }
    else
    {
      if (v313 * v314 >= v574)
      {
        v316 = (uint64_t **)operator new(0x30uLL);
        *v316 = (uint64_t *)&off_24F9857E0;
        v316[1] = (uint64_t *)v315;
        v316[2] = (uint64_t *)v314;
        v316[3] = (uint64_t *)v562;
        v316[4] = (uint64_t *)v574;
        v316[5] = (uint64_t *)v313;
      }
      else
      {
        v316 = (uint64_t **)operator new(0x20uLL);
        *v316 = (uint64_t *)&off_24F985760;
        v316[1] = (uint64_t *)v562;
        v316[2] = (uint64_t *)v574;
        v316[3] = (uint64_t *)v313;
      }
      v598 = v316;
    }
    v284 = a1;
  }
  v577 = v309;
  v318 = (char *)v284[18];
  v583 = (void **)(v284 + 18);
  v284[19] = (int *)v318;
  v319 = (v552 >> 3);
  v553 = v319;
  if ((int)v551 >= 1)
  {
    v320 = 0;
    while (2)
    {
      v322 = *(_QWORD *)(*v563 + 8 * v320)
           - (*(_QWORD *)(*v563 + 8 * v320) / v574
            - (*(_QWORD *)(*v563 + 8 * v320) / v574 * v574 > *(_QWORD *)(*v563 + 8 * v320)))
           * v574;
      if (v322 <= v557)
        goto LABEL_450;
      v323 = (unint64_t)a1[20];
      if ((unint64_t)v318 < v323)
      {
        *(_QWORD *)v318 = v322;
        v321 = (uint64_t)(v318 + 8);
        goto LABEL_449;
      }
      v324 = (char *)*v583;
      v325 = v318 - (_BYTE *)*v583;
      v326 = v325 >> 3;
      v327 = (v325 >> 3) + 1;
      if (v327 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v328 = v323 - (_QWORD)v324;
      if (v328 >> 2 > v327)
        v327 = v328 >> 2;
      if ((unint64_t)v328 >= 0x7FFFFFFFFFFFFFF8)
        v329 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v329 = v327;
      if (v329)
      {
        if (v329 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v330 = operator new(8 * v329);
        v331 = (uint64_t *)&v330[8 * v326];
        *v331 = v322;
        v321 = (uint64_t)(v331 + 1);
        if (v318 != v324)
        {
LABEL_462:
          v332 = v318 - 8 - v324;
          if (v332 < 0x168
            || &v330[v325 - 8 - (v332 & 0xFFFFFFFFFFFFFFF8)] > &v330[v325 - 8]
            || &v318[-(v332 & 0xFFFFFFFFFFFFFFF8) - 8] > v318 - 8
            || (unint64_t)(v318 - v330 - v325) < 0x20)
          {
            v333 = v318;
            v319 = v553;
          }
          else
          {
            v335 = (v332 >> 3) + 1;
            v336 = 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
            v333 = &v318[-v336];
            v331 = (uint64_t *)((char *)v331 - v336);
            v337 = &v330[8 * v326 - 16];
            v338 = v318 - 16;
            v339 = v335 & 0x3FFFFFFFFFFFFFFCLL;
            v319 = v553;
            do
            {
              v340 = *(_OWORD *)v338;
              *(v337 - 1) = *((_OWORD *)v338 - 1);
              *v337 = v340;
              v337 -= 2;
              v338 -= 32;
              v339 -= 4;
            }
            while (v339);
            if (v335 == (v335 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_465:
              a1[18] = (int *)v331;
              a1[19] = (int *)v321;
              a1[20] = (int *)&v330[8 * v329];
              if (!v324)
              {
LABEL_449:
                a1[19] = (int *)v321;
                v318 = (char *)v321;
LABEL_450:
                if (++v320 == v319)
                {
                  v341 = (uint64_t)*v583;
                  v284 = a1;
                  goto LABEL_479;
                }
                continue;
              }
LABEL_469:
              operator delete(v324);
              goto LABEL_449;
            }
          }
          do
          {
            v334 = *((_QWORD *)v333 - 1);
            v333 -= 8;
            *--v331 = v334;
          }
          while (v333 != v324);
          goto LABEL_465;
        }
      }
      else
      {
        v330 = 0;
        v331 = (uint64_t *)(8 * v326);
        *(_QWORD *)(8 * v326) = v322;
        v321 = 8 * v326 + 8;
        if (v318 != v324)
          goto LABEL_462;
      }
      break;
    }
    v319 = v553;
    a1[18] = (int *)v331;
    a1[19] = (int *)v321;
    a1[20] = (int *)&v330[8 * v329];
    if (!v324)
      goto LABEL_449;
    goto LABEL_469;
  }
  v341 = (uint64_t)v318;
LABEL_479:
  v342 = 126 - 2 * __clz((uint64_t)&v318[-v341] >> 3);
  if (v318 == (char *)v341)
    v343 = 0;
  else
    v343 = v342;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v341, v318, (uint64_t)v599, v343, 1);
  v345 = (unint64_t *)v284[18];
  v344 = (unint64_t *)v284[19];
  if (v345 != v344)
  {
    v346 = v345 + 1;
    while (v346 != v344)
    {
      v347 = *(v346 - 1);
      v348 = *v346++;
      if (v347 == v348)
      {
        v349 = v346 - 2;
        while (v346 != v344)
        {
          v350 = v347;
          v347 = *v346;
          if (v350 != *v346)
          {
            v349[1] = v347;
            ++v349;
          }
          ++v346;
        }
        v351 = v349 + 1;
        v352 = (char *)v344 - (char *)(v349 + 1);
        if (v344 != v349 + 1)
        {
          if (v344 != (unint64_t *)((char *)v351 + v352))
            memmove(v349 + 1, (char *)v351 + v352, 0);
          v344 = v351;
          v284[19] = (int *)v351;
          v345 = (unint64_t *)v284[18];
        }
        break;
      }
    }
  }
  if ((unint64_t)((char *)v344 - (char *)v345) > 0x327)
  {
    v375 = a7;
    goto LABEL_537;
  }
  v590 = (uint64_t **)(v284 + 27);
  for (v284[28] = v284[27]; v345 != v344; ++v345)
  {
    v599[0] = *v345;
    if (!v598)
      std::__throw_bad_function_call[abi:ne180100]();
    v354 = ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599);
    v355 = v354;
    v357 = (uint64_t *)a1[28];
    v356 = (unint64_t)a1[29];
    if ((unint64_t)v357 < v356)
    {
      *v357 = v354;
      v353 = (uint64_t)(v357 + 1);
      v284 = a1;
    }
    else
    {
      v358 = *v590;
      v359 = (char *)v357 - (char *)*v590;
      v360 = v359 >> 3;
      v361 = (v359 >> 3) + 1;
      if (v361 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v362 = v356 - (_QWORD)v358;
      if (v362 >> 2 > v361)
        v361 = v362 >> 2;
      if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
        v363 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v363 = v361;
      if (v363)
      {
        if (v363 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v364 = operator new(8 * v363);
        v365 = (uint64_t *)&v364[8 * v360];
        *v365 = v355;
        v353 = (uint64_t)(v365 + 1);
        if (v357 != v358)
        {
LABEL_512:
          v366 = (char *)(v357 - 1) - (char *)v358;
          v284 = a1;
          if (v366 < 0x58)
            goto LABEL_829;
          if ((unint64_t)((char *)v357 - &v364[v359]) < 0x20)
            goto LABEL_829;
          v367 = (v366 >> 3) + 1;
          v368 = 8 * (v367 & 0x3FFFFFFFFFFFFFFCLL);
          v369 = &v357[v368 / 0xFFFFFFFFFFFFFFF8];
          v365 = (uint64_t *)((char *)v365 - v368);
          v370 = &v364[8 * v360 - 16];
          v371 = v357 - 2;
          v372 = v367 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v373 = *(_OWORD *)v371;
            *(v370 - 1) = *((_OWORD *)v371 - 1);
            *v370 = v373;
            v370 -= 2;
            v371 -= 4;
            v372 -= 4;
          }
          while (v372);
          v357 = v369;
          if (v367 != (v367 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_829:
            do
            {
              v374 = *--v357;
              *--v365 = v374;
            }
            while (v357 != v358);
          }
          a1[27] = (int *)v365;
          a1[28] = (int *)v353;
          a1[29] = (int *)&v364[8 * v363];
          if (!v358)
            goto LABEL_500;
LABEL_522:
          operator delete(v358);
          goto LABEL_500;
        }
      }
      else
      {
        v364 = 0;
        v365 = (uint64_t *)(8 * v360);
        *(_QWORD *)(8 * v360) = v355;
        v353 = 8 * v360 + 8;
        if (v357 != v358)
          goto LABEL_512;
      }
      v284 = a1;
      a1[27] = (int *)v365;
      a1[28] = (int *)v353;
      a1[29] = (int *)&v364[8 * v363];
      if (v358)
        goto LABEL_522;
    }
LABEL_500:
    v284[28] = (int *)v353;
  }
  v376 = v574;
  v599[0] = v574;
  if (!v598)
    std::__throw_bad_function_call[abi:ne180100]();
  v587 = ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599);
  v375 = a7;
  v596[0] = (uint64_t *)1;
  if (v580 != v577)
  {
    if (v574 >= 0)
      v377 = v574;
    else
      v377 = v574 + 1;
    v378 = v377 >> 1;
    if (v378 / v557 * v557 >= v378)
      v379 = v378 / v557;
    else
      v379 = v378 / v557 + 1;
    v380 = v554;
    if (v379 < v554)
      v380 = v379;
    v554 = v380;
  }
  v596[1] = (uint64_t *)v554;
  if (a2 >= 2)
  {
    v581 = (void **)(v284 + 24);
    v501 = 0;
    do
    {
      v555 = v501;
      v502 = v596[v501];
      v565 = v502;
      v567 = (_QWORD)v502 * v557;
      v503 = v376 - (_QWORD)v502 * v557;
      v504 = 2;
      v571 = v503;
      do
      {
        if (0x7FFFFFFFFFFFFFFFLL / v574 >= v504)
          v507 = v504;
        else
          v507 = 0x7FFFFFFFFFFFFFFFLL / v574;
        if (v507 == 1 || v503 == 1)
        {
          v509 = &off_24F985650;
          v594[0] = &off_24F985650;
          v594[1] = v502;
          v510 = v594;
          v594[2] = v376;
        }
        else if (v503 <= v507)
        {
          v510 = operator new(0x28uLL);
          v509 = &off_24F9856E0;
          *v510 = &off_24F9856E0;
          v510[1] = v503;
          v510[2] = v567;
          v510[3] = v502;
          v510[4] = v376;
        }
        else if (v507 * v567 >= v376)
        {
          v510 = operator new(0x30uLL);
          v509 = &off_24F9857E0;
          *v510 = &off_24F9857E0;
          v510[1] = v503;
          v510[2] = v567;
          v510[3] = v502;
          v510[4] = v376;
          v510[5] = v507;
        }
        else
        {
          v510 = operator new(0x20uLL);
          v509 = &off_24F985760;
          *v510 = &off_24F985760;
          v510[1] = v502;
          v510[2] = v376;
          v510[3] = v507;
        }
        v595 = v510;
        v284[25] = v284[24];
        v599[0] = v376;
        v511 = ((uint64_t (*)(uint64_t, _QWORD *))v509[6])((uint64_t)v510, v599);
        v578 = v504;
        v512 = (uint64_t *)v284[28];
        if (v512 == (uint64_t *)v284[27])
        {
          v514 = 0;
          v516 = v284[28];
          goto LABEL_755;
        }
        v513 = 0;
        v514 = 0;
        while (1)
        {
          v599[0] = *((_QWORD *)*v583 + v513);
          if (!v595)
            std::__throw_bad_function_call[abi:ne180100]();
          v517 = (*(uint64_t (**)(_QWORD *, unint64_t *))(*v595 + 48))(v595, v599);
          v518 = v517;
          v512 = *v590;
          v519 = (*v590)[v513] * v511;
          if (v517 * v587 < v519)
            break;
          if (v517 * v587 > v519)
            ++v514;
          v284 = a1;
          v521 = (uint64_t *)a1[25];
          v520 = (unint64_t)a1[26];
          if ((unint64_t)v521 >= v520)
          {
            v522 = (uint64_t *)*v581;
            v523 = (char *)v521 - (_BYTE *)*v581;
            v524 = v523 >> 3;
            v525 = (v523 >> 3) + 1;
            if (v525 >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v526 = v520 - (_QWORD)v522;
            if (v526 >> 2 > v525)
              v525 = v526 >> 2;
            if ((unint64_t)v526 >= 0x7FFFFFFFFFFFFFF8)
              v527 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v527 = v525;
            if (v527)
            {
              if (v527 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v528 = operator new(8 * v527);
              v529 = (uint64_t *)&v528[8 * v524];
              *v529 = v518;
              v515 = (uint64_t)(v529 + 1);
              if (v521 != v522)
              {
LABEL_741:
                v530 = (char *)(v521 - 1) - (char *)v522;
                if (v530 < 0x58)
                {
                  v284 = a1;
                  goto LABEL_749;
                }
                v531 = (char *)v521 - &v528[v523];
                v284 = a1;
                if (v531 < 0x20)
                  goto LABEL_830;
                v532 = (v530 >> 3) + 1;
                v533 = 8 * (v532 & 0x3FFFFFFFFFFFFFFCLL);
                v534 = &v521[v533 / 0xFFFFFFFFFFFFFFF8];
                v529 = (uint64_t *)((char *)v529 - v533);
                v535 = &v528[8 * v524 - 16];
                v536 = v521 - 2;
                v537 = v532 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v538 = *(_OWORD *)v536;
                  *(v535 - 1) = *((_OWORD *)v536 - 1);
                  *v535 = v538;
                  v535 -= 2;
                  v536 -= 4;
                  v537 -= 4;
                }
                while (v537);
                v521 = v534;
                if (v532 != (v532 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_830:
                  do
                  {
LABEL_749:
                    v539 = *--v521;
                    *--v529 = v539;
                  }
                  while (v521 != v522);
                }
LABEL_750:
                v284[24] = (int *)v529;
                v284[25] = (int *)v515;
                v284[26] = (int *)&v528[8 * v527];
                if (v522)
                  operator delete(v522);
                goto LABEL_726;
              }
            }
            else
            {
              v528 = 0;
              v529 = (uint64_t *)(8 * v524);
              *(_QWORD *)(8 * v524) = v518;
              v515 = 8 * v524 + 8;
              if (v521 != v522)
                goto LABEL_741;
            }
            v284 = a1;
            goto LABEL_750;
          }
          *v521 = v517;
          v515 = (uint64_t)(v521 + 1);
LABEL_726:
          v284[25] = (int *)v515;
          ++v513;
          v512 = (uint64_t *)v284[27];
          v516 = v284[28];
          if (v513 >= ((char *)v516 - (char *)v512) >> 3)
            goto LABEL_754;
        }
        v284 = a1;
        v516 = a1[28];
LABEL_754:
        v502 = v565;
LABEL_755:
        v540 = (char *)v284[25] - (char *)v284[24] != (char *)v516 - (char *)v512 || v514 < 1;
        v376 = v574;
        v375 = a7;
        v503 = v571;
        if (!v540)
        {
          v541 = (uint64_t)v595;
          if (!v595)
            goto LABEL_762;
          if (v595 == v594)
          {
            v600 = v599;
            (*(void (**)(_QWORD *, unint64_t *))(v594[0] + 24))(v594, v599);
          }
          else
          {
            v541 = (*(uint64_t (**)(void))(*v595 + 16))();
LABEL_762:
            v600 = (unint64_t *)v541;
          }
          std::__function::__value_func<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::swap[abi:ne180100](v599, v597);
          v542 = v600;
          if (v600 == v599)
          {
            v542 = v599;
            v543 = 4;
LABEL_768:
            (*(void (**)(void))(*v542 + 8 * v543))();
          }
          else if (v600)
          {
            v543 = 5;
            goto LABEL_768;
          }
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v590, (char *)v284[24], (char *)v284[25], ((char *)v284[25] - (char *)v284[24]) >> 3);
          v562 = (int64_t)v502;
          v587 = v511;
        }
        v505 = v595;
        if (v595 == v594)
        {
          v505 = v594;
          v506 = 4;
          goto LABEL_707;
        }
        if (v595)
        {
          v506 = 5;
LABEL_707:
          (*(void (**)(void))(*v505 + 8 * v506))();
        }
        v504 = v578 + 1;
      }
      while (v578 != a2);
      v501 = v555 + 1;
    }
    while (v555 != 1);
  }
  v319 = v553;
LABEL_537:
  v599[0] = v375[1];
  if (!v598)
    std::__throw_bad_function_call[abi:ne180100]();
  v375[1] = ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599);
  v382 = (uint64_t)v284[31];
  v381 = (uint64_t *)(v284 + 31);
  v381[1] = v382;
  v591 = v381;
  *((_DWORD *)v381 - 2) = 0;
  if (a6 && (int)v551 >= 1)
  {
    v383 = 0;
    if (v562 >= 0)
      v384 = v562;
    else
      v384 = -v562;
    v584 = v384;
    v385 = 63 - __clz(v384);
    if (v562)
      v386 = v385;
    else
      v386 = 0;
    v588 = ((unint64_t)v562 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v388 = *(_QWORD *)(*v563 + 8 * v383);
      if (!v388)
        goto LABEL_549;
      v389 = 0;
      v390 = *(_DWORD *)(*v558 + 4 * v383) ^ (*(_QWORD *)(*v559 + ((v383 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v383) & 1;
      v391 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v390)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v390));
      v392 = a6[6];
      v393 = (v391 >> 7) ^ (v392 >> 12);
      v394 = a6[9];
      v395 = 0x101010101010101 * (v391 & 0x7F);
      while (1)
      {
        v396 = v393 & v394;
        v397 = *(_QWORD *)(v392 + v396);
        v398 = ((v397 ^ v395) - 0x101010101010101) & ~(v397 ^ v395) & 0x8080808080808080;
        if (v398)
          break;
LABEL_555:
        if ((v397 & (~v397 << 6) & 0x8080808080808080) != 0)
          goto LABEL_558;
        v389 += 8;
        v393 = v389 + v396;
      }
      while (1)
      {
        v399 = (v396 + (__clz(__rbit64(v398)) >> 3)) & v394;
        v400 = a6[7] + 40 * v399;
        if (*(_DWORD *)v400 == v390)
          break;
        v398 &= v398 - 1;
        if (!v398)
          goto LABEL_555;
      }
      if (v399 == v394)
      {
LABEL_558:
        v401 = 0;
        v402 = 0;
        v403 = -1;
        goto LABEL_560;
      }
      v401 = *(unsigned __int8 *)(v400 + 24);
      v402 = *(_QWORD *)(v400 + 25);
      v403 = *(_DWORD *)(v400 + 33);
LABEL_560:
      v404 = v388 >= 0 ? *(_QWORD *)(*v563 + 8 * v383) : -v388;
      v405 = (__clz(v404) ^ 0x3F) + v386;
      if (v405 > 61)
      {
        v406 = v562;
        if (v562)
        {
          v406 = ((unint64_t)v562 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (v405 <= 0x3E)
          {
            v407 = v404 * v584;
            if (v588 >= 0)
              v408 = v404 * v584;
            else
              v408 = -(uint64_t)v407;
            if (v407 < v588)
              v406 = v408;
            else
              v406 = ((unint64_t)v562 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          }
        }
      }
      else
      {
        v406 = v404 * v562;
      }
      if (v402 >= 0)
        v409 = v402;
      else
        v409 = -v402;
      v410 = 63 - __clz(v409);
      if (v402)
        v411 = v410;
      else
        v411 = 0;
      if (v406 >= 0)
        v412 = v406;
      else
        v412 = -v406;
      v413 = 63 - __clz(v412);
      if (!v406)
        v413 = 0;
      v414 = v413 + v411;
      if (v414 > 61)
      {
        if (v402 && v406)
        {
          v415 = ((v406 ^ (unint64_t)v402) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v416 = v412 * v409;
          if (v415 >= 0)
            v417 = v416;
          else
            v417 = -(uint64_t)v416;
          if (v416 < v415)
            v418 = v417;
          else
            v418 = v415;
          if (v414 <= 0x3E)
            v415 = v418;
          if (v415 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_549;
        }
      }
      else if (v406 * v402 == 0x7FFFFFFFFFFFFFFFLL)
      {
        goto LABEL_549;
      }
      v599[0] = v402 * v388;
      if (!v598
        || (v419 = ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599),
            v599[0] = v388,
            !v598))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v420 = v419 - ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599) * v402;
      v594[0] = v420;
      LODWORD(v599[0]) = 0;
      if ((v420 & 0x8000000000000000) == 0)
        break;
      v421 = a1;
      v596[0] = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v594, (int)v599, "coeff_b >= 0");
      if (v596[0])
      {
        v549 = google::LogMessageFatal::LogMessageFatal(v599, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1101, v596);
        google::LogMessage::stream((google::LogMessage *)v549);
        goto LABEL_821;
      }
      v420 = v594[0];
      if (v594[0])
        goto LABEL_602;
LABEL_549:
      if (++v383 == v319)
        goto LABEL_648;
    }
    v421 = a1;
    if (!v420)
      goto LABEL_549;
LABEL_602:
    ++*((_DWORD *)v421 + 60);
    if (!v401)
    {
      v430 = -v420;
      v432 = (char *)v421[32];
      v431 = (unint64_t)v421[33];
      v433 = __OFSUB__(v432, v431);
      if ((unint64_t)v432 < v431)
      {
        *(_DWORD *)v432 = v403;
        *(_QWORD *)(v432 + 4) = v430;
        v434 = v432 + 12;
LABEL_640:
        v421[32] = (int *)v434;
        v449 = a7[1];
        v450 = v449 - v594[0];
        if ((((v449 - v594[0]) ^ -v594[0]) & ((v449 - v594[0]) ^ v449)) < 0 != v433)
          v450 = (v594[0] > 0) + 0x7FFFFFFFFFFFFFFFLL;
        a7[1] = v450;
        goto LABEL_549;
      }
      v435 = *v591;
      v436 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v432[-*v591] >> 2);
      v437 = v436 + 1;
      if (v436 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v438 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v431 - v435) >> 2);
      if (2 * v438 > v437)
        v437 = 2 * v438;
      if (v438 >= 0xAAAAAAAAAAAAAAALL)
        v439 = 0x1555555555555555;
      else
        v439 = v437;
      if (v439)
      {
        if (v439 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v440 = (char *)operator new(12 * v439);
      }
      else
      {
        v440 = 0;
      }
      v445 = &v440[12 * v436];
      *(_DWORD *)v445 = v403;
      *(_QWORD *)(v445 + 4) = v430;
      v446 = (int *)v445;
      v433 = __OFSUB__(v432, v435);
      if (v432 == (char *)v435)
      {
        v421 = a1;
        v434 = v445 + 12;
        a1[31] = (int *)v445;
        a1[32] = (int *)(v445 + 12);
        a1[33] = (int *)&v440[12 * v439];
        if (v432)
          goto LABEL_638;
      }
      else
      {
        v421 = a1;
        do
        {
          v447 = *(_QWORD *)(v432 - 12);
          v432 -= 12;
          v448 = *((_DWORD *)v432 + 2);
          *(_QWORD *)(v446 - 3) = v447;
          v446 -= 3;
          v446[2] = v448;
          v433 = __OFSUB__(v432, v435);
        }
        while (v432 != (char *)v435);
        v432 = (char *)*v591;
        v434 = v445 + 12;
        a1[31] = v446;
        a1[32] = (int *)(v445 + 12);
        a1[33] = (int *)&v440[12 * v439];
        if (v432)
LABEL_638:
          operator delete(v432);
      }
      v319 = v553;
      goto LABEL_640;
    }
    v423 = (char *)v421[32];
    v422 = (unint64_t)v421[33];
    if ((unint64_t)v423 < v422)
    {
      *(_DWORD *)v423 = v403;
      *(_QWORD *)(v423 + 4) = v420;
      v387 = v423 + 12;
    }
    else
    {
      v424 = (char *)*v591;
      v425 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v423[-*v591] >> 2);
      v426 = v425 + 1;
      if (v425 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v427 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v422 - (_QWORD)v424) >> 2);
      if (2 * v427 > v426)
        v426 = 2 * v427;
      if (v427 >= 0xAAAAAAAAAAAAAAALL)
        v428 = 0x1555555555555555;
      else
        v428 = v426;
      if (v428)
      {
        if (v428 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v429 = (char *)operator new(12 * v428);
      }
      else
      {
        v429 = 0;
      }
      v441 = &v429[12 * v425];
      *(_DWORD *)v441 = v403;
      *(_QWORD *)(v441 + 4) = v420;
      v442 = (int *)v441;
      if (v423 == v424)
      {
        v421 = a1;
        v387 = v441 + 12;
        a1[31] = (int *)v441;
        a1[32] = (int *)(v441 + 12);
        a1[33] = (int *)&v429[12 * v428];
        if (v423)
          goto LABEL_629;
      }
      else
      {
        v421 = a1;
        do
        {
          v443 = *(_QWORD *)(v423 - 12);
          v423 -= 12;
          v444 = *((_DWORD *)v423 + 2);
          *(_QWORD *)(v442 - 3) = v443;
          v442 -= 3;
          v442[2] = v444;
        }
        while (v423 != v424);
        v423 = (char *)*v591;
        v387 = v441 + 12;
        a1[31] = v442;
        a1[32] = (int *)(v441 + 12);
        a1[33] = (int *)&v429[12 * v428];
        if (v423)
LABEL_629:
          operator delete(v423);
      }
      v319 = v553;
    }
    v421[32] = (int *)v387;
    goto LABEL_549;
  }
LABEL_648:
  if ((int)v551 >= 1)
  {
    v451 = 0;
    while (2)
    {
      if (!*(_QWORD *)(*v563 + 8 * v451))
        goto LABEL_652;
      v599[0] = *(_QWORD *)(*v563 + 8 * v451);
      if (!v598)
        std::__throw_bad_function_call[abi:ne180100]();
      v454 = ((uint64_t (*)(uint64_t **, unint64_t *))(*v598)[6])(v598, v599);
      v455 = v454;
      if (!v454)
        goto LABEL_652;
      if (((*(_QWORD *)(*v559 + ((v451 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v451) & 1) != 0)
      {
        v456 = *(_QWORD *)(*a5 + 8 * v451);
        v457 = -(v456 * v454);
        v458 = a7[1];
        v459 = a7[2];
        v460 = v458 - v456 * v454;
        v220 = (((v460 ^ v457) & (v460 ^ v458) & 0x8000000000000000) != 0) ^ v453;
        v461 = (v457 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if (v220)
          v460 = v461;
        a7[1] = v460;
        v462 = -v454;
        v463 = *(_DWORD *)(v459 + 4 * v451);
        v465 = a1[32];
        v464 = a1[33];
        if (v465 < v464)
        {
          *v465 = v463;
          *(_QWORD *)(v465 + 1) = v462;
          v452 = (uint64_t)(v465 + 3);
          goto LABEL_651;
        }
        v466 = *v591;
        v467 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v465 - *v591) >> 2);
        v468 = v467 + 1;
        if (v467 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v469 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v464 - v466) >> 2);
        if (2 * v469 > v468)
          v468 = 2 * v469;
        if (v469 >= 0xAAAAAAAAAAAAAAALL)
          v470 = 0x1555555555555555;
        else
          v470 = v468;
        if (v470)
        {
          if (v470 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v471 = (char *)operator new(12 * v470);
          v472 = (uint64_t)&v471[12 * v467];
          *(_DWORD *)v472 = v463;
          *(_QWORD *)(v472 + 4) = v462;
          v473 = v472;
          if (v465 == (int *)v466)
          {
LABEL_688:
            v452 = v472 + 12;
            a1[31] = (int *)v473;
            a1[32] = (int *)(v472 + 12);
            a1[33] = (int *)&v471[12 * v470];
            if (v465)
              goto LABEL_689;
LABEL_693:
            v319 = v553;
LABEL_651:
            a1[32] = (int *)v452;
LABEL_652:
            if (++v451 == v319)
              goto LABEL_697;
            continue;
          }
        }
        else
        {
          v471 = 0;
          v472 = 4 * (((uint64_t)v465 - *v591) >> 2);
          *(_DWORD *)v472 = v463;
          *(_QWORD *)(v472 + 4) = v462;
          v473 = 12 * v467;
          if (v465 == (int *)v466)
            goto LABEL_688;
        }
        do
        {
          v492 = *(_QWORD *)(v465 - 3);
          v465 -= 3;
          v493 = v465[2];
          *(_QWORD *)(v473 - 12) = v492;
          v473 -= 12;
          *(_DWORD *)(v473 + 8) = v493;
        }
        while (v465 != (int *)v466);
        v465 = (int *)*v591;
        v452 = v472 + 12;
        a1[31] = (int *)v473;
        a1[32] = (int *)(v472 + 12);
        a1[33] = (int *)&v471[12 * v470];
        if (!v465)
          goto LABEL_693;
LABEL_689:
        v494 = v465;
LABEL_696:
        operator delete(v494);
        v319 = v553;
        goto LABEL_651;
      }
      break;
    }
    v474 = *(_QWORD *)(*a4 + 8 * v451) * v454;
    v475 = a7[1];
    v476 = a7[2];
    v477 = v475 + v474;
    v478 = (v475 + v474) ^ v474;
    v479 = (v475 + v474) ^ v475;
    v480 = (v474 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (((v478 & v479 & 0x8000000000000000) != 0) == v453)
      v480 = v477;
    a7[1] = v480;
    v481 = *(_DWORD *)(v476 + 4 * v451);
    v483 = a1[32];
    v482 = a1[33];
    if (v483 < v482)
    {
      *v483 = v481;
      *(_QWORD *)(v483 + 1) = v454;
      v452 = (uint64_t)(v483 + 3);
      goto LABEL_651;
    }
    v484 = *v591;
    v485 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v483 - *v591) >> 2);
    v486 = v485 + 1;
    if (v485 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v487 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v482 - v484) >> 2);
    if (2 * v487 > v486)
      v486 = 2 * v487;
    if (v487 >= 0xAAAAAAAAAAAAAAALL)
      v488 = 0x1555555555555555;
    else
      v488 = v486;
    if (v488)
    {
      if (v488 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v489 = (char *)operator new(12 * v488);
      v490 = (uint64_t)&v489[12 * v485];
      *(_DWORD *)v490 = v481;
      *(_QWORD *)(v490 + 4) = v455;
      v491 = v490;
      if (v483 == (int *)v484)
        goto LABEL_694;
      do
      {
LABEL_691:
        v495 = *(_QWORD *)(v483 - 3);
        v483 -= 3;
        v496 = v483[2];
        *(_QWORD *)(v491 - 12) = v495;
        v491 -= 12;
        *(_DWORD *)(v491 + 8) = v496;
      }
      while (v483 != (int *)v484);
      v483 = (int *)*v591;
      v452 = v490 + 12;
      a1[31] = (int *)v491;
      a1[32] = (int *)(v490 + 12);
      a1[33] = (int *)&v489[12 * v488];
      if (!v483)
        goto LABEL_693;
    }
    else
    {
      v489 = 0;
      v490 = 4 * (((uint64_t)v483 - *v591) >> 2);
      *(_DWORD *)v490 = v481;
      *(_QWORD *)(v490 + 4) = v455;
      v491 = 12 * v485;
      if (v483 != (int *)v484)
        goto LABEL_691;
LABEL_694:
      v452 = v490 + 12;
      a1[31] = (int *)v491;
      a1[32] = (int *)(v490 + 12);
      a1[33] = (int *)&v489[12 * v488];
      if (!v483)
        goto LABEL_693;
    }
    v494 = v483;
    goto LABEL_696;
  }
LABEL_697:
  operations_research::sat::CleanTermsAndFillConstraint(v591, a7);
  operations_research::sat::RemoveZeroTerms((operations_research::sat *)a7, v497);
  operations_research::sat::DivideByGCD(a7, v498);
  v499 = v598;
  if (v598 == v597)
  {
    v500 = 4;
    v499 = v597;
LABEL_701:
    ((void (*)(void))(*v499)[v500])();
  }
  else if (v598)
  {
    v500 = 5;
    goto LABEL_701;
  }
}

void sub_22DB27B54()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B5C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B64()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B6C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B74()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B7C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B84()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB27B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;

  v40 = *(_QWORD *)(v38 - 184);
  if (v40 == v38 - 208)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v38 - 208) + 32))(v38 - 208);
    _Unwind_Resume(exception_object);
  }
  if (!v40)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  _Unwind_Resume(exception_object);
}

unint64_t *operations_research::sat::CreatePositiveMultiplicationCutGenerator@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  operations_research::sat::IntegerTrail *v10;
  _DWORD *v11;
  unint64_t *result;
  uint64_t v13;
  unint64_t __src;
  int v15;
  char v16[12];
  unint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  __src = __PAIR64__(a2, a1);
  v15 = a3;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, v16, 3uLL);
  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v11 = operator new(0x20uLL);
  *(_QWORD *)v11 = &off_24F985860;
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  *((_QWORD *)v11 + 3) = v10;
  v17 = (unint64_t *)v11;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](&__src, a5 + 3);
  result = v17;
  if (v17 == &__src)
  {
    v13 = 4;
    result = &__src;
  }
  else
  {
    if (!v17)
      return result;
    v13 = 5;
  }
  return (unint64_t *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_22DB27DE8(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB27DFC(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB27E10(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

uint64_t (***operations_research::sat::CreateSquareCutGenerator@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>))()
{
  operations_research::sat::IntegerTrail *v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t (**__src)();
  _QWORD v12[2];
  uint64_t (***p_src)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[6] = 0;
  __src = (uint64_t (**)())__PAIR64__(a2, a1);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, (char *)&__src, (char *)v12, 2uLL);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  __src = &off_24F9858E0;
  v12[0] = a1 | ((unint64_t)a2 << 32);
  v12[1] = v8;
  p_src = &__src;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](&__src, a4 + 3);
  result = p_src;
  if (p_src == &__src)
  {
    v10 = 4;
    result = &__src;
  }
  else
  {
    if (!p_src)
      return result;
    v10 = 5;
  }
  return (uint64_t (***)())(*result)[v10]();
}

void sub_22DB27F08(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB27F1C(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(uint64_t a1, int a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v25;
  char *v26;
  int v27;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  char *v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  signed int *v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  const void *v89;
  int64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  signed int *v115;
  _DWORD *v116;
  uint64_t v117;
  int v118;
  void *v119;
  int v120;
  uint64_t v121;
  void *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  int v148;
  signed int *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  signed int v159;
  _DWORD *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  void *v168;
  uint64_t v169;
  int v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  int v175;
  signed int *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  signed int v186;
  _DWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  int v196;
  char *v197;
  size_t v198;
  __int128 v199;
  _QWORD *v200;
  _QWORD *v201;
  char v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _BYTE v218[16];
  void *__p[2];
  _BYTE v220[24];
  __int128 v221;
  char v222[8];
  double v223;
  char v224;
  uint64_t v225;
  int v226;

  v213 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  v7 = a5[3] - a5[2];
  if ((int)(v7 >> 2) < 1)
    return;
  v8 = a6;
  v9 = 0;
  v202 = 0;
  v10 = 0;
  v212 = a5[1];
  v208 = (v7 >> 2);
  v209 = a5;
  v217 = (_QWORD *)a1;
  do
  {
    v215 = v9;
    v12 = *(_QWORD *)(a5[5] + 8 * v9);
    v13 = *(_DWORD *)(a5[2] + 4 * v9) ^ ((unint64_t)v12 >> 63);
    v14 = a1;
    operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound(a1, v13, a4, a7, (uint64_t)v222);
    operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound(v14, v13 ^ 1, a4, a7, (uint64_t)__p);
    if (v225 >= 0)
      v15 = v225;
    else
      v15 = -v225;
    v16 = 63 - __clz(v15);
    if (!v225)
      v16 = 0;
    if (v12 >= 0)
      v17 = v12;
    else
      v17 = -v12;
    v18 = 63 - __clz(v17);
    if (v12)
      v19 = v18;
    else
      v19 = 0;
    v20 = v16 + v19;
    if (v16 + v19 <= 61)
    {
      v21 = v225 * v17;
LABEL_18:
      v22 = v217;
      goto LABEL_28;
    }
    v21 = 0;
    if (!v12)
      goto LABEL_18;
    v22 = v217;
    if (v225)
    {
      v21 = ((unint64_t)v225 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      v23 = v15 * v17;
      if (v20 <= 0x3E && v23 < v21)
      {
        if (v21 >= 0)
          v21 = v23;
        else
          v21 = -(uint64_t)v23;
      }
    }
LABEL_28:
    v25 = (char *)v22[14];
    v26 = (char *)v22[15];
    v27 = v226;
    v29 = v21 == 0x7FFFFFFFFFFFFFFFLL || v226 == -1;
    if (a2)
    {
      v30 = *(_QWORD *)(v22[12] + 144);
      v31 = *(_QWORD *)(v30 + 20 * v13);
      v32 = *(double *)(*a4 + 8 * v13);
      v33 = (double)v31;
      if (v31 < (uint64_t)0x8000000000000003)
        v33 = -INFINITY;
      if (v31 > 0x7FFFFFFFFFFFFFFDLL)
        v33 = INFINITY;
      if (v32 - v33 < 0.01)
        v29 = 1;
      v34 = *(_QWORD *)(v30 + 20 * (v13 ^ 1));
      v35 = (double)-v34;
      if (v34 > 0x7FFFFFFFFFFFFFFDLL)
        v35 = -INFINITY;
      if (v34 < (uint64_t)0x8000000000000003)
        v35 = INFINITY;
      if (v35 - v32 < 0.01)
        v29 = 1;
    }
    v216 = (v26 - v25) / 12;
    v36 = v223 > 0.000001 && v8 == 0;
    if (v36 || v29)
    {
      v43 = v22[16];
      if ((unint64_t)v26 >= v43)
      {
        v45 = v216 + 1;
        if ((unint64_t)(v216 + 1) > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v25) >> 2);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0xAAAAAAAAAAAAAAALL)
          v47 = 0x1555555555555555;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v48 = (char *)operator new(12 * v47);
        }
        else
        {
          v48 = 0;
        }
        v60 = &v48[12 * v216];
        *(_DWORD *)v60 = v13;
        *(_QWORD *)(v60 + 4) = v17;
        v61 = v60;
        if (v26 != v25)
        {
          do
          {
            v62 = *(_QWORD *)(v26 - 12);
            v26 -= 12;
            v63 = *((_DWORD *)v26 + 2);
            *(_QWORD *)(v61 - 12) = v62;
            v61 -= 12;
            *((_DWORD *)v61 + 2) = v63;
          }
          while (v26 != v25);
          v26 = (char *)*v213;
        }
        v64 = &v48[12 * v47];
        v44 = v60 + 12;
        v217[14] = v61;
        v217[15] = v60 + 12;
        v217[16] = v64;
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_DWORD *)v26 = v13;
        *(_QWORD *)(v26 + 4) = v17;
        v44 = v26 + 12;
      }
      v217[15] = v44;
      goto LABEL_203;
    }
    v37 = *(_QWORD *)(v22[12] + 144);
    v38 = *(_QWORD *)(v37 + 20 * v13);
    v39 = *(_QWORD *)(v37 + 20 * (v13 ^ 1));
    *(_OWORD *)__p = 0u;
    memset(v220, 0, sizeof(v220));
    *((double *)&v221 + 1) = v223;
    *(_QWORD *)&v221 = -v38 - v39;
    if (v224)
    {
      v40 = v225 * v17;
      v41 = v22[16];
      if ((unint64_t)v26 >= v41)
      {
        v52 = v216 + 1;
        if ((unint64_t)(v216 + 1) > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v25) >> 2);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0xAAAAAAAAAAAAAAALL)
          v54 = 0x1555555555555555;
        else
          v54 = v52;
        v205 = v38;
        if (v54)
        {
          if (v54 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v55 = (char *)operator new(12 * v54);
        }
        else
        {
          v55 = 0;
        }
        v65 = &v55[12 * v216];
        *(_DWORD *)v65 = v27;
        *(_QWORD *)(v65 + 4) = v40;
        v66 = v65;
        if (v26 == v25)
        {
          v8 = a6;
        }
        else
        {
          v8 = a6;
          do
          {
            v67 = *(_QWORD *)(v26 - 12);
            v26 -= 12;
            v68 = *((_DWORD *)v26 + 2);
            *(_QWORD *)(v66 - 12) = v67;
            v66 -= 12;
            *((_DWORD *)v66 + 2) = v68;
          }
          while (v26 != v25);
          v26 = (char *)*v213;
        }
        v69 = &v55[12 * v54];
        v42 = v65 + 12;
        v22 = v217;
        v217[14] = v66;
        v217[15] = v65 + 12;
        v217[16] = v69;
        if (v26)
          operator delete(v26);
        v38 = v205;
      }
      else
      {
        *(_DWORD *)v26 = v226;
        *(_QWORD *)(v26 + 4) = v40;
        v42 = v26 + 12;
        v8 = a6;
      }
      if (v38 >= 0)
        v70 = v38;
      else
        v70 = -v38;
      v71 = 63 - __clz(v70);
      v22[15] = v42;
      if (!v38)
        v71 = 0;
      v72 = -(uint64_t)v17;
      v73 = v71 + v19;
      v74 = __OFSUB__(v71 + v19, 61);
      if (v71 + v19 > 61)
      {
        v75 = 0;
        if (!v12 || !v38)
        {
LABEL_120:
          v78 = v75 + v212;
          v79 = (v75 + v212) ^ v75;
          v80 = (v75 + v212) ^ v212;
          v81 = ((unint64_t)v75 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if ((v79 & v80) < 0 == v74)
            v81 = v78;
          v204 = v81;
          if ((unint64_t)(v81 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v8)
            {
              v82 = v22[16];
              if ((unint64_t)v42 < v82)
              {
                *(_DWORD *)v42 = a3;
                *(_QWORD *)(v42 + 4) = v17;
                v217[15] = v42 + 12;
                v84 = (signed int *)__p[1];
                v83 = *(_QWORD *)v220;
                if (__p[1] < (void *)*(_QWORD *)v220)
                  goto LABEL_126;
LABEL_217:
                v149 = (signed int *)__p[0];
                v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)__p[0]) >> 2);
                v151 = v150 + 1;
                if (v150 + 1 > 0x1555555555555555)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (unint64_t)__p[0]) >> 2);
                if (2 * v152 > v151)
                  v151 = 2 * v152;
                if (v152 >= 0xAAAAAAAAAAAAAAALL)
                  v153 = 0x1555555555555555;
                else
                  v153 = v151;
                if (v153)
                {
                  if (v153 > 0x1555555555555555)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v154 = v38;
                  v155 = (char *)operator new(12 * v153);
                }
                else
                {
                  v154 = v38;
                  v155 = 0;
                }
                v156 = &v155[12 * v150];
                *(_DWORD *)v156 = v13;
                *(_QWORD *)(v156 + 4) = 1;
                v157 = v156;
                if (v84 != v149)
                {
                  do
                  {
                    v158 = *(_QWORD *)(v84 - 3);
                    v84 -= 3;
                    v159 = v84[2];
                    *(_QWORD *)(v157 - 12) = v158;
                    v157 -= 12;
                    *((_DWORD *)v157 + 2) = v159;
                  }
                  while (v84 != v149);
                  v84 = (signed int *)__p[0];
                }
                v83 = (unint64_t)&v155[12 * v153];
                v85 = v156 + 12;
                __p[0] = v157;
                __p[1] = v156 + 12;
                *(_QWORD *)v220 = v83;
                if (v84)
                {
                  operator delete(v84);
                  v83 = *(_QWORD *)v220;
                }
                v38 = v154;
                __p[1] = v85;
                v86 = -v225;
                v87 = v226;
                if ((unint64_t)v85 < v83)
                {
LABEL_127:
                  *v85 = v87;
                  *(_QWORD *)(v85 + 1) = v86;
                  __p[1] = v85 + 3;
                  *(_QWORD *)&v220[8] = -v38;
                  v88 = *(_QWORD *)(v8 + 8);
                  if (v88 < *(_QWORD *)(v8 + 16))
                    goto LABEL_128;
                  goto LABEL_300;
                }
LABEL_233:
                v160 = __p[0];
                v161 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)__p[0]) >> 2);
                v162 = v161 + 1;
                if (v161 + 1 > 0x1555555555555555)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (unint64_t)__p[0]) >> 2);
                if (2 * v163 > v162)
                  v162 = 2 * v163;
                if (v163 >= 0xAAAAAAAAAAAAAAALL)
                  v164 = 0x1555555555555555;
                else
                  v164 = v162;
                if (v164)
                {
                  if (v164 > 0x1555555555555555)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v165 = v38;
                  v166 = (char *)operator new(12 * v164);
                }
                else
                {
                  v165 = v38;
                  v166 = 0;
                }
                v167 = &v166[12 * v161];
                *(_DWORD *)v167 = v87;
                *(_QWORD *)(v167 + 4) = v86;
                v168 = v167 + 12;
                if (v85 == v160)
                {
                  __p[0] = &v166[12 * v161];
                  __p[1] = v167 + 12;
                  *(_QWORD *)v220 = &v166[12 * v164];
                }
                else
                {
                  do
                  {
                    v169 = *(_QWORD *)(v85 - 3);
                    v85 -= 3;
                    v170 = v85[2];
                    *(_QWORD *)(v167 - 12) = v169;
                    v167 -= 12;
                    *((_DWORD *)v167 + 2) = v170;
                  }
                  while (v85 != v160);
                  v85 = __p[0];
                  __p[0] = v167;
                  __p[1] = v168;
                  *(_QWORD *)v220 = &v166[12 * v164];
                  if (!v85)
                  {
LABEL_252:
                    __p[1] = v168;
                    *(_QWORD *)&v220[8] = -v165;
                    v88 = *(_QWORD *)(v8 + 8);
                    if (v88 < *(_QWORD *)(v8 + 16))
                    {
LABEL_128:
                      *(_QWORD *)v88 = 0;
                      *(_QWORD *)(v88 + 8) = 0;
                      *(_QWORD *)(v88 + 16) = 0;
                      v89 = __p[0];
                      v90 = (char *)__p[1] - (char *)__p[0];
                      if (__p[1] != __p[0])
                      {
                        v91 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 2);
                        if (v91 > 0x1555555555555555)
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_298:
                        v197 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
                        *(_QWORD *)v88 = v197;
                        *(_QWORD *)(v88 + 8) = v197;
                        *(_QWORD *)(v88 + 16) = &v197[12 * v91];
                        v198 = 12 * ((v90 - 12) / 0xCuLL) + 12;
                        memcpy(v197, v89, v198);
                        *(_QWORD *)(v88 + 8) = &v197[v198];
                        goto LABEL_299;
                      }
                      goto LABEL_299;
                    }
LABEL_300:
                    v200 = std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::__push_back_slow_path<operations_research::sat::ImpliedBoundsProcessor::SlackInfo const&>((void **)v8, (uint64_t)__p);
                    v22 = v217;
LABEL_301:
                    v121 = v204;
                    a3 += 2;
                    *(_QWORD *)(v8 + 8) = v200;
                    v120 = 1;
                    v202 = 1;
                    v122 = __p[0];
                    if (!__p[0])
                      goto LABEL_201;
LABEL_200:
                    __p[1] = v122;
                    operator delete(v122);
                    goto LABEL_201;
                  }
                }
                operator delete(v85);
                goto LABEL_252;
              }
              v123 = (char *)*v213;
              v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v42[-*v213] >> 2);
              v125 = v124 + 1;
              if (v124 + 1 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)v123) >> 2);
              if (2 * v126 > v125)
                v125 = 2 * v126;
              if (v126 >= 0xAAAAAAAAAAAAAAALL)
                v127 = 0x1555555555555555;
              else
                v127 = v125;
              if (v127)
              {
                if (v127 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v128 = v38;
                v129 = (char *)operator new(12 * v127);
              }
              else
              {
                v128 = v38;
                v129 = 0;
              }
              v144 = &v129[12 * v124];
              v145 = &v129[12 * v127];
              *(_DWORD *)v144 = a3;
              *(_QWORD *)(v144 + 4) = v17;
              v146 = v144 + 12;
              if (v42 == v123)
              {
                v217[14] = v144;
                v217[15] = v146;
                v217[16] = v145;
              }
              else
              {
                do
                {
                  v147 = *(_QWORD *)(v42 - 12);
                  v42 -= 12;
                  v148 = *((_DWORD *)v42 + 2);
                  *(_QWORD *)(v144 - 12) = v147;
                  v144 -= 12;
                  *((_DWORD *)v144 + 2) = v148;
                }
                while (v42 != v123);
                v42 = (char *)v217[14];
                v217[14] = v144;
                v217[15] = v146;
                v217[16] = v145;
                if (!v42)
                {
                  v38 = v128;
                  v217[15] = v146;
                  v84 = (signed int *)__p[1];
                  v83 = *(_QWORD *)v220;
                  if (__p[1] >= (void *)*(_QWORD *)v220)
                    goto LABEL_217;
                  goto LABEL_126;
                }
              }
              operator delete(v42);
              v38 = v128;
              v217[15] = v146;
              v84 = (signed int *)__p[1];
              v83 = *(_QWORD *)v220;
              if (__p[1] >= (void *)*(_QWORD *)v220)
                goto LABEL_217;
LABEL_126:
              *v84 = v13;
              *(_QWORD *)(v84 + 1) = 1;
              v85 = v84 + 3;
              __p[1] = v84 + 3;
              v86 = -v225;
              v87 = v226;
              if ((unint64_t)(v84 + 3) < v83)
                goto LABEL_127;
              goto LABEL_233;
            }
LABEL_168:
            v120 = 1;
            v202 = 1;
            v121 = v204;
            v122 = __p[0];
            if (!__p[0])
              goto LABEL_201;
            goto LABEL_200;
          }
LABEL_131:
          if (*off_254079508[0] >= 2)
          {
            if (off_254079508[0] != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_254079508, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v218, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1476);
              v92 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v218);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Overflow", 8);
LABEL_196:
              google::LogMessage::~LogMessage((google::LogMessage *)v218);
              goto LABEL_197;
            }
            goto LABEL_197;
          }
          goto LABEL_199;
        }
        v75 = ((v38 ^ (unint64_t)v72) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if (v73 <= 0x3E)
        {
          v76 = v70 * v17;
          v77 = v75 >= 0 ? v76 : -(uint64_t)v76;
          if (v76 < v75)
            v75 = v77;
        }
      }
      else
      {
        v75 = v38 * v72;
      }
      v74 = __OFSUB__(v75 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v75 - 0x7FFFFFFFFFFFFFFFLL) < 2)
        goto LABEL_131;
      goto LABEL_120;
    }
    v49 = -(uint64_t)(v17 * v225);
    v50 = v22[16];
    if ((unint64_t)v26 >= v50)
    {
      v56 = v216 + 1;
      if ((unint64_t)(v216 + 1) > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)v25) >> 2);
      if (2 * v57 > v56)
        v56 = 2 * v57;
      if (v57 >= 0xAAAAAAAAAAAAAAALL)
        v58 = 0x1555555555555555;
      else
        v58 = v56;
      v206 = v38;
      if (v58)
      {
        if (v58 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v59 = (char *)operator new(12 * v58);
      }
      else
      {
        v59 = 0;
      }
      v93 = &v59[12 * v216];
      *(_DWORD *)v93 = v27;
      *(_QWORD *)(v93 + 4) = v49;
      v94 = v93;
      if (v26 == v25)
      {
        v8 = a6;
      }
      else
      {
        v8 = a6;
        do
        {
          v95 = *(_QWORD *)(v26 - 12);
          v26 -= 12;
          v96 = *((_DWORD *)v26 + 2);
          *(_QWORD *)(v94 - 12) = v95;
          v94 -= 12;
          *((_DWORD *)v94 + 2) = v96;
        }
        while (v26 != v25);
        v26 = (char *)*v213;
      }
      v97 = &v59[12 * v58];
      v51 = v93 + 12;
      v22 = v217;
      v217[14] = v94;
      v217[15] = v93 + 12;
      v217[16] = v97;
      if (v26)
        operator delete(v26);
      v38 = v206;
    }
    else
    {
      *(_DWORD *)v26 = v226;
      *(_QWORD *)(v26 + 4) = v49;
      v51 = v26 + 12;
      v8 = a6;
    }
    v98 = -(uint64_t)v17;
    v100 = v225 + v38;
    v99 = v225 + v38 == 0;
    if (v225 + v38 >= 0)
      v101 = v225 + v38;
    else
      v101 = -v100;
    v102 = 63 - __clz(v101);
    v22[15] = v51;
    if (v99)
      v102 = 0;
    v103 = v102 + v19;
    v104 = __OFSUB__(v102 + v19, 61);
    if (v102 + v19 > 61)
    {
      v105 = 0;
      if (v12 && v100)
      {
        v105 = ((v100 ^ (unint64_t)v98) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        v107 = v101 * v17;
        if (v103 > 0x3E || v107 >= v105)
        {
          v104 = __OFSUB__(v105 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v105 - 0x7FFFFFFFFFFFFFFFLL) < 2)
            goto LABEL_192;
        }
        else
        {
          if (v105 >= 0)
            v105 = v101 * v17;
          else
            v105 = -(uint64_t)v107;
          v104 = __OFSUB__(v105 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v105 - 0x7FFFFFFFFFFFFFFFLL) < 2)
            goto LABEL_192;
        }
      }
    }
    else
    {
      v105 = v100 * v98;
      v106 = v100 * v98 - 0x7FFFFFFFFFFFFFFFLL;
      v104 = __OFSUB__(v106, 2);
      if (v106 < 2)
        goto LABEL_192;
    }
    v109 = v105 + v212;
    v110 = (v105 + v212) ^ v105;
    v111 = (v105 + v212) ^ v212;
    v112 = ((unint64_t)v105 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if ((v110 & v111) < 0 == v104)
      v112 = v109;
    v204 = v112;
    if ((unint64_t)(v112 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    {
      if (!v8)
        goto LABEL_168;
      v113 = v22[16];
      if ((unint64_t)v51 < v113)
      {
        *(_DWORD *)v51 = a3;
        *(_QWORD *)(v51 + 4) = v17;
        v217[15] = v51 + 12;
        v115 = (signed int *)__p[1];
        v114 = *(_QWORD *)v220;
        if (__p[1] < (void *)*(_QWORD *)v220)
          goto LABEL_166;
LABEL_259:
        v176 = (signed int *)__p[0];
        v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)__p[0]) >> 2);
        v178 = v177 + 1;
        if (v177 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (unint64_t)__p[0]) >> 2);
        if (2 * v179 > v178)
          v178 = 2 * v179;
        if (v179 >= 0xAAAAAAAAAAAAAAALL)
          v180 = 0x1555555555555555;
        else
          v180 = v178;
        if (v180)
        {
          if (v180 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v181 = v38;
          v182 = (char *)operator new(12 * v180);
        }
        else
        {
          v181 = v38;
          v182 = 0;
        }
        v183 = &v182[12 * v177];
        *(_DWORD *)v183 = v13;
        *(_QWORD *)(v183 + 4) = 1;
        v184 = v183;
        if (v115 != v176)
        {
          do
          {
            v185 = *(_QWORD *)(v115 - 3);
            v115 -= 3;
            v186 = v115[2];
            *(_QWORD *)(v184 - 12) = v185;
            v184 -= 12;
            *((_DWORD *)v184 + 2) = v186;
          }
          while (v115 != v176);
          v115 = (signed int *)__p[0];
        }
        v114 = (unint64_t)&v182[12 * v180];
        v116 = v183 + 12;
        __p[0] = v184;
        __p[1] = v183 + 12;
        *(_QWORD *)v220 = v114;
        if (v115)
        {
          operator delete(v115);
          v114 = *(_QWORD *)v220;
        }
        v38 = v181;
        __p[1] = v116;
        v117 = v225;
        v118 = v226;
        if ((unint64_t)v116 < v114)
          goto LABEL_167;
        goto LABEL_275;
      }
      v130 = (char *)*v213;
      v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v51[-*v213] >> 2);
      v132 = v131 + 1;
      if (v131 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (_QWORD)v130) >> 2);
      if (2 * v133 > v132)
        v132 = 2 * v133;
      if (v133 >= 0xAAAAAAAAAAAAAAALL)
        v134 = 0x1555555555555555;
      else
        v134 = v132;
      if (v134)
      {
        if (v134 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v135 = v38;
        v136 = (char *)operator new(12 * v134);
      }
      else
      {
        v135 = v38;
        v136 = 0;
      }
      v171 = &v136[12 * v131];
      v172 = &v136[12 * v134];
      *(_DWORD *)v171 = a3;
      *(_QWORD *)(v171 + 4) = v17;
      v173 = v171 + 12;
      if (v51 == v130)
      {
        v217[14] = v171;
        v217[15] = v173;
        v217[16] = v172;
      }
      else
      {
        do
        {
          v174 = *(_QWORD *)(v51 - 12);
          v51 -= 12;
          v175 = *((_DWORD *)v51 + 2);
          *(_QWORD *)(v171 - 12) = v174;
          v171 -= 12;
          *((_DWORD *)v171 + 2) = v175;
        }
        while (v51 != v130);
        v51 = (char *)v217[14];
        v217[14] = v171;
        v217[15] = v173;
        v217[16] = v172;
        if (!v51)
        {
          v38 = v135;
          v217[15] = v173;
          v115 = (signed int *)__p[1];
          v114 = *(_QWORD *)v220;
          if (__p[1] >= (void *)*(_QWORD *)v220)
            goto LABEL_259;
          goto LABEL_166;
        }
      }
      operator delete(v51);
      v38 = v135;
      v217[15] = v173;
      v115 = (signed int *)__p[1];
      v114 = *(_QWORD *)v220;
      if (__p[1] >= (void *)*(_QWORD *)v220)
        goto LABEL_259;
LABEL_166:
      *v115 = v13;
      *(_QWORD *)(v115 + 1) = 1;
      v116 = v115 + 3;
      __p[1] = v115 + 3;
      v117 = v225;
      v118 = v226;
      if ((unint64_t)(v115 + 3) < v114)
      {
LABEL_167:
        *v116 = v118;
        *(_QWORD *)(v116 + 1) = v117;
        v119 = v116 + 3;
        goto LABEL_295;
      }
LABEL_275:
      v187 = __p[0];
      v188 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)__p[0]) >> 2);
      v189 = v188 + 1;
      if (v188 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (unint64_t)__p[0]) >> 2);
      if (2 * v190 > v189)
        v189 = 2 * v190;
      if (v190 >= 0xAAAAAAAAAAAAAAALL)
        v191 = 0x1555555555555555;
      else
        v191 = v189;
      if (v191)
      {
        if (v191 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v192 = v38;
        v193 = (char *)operator new(12 * v191);
      }
      else
      {
        v192 = v38;
        v193 = 0;
      }
      v194 = &v193[12 * v188];
      *(_DWORD *)v194 = v118;
      *(_QWORD *)(v194 + 4) = v117;
      v119 = v194 + 12;
      if (v116 == v187)
      {
        __p[0] = &v193[12 * v188];
        __p[1] = v194 + 12;
        *(_QWORD *)v220 = &v193[12 * v191];
      }
      else
      {
        do
        {
          v195 = *(_QWORD *)(v116 - 3);
          v116 -= 3;
          v196 = v116[2];
          *(_QWORD *)(v194 - 12) = v195;
          v194 -= 12;
          *((_DWORD *)v194 + 2) = v196;
        }
        while (v116 != v187);
        v116 = __p[0];
        __p[0] = v194;
        __p[1] = v119;
        *(_QWORD *)v220 = &v193[12 * v191];
        if (!v116)
          goto LABEL_294;
      }
      operator delete(v116);
LABEL_294:
      v38 = v192;
LABEL_295:
      __p[1] = v119;
      *(_QWORD *)&v220[8] = -(v38 + v225);
      v88 = *(_QWORD *)(v8 + 8);
      if (v88 < *(_QWORD *)(v8 + 16))
      {
        *(_QWORD *)v88 = 0;
        *(_QWORD *)(v88 + 8) = 0;
        *(_QWORD *)(v88 + 16) = 0;
        v89 = __p[0];
        v90 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] != __p[0])
        {
          v91 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 2);
          if (v91 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          goto LABEL_298;
        }
LABEL_299:
        v199 = *(_OWORD *)&v220[8];
        *(_OWORD *)(v88 + 40) = v221;
        *(_OWORD *)(v88 + 24) = v199;
        v200 = (_QWORD *)(v88 + 56);
        *(_QWORD *)(v8 + 8) = v88 + 56;
        v22 = v217;
        goto LABEL_301;
      }
      goto LABEL_300;
    }
LABEL_192:
    if (*off_254079510[0] >= 2)
    {
      if (off_254079510[0] != &google::kLogSiteUninitialized
        || google::InitVLOG3__((google *)off_254079510, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v218, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1494);
        v137 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"Overflow", 8);
        goto LABEL_196;
      }
LABEL_197:
      v120 = 0;
      v121 = v212;
      v122 = __p[0];
      if (!__p[0])
        goto LABEL_201;
      goto LABEL_200;
    }
LABEL_199:
    v120 = 0;
    v121 = v212;
    v122 = __p[0];
    if (__p[0])
      goto LABEL_200;
LABEL_201:
    if (!v120)
      return;
    v44 = (_DWORD *)v22[15];
    v212 = v121;
LABEL_203:
    v138 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v44 - *v213) >> 2);
    v139 = (int)v216;
    if (v138 <= (int)v216)
    {
      a1 = (uint64_t)v217;
      v11 = v215;
    }
    else
    {
      v140 = (uint64_t *)(*v213 + 12 * (int)v216 + 4);
      a1 = (uint64_t)v217;
      v11 = v215;
      do
      {
        v142 = *v140;
        v140 = (uint64_t *)((char *)v140 + 12);
        v141 = v142;
        if (v142 < 0)
          v141 = -v141;
        v143 = v141 + v10;
        if ((v143 & ~v10) >= 0)
          v10 = v143;
        else
          v10 = ((unint64_t)v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        ++v139;
      }
      while (v138 > v139);
    }
    v9 = v11 + 1;
    a5 = v209;
  }
  while (v9 != v208);
  if (v10 <= 0x7FFFFFFFFFFFFFFDLL)
  {
    if ((v202 & 1) != 0)
    {
      *v209 = 0x8000000000000002;
      v209[1] = v212;
      operations_research::sat::CleanTermsAndFillConstraint(v213, v209);
    }
  }
  else if (*off_254079518[0] >= 2
         && (off_254079518[0] != &google::kLogSiteUninitialized
          || google::InitVLOG3__((google *)off_254079518, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1520);
    v201 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Overflow", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
}

void sub_22DB29294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)v28;
  if (*(_QWORD *)v28)
  {
    *(_QWORD *)(v28 + 8) = v30;
    operator delete(v30);
  }
  *(_QWORD *)(a14 + 8) = v28;
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t result;
  uint64_t v20;
  char **ImpliedBounds;
  int *v22;
  int *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  int v37;
  uint64_t v38;
  double v39;
  double v40;
  int v41;
  _DWORD *v42;
  _QWORD *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  BOOL v47;
  _DWORD *v48;
  _QWORD *v49;
  char *v50;
  void *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  void *v66;
  _DWORD *v67;
  __int128 v68;
  void *v69[2];
  _QWORD v70[4];
  uint64_t v71;
  int v72[3];

  v9 = 0;
  v72[0] = a2;
  v10 = (uint64_t *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a2));
  v13 = (v12 >> 7) ^ (v11 >> 12);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = 0x101010101010101 * (v12 & 0x7F);
  while (1)
  {
    v16 = v13 & v14;
    v17 = *(_QWORD *)(v11 + v16);
    v18 = ((v17 ^ v15) - 0x101010101010101) & ~(v17 ^ v15) & 0x8080808080808080;
    if (v18)
      break;
LABEL_5:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      goto LABEL_8;
    v9 += 8;
    v13 = v9 + v16;
  }
  while (1)
  {
    result = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    v20 = *(_QWORD *)(a1 + 56) + 40 * result;
    if (*(_DWORD *)v20 == a2)
      break;
    v18 &= v18 - 1;
    if (!v18)
      goto LABEL_5;
  }
  if (result != v14)
  {
    v59 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)a5 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(a5 + 16) = v59;
    return result;
  }
LABEL_8:
  v60 = v10;
  *(_OWORD *)a5 = xmmword_22DCE65B0;
  *(_QWORD *)(a5 + 17) = 0;
  *(_DWORD *)(a5 + 25) = -1;
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 144) + 20 * a2);
  ImpliedBounds = operations_research::sat::ImpliedBounds::GetImpliedBounds(*(_QWORD **)(a1 + 104), a2);
  v23 = (int *)*ImpliedBounds;
  v22 = (int *)ImpliedBounds[1];
  if (*ImpliedBounds != (char *)v22)
  {
    v24 = (double)v64;
    if (v64 < (uint64_t)0x8000000000000003)
      v24 = -INFINITY;
    if (v64 <= 0x7FFFFFFFFFFFFFFDLL)
      v25 = v24;
    else
      v25 = INFINITY;
    v26 = *(double *)(a5 + 8);
    v63 = *(_QWORD *)(a5 + 17);
    v61 = a3;
    v62 = a4;
    do
    {
      v31 = 0;
      v54 = *v23 & 0xFFFFFFFFFFFFFFFELL;
      v55 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v54)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v54));
      v32 = (v55 >> 7) ^ (*(_QWORD *)a1 >> 12);
      v56 = *(_QWORD *)(a1 + 24);
      v57 = 0x101010101010101 * (v55 & 0x7F);
      while (1)
      {
        v27 = v32 & v56;
        v28 = *(_QWORD *)(*(_QWORD *)a1 + v27);
        v29 = ((v28 ^ v57) - 0x101010101010101) & ~(v28 ^ v57) & 0x8080808080808080;
        if (v29)
          break;
LABEL_18:
        if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
          goto LABEL_52;
        v31 += 8;
        v32 = v31 + v27;
      }
      while (1)
      {
        v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v56;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v30) == (_DWORD)v54)
          break;
        v29 &= v29 - 1;
        if (!v29)
          goto LABEL_18;
      }
      if (v30 != v56)
      {
        v33 = *(_QWORD *)(v23 + 1);
        LODWORD(v68) = 0;
        v71 = v33 - v64;
        if (v33 - v64 < 0)
        {
          __p = (void *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v71, (int)&v68, "diff >= 0");
          if (__p)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)&v68, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1342, (uint64_t **)&__p);
            google::LogMessage::stream((google::LogMessage *)&v68);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v68);
          }
        }
        v34 = *((_BYTE *)v23 + 12);
        v35 = *v23;
        v36 = *(double *)(*a3 + 8 * v35);
        if (!v34)
          v36 = 1.0 - v36;
        v37 = v72[0];
        v38 = v71;
        v39 = (double)v71;
        if (v71 < (uint64_t)0x8000000000000003)
          v39 = -INFINITY;
        if (v71 > 0x7FFFFFFFFFFFFFFDLL)
          v39 = INFINITY;
        v40 = *(double *)(*a3 + 8 * v72[0]) - v25 - v36 * v39;
        if (v40 >= -0.000001)
        {
          if (v40 + 0.0001 < v26 || (v40 < v26 + 0.0001 ? (v47 = v71 <= v63) : (v47 = 1), !v47))
          {
            *(double *)a5 = v36;
            *(double *)(a5 + 8) = v40;
            *(_QWORD *)(a5 + 17) = v38;
            *(_BYTE *)(a5 + 16) = v34;
            v63 = v38;
            v26 = v40;
            *(_DWORD *)(a5 + 25) = v35;
          }
        }
        else if (a4)
        {
          memset(v70, 0, sizeof(v70));
          *(_OWORD *)v69 = 0u;
          v66 = 0;
          v67 = 0;
          __p = 0;
          v68 = xmmword_22DCF0BC0;
          v41 = *v23;
          if (*((_BYTE *)v23 + 12))
          {
            v42 = operator new(0xCuLL);
            *v42 = v41;
            *(_QWORD *)(v42 + 1) = v38;
            __p = v42;
            v67 = v42 + 3;
            v43 = operator new(0x18uLL);
            v44 = (char *)(v43 + 3);
            v43[2] = -1;
            *v43 = *(_QWORD *)v42;
            *((_DWORD *)v43 + 2) = v42[2];
            *((_DWORD *)v43 + 3) = v37;
            v45 = __p;
            __p = v43;
            v66 = v43 + 3;
            v67 = v43 + 3;
            a3 = v61;
            a4 = v62;
            if (v45)
              operator delete(v45);
            v66 = v44;
            v46 = v64;
          }
          else
          {
            v48 = operator new(0xCuLL);
            *v48 = v41;
            *(_QWORD *)(v48 + 1) = -v38;
            __p = v48;
            v67 = v48 + 3;
            v49 = operator new(0x18uLL);
            v50 = (char *)(v49 + 3);
            v49[2] = -1;
            *v49 = *(_QWORD *)v48;
            *((_DWORD *)v49 + 2) = v48[2];
            *((_DWORD *)v49 + 3) = v37;
            v51 = __p;
            __p = v49;
            v66 = v49 + 3;
            v67 = v49 + 3;
            a3 = v61;
            a4 = v62;
            if (v51)
              operator delete(v51);
            v66 = v50;
            v46 = *(_QWORD *)(v23 + 1);
          }
          *((_QWORD *)&v68 + 1) = -v46;
          operations_research::sat::CleanTermsAndFillConstraint((uint64_t *)&__p, &v68);
          v52 = *(_QWORD *)(a4 + 8);
          if (v52 >= *(_QWORD *)(a4 + 16))
          {
            v53 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v68);
          }
          else
          {
            *(_OWORD *)v52 = v68;
            *(_QWORD *)(v52 + 16) = 0;
            *(_QWORD *)(v52 + 24) = 0;
            *(_QWORD *)(v52 + 32) = 0;
            *(_QWORD *)(v52 + 40) = 0;
            *(_OWORD *)(v52 + 16) = *(_OWORD *)v69;
            *(_QWORD *)(v52 + 32) = v70[0];
            v69[0] = 0;
            v69[1] = 0;
            v70[0] = 0;
            *(_QWORD *)(v52 + 48) = 0;
            *(_QWORD *)(v52 + 56) = 0;
            *(_OWORD *)(v52 + 40) = *(_OWORD *)&v70[1];
            *(_QWORD *)(v52 + 56) = v70[3];
            memset(&v70[1], 0, 24);
            v53 = (char *)(v52 + 64);
          }
          *(_QWORD *)(a4 + 8) = v53;
          if (__p)
          {
            v66 = __p;
            operator delete(__p);
          }
          if (v70[1])
          {
            v70[2] = v70[1];
            operator delete((void *)v70[1]);
          }
          if (v69[0])
          {
            v69[1] = v69[0];
            operator delete(v69[0]);
          }
        }
      }
LABEL_52:
      v23 = (int *)((char *)v23 + 13);
    }
    while (v23 != v22);
  }
  result = absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::try_emplace_impl<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const&>(v60, v72, (uint64_t)&v68);
  v58 = *((_QWORD *)&v68 + 1);
  *(_OWORD *)(*((_QWORD *)&v68 + 1) + 8) = *(_OWORD *)a5;
  *(_OWORD *)(v58 + 21) = *(_OWORD *)(a5 + 13);
  return result;
}

void sub_22DB29908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB29910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraint::DebugString(operations_research::sat::LinearConstraint *this@<X0>, char *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  _BYTE v21[32];
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  _BYTE v26[32];
  const char *v27;
  int64_t v28;
  _BYTE v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = *(_QWORD *)this;
  if (v5 >= (uint64_t)0x8000000000000003)
  {
    v27 = v29;
    v28 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v29, a2) - v29;
    v24 = " <= ";
    v25 = 4;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24);
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  if (*((_DWORD **)this + 3) != v6)
  {
    v7 = (*v6 & 1) != 0 ? -**((_QWORD **)this + 5) : **((_QWORD **)this + 5);
    v27 = "";
    v28 = 0;
    v8 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v26, a2);
    v24 = v26;
    v25 = v8 - v26;
    v22 = "*X";
    v23 = 2;
    v9 = **((_DWORD **)this + 2);
    v19 = v21;
    v20 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((v9 / 2), v21, v10) - v21;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v22, (uint64_t)&v19);
    v11 = *((_QWORD *)this + 2);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) >= 5)
    {
      v12 = 1;
      do
      {
        if ((*(_DWORD *)(v11 + 4 * v12) & 1) != 0)
          v13 = -*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12);
        else
          v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12);
        v27 = " ";
        v28 = 1;
        v14 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v13, v26, a2);
        v24 = v26;
        v25 = v14 - v26;
        v22 = "*X";
        v23 = 2;
        v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((*(_DWORD *)(*((_QWORD *)this + 2) + 4 * v12) / 2), v21, v15);
        v19 = v21;
        v20 = v16 - v21;
        absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v22, (uint64_t)&v19);
        ++v12;
        v11 = *((_QWORD *)this + 2);
      }
      while (v12 < (*((_QWORD *)this + 3) - v11) >> 2);
    }
  }
  v17 = *((_QWORD *)this + 1);
  if (v17 < 0x7FFFFFFFFFFFFFFELL)
  {
    v27 = " <= ";
    v28 = 4;
    v18 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v17, v26, a2);
    v24 = v26;
    v25 = v18 - v26;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24);
  }
}

void sub_22DB29B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateAllDifferentCutGenerator(char **a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  operations_research::sat::IntegerTrail *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[6] = 0;
  if (a3 != a1)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *a1, a1[1], (a1[1] - *a1) >> 2);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a2);
  v8 = v7;
  v10 = *a1;
  v9 = a1[1];
  v11 = v9 - *a1;
  if (v9 == *a1)
  {
    v12 = 0;
    *(_QWORD *)&v24 = v6;
    *((_QWORD *)&v24 + 1) = v7;
    v26 = 0;
    v27 = 0;
    v25 = 0;
LABEL_9:
    v16 = 0;
    v15 = 0;
    goto LABEL_10;
  }
  if (v11 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v12 = (char *)operator new(v9 - *a1);
  v13 = &v12[4 * (v11 >> 2)];
  memcpy(v12, v10, v11);
  *(_QWORD *)&v24 = v6;
  *((_QWORD *)&v24 + 1) = v8;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v14 = 4 * (v11 >> 2);
  if (v13 == v12)
    goto LABEL_9;
  if (v14 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = (char *)operator new(4 * (v11 >> 2));
  v16 = &v15[4 * (v14 >> 2)];
  memcpy(v15, v12, v13 - v12);
LABEL_10:
  v17 = operator new(0x30uLL);
  *v17 = &off_24F985960;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0;
  v18 = v16 - v15;
  if (v18)
  {
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v18);
    v17[1] = v19;
    v20 = &v19[4 * (v18 >> 2)];
    v17[3] = v20;
    memcpy(v19, v15, v18);
    v17[2] = v20;
  }
  *((_OWORD *)v17 + 2) = v24;
  v29 = v17;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v28, a3 + 3);
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_18:
  if (v15)
    operator delete(v15);
  if (v12)
    operator delete(v12);
  if (*operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] >= 1
    && (operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v25, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1657);
    v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Created all_diff cut generator of size: ", 40);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v25);
  }
}

void sub_22DB29E7C(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB29E90(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB29EA4(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB29EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  operations_research::sat::CutGenerator *v16;
  void *v17;
  void *v18;

  if (v18)
    operator delete(v18);
  if (v17)
  {
    operator delete(v17);
    operations_research::sat::CutGenerator::~CutGenerator(v16);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CutGenerator::~CutGenerator(v16);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreateLinMaxCutGenerator(int a1@<W0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  int *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  operations_research::sat::IntegerTrail *v51;
  void *v52;
  int64_t v53;
  const void *v54;
  int64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  void *v62;
  void *v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  int v70;
  _QWORD *v72;
  void *v73;
  void *v74;
  char *v75;
  void *v76;
  void *v77;
  char *v78;
  int v79;
  int v80;
  void *v81;
  char *v82;
  uint64_t v83;
  operations_research::sat::IntegerTrail *v84;
  uint64_t v85;
  void *v86;
  int v87[2];
  uint64_t v88;
  void *__src[3];
  void *v90;
  void *v91;
  void *__p;
  char *v93;
  _QWORD v94[3];
  _QWORD *v95;
  uint64_t v96;

  v8 = a5;
  v96 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  v86 = 0;
  *(_QWORD *)v87 = 0;
  v88 = 0;
  LODWORD(__src[0]) = a1;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)__src, (char *)__src + 4, 1uLL);
  v9 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  v70 = v9;
  if ((int)v9 >= 1)
  {
    v69 = a4;
    v10 = 0;
    v11 = v9;
    v72 = v8;
    while (1)
    {
      v12 = (_DWORD *)*a3;
      v14 = (char *)v8[1];
      v13 = v8[2];
      if ((unint64_t)v14 >= v13)
        break;
      *(_DWORD *)v14 = v12[v10];
      v15 = (uint64_t)(v14 + 4);
LABEL_25:
      v8[1] = v15;
      std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)&v86, *(void **)v87, *(char **)(*a2 + 56 * v10), *(char **)(*a2 + 56 * v10 + 8), (uint64_t)(*(_QWORD *)(*a2 + 56 * v10 + 8) - *(_QWORD *)(*a2 + 56 * v10)) >> 2);
      if (++v10 == v11)
      {
        v38 = (int *)v86;
        v39 = *(char **)v87;
        a4 = v69;
        goto LABEL_28;
      }
    }
    v16 = v11;
    v17 = a2;
    v18 = a3;
    v19 = (char *)*v8;
    v20 = (uint64_t)&v14[-*v8];
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v13 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(4 * v24);
      v26 = &v25[4 * v21];
      *v26 = v12[v10];
      v15 = (uint64_t)(v26 + 1);
      if (v14 != v19)
      {
LABEL_14:
        v27 = v14 - 4 - v19;
        if (v27 >= 0x2C)
        {
          v28 = v14 - &v25[v20];
          a3 = v18;
          a2 = v17;
          v11 = v16;
          if (v28 >= 0x20)
          {
            v29 = (v27 >> 2) + 1;
            v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
            v31 = &v14[-v30];
            v26 = (_DWORD *)((char *)v26 - v30);
            v32 = &v25[4 * v21 - 16];
            v33 = v14 - 16;
            v34 = v29 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 8;
            }
            while (v34);
            v14 = v31;
            if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_23:
              v37 = &v25[4 * v24];
              v8 = v72;
              *v72 = v26;
              v72[1] = v15;
              v72[2] = v37;
              if (v19)
                operator delete(v19);
              goto LABEL_25;
            }
          }
        }
        else
        {
          a3 = v18;
          a2 = v17;
          v11 = v16;
        }
        do
        {
          v36 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *--v26 = v36;
        }
        while (v14 != v19);
        goto LABEL_23;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12[v10];
      v15 = 4 * v21 + 4;
      if (v14 != v19)
        goto LABEL_14;
    }
    a3 = v18;
    a2 = v17;
    v11 = v16;
    goto LABEL_23;
  }
  v39 = 0;
  v38 = 0;
LABEL_28:
  v40 = 126 - 2 * __clz((v39 - (char *)v38) >> 2);
  if (v39 == (char *)v38)
    v41 = 0;
  else
    v41 = v40;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(v38, v39, (uint64_t)__src, v41, 1);
  v42 = (char *)v86;
  v43 = *(char **)v87;
  if (v86 != *(void **)v87)
  {
    v44 = (char *)v86 + 4;
    while (v44 != *(char **)v87)
    {
      v45 = *((_DWORD *)v44 - 1);
      v46 = *(_DWORD *)v44;
      v44 += 4;
      if (v45 == v46)
      {
        v47 = v44 - 8;
        while (v44 != v43)
        {
          v48 = v45;
          v45 = *(_DWORD *)v44;
          if (v48 != *(_DWORD *)v44)
          {
            *((_DWORD *)v47 + 1) = v45;
            v47 += 4;
          }
          v44 += 4;
        }
        v49 = v47 + 4;
        v50 = (char *)(v43 - (v47 + 4));
        if (v43 != v47 + 4)
        {
          if (v43 != &v50[(_QWORD)v49])
          {
            memmove(v47 + 4, &v50[(_QWORD)v49], 0);
            v42 = (char *)v86;
          }
          v43 = v49;
          *(_QWORD *)v87 = v49;
        }
        break;
      }
    }
  }
  std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v8, (void *)v8[1], v42, v43, (v43 - v42) >> 2);
  v51 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v52 = v86;
  v53 = *(_QWORD *)v87 - (_QWORD)v86;
  if (*(void **)v87 != v86)
  {
    if (v53 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v73 = operator new(*(_QWORD *)v87 - (_QWORD)v86);
    v75 = (char *)v73 + 4 * (v53 >> 2);
    memcpy(v73, v52, v53);
    v74 = v75;
  }
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v54 = (const void *)*a3;
  v55 = a3[1] - *a3;
  if (v55)
  {
    if (v55 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v76 = operator new(v55);
    v78 = (char *)v76 + 4 * (v55 >> 2);
    memcpy(v76, v54, v55);
    v77 = v78;
  }
  v79 = a1;
  v80 = v70;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(&v81, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v84 = v51;
  v85 = a4;
  operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1((uint64_t)__src, (uint64_t)&v73);
  v56 = operator new(0x68uLL);
  *v56 = &off_24F9859E0;
  operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1((uint64_t)(v56 + 1), (uint64_t)__src);
  v95 = v56;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v94, v8 + 3);
  v57 = v95;
  if (v95 == v94)
  {
    v58 = 4;
    v57 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_56;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_56:
  v59 = (char *)__p;
  if (__p)
  {
    v60 = v93;
    v61 = __p;
    if (v93 != __p)
    {
      do
      {
        v62 = (void *)*((_QWORD *)v60 - 4);
        if (v62)
        {
          *((_QWORD *)v60 - 3) = v62;
          operator delete(v62);
        }
        v63 = (void *)*((_QWORD *)v60 - 7);
        if (v63)
        {
          *((_QWORD *)v60 - 6) = v63;
          operator delete(v63);
        }
        v60 -= 56;
      }
      while (v60 != v59);
      v61 = __p;
    }
    v93 = v59;
    operator delete(v61);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  v64 = (char *)v81;
  if (v81)
  {
    v65 = v82;
    v66 = v81;
    if (v82 != v81)
    {
      do
      {
        v67 = (void *)*((_QWORD *)v65 - 4);
        if (v67)
        {
          *((_QWORD *)v65 - 3) = v67;
          operator delete(v67);
        }
        v68 = (void *)*((_QWORD *)v65 - 7);
        if (v68)
        {
          *((_QWORD *)v65 - 6) = v68;
          operator delete(v68);
        }
        v65 -= 56;
      }
      while (v65 != v64);
      v66 = v81;
    }
    v82 = v64;
    operator delete(v66);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v86)
  {
    *(_QWORD *)v87 = v86;
    operator delete(v86);
  }
}

void sub_22DB2A560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, operations_research::sat::CutGenerator *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  operations_research::sat::CutGenerator *v30;

  operator delete(v29);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a29);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a14);
  if (!__p)
  {
    operations_research::sat::CutGenerator::~CutGenerator(v30);
    _Unwind_Resume(a1);
  }
  a27 = (uint64_t)__p;
  operator delete(__p);
  operations_research::sat::CutGenerator::~CutGenerator(v30);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreateCumulativeCutGenerator(int **a1@<X0>, int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  int v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  operations_research::sat::IntegerTrail *v72;
  int *v73;
  int *v74;
  int64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  int64_t v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  char **v87;
  int **v88;
  uint64_t v89;
  _QWORD *v90;
  int *v91;
  void *v92;
  void *v93;
  char *v94;
  int v95;
  void *v96;
  void *v97;
  char *v98;
  operations_research::sat::IntegerTrail *v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102[4];
  void *__p;
  void *v104;
  _QWORD v105[3];
  _QWORD *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  if (a5 != a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, *a3, a3[1], (a3[1] - *a3) >> 2);
  v86 = a2;
  v87 = a3;
  v89 = a4;
  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(a4);
  v11 = (_QWORD *)v10;
  v12 = *a1;
  v88 = a1;
  v91 = a1[1];
  if (*a1 != v91)
  {
    v13 = a5[1];
    v90 = (_QWORD *)v10;
    do
    {
      v14 = *v12;
      v15 = *(_DWORD *)(v11[5] + 4 * v14);
      v16 = a5[2];
      if (v13 < v16)
      {
        *(_DWORD *)v13 = v15;
        v17 = v13 + 4;
        goto LABEL_23;
      }
      v18 = *a5;
      v19 = v13 - *a5;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v22 = v16 - v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = operator new(4 * v23);
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = v15;
        v17 = v25 + 4;
        if (v13 != v18)
        {
LABEL_18:
          v26 = v13 - 4 - v18;
          if (v26 < 0xBC
            || &v24[v19 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4]
            || &v13[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
            || (unint64_t)(v13 - &v24[v19]) < 0x20)
          {
            v27 = v13;
            v11 = v90;
          }
          else
          {
            v54 = (v26 >> 2) + 1;
            v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
            v27 = &v13[-v55];
            v25 -= v55;
            v56 = &v24[4 * v20 - 16];
            v57 = v13 - 16;
            v58 = v54 & 0x7FFFFFFFFFFFFFF8;
            v11 = v90;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 8;
            }
            while (v58);
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_21:
              v16 = &v24[4 * v23];
              *a5 = v25;
              a5[1] = v17;
              a5[2] = v16;
              if (!v18)
                goto LABEL_23;
LABEL_22:
              operator delete(v18);
              v16 = a5[2];
              goto LABEL_23;
            }
          }
          do
          {
            v28 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v25 - 1) = v28;
            v25 -= 4;
          }
          while (v27 != v18);
          goto LABEL_21;
        }
      }
      else
      {
        v24 = 0;
        v25 = (char *)(4 * v20);
        *(_DWORD *)(4 * v20) = v15;
        v17 = (char *)(4 * v20 + 4);
        if (v13 != v18)
          goto LABEL_18;
      }
      v11 = v90;
      v16 = &v24[4 * v23];
      *a5 = v25;
      a5[1] = v17;
      a5[2] = v16;
      if (v18)
        goto LABEL_22;
LABEL_23:
      a5[1] = v17;
      v29 = *(_DWORD *)(v11[8] + 4 * v14);
      if (v17 < v16)
      {
        *(_DWORD *)v17 = v29;
        v30 = v17 + 4;
        goto LABEL_39;
      }
      v31 = *a5;
      v32 = v17 - *a5;
      v33 = v32 >> 2;
      v34 = (v32 >> 2) + 1;
      if (v34 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v35 = v16 - v31;
      if (v35 >> 1 > v34)
        v34 = v35 >> 1;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v37 = operator new(4 * v36);
        v38 = &v37[4 * v33];
        *(_DWORD *)v38 = v29;
        v30 = v38 + 4;
        if (v17 != v31)
        {
LABEL_34:
          v39 = v17 - 4 - v31;
          if (v39 < 0xBC
            || &v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4]
            || &v17[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v17 - 4
            || (unint64_t)(v17 - v37 - v32) < 0x20)
          {
            v40 = v17;
            v11 = v90;
          }
          else
          {
            v60 = (v39 >> 2) + 1;
            v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
            v40 = &v17[-v61];
            v38 -= v61;
            v62 = &v37[4 * v33 - 16];
            v63 = v17 - 16;
            v64 = v60 & 0x7FFFFFFFFFFFFFF8;
            v11 = v90;
            do
            {
              v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            if (v60 == (v60 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_37:
              v16 = &v37[4 * v36];
              *a5 = v38;
              a5[1] = v30;
              a5[2] = v16;
              if (!v31)
                goto LABEL_39;
LABEL_38:
              operator delete(v31);
              v16 = a5[2];
              goto LABEL_39;
            }
          }
          do
          {
            v41 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v38 - 1) = v41;
            v38 -= 4;
          }
          while (v40 != v31);
          goto LABEL_37;
        }
      }
      else
      {
        v37 = 0;
        v38 = (char *)(4 * v33);
        *(_DWORD *)(4 * v33) = v29;
        v30 = (char *)(4 * v33 + 4);
        if (v17 != v31)
          goto LABEL_34;
      }
      v11 = v90;
      v16 = &v37[4 * v36];
      *a5 = v38;
      a5[1] = v30;
      a5[2] = v16;
      if (v31)
        goto LABEL_38;
LABEL_39:
      a5[1] = v30;
      v42 = *(_DWORD *)(v11[11] + 4 * v14);
      if (v30 >= v16)
      {
        v43 = *a5;
        v44 = v30 - *a5;
        v45 = v44 >> 2;
        v46 = (v44 >> 2) + 1;
        if (v46 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v47 = v16 - v43;
        if (v47 >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v49 = operator new(4 * v48);
          v50 = &v49[4 * v45];
          *(_DWORD *)v50 = v42;
          v13 = v50 + 4;
          if (v30 == v43)
            goto LABEL_60;
LABEL_57:
          v51 = v30 - 4 - v43;
          if (v51 < 0xBC)
          {
            v52 = v30;
            goto LABEL_59;
          }
          if (&v49[v44 - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v49[v44 - 4])
          {
            v52 = v30;
            goto LABEL_59;
          }
          if (&v30[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v30 - 4)
          {
            v52 = v30;
            goto LABEL_59;
          }
          if ((unint64_t)(v30 - v49 - v44) < 0x20)
          {
            v52 = v30;
            goto LABEL_59;
          }
          v66 = (v51 >> 2) + 1;
          v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
          v52 = &v30[-v67];
          v50 -= v67;
          v68 = &v49[4 * v45 - 16];
          v69 = v30 - 16;
          v70 = v66 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *v68 = v71;
            v68 -= 2;
            v69 -= 32;
            v70 -= 8;
          }
          while (v70);
          if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_59:
              v53 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *((_DWORD *)v50 - 1) = v53;
              v50 -= 4;
            }
            while (v52 != v43);
          }
        }
        else
        {
          v49 = 0;
          v50 = (char *)(4 * v45);
          *(_DWORD *)(4 * v45) = v42;
          v13 = (char *)(4 * v45 + 4);
          if (v30 != v43)
            goto LABEL_57;
        }
LABEL_60:
        *a5 = v50;
        a5[1] = v13;
        a5[2] = &v49[4 * v48];
        if (v43)
          operator delete(v43);
        goto LABEL_6;
      }
      *(_DWORD *)v30 = v42;
      v13 = v30 + 4;
LABEL_6:
      a5[1] = v13;
      ++v12;
    }
    while (v12 != v91);
  }
  v72 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v89);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v74 = *v88;
  v73 = v88[1];
  v75 = (char *)v73 - (char *)*v88;
  if (v73 != *v88)
  {
    if (v75 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v76 = (char *)operator new((char *)v73 - (char *)*v88);
    v77 = &v76[4 * (v75 >> 2)];
    v92 = v76;
    v94 = v77;
    memcpy(v76, v74, v75);
    v93 = v77;
  }
  v95 = v86;
  v97 = 0;
  v98 = 0;
  v96 = 0;
  v79 = *v87;
  v78 = v87[1];
  v80 = v78 - *v87;
  if (v78 != *v87)
  {
    if (v80 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v81 = (char *)operator new(v78 - *v87);
    v82 = &v81[4 * (v80 >> 2)];
    v96 = v81;
    v98 = v82;
    memcpy(v81, v79, v80);
    v97 = v82;
  }
  v99 = v72;
  v100 = v11;
  v101 = v89;
  operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v102, (uint64_t)&v92);
  v83 = operator new(0x58uLL);
  *v83 = &off_24F985A60;
  operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v83 + 1), (uint64_t)v102);
  v106 = v83;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v105, a5 + 3);
  v84 = v106;
  if (v106 == v105)
  {
    v85 = 4;
    v84 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_97;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_97:
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if (v102[0])
  {
    v102[1] = v102[0];
    operator delete(v102[0]);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
}

void sub_22DB2AD70(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2AD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  operations_research::sat::CutGenerator *v25;
  void *v26;

  operator delete(v26);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a25);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a15);
  operations_research::sat::CutGenerator::~CutGenerator(v25);
  _Unwind_Resume(a1);
}

void sub_22DB2ADC0(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2ADD4(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  operations_research::sat::CutGenerator *v20;

  if (__p)
    operator delete(__p);
  if (a15)
  {
    operator delete(a15);
    operations_research::sat::CutGenerator::~CutGenerator(v20);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CutGenerator::~CutGenerator(v20);
  _Unwind_Resume(a1);
}

void operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts(operations_research::KnapsackSolverForCuts *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 24);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 27));
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
LABEL_3:
    operator delete(v2);
LABEL_4:
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 14);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 15);
    v7 = (void *)*((_QWORD *)this + 14);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x22E31DF78](v8, 0x1060C40B86F7F5DLL);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v5;
    operator delete(v7);
  }
  operations_research::KnapsackPropagatorForCuts::~KnapsackPropagatorForCuts(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 > *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 <= *v10)
        {
          if (v73 > v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 > *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 <= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_QWORD *)a2 - 1);
            if (v98 <= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (uint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (uint64_t *)*v10;
        if ((uint64_t)v75 <= *v10)
        {
          if (v77 <= (uint64_t)v75)
          {
LABEL_144:
            v75 = (uint64_t *)v77;
            v92 = *((_QWORD *)a2 - 1);
            if (v92 <= (uint64_t)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_QWORD *)a2 - 1) = v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 > v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 > *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (uint64_t)v75;
          v79 = v10;
          v80 = (uint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 <= (uint64_t)v78)
          {
LABEL_136:
            v92 = *((_QWORD *)a2 - 1);
            if (v92 <= (uint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v77 <= (uint64_t)v75)
          {
            *v10 = (uint64_t)v75;
            v10[1] = (uint64_t)v78;
            v79 = v10 + 1;
            v80 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 <= (uint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (uint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (uint64_t *)a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 <= *v14)
            {
              if (v15 > v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 > *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 > v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 > v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 <= *v10)
          {
            if (v15 > v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 > *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 <= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 <= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 <= v28)
          {
            if (v29 > v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 > v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 <= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 <= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 <= v37)
          {
            if (v38 > v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 > v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 <= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 > *v25)
          {
            if (v43 <= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 <= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 <= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 > v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) > v22)
              goto LABEL_56;
            if (v22 <= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (uint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 <= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 <= v60);
            }
            v62 = (uint64_t *)a2;
            if (v10 < (uint64_t *)a2)
            {
              v62 = (uint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 > v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 <= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 > v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 > v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (uint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 <= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 <= v22);
          }
          if (v48 >= (uint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (uint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 > v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 <= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (uint64_t *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v10, v57);
          v10 = v57 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v57 + 1, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (uint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (uint64_t *)v81;
              if (v87 > v88)
              {
                v89 = v84;
                do
                {
                  *(uint64_t *)((char *)v10 + v89 + 8) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(uint64_t *)((char *)v10 + v89 - 8);
                  v89 -= 8;
                }
                while (v87 > v88);
                v86 = (uint64_t *)((char *)v10 + v89 + 8);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (uint64_t *)v81;
            if (v93 > v94)
            {
              do
              {
                *(_QWORD *)v81 = v94;
                v94 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v93 > v94);
              *(_QWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (uint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 <= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 <= *a1)
      {
        if (v13 <= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 <= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 <= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 <= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 > *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 <= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 <= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 <= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 > v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 <= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 <= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 <= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 <= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 <= *a1)
      {
        if (v3 <= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 > v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 <= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 > v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 > v26);
      *(uint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 <= *result)
  {
    if (v7 <= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 <= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 > *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 <= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 <= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 <= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 <= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 > *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 > *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 > *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 > *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 > *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 > *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v34 = (unint64_t)(v4 - 2) >> 1;
    v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        v36 = (2 * v35) | 1;
        v37 = &a1[8 * v36];
        if (2 * v35 + 2 >= v4)
        {
          v38 = *(_QWORD *)v37;
          v40 = &a1[8 * v35];
          v41 = *(_QWORD *)v40;
          if (*(_QWORD *)v37 <= *(_QWORD *)v40)
            goto LABEL_78;
        }
        else
        {
          v38 = *((_QWORD *)v37 + 1);
          v39 = *(_QWORD *)v37 <= v38;
          if (*(_QWORD *)v37 < v38)
            v38 = *(_QWORD *)v37;
          if (!v39)
          {
            v37 += 8;
            v36 = 2 * v35 + 2;
          }
          v40 = &a1[8 * v35];
          v41 = *(_QWORD *)v40;
          if (v38 <= *(_QWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_QWORD *)v40 = v38;
              v40 = v37;
              if (v34 < v36)
                break;
              v43 = (2 * v36) | 1;
              v37 = &a1[8 * v43];
              v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                v38 = *(_QWORD *)v37;
                v42 = *((_QWORD *)v37 + 1);
                if (*(_QWORD *)v37 >= v42)
                  v38 = *((_QWORD *)v37 + 1);
                if (*(_QWORD *)v37 <= v42)
                  v36 = v43;
                else
                  v37 += 8;
                if (v38 > v41)
                  break;
              }
              else
              {
                v38 = *(_QWORD *)v37;
                v36 = v43;
                if (*(_QWORD *)v37 > v41)
                  break;
              }
            }
            *(_QWORD *)v40 = v41;
          }
        }
      }
      v15 = v35-- <= 0;
    }
    while (!v15);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      v6 = *(_QWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_QWORD *)v7;
        if (*(_QWORD *)v7 > v6)
        {
          *(_QWORD *)v7 = v6;
          *(_QWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v9 = (uint64_t *)(a1 + 16);
    v10 = a2;
    while (1)
    {
      v11 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 > *(_QWORD *)a1)
      {
        *(_QWORD *)v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v11;
        v12 = *((_QWORD *)a1 + 1);
        if (v3 == 16)
        {
          v13 = a1 + 8;
          v14 = 1;
          if (v12 <= v11)
            goto LABEL_26;
        }
        else
        {
          v15 = v12 <= *v9;
          if (v12 >= *v9)
            v12 = *v9;
          if (v15)
            v13 = a1 + 8;
          else
            v13 = a1 + 16;
          if (v15)
            v14 = 1;
          else
            v14 = 2;
          if (v12 <= v11)
          {
LABEL_26:
            v16 = a1;
            while (1)
            {
              *(_QWORD *)v16 = v12;
              v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14)
                break;
              v18 = (2 * v14) | 1;
              v13 = &a1[8 * v18];
              v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                v12 = *(_QWORD *)v13;
                v17 = *((_QWORD *)v13 + 1);
                if (*(_QWORD *)v13 >= v17)
                  v12 = *((_QWORD *)v13 + 1);
                if (*(_QWORD *)v13 <= v17)
                  v14 = v18;
                else
                  v13 += 8;
                if (v12 > v11)
                  break;
              }
              else
              {
                v12 = *(_QWORD *)v13;
                v14 = v18;
                if (*(_QWORD *)v13 > v11)
                  break;
              }
            }
            *(_QWORD *)v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    v19 = (unint64_t)v3 >> 3;
    do
    {
      v20 = 0;
      v21 = *(_QWORD *)a1;
      v22 = (unint64_t)(v19 - 2) >> 1;
      v23 = a1;
      do
      {
        while (1)
        {
          v26 = &v23[8 * v20 + 8];
          v27 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v19)
            break;
          v20 = v27;
          *(_QWORD *)v23 = *(_QWORD *)v26;
          v23 = v26;
          if (v27 > v22)
            goto LABEL_51;
        }
        v24 = *(_QWORD *)v26;
        v25 = *((_QWORD *)v26 + 1);
        if (*(_QWORD *)v26 >= v25)
          v24 = *((_QWORD *)v26 + 1);
        if (*(_QWORD *)v26 <= v25)
          v20 = v27;
        else
          v26 += 8;
        *(_QWORD *)v23 = v24;
        v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 == a2)
      {
        *(_QWORD *)v26 = v21;
      }
      else
      {
        *(_QWORD *)v26 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
        v28 = v26 - a1 + 8;
        if (v28 >= 9)
        {
          v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
          v30 = &a1[8 * v29];
          v31 = *(_QWORD *)v30;
          v32 = *(_QWORD *)v26;
          if (*(_QWORD *)v30 > *(_QWORD *)v26)
          {
            do
            {
              *(_QWORD *)v26 = v31;
              v26 = v30;
              if (!v29)
                break;
              v29 = (v29 - 1) >> 1;
              v30 = &a1[8 * v29];
              v31 = *(_QWORD *)v30;
            }
            while (*(_QWORD *)v30 > v32);
            *(_QWORD *)v26 = v32;
          }
        }
      }
      v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  int *v5;
  char **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = a2;
  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (a4)
  {
    v8 = __clz(a4);
    v9 = 0xFFFFFFFFFFFFFFFFLL >> v8;
    if (v8 == 61)
      v10 = 6;
    else
      v10 = (0xFFFFFFFFFFFFFFFFLL >> v8) - (0x1FFFFFFFFFFFFFFFuLL >> v8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 24) = v9;
    v11 = (char *)operator new(v9 + 9 + 4 * v9);
    v12 = &v11[v9 + 9];
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    memset(v11, 128, v9 + 8);
    v11[v9] = -1;
    *(_QWORD *)(a1 + 40) = v10;
    if (v5 == a3)
      return a1;
  }
  else
  {
    v12 = 0;
    if (a2 == a3)
      return a1;
  }
  do
  {
    v16 = 0;
    v19 = *v5;
    v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v19));
    v17 = (v20 >> 7) ^ (*(_QWORD *)a1 >> 12);
    v21 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v13 = v17 & v21;
      v14 = *(_QWORD *)(*(_QWORD *)a1 + v13);
      v15 = ((v14 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                          * (v20 & 0x7F))) & 0x8080808080808080;
      if (v15)
        break;
LABEL_12:
      if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      {
        v18 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert((uint64_t *)a1, v20);
        v12 = *v7;
        *(_DWORD *)&(*v7)[4 * v18] = *v5;
        goto LABEL_15;
      }
      v16 += 8;
      v17 = v16 + v13;
    }
    while (*(_DWORD *)&v12[4 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v21)] != (_DWORD)v19)
    {
      v15 &= v15 - 1;
      if (!v15)
        goto LABEL_12;
    }
LABEL_15:
    ++v5;
  }
  while (v5 != a3);
  return a1;
}

void sub_22DB2C0C8(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *v1;

  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2C0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

operations_research::sat::ImpliedBoundsProcessor *operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor(operations_research::sat::ImpliedBoundsProcessor *this, char **a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;
  char *v7;
  int64_t v8;
  char *v9;

  v4 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set((uint64_t)this, a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::raw_hash_set(v4 + 48, a2 + 6);
  v5 = *((_OWORD *)a2 + 6);
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 6) = v5;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v7 = a2[14];
  v6 = a2[15];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *((_QWORD *)this + 14) = v9;
    *((_QWORD *)this + 15) = v9;
    *((_QWORD *)this + 16) = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, 12 * ((v8 - 12) / 0xCuLL) + 12);
    *((_QWORD *)this + 15) = &v9[12 * ((v8 - 12) / 0xCuLL) + 12];
  }
  return this;
}

void sub_22DB2C244(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2C258(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~flat_hash_map(v2);
  absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  unint64_t v19;

  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[2];
  if (v4 == (char *)7)
  {
    v5 = 8;
  }
  else
  {
    v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5)
      goto LABEL_5;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  v6 = a2[1];
  v7 = *a2;
  if (**a2 <= -2)
  {
    do
    {
      v8 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v7 = (_QWORD *)((char *)v7 + v8);
      v6 += 4 * v8;
    }
    while (*(char *)v7 < -1);
  }
  v9 = &a2[3][(_QWORD)*a2];
  while (v7 != (_QWORD *)v9)
  {
    v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v6)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v6));
    v11 = *(char **)a1;
    v12 = *(_QWORD *)(a1 + 24);
    v13 = ((v10 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v12;
    v14 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + v13) & (~*(_QWORD *)(*(_QWORD *)a1 + v13) << 7) & 0x8080808080808080;
          !i;
          i = *(_QWORD *)&v11[v13] & (~*(_QWORD *)&v11[v13] << 7) & 0x8080808080808080)
    {
      v14 += 8;
      v13 = (v14 + v13) & v12;
    }
    v16 = (v13 + (__clz(__rbit64(i)) >> 3)) & v12;
    v11[v16] = v10 & 0x7F;
    *(_BYTE *)((*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + ((v16 - 8) & *(_QWORD *)(a1 + 24)) + 1) = v10 & 0x7F;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v16) = *(_DWORD *)v6;
    v17 = *(unint64_t **)(a1 + 32);
    if (v17)
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v17, v10, v14);
    v18 = *((char *)v7 + 1);
    v7 = (_QWORD *)((char *)v7 + 1);
    v6 += 4;
    if (v18 <= -2)
    {
      do
      {
        v19 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v7 = (_QWORD *)((char *)v7 + v19);
        v6 += 4 * v19;
      }
      while (*(char *)v7 < -1);
    }
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_22DB2C528(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2C53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::raw_hash_set(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  int v22;
  unint64_t v23;

  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[2];
  if (v4 == (char *)7)
  {
    v5 = 8;
  }
  else
  {
    v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5)
      goto LABEL_5;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  v6 = *a2;
  v7 = a2[1];
  if (**a2 > -2)
  {
    v8 = *a2;
    v11 = a2[3];
    v10 = &v11[(_QWORD)v6];
    if (v6 == &v11[(_QWORD)v6])
      goto LABEL_20;
  }
  else
  {
    v8 = *a2;
    do
    {
      v9 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 += v9;
      v7 += 40 * v9;
    }
    while (*v8 < -1);
    v10 = &a2[3][(_QWORD)v6];
    if (v8 == v10)
      goto LABEL_20;
  }
  do
  {
    v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v7)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v7));
    v13 = *(char **)a1;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = ((v12 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v14;
    v16 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + v15) & (~*(_QWORD *)(*(_QWORD *)a1 + v15) << 7) & 0x8080808080808080;
          !i;
          i = *(_QWORD *)&v13[v15] & (~*(_QWORD *)&v13[v15] << 7) & 0x8080808080808080)
    {
      v16 += 8;
      v15 = (v16 + v15) & v14;
    }
    v18 = (v15 + (__clz(__rbit64(i)) >> 3)) & v14;
    v13[v18] = v12 & 0x7F;
    *(_BYTE *)((*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + ((v18 - 8) & *(_QWORD *)(a1 + 24)) + 1) = v12 & 0x7F;
    v19 = *(_QWORD *)(a1 + 8) + 40 * v18;
    *(_DWORD *)v19 = *(_DWORD *)v7;
    v20 = *(_OWORD *)(v7 + 8);
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v7 + 24);
    *(_OWORD *)(v19 + 8) = v20;
    v21 = *(unint64_t **)(a1 + 32);
    if (v21)
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v21, v12, v16);
    v22 = *++v8;
    v7 += 40;
    if (v22 <= -2)
    {
      do
      {
        v23 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v8 += v23;
        v7 += 40 * v23;
      }
      while (*v8 < -1);
    }
  }
  while (v8 != v10);
LABEL_20:
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_22DB2C7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_22DB2C7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 40 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v27 = a1[4];
    if (!v27)
      return;
LABEL_21:
    *((_QWORD *)v27 + 4) = v14 >> 3;
    *((_QWORD *)v27 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v21 = &v5[40 * (_QWORD)v13];
      v22 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v21)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v21));
      v23 = *a1;
      v24 = a1[3];
      v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      v26 = *(_QWORD *)&(*a1)[v25] & (~*(_QWORD *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v25 = (v15 + v25) & (unint64_t)v24;
          v26 = *(_QWORD *)&v23[v25] & (~*(_QWORD *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = (uint64_t)&a1[1][40 * v16];
      v19 = *(_OWORD *)v21;
      v20 = *((_OWORD *)v21 + 1);
      *(_QWORD *)(v18 + 32) = *((_QWORD *)v21 + 4);
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v27 = a1[4];
  if (v27)
    goto LABEL_21;
}

void operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(operations_research::sat::ImpliedBoundsProcessor *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  if (*((_QWORD *)this + 9))
  {
    operator delete(*((void **)this + 6));
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 10);
  if (v3)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
  if (*((_QWORD *)this + 3))
  {
    operator delete(*(void **)this);
    *((_QWORD *)this + 5) = 0;
    *(_QWORD *)this = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char v83;

  while (2)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 2);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
LABEL_34:
        v43 = *(_QWORD *)a4;
        v44 = *(_QWORD *)(a2 - 12);
        if (*(_QWORD *)a4 < v44)
        {
          v45 = *(_DWORD *)(a2 - 4);
          v46 = *(_DWORD *)(a4 + 8);
LABEL_36:
          *(_QWORD *)(a2 - 12) = v43;
          *(_QWORD *)a4 = v44;
          *(_DWORD *)(a2 - 4) = v46;
          *(_DWORD *)(a4 + 8) = v45;
          return;
        }
        if (v44 >= v43)
        {
          v46 = *(_DWORD *)(a4 + 8);
          v45 = *(_DWORD *)(a2 - 4);
          if (v46 < v45)
            goto LABEL_36;
        }
        return;
      case 3uLL:
LABEL_37:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a3, a4 + 12);
        return;
      case 4uLL:
LABEL_38:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
        v47 = *(_QWORD *)a4;
        v48 = *(_QWORD *)(a2 - 36);
        if (*(_QWORD *)a4 >= v48)
        {
          if (v48 < v47)
            return;
          v50 = *(_DWORD *)(a4 + 8);
          v49 = *(_DWORD *)(a2 - 28);
          if (v50 >= v49)
            return;
        }
        else
        {
          v49 = *(_DWORD *)(a2 - 28);
          v50 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(a2 - 36) = v47;
        *(_QWORD *)a4 = v48;
        *(_DWORD *)(a2 - 28) = v50;
        *(_DWORD *)(a4 + 8) = v49;
        v51 = *(_QWORD *)(a2 - 36);
        v52 = *(_QWORD *)(a2 - 24);
        if (v51 >= v52)
        {
          if (v52 < v51)
            return;
          v54 = *(_DWORD *)(a2 - 28);
          v53 = *(_DWORD *)(a2 - 16);
          if (v54 >= v53)
            return;
        }
        else
        {
          v53 = *(_DWORD *)(a2 - 16);
          v54 = *(_DWORD *)(a2 - 28);
        }
        *(_QWORD *)(a2 - 24) = v51;
        *(_QWORD *)(a2 - 36) = v52;
        *(_DWORD *)(a2 - 16) = v54;
        *(_DWORD *)(a2 - 28) = v53;
        v55 = *(_QWORD *)(a2 - 12);
        if (v51 < v55)
        {
          v56 = *(_DWORD *)(a2 - 4);
LABEL_98:
          *(_QWORD *)(a2 - 12) = v51;
          *(_QWORD *)(a2 - 24) = v55;
          *(_DWORD *)(a2 - 4) = v54;
          *(_DWORD *)(a2 - 16) = v56;
          return;
        }
        if (v55 >= v51)
        {
          v56 = *(_DWORD *)(a2 - 4);
          if (v54 < v56)
            goto LABEL_98;
        }
        return;
      case 5uLL:
LABEL_44:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24, a2 - 36, a2 - 36, a3, a4 + 12);
        return;
      default:
        if (a2 - a4 < 288)
          goto LABEL_54;
        if (!a6)
          goto LABEL_45;
        v15 = v14 >> 1;
        v16 = a2 - 12 * (v14 >> 1);
        v17 = a4 + 12;
        v80 = a3;
        if (v14 <= 0x80)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12 * (v14 >> 1), a2 - 12 * (v14 >> 1), a1, a2, v17, a4 + 12);
          v23 = a6 - 1;
          if ((a7 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12 * (v14 >> 1), a2 - 12 * (v14 >> 1), v17, a4 + 12);
          v18 = a2 - 12 * v15 + 12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12, a2 - 12, v18, v18, a4 + 24, a4 + 24);
          v19 = a2 + 12 * ~v15;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 24, a2 - 24, v19, v19, a4 + 36, a4 + 36);
          v20 = v18;
          v21 = v18;
          a3 = v80;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(v20, v21, v16, v16, v19, v19);
          v22 = *(_QWORD *)(a2 - 12);
          *(_QWORD *)(a2 - 12) = *(_QWORD *)(v16 - 12);
          *(_QWORD *)(v16 - 12) = v22;
          LODWORD(v22) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = *(_DWORD *)(v16 - 4);
          *(_DWORD *)(v16 - 4) = v22;
          v23 = a6 - 1;
          if ((a7 & 1) != 0)
            goto LABEL_13;
        }
        v24 = *(_QWORD *)(a2 - 12);
        if (*(_QWORD *)a2 < v24 || v24 >= *(_QWORD *)a2 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 4))
        {
LABEL_13:
          a6 = v23;
          goto LABEL_14;
        }
        std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a1, a2, a3, (uint64_t *)a4);
        a1 = v28;
        a2 = v29;
        v30 = 2 - a6;
LABEL_22:
        v33 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 2);
        break;
    }
    switch(v33)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        goto LABEL_34;
      case 3uLL:
        goto LABEL_37;
      case 4uLL:
        goto LABEL_38;
      case 5uLL:
        goto LABEL_44;
      default:
        if (a2 - a4 > 287)
        {
          if (v30 == 1)
          {
LABEL_45:
            if (a2 != a4)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, a4, a3, a4, a5);
            return;
          }
          v34 = v33 >> 1;
          v35 = a2 - 12 * (v33 >> 1);
          if (v33 < 0x81)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12 * (v33 >> 1), a2 - 12 * (v33 >> 1), a1, a2, a4 + 12, a4 + 12);
            v41 = *(_QWORD *)a2;
            v42 = *(_QWORD *)(a2 - 12);
            if (*(_QWORD *)a2 < v42)
              goto LABEL_31;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12 * (v33 >> 1), a2 - 12 * (v33 >> 1), a4 + 12, a4 + 12);
            v36 = a2 - 12 * v34 + 12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12, a2 - 12, v36, v36, a4 + 24, a4 + 24);
            v37 = a2 + 12 * ~v34;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 24, a2 - 24, v37, v37, a4 + 36, a4 + 36);
            v38 = v36;
            v39 = v36;
            a3 = v80;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(v38, v39, v35, v35, v37, v37);
            v40 = *(_QWORD *)(a2 - 12);
            *(_QWORD *)(a2 - 12) = *(_QWORD *)(v35 - 12);
            *(_QWORD *)(v35 - 12) = v40;
            LODWORD(v40) = *(_DWORD *)(a2 - 4);
            *(_DWORD *)(a2 - 4) = *(_DWORD *)(v35 - 4);
            *(_DWORD *)(v35 - 4) = v40;
            v41 = *(_QWORD *)a2;
            v42 = *(_QWORD *)(a2 - 12);
            if (*(_QWORD *)a2 < v42)
              goto LABEL_31;
          }
          if (v42 < v41 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a2 - 4))
          {
            std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a1, a2, a3, (uint64_t *)a4);
            a1 = v31;
            a2 = v32;
            ++v30;
            goto LABEL_22;
          }
LABEL_31:
          a7 = 0;
          a6 = -v30;
LABEL_14:
          std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a2, (_QWORD *)a4, (uint64_t)&v81);
          v25 = v81;
          v26 = v82;
          if (!v83)
            goto LABEL_2;
          v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, v81, v82);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>((uint64_t)v26 - 12, (uint64_t)v26 - 12, v80, (uint64_t *)a4))
          {
            if ((v27 & 1) != 0)
            {
              a1 = v25;
              a2 = (uint64_t)v26 - 12;
              a3 = v80;
              continue;
            }
LABEL_2:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(a1, a2, v25, v26, a5, a6, a7 & 1);
            a7 = 0;
            a2 = (uint64_t)v26 - 12;
            a1 = v25;
            a3 = v80;
            continue;
          }
          a3 = v25;
          a4 = (uint64_t)v26;
          if ((v27 & 1) != 0)
            return;
          continue;
        }
        a7 = 0;
LABEL_54:
        v57 = a2 - 12;
        v59 = a2 == a4 || v57 == a4;
        if ((a7 & 1) != 0)
        {
          if (v59)
            return;
          v60 = 0;
          v61 = a2 - 12;
LABEL_66:
          v63 = v57 + 12;
          v64 = *(_QWORD *)v57;
          v66 = *(_QWORD *)(v61 - 12);
          v61 -= 12;
          v65 = v66;
          if (v66 >= *(_QWORD *)v57)
          {
            if (v64 < v65)
              goto LABEL_65;
            v67 = *(_DWORD *)(v57 - 4);
            v68 = *(_DWORD *)(v57 + 8);
            if (v67 >= v68)
              goto LABEL_65;
          }
          else
          {
            v67 = *(_DWORD *)(v57 - 4);
            v68 = *(_DWORD *)(v57 + 8);
          }
          *(_QWORD *)(v57 - 12) = v64;
          *(_DWORD *)(v57 - 4) = v68;
          v62 = a2;
          if (v63 == a2)
            goto LABEL_64;
          v69 = v60;
          v62 = v63;
          while (1)
          {
            v72 = *(_QWORD *)(a2 + v69);
            if (v65 < v72)
            {
              v70 = *(_DWORD *)(a2 + v69 + 8);
            }
            else
            {
              if (v72 < v65)
              {
                v62 = a2 + v69;
LABEL_64:
                *(_QWORD *)(v62 - 12) = v65;
                *(_DWORD *)(v62 - 4) = v67;
LABEL_65:
                v60 -= 12;
                v57 = v61;
                if (v61 == a4)
                  return;
                goto LABEL_66;
              }
              v70 = *(_DWORD *)(a2 + v69 + 8);
              if (v67 >= v70)
                goto LABEL_64;
            }
            v62 += 12;
            v71 = a2 + v69;
            *(_QWORD *)(v71 - 12) = v72;
            *(_DWORD *)(v71 - 4) = v70;
            v69 += 12;
            if (!v69)
            {
              v62 = a2;
              goto LABEL_64;
            }
          }
        }
        if (!v59)
        {
          v73 = a2 - 4;
          v74 = a2 - 12;
          while (1)
          {
            v76 = *(_QWORD *)(v74 - 12);
            v74 -= 12;
            v75 = v76;
            v77 = *(_QWORD *)v57;
            if (v76 < *(_QWORD *)v57)
              break;
            if (v77 >= v75)
            {
              v78 = *(_DWORD *)(v57 - 4);
              if (v78 < *(_DWORD *)(v57 + 8))
                goto LABEL_87;
            }
LABEL_82:
            v73 -= 12;
            v57 = v74;
            if (v74 == a4)
              return;
          }
          v78 = *(_DWORD *)(v57 - 4);
LABEL_87:
          for (i = v73; ; i += 12)
          {
            *(_QWORD *)(i - 20) = v77;
            *(_DWORD *)(i - 12) = *(_DWORD *)i;
            v77 = *(_QWORD *)(i + 4);
            if (v75 >= v77 && (v77 < v75 || v78 >= *(_DWORD *)(i + 12)))
              break;
          }
          *(_QWORD *)(i - 8) = v75;
          *(_DWORD *)i = v78;
          goto LABEL_82;
        }
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  v6 = *(_QWORD *)(a4 - 12);
  v7 = *(_QWORD *)(a2 - 12);
  if (v6 < v7 || v7 >= v6 && *(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
  {
    v8 = *(_QWORD *)(a6 - 12);
    if (v8 < v6)
    {
      v9 = *(_DWORD *)(a6 - 4);
LABEL_16:
      *(_QWORD *)(a2 - 12) = v8;
      *(_QWORD *)(a6 - 12) = v7;
      v19 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v9;
      *(_DWORD *)(a6 - 4) = v19;
      return 1;
    }
    if (v6 >= v8)
    {
      v9 = *(_DWORD *)(a6 - 4);
      v13 = *(_DWORD *)(a4 - 4);
      if (v9 < v13)
        goto LABEL_16;
    }
    else
    {
      v13 = *(_DWORD *)(a4 - 4);
    }
    *(_QWORD *)(a2 - 12) = v6;
    *(_QWORD *)(a4 - 12) = v7;
    v20 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = v13;
    *(_DWORD *)(a4 - 4) = v20;
    v21 = *(_QWORD *)(a6 - 12);
    if (v21 >= v7)
    {
      if (v7 < v21)
        return 1;
      v22 = *(_DWORD *)(a6 - 4);
      if (v22 >= v20)
        return 1;
    }
    else
    {
      v22 = *(_DWORD *)(a6 - 4);
    }
    *(_QWORD *)(a4 - 12) = v21;
    *(_QWORD *)(a6 - 12) = v7;
    *(_DWORD *)(a4 - 4) = v22;
    result = 2;
    *(_DWORD *)(a6 - 4) = v20;
    return result;
  }
  v10 = *(_QWORD *)(a6 - 12);
  if (v10 >= v6)
  {
    if (v6 < v10)
      return 0;
    v12 = *(_DWORD *)(a6 - 4);
    v11 = *(_DWORD *)(a4 - 4);
    if (v12 >= v11)
      return 0;
  }
  else
  {
    v11 = *(_DWORD *)(a4 - 4);
    v12 = *(_DWORD *)(a6 - 4);
  }
  *(_QWORD *)(a4 - 12) = v10;
  *(_QWORD *)(a6 - 12) = v6;
  *(_DWORD *)(a4 - 4) = v12;
  *(_DWORD *)(a6 - 4) = v11;
  v14 = *(_QWORD *)(a4 - 12);
  v15 = *(_QWORD *)(a2 - 12);
  if (v14 < v15)
  {
    v16 = *(_DWORD *)(a2 - 4);
    v17 = *(_DWORD *)(a4 - 4);
LABEL_14:
    *(_QWORD *)(a2 - 12) = v14;
    *(_QWORD *)(a4 - 12) = v15;
    *(_DWORD *)(a2 - 4) = v17;
    result = 2;
    *(_DWORD *)(a4 - 4) = v16;
    return result;
  }
  if (v15 >= v14)
  {
    v17 = *(_DWORD *)(a4 - 4);
    v16 = *(_DWORD *)(a2 - 4);
    if (v17 < v16)
      goto LABEL_14;
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *i)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2 - 12;
  v4 = *(_QWORD *)(a2 - 12);
  v6 = *(_DWORD *)(a2 - 4);
  v7 = *i;
  if (v4 >= *i && (v7 < v4 || v6 >= *((_DWORD *)i + 2)))
  {
    while (v5 > (unint64_t)i)
    {
      v19 = *(_QWORD *)(v5 - 12);
      if (v4 < v19 || v19 >= v4 && v6 < *(_DWORD *)(v5 - 4))
        break;
      v5 -= 12;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 24);
    if (v4 >= v8)
    {
      v9 = (uint64_t *)(a2 - 36);
      do
      {
        if (v8 >= v4 && v6 < *((_DWORD *)v9 + 5))
          break;
        v10 = *v9;
        v9 = (uint64_t *)((char *)v9 - 12);
        v8 = v10;
      }
      while (v4 >= v10);
      v5 = (unint64_t)(v9 + 3);
    }
  }
  if (v5 > (unint64_t)i)
  {
    for (i = (uint64_t *)((char *)i + 12); v4 < v7 || v7 >= v4 && v6 < *((_DWORD *)i - 1); i = (uint64_t *)((char *)i + 12))
    {
      v11 = *i;
      v7 = v11;
    }
  }
  if ((unint64_t)i >= v5)
  {
    v12 = v5;
  }
  else
  {
    v12 = v5;
    do
    {
      v13 = *(_QWORD *)(v12 - 12);
      v12 -= 12;
      *(_QWORD *)v12 = *(uint64_t *)((char *)i - 12);
      *(uint64_t *)((char *)i - 12) = v13;
      v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *((_DWORD *)i - 1);
      *((_DWORD *)i - 1) = v14;
      v15 = *(_QWORD *)(v12 - 12);
      if (v4 >= v15)
      {
        v16 = (uint64_t *)(v5 - 36);
        do
        {
          if (v15 >= v4 && v6 < *((_DWORD *)v16 + 5))
            break;
          v17 = *v16;
          v16 = (uint64_t *)((char *)v16 - 12);
          v15 = v17;
        }
        while (v4 >= v17);
        v12 = (unint64_t)(v16 + 3);
      }
      do
      {
        do
        {
          i = (uint64_t *)((char *)i + 12);
          v18 = *(uint64_t *)((char *)i - 12);
        }
        while (v4 < v18);
      }
      while (v18 >= v4 && v6 < *((_DWORD *)i - 1));
      v5 = v12;
    }
    while ((unint64_t)i < v12);
  }
  if (v12 + 12 != a2)
  {
    *(_QWORD *)(a2 - 12) = *(_QWORD *)v12;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)v12 = v4;
  *(_DWORD *)(v12 + 8) = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(uint64_t a1@<X1>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = 0;
  v4 = *(_QWORD *)(a1 - 12);
  v5 = *(_DWORD *)(a1 - 4);
  while (1)
  {
    v6 = *(_QWORD *)(a1 + v3 - 24);
    if (v6 >= v4 && (v4 < v6 || *(_DWORD *)(a1 + v3 - 16) >= v5))
      break;
    v3 -= 12;
  }
  v7 = a1 + v3 - 12;
  if (v3)
  {
    do
    {
      v9 = *a2;
      a2 = (_QWORD *)((char *)a2 + 12);
      v8 = v9;
    }
    while (v9 >= v4 && (v4 < v8 || *((_DWORD *)a2 - 1) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      v11 = *a2;
      a2 = (_QWORD *)((char *)a2 + 12);
      v10 = v11;
      if (v11 < v4)
        break;
      if (v4 < v10)
      {
        if ((unint64_t)a2 >= v7)
          break;
      }
      else if (*((_DWORD *)a2 - 1) < v5 || (unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  v13 = v7;
  if ((unint64_t)a2 < v7)
  {
    v14 = a2;
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      *(_QWORD *)v13 = *(_QWORD *)((char *)v14 - 12);
      *(_QWORD *)((char *)v14 - 12) = v15;
      v16 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v14 - 1);
      *((_DWORD *)v14 - 1) = v16;
      while (1)
      {
        v17 = *(_QWORD *)(v13 - 12);
        if (v17 >= v4 && (v4 < v17 || *(_DWORD *)(v13 - 4) >= v5))
          break;
        v13 -= 12;
      }
      do
      {
        v19 = *v14;
        v14 = (_QWORD *)((char *)v14 + 12);
        v18 = v19;
      }
      while (v19 >= v4 && (v4 < v18 || *((_DWORD *)v14 - 1) >= v5));
    }
    while ((unint64_t)v14 < v13);
  }
  v20 = v13 + 12;
  if (v13 + 12 != a1)
  {
    *(_QWORD *)(a1 - 12) = *(_QWORD *)v13;
    *(_DWORD *)(a1 - 4) = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)v13 = v4;
  *(_DWORD *)(v13 + 8) = v5;
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;

  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a4) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v21 = *a4;
      v22 = *(_QWORD *)(a2 - 12);
      if (*a4 >= v22)
      {
        if (v22 < v21)
          return 1;
        v24 = *((_DWORD *)a4 + 2);
        v23 = *(_DWORD *)(a2 - 4);
        if (v24 >= v23)
          return 1;
      }
      else
      {
        v23 = *(_DWORD *)(a2 - 4);
        v24 = *((_DWORD *)a4 + 2);
      }
      *(_QWORD *)(a2 - 12) = v21;
      *a4 = v22;
      *(_DWORD *)(a2 - 4) = v24;
      *((_DWORD *)a4 + 2) = v23;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a3, (uint64_t)a4 + 12);
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
      v25 = *a4;
      v26 = *(_QWORD *)(a2 - 36);
      if (*a4 >= v26)
      {
        if (v26 < v25)
          return 1;
        v28 = *((_DWORD *)a4 + 2);
        v27 = *(_DWORD *)(a2 - 28);
        if (v28 >= v27)
          return 1;
      }
      else
      {
        v27 = *(_DWORD *)(a2 - 28);
        v28 = *((_DWORD *)a4 + 2);
      }
      *(_QWORD *)(a2 - 36) = v25;
      *a4 = v26;
      *(_DWORD *)(a2 - 28) = v28;
      *((_DWORD *)a4 + 2) = v27;
      v29 = *(_QWORD *)(a2 - 36);
      v30 = *(_QWORD *)(a2 - 24);
      if (v29 >= v30)
      {
        if (v30 < v29)
          return 1;
        v32 = *(_DWORD *)(a2 - 28);
        v31 = *(_DWORD *)(a2 - 16);
        if (v32 >= v31)
          return 1;
      }
      else
      {
        v31 = *(_DWORD *)(a2 - 16);
        v32 = *(_DWORD *)(a2 - 28);
      }
      *(_QWORD *)(a2 - 24) = v29;
      *(_QWORD *)(a2 - 36) = v30;
      *(_DWORD *)(a2 - 16) = v32;
      *(_DWORD *)(a2 - 28) = v31;
      v33 = *(_QWORD *)(a2 - 12);
      if (v29 < v33)
      {
        v34 = *(_DWORD *)(a2 - 4);
LABEL_31:
        *(_QWORD *)(a2 - 12) = v29;
        *(_QWORD *)(a2 - 24) = v33;
        *(_DWORD *)(a2 - 4) = v32;
        *(_DWORD *)(a2 - 16) = v34;
        return 1;
      }
      if (v33 >= v29)
      {
        v34 = *(_DWORD *)(a2 - 4);
        if (v32 < v34)
          goto LABEL_31;
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24, a2 - 36, a2 - 36, a3, (uint64_t)a4 + 12);
      return 1;
    default:
      v7 = a2 - 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
      v9 = a2 - 36;
      if ((uint64_t *)(a2 - 36) == a4)
        goto LABEL_34;
      v8 = 0;
      v10 = 0;
      v11 = a2 - 36;
      while (2)
      {
        v13 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        v12 = v13;
        v14 = *(_QWORD *)(v7 - 12);
        if (v13 >= v14)
        {
          if (v14 < v12)
            goto LABEL_7;
          v15 = *(_DWORD *)(v9 - 4);
          v16 = *(_DWORD *)(v7 - 4);
          if (v15 >= v16)
            goto LABEL_7;
        }
        else
        {
          v15 = *(_DWORD *)(v9 - 4);
          v16 = *(_DWORD *)(v7 - 4);
        }
        *(_QWORD *)(v9 - 12) = v14;
        *(_DWORD *)(v9 - 4) = v16;
        if (v7 == a2)
        {
LABEL_5:
          v7 = a2;
          goto LABEL_6;
        }
        v17 = v8;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + v17 - 24);
          if (v12 < v20)
          {
            v18 = *(_DWORD *)(a2 + v17 - 16);
LABEL_13:
            v7 += 12;
            v19 = a2 + v17;
            *(_QWORD *)(v19 - 36) = v20;
            *(_DWORD *)(v19 - 28) = v18;
            v17 += 12;
            if (v17 == 24)
              goto LABEL_5;
            continue;
          }
          break;
        }
        if (v20 < v12)
          goto LABEL_6;
        v18 = *(_DWORD *)(a2 + v17 - 16);
        if (v15 < v18)
          goto LABEL_13;
        v7 = a2 + v17 - 24;
LABEL_6:
        *(_QWORD *)(v7 - 12) = v12;
        *(_DWORD *)(v7 - 4) = v15;
        if (++v10 == 8)
        {
          v35 = 0;
          LODWORD(v8) = v11 == (_QWORD)a4;
        }
        else
        {
LABEL_7:
          v8 -= 12;
          v7 = v9;
          v9 = v11;
          if ((uint64_t *)v11 != a4)
            continue;
LABEL_34:
          v35 = 1;
        }
        return (v35 | v8) & 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, a4, a5, a6);
  v15 = *(_QWORD *)(a8 - 12);
  v16 = *(_QWORD *)(a6 - 12);
  if (v15 >= v16)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_DWORD *)(a8 - 4);
    v17 = *(_DWORD *)(a6 - 4);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a6 - 4);
    v18 = *(_DWORD *)(a8 - 4);
  }
  *(_QWORD *)(a6 - 12) = v15;
  *(_QWORD *)(a8 - 12) = v16;
  *(_DWORD *)(a6 - 4) = v18;
  *(_DWORD *)(a8 - 4) = v17;
  v19 = *(_QWORD *)(a6 - 12);
  v20 = *(_QWORD *)(a4 - 12);
  if (v19 >= v20)
  {
    if (v20 < v19)
      goto LABEL_16;
    v22 = *(_DWORD *)(a6 - 4);
    v21 = *(_DWORD *)(a4 - 4);
    if (v22 >= v21)
      goto LABEL_16;
  }
  else
  {
    v21 = *(_DWORD *)(a4 - 4);
    v22 = *(_DWORD *)(a6 - 4);
  }
  *(_QWORD *)(a4 - 12) = v19;
  *(_QWORD *)(a6 - 12) = v20;
  *(_DWORD *)(a4 - 4) = v22;
  *(_DWORD *)(a6 - 4) = v21;
  v23 = *(_QWORD *)(a4 - 12);
  v24 = *(_QWORD *)(a2 - 12);
  if (v23 < v24)
  {
    v25 = *(_DWORD *)(a2 - 4);
    v26 = *(_DWORD *)(a4 - 4);
LABEL_7:
    *(_QWORD *)(a2 - 12) = v23;
    *(_QWORD *)(a4 - 12) = v24;
    *(_DWORD *)(a2 - 4) = v26;
    *(_DWORD *)(a4 - 4) = v25;
    goto LABEL_16;
  }
  if (v24 >= v23)
  {
    v26 = *(_DWORD *)(a4 - 4);
    v25 = *(_DWORD *)(a2 - 4);
    if (v26 < v25)
      goto LABEL_7;
  }
LABEL_16:
  v27 = *(_QWORD *)(a10 - 12);
  v28 = *(_QWORD *)(a8 - 12);
  if (v27 >= v28)
  {
    if (v28 < v27)
      return result;
    v30 = *(_DWORD *)(a10 - 4);
    v29 = *(_DWORD *)(a8 - 4);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a8 - 4);
    v30 = *(_DWORD *)(a10 - 4);
  }
  *(_QWORD *)(a8 - 12) = v27;
  *(_QWORD *)(a10 - 12) = v28;
  *(_DWORD *)(a8 - 4) = v30;
  *(_DWORD *)(a10 - 4) = v29;
  v31 = *(_QWORD *)(a8 - 12);
  v32 = *(_QWORD *)(a6 - 12);
  if (v31 >= v32)
  {
    if (v32 < v31)
      return result;
    v34 = *(_DWORD *)(a8 - 4);
    v33 = *(_DWORD *)(a6 - 4);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a6 - 4);
    v34 = *(_DWORD *)(a8 - 4);
  }
  *(_QWORD *)(a6 - 12) = v31;
  *(_QWORD *)(a8 - 12) = v32;
  *(_DWORD *)(a6 - 4) = v34;
  *(_DWORD *)(a8 - 4) = v33;
  v35 = *(_QWORD *)(a6 - 12);
  v36 = *(_QWORD *)(a4 - 12);
  if (v35 >= v36)
  {
    if (v36 < v35)
      return result;
    v38 = *(_DWORD *)(a6 - 4);
    v37 = *(_DWORD *)(a4 - 4);
    if (v38 >= v37)
      return result;
  }
  else
  {
    v37 = *(_DWORD *)(a4 - 4);
    v38 = *(_DWORD *)(a6 - 4);
  }
  *(_QWORD *)(a4 - 12) = v35;
  *(_QWORD *)(a6 - 12) = v36;
  *(_DWORD *)(a4 - 4) = v38;
  *(_DWORD *)(a6 - 4) = v37;
  v39 = *(_QWORD *)(a4 - 12);
  v40 = *(_QWORD *)(a2 - 12);
  if (v39 < v40)
  {
    v41 = *(_DWORD *)(a2 - 4);
    v42 = *(_DWORD *)(a4 - 4);
LABEL_24:
    *(_QWORD *)(a2 - 12) = v39;
    *(_QWORD *)(a4 - 12) = v40;
    *(_DWORD *)(a2 - 4) = v42;
    *(_DWORD *)(a4 - 4) = v41;
    return result;
  }
  if (v40 >= v39)
  {
    v42 = *(_DWORD *)(a4 - 4);
    v41 = *(_DWORD *)(a2 - 4);
    if (v42 < v41)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v8 = a2 - a4;
  if (a2 == a4)
    return a5;
  v10 = a4;
  if (v8 >= 13)
  {
    v14 = (unint64_t)(v8 / 12 - 2) >> 1;
    v15 = v14 + 1;
    v16 = a2 - 12 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a7, v8 / 12, v16, v16);
      v16 += 12;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    v17 = v10;
    v18 = v10;
    do
    {
      v22 = *(_QWORD *)(v18 - 12);
      v18 -= 12;
      v21 = v22;
      v23 = *(_QWORD *)(a2 - 12);
      if (v22 < v23)
      {
        v19 = *(_DWORD *)(v17 - 4);
        v20 = *(_DWORD *)(a2 - 4);
      }
      else
      {
        if (v23 < v21)
          goto LABEL_9;
        v19 = *(_DWORD *)(v17 - 4);
        v20 = *(_DWORD *)(a2 - 4);
        if (v19 >= v20)
          goto LABEL_9;
      }
      *(_QWORD *)(v17 - 12) = v23;
      *(_QWORD *)(a2 - 12) = v21;
      *(_DWORD *)(v17 - 4) = v20;
      *(_DWORD *)(a2 - 4) = v19;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a7, v8 / 12, a1, a2);
LABEL_9:
      v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 13)
  {
    v24 = v8 / 0xCuLL;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, v10, a7, v24);
      v10 += 12;
    }
    while (v24-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (a4 >= 2)
  {
    v6 = (unint64_t)(a4 - 2) >> 1;
    if (v6 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a2 - a6) >> 2)))
    {
      v7 = (0x5555555555555556 * ((a2 - a6) >> 2)) | 1;
      v8 = a2 - 12 * v7;
      if (0x5555555555555556 * ((a2 - a6) >> 2) + 2 < a4)
      {
        v9 = *(_QWORD *)(v8 - 12);
        v10 = *(_QWORD *)(v8 - 24);
        if (v9 < v10 || v10 >= v9 && *(_DWORD *)(v8 - 4) < *(_DWORD *)(v8 - 16))
        {
          v8 -= 12;
          v7 = 0x5555555555555556 * ((a2 - a6) >> 2) + 2;
        }
      }
      v11 = *(_QWORD *)(v8 - 12);
      v12 = *(_QWORD *)(a6 - 12);
      if (v11 >= v12)
      {
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(v8 - 4);
          v13 = *(_DWORD *)(a6 - 4);
          if (v14 < v13)
            return;
        }
        else
        {
          v13 = *(_DWORD *)(a6 - 4);
          v14 = *(_DWORD *)(v8 - 4);
        }
        *(_QWORD *)(a6 - 12) = v11;
        *(_DWORD *)(a6 - 4) = v14;
        if (v6 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = a2 - 12 * v7;
            v17 = v16 + 2;
            if (v17 < a4)
            {
              v18 = *(_QWORD *)(v15 - 12);
              v19 = *(_QWORD *)(v15 - 24);
              if (v18 < v19 || v19 >= v18 && *(_DWORD *)(v15 - 4) < *(_DWORD *)(v15 - 16))
              {
                v15 -= 12;
                v7 = v17;
              }
            }
            v20 = *(_QWORD *)(v15 - 12);
            if (v20 < v12)
              break;
            v21 = *(_DWORD *)(v15 - 4);
            if (v12 >= v20 && v21 < v13)
              break;
            *(_QWORD *)(v8 - 12) = v20;
            *(_DWORD *)(v8 - 4) = v21;
            v8 = v15;
            if (v6 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(_QWORD *)(v15 - 12) = v12;
        *(_DWORD *)(v15 - 4) = v13;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;

  if (a6 >= 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 - 12);
    v8 = *(_DWORD *)(a2 - 4);
    v9 = a2;
    do
    {
      v10 = v9;
      v9 += 12 * ~v6;
      v11 = 2 * v6;
      v6 = (2 * v6) | 1;
      v12 = v11 + 2;
      if (v12 < a6)
      {
        v13 = *(_QWORD *)(v9 - 12);
        v14 = *(_QWORD *)(v9 - 24);
        if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v9 - 4) < *(_DWORD *)(v9 - 16))
        {
          v9 -= 12;
          v6 = v12;
        }
      }
      *(_QWORD *)(v10 - 12) = *(_QWORD *)(v9 - 12);
      *(_DWORD *)(v10 - 4) = *(_DWORD *)(v9 - 4);
    }
    while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
    if (v9 == a4 + 12)
    {
      *(_QWORD *)(v9 - 12) = v7;
      *(_DWORD *)(v9 - 4) = v8;
      return;
    }
    v15 = (uint64_t *)(v9 - 12);
    *(_QWORD *)(v9 - 12) = *(_QWORD *)a4;
    *(_DWORD *)(v9 - 4) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a4 = v7;
    *(_DWORD *)(a4 + 8) = v8;
    v16 = a2 - (v9 - 12);
    if (v16 >= 13)
    {
      v17 = v16 / 0xCuLL - 2;
      v18 = v17 >> 1;
      v19 = a2 - 12 * (v17 >> 1);
      v20 = *(_QWORD *)(v19 - 12);
      v21 = *v15;
      if (v20 >= *v15)
      {
        if (v21 < v20)
          return;
        v23 = *(_DWORD *)(v19 - 4);
        v22 = *(_DWORD *)(v9 - 4);
        if (v23 >= v22)
          return;
      }
      else
      {
        v22 = *(_DWORD *)(v9 - 4);
        v23 = *(_DWORD *)(v19 - 4);
      }
      *(_QWORD *)(v9 - 12) = v20;
      *(_DWORD *)(v9 - 4) = v23;
      if (v17 >= 2)
      {
        while (1)
        {
          v26 = v18 - 1;
          v18 = (v18 - 1) >> 1;
          v24 = a2 - 12 * v18;
          v27 = *(_QWORD *)(v24 - 12);
          if (v27 < v21)
          {
            v25 = *(_DWORD *)(v24 - 4);
          }
          else
          {
            if (v21 < v27)
              break;
            v25 = *(_DWORD *)(v24 - 4);
            if (v25 >= v22)
              break;
          }
          *(_QWORD *)(v19 - 12) = v27;
          *(_DWORD *)(v19 - 4) = v25;
          v19 = a2 - 12 * v18;
          if (v26 <= 1)
            goto LABEL_19;
        }
      }
      v24 = v19;
LABEL_19:
      *(_QWORD *)(v24 - 12) = v21;
      *(_DWORD *)(v24 - 4) = v22;
    }
  }
}

uint64_t std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>,std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>>(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  _BYTE *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *i;
  uint64_t v42;
  void *v43;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 12;
  v7 = (uint64_t)*a1 + 12 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = (uint64_t *)a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 2)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 2)) >= a5)
    {
      v18 = (uint64_t *)((char *)a3 + 12 * a5);
      v19 = (char *)a1[1];
    }
    else
    {
      v18 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
      v19 = (char *)a1[1];
      if (v18 != a4)
      {
        v20 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
        v21 = a1[1];
        do
        {
          v22 = *v20;
          v21[2] = *((_DWORD *)v20 + 2);
          *(_QWORD *)v21 = v22;
          v21 += 3;
          v20 = (uint64_t *)((char *)v20 + 12);
          v19 += 12;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)v12 - v7 < 1)
        return v7;
    }
    v23 = v7 + 12 * a5;
    v24 = (uint64_t *)&v19[-12 * a5];
    v25 = v19;
    if (v24 < v12)
    {
      v25 = v19;
      do
      {
        v26 = *v24;
        *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
        *(_QWORD *)v25 = v26;
        v25 += 12;
        v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 < v12);
    }
    a1[1] = v25;
    if (v19 != (char *)v23)
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v23] >> 2);
      v28 = v19 - 4;
      v29 = 12 * v27;
      do
      {
        *((_QWORD *)v28 - 1) = *(_QWORD *)(v7 + v29 - 12);
        *(_DWORD *)v28 = *(_DWORD *)(v7 + v29 - 4);
        v28 -= 12;
        v29 -= 12;
      }
      while (v29);
    }
    if (v18 != a3)
    {
      v30 = v7;
      do
      {
        *(_QWORD *)v30 = *v9;
        *(_DWORD *)(v30 + 8) = *((_DWORD *)v9 + 2);
        v9 = (uint64_t *)((char *)v9 + 12);
        v30 += 12;
      }
      while (v9 != v18);
    }
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 2);
  if (v13 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 2);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0xAAAAAAAAAAAAAAALL)
    v16 = 0x1555555555555555;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(12 * v16);
  }
  else
  {
    v17 = 0;
  }
  v31 = &v17[12 * v6];
  v32 = 12 * a5;
  v33 = &v31[12 * a5];
  v34 = v31;
  do
  {
    v35 = *v9;
    *((_DWORD *)v34 + 2) = *((_DWORD *)v9 + 2);
    *(_QWORD *)v34 = v35;
    v34 += 12;
    v9 = (uint64_t *)((char *)v9 + 12);
    v32 -= 12;
  }
  while (v32);
  v36 = *a1;
  v37 = v31;
  if (*a1 != (void *)v7)
  {
    v38 = v7;
    v37 = v31;
    do
    {
      v39 = *(_QWORD *)(v38 - 12);
      v38 -= 12;
      v40 = *(_DWORD *)(v38 + 8);
      *(_QWORD *)(v37 - 12) = v39;
      v37 -= 12;
      *((_DWORD *)v37 + 2) = v40;
    }
    while ((void *)v38 != v36);
    v12 = (uint64_t *)a1[1];
  }
  for (i = &v17[12 * v16]; (uint64_t *)v7 != v12; v7 += 12)
  {
    v42 = *(_QWORD *)v7;
    *((_DWORD *)v33 + 2) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)v33 = v42;
    v33 += 12;
  }
  v43 = *a1;
  *a1 = v37;
  a1[1] = v33;
  a1[2] = i;
  if (v43)
    operator delete(v43);
  return (uint64_t)v31;
}

double *std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  __n128 v35;
  __n128 v36;
  double v37;
  __n128 v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  __n128 *v55;
  __n128 *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  __n128 *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  BOOL v66;
  __n128 v67;
  double v68;
  double v69;
  double *n128_f64;
  double v71;
  double v72;
  __n128 *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  __n128 *v80;
  double v81;
  __n128 *v82;
  double v83;
  __n128 *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  __n128 v89;
  __n128 *v90;
  __n128 *v91;
  __n128 *v92;
  __n128 *v93;
  double v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 *v98;
  BOOL v100;
  uint64_t v101;
  double *v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  double *v109;
  __n128 v110;
  double v111;
  double v112;
  double v113;
  double v114;
  __n128 *v115;
  double v116;
  double v117;
  __n128 *v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 v8;
  __n128 *v9;
  double v10;
  __n128 *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __n128 v16;
  __n128 *v17;
  double v18;
  __n128 *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  __n128 *v33;
  double v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  double *n128_f64;
  uint64_t v46;
  int v47;
  double v48;
  double v49;
  uint64_t v50;
  double *v51;
  double *v52;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a2[-1].n128_f64[1])
      {
        v8 = *a1;
        *a1 = *v7;
        *v7 = v8;
      }
      return result;
    case 3:
      v9 = a1 + 1;
      v10 = a1[1].n128_f64[0];
      v11 = a2 - 1;
      v12 = v10 * a1->n128_f64[1];
      v13 = a1[1].n128_f64[1];
      v14 = v13 * a2[-1].n128_f64[0];
      v15 = v10 * a2[-1].n128_f64[1];
      if (v12 <= a1->n128_f64[0] * v13)
      {
        if (v14 > v15)
        {
          v39 = *v9;
          *v9 = *v11;
          *v11 = v39;
          if (a1[1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a1[1].n128_f64[1])
          {
            v40 = *a1;
            *a1 = *v9;
            *v9 = v40;
          }
        }
      }
      else
      {
        if (v14 <= v15)
        {
          v43 = *a1;
          *a1 = *v9;
          *v9 = v43;
          if (a2[-1].n128_f64[0] * a1[1].n128_f64[1] <= a1[1].n128_f64[0] * a2[-1].n128_f64[1])
            return result;
          v16 = *v9;
          *v9 = *v11;
        }
        else
        {
          v16 = *a1;
          *a1 = *v11;
        }
        *v11 = v16;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, a1[1].n128_f64, a1[2].n128_f64, a2[-1].n128_f64, a3);
      return 1;
    case 5:
      v30 = a1 + 1;
      v31 = a1 + 2;
      v32 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, a1[1].n128_f64, a1[2].n128_f64, a1[3].n128_f64, a3);
      v34 = a2[-1].n128_f64[0];
      v33 = a2 - 1;
      if (v34 * a1[3].n128_f64[1] > a1[3].n128_f64[0] * v33->n128_f64[1])
      {
        v35 = *v32;
        *v32 = *v33;
        *v33 = v35;
        if (a1[3].n128_f64[0] * a1[2].n128_f64[1] > a1[2].n128_f64[0] * a1[3].n128_f64[1])
        {
          v36 = *v31;
          *v31 = *v32;
          *v32 = v36;
          if (a1[2].n128_f64[0] * a1[1].n128_f64[1] > a1[1].n128_f64[0] * a1[2].n128_f64[1])
          {
            v37 = *v30;
            *v30 = *v31;
            *v31 = v37;
            if (a1[1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a1[1].n128_f64[1])
            {
              v38 = *a1;
              *a1 = *v30;
              *v30 = v38;
            }
          }
        }
      }
      return 1;
    default:
      v17 = a1 + 2;
      v18 = a1[2].n128_f64[0];
      v19 = a1 + 1;
      v20 = a1[1].n128_f64[0];
      v22 = a1->n128_f64[0];
      v21 = a1->n128_f64[1];
      v23 = v20 * v21;
      v24 = a1[1].n128_f64[1];
      v25 = a1->n128_f64[0] * v24;
      v26 = v24 * v18;
      v27 = a1[2].n128_f64[1];
      v28 = v20 * v27;
      if (v23 <= v25)
      {
        if (v26 > v28)
        {
          v41 = *v19;
          *v19 = *v17;
          *v17 = v41;
          if (v21 * a1[1].n128_f64[0] > v22 * a1[1].n128_f64[1])
          {
            v42 = *a1;
            *a1 = *v19;
            *v19 = v42;
          }
        }
      }
      else
      {
        if (v26 <= v28)
        {
          v44 = *a1;
          *a1 = *v19;
          *v19 = v44;
          if (v18 * a1[1].n128_f64[1] <= v27 * a1[1].n128_f64[0])
            goto LABEL_29;
          v29 = *v19;
          *v19 = *v17;
        }
        else
        {
          v29 = *a1;
          *a1 = *v17;
        }
        *v17 = v29;
      }
LABEL_29:
      n128_f64 = a1[3].n128_f64;
      if (&a1[3] == a2)
        return 1;
      v46 = 0;
      v47 = 0;
      break;
  }
  while (1)
  {
    v49 = *n128_f64;
    v48 = n128_f64[1];
    if (*n128_f64 * v17->n128_f64[1] > v17->n128_f64[0] * v48)
      break;
LABEL_32:
    v17 = (__n128 *)n128_f64;
    v46 += 16;
    n128_f64 += 2;
    if (n128_f64 == (double *)a2)
      return 1;
  }
  v50 = v46;
  do
  {
    v51 = (double *)((char *)a1->n128_f64 + v50);
    *(__n128 *)((char *)a1 + v50 + 48) = *(__n128 *)((char *)a1 + v50 + 32);
    if (v50 == -32)
    {
      a1->n128_f64[0] = v49;
      a1->n128_f64[1] = v48;
      if (++v47 != 8)
        goto LABEL_32;
      return n128_f64 + 2 == (double *)a2;
    }
    v50 -= 16;
  }
  while (v49 * v51[3] > v48 * v51[2]);
  v52 = (double *)((char *)a1->n128_f64 + v50);
  v52[6] = v49;
  v52[7] = v48;
  if (++v47 != 8)
    goto LABEL_32;
  return n128_f64 + 2 == (double *)a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(__n128 *a1, double *a2, double *a3, double *a4, __n128 result)
{
  double v5;
  double v6;
  double v7;

  v5 = a2[1];
  v6 = v5 * *a3;
  v7 = *a2 * a3[1];
  if (*a2 * a1->n128_f64[1] <= a1->n128_f64[0] * v5)
  {
    if (v6 > v7)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 * a1->n128_f64[1] > a1->n128_f64[0] * a2[1])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v6 > v7)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *(__n128 *)a2;
    *(__n128 *)a2 = result;
    if (*a3 * a2[1] > *a2 * a3[1])
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_f64[0] = *a4 * a3[1];
  if (result.n128_f64[0] > *a3 * a4[1])
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3 * a2[1];
    if (result.n128_f64[0] > *a2 * a3[1])
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2 * a1->n128_f64[1];
      if (result.n128_f64[0] > a1->n128_f64[0] * a2[1])
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,operations_research::sat::KnapsackItem*>(double *a1, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  __int128 v7;
  double *v8;
  __int128 v9;
  double *v10;
  int64_t v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  _OWORD *v32;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  double *v37;
  float64x2_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t *v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v47;
  __int128 v48;

  if (a1 == a2)
    return a3;
  v3 = (char *)a2 - (char *)a1;
  v4 = ((char *)a2 - (char *)a1) >> 4;
  if ((char *)a2 - (char *)a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    v34 = (unint64_t)(v4 - 2) >> 1;
    v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        v36 = (2 * v35) | 1;
        v37 = &a1[2 * v36];
        if (2 * v35 + 2 < v4)
        {
          v38 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v37 + 2), *(int8x16_t *)(v37 + 2), 8uLL), *(float64x2_t *)v37);
          if ((vmovn_s64(vcgtq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1))).u8[0] & 1) != 0)
          {
            v37 += 2;
            v36 = 2 * v35 + 2;
          }
        }
        v39 = (int8x16_t *)&a1[2 * v35];
        v40 = *v39;
        v41 = (float64x2_t)vextq_s8(v40, v40, 8uLL);
        v42 = vmulq_f64(*(float64x2_t *)v37, v41);
        if ((vmovn_s64(vcgtq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1))).u8[0] & 1) == 0)
        {
          do
          {
            v44 = v39;
            v39 = (int8x16_t *)v37;
            *v44 = *(int8x16_t *)v37;
            if (v34 < v36)
              break;
            v45 = (2 * v36) | 1;
            v37 = &a1[2 * v45];
            v46 = 2 * v36 + 2;
            if (v46 < v4)
            {
              v47 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v37 + 2), *(int8x16_t *)(v37 + 2), 8uLL), *(float64x2_t *)v37);
              if ((vmovn_s64(vcgtq_f64(v47, (float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1))).u8[0] & 1) != 0)
              {
                v37 += 2;
                v45 = v46;
              }
            }
            v43 = vmulq_f64(v41, *(float64x2_t *)v37);
            v36 = v45;
          }
          while ((vmovn_s64(vcgtq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1))).u8[0] & 1) == 0);
          *v39 = v40;
        }
      }
      v20 = v35-- <= 0;
    }
    while (!v20);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 32)
    {
      v6 = a2;
      do
      {
        if (*v6 * a1[1] > *a1 * v6[1])
        {
          v7 = *(_OWORD *)v6;
          *(_OWORD *)v6 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v7;
        }
        v6 += 2;
      }
      while (v6 != a3);
LABEL_26:
      v5 = a3;
      goto LABEL_27;
    }
    v8 = a2;
    while (1)
    {
      if (*v8 * a1[1] > *a1 * v8[1])
      {
        v9 = *(_OWORD *)v8;
        *(_OWORD *)v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v9;
        if (v3 == 32 || a1[2] * a1[5] <= a1[4] * a1[3])
        {
          v10 = a1 + 2;
          v11 = 1;
          v13 = *a1;
          v12 = a1[1];
          if (a1[2] * v12 <= *a1 * a1[3])
          {
LABEL_19:
            v14 = a1;
            do
            {
              v15 = v14;
              v14 = v10;
              *(_OWORD *)v15 = *(_OWORD *)v10;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v11)
                break;
              v16 = (2 * v11) | 1;
              v10 = &a1[2 * v16];
              v17 = 2 * v11 + 2;
              if (v17 < v4)
              {
                v18 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v10 + 2), *(int8x16_t *)(v10 + 2), 8uLL), *(float64x2_t *)v10);
                if ((vmovn_s64(vcgtq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1))).u8[0] & 1) != 0)
                {
                  v10 += 2;
                  v16 = v17;
                }
              }
              v11 = v16;
            }
            while (v12 * *v10 <= v13 * v10[1]);
            *v14 = v13;
            v14[1] = v12;
          }
        }
        else
        {
          v10 = a1 + 4;
          v11 = 2;
          v13 = *a1;
          v12 = a1[1];
          if (a1[4] * v12 <= *a1 * a1[5])
            goto LABEL_19;
        }
      }
      v8 += 2;
      if (v8 == a3)
        goto LABEL_26;
    }
  }
LABEL_27:
  if (v3 >= 17)
  {
    v19 = (unint64_t)v3 >> 4;
    do
    {
      v21 = 0;
      v48 = *(_OWORD *)a1;
      v22 = a1;
      do
      {
        v23 = (uint64_t)&v22[v21 + 1];
        v24 = (2 * v21) | 1;
        v25 = 2 * v21 + 2;
        if (v25 < v19)
        {
          v26 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v23 + 16), *(int8x16_t *)(v23 + 16), 8uLL), *(float64x2_t *)v23);
          if ((vmovn_s64(vcgtq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1))).u8[0] & 1) != 0)
          {
            v23 += 16;
            v24 = v25;
          }
        }
        *v22 = *(_OWORD *)v23;
        v22 = (_OWORD *)v23;
        v21 = v24;
      }
      while (v24 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      a2 -= 2;
      if ((double *)v23 == a2)
      {
        *(_OWORD *)v23 = v48;
      }
      else
      {
        *(_OWORD *)v23 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v48;
        v27 = v23 - (_QWORD)a1 + 16;
        if (v27 >= 17)
        {
          v28 = (((unint64_t)v27 >> 4) - 2) >> 1;
          v29 = (uint64_t)&a1[2 * v28];
          v31 = *(double *)v23;
          v30 = *(double *)(v23 + 8);
          if (*(double *)v29 * v30 > *(double *)v23 * *(double *)(v29 + 8))
          {
            do
            {
              v32 = (_OWORD *)v23;
              v23 = v29;
              *v32 = *(_OWORD *)v29;
              if (!v28)
                break;
              v28 = (v28 - 1) >> 1;
              v29 = (uint64_t)&a1[2 * v28];
            }
            while (v30 * *(double *)v29 > v31 * *(double *)(v29 + 8));
            *(double *)v23 = v31;
            *(double *)(v23 + 8) = v30;
          }
        }
      }
      v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

_QWORD *std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 58)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(a4 << 6);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v8[v9 / 8], (const operations_research::sat::LinearConstraint *)(a2 + v9));
        v9 += 64;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22DB2FD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearConstraint>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DB2FD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(v10 + v11, v10);
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearConstraint>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearConstraint>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 6);
          if (v7)
          {
            *((_QWORD *)v4 - 5) = v7;
            operator delete(v7);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;

  v4 = *a2;
  *a2 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  v6 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  v8 = a2[4];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  a2[4] = 0;
  *(_QWORD *)(a1 + 40) = a2[5];
  v9 = a2[6];
  a2[5] = 0;
  a2[6] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[7];
  v11 = a2[8];
  a2[7] = 0;
  a2[8] = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = a2[9];
  v13 = a2[10];
  a2[9] = 0;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  a2[10] = 0;
  *(_QWORD *)(a1 + 88) = a2[11];
  a2[11] = 0;
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v15 = (_BYTE *)a2[20];
  v14 = (_BYTE *)a2[21];
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v14 - v15);
    *(_QWORD *)(a1 + 160) = v17;
    *(_QWORD *)(a1 + 168) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(a1 + 176) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 168) = v18;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
  return a1;
}

void sub_22DB2FF28(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 168) = v4;
    operator delete(v4);
  }
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((void **)(v1 + 136), (void **)(v1 + 144));
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = &off_24F9855C0;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = a1[18];
  if (v3)
  {
    v4 = a1[19];
    v5 = (void *)a1[18];
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(_QWORD *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      v5 = (void *)a1[18];
    }
    a1[19] = v3;
    operator delete(v5);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 1));
  return a1;
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = &off_24F9855C0;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = a1[18];
  if (v3)
  {
    v4 = a1[19];
    v5 = (void *)a1[18];
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(_QWORD *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      v5 = (void *)a1[18];
    }
    a1[19] = v3;
    operator delete(v5);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 1));
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xD0uLL);
  *v2 = &off_24F9855C0;
  std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB300F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9855C0;
  return std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::~$_0((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(uint64_t a1)
{
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::~$_0((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 8));
  operator delete((void *)a1);
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  char **v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  double *v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v27;
  absl::lts_2020_02_25 *v28;
  double v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  std::string *v34;
  std::string::size_type size;
  operations_research::sat::LinearConstraint *v36;
  const operations_research::sat::IntegerTrail *v37;
  const operations_research::sat::LinearConstraint *v38;
  __n128 v39;
  std::string::size_type v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  double v44;
  uint64_t v45;
  double *v46;
  unint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double *v61;
  uint64_t v62;
  double *v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  double *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  char *v75;
  double *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  double v81;
  double *v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  double *v89;
  unint64_t v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  double *v96;
  uint64_t v97;
  __int128 v98;
  double *v99;
  _QWORD *v100;
  absl::lts_2020_02_25 *v101;
  absl::lts_2020_02_25 *v102;
  uint64_t v103;
  double v104;
  absl::lts_2020_02_25 *v105;
  double v106;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v111;
  uint64_t v112;
  _BOOL8 inited;
  double v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v118;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v119;
  uint64_t v120;
  absl::lts_2020_02_25 *v121;
  double v122;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v123;
  double v124;
  _QWORD *v125;
  double v126;
  std::string::size_type v127;
  std::string::size_type v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  int64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  int v153;
  char *v154;
  int64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _OWORD *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t **v172;
  uint64_t **v173;
  int v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t *v179;
  char *v180;
  char *v181;
  char *v182;
  _BYTE *v183;
  _BYTE *v184;
  _DWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  unint64_t v200;
  _BYTE *v201;
  _DWORD *v202;
  _DWORD *v203;
  unint64_t v204;
  _DWORD *v205;
  int v206;
  _BYTE *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _DWORD *v211;
  unint64_t v212;
  _BYTE *v213;
  _QWORD *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  __int128 *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  _OWORD *v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  double v232;
  google::LogMessage *v233;
  _QWORD *v234;
  _QWORD *v235;
  char *v236;
  std::string *v237;
  std::string::size_type v238;
  uint64_t v239;
  int *v240;
  uint64_t v241;
  operations_research::TimeLimit *v242;
  const char *v243;
  double v244;
  size_t v246;
  void *v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  google::LogMessage *v254;
  _QWORD *v255;
  unint64_t *v256;
  unint64_t *v257;
  unint64_t *v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  void **v262;
  double v263;
  double v264;
  double v265;
  uint64_t v266;
  _BYTE *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char **v271;
  uint64_t v272;
  std::string::size_type v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char **v277;
  void *v278;
  char v279;
  void *__dst[2];
  unint64_t v281;
  __int128 v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  __int128 v287;
  void *v288[2];
  void *v289[2];
  __int128 v290;
  uint64_t **v291;
  uint64_t *v292;
  uint64_t v293;
  BOOL v294;
  void *v295;
  char *v296;
  char *v297;
  void *v298;
  char *v299;
  char *v300;
  void *v301;
  double *v302;
  double *v303;
  void *v304;
  double *v305;
  char *v306;
  std::string v307;
  uint64_t v308;
  void *v309;
  void *v310;
  __int128 v311;
  void *v312[2];
  void *v313[2];
  __int128 v314;
  void *__p;
  __int128 v316;
  char *v317[33];
  char *v318;
  char *v319;
  char *v320;
  std::string v321;
  uint64_t *v322[2];
  _QWORD v323[2];

  v3 = *a3;
  v319 = 0;
  v320 = 0;
  v318 = 0;
  v5 = *(_BYTE **)(a1 + 168);
  v4 = *(_BYTE **)(a1 + 176);
  v6 = v4 - v5;
  if (v4 == v5)
    return;
  if (v6 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = a1;
  v9 = (char *)operator new(v4 - v5);
  v276 = v8 + 8;
  v10 = 4 * (v6 >> 2);
  v318 = v9;
  v320 = &v9[v10];
  memcpy(v9, v5, v6);
  v11 = 0;
  while (1)
  {
    v12 = *(double *)(*a2 + 8 * *(int *)&v9[v11]);
    if (vabdd_f64(v12, round(v12)) > 0.000001)
      break;
    v11 += 4;
    if (v10 == v11)
    {
      operator delete(v9);
      return;
    }
  }
  v319 = v9;
  operator delete(v9);
  __p = operator new(0x28uLL);
  v316 = xmmword_22DCEDA00;
  strcpy((char *)__p, "Knapsack on demand cover cut generator");
  operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts((uint64_t)v317, (__int128 *)&__p);
  if (SHIBYTE(v316) < 0)
  {
    operator delete(__p);
    *(_OWORD *)v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    *(_OWORD *)v312 = 0u;
    v13 = *(_QWORD *)(v8 + 80);
    if (v13 >= 0x80)
      goto LABEL_9;
LABEL_11:
    if (v13)
    {
      *(_QWORD *)(v8 + 72) = 0;
      memset(*(void **)(v8 + 56), 128, v13 + 8);
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + *(_QWORD *)(v8 + 80)) = -1;
      v13 = *(_QWORD *)(v8 + 80);
      v14 = v13 - (v13 >> 3);
      if (v13 == 7)
        v14 = 6;
      *(_QWORD *)(v8 + 96) = v14 - *(_QWORD *)(v8 + 72);
    }
    goto LABEL_15;
  }
  *(_OWORD *)v313 = 0u;
  v314 = 0u;
  v311 = 0u;
  *(_OWORD *)v312 = 0u;
  v13 = *(_QWORD *)(v8 + 80);
  if (v13 < 0x80)
    goto LABEL_11;
LABEL_9:
  operator delete(*(void **)(v8 + 56));
  v13 = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 56) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
LABEL_15:
  v15 = *(unint64_t **)(v8 + 88);
  if (v15)
  {
    v15[1] = 0;
    *v15 = v13;
    v15[4] = 0;
    v15[2] = 0;
    v16 = *(char ***)(v8 + 144);
    v271 = *(char ***)(v8 + 152);
    if (v16 == v271)
      goto LABEL_356;
  }
  else
  {
    v16 = *(char ***)(v8 + 144);
    v271 = *(char ***)(v8 + 152);
    if (v16 == v271)
      goto LABEL_356;
  }
  v275 = 0;
  v17 = 0.0001;
  v18 = -1.0;
  *(double *)&v19 = 0.0001;
  *(double *)&v20 = 0.000000001;
  v21 = -0.000000001;
  v270 = v8;
  while (1)
  {
    v22 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v8 + 192));
    v23 = v22;
    v24 = (unsigned __int8 *)*((_QWORD *)v22 + 15);
    if (v24)
    {
      v25 = atomic_load(v24);
      if ((v25 & 1) != 0)
        goto LABEL_351;
    }
    if (fmax(v22[13] - v22[14], 0.0) <= 0.0)
      goto LABEL_351;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v22);
    v27 = *((_QWORD *)v23 + 3) <= CurrentTimeNanos - *((_QWORD *)v23 + 1)
        ? CurrentTimeNanos - *((_QWORD *)v23 + 1)
        : *((_QWORD *)v23 + 3);
    operations_research::RunningMax<long long>::Add((int *)v23 + 8, v27);
    *((_QWORD *)v23 + 1) = CurrentTimeNanos;
    if (*(_QWORD *)(*((_QWORD *)v23 + 5) + 8 * *((int *)v23 + 17)) + CurrentTimeNanos >= *((_QWORD *)v23 + 2))
      break;
LABEL_32:
    if (*off_254079520[0] >= 2
      && (off_254079520[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079520, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v287, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 470);
      v31 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v287);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Processing constraint: ", 23);
      operations_research::sat::LinearConstraint::DebugString((operations_research::sat::LinearConstraint *)v16, v33, &v307);
      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v307;
      else
        v34 = (std::string *)v307.__r_.__value_.__r.__words[0];
      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v307.__r_.__value_.__r.__words[2]);
      else
        size = v307.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, size);
      if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v307.__r_.__value_.__l.__data_);
      google::LogMessage::~LogMessage((google::LogMessage *)&v287);
    }
    v311 = *(_OWORD *)v16;
    if (&v311 != (__int128 *)v16)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v312, v16[2], v16[3], (v16[3] - v16[2]) >> 2);
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v313[1], v16[5], v16[6], (v16[6] - v16[5]) >> 3);
    }
    operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(v276, 0, 0, a2, &v311, 0, 0);
    operations_research::sat::MakeAllCoefficientsPositive(&v311, v36);
    operations_research::sat::GetPreprocessedLinearConstraint(&v311, a2, *(_QWORD *)(v8 + 200), (uint64_t)&v307);
    v277 = v16;
    if (v307.__r_.__value_.__r.__words[2] == v308)
      goto LABEL_51;
    v38 = *(const operations_research::sat::LinearConstraint **)(v8 + 200);
    if (!operations_research::sat::ConstraintIsTriviallyTrue((operations_research::sat *)&v307, v38, v37)
      && (operations_research::sat::CanBeFilteredUsingCutLowerBound(&v307, a2, (uint64_t)v38) & 1) == 0
      && !operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(&v307, a2, (uint64_t)v38, v39))
    {
      v304 = 0;
      v305 = 0;
      v306 = 0;
      v40 = v307.__r_.__value_.__r.__words[2];
      v41 = v308 - v307.__r_.__value_.__r.__words[2];
      v266 = v3;
      v263 = *(double *)&v20;
      v264 = *(double *)&v19;
      v265 = v21;
      if (v308 != v307.__r_.__value_.__r.__words[2])
      {
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFDLL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v42 = 2 * v41;
        v43 = (char *)operator new(2 * v41);
        v44 = v17;
        v45 = v41 >> 2;
        v304 = v43;
        v305 = (double *)v43;
        v306 = &v43[8 * v45];
        v46 = (double *)operator new(v42);
        v47 = 0;
        v301 = v46;
        v302 = v46;
        v303 = &v46[v45];
        v48 = (double)(uint64_t)-v307.__r_.__value_.__l.__size_ + v18;
        v49 = 0.0;
        while (1)
        {
          v51 = *(int *)(v40 + 4 * v47);
          v52 = *((_QWORD *)v309 + v47);
          v53 = *(_QWORD *)(*(_QWORD *)(v8 + 200) + 144);
          v54 = *(_QWORD *)(v53 + 20 * (int)(v51 ^ 1));
          v55 = (double)-v54;
          if (v54 > 0x7FFFFFFFFFFFFFFDLL)
            v55 = -INFINITY;
          v56 = *(_QWORD *)(v53 + 20 * (int)v51);
          if (v54 >= (uint64_t)0x8000000000000003)
            v57 = v55;
          else
            v57 = INFINITY;
          if (v56 >= (uint64_t)0x8000000000000003)
            v58 = (double)v56;
          else
            v58 = -INFINITY;
          if (v56 <= 0x7FFFFFFFFFFFFFFDLL)
            v59 = v58;
          else
            v59 = INFINITY;
          v60 = v57 - *(double *)(*a2 + 8 * v51);
          v61 = v305;
          if (v305 < (double *)v306)
          {
            *v305 = v60;
            v62 = (uint64_t)(v61 + 1);
            goto LABEL_93;
          }
          v63 = (double *)v304;
          v64 = (char *)v305 - (_BYTE *)v304;
          v65 = ((char *)v305 - (_BYTE *)v304) >> 3;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v67 = v306 - (_BYTE *)v304;
          if ((v306 - (_BYTE *)v304) >> 2 > v66)
            v66 = v67 >> 2;
          v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
          if (v68)
            break;
          v69 = 0;
          v70 = (double *)(8 * v65);
          *(double *)(8 * v65) = v60;
          v62 = 8 * v65 + 8;
          if (v61 != v63)
            goto LABEL_85;
LABEL_91:
          v304 = v70;
          v305 = (double *)v62;
          v306 = &v69[8 * v68];
          if (v63)
          {
            operator delete(v63);
            v46 = v302;
          }
LABEL_93:
          v80 = (double)v52;
          v305 = (double *)v62;
          v81 = (v57 - v59) * v80;
          if (v46 < v303)
          {
            *v46 = v81;
            v50 = (uint64_t)(v46 + 1);
          }
          else
          {
            v82 = (double *)v301;
            v83 = (char *)v46 - (_BYTE *)v301;
            v84 = ((char *)v46 - (_BYTE *)v301) >> 3;
            v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v86 = (char *)v303 - (_BYTE *)v301;
            if (((char *)v303 - (_BYTE *)v301) >> 2 > v85)
              v85 = v86 >> 2;
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
              v87 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v87 = v85;
            if (v87)
            {
              if (v87 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v88 = operator new(8 * v87);
              v89 = (double *)&v88[8 * v84];
              *v89 = v81;
              v50 = (uint64_t)(v89 + 1);
              if (v46 != v82)
              {
LABEL_103:
                v90 = (char *)(v46 - 1) - (char *)v82;
                if (v90 < 0x168
                  || &v88[v83 - 8 - (v90 & 0xFFFFFFFFFFFFFFF8)] > &v88[v83 - 8]
                  || (double *)((char *)v46 - (v90 & 0xFFFFFFFFFFFFFFF8) - 8) > v46 - 1
                  || (unint64_t)((char *)v46 - v88 - v83) < 0x20)
                {
                  v91 = v46;
                }
                else
                {
                  v93 = (v90 >> 3) + 1;
                  v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
                  v91 = &v46[v94 / 0xFFFFFFFFFFFFFFF8];
                  v89 = (double *)((char *)v89 - v94);
                  v95 = &v88[8 * v84 - 16];
                  v96 = v46 - 2;
                  v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v98 = *(_OWORD *)v96;
                    *(v95 - 1) = *((_OWORD *)v96 - 1);
                    *v95 = v98;
                    v95 -= 2;
                    v96 -= 4;
                    v97 -= 4;
                  }
                  while (v97);
                  if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_106:
                    v301 = v89;
                    v302 = (double *)v50;
                    v303 = (double *)&v88[8 * v87];
                    if (!v82)
                      goto LABEL_60;
LABEL_110:
                    operator delete(v82);
                    goto LABEL_60;
                  }
                }
                do
                {
                  v92 = *((_QWORD *)v91-- - 1);
                  *((_QWORD *)v89-- - 1) = v92;
                }
                while (v91 != v82);
                goto LABEL_106;
              }
            }
            else
            {
              v88 = 0;
              v89 = (double *)(8 * v84);
              *(double *)(8 * v84) = v81;
              v50 = 8 * v84 + 8;
              if (v46 != v82)
                goto LABEL_103;
            }
            v301 = v89;
            v302 = (double *)v50;
            v303 = (double *)&v88[8 * v87];
            if (v82)
              goto LABEL_110;
          }
LABEL_60:
          v302 = (double *)v50;
          v49 = v49 + v60;
          v48 = v48 + v81 + v80 * v59;
          ++v47;
          v40 = v307.__r_.__value_.__r.__words[2];
          v46 = (double *)v50;
          if (v47 >= (int64_t)(v308 - v307.__r_.__value_.__r.__words[2]) >> 2)
            goto LABEL_119;
        }
        if (v68 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v69 = (char *)operator new(8 * v68);
        v70 = (double *)&v69[8 * v65];
        *v70 = v60;
        v62 = (uint64_t)(v70 + 1);
        if (v61 == v63)
          goto LABEL_91;
LABEL_85:
        v71 = (char *)(v61 - 1) - (char *)v63;
        if (v71 < 0x58)
          goto LABEL_383;
        if ((unint64_t)((char *)v61 - &v69[v64]) < 0x20)
          goto LABEL_383;
        v72 = (v71 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v61[v73 / 0xFFFFFFFFFFFFFFF8];
        v70 = (double *)((char *)v70 - v73);
        v75 = &v69[8 * v65 - 16];
        v76 = v61 - 2;
        v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
          *(_OWORD *)v75 = v78;
          v75 -= 32;
          v76 -= 4;
          v77 -= 4;
        }
        while (v77);
        v61 = v74;
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_383:
          do
          {
            v79 = *((_QWORD *)v61-- - 1);
            *((_QWORD *)v70-- - 1) = v79;
          }
          while (v61 != v63);
        }
        goto LABEL_91;
      }
      v44 = v17;
      v301 = 0;
      v302 = 0;
      v303 = 0;
      v48 = (double)(uint64_t)-v307.__r_.__value_.__l.__size_ + v18;
      v49 = 0.0;
LABEL_119:
      if (v48 < 0.0)
      {
        v3 = v266;
        v17 = v44;
        *(double *)&v20 = v263;
        *(double *)&v19 = v264;
        v21 = v265;
        v99 = (double *)v301;
        if (v301)
          goto LABEL_121;
        goto LABEL_122;
      }
      v298 = 0;
      v299 = 0;
      v300 = 0;
      v295 = 0;
      v296 = 0;
      v297 = 0;
      v3 = v266;
      v17 = v44;
      *(double *)&v20 = v263;
      *(double *)&v19 = v264;
      if (*off_254079528[0] >= 2
        && (off_254079528[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079528, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v287, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 525);
        v100 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v287);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Knapsack size: ", 15);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v287);
      }
      operations_research::KnapsackSolverForCuts::Init(v317, (uint64_t *)&v304, (uint64_t *)&v301, v48);
      v101 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v8 + 192));
      v102 = v101;
      v103 = *((_QWORD *)v101 + 2);
      if (v103 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v104 = INFINITY;
      }
      else
      {
        v105 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v101);
        if (v103 - (uint64_t)v105 < 0)
        {
          v104 = 0.0;
        }
        else if (FLAGS_time_limit_use_usertime)
        {
          v106 = *((double *)v102 + 12);
          if (*((_BYTE *)v102 + 72))
            v107 = absl::lts_2020_02_25::GetCurrentTimeNanos(v105) - *((_QWORD *)v102 + 10) + *((_QWORD *)v102 + 11);
          else
            v107 = *((_QWORD *)v102 + 11);
          if (v106 + (double)v107 * v265 >= 0.0)
            v104 = v106 + (double)v107 * v265;
          else
            v104 = 0.0;
        }
        else
        {
          v104 = (double)(v103 - (uint64_t)v105) * v263;
        }
      }
      v294 = 0;
      *(double *)&v317[31] = v49 + -1.0 + v264;
      v108 = operator new();
      v109 = v108;
      *(_DWORD *)(v108 + 32) = 100;
      v110 = (int *)(v108 + 32);
      *(_QWORD *)(v108 + 24) = (uint64_t)(0.0001 * 1000000000.0);
      *(_OWORD *)(v108 + 40) = 0u;
      v262 = (void **)(v108 + 40);
      *(_QWORD *)(v108 + 88) = 0;
      *(_OWORD *)(v108 + 56) = 0u;
      *(_BYTE *)(v108 + 72) = 0;
      *(_QWORD *)(v108 + 104) = 0x7FF0000000000000;
      *(_QWORD *)(v108 + 112) = 0;
      *(_QWORD *)(v108 + 120) = 0;
      *(_QWORD *)(v108 + 128) = 0x7FF0000000000000;
      v261 = v108;
      if (FLAGS_time_limit_use_usertime)
      {
        *(_BYTE *)(v108 + 72) = 1;
        v108 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v108);
        *(_QWORD *)(v109 + 80) = v108;
        *(double *)(v109 + 96) = v104;
      }
      v111 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v108);
      *(_QWORD *)v109 = v111;
      *(_QWORD *)(v109 + 8) = v111;
      v112 = v111 + (uint64_t)(v104 * 1000000000.0);
      if ((double)(v111 ^ 0x7FFFFFFFFFFFFFFFLL) * v263 <= v104)
        v112 = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v109 + 16) = v112;
      v114 = operations_research::KnapsackSolverForCuts::Solve((operations_research::KnapsackSolverForCuts *)v317, (operations_research::TimeLimit *)v109, &v294);
      if (v294
        && *off_254079530[0] >= 2
        && (off_254079530[0] != &google::kLogSiteUninitialized
         || (inited = google::InitVLOG3__((google *)off_254079530, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2))))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v287, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 548);
        v115 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v287);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Knapsack Optimal solution found yay !", 37);
        google::LogMessage::~LogMessage((google::LogMessage *)&v287);
      }
      v116 = *(unsigned __int8 **)(v109 + 120);
      if (v116 && (v117 = atomic_load(v116), (v117 & 1) != 0)
        || fmax(*(double *)(v109 + 104) - *(double *)(v109 + 112), 0.0) <= 0.0)
      {
LABEL_162:
        if (*off_254079538[0] >= 1
          && (off_254079538[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079538, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v287, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 551);
          v125 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v287);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Knapsack Solver run out of time limit.", 38);
          google::LogMessage::~LogMessage((google::LogMessage *)&v287);
        }
      }
      else
      {
        v118 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
        v119 = v118;
        if (*(_QWORD *)(v109 + 24) <= v118 - *(_QWORD *)(v109 + 8))
          v120 = v118 - *(_QWORD *)(v109 + 8);
        else
          v120 = *(_QWORD *)(v109 + 24);
        operations_research::RunningMax<long long>::Add(v110, v120);
        *(_QWORD *)(v109 + 8) = v119;
        if (*(_QWORD *)(*(_QWORD *)(v109 + 40) + 8 * *(int *)(v109 + 68)) + v119 >= *(_QWORD *)(v109 + 16))
        {
          if (!FLAGS_time_limit_use_usertime
            || ((v122 = *(double *)(v109 + 96), !*(_BYTE *)(v109 + 72))
              ? (v123 = *(_QWORD *)(v109 + 88))
              : (v123 = absl::lts_2020_02_25::GetCurrentTimeNanos(v121)
                      - *(_QWORD *)(v109 + 80)
                      + *(_QWORD *)(v109 + 88)),
                v124 = v122 + (double)v123 * v265,
                v124 <= v17))
          {
            *(_QWORD *)(v109 + 16) = 0;
            goto LABEL_162;
          }
          *(_QWORD *)(v109 + 16) = *(_QWORD *)(v109 + 8) + (uint64_t)(v124 * 1000000000.0);
          v232 = v49 - v114;
          v21 = v265;
          if (v232 >= 0.9999)
          {
LABEL_337:
            v252 = *v262;
            if (*v262)
            {
              *(_QWORD *)(v109 + 48) = v252;
              operator delete(v252);
            }
            MEMORY[0x22E31DF78](v109, 0x1030C40021678CBLL);
            if (v295)
              operator delete(v295);
            if (v298)
              operator delete(v298);
            v99 = (double *)v301;
            if (v301)
            {
LABEL_121:
              v302 = v99;
              operator delete(v99);
            }
LABEL_122:
            v18 = -1.0;
            if (v304)
            {
              v305 = (double *)v304;
              operator delete(v304);
            }
            goto LABEL_51;
          }
LABEL_167:
          v292 = 0;
          v293 = 0;
          v291 = &v292;
          v127 = v307.__r_.__value_.__r.__words[2];
          v128 = v307.__r_.__value_.__l.__size_;
          if (v308 != v307.__r_.__value_.__r.__words[2])
          {
            v129 = 0;
            while (1)
            {
              v130 = *(_DWORD *)(v127 + 4 * v129);
              v131 = *((_QWORD *)v309 + v129);
              if (((*(_QWORD *)&v317[24][(v129 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v129) & 1) == 0)
                break;
              v128 -= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 200) + 144) + 20 * v130) * v131;
LABEL_170:
              ++v129;
              v127 = v307.__r_.__value_.__r.__words[2];
              if (v129 >= (int64_t)(v308 - v307.__r_.__value_.__r.__words[2]) >> 2)
                goto LABEL_225;
            }
            v132 = v299;
            v273 = v128;
            if (v299 < v300)
            {
              *(_DWORD *)v299 = v130;
              v299 = v132 + 4;
              v134 = v296;
              v133 = v297;
              if (v296 < v297)
                goto LABEL_174;
LABEL_195:
              v154 = (char *)v295;
              v155 = v134 - (_BYTE *)v295;
              v156 = (v134 - (_BYTE *)v295) >> 3;
              v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v158 = v133 - (_BYTE *)v295;
              if (v158 >> 2 > v157)
                v157 = v158 >> 2;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                if (v159 >> 61)
LABEL_374:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v160 = operator new(8 * v159);
                v161 = &v160[8 * v156];
                *v161 = v131;
                v135 = (uint64_t)(v161 + 1);
                if (v134 == v154)
                {
LABEL_212:
                  v295 = v161;
                  v297 = &v160[8 * v159];
                  if (v154)
                    operator delete(v154);
                  v8 = v270;
                  goto LABEL_215;
                }
              }
              else
              {
                v160 = 0;
                v161 = (_QWORD *)(8 * v156);
                *(_QWORD *)(8 * v156) = v131;
                v135 = 8 * v156 + 8;
                if (v134 == v154)
                  goto LABEL_212;
              }
              v162 = v134 - 8 - v154;
              if (v162 < 0x58)
                goto LABEL_384;
              if ((unint64_t)(v134 - &v160[v155]) < 0x20)
                goto LABEL_384;
              v163 = (v162 >> 3) + 1;
              v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
              v165 = &v134[-v164];
              v161 = (_QWORD *)((char *)v161 - v164);
              v166 = &v160[8 * v156 - 16];
              v167 = v134 - 16;
              v168 = v163 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v169 = *(_OWORD *)v167;
                *(v166 - 1) = *((_OWORD *)v167 - 1);
                *v166 = v169;
                v166 -= 2;
                v167 -= 32;
                v168 -= 4;
              }
              while (v168);
              v134 = v165;
              if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_384:
                do
                {
                  v170 = *((_QWORD *)v134 - 1);
                  v134 -= 8;
                  *--v161 = v170;
                }
                while (v134 != v154);
              }
              goto LABEL_212;
            }
            v136 = (char *)v298;
            v137 = v299 - (_BYTE *)v298;
            v138 = (v299 - (_BYTE *)v298) >> 2;
            v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v140 = v300 - (_BYTE *)v298;
            if ((v300 - (_BYTE *)v298) >> 1 > v139)
              v139 = v140 >> 1;
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
              v141 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v141 = v139;
            if (v141)
            {
              if (v141 >> 62)
                goto LABEL_374;
              v142 = (char *)operator new(4 * v141);
              v143 = &v142[4 * v138];
              *(_DWORD *)v143 = v130;
              v144 = (uint64_t)(v143 + 4);
              if (v132 == v136)
                goto LABEL_192;
LABEL_186:
              v145 = v132 - 4 - v136;
              if (v145 < 0x2C)
                goto LABEL_385;
              if ((unint64_t)(v132 - &v142[v137]) < 0x20)
                goto LABEL_385;
              v146 = (v145 >> 2) + 1;
              v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
              v148 = &v132[-v147];
              v143 -= v147;
              v149 = &v142[4 * v138 - 16];
              v150 = v132 - 16;
              v151 = v146 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v152 = *(_OWORD *)v150;
                *((_OWORD *)v149 - 1) = *((_OWORD *)v150 - 1);
                *(_OWORD *)v149 = v152;
                v149 -= 32;
                v150 -= 32;
                v151 -= 8;
              }
              while (v151);
              v132 = v148;
              if (v146 != (v146 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_385:
                do
                {
                  v153 = *((_DWORD *)v132 - 1);
                  v132 -= 4;
                  *((_DWORD *)v143 - 1) = v153;
                  v143 -= 4;
                }
                while (v132 != v136);
              }
            }
            else
            {
              v142 = 0;
              v143 = (char *)(4 * v138);
              *(_DWORD *)(4 * v138) = v130;
              v144 = 4 * v138 + 4;
              if (v132 != v136)
                goto LABEL_186;
            }
LABEL_192:
            v298 = v143;
            v300 = &v142[4 * v141];
            if (v136)
              operator delete(v136);
            v8 = v270;
            v299 = (char *)v144;
            v134 = v296;
            v133 = v297;
            if (v296 >= v297)
              goto LABEL_195;
LABEL_174:
            *(_QWORD *)v134 = v131;
            v135 = (uint64_t)(v134 + 8);
LABEL_215:
            v296 = (char *)v135;
            v171 = v292;
            v172 = &v292;
            v173 = &v292;
            v128 = v273;
            if (v292)
            {
              while (1)
              {
                while (1)
                {
                  v172 = (uint64_t **)v171;
                  v174 = *(_DWORD *)((char *)v171 + 25);
                  if (v130 >= v174)
                    break;
                  v171 = *v172;
                  v173 = v172;
                  if (!*v172)
                    goto LABEL_222;
                }
                if (v174 >= v130)
                  break;
                v171 = v172[1];
                if (!v171)
                {
                  v173 = v172 + 1;
                  goto LABEL_222;
                }
              }
            }
            else
            {
LABEL_222:
              v175 = (char *)operator new(0x20uLL);
              *(_DWORD *)(v175 + 25) = v130;
              *(_QWORD *)v175 = 0;
              *((_QWORD *)v175 + 1) = 0;
              *((_QWORD *)v175 + 2) = v172;
              *v173 = (uint64_t *)v175;
              if (*v291)
              {
                v291 = (uint64_t **)*v291;
                v175 = (char *)*v173;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v292, (uint64_t *)v175);
              ++v293;
              v8 = v270;
            }
            goto LABEL_170;
          }
LABEL_225:
          v269 = *(_QWORD *)(v8 + 200);
          v176 = (char *)v298;
          v177 = v299;
          v178 = (v299 - (_BYTE *)v298) >> 2;
          v321.__r_.__value_.__r.__words[0] = v178;
          v179 = (uint64_t *)v295;
          v323[0] = (v296 - (_BYTE *)v295) >> 3;
          if (v178 != v323[0])
          {
            v322[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)&v321, (int)v323, "vars.size() == coeffs.size()");
            v8 = v270;
            if (v322[0])
            {
              v256 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v321, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 48, v322);
              google::LogMessage::stream((google::LogMessage *)v256);
              goto LABEL_364;
            }
          }
          v260 = a2;
          v321.__r_.__value_.__r.__words[0] = v178;
          LODWORD(v323[0]) = 0;
          if (v177 != v176)
          {
            v180 = 0;
            v181 = 0;
            v182 = 0;
            v183 = 0;
            v184 = 0;
            v185 = 0;
            v186 = 0;
            v274 = 0;
            v287 = 0u;
            *(_OWORD *)v288 = 0u;
            *(_OWORD *)v289 = 0u;
            v290 = 0u;
            v187 = *v179;
            v323[0] = -(uint64_t)v128;
            while (1)
            {
              v192 = *(_DWORD *)&v176[4 * v186];
              v193 = *(_QWORD *)(*(_QWORD *)(v269 + 144) + 20 * (v192 ^ 1));
              v272 = v193;
              if (v185 < (_DWORD *)v184)
              {
                *v185++ = v192;
                v288[1] = v185;
                if (v182 >= v181)
                  goto LABEL_250;
                goto LABEL_228;
              }
              v194 = (char *)v185 - v183;
              v195 = ((char *)v185 - v183) >> 2;
              v196 = v195 + 1;
              if ((unint64_t)(v195 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((v184 - v183) >> 1 > v196)
                v196 = (v184 - v183) >> 1;
              if ((unint64_t)(v184 - v183) >= 0x7FFFFFFFFFFFFFFCLL)
                v197 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v197 = v196;
              v268 = (unint64_t)v181;
              if (v197)
              {
                if (v197 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v198 = v187;
                v199 = v185;
                v200 = v197;
                v201 = operator new(4 * v197);
                v185 = v199;
                v197 = v200;
                v187 = v198;
                v202 = &v201[4 * v195];
                *v202 = *(_DWORD *)&v176[4 * v186];
                v203 = v202 + 1;
                if (v185 != (_DWORD *)v183)
                {
LABEL_244:
                  v204 = (char *)(v185 - 1) - v183;
                  if (v204 < 0xBC
                    || &v201[v194 - 4 - (v204 & 0xFFFFFFFFFFFFFFFCLL)] > &v201[v194 - 4]
                    || (_DWORD *)((char *)v185 - (v204 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v185 - 1
                    || (unint64_t)((char *)v185 - &v201[v194]) < 0x20)
                  {
                    v205 = v185;
                    v8 = v270;
                    v193 = v272;
                  }
                  else
                  {
                    v220 = (v204 >> 2) + 1;
                    v221 = 4 * (v220 & 0x7FFFFFFFFFFFFFF8);
                    v205 = &v185[v221 / 0xFFFFFFFFFFFFFFFCLL];
                    v202 = (_DWORD *)((char *)v202 - v221);
                    v222 = &v201[4 * v195 - 16];
                    v223 = (__int128 *)(v185 - 4);
                    v224 = v220 & 0x7FFFFFFFFFFFFFF8;
                    v193 = v272;
                    do
                    {
                      v225 = *v223;
                      *(v222 - 1) = *(v223 - 1);
                      *v222 = v225;
                      v222 -= 2;
                      v223 -= 2;
                      v224 -= 8;
                    }
                    while (v224);
                    v8 = v270;
                    if (v220 == (v220 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_247:
                      v184 = &v201[4 * v197];
                      v288[0] = v202;
                      v289[0] = v184;
                      if (!v183)
                        goto LABEL_249;
LABEL_248:
                      v207 = v184;
                      operator delete(v183);
                      v184 = v207;
                      goto LABEL_249;
                    }
                  }
                  do
                  {
                    v206 = *--v205;
                    *--v202 = v206;
                  }
                  while (v205 != (_DWORD *)v183);
                  goto LABEL_247;
                }
              }
              else
              {
                v201 = 0;
                v202 = (_DWORD *)(4 * v195);
                *(_DWORD *)(4 * v195) = v192;
                v203 = (_DWORD *)(4 * v195 + 4);
                if (v185 != (_DWORD *)v183)
                  goto LABEL_244;
              }
              v8 = v270;
              v193 = v272;
              v184 = &v201[4 * v197];
              v288[0] = v202;
              v289[0] = v184;
              if (v183)
                goto LABEL_248;
LABEL_249:
              v183 = v202;
              v185 = v203;
              v181 = (char *)v268;
              v288[1] = v203;
              if ((unint64_t)v182 >= v268)
              {
LABEL_250:
                v208 = (v182 - v180) >> 3;
                v209 = v208 + 1;
                if ((unint64_t)(v208 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v181 - v180) >> 2 > v209)
                  v209 = (v181 - v180) >> 2;
                if ((unint64_t)(v181 - v180) >= 0x7FFFFFFFFFFFFFF8)
                  v210 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v210 = v209;
                v267 = v184;
                if (v210)
                {
                  if (v210 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v211 = v185;
                  v212 = v210;
                  v213 = operator new(8 * v210);
                  v185 = v211;
                  v210 = v212;
                  v214 = &v213[8 * v208];
                  *v214 = 1;
                  v188 = (uint64_t)(v214 + 1);
                  if (v182 != v180)
                  {
LABEL_259:
                    v215 = v182 - 8 - v180;
                    if (v215 < 0x168
                      || &v213[v182 - v180 - 8 - (v215 & 0xFFFFFFFFFFFFFFF8)] > &v213[v182 - v180 - 8]
                      || &v182[-(v215 & 0xFFFFFFFFFFFFFFF8) - 8] > v182 - 8
                      || (unint64_t)(v180 - v213) < 0x20)
                    {
                      v216 = v182;
                      v8 = v270;
                      v189 = v274;
                    }
                    else
                    {
                      v226 = (v215 >> 3) + 1;
                      v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                      v216 = &v182[-v227];
                      v214 = (_QWORD *)((char *)v214 - v227);
                      v228 = &v213[8 * v208 - 16];
                      v229 = v182 - 16;
                      v230 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v231 = *(_OWORD *)v229;
                        *(v228 - 1) = *((_OWORD *)v229 - 1);
                        *v228 = v231;
                        v228 -= 2;
                        v229 -= 32;
                        v230 -= 4;
                      }
                      while (v230);
                      v8 = v270;
                      v189 = v274;
                      if (v226 == (v226 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_262:
                        v181 = &v213[8 * v210];
                        v289[1] = v214;
                        *((_QWORD *)&v290 + 1) = v181;
                        if (v180)
                          goto LABEL_263;
                        goto LABEL_264;
                      }
                    }
                    do
                    {
                      v217 = *((_QWORD *)v216 - 1);
                      v216 -= 8;
                      *--v214 = v217;
                    }
                    while (v216 != v180);
                    goto LABEL_262;
                  }
                }
                else
                {
                  v213 = 0;
                  v214 = (_QWORD *)(8 * v208);
                  *(_QWORD *)(8 * v208) = 1;
                  v188 = 8 * v208 + 8;
                  if (v182 != v180)
                    goto LABEL_259;
                }
                v8 = v270;
                v189 = v274;
                v181 = &v213[8 * v210];
                v289[1] = v214;
                *((_QWORD *)&v290 + 1) = v181;
                if (v180)
                {
LABEL_263:
                  v218 = v181;
                  v219 = v185;
                  operator delete(v180);
                  v181 = v218;
                  v185 = v219;
                }
LABEL_264:
                v180 = (char *)v214;
                v193 = v272;
                v184 = v267;
                goto LABEL_229;
              }
LABEL_228:
              *(_QWORD *)v182 = 1;
              v188 = (uint64_t)(v182 + 8);
              v189 = v274;
LABEL_229:
              v274 = v189 - v193;
              *(_QWORD *)&v290 = v188;
              v190 = *((_QWORD *)v295 + v186);
              if (v187 <= v190)
                v187 = *((_QWORD *)v295 + v186);
              v191 = v323[0] - v190 * v193;
              v323[0] = v191;
              ++v186;
              v176 = (char *)v298;
              v182 = (char *)v188;
              if (v186 >= (v299 - (_BYTE *)v298) >> 2)
                goto LABEL_291;
            }
          }
          v322[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)&v321, (int)v323, "vars.size() > 0");
          if (v322[0])
          {
            v257 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v321, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 49, v322);
            google::LogMessage::stream((google::LogMessage *)v257);
          }
          else
          {
            v274 = 0;
            v287 = 0u;
            *(_OWORD *)v288 = 0u;
            *(_OWORD *)v289 = 0u;
            v290 = 0u;
            v187 = *v179;
            v191 = -(uint64_t)v128;
            v323[0] = -(uint64_t)v128;
            v8 = v270;
LABEL_291:
            v321.__r_.__value_.__r.__words[0] = 0;
            v3 = v266;
            if (v191 >= 1)
            {
LABEL_292:
              *(_QWORD *)&v287 = 0x8000000000000002;
              *((_QWORD *)&v287 + 1) = v274 - v191 / v187 - (v191 / v187 * v187 < v191);
              a2 = v260;
              if (*off_254079548[0] >= 2
                && (off_254079548[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_254079548, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
              {
                v233 = google::LogMessage::LogMessage((google::LogMessage *)v322, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 68);
                v234 = (_QWORD *)google::LogMessage::stream(v233);
                v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"Generated Knapsack Constraint:", 30);
                operations_research::sat::LinearConstraint::DebugString((operations_research::sat::LinearConstraint *)&v287, v236, &v321);
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v237 = &v321;
                else
                  v237 = (std::string *)v321.__r_.__value_.__r.__words[0];
                if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v238 = HIBYTE(v321.__r_.__value_.__r.__words[2]);
                else
                  v238 = v321.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235, (uint64_t)v237, v238);
                if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v321.__r_.__value_.__l.__data_);
                google::LogMessage::~LogMessage((google::LogMessage *)v322);
              }
              v239 = *(_QWORD *)(v8 + 200);
              v240 = (int *)v288[0];
              if (v288[0] == v288[1])
              {
LABEL_309:
                v242 = (operations_research::TimeLimit *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v8 + 192));
                if (operations_research::sat::LiftKnapsackCut(&v311, v260, &v295, v239, v242, (uint64_t)&v287))v243 = "LiftedKnapsack";
                else
                  v243 = "Knapsack";
              }
              else
              {
                v241 = *(_QWORD *)(v239 + 144);
                while (!*(_QWORD *)(v241 + 20 * *v240) && *(_QWORD *)(v241 + 20 * (*v240 ^ 1)) == -1)
                {
                  if (++v240 == v288[1])
                    goto LABEL_309;
                }
                v243 = "Knapsack";
              }
              v244 = operations_research::sat::ComputeActivity(&v287, v260);
              if (v244 <= (double)*((uint64_t *)&v287 + 1) + 0.000001 && v244 >= (double)(uint64_t)v287 + -0.000001)
              {
                v254 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v321, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 584);
                v255 = (_QWORD *)google::LogMessage::stream(v254);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"Check failed: !SolutionSatisfiesConstraint(cut, lp_values) ", 59);
                goto LABEL_364;
              }
              operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v282, (const operations_research::sat::LinearConstraint *)&v287);
              v246 = strlen(v243);
              if (v246 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v247 = (void *)v246;
              if (v246 >= 0x17)
              {
                v249 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v246 | 7) != 0x17)
                  v249 = v246 | 7;
                v250 = v249 + 1;
                v248 = (void **)operator new(v249 + 1);
                __dst[1] = v247;
                v281 = v250 | 0x8000000000000000;
                __dst[0] = v248;
                v8 = v270;
              }
              else
              {
                HIBYTE(v281) = v246;
                v248 = __dst;
                if (!v246)
                {
LABEL_326:
                  *((_BYTE *)v247 + (_QWORD)v248) = 0;
                  v279 = 0;
                  LOBYTE(v278) = 0;
                  operations_research::sat::LinearConstraintManager::AddCut(v3, &v282, (uint64_t)__dst, v260, (uint64_t)&v278);
                  v109 = v261;
                  if (v279 < 0)
                  {
                    operator delete(v278);
                    if (SHIBYTE(v281) < 0)
                      goto LABEL_346;
LABEL_328:
                    v251 = v285;
                    if (!v285)
                    {
LABEL_330:
                      if (v283)
                      {
                        v284 = v283;
                        operator delete(v283);
                      }
                      if (v289[1])
                      {
                        *(void **)&v290 = v289[1];
                        operator delete(v289[1]);
                      }
                      if (v288[0])
                      {
                        v288[1] = v288[0];
                        operator delete(v288[0]);
                      }
                      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v291, v292);
                      goto LABEL_337;
                    }
                  }
                  else
                  {
                    if ((SHIBYTE(v281) & 0x80000000) == 0)
                      goto LABEL_328;
LABEL_346:
                    operator delete(__dst[0]);
                    v251 = v285;
                    if (!v285)
                      goto LABEL_330;
                  }
                  v286 = v251;
                  operator delete(v251);
                  goto LABEL_330;
                }
              }
              memcpy(v248, v243, (size_t)v247);
              goto LABEL_326;
            }
            v322[0] = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,double>((int)v323, (int)&v321, "slack > 0.0");
            if (!v322[0])
            {
              v191 = v323[0];
              v8 = v270;
              v3 = v266;
              goto LABEL_292;
            }
            v258 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v321, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 64, v322);
            v259 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v258);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v259, "Invalid cover for knapsack cut.");
          }
LABEL_364:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v321);
        }
      }
      v126 = v49 - v114;
      v21 = v265;
      if (v126 >= 0.9999)
        goto LABEL_337;
      goto LABEL_167;
    }
    ++v275;
LABEL_51:
    if (v309)
    {
      v310 = v309;
      operator delete(v309);
    }
    if (v307.__r_.__value_.__r.__words[2])
    {
      v308 = v307.__r_.__value_.__r.__words[2];
      operator delete((void *)v307.__r_.__value_.__r.__words[2]);
    }
    v16 = v277 + 8;
    if (v277 + 8 == v271)
      goto LABEL_351;
  }
  if (!FLAGS_time_limit_use_usertime)
    goto LABEL_350;
  v29 = v23[12];
  if (*((_BYTE *)v23 + 72))
  {
    v30 = v29
        + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v28) - *((_QWORD *)v23 + 10) + *((_QWORD *)v23 + 11)) * v21;
    if (v30 <= v17)
      goto LABEL_350;
    goto LABEL_31;
  }
  v30 = v29 + (double)*((uint64_t *)v23 + 11) * v21;
  if (v30 > v17)
  {
LABEL_31:
    *((_QWORD *)v23 + 2) = *((_QWORD *)v23 + 1) + (uint64_t)(v30 * 1000000000.0);
    goto LABEL_32;
  }
LABEL_350:
  v23[2] = 0.0;
LABEL_351:
  if (v275 >= 1
    && *off_254079540[0] >= 2
    && (off_254079540[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079540, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v307, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 590);
    v253 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v307);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"Skipped constraints: ", 21);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v307);
  }
LABEL_356:
  if (v313[1])
  {
    *(void **)&v314 = v313[1];
    operator delete(v313[1]);
  }
  if (v312[0])
  {
    v312[1] = v312[0];
    operator delete(v312[0]);
  }
  operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)v317);
}

void sub_22DB31D40()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_22DB31D48()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_22DB31D50()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_22DB31D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *a67;
  uint64_t a68;
  void *a70;
  uint64_t a71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;

  if (__p)
  {
    operator delete(__p);
    v72 = a51;
    if (!a51)
      goto LABEL_6;
  }
  else
  {
    v72 = a51;
    if (!a51)
    {
LABEL_6:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a57, (_QWORD *)a58);
      v73 = *a11;
      if (*a11)
      {
        *(_QWORD *)(a10 + 48) = v73;
        operator delete(v73);
      }
      MEMORY[0x22E31DF78](a10, 0x1030C40021678CBLL);
      if (a61)
      {
        a62 = (uint64_t)a61;
        operator delete(a61);
        v74 = a64;
        if (!a64)
        {
LABEL_10:
          v75 = a67;
          if (!a67)
            goto LABEL_11;
          goto LABEL_19;
        }
      }
      else
      {
        v74 = a64;
        if (!a64)
          goto LABEL_10;
      }
      a65 = (uint64_t)v74;
      operator delete(v74);
      v75 = a67;
      if (!a67)
      {
LABEL_11:
        v76 = a70;
        if (!a70)
          goto LABEL_12;
        goto LABEL_20;
      }
LABEL_19:
      a68 = (uint64_t)v75;
      operator delete(v75);
      v76 = a70;
      if (!a70)
      {
LABEL_12:
        v77 = (void *)STACK[0x228];
        if (!STACK[0x228])
          goto LABEL_13;
        goto LABEL_21;
      }
LABEL_20:
      a71 = (uint64_t)v76;
      operator delete(v76);
      v77 = (void *)STACK[0x228];
      if (!STACK[0x228])
      {
LABEL_13:
        v78 = (void *)STACK[0x210];
        if (!STACK[0x210])
          goto LABEL_14;
        goto LABEL_22;
      }
LABEL_21:
      STACK[0x230] = (unint64_t)v77;
      operator delete(v77);
      v78 = (void *)STACK[0x210];
      if (!STACK[0x210])
      {
LABEL_14:
        v79 = (void *)STACK[0x268];
        if (!STACK[0x268])
          goto LABEL_15;
        goto LABEL_23;
      }
LABEL_22:
      STACK[0x218] = (unint64_t)v78;
      operator delete(v78);
      v79 = (void *)STACK[0x268];
      if (!STACK[0x268])
      {
LABEL_15:
        v80 = (void *)STACK[0x250];
        if (!STACK[0x250])
          goto LABEL_16;
        goto LABEL_24;
      }
LABEL_23:
      STACK[0x270] = (unint64_t)v79;
      operator delete(v79);
      v80 = (void *)STACK[0x250];
      if (!STACK[0x250])
      {
LABEL_16:
        operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)&STACK[0x298]);
        _Unwind_Resume(a1);
      }
LABEL_24:
      STACK[0x258] = (unint64_t)v80;
      operator delete(v80);
      operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)&STACK[0x298]);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v72);
  goto LABEL_6;
}

uint64_t std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstrain"
                     "tENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16Line"
                                "arConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS"
                                "4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  operations_research::sat::ImpliedBoundsProcessor *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v4 = operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)a1, (char **)a2);
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  v4 = (operations_research::sat::ImpliedBoundsProcessor *)((char *)v4 + 136);
  *((_QWORD *)v4 + 2) = 0;
  std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(v4, *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 6);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v6 = *(_BYTE **)(a2 + 160);
  v5 = *(_BYTE **)(a2 + 168);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 160) = v8;
    *(_QWORD *)(a1 + 168) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 176) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 168) = v9;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  return a1;
}

void sub_22DB32334(_Unwind_Exception *a1)
{
  operations_research::sat::ImpliedBoundsProcessor *v1;

  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(v1);
  _Unwind_Resume(a1);
}

void sub_22DB32348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v9;
  void **v10;
  void *v11;

  v11 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 168) = v11;
    operator delete(v11);
  }
  std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((void **)(v9 + 136), v9);
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v9);
  _Unwind_Resume(a9);
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,double>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB323F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB3259C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F985650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F985650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 * *(_QWORD *)(a1 + 8) / *(uint64_t *)(a1 + 16)
       - (*a2 * *(_QWORD *)(a1 + 8) / *(uint64_t *)(a1 + 16) * *(_QWORD *)(a1 + 16) > *a2 * *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F9856E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9856E0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a1[3] * *a2;
  return ((v3 - (a1[2] + (v3 / v2 - (v3 / v2 * v2 > v3)) * v2)) & ~((v3 - (a1[2] + (v3 / v2 - (v3 / v2 * v2 > v3)) * v2)) >> 63))
       + (v3 / v2 - (v3 / v2 * v2 > v3)) * a1[1];
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F985760;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F985760;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[1] * *a2;
  v4 = v3 / v2 - (v3 / v2 * v2 > v3);
  return (v3 - v4 * v2) * a1[3] / v2 + v4 * a1[3] - ((v3 - v4 * v2) * a1[3] / v2 * v2 > (v3 - v4 * v2) * a1[3]);
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24F9857E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24F9857E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3] * *a2;
  v4 = a1[4];
  v3 = a1[5];
  v5 = v2 / v4 - (v2 / v4 * v4 > v2);
  v6 = v2 - (a1[2] + v5 * v4);
  if (v6 < 1)
    return v5 * v3;
  v7 = v6 * (v3 - 1);
  v8 = a1[1];
  if (v7 / v8 * v8 >= v7)
    v9 = v7 / v8;
  else
    v9 = v7 / v8 + 1;
  return v9 + v5 * v3;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 < *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_QWORD *)a2 - 1);
            if (v98 >= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (uint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (uint64_t *)*v10;
        if ((uint64_t)v75 >= *v10)
        {
          if (v77 >= (uint64_t)v75)
          {
LABEL_144:
            v75 = (uint64_t *)v77;
            v92 = *((_QWORD *)a2 - 1);
            if (v92 >= (uint64_t)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_QWORD *)a2 - 1) = v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 < v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 < *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (uint64_t)v75;
          v79 = v10;
          v80 = (uint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (uint64_t)v78)
          {
LABEL_136:
            v92 = *((_QWORD *)a2 - 1);
            if (v92 >= (uint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (uint64_t)v75)
          {
            *v10 = (uint64_t)v75;
            v10[1] = (uint64_t)v78;
            v79 = v10 + 1;
            v80 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (uint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (uint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (uint64_t *)a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (uint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (uint64_t *)a2;
            if (v10 < (uint64_t *)a2)
            {
              v62 = (uint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (uint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (uint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (uint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (uint64_t *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v10, v57);
          v10 = v57 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v57 + 1, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (uint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (uint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(uint64_t *)((char *)v10 + v89 + 8) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(uint64_t *)((char *)v10 + v89 - 8);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (uint64_t *)((char *)v10 + v89 + 8);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (uint64_t *)v81;
            if (v93 < v94)
            {
              do
              {
                *(_QWORD *)v81 = v94;
                v94 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v93 < v94);
              *(_QWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (uint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(uint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v34 = (unint64_t)(v4 - 2) >> 1;
    v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        v36 = (2 * v35) | 1;
        v37 = &a1[8 * v36];
        if (2 * v35 + 2 >= v4)
        {
          v38 = *(_QWORD *)v37;
          v40 = &a1[8 * v35];
          v41 = *(_QWORD *)v40;
          if (*(_QWORD *)v37 >= *(_QWORD *)v40)
            goto LABEL_78;
        }
        else
        {
          v38 = *((_QWORD *)v37 + 1);
          v39 = *(_QWORD *)v37 < v38;
          if (*(_QWORD *)v37 > v38)
            v38 = *(_QWORD *)v37;
          if (v39)
          {
            v37 += 8;
            v36 = 2 * v35 + 2;
          }
          v40 = &a1[8 * v35];
          v41 = *(_QWORD *)v40;
          if (v38 >= *(_QWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_QWORD *)v40 = v38;
              v40 = v37;
              if (v34 < v36)
                break;
              v43 = (2 * v36) | 1;
              v37 = &a1[8 * v43];
              v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                v38 = *(_QWORD *)v37;
                v42 = *((_QWORD *)v37 + 1);
                if (*(_QWORD *)v37 <= v42)
                  v38 = *((_QWORD *)v37 + 1);
                if (*(_QWORD *)v37 >= v42)
                  v36 = v43;
                else
                  v37 += 8;
                if (v38 < v41)
                  break;
              }
              else
              {
                v38 = *(_QWORD *)v37;
                v36 = v43;
                if (*(_QWORD *)v37 < v41)
                  break;
              }
            }
            *(_QWORD *)v40 = v41;
          }
        }
      }
      v15 = v35-- <= 0;
    }
    while (!v15);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      v6 = *(_QWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_QWORD *)v7;
        if (*(_QWORD *)v7 < v6)
        {
          *(_QWORD *)v7 = v6;
          *(_QWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v9 = (uint64_t *)(a1 + 16);
    v10 = a2;
    while (1)
    {
      v11 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 < *(_QWORD *)a1)
      {
        *(_QWORD *)v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v11;
        v12 = *((_QWORD *)a1 + 1);
        if (v3 == 16)
        {
          v13 = a1 + 8;
          v14 = 1;
          if (v12 >= v11)
            goto LABEL_26;
        }
        else
        {
          v15 = v12 < *v9;
          if (v12 <= *v9)
            v12 = *v9;
          if (v15)
            v13 = a1 + 16;
          else
            v13 = a1 + 8;
          if (v15)
            v14 = 2;
          else
            v14 = 1;
          if (v12 >= v11)
          {
LABEL_26:
            v16 = a1;
            while (1)
            {
              *(_QWORD *)v16 = v12;
              v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14)
                break;
              v18 = (2 * v14) | 1;
              v13 = &a1[8 * v18];
              v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                v12 = *(_QWORD *)v13;
                v17 = *((_QWORD *)v13 + 1);
                if (*(_QWORD *)v13 <= v17)
                  v12 = *((_QWORD *)v13 + 1);
                if (*(_QWORD *)v13 >= v17)
                  v14 = v18;
                else
                  v13 += 8;
                if (v12 < v11)
                  break;
              }
              else
              {
                v12 = *(_QWORD *)v13;
                v14 = v18;
                if (*(_QWORD *)v13 < v11)
                  break;
              }
            }
            *(_QWORD *)v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    v19 = (unint64_t)v3 >> 3;
    do
    {
      v20 = 0;
      v21 = *(_QWORD *)a1;
      v22 = (unint64_t)(v19 - 2) >> 1;
      v23 = a1;
      do
      {
        while (1)
        {
          v26 = &v23[8 * v20 + 8];
          v27 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v19)
            break;
          v20 = v27;
          *(_QWORD *)v23 = *(_QWORD *)v26;
          v23 = v26;
          if (v27 > v22)
            goto LABEL_51;
        }
        v24 = *(_QWORD *)v26;
        v25 = *((_QWORD *)v26 + 1);
        if (*(_QWORD *)v26 <= v25)
          v24 = *((_QWORD *)v26 + 1);
        if (*(_QWORD *)v26 >= v25)
          v20 = v27;
        else
          v26 += 8;
        *(_QWORD *)v23 = v24;
        v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 == a2)
      {
        *(_QWORD *)v26 = v21;
      }
      else
      {
        *(_QWORD *)v26 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
        v28 = v26 - a1 + 8;
        if (v28 >= 9)
        {
          v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
          v30 = &a1[8 * v29];
          v31 = *(_QWORD *)v30;
          v32 = *(_QWORD *)v26;
          if (*(_QWORD *)v30 < *(_QWORD *)v26)
          {
            do
            {
              *(_QWORD *)v26 = v31;
              v26 = v30;
              if (!v29)
                break;
              v29 = (v29 - 1) >> 1;
              v30 = &a1[8 * v29];
              v31 = *(_QWORD *)v30;
            }
            while (*(_QWORD *)v30 < v32);
            *(_QWORD *)v26 = v32;
          }
        }
      }
      v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

_QWORD *std::__function::__value_func<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB33B74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F985860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F985860;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, char **a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  int v45;
  int v46;
  void *__p;
  void *v48;
  char *v49;
  _QWORD v50[4];
  int v51;
  int v52;
  int v53;
  void *v54;
  void *v55;
  char *v56;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 144);
  v5 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v3 + 20 * (v4 ^ 1));
  if (v6 >= 0)
    v7 = *(_QWORD *)(v3 + 20 * (v4 ^ 1));
  else
    v7 = -v6;
  v8 = 63 - __clz(v7);
  v9 = *(_QWORD *)(v3 + 20 * (v5 ^ 1));
  if (v6)
    v10 = v8;
  else
    v10 = 0;
  if (v9 >= 0)
    v11 = *(_QWORD *)(v3 + 20 * (v5 ^ 1));
  else
    v11 = -v9;
  v12 = 63 - __clz(v11);
  v14 = *a2;
  v13 = a2[1];
  v15 = *a3;
  v16 = *(_QWORD *)(v3 + 20 * v5);
  if (!v9)
    v12 = 0;
  v17 = -v9;
  v18 = *(_QWORD *)(v3 + 20 * v4);
  v19 = -v6;
  v20 = v10 + v12;
  v21 = v6 * v9;
  if (v20 > 61)
  {
    if (v9)
      v22 = v6 == 0;
    else
      v22 = 1;
    if (v22)
      goto LABEL_33;
    v23 = ((v19 ^ (unint64_t)v17) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    v24 = v7 * v11;
    if (v20 > 0x3E || v24 >= v23)
    {
      if (v23 < 0x1FFFFFFFFFFFFFLL)
      {
LABEL_33:
        v39 = v21;
        v40 = v19;
        v28 = *(_QWORD *)&v14[8 * v5];
        v29 = *(_QWORD *)&v14[8 * v4];
        v30 = *(int *)(a1 + 8);
        v31 = *(_QWORD *)&v14[8 * v30];
        v50[0] = *a3;
        v50[1] = v31;
        v50[2] = v28;
        v50[3] = v29;
        v51 = v5;
        v52 = v4;
        v53 = v30;
        v55 = 0;
        v56 = 0;
        v54 = 0;
        v32 = v13;
        v33 = v13 - v14;
        v41 = v18;
        v42 = (v13 - v14) >> 3;
        if (v13 != v14)
        {
          if ((v33 & 0x8000000000000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v34 = -v9;
          v35 = (char *)operator new(v13 - v14);
          v36 = &v35[8 * v42];
          v54 = v35;
          v56 = v36;
          memcpy(v35, v14, v33);
          v55 = v36;
          v17 = v34;
        }
        v43[0] = v15;
        v43[1] = v31;
        v43[2] = v28;
        v43[3] = v29;
        v44 = v5;
        v45 = v4;
        v46 = v30;
        v48 = 0;
        v49 = 0;
        __p = 0;
        if (v32 != v14)
        {
          if ((v33 & 0x8000000000000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v37 = (char *)operator new(v33);
          v38 = &v37[8 * v42];
          __p = v37;
          v49 = v38;
          memcpy(v37, v14, v33);
          v48 = v38;
        }
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()((uint64_t)v50, v41, v16, v41 * v16);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()((uint64_t)v50, v40, v17, v39);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()((uint64_t)v43, v40, v16, v16 * v40);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()((uint64_t)v43, v41, v17, v41 * v17);
        if (__p)
        {
          v48 = __p;
          operator delete(__p);
        }
        if (v54)
        {
          v55 = v54;
          operator delete(v54);
        }
        return;
      }
    }
    else
    {
      if (v23 >= 0)
        v27 = v24;
      else
        v27 = -(uint64_t)v24;
      if (v27 < 0x1FFFFFFFFFFFFFLL)
        goto LABEL_33;
    }
  }
  else if (v21 < 0x1FFFFFFFFFFFFFLL)
  {
    goto LABEL_33;
  }
  if (*operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__ >= 3
    && (operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v50, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1161);
    v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Potential overflow in PositiveMultiplicationCutGenerator", 56);
    google::LogMessage::~LogMessage((google::LogMessage *)v50);
  }
}

void sub_22DB33F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB33F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVa"
                     "riable_tag_EiEES4_S4_PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_"
                                "20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

void operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char v54;
  void *v55[2];
  char v56;
  __int128 v57;
  void *v58;
  void *v59;
  void *__p;
  void *v61;
  __int128 v62;
  void *v63[2];
  void *v64[2];
  __int128 v65;

  if (*(double *)(a1 + 24) * (double)a3 - (*(double *)(a1 + 8) - *(double *)(a1 + 16) * (double)a2) < (double)a4 + 0.0001)
    return;
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  *(_OWORD *)v63 = 0u;
  v8 = (char *)operator new(4uLL);
  *(_DWORD *)v8 = *(_DWORD *)(a1 + 40);
  v9 = v8 + 4;
  v63[1] = v8 + 4;
  v64[0] = v8 + 4;
  v63[0] = v8;
  v10 = (char *)operator new(8uLL);
  *(_QWORD *)v10 = -1;
  v11 = v10 + 8;
  *(_QWORD *)&v65 = v10 + 8;
  *((_QWORD *)&v65 + 1) = v10 + 8;
  v64[1] = v10;
  if (a2)
  {
    v12 = (char *)operator new(8uLL);
    v9 = v12 + 8;
    v13 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)v12 = *(_DWORD *)v8;
    *((_DWORD *)v12 + 1) = v13;
    v63[0] = v12;
    v64[0] = v12 + 8;
    operator delete(v8);
    v63[1] = v12 + 8;
    v14 = (char *)operator new(0x10uLL);
    v11 = v14 + 16;
    *(_QWORD *)v14 = *(_QWORD *)v10;
    *((_QWORD *)v14 + 1) = a2;
    v64[1] = v14;
    *((_QWORD *)&v65 + 1) = v14 + 16;
    operator delete(v10);
    *(_QWORD *)&v65 = v14 + 16;
    v10 = v14;
    v8 = v12;
  }
  if (a3)
  {
    v15 = v9 - v8;
    v16 = (v9 - v8) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (v15 >> 1 > v17)
      v17 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(4 * v18);
      v20 = &v19[4 * v16];
      v21 = &v19[4 * v18];
      *(_DWORD *)v20 = *(_DWORD *)(a1 + 36);
      v22 = v9 - v8;
      if (v9 != v8)
      {
LABEL_14:
        v23 = v22 - 4;
        if (v23 >= 0x1C)
        {
          v26 = (v23 >> 2) + 1;
          v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          v24 = &v9[-v27];
          v25 = &v20[-v27];
          v28 = &v19[4 * v16 - 16];
          v29 = v9 - 16;
          v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            v63[0] = v25;
            v64[0] = v21;
            operator delete(v8);
            v63[1] = v20 + 4;
            v33 = v11 - v10;
            v34 = (v11 - v10) >> 3;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (v33 >> 2 > v35)
              v35 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
            {
              if (v36 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v37 = (char *)operator new(8 * v36);
              v38 = (uint64_t *)&v37[8 * v34];
              v39 = &v37[8 * v36];
              *v38 = a3;
              v40 = v11 - v10;
              if (v11 != v10)
                goto LABEL_31;
            }
            else
            {
              v37 = 0;
              v38 = (uint64_t *)(8 * v34);
              v39 = 0;
              *(_QWORD *)(8 * v34) = a3;
              v40 = v11 - v10;
              if (v11 != v10)
              {
LABEL_31:
                v41 = v40 - 8;
                if (v41 >= 0x18)
                {
                  v44 = (v41 >> 3) + 1;
                  v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
                  v42 = &v11[-v45];
                  v43 = &v38[v45 / 0xFFFFFFFFFFFFFFF8];
                  v46 = &v37[8 * v34 - 16];
                  v47 = v11 - 16;
                  v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v49 = *(_OWORD *)v47;
                    *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                    *(_OWORD *)v46 = v49;
                    v46 -= 32;
                    v47 -= 32;
                    v48 -= 4;
                  }
                  while (v48);
                  if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_39;
                }
                else
                {
                  v42 = v11;
                  v43 = v38;
                }
                do
                {
                  v50 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *--v43 = v50;
                }
                while (v42 != v10);
LABEL_39:
                v64[1] = v43;
                *((_QWORD *)&v65 + 1) = v39;
                operator delete(v10);
                *(_QWORD *)&v65 = v38 + 1;
                goto LABEL_40;
              }
            }
            v43 = v38;
            goto LABEL_39;
          }
        }
        else
        {
          v24 = v9;
          v25 = v20;
        }
        do
        {
          v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v25 - 1) = v32;
          v25 -= 4;
        }
        while (v24 != v8);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (char *)(4 * v16);
      v21 = 0;
      *(_DWORD *)(4 * v16) = *(_DWORD *)(a1 + 36);
      v22 = v9 - v8;
      if (v9 != v8)
        goto LABEL_14;
    }
    v25 = v20;
    goto LABEL_22;
  }
LABEL_40:
  *(_QWORD *)&v62 = 0x8000000000000002;
  *((_QWORD *)&v62 + 1) = a4;
  v51 = *(_QWORD *)a1;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v57, (const operations_research::sat::LinearConstraint *)&v62);
  v56 = 15;
  strcpy((char *)v55, "PositiveProduct");
  v54 = 0;
  LOBYTE(v53) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v51, &v57, (uint64_t)v55, (uint64_t *)(a1 + 48), (uint64_t)&v53);
  if ((v54 & 0x80000000) == 0)
  {
    if ((v56 & 0x80000000) == 0)
      goto LABEL_42;
LABEL_52:
    operator delete(v55[0]);
    v52 = __p;
    if (!__p)
      goto LABEL_44;
    goto LABEL_43;
  }
  operator delete(v53);
  if (v56 < 0)
    goto LABEL_52;
LABEL_42:
  v52 = __p;
  if (__p)
  {
LABEL_43:
    v61 = v52;
    operator delete(v52);
  }
LABEL_44:
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v64[1])
  {
    *(void **)&v65 = v64[1];
    operator delete(v64[1]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
}

void sub_22DB34428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB3443C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a29);
  _Unwind_Resume(a1);
}

void sub_22DB34478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB3448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB344A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char v54;
  void *v55[2];
  char v56;
  __int128 v57;
  void *v58;
  void *v59;
  void *__p;
  void *v61;
  __int128 v62;
  void *v63[2];
  void *v64[2];
  __int128 v65;

  if (*(double *)(a1 + 24) * (double)a3 - (*(double *)(a1 + 8) - *(double *)(a1 + 16) * (double)a2) > (double)a4 + -0.0001)
    return;
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  *(_OWORD *)v63 = 0u;
  v8 = (char *)operator new(4uLL);
  *(_DWORD *)v8 = *(_DWORD *)(a1 + 40);
  v9 = v8 + 4;
  v63[1] = v8 + 4;
  v64[0] = v8 + 4;
  v63[0] = v8;
  v10 = (char *)operator new(8uLL);
  *(_QWORD *)v10 = -1;
  v11 = v10 + 8;
  *(_QWORD *)&v65 = v10 + 8;
  *((_QWORD *)&v65 + 1) = v10 + 8;
  v64[1] = v10;
  if (a2)
  {
    v12 = (char *)operator new(8uLL);
    v9 = v12 + 8;
    v13 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)v12 = *(_DWORD *)v8;
    *((_DWORD *)v12 + 1) = v13;
    v63[0] = v12;
    v64[0] = v12 + 8;
    operator delete(v8);
    v63[1] = v12 + 8;
    v14 = (char *)operator new(0x10uLL);
    v11 = v14 + 16;
    *(_QWORD *)v14 = *(_QWORD *)v10;
    *((_QWORD *)v14 + 1) = a2;
    v64[1] = v14;
    *((_QWORD *)&v65 + 1) = v14 + 16;
    operator delete(v10);
    *(_QWORD *)&v65 = v14 + 16;
    v10 = v14;
    v8 = v12;
  }
  if (a3)
  {
    v15 = v9 - v8;
    v16 = (v9 - v8) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (v15 >> 1 > v17)
      v17 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(4 * v18);
      v20 = &v19[4 * v16];
      v21 = &v19[4 * v18];
      *(_DWORD *)v20 = *(_DWORD *)(a1 + 36);
      v22 = v9 - v8;
      if (v9 != v8)
      {
LABEL_14:
        v23 = v22 - 4;
        if (v23 >= 0x1C)
        {
          v26 = (v23 >> 2) + 1;
          v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          v24 = &v9[-v27];
          v25 = &v20[-v27];
          v28 = &v19[4 * v16 - 16];
          v29 = v9 - 16;
          v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            v63[0] = v25;
            v64[0] = v21;
            operator delete(v8);
            v63[1] = v20 + 4;
            v33 = v11 - v10;
            v34 = (v11 - v10) >> 3;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (v33 >> 2 > v35)
              v35 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
            {
              if (v36 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v37 = (char *)operator new(8 * v36);
              v38 = (uint64_t *)&v37[8 * v34];
              v39 = &v37[8 * v36];
              *v38 = a3;
              v40 = v11 - v10;
              if (v11 != v10)
                goto LABEL_31;
            }
            else
            {
              v37 = 0;
              v38 = (uint64_t *)(8 * v34);
              v39 = 0;
              *(_QWORD *)(8 * v34) = a3;
              v40 = v11 - v10;
              if (v11 != v10)
              {
LABEL_31:
                v41 = v40 - 8;
                if (v41 >= 0x18)
                {
                  v44 = (v41 >> 3) + 1;
                  v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
                  v42 = &v11[-v45];
                  v43 = &v38[v45 / 0xFFFFFFFFFFFFFFF8];
                  v46 = &v37[8 * v34 - 16];
                  v47 = v11 - 16;
                  v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v49 = *(_OWORD *)v47;
                    *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                    *(_OWORD *)v46 = v49;
                    v46 -= 32;
                    v47 -= 32;
                    v48 -= 4;
                  }
                  while (v48);
                  if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_39;
                }
                else
                {
                  v42 = v11;
                  v43 = v38;
                }
                do
                {
                  v50 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *--v43 = v50;
                }
                while (v42 != v10);
LABEL_39:
                v64[1] = v43;
                *((_QWORD *)&v65 + 1) = v39;
                operator delete(v10);
                *(_QWORD *)&v65 = v38 + 1;
                goto LABEL_40;
              }
            }
            v43 = v38;
            goto LABEL_39;
          }
        }
        else
        {
          v24 = v9;
          v25 = v20;
        }
        do
        {
          v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v25 - 1) = v32;
          v25 -= 4;
        }
        while (v24 != v8);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (char *)(4 * v16);
      v21 = 0;
      *(_DWORD *)(4 * v16) = *(_DWORD *)(a1 + 36);
      v22 = v9 - v8;
      if (v9 != v8)
        goto LABEL_14;
    }
    v25 = v20;
    goto LABEL_22;
  }
LABEL_40:
  *(_QWORD *)&v62 = a4;
  *((_QWORD *)&v62 + 1) = 0x7FFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)a1;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v57, (const operations_research::sat::LinearConstraint *)&v62);
  v56 = 15;
  strcpy((char *)v55, "PositiveProduct");
  v54 = 0;
  LOBYTE(v53) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v51, &v57, (uint64_t)v55, (uint64_t *)(a1 + 48), (uint64_t)&v53);
  if ((v54 & 0x80000000) == 0)
  {
    if ((v56 & 0x80000000) == 0)
      goto LABEL_42;
LABEL_52:
    operator delete(v55[0]);
    v52 = __p;
    if (!__p)
      goto LABEL_44;
    goto LABEL_43;
  }
  operator delete(v53);
  if (v56 < 0)
    goto LABEL_52;
LABEL_42:
  v52 = __p;
  if (__p)
  {
LABEL_43:
    v61 = v52;
    operator delete(v52);
  }
LABEL_44:
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v64[1])
  {
    *(void **)&v65 = v64[1];
    operator delete(v64[1]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
}

void sub_22DB348F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB34908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a29);
  _Unwind_Resume(a1);
}

void sub_22DB34944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB34958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB3496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F9858E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9858E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  _DWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  _QWORD *v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  void *v51;
  char v52;
  void *v53[2];
  char v54;
  __int128 v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  char v61;
  void *v62[2];
  char v63;
  __int128 v64;
  void *v65;
  void *v66;
  void *__p;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144);
  v5 = *(_QWORD *)(v4 + 20 * (v3 ^ 1));
  v6 = *(_QWORD *)(v4 + 20 * v3);
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v6 == -v5)
    return;
  v10 = *a3;
  v11 = *(int *)(a1 + 8);
  v12 = *(double *)(*a2 + 8 * v11);
  v13 = *(double *)(*a2 + 8 * v3);
  if (v12 >= (double)(v6 * v6) + (double)(v6 - v5) * (v13 - (double)v6) + 0.0001)
  {
    v69 = 0u;
    v14 = operator new(4uLL);
    *v14 = v11;
    v15 = operator new(8uLL);
    *v15 = 1;
    *(_QWORD *)&v72 = v15 + 1;
    *((_QWORD *)&v72 + 1) = v15 + 1;
    *((_QWORD *)&v71 + 1) = v15;
    v16 = operator new(8uLL);
    *v16 = v11;
    v16[1] = v3;
    v17 = v16 + 2;
    *(_QWORD *)&v70 = v16;
    *(_QWORD *)&v71 = v16 + 2;
    operator delete(v14);
    *((_QWORD *)&v70 + 1) = v17;
    v18 = operator new(0x10uLL);
    *v18 = *v15;
    v18[1] = v5 - v6;
    v19 = v18 + 2;
    *((_QWORD *)&v71 + 1) = v18;
    *((_QWORD *)&v72 + 1) = v18 + 2;
    operator delete(v15);
    *(_QWORD *)&v72 = v19;
    *(_QWORD *)&v69 = 0x8000000000000002;
    *((_QWORD *)&v69 + 1) = v6 * v5;
    operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v64, (const operations_research::sat::LinearConstraint *)&v69);
    v63 = 11;
    strcpy((char *)v62, "SquareUpper");
    v61 = 0;
    LOBYTE(v60) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(v10, &v64, (uint64_t)v62, a2, (uint64_t)&v60);
    if (v61 < 0)
    {
      operator delete(v60);
      if ((v63 & 0x80000000) == 0)
      {
LABEL_8:
        v20 = __p;
        if (!__p)
        {
LABEL_10:
          if (v65)
          {
            v66 = v65;
            operator delete(v65);
          }
          if (*((_QWORD *)&v71 + 1))
          {
            *(_QWORD *)&v72 = *((_QWORD *)&v71 + 1);
            operator delete(*((void **)&v71 + 1));
          }
          if ((_QWORD)v70)
          {
            *((_QWORD *)&v70 + 1) = v70;
            operator delete((void *)v70);
          }
          goto LABEL_16;
        }
LABEL_9:
        v68 = v20;
        operator delete(v20);
        goto LABEL_10;
      }
    }
    else if ((v63 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v62[0]);
    v20 = __p;
    if (!__p)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_16:
  v21 = vcvtmd_s64_f64(v13);
  v22 = (2 * v21) | 1;
  if (-((double)(uint64_t)floor(v13) - (double)v22 * v13) - (double)(uint64_t)(v21 * v21) < v12 + 0.0001)
    return;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v23 = operator new(4uLL);
  v24 = *(_DWORD *)(a1 + 8);
  *v23 = v24;
  *((_QWORD *)&v70 + 1) = v23 + 1;
  *(_QWORD *)&v71 = v23 + 1;
  *(_QWORD *)&v70 = v23;
  v25 = operator new(8uLL);
  *v25 = 1;
  *(_QWORD *)&v72 = v25 + 1;
  *((_QWORD *)&v72 + 1) = v25 + 1;
  *((_QWORD *)&v71 + 1) = v25;
  v26 = operator new(8uLL);
  v27 = *(_DWORD *)(a1 + 12);
  *v26 = v24;
  v26[1] = v27;
  v28 = v26 + 2;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = v26 + 2;
  *(_QWORD *)&v71 = v26 + 2;
  operator delete(v23);
  v29 = (_BYTE *)v72;
  *((_QWORD *)&v70 + 1) = v28;
  v30 = -v22;
  if ((unint64_t)v72 < *((_QWORD *)&v72 + 1))
  {
    *(_QWORD *)v72 = v30;
    v31 = (uint64_t)(v29 + 8);
    goto LABEL_41;
  }
  v32 = (_BYTE *)*((_QWORD *)&v71 + 1);
  v33 = (uint64_t)(v72 - *((_QWORD *)&v71 + 1)) >> 3;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v35 = *((_QWORD *)&v72 + 1) - *((_QWORD *)&v71 + 1);
  if ((uint64_t)(*((_QWORD *)&v72 + 1) - *((_QWORD *)&v71 + 1)) >> 2 > v34)
    v34 = v35 >> 2;
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
    v36 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v36 = v34;
  if (v36)
  {
    if (v36 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v37 = operator new(8 * v36);
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v30;
    v31 = (uint64_t)(v38 + 1);
    v40 = v29 - v32;
    if (v29 == v32)
      goto LABEL_39;
    goto LABEL_33;
  }
  v37 = 0;
  v38 = (uint64_t *)(8 * v33);
  v39 = 0;
  *(_QWORD *)(8 * v33) = v30;
  v31 = 8 * v33 + 8;
  v40 = v29 - v32;
  if (v29 != v32)
  {
LABEL_33:
    v41 = v40 - 8;
    if (v41 < 0x58)
      goto LABEL_59;
    if ((unint64_t)(v32 - v37) < 0x20)
      goto LABEL_59;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v29[-v43];
    v38 = (uint64_t *)((char *)v38 - v43);
    v45 = &v37[8 * v33 - 16];
    v46 = (__int128 *)(v29 - 16);
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    v29 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        v49 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v38 = v49;
      }
      while (v29 != v32);
    }
  }
LABEL_39:
  *((_QWORD *)&v71 + 1) = v38;
  *(_QWORD *)&v72 = v31;
  *((_QWORD *)&v72 + 1) = v39;
  if (v32)
    operator delete(v32);
LABEL_41:
  *(_QWORD *)&v72 = v31;
  *(_QWORD *)&v69 = -(uint64_t)(v21 * v21 + v21);
  *((_QWORD *)&v69 + 1) = 0x7FFFFFFFFFFFFFFELL;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v55, (const operations_research::sat::LinearConstraint *)&v69);
  v54 = 11;
  strcpy((char *)v53, "SquareLower");
  v52 = 0;
  LOBYTE(v51) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v10, &v55, (uint64_t)v53, a2, (uint64_t)&v51);
  if ((v52 & 0x80000000) == 0)
  {
    if ((v54 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_53:
    operator delete(v53[0]);
    v50 = v58;
    if (!v58)
      goto LABEL_45;
    goto LABEL_44;
  }
  operator delete(v51);
  if (v54 < 0)
    goto LABEL_53;
LABEL_43:
  v50 = v58;
  if (v58)
  {
LABEL_44:
    v59 = v50;
    operator delete(v50);
  }
LABEL_45:
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (*((_QWORD *)&v71 + 1))
  {
    *(_QWORD *)&v72 = *((_QWORD *)&v71 + 1);
    operator delete(*((void **)&v71 + 1));
  }
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
}

void sub_22DB34F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  _Unwind_Exception *v36;
  void *v37;
  void *v38;

  if (a14 < 0)
    operator delete(__p);
  std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()();
  v36 = *(_Unwind_Exception **)(v35 - 136);
  v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(_QWORD *)(v35 - 160) = v37;
    operator delete(v37);
    v38 = *(void **)(v35 - 192);
    if (!v38)
LABEL_5:
      _Unwind_Resume(v36);
  }
  else
  {
    v38 = *(void **)(v35 - 192);
    if (!v38)
      goto LABEL_5;
  }
  *(_QWORD *)(v35 - 184) = v38;
  operator delete(v38);
  _Unwind_Resume(v36);
}

uint64_t std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES"
                     "4_PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariabl"
                                "e_tag_EiEES4_PNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_PNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_PNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::try_emplace_impl<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 40 * result;
      *(_DWORD *)v18 = *a2;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_QWORD *)(v18 + 16) = 0x7FF0000000000000;
      *(_DWORD *)(v18 + 33) = -1;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 40 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 40 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v41 = *(_QWORD *)(result + 32);
    if (!v41)
      return result;
LABEL_26:
    *(_QWORD *)(v41 + 32) = v15 >> 3;
    *(_QWORD *)(v41 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v19 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 40 * v14);
      v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      v21 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      v22 = 0;
      v23 = *(uint64_t *)((_BYTE *)v18->i64 + v21) & (~*(uint64_t *)((char *)v18->i64 + v21) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        v16 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v22 += 8;
          v16 = (v22 + v16) & v13;
          v23 = *(uint64_t *)((_BYTE *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v17 = (v16 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v22;
      if ((((v17 - v21) ^ (v14 - v21)) & v13) > 7)
      {
        v24 = v18->u8[v17];
        v18->i8[v17] = v20 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v17 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v20 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 40 * v17;
          v27 = (__int128 *)(v25 + 40 * v14);
          v28 = *v27;
          v29 = v27[1];
          *(_QWORD *)(v26 + 32) = *((_QWORD *)v27 + 4);
          *(_OWORD *)v26 = v28;
          *(_OWORD *)(v26 + 16) = v29;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v30 = (__int128 *)(v25 + 40 * v14);
          v31 = *v30;
          v42 = v30[1];
          v32 = *((_QWORD *)v30 + 4);
          v33 = 40 * v17;
          v34 = (__int128 *)(v25 + 40 * v17);
          v35 = *((_QWORD *)v34 + 4);
          v36 = v34[1];
          *v30 = *v34;
          v30[1] = v36;
          *((_QWORD *)v30 + 4) = v35;
          v37 = *(_QWORD *)(result + 8) + v33;
          *(_OWORD *)v37 = v31;
          *(_OWORD *)(v37 + 16) = v42;
          *(_QWORD *)(v37 + 32) = v32;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v20 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v20 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v38 = v14 - (v14 >> 3);
  v39 = v14 == 7;
  v40 = 6;
  if (!v39)
    v40 = v38;
  *(_QWORD *)(result + 40) = v40 - *(_QWORD *)(result + 16);
  v41 = *(_QWORD *)(result + 32);
  if (v41)
    goto LABEL_26;
  return result;
}

_QWORD *std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::__push_back_slow_path<operations_research::sat::ImpliedBoundsProcessor::SlackInfo const&>(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  char *v28;
  uint64_t v29;
  char *v30;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0x6DB6DB6DB6DB6DB7 * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v4) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - v4) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(56 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[56 * v5];
  v11 = &v9[56 * v8];
  v30 = v11;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = v12 - *(_QWORD *)a2;
  if (v12 != *(_QWORD *)a2)
  {
    v28 = v11;
    v29 = v5;
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *((_QWORD *)v10 + 1) = v15;
    *((_QWORD *)v10 + 2) = &v15[4 * (v14 >> 2)];
    v16 = 12 * ((v14 - 12) / 0xCuLL) + 12;
    memcpy(v15, v13, v16);
    *((_QWORD *)v10 + 1) = &v15[v16];
    v11 = v28;
    v5 = v29;
  }
  v17 = &v9[56 * v5];
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(a2 + 40);
  v18 = v10 + 56;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v18;
    a1[2] = v11;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v10[v19];
      v21 = &v3[v19];
      *((_QWORD *)v20 - 6) = 0;
      *((_QWORD *)v20 - 5) = 0;
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v3[v19 - 56];
      *((_QWORD *)v20 - 5) = *(_QWORD *)&v3[v19 - 40];
      *((_QWORD *)v21 - 7) = 0;
      *((_QWORD *)v21 - 6) = 0;
      *((_QWORD *)v21 - 5) = 0;
      v22 = *(_OWORD *)&v3[v19 - 16];
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((_OWORD *)v20 - 1) = v22;
      v19 -= 56;
    }
    while (&v3[v19] != v4);
    v23 = (char *)*a1;
    v3 = (char *)a1[1];
    v18 = v10 + 56;
    *a1 = &v10[v19];
    a1[1] = v10 + 56;
    a1[2] = v30;
    if (v3 != v23)
    {
      v24 = v3;
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 7);
        v24 -= 56;
        v25 = v26;
        if (v26)
        {
          *((_QWORD *)v3 - 6) = v25;
          operator delete(v25);
        }
        v3 = v24;
      }
      while (v24 != v23);
      v3 = v23;
    }
  }
  if (v3)
    operator delete(v3);
  return v18;
}

void sub_22DB358A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  v6 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v6;
    operator delete(v6);
  }
  std::__split_buffer<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 56;
        v4 = *(void **)(v2 - 56);
        *(_QWORD *)(a1 + 16) = v2 - 56;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 48) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 56;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F985960;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F985960;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  *v2 = &off_24F985960;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_22DB35A5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(__n128 *a1, __n128 *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  a2->n128_u64[1] = 0;
  a2->n128_u64[0] = (unint64_t)&off_24F985960;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  v5 = (_BYTE *)a1->n128_u64[1];
  v4 = (_BYTE *)a1[1].n128_u64[0];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    v8 = &v7[4 * (v6 >> 2)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  result = a1[2];
  a2[2] = result;
  return result;
}

void sub_22DB35B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v5;
  int *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;

  if ((*(_DWORD *)(a1[5] + 8) & 0xFFFFFFE) == 0)
  {
    v27 = *a3;
    v28 = 0;
    v29 = 0;
    v5 = (unsigned int *)a1[1];
    v6 = (int *)a1[2];
    if (v5 != (unsigned int *)v6)
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = (int)*v5;
        if (!(*(_QWORD *)(*(_QWORD *)(a1[4] + 144) + 20 * (int)v9)
             + *(_QWORD *)(*(_QWORD *)(a1[4] + 144) + 20 * (int)(v9 ^ 1))))
          goto LABEL_6;
        v10 = *v5;
        v11 = *(_QWORD *)(*a2 + 8 * v9);
        if (v7 >= v29)
          break;
        *(_QWORD *)v7 = v11;
        *((_QWORD *)v7 + 1) = v10;
        v7 += 16;
LABEL_5:
        v28 = (uint64_t)v7;
LABEL_6:
        if (++v5 == (unsigned int *)v6)
          goto LABEL_27;
      }
      v12 = a2;
      v13 = (v7 - v8) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v15 = v29 - v8;
      if ((v29 - v8) >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (char *)operator new(16 * v16);
        v18 = &v17[16 * v13];
        *(_QWORD *)v18 = v11;
        *((_QWORD *)v18 + 1) = v10;
        if (v7 != v8)
        {
LABEL_18:
          v19 = v18;
          do
          {
            v20 = v19 - 16;
            *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
            v7 -= 16;
            v19 -= 16;
          }
          while (v7 != v8);
          v7 = v18 + 16;
          v29 = &v17[16 * v16];
          if (!v8)
            goto LABEL_22;
LABEL_21:
          operator delete(v8);
LABEL_22:
          v8 = v20;
          a2 = v12;
          goto LABEL_5;
        }
      }
      else
      {
        v17 = 0;
        v18 = (char *)(16 * v13);
        *(_QWORD *)v18 = v11;
        *((_QWORD *)v18 + 1) = v10;
        if (v7 != v8)
          goto LABEL_18;
      }
      v20 = v18;
      v7 = v18 + 16;
      v29 = &v17[16 * v16];
      if (!v8)
        goto LABEL_22;
      goto LABEL_21;
    }
    v7 = 0;
    v8 = 0;
LABEL_27:
    v21 = 126 - 2 * __clz((v7 - v8) >> 4);
    if (v7 == v8)
      v22 = 0;
    else
      v22 = v21;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>((uint64_t)v8, (unint64_t)v7, (uint64_t)&v30, v22, 1);
    if (v8 != (char *)v28)
    {
      v23 = v28 - 16;
      if (v28 - 16 > (unint64_t)v8)
      {
        v24 = v8;
        do
        {
          v25 = *(_QWORD *)v24;
          *(_QWORD *)v24 = *(_QWORD *)v23;
          *(_QWORD *)v23 = v25;
          v26 = *((_DWORD *)v24 + 2);
          *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
          *(_DWORD *)(v23 + 8) = v26;
          v24 += 16;
          v23 -= 16;
        }
        while ((unint64_t)v24 < v23);
      }
    }
    if (v8)
      operator delete(v8);
  }
}

void sub_22DB35E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20In"
                     "tegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTy"
                                "peINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

void operations_research::sat::`anonymous namespace'::TryToGenerateAllDiffCut(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  int *v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  void *v43;
  char v44;
  void *v45[2];
  char v46;
  __int128 v47;
  void *v48;
  void *v49;
  void *__p;
  void *v51;
  _OWORD v52[2];
  void *v53[2];
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  int *v57;
  _BYTE *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;

  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  if (a1 == a2)
    goto LABEL_72;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0.0;
  do
  {
    v11 = *(double *)v6;
    v12 = *(_DWORD *)(v6 + 8);
    v13 = operations_research::sat::IntegerTrail::InitialVariableDomain(a3, v12);
    v55 = 0;
    v14 = *(_QWORD *)v13;
    if ((*(_QWORD *)v13 & 1) == 0)
    {
      v55 = *(_QWORD *)v13;
      v56 = *(_OWORD *)(v13 + 8);
      goto LABEL_15;
    }
    v15 = *(__int128 **)(v13 + 8);
    v16 = v14 >> 1;
    if (v14 >= 4)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (__int128 *)operator new(16 * v16);
      *(_QWORD *)&v56 = v17;
      *((_QWORD *)&v56 + 1) = v14 >> 1;
      v55 = 1;
      do
      {
LABEL_12:
        v19 = *v15++;
        *v17++ = v19;
        --v16;
      }
      while (v16);
      v18 = v55;
      goto LABEL_14;
    }
    v17 = &v56;
    if (v14 >= 2)
      goto LABEL_12;
    v18 = 0;
LABEL_14:
    v55 = v18 + (v14 & 0xFFFFFFFFFFFFFFFELL);
LABEL_15:
    operations_research::Domain::UnionWith((operations_research::Domain *)&v60, (const operations_research::Domain *)&v55, (unint64_t *)v52);
    if ((v60 & 1) != 0)
      operator delete((void *)v61);
    v60 = *(_QWORD *)&v52[0];
    v61 = *(_OWORD *)((char *)v52 + 8);
    if (v9 < v8)
    {
      *(_DWORD *)v9 = v12;
      v20 = (uint64_t)(v9 + 4);
      goto LABEL_35;
    }
    v21 = (v9 - (char *)v7) >> 2;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v8 - (char *)v7) >> 1 > v22)
      v22 = (v8 - (char *)v7) >> 1;
    if ((unint64_t)(v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(4 * v23);
      v25 = (int *)&v24[4 * v21];
      *v25 = v12;
      v20 = (uint64_t)(v25 + 1);
      if (v9 == (char *)v7)
        goto LABEL_33;
    }
    else
    {
      v24 = 0;
      v25 = (int *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12;
      v20 = 4 * v21 + 4;
      if (v9 == (char *)v7)
        goto LABEL_33;
    }
    v26 = v9 - 4 - (char *)v7;
    if (v26 < 0xBC)
    {
      v27 = v9;
      goto LABEL_32;
    }
    if (&v24[v9 - (char *)v7 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v9 - (char *)v7 - 4])
    {
      v27 = v9;
      do
      {
LABEL_32:
        v28 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--v25 = v28;
      }
      while (v27 != (char *)v7);
      goto LABEL_33;
    }
    if (&v9[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
    {
      v27 = v9;
      goto LABEL_32;
    }
    if ((unint64_t)((char *)v7 - v24) < 0x20)
    {
      v27 = v9;
      goto LABEL_32;
    }
    v34 = (v26 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v27 = &v9[-v35];
    v25 = (int *)((char *)v25 - v35);
    v36 = &v24[4 * v21 - 16];
    v37 = v9 - 16;
    v38 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_32;
LABEL_33:
    v8 = &v24[4 * v23];
    v57 = v25;
    v59 = v8;
    if (v7)
      operator delete(v7);
LABEL_35:
    v58 = (_BYTE *)v20;
    v7 = v57;
    v29 = operations_research::SumOfKMinValueInDomain((operations_research *)&v60, (const operations_research::Domain *)((unint64_t)(v20 - (_QWORD)v57) >> 2));
    v30 = operations_research::SumOfKMaxValueInDomain((operations_research *)&v60, (const operations_research::Domain *)((unint64_t)(v20 - (_QWORD)v7) >> 2));
    v10 = v10 + v11;
    if (v10 >= (double)v29 && v10 <= (double)v30)
    {
      v9 = (char *)v20;
      if ((v55 & 1) != 0)
        goto LABEL_3;
      goto LABEL_4;
    }
    *(_OWORD *)v53 = 0u;
    v54 = 0u;
    v32 = v7;
    memset(v52, 0, sizeof(v52));
    if (v7 != (int *)v20)
    {
      do
        operations_research::sat::LinearConstraint::AddTerm(v52, *v32++, 1);
      while (v32 != (int *)v20);
    }
    *(_QWORD *)&v52[0] = v29;
    *((_QWORD *)&v52[0] + 1) = v30;
    operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v47, (const operations_research::sat::LinearConstraint *)v52);
    v46 = 8;
    strcpy((char *)v45, "all_diff");
    v44 = 0;
    LOBYTE(v43) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(a5, &v47, (uint64_t)v45, a4, (uint64_t)&v43);
    if (v44 < 0)
    {
      operator delete(v43);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_43:
        v33 = __p;
        if (!__p)
          goto LABEL_45;
LABEL_44:
        v51 = v33;
        operator delete(v33);
        goto LABEL_45;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(v45[0]);
    v33 = __p;
    if (__p)
      goto LABEL_44;
LABEL_45:
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    v58 = v7;
    if ((v60 & 1) != 0)
      operator delete((void *)v61);
    v60 = 0;
    if (v53[1])
    {
      *(void **)&v54 = v53[1];
      operator delete(v53[1]);
    }
    if (*(_QWORD *)&v52[1])
    {
      *((_QWORD *)&v52[1] + 1) = *(_QWORD *)&v52[1];
      operator delete(*(void **)&v52[1]);
    }
    v10 = 0.0;
    v9 = (char *)v7;
    if ((v55 & 1) != 0)
LABEL_3:
      operator delete((void *)v56);
LABEL_4:
    v6 += 16;
  }
  while (v6 != a2);
  if (v7)
    operator delete(v7);
LABEL_72:
  if ((v60 & 1) != 0)
    operator delete((void *)v61);
}

void sub_22DB36338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 152);
  if (v37)
  {
    *(_QWORD *)(v35 - 144) = v37;
    operator delete(v37);
    if ((*(_BYTE *)(v35 - 128) & 1) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(_BYTE *)(v35 - 128) & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v35 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v37;
  int v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t i;
  unint64_t v60;
  double v61;
  double v62;
  int v63;
  unint64_t j;
  int v65;

  v8 = result;
LABEL_2:
  v9 = a2 - 16;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  v65 = a5;
  while (2)
  {
    v8 = v10;
    v12 = a2 - v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(double *)(a2 - 16);
        v26 = *(double *)v8;
        if (v25 < *(double *)v8)
        {
          v27 = *(_DWORD *)(v8 + 8);
          v28 = *(_DWORD *)(a2 - 8);
LABEL_25:
          *(double *)v8 = v25;
          *(double *)(a2 - 16) = v26;
          *(_DWORD *)(v8 + 8) = v28;
          *(_DWORD *)(a2 - 8) = v27;
          return result;
        }
        if (v26 >= v25)
        {
          v28 = *(_DWORD *)(a2 - 8);
          v27 = *(_DWORD *)(v8 + 8);
          if (v28 < v27)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v8 + 32);
        v29 = *(double *)(a2 - 16);
        v30 = *(double *)(v8 + 32);
        if (v29 >= v30)
        {
          if (v30 < v29)
            return result;
          v32 = *(_DWORD *)(a2 - 8);
          v31 = *(_DWORD *)(v8 + 40);
          if (v32 >= v31)
            return result;
        }
        else
        {
          v31 = *(_DWORD *)(v8 + 40);
          v32 = *(_DWORD *)(a2 - 8);
        }
        *(double *)(v8 + 32) = v29;
        *(double *)(a2 - 16) = v30;
        *(_DWORD *)(v8 + 40) = v32;
        *(_DWORD *)(a2 - 8) = v31;
        v33 = *(double *)(v8 + 32);
        v34 = *(double *)(v8 + 16);
        if (v33 >= v34)
        {
          if (v34 < v33)
            return result;
          v36 = *(_DWORD *)(v8 + 40);
          v35 = *(_DWORD *)(v8 + 24);
          if (v36 >= v35)
            return result;
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 40);
        }
        *(double *)(v8 + 16) = v33;
        *(double *)(v8 + 32) = v34;
        *(_DWORD *)(v8 + 24) = v36;
        *(_DWORD *)(v8 + 40) = v35;
        v37 = *(double *)v8;
        if (v33 < *(double *)v8)
        {
          v38 = *(_DWORD *)(v8 + 8);
LABEL_90:
          *(double *)v8 = v33;
          *(double *)(v8 + 16) = v37;
          *(_DWORD *)(v8 + 8) = v36;
          *(_DWORD *)(v8 + 24) = v38;
          return result;
        }
        if (v37 >= v33)
        {
          v38 = *(_DWORD *)(v8 + 8);
          if (v36 < v38)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v8 + 32, v8 + 48, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v54 = (v13 - 2) >> 1;
              v55 = v54 + 1;
              v56 = v8 + 16 * v54;
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, a3, v12 >> 4, v56);
                v56 -= 16;
                --v55;
              }
              while (v55);
              v57 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t *)v8, a2, a3, v57);
                a2 -= 16;
              }
              while (v57-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v8 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t)v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, (uint64_t)v16, v9);
            v17 = v9;
            v18 = v8 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8 + 16, v18 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8 + 32, v8 + 16 + 16 * v15, a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v18 - 16, (uint64_t)v16, v8 + 16 + 16 * v15);
            v19 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v16;
            *v16 = v19;
            v20 = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v18 + 8);
            *(_DWORD *)(v18 + 8) = v20;
            v9 = v17;
            a5 = v65;
            if ((v65 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(double *)(v8 - 16);
          if (v21 >= *(double *)v8 && (*(double *)v8 < v21 || *(_DWORD *)(v8 - 8) >= *(_DWORD *)(v8 + 8)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v8, a2);
            v10 = result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v8, a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v22);
          v10 = v22 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v22 + 16, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v39 = v8 + 16;
        v41 = v8 == a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (v41)
            return result;
          v42 = 0;
          v43 = v8;
LABEL_46:
          v45 = v43;
          v43 = v39;
          v46 = *(double *)(v45 + 16);
          v47 = *(double *)v45;
          if (v46 >= *(double *)v45)
          {
            if (v47 < v46)
              goto LABEL_45;
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
            if (v48 >= v49)
              goto LABEL_45;
          }
          else
          {
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
          }
          *(double *)(v45 + 16) = v47;
          *(_DWORD *)(v43 + 8) = v49;
          v44 = v8;
          if (v45 == v8)
            goto LABEL_44;
          v50 = v42;
          while (1)
          {
            v53 = *(double *)(v8 + v50 - 16);
            if (v46 < v53)
            {
              v51 = *(_DWORD *)(v8 + v50 - 8);
            }
            else
            {
              if (v53 < v46)
              {
                v44 = v8 + v50;
LABEL_44:
                *(double *)v44 = v46;
                *(_DWORD *)(v44 + 8) = v48;
LABEL_45:
                v39 = v43 + 16;
                v42 += 16;
                if (v43 + 16 == a2)
                  return result;
                goto LABEL_46;
              }
              v51 = *(_DWORD *)(v8 + v50 - 8);
              if (v48 >= v51)
              {
                v44 = v45;
                goto LABEL_44;
              }
            }
            v45 -= 16;
            v52 = v8 + v50;
            *(double *)v52 = v53;
            *(_DWORD *)(v52 + 8) = v51;
            v50 -= 16;
            if (!v50)
            {
              v44 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v41)
        {
          for (i = v8 + 8; ; i += 16)
          {
            v60 = v8;
            v8 = v39;
            v61 = *(double *)(v60 + 16);
            v62 = *(double *)v60;
            if (v61 < *(double *)v60)
              break;
            if (v62 >= v61)
            {
              v63 = *(_DWORD *)(v60 + 24);
              if (v63 < *(_DWORD *)(v60 + 8))
                goto LABEL_79;
            }
LABEL_74:
            v39 += 16;
            if (v8 + 16 == a2)
              return result;
          }
          v63 = *(_DWORD *)(v60 + 24);
LABEL_79:
          for (j = i; ; j -= 16)
          {
            *(double *)(j + 8) = v62;
            *(_DWORD *)(j + 16) = *(_DWORD *)j;
            v62 = *(double *)(j - 24);
            if (v61 >= v62 && (v62 < v61 || v63 >= *(_DWORD *)(j - 16)))
              break;
          }
          *(double *)(j - 8) = v61;
          *(_DWORD *)j = v63;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  int v8;
  int v9;
  int v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  double v18;
  int v19;

  v3 = *(double *)a2;
  v4 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1 || v4 >= v3 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
  {
    v5 = *(double *)a3;
    if (*(double *)a3 < v3)
    {
      v6 = *(_DWORD *)(a3 + 8);
LABEL_16:
      *(double *)a1 = v5;
      *(double *)a3 = v4;
      v16 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a3 + 8) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_DWORD *)(a3 + 8);
      v10 = *(_DWORD *)(a2 + 8);
      if (v6 < v10)
        goto LABEL_16;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v3;
    *(double *)a2 = v4;
    v17 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a2 + 8) = v17;
    v18 = *(double *)a3;
    if (*(double *)a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_DWORD *)(a3 + 8);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v18;
    *(double *)a3 = v4;
    *(_DWORD *)(a2 + 8) = v19;
    result = 2;
    *(_DWORD *)(a3 + 8) = v17;
    return result;
  }
  v7 = *(double *)a3;
  if (*(double *)a3 >= v3)
  {
    if (v3 < v7)
      return 0;
    v9 = *(_DWORD *)(a3 + 8);
    v8 = *(_DWORD *)(a2 + 8);
    if (v9 >= v8)
      return 0;
  }
  else
  {
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v7;
  *(double *)a3 = v3;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a3 + 8) = v8;
  v11 = *(double *)a2;
  v12 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a2 + 8);
LABEL_14:
    *(double *)a1 = v11;
    *(double *)a2 = v12;
    *(_DWORD *)(a1 + 8) = v14;
    result = 2;
    *(_DWORD *)(a2 + 8) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    v14 = *(_DWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 8);
    if (v14 < v13)
      goto LABEL_14;
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  double v2;
  int v3;
  double v4;
  unint64_t i;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(double *)(a2 - 16);
  if (*(double *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 8)))
  {
    for (i = a1 + 16; i < a2 && v2 >= *(double *)i && (*(double *)i < v2 || v3 >= *(_DWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(double *)(i + 16);
      i += 16;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(double *)(a2 - 16);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(double *)i;
    v10 = *(double *)a2;
    do
    {
      *(double *)i = v10;
      *(double *)a2 = v9;
      v11 = *(double *)(i + 16);
      i += 16;
      v9 = v11;
      v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 8)))
      {
        v13 = *(double *)(i + 16);
        i += 16;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(double *)(a2 - 16);
          a2 -= 16;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  int v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;

  v2 = 0;
  v3 = *(double *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v5 = *(double *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 24) >= v4))
      break;
    v2 += 16;
  }
  v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      v7 = *(double *)(a2 - 16);
      a2 -= 16;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(double *)(a2 - 16);
        a2 -= 16;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 16;
  }
  else
  {
    v12 = *(double *)a2;
    v13 = a1 + v2 + 16;
    v14 = a2;
    do
    {
      *(double *)v13 = v12;
      *(double *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(double *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(double *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(double *)(a2 - 16);
      v20 = *(double *)a1;
      if (v19 < *(double *)a1)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v19;
        *(double *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_DWORD *)(a2 - 8);
        v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      v23 = *(double *)(a2 - 16);
      v24 = *(double *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_DWORD *)(a2 - 8);
        v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v23;
      *(double *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      v27 = *(double *)(a1 + 32);
      v28 = *(double *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_DWORD *)(a1 + 40);
        v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 24);
        v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v27;
      *(double *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      v31 = *(double *)a1;
      if (v27 < *(double *)a1)
      {
        v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v27;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(double *)v7;
        v12 = *(double *)v6;
        if (*(double *)v7 >= *(double *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(double *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(double *)v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 16 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  double v35;
  double v36;
  int v37;
  int v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a2, a3);
  v11 = *(double *)a4;
  v12 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v12 < v11)
      goto LABEL_16;
    v14 = *(_DWORD *)(a4 + 8);
    v13 = *(_DWORD *)(a3 + 8);
    if (v14 >= v13)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 8);
    v14 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v11;
  *(double *)a4 = v12;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  v15 = *(double *)a3;
  v16 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_DWORD *)(a3 + 8);
    v17 = *(_DWORD *)(a2 + 8);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v15;
  *(double *)a3 = v16;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  v19 = *(double *)a2;
  v20 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(double *)a1 = v19;
    *(double *)a2 = v20;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v22 = *(_DWORD *)(a2 + 8);
    v21 = *(_DWORD *)(a1 + 8);
    if (v22 < v21)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *(double *)a5;
  v24 = *(double *)a4;
  if (*(double *)a5 >= *(double *)a4)
  {
    if (v24 < v23)
      return result;
    v26 = *(_DWORD *)(a5 + 8);
    v25 = *(_DWORD *)(a4 + 8);
    if (v26 >= v25)
      return result;
  }
  else
  {
    v25 = *(_DWORD *)(a4 + 8);
    v26 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v23;
  *(double *)a5 = v24;
  *(_DWORD *)(a4 + 8) = v26;
  *(_DWORD *)(a5 + 8) = v25;
  v27 = *(double *)a4;
  v28 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v28 < v27)
      return result;
    v30 = *(_DWORD *)(a4 + 8);
    v29 = *(_DWORD *)(a3 + 8);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a3 + 8);
    v30 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v27;
  *(double *)a4 = v28;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  v31 = *(double *)a3;
  v32 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v32 < v31)
      return result;
    v34 = *(_DWORD *)(a3 + 8);
    v33 = *(_DWORD *)(a2 + 8);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a2 + 8);
    v34 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v31;
  *(double *)a3 = v32;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  v35 = *(double *)a2;
  v36 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    v37 = *(_DWORD *)(a1 + 8);
    v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(double *)a1 = v35;
    *(double *)a2 = v36;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v38 = *(_DWORD *)(a2 + 8);
    v37 = *(_DWORD *)(a1 + 8);
    if (v38 < v37)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(double *)(v8 + 16);
        if (*(double *)v8 < v10 || v10 >= *(double *)v8 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v8 + 24))
        {
          v8 += 16;
          v7 = v9;
        }
      }
      v11 = *(double *)v8;
      v12 = *(double *)a4;
      if (*(double *)v8 >= *(double *)a4)
      {
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(v8 + 8);
          v13 = *(_DWORD *)(a4 + 8);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *(_DWORD *)(a4 + 8);
          v14 = *(_DWORD *)(v8 + 8);
        }
        *(double *)a4 = v11;
        *(_DWORD *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 16 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(double *)(v15 + 16);
              if (*(double *)v15 < v18
                || v18 >= *(double *)v15 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v15 + 24))
              {
                v15 += 16;
                v7 = v17;
              }
            }
            v19 = *(double *)v15;
            if (*(double *)v15 < v12)
              break;
            v20 = *(_DWORD *)(v15 + 8);
            if (v12 >= v19 && v20 < v13)
              break;
            *(double *)v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(double *)v15 = v12;
        *(_DWORD *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  double v17;
  double v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  double v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *((_DWORD *)result + 2);
    v7 = (double *)result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && SLODWORD(v8[2 * v9 + 1]) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (double *)(a2 - 16))
    {
      *(_QWORD *)v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *v7 = *(double *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[2 * (v14 >> 1)];
      v17 = *(double *)v16;
      v18 = *v7;
      if (*(double *)v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v20 = result[2 * v15 + 1];
        v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19)
          return result;
      }
      else
      {
        v19 = *((_DWORD *)v7 + 2);
        v20 = *((_DWORD *)v16 + 2);
      }
      *v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = &result[2 * v15];
          v24 = *(double *)v21;
          if (*(double *)v21 < v18)
          {
            v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v18 < v24)
              break;
            v22 = result[2 * v15 + 1];
            if (v22 >= v19)
              break;
          }
          *(double *)v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          v16 = &result[2 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *(double *)v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

char *std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  int v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 2;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v14 - v6;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 2;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[4 * v13];
    v44 = &v43[4 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[4 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[4 * v13 + 16];
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 4 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[4 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[4 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[4 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      v13 = v7 >> 2;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[4 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
  v30 = (int *)(v26 - 4 * a5);
  v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 4;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      v31 = (_DWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 2) + 1;
        v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        v30 = (int *)((char *)v30 + v38);
        v31 = (_DWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(4 * v29 + 4 * v13 + v6 + 16);
        v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int *v57;
  BOOL v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  _DWORD *v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_DWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_DWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_DWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_DWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 < *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_DWORD *)a2 - 1);
            if (v98 >= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_DWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (int *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (int *)*v10;
        if ((int)v75 >= (int)v78)
        {
          if (v77 >= (int)v75)
          {
LABEL_144:
            LODWORD(v75) = v77;
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_DWORD *)a2 - 1) = (_DWORD)v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 < v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 < *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (int)v75;
          v79 = v10;
          v80 = v10 + 1;
          result = v75;
          if (v77 >= (int)v78)
          {
LABEL_136:
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = v10 + 2;
          result = (int *)*v10;
          if (v77 >= (int)v75)
          {
            *v10 = (int)v75;
            v10[1] = (int)v78;
            v79 = v10 + 1;
            v80 = v10 + 2;
            result = v78;
            if (v77 >= (int)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = (_DWORD)v78;
        LODWORD(v75) = (_DWORD)result;
        goto LABEL_136;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v10 + 1, v10 + 2, v10 + 3, (int *)a2 - 1);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != (int *)a2)
              return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_DWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_DWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_DWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_DWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_DWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_DWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_DWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_DWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_DWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_DWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_DWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_DWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_DWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_DWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (int *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (int *)a2;
            if (v10 < (int *)a2)
            {
              v62 = (int *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (int *)v49)
                break;
              v51 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v50 >= v22);
          }
          if (v48 >= (int *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_DWORD *)v49;
            v53 = &v10[v46];
            v54 = (int *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (int *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(v10, v57);
          v10 = v57 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(v57 + 1, (int *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (int *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (int *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(int *)((char *)v10 + v89 + 4) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(int *)((char *)v10 + v89 - 4);
                  v89 -= 4;
                }
                while (v87 < v88);
                v86 = (int *)((char *)v10 + v89 + 4);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 4;
            }
            while (v85 + 1 != (int *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (int *)v81;
            if (v93 < v94)
            {
              do
              {
                *(_DWORD *)v81 = v94;
                v94 = *((_DWORD *)v81 - 2);
                v81 -= 4;
              }
              while (v93 < v94);
              *(_DWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (int *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(int *a1, int *a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_BYTE **)(a2 + 24);
  v4 = *(_BYTE **)(a2 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

void sub_22DB3850C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24F9859E0;
  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24F9859E0;
  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x68uLL);
  *v2 = &off_24F9859E0;
  std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB386F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9859E0;
  return std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _DWORD *v8;
  size_t v9;
  void *v10;
  int v11;
  unint64_t i;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t CoefficientOfPositiveVar;
  double v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t *v36;
  double v37;
  int *v38;
  int *v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  double *v59;
  int *v60;
  int *v61;
  int v62;
  void *v64;
  char v65;
  void *v66[2];
  char v67;
  __int128 v68;
  void *v69;
  void *v70;
  void *__p;
  void *v72;
  uint64_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _DWORD *v77;
  char *v78;
  char *v79;

  v4 = *a3;
  v6 = *a2;
  v5 = a2[1];
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v7 = v5 - v6;
  v58 = v4;
  if (v5 == v6)
  {
    v11 = *(_DWORD *)(a1 + 60);
    v59 = 0;
    if (v11 < 1)
      goto LABEL_27;
    goto LABEL_6;
  }
  if (v7 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = operator new((unint64_t)v7 >> 1);
  v9 = v7 >> 3;
  v77 = v8;
  v79 = (char *)&v8[v9];
  memset(v8, 255, v9 * 4);
  v78 = v79;
  v10 = operator new(v7);
  memset_pattern16(v10, &unk_22DCE6720, v7 & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_DWORD *)(a1 + 60);
  v59 = (double *)v10;
  if (v11 >= 1)
  {
LABEL_6:
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16))
    {
      for (i = 0; (uint64_t)i < v11; ++i)
      {
        v13 = *(int **)(a1 + 8);
        v60 = *(int **)(a1 + 16);
        if (v13 != v60)
        {
          v14 = *(_QWORD *)(a1 + 64);
          v15 = *(_QWORD *)(a1 + 72);
          do
          {
            v16 = *v13;
            v17 = *(_QWORD *)(a1 + 88);
            LODWORD(v66[0]) = i;
            *(_QWORD *)&v68 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3);
            if ((unint64_t)v68 <= i)
            {
              v73 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)v66, (int)&v68, "target_index < exprs.size()");
              if (v73)
              {
                google::LogMessageFatal::LogMessageFatal((unint64_t *)&v68, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1706, &v73);
                google::LogMessage::stream((google::LogMessage *)&v68);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v68);
              }
              v14 = *(_QWORD *)(a1 + 64);
            }
            v18 = *(double *)(*a2 + 8 * v16);
            CoefficientOfPositiveVar = operations_research::sat::GetCoefficientOfPositiveVar(v16, (_QWORD *)(v14 + 56 * i));
            v61 = v13;
            v20 = v18 * (double)CoefficientOfPositiveVar;
            v14 = *(_QWORD *)(a1 + 64);
            v15 = *(_QWORD *)(a1 + 72);
            if (v15 == v14)
            {
              v14 = *(_QWORD *)(a1 + 72);
            }
            else
            {
              v21 = 0;
              v22 = 0;
              do
              {
                if (i != v22)
                {
                  v23 = *(double *)(*a2 + 8 * *(int *)(*(_QWORD *)(a1 + 32) + 4 * v22));
                  v24 = operations_research::sat::GetCoefficientOfPositiveVar(v16, (_QWORD *)(v14 + v21));
                  v25 = *(_QWORD *)(v17 + 144);
                  v26 = (v24 - CoefficientOfPositiveVar) * *(_QWORD *)(v25 + 20 * (v16 ^ 1));
                  if (*(_QWORD *)(v25 + 20 * v16) * (v24 - CoefficientOfPositiveVar) <= -v26)
                    v27 = -v26;
                  else
                    v27 = *(_QWORD *)(v25 + 20 * v16) * (v24 - CoefficientOfPositiveVar);
                  v20 = v20 + (double)v27 * v23;
                  v14 = *(_QWORD *)(a1 + 64);
                  v15 = *(_QWORD *)(a1 + 72);
                }
                ++v22;
                v21 += 56;
              }
              while (0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3) > v22);
            }
            if (v20 < v59[v16])
            {
              v77[v16] = i;
              v59[v16] = v20;
            }
            ++v13;
          }
          while (v61 + 1 != v60);
          v11 = *(_DWORD *)(a1 + 60);
        }
      }
    }
  }
LABEL_27:
  v28 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD **)(v28 + 32);
  v29 = (_QWORD *)(v28 + 32);
  v30 = v31;
  if (!v31)
    goto LABEL_38;
  v32 = v29;
  do
  {
    v33 = v30[4];
    v34 = v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v35 = v30;
    else
      v35 = v30 + 1;
    if (v34)
      v32 = v30;
    v30 = (_QWORD *)*v35;
  }
  while (*v35);
  if (v32 != v29 && v32[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    v36 = (uint64_t *)v32[5];
  else
LABEL_38:
    v36 = 0;
  v73 = v36;
  v74 = xmmword_22DCF0BD0;
  v75 = 0u;
  v76 = 0u;
  v37 = *(double *)(*a2 + 8 * *(int *)(a1 + 56));
  operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, *(_DWORD *)(a1 + 56), -1);
  v38 = *(int **)(a1 + 8);
  v39 = *(int **)(a1 + 16);
  if (v38 != v39)
  {
    v40 = v77;
    do
    {
      v41 = *v38;
      v42 = *v38;
      v43 = operations_research::sat::GetCoefficientOfPositiveVar(*v38, (_QWORD *)(*(_QWORD *)(a1 + 64) + 56 * (int)v40[v41]));
      if (v43)
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, v42, v43);
      v37 = v37 - (double)v43 * *(double *)(*a2 + 8 * v41);
      ++v38;
    }
    while (v38 != v39);
  }
  if (*(int *)(a1 + 60) >= 1)
  {
    v44 = 0;
    do
    {
      v62 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v44);
      v46 = *(int **)(a1 + 8);
      v45 = *(int **)(a1 + 16);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 56 * v44 + 48);
      if (v46 != v45)
      {
        v48 = *(_QWORD *)(a1 + 88);
        v49 = v77;
        do
        {
          v50 = *v46;
          v51 = v49[v50];
          if (v44 != v51)
          {
            v52 = operations_research::sat::GetCoefficientOfPositiveVar(v50, (_QWORD *)(*(_QWORD *)(a1 + 64) + 56 * (int)v51));
            v53 = operations_research::sat::GetCoefficientOfPositiveVar(v50, (_QWORD *)(*(_QWORD *)(a1 + 64) + 56 * v44));
            v54 = *(_QWORD *)(v48 + 144);
            v55 = (v53 - v52) * *(_QWORD *)(v54 + 20 * (int)(v50 ^ 1));
            if (*(_QWORD *)(v54 + 20 * (int)v50) * (v53 - v52) <= -v55)
              v56 = -v55;
            else
              v56 = *(_QWORD *)(v54 + 20 * (int)v50) * (v53 - v52);
            v47 += v56;
          }
          ++v46;
        }
        while (v46 != v45);
      }
      if (v47)
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, v62, v47);
      v37 = v37 - (double)v47 * *(double *)(*a2 + 8 * v62);
      ++v44;
    }
    while (v44 < *(int *)(a1 + 60));
  }
  if (v37 > 0.01)
  {
    operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v73, (uint64_t)&v68);
    v67 = 6;
    strcpy((char *)v66, "LinMax");
    v65 = 0;
    LOBYTE(v64) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(v58, &v68, (uint64_t)v66, a2, (uint64_t)&v64);
    if (v65 < 0)
    {
      operator delete(v64);
      if ((v67 & 0x80000000) == 0)
      {
LABEL_60:
        v57 = __p;
        if (!__p)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    else if ((v67 & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v66[0]);
    v57 = __p;
    if (!__p)
    {
LABEL_62:
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      goto LABEL_64;
    }
LABEL_61:
    v72 = v57;
    operator delete(v57);
    goto LABEL_62;
  }
LABEL_64:
  if (*((_QWORD *)&v75 + 1))
  {
    *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
    operator delete(*((void **)&v75 + 1));
  }
  if (v59)
    operator delete(v59);
  if (v77)
    operator delete(v77);
}

void sub_22DB38CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB38CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;
  uint64_t v37;
  void *v39;

  if (v36)
  {
    operator delete(v36);
    v39 = *(void **)(v37 - 144);
    if (!v39)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v39 = *(void **)(v37 - 144);
    if (!v39)
      goto LABEL_3;
  }
  operator delete(v39);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEER"
                     "KNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariabl"
                                "e_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS"
                                "4_EEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

void sub_22DB38F4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  v15 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  return a1;
}

void sub_22DB3906C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F985A60;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F985A60;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_24F985A60;
  std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB39188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F985A60;
  return std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  int *v56;
  void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  size_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  __int128 v76;
  char *v77;
  size_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  char v84;
  void *v85[2];
  char v86;
  __int128 v87;
  void *v88;
  void *v89;
  void *__p;
  void *v91;
  _QWORD v92[2];
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v4 = a1;
  v5 = *a3;
  if ((*(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(*(_QWORD *)(a1 + 80))
                  + 8) & 0xFFFFFFE) == 0)
  {
    v80 = v5;
    v81 = a2;
    v7 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 16);
    v82 = v4;
    if (v6 != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *(int *)(v7 + 4 * v8);
        v13 = *(_QWORD **)(v4 + 72);
        v14 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 144);
        v15 = -*(_QWORD *)(v14 + 20 * (*(_DWORD *)(v13[5] + 4 * v12) ^ 1));
        v16 = *(_QWORD *)(v14 + 20 * *(int *)(v13[8] + 4 * v12));
        if (v16 <= v15)
          goto LABEL_6;
        v17 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 4 * v8);
        if (*(_DWORD *)(v13[2] + 4 * v12) >= 0xFFFFFFFE)
          v18 = -2;
        else
          v18 = *(_DWORD *)(v13[2] + 4 * v12);
        if (v10 < v11)
        {
          *(_DWORD *)v10 = v8;
          *(_QWORD *)(v10 + 4) = v15;
          *(_BYTE *)(v10 + 12) = 1;
          *(_DWORD *)(v10 + 13) = v17;
          v19 = (char *)(v10 + 24);
          *(_DWORD *)(v10 + 20) = v18;
          if (v10 + 24 >= v11)
            goto LABEL_30;
          goto LABEL_4;
        }
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3) + 1;
        if (v20 > 0xAAAAAAAAAAAAAAALL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v9) >> 3) > v20)
          v20 = 0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v9) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v9) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = (char *)operator new(24 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * ((uint64_t)(v10 - (_QWORD)v9) >> 3)];
        *(_DWORD *)v23 = v8;
        *(_QWORD *)(v23 + 4) = v15;
        v23[12] = 1;
        *(_DWORD *)(v23 + 13) = v17;
        *((_DWORD *)v23 + 5) = v18;
        if ((char *)v10 == v9)
        {
          v26 = &v22[8 * ((uint64_t)(v10 - (_QWORD)v9) >> 3)];
          v11 = (unint64_t)&v22[24 * v21];
          v19 = v23 + 24;
          if (v9)
            goto LABEL_28;
        }
        else
        {
          v24 = &v22[8 * ((uint64_t)(v10 - (_QWORD)v9) >> 3)];
          do
          {
            v25 = *(_OWORD *)(v10 - 24);
            v26 = v24 - 24;
            *((_QWORD *)v24 - 1) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)(v24 - 24) = v25;
            v10 -= 24;
            v24 -= 24;
          }
          while ((char *)v10 != v9);
          v11 = (unint64_t)&v22[24 * v21];
          v19 = v23 + 24;
          if (v9)
LABEL_28:
            operator delete(v9);
        }
        v9 = v26;
        v4 = v82;
        if ((unint64_t)v19 >= v11)
        {
LABEL_30:
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v9) >> 3) + 1;
          if (v27 > 0xAAAAAAAAAAAAAAALL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v9) >> 3) > v27)
            v27 = 0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v9) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v9) >> 3) >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v27;
          if (v28)
          {
            if (v28 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v29 = (char *)operator new(24 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * ((v19 - v9) >> 3)];
          v11 = (unint64_t)&v29[24 * v28];
          *(_DWORD *)v30 = v8;
          *(_QWORD *)(v30 + 4) = v16;
          v30[12] = 0;
          *(_DWORD *)(v30 + 13) = v17;
          *(_WORD *)(v30 + 17) = v87;
          v30[19] = BYTE2(v87);
          *((_DWORD *)v30 + 5) = v18;
          v10 = (unint64_t)(v30 + 24);
          if (v19 == v9)
            goto LABEL_43;
          do
          {
            v31 = *(_OWORD *)(v19 - 24);
            *((_QWORD *)v30 - 1) = *((_QWORD *)v19 - 1);
            *(_OWORD *)(v30 - 24) = v31;
            v30 -= 24;
            v19 -= 24;
          }
          while (v19 != v9);
          if (v9)
LABEL_43:
            operator delete(v9);
          v9 = v30;
          v4 = v82;
          goto LABEL_5;
        }
LABEL_4:
        *(_DWORD *)v19 = v8;
        *(_QWORD *)(v19 + 4) = v16;
        v19[12] = 0;
        *(_DWORD *)(v19 + 13) = v17;
        *(_WORD *)(v19 + 17) = v87;
        v19[19] = BYTE2(v87);
        *((_DWORD *)v19 + 5) = v18;
        v10 = (unint64_t)(v19 + 24);
LABEL_5:
        v7 = *(_QWORD *)(v4 + 8);
        v6 = *(_QWORD *)(v4 + 16);
LABEL_6:
        if (++v8 >= (unint64_t)((v6 - v7) >> 2))
          goto LABEL_48;
      }
    }
    v10 = 0;
    v9 = 0;
LABEL_48:
    v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3));
    if ((char *)v10 == v9)
      v33 = 0;
    else
      v33 = v32;
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>((uint64_t)v9, v10, v33, 1);
    if ((char *)v10 != v9)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v9;
      while (1)
      {
        v41 = v38[12] != 0;
        if (!v38[12])
          break;
        if (v36 < (int *)v35)
        {
          v39 = *(_OWORD *)v38;
          *((_QWORD *)v36 + 2) = *((_QWORD *)v38 + 2);
          *(_OWORD *)v36 = v39;
          v40 = (char *)(v36 + 6);
        }
        else
        {
          v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - v37) >> 3) + 1;
          if (v42 > 0xAAAAAAAAAAAAAAALL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v35 - v37) >> 3) > v42)
            v42 = 0x5555555555555556 * ((v35 - v37) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v35 - v37) >> 3) >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v42;
          if (v43)
          {
            if (v43 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v44 = (char *)operator new(24 * v43);
          }
          else
          {
            v44 = 0;
          }
          v73 = *(_OWORD *)v38;
          v74 = &v44[8 * (((char *)v36 - v37) >> 3)];
          *((_QWORD *)v74 + 2) = *((_QWORD *)v38 + 2);
          *(_OWORD *)v74 = v73;
          if (v36 == (int *)v37)
          {
            v37 = &v44[8 * (((char *)v36 - v37) >> 3)];
            v4 = v82;
            v35 = &v44[24 * v43];
            v40 = v74 + 24;
            if (!v36)
              goto LABEL_54;
          }
          else
          {
            v75 = &v44[8 * (((char *)v36 - v37) >> 3)];
            v4 = v82;
            do
            {
              v76 = *(_OWORD *)(v36 - 6);
              *((_QWORD *)v75 - 1) = *((_QWORD *)v36 - 1);
              *(_OWORD *)(v75 - 24) = v76;
              v75 -= 24;
              v36 -= 6;
            }
            while (v36 != (int *)v37);
            v36 = (int *)v37;
            v37 = v75;
            v35 = &v44[24 * v43];
            v40 = v74 + 24;
            if (!v36)
              goto LABEL_54;
          }
          v77 = v35;
          operator delete(v36);
          v35 = v77;
        }
LABEL_54:
        v38 += 24;
        v34 = v41;
        v36 = (int *)v40;
        if (v38 == (char *)v10)
        {
          if (v37)
            operator delete(v37);
          goto LABEL_139;
        }
      }
      v45 = ((char *)v36 - v37) / 24;
      if (!v34 || v45 <= 1)
      {
LABEL_93:
        if (v36 == (int *)v37)
        {
          LODWORD(v59) = 0;
        }
        else
        {
          LODWORD(v59) = 0;
          if (v45 <= 1)
            v60 = 1;
          else
            v60 = ((char *)v36 - v37) / 24;
          v61 = v37;
          do
          {
            if (*(_DWORD *)v61 != *(_DWORD *)v38)
            {
              v62 = *(_OWORD *)v61;
              v63 = &v37[24 * (int)v59];
              *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
              *(_OWORD *)v63 = v62;
              LODWORD(v59) = v59 + 1;
            }
            v61 += 24;
            --v60;
          }
          while (v60);
        }
        v59 = (int)v59;
        v64 = (int)v59 - v45;
        if ((int)v59 <= v45)
        {
          if ((int)v59 >= v45)
            v40 = (char *)v36;
          else
            v40 = &v37[24 * (int)v59];
          goto LABEL_130;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - (char *)v36) >> 3) >= v64)
        {
          v78 = 24 * ((24 * v64 - 24) / 0x18) + 24;
          v79 = v35;
          bzero(v36, v78);
          v35 = v79;
          v40 = (char *)v36 + v78;
          goto LABEL_130;
        }
        if ((v59 & 0x80000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v35 - v37) >> 3) > (unint64_t)(int)v59)
          v59 = 0x5555555555555556 * ((v35 - v37) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - v37) >> 3) >= 0x555555555555555)
          v65 = 0xAAAAAAAAAAAAAAALL;
        else
          v65 = v59;
        if (v65 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v66 = (char *)operator new(24 * v65);
        v67 = &v66[24 * v45];
        v68 = 24 * ((24 * v64 - 24) / 0x18) + 24;
        bzero(v67, v68);
        if (v36 == (int *)v37)
        {
          v71 = v67;
          v35 = &v66[24 * v65];
          v40 = &v67[v68];
          if (!v37)
            goto LABEL_116;
        }
        else
        {
          v69 = v67;
          do
          {
            v70 = *(_OWORD *)(v36 - 6);
            v71 = v69 - 24;
            *((_QWORD *)v69 - 1) = *((_QWORD *)v36 - 1);
            *(_OWORD *)(v69 - 24) = v70;
            v36 -= 6;
            v69 -= 24;
          }
          while (v36 != (int *)v37);
          v35 = &v66[24 * v65];
          v40 = &v67[v68];
          if (!v37)
            goto LABEL_116;
        }
        v72 = v35;
        operator delete(v37);
        v35 = v72;
LABEL_116:
        v37 = v71;
        v4 = v82;
LABEL_130:
        v41 = 0;
        goto LABEL_54;
      }
      v46 = *(_QWORD *)(v4 + 80);
      v49 = *(_QWORD **)(v46 + 32);
      v47 = (_QWORD *)(v46 + 32);
      v48 = v49;
      if (!v49)
        goto LABEL_78;
      v50 = v47;
      do
      {
        v51 = v48[4];
        v52 = v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v53 = v48;
        else
          v53 = v48 + 1;
        if (v52)
          v50 = v48;
        v48 = (_QWORD *)*v53;
      }
      while (*v53);
      if (v50 != v47 && v50[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v54 = v35;
        v55 = v50[5];
      }
      else
      {
LABEL_78:
        v54 = v35;
        v55 = 0;
      }
      v92[0] = v55;
      v92[1] = 0x8000000000000002;
      v93 = 0u;
      v94 = 0u;
      v95 = 0;
      operations_research::sat::LinearConstraintBuilder::AddTerm(v92, *(_DWORD *)(v4 + 32), -1);
      v56 = (int *)v37;
      if (v37 != (char *)v36)
      {
        do
        {
          v58 = v56[5];
          if (v58 == -2)
          {
            operations_research::sat::LinearConstraintBuilder::AddTerm(v92, *(int *)((char *)v56 + 13), 1);
          }
          else if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v92, v58, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 144)+ 20 * *(int *)((char *)v56 + 13))))
          {
            goto LABEL_90;
          }
          v56 += 6;
        }
        while (v56 != v36);
      }
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v92, (uint64_t)&v87);
      v86 = 10;
      strcpy((char *)v85, "Cumulative");
      v84 = 0;
      LOBYTE(v83) = 0;
      operations_research::sat::LinearConstraintManager::AddCut(v80, &v87, (uint64_t)v85, v81, (uint64_t)&v83);
      if (v84 < 0)
      {
        operator delete(v83);
        if ((v86 & 0x80000000) == 0)
        {
LABEL_82:
          v57 = __p;
          if (!__p)
          {
LABEL_84:
            if (v88)
            {
              v89 = v88;
              operator delete(v88);
            }
LABEL_90:
            if ((_QWORD)v94)
            {
              *((_QWORD *)&v94 + 1) = v94;
              operator delete((void *)v94);
            }
            v35 = v54;
            goto LABEL_93;
          }
LABEL_83:
          v91 = v57;
          operator delete(v57);
          goto LABEL_84;
        }
      }
      else if ((v86 & 0x80000000) == 0)
      {
        goto LABEL_82;
      }
      operator delete(v85[0]);
      v57 = __p;
      if (!__p)
        goto LABEL_84;
      goto LABEL_83;
    }
LABEL_139:
    if (v9)
      operator delete(v9);
  }
}

void sub_22DB39B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  void *v34;

  if (v34)
  {
    operator delete(v34);
    if (v33)
    {
LABEL_6:
      operator delete(v33);
      _Unwind_Resume(exception_object);
    }
  }
  else if (v33)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21Inte"
                     "rvalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEE"
                     "EPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntType"
                                "INS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiE"
                                "ERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  v15 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  return a1;
}

void sub_22DB39D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *j;
  BOOL v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unsigned __int8 v79;
  _QWORD *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  int64_t v92;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  unsigned __int8 v138;
  _QWORD *v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  _BYTE v148[11];
  _BYTE v149[11];
  _BYTE v150[11];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[11];
  _BYTE v156[11];
  __int128 v157;
  _BYTE v158[11];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_QWORD *)(a5 + 4);
  v12 = *(_QWORD *)(a4 + 4);
  if (v11 == v12)
  {
    if (*(unsigned __int8 *)(a5 + 12) == *(unsigned __int8 *)(a4 + 12))
    {
      if (*(_DWORD *)a5 >= *(_DWORD *)a4)
        return result;
    }
    else if (*(_BYTE *)(a5 + 12))
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  v13 = *(_QWORD *)(a4 + 16);
  result = *(__n128 *)a4;
  v14 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v14;
  *(__n128 *)a5 = result;
  *(_QWORD *)(a5 + 16) = v13;
  v15 = *(_QWORD *)(a4 + 4);
  v16 = *(_QWORD *)(a3 + 4);
  v17 = v15 < v16;
  if (v15 != v16)
    goto LABEL_11;
  if (*(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a3 + 12))
  {
    v17 = *(_DWORD *)a4 < *(_DWORD *)a3;
LABEL_11:
    if (!v17)
      return result;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a4 + 12))
    return result;
LABEL_15:
  v18 = *(_QWORD *)(a3 + 16);
  result = *(__n128 *)a3;
  v19 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v19;
  *(__n128 *)a4 = result;
  *(_QWORD *)(a4 + 16) = v18;
  v20 = *(_QWORD *)(a3 + 4);
  v21 = *(_QWORD *)(a2 + 4);
  v22 = v20 < v21;
  if (v20 == v21)
  {
    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      if (*(_BYTE *)(a3 + 12))
        return result;
      goto LABEL_20;
    }
    v22 = *(_DWORD *)a3 < *(_DWORD *)a2;
  }
  if (!v22)
    return result;
LABEL_20:
  v23 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  v24 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v24;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v23;
  v25 = *(_QWORD *)(a2 + 4);
  v26 = *(_QWORD *)(a1 + 4);
  v27 = v25 < v26;
  if (v25 != v26)
    goto LABEL_23;
  if (*(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    v27 = *(_DWORD *)a2 < *(_DWORD *)a1;
LABEL_23:
    if (!v27)
      return result;
LABEL_30:
    v28 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v29 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v29;
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = v28;
    return result;
  }
  if (!*(_BYTE *)(a2 + 12))
    goto LABEL_30;
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *a2;
  v4 = *(_QWORD *)(a2 + 1);
  v5 = *((unsigned __int8 *)a2 + 12);
  v6 = *(_QWORD *)(a1 + 4);
  v7 = v4 < v6;
  if (v4 != v6)
  {
LABEL_4:
    if (!v7)
      goto LABEL_13;
LABEL_6:
    v8 = *(_QWORD *)(a3 + 4);
    v9 = v8 < v4;
    if (v8 == v4)
    {
      if (*(unsigned __int8 *)(a3 + 12) != v5)
      {
        if (*(_BYTE *)(a3 + 12))
          goto LABEL_25;
        goto LABEL_11;
      }
      v9 = *(_DWORD *)a3 < v3;
    }
    if (!v9)
    {
LABEL_25:
      v18 = *(_QWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v19 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v19;
      *(__n128 *)a2 = result;
      *((_QWORD *)a2 + 2) = v18;
      v20 = *(_QWORD *)(a3 + 4);
      v21 = *(_QWORD *)(a2 + 1);
      if (v20 == v21)
      {
        if (*(unsigned __int8 *)(a3 + 12) == *((unsigned __int8 *)a2 + 12))
        {
          if (*(_DWORD *)a3 >= *a2)
            return result;
        }
        else if (*(_BYTE *)(a3 + 12))
        {
          return result;
        }
      }
      else if (v20 >= v21)
      {
        return result;
      }
      v24 = *((_QWORD *)a2 + 2);
      result = *(__n128 *)a2;
      v25 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v25;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v24;
      return result;
    }
LABEL_11:
    v10 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v12 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 16) = v12;
    *(__n128 *)a3 = result;
    *(_QWORD *)(a3 + 16) = v10;
    return result;
  }
  if (v5 == *(unsigned __int8 *)(a1 + 12))
  {
    v7 = v3 < *(_DWORD *)a1;
    goto LABEL_4;
  }
  if (!*((_BYTE *)a2 + 12))
    goto LABEL_6;
LABEL_13:
  v13 = *(_QWORD *)(a3 + 4);
  if (v13 == v4)
  {
    if (*(unsigned __int8 *)(a3 + 12) == v5)
    {
      if (*(_DWORD *)a3 >= v3)
        return result;
    }
    else if (*(_BYTE *)(a3 + 12))
    {
      return result;
    }
  }
  else if (v13 >= v4)
  {
    return result;
  }
  v14 = *((_QWORD *)a2 + 2);
  result = *(__n128 *)a2;
  v15 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((_QWORD *)a2 + 2) = v15;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v14;
  v16 = *(_QWORD *)(a2 + 1);
  v17 = *(_QWORD *)(a1 + 4);
  if (v16 != v17)
  {
    if (v16 >= v17)
      return result;
    goto LABEL_34;
  }
  if (*((unsigned __int8 *)a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    if (*a2 < *(_DWORD *)a1)
      goto LABEL_34;
  }
  else if (!*((_BYTE *)a2 + 12))
  {
LABEL_34:
    v22 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v23 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v23;
    *(__n128 *)a2 = result;
    *((_QWORD *)a2 + 2) = v22;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  BOOL v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[11];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v26 = (_OWORD *)(a2 - 24);
      v27 = *(_QWORD *)(a2 - 20);
      v28 = *(_QWORD *)(a1 + 4);
      if (v27 == v28)
      {
        if (*(unsigned __int8 *)(a2 - 12) == *(unsigned __int8 *)(a1 + 12))
        {
          if (*(_DWORD *)(a2 - 24) >= *(_DWORD *)a1)
            return result;
        }
        else if (*(_BYTE *)(a2 - 12))
        {
          return result;
        }
      }
      else if (v27 >= v28)
      {
        return result;
      }
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_OWORD *)a1;
      v31 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)a1 = *v26;
      *(_QWORD *)(a1 + 16) = v31;
      *v26 = v30;
      *(_QWORD *)(a2 - 8) = v29;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24), a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24), a1 + 48);
      v7 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *(_DWORD *)v7;
    v12 = *(_QWORD *)(v7 + 4);
    v13 = *(_BYTE *)(v7 + 12);
    v14 = (_QWORD *)(v7 + 13);
    v15 = *(_QWORD *)(v6 + 4);
    v16 = v12 < v15;
    if (v12 != v15)
      goto LABEL_11;
    if (*(unsigned __int8 *)(v6 + 12) == v13)
    {
      v16 = v11 < *(_DWORD *)v6;
LABEL_11:
      if (!v16)
        goto LABEL_7;
      *(_QWORD *)v32 = *v14;
      *(_DWORD *)&v32[7] = *(_DWORD *)(v7 + 20);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = a1;
      if (v6 == a1)
        goto LABEL_6;
      if (v13)
      {
        v17 = v8;
        while (1)
        {
          v18 = a1 + v17;
          v19 = (_DWORD *)(a1 + v17 + 24);
          v20 = *(_QWORD *)(a1 + v17 + 28);
          if (v12 == v20)
          {
            if (*(unsigned __int8 *)(v18 + 36) != v13 || v11 >= *v19)
              goto LABEL_34;
          }
          else if (v12 >= v20)
          {
            goto LABEL_35;
          }
          v6 -= 24;
          *(_OWORD *)(v18 + 48) = *(_OWORD *)v19;
          *(_QWORD *)(v18 + 64) = *(_QWORD *)(a1 + v17 + 40);
          v17 -= 24;
          if (v17 == -48)
            goto LABEL_5;
        }
      }
      goto LABEL_26;
    }
    if (*(_BYTE *)(v7 + 12))
      goto LABEL_7;
    *(_QWORD *)v32 = *v14;
    *(_DWORD *)&v32[7] = *(_DWORD *)(v7 + 20);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v6;
    v10 = a1;
    if (v6 == a1)
      goto LABEL_6;
LABEL_26:
    v17 = v8;
    while (1)
    {
      v22 = a1 + v17;
      v23 = (_DWORD *)(a1 + v17 + 24);
      v24 = *(_QWORD *)(a1 + v17 + 28);
      if (v12 != v24)
        break;
      if (*(_BYTE *)(v22 + 36))
        v25 = 1;
      else
        v25 = v11 < *v23;
      if (!v25)
      {
LABEL_34:
        v10 = v6;
        goto LABEL_6;
      }
LABEL_28:
      v6 -= 24;
      *(_OWORD *)(v22 + 48) = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 64) = *(_QWORD *)(a1 + v17 + 40);
      v17 -= 24;
      if (v17 == -48)
      {
LABEL_5:
        v10 = a1;
        goto LABEL_6;
      }
    }
    if (v12 < v24)
      goto LABEL_28;
LABEL_35:
    v10 = a1 + v17 + 48;
LABEL_6:
    *(_DWORD *)v10 = v11;
    *(_QWORD *)(v10 + 4) = v12;
    *(_BYTE *)(v10 + 12) = v13;
    *(_QWORD *)(v10 + 13) = *(_QWORD *)v32;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)&v32[7];
    if (++v9 == 8)
      return v7 + 24 == a2;
LABEL_7:
    v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 != a2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)a2, a3).n128_u64[0];
  v9 = *(_QWORD *)(a4 + 4);
  v10 = *(_QWORD *)(a3 + 4);
  if (v9 == v10)
  {
    if (*(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a3 + 12))
    {
      if (*(_DWORD *)a4 >= *(_DWORD *)a3)
        return result;
    }
    else if (*(_BYTE *)(a4 + 12))
    {
      return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v11 = *(_QWORD *)(a3 + 16);
  result = *(__n128 *)a3;
  v12 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v12;
  *(__n128 *)a4 = result;
  *(_QWORD *)(a4 + 16) = v11;
  v13 = *(_QWORD *)(a3 + 4);
  v14 = *(_QWORD *)(a2 + 4);
  v15 = v13 < v14;
  if (v13 == v14)
  {
    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      if (*(_BYTE *)(a3 + 12))
        return result;
      goto LABEL_13;
    }
    v15 = *(_DWORD *)a3 < *(_DWORD *)a2;
  }
  if (!v15)
    return result;
LABEL_13:
  v16 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  v17 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v17;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v16;
  v18 = *(_QWORD *)(a2 + 4);
  v19 = *(_QWORD *)(a1 + 4);
  v20 = v18 < v19;
  if (v18 != v19)
    goto LABEL_16;
  if (*(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    v20 = *(_DWORD *)a2 < *(_DWORD *)a1;
LABEL_16:
    if (!v20)
      return result;
LABEL_23:
    v21 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v22 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v22;
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = v21;
    return result;
  }
  if (!*(_BYTE *)(a2 + 12))
    goto LABEL_23;
  return result;
}

void OUTLINED_FUNCTION_2_3(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

void OUTLINED_FUNCTION_3_2(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_4_1()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void OUTLINED_FUNCTION_5_0(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = __p;
  operator delete(__p);
}

void operations_research::sat::AddCumulativeRelaxation(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  operations_research::sat::IntegerTrail *v33;
  int v34;
  uint64_t (***v35)();
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  operations_research::sat::IntegerTrail *v39;
  int v40;
  uint64_t (***v41)();
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  operations_research::sat::IntegerTrail *v47;
  int v48;
  uint64_t (***v49)();
  uint64_t v50;
  _QWORD *v51;
  _DWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  operations_research::sat::IntegerTrail *v60;
  int v61;
  __int128 v62;
  void *__p;
  void *v64;
  _DWORD *v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  char *v71;
  int64_t v72;
  _BYTE v73[24];
  _BYTE *v74;
  _QWORD v75[3];
  _QWORD *v76;
  uint64_t (**v77)();
  uint64_t v78;
  uint64_t v79;
  uint64_t (***v80)();
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t (**v83)();
  uint64_t v84;
  uint64_t v85;
  uint64_t (***v86)();
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t (**v89)();
  uint64_t v90;
  uint64_t v91;
  uint64_t (***v92)();
  uint64_t v93;

  v4 = (void *)a4;
  v93 = *MEMORY[0x24BDAC8D0];
  v60 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v69 = 0;
  v70 = 0;
  v7 = a3[4];
  v71 = 0;
  if ((int)((unint64_t)(a3[5] - v7) >> 2) < 1)
  {
    v11 = 0;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    v12 = 0x8000000000000000;
    goto LABEL_55;
  }
  v57 = a2;
  v58 = v4;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0x8000000000000000;
  v13 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v17 = *(_DWORD *)(a3[10] + 4 * v9);
    if (v17 == -1)
    {
      v18 = *(_QWORD *)(a3[13] + 8 * v9);
      if (v8 >= v10)
        goto LABEL_15;
LABEL_3:
      *(_DWORD *)v8 = -1;
      *(_QWORD *)(v8 + 4) = 0;
      *(_QWORD *)(v8 + 12) = v18;
LABEL_4:
      v8 += 20;
      goto LABEL_5;
    }
    if (!(*(_QWORD *)(*((_QWORD *)v60 + 5) + 12 * v17) + *(_QWORD *)(*((_QWORD *)v60 + 5) + 12 * (v17 ^ 1))))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a3[1] + 40) + 12 * v17);
      if (v8 < v10)
        goto LABEL_3;
LABEL_15:
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v11) >> 2) + 1;
      if (v19 > 0xCCCCCCCCCCCCCCCLL)
      {
        v70 = v8;
        v71 = v10;
        v69 = v11;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x999999999999999ALL * ((v10 - v11) >> 2) > v19)
        v19 = 0x999999999999999ALL * ((v10 - v11) >> 2);
      if (0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 2) >= 0x666666666666666)
        v20 = 0xCCCCCCCCCCCCCCCLL;
      else
        v20 = v19;
      if (v20)
      {
        if (v20 > 0xCCCCCCCCCCCCCCCLL)
        {
          v70 = v8;
          v71 = v10;
          v69 = v11;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v21 = (char *)operator new(20 * v20);
      }
      else
      {
        v21 = 0;
      }
      v25 = &v21[4 * ((v8 - v11) >> 2)];
      *(_DWORD *)v25 = -1;
      *(_QWORD *)(v25 + 4) = 0;
      *(_QWORD *)(v25 + 12) = v18;
      if (v8 == v11)
      {
        v28 = &v21[4 * ((v8 - v11) >> 2)];
        v10 = &v21[20 * v20];
        v8 = v25 + 20;
        if (!v11)
          goto LABEL_41;
      }
      else
      {
        v26 = &v21[4 * ((v8 - v11) >> 2)];
        do
        {
          v27 = *(_OWORD *)(v8 - 20);
          v28 = v26 - 20;
          *((_DWORD *)v26 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v26 - 20) = v27;
          v8 -= 20;
          v26 -= 20;
        }
        while (v8 != v11);
        v10 = &v21[20 * v20];
        v8 = v25 + 20;
        if (!v11)
          goto LABEL_41;
      }
      operator delete(v11);
LABEL_41:
      v11 = v28;
      goto LABEL_5;
    }
    if (v8 < v10)
    {
      *(_DWORD *)v8 = v17;
      *(_OWORD *)(v8 + 4) = xmmword_22DCE5E30;
      goto LABEL_4;
    }
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v11) >> 2) + 1;
    if (v22 > 0xCCCCCCCCCCCCCCCLL)
    {
      v70 = v8;
      v71 = v10;
      v69 = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x999999999999999ALL * ((v10 - v11) >> 2) > v22)
      v22 = 0x999999999999999ALL * ((v10 - v11) >> 2);
    if (0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 2) >= 0x666666666666666)
      v23 = 0xCCCCCCCCCCCCCCCLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 > 0xCCCCCCCCCCCCCCCLL)
      {
        v70 = v8;
        v71 = v10;
        v69 = v11;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v24 = (char *)operator new(20 * v23);
    }
    else
    {
      v24 = 0;
    }
    v29 = &v24[4 * ((v8 - v11) >> 2)];
    *(_DWORD *)v29 = v17;
    *(_OWORD *)(v29 + 4) = xmmword_22DCE5E30;
    if (v8 == v11)
    {
      v32 = &v24[4 * ((v8 - v11) >> 2)];
      v10 = &v24[20 * v23];
      v8 = v29 + 20;
      if (!v11)
        goto LABEL_50;
    }
    else
    {
      v30 = &v24[4 * ((v8 - v11) >> 2)];
      do
      {
        v31 = *(_OWORD *)(v8 - 20);
        v32 = v30 - 20;
        *((_DWORD *)v30 - 1) = *((_DWORD *)v8 - 1);
        *(_OWORD *)(v30 - 20) = v31;
        v8 -= 20;
        v30 -= 20;
      }
      while (v8 != v11);
      v10 = &v24[20 * v23];
      v8 = v29 + 20;
      if (!v11)
        goto LABEL_50;
    }
    operator delete(v11);
LABEL_50:
    v11 = v32;
LABEL_5:
    v14 = a3[4];
    v15 = *(_QWORD *)(a3[1] + 40);
    if (*(_QWORD *)(v15 + 12 * *(int *)(v14 + 4 * v9)) < v13)
      v13 = *(_QWORD *)(v15 + 12 * *(int *)(v14 + 4 * v9));
    v16 = *(_QWORD *)(v15 + 12 * (*(_DWORD *)(a3[7] + 4 * v9) ^ 1));
    if (v12 <= -v16)
      v12 = -v16;
    ++v9;
  }
  while (v9 < (int)((unint64_t)(a3[5] - v14) >> 2));
  v70 = v8;
  v71 = v10;
  a2 = v57;
  v4 = v58;
LABEL_55:
  v69 = v11;
  v89 = &off_24F984000;
  v90 = v13;
  v91 = v12;
  v92 = &v89;
  v66 = (void *)v13;
  v72 = v12;
  if (v12 < v13)
  {
    __p = (void *)google::MakeCheckOpString<long long,long long>((int)&v66, (int)&v72, "lb <= ub");
    if (__p)
    {
LABEL_112:
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1338, (uint64_t **)&__p);
      google::LogMessage::stream((google::LogMessage *)&v66);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v66);
    }
  }
  v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v4);
  v34 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v33, v90, v91);
  v35 = v92;
  if (v92 == &v89)
  {
    v36 = 4;
    v35 = &v89;
LABEL_60:
    (*v35)[v36]();
  }
  else if (v92)
  {
    v36 = 5;
    goto LABEL_60;
  }
  operations_research::sat::IsEqualToMinOf(v34, (uint64_t)(a3 + 4), (uint64_t)v87);
  v66 = v4;
  if (!v88)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v88 + 48))(v88, &v66);
  v37 = v88;
  if (v88 == v87)
  {
    v38 = 4;
    v37 = v87;
LABEL_66:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v88)
  {
    v38 = 5;
    goto LABEL_66;
  }
  v83 = &off_24F984000;
  v84 = v13;
  v85 = v12;
  v86 = &v83;
  v66 = (void *)v13;
  v72 = v12;
  if (v12 < v13)
  {
    __p = (void *)google::MakeCheckOpString<long long,long long>((int)&v66, (int)&v72, "lb <= ub");
    if (__p)
      goto LABEL_112;
  }
  v39 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v4);
  v40 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v39, v84, v85);
  v41 = v86;
  if (v86 == &v83)
  {
    v42 = 4;
    v41 = &v83;
LABEL_72:
    (*v41)[v42]();
  }
  else if (v86)
  {
    v42 = 5;
    goto LABEL_72;
  }
  operations_research::sat::IsEqualToMaxOf(v40, (uint64_t)(a3 + 7), (uint64_t)v81);
  v66 = v4;
  if (!v82)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v82 + 48))(v82, &v66);
  v43 = v82;
  v44 = __OFSUB__(v82, v81);
  if (v82 == v81)
  {
    v45 = 4;
    v43 = v81;
LABEL_78:
    (*(void (**)(void))(*v43 + 8 * v45))();
  }
  else if (v82)
  {
    v45 = 5;
    goto LABEL_78;
  }
  v77 = &off_24F984000;
  v78 = 0;
  if ((((v12 - v13) ^ v12) & (v13 ^ v12)) < 0 != v44)
    v46 = ((unint64_t)v12 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
  else
    v46 = v12 - v13;
  v79 = v46;
  v80 = &v77;
  v66 = 0;
  v72 = v46;
  if (v46 < 0)
  {
    __p = (void *)google::MakeCheckOpString<long long,long long>((int)&v66, (int)&v72, "lb <= ub");
    if (__p)
      goto LABEL_112;
  }
  v47 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v4);
  v48 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v47, v78, v79);
  v49 = v80;
  if (v80 == &v77)
  {
    v50 = 4;
    v49 = &v77;
LABEL_87:
    (*v49)[v50]();
  }
  else if (v80)
  {
    v50 = 5;
    goto LABEL_87;
  }
  v51 = operator new(0x18uLL);
  v67 = v51 + 3;
  v68 = v51 + 3;
  *v51 = -1;
  v51[1] = -1;
  v51[2] = 1;
  v66 = v51;
  v52 = operator new(0xCuLL);
  v64 = v52 + 3;
  v65 = v52 + 3;
  *v52 = v48;
  v52[1] = v34;
  v52[2] = v40;
  __p = v52;
  operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&__p, (uint64_t)&v66, 0, v75);
  v72 = (int64_t)v4;
  if (!v76)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, int64_t *))(*v76 + 48))(v76, &v72);
  v53 = v76;
  if (v76 == v75)
  {
    v54 = 4;
    v53 = v75;
LABEL_93:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  else if (v76)
  {
    v54 = 5;
    goto LABEL_93;
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  v61 = v48;
  v62 = xmmword_22DCE5E30;
  operations_research::sat::Cumulative(a1, (uint64_t)&v69, (__int128 *)&v61, a2, (uint64_t)v73);
  __p = v4;
  if (!v74)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v74 + 48))(v74, &__p);
  v55 = v74;
  if (v74 == v73)
  {
    v56 = 4;
    v55 = v73;
LABEL_101:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  else if (v74)
  {
    v56 = 5;
    goto LABEL_101;
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_22DB3BCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB3BD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB3BD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB3BD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectanglesEnergyPropagator::~NonOverlappingRectanglesEnergyPropagator(operations_research::sat::NonOverlappingRectanglesEnergyPropagator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F985AE0;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  operations_research::sat::NonOverlappingRectanglesEnergyPropagator::~NonOverlappingRectanglesEnergyPropagator(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Propagate(operations_research::sat::NonOverlappingRectanglesEnergyPropagator *this)
{
  operations_research::sat::SchedulingConstraintHelper *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int ***v56;
  int **v57;
  int **v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t result;
  uint64_t v75;
  void **v76;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v2, 1);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 2), 1);
  v5 = (_QWORD *)((char *)this + 96);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  v6 = (int)(v3 >> 2);
  v76 = (void **)((char *)this + 72);
  v7 = (*((_QWORD *)this + 13) - v4) >> 3;
  if (v6 <= v7)
  {
    if (v6 < v7)
      *((_QWORD *)this + 13) = v4 + 8 * v6;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 96, v6 - v7);
  }
  v8 = *((_QWORD *)this + 15);
  v9 = (uint64_t *)((char *)this + 120);
  v10 = (*((_QWORD *)this + 16) - v8) >> 5;
  if (v6 <= v10)
  {
    if (v6 < v10)
      *((_QWORD *)this + 16) = v8 + 32 * v6;
  }
  else
  {
    std::vector<operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Dimension>::__append((char **)this + 15, v6 - v10);
  }
  if ((int)((unint64_t)v3 >> 2) >= 1)
  {
    v11 = 0;
    v12 = ((unint64_t)v3 >> 2);
    v75 = v12;
    do
    {
      v14 = (_QWORD *)*((_QWORD *)this + 1);
      v15 = *(_DWORD *)(v14[10] + 4 * v11);
      if (v15 == -1)
      {
        v16 = (_QWORD *)(v14[13] + 8 * v11);
        v17 = (_QWORD *)*((_QWORD *)this + 2);
        v18 = *(_DWORD *)(v17[10] + 4 * v11);
        if (v18 != -1)
        {
LABEL_16:
          v19 = *(_QWORD *)(*(_QWORD *)(v17[1] + 40) + 12 * v18) * *v16;
          *(_QWORD *)(*v5 + 8 * v11) = v19;
          if (!v19)
            goto LABEL_13;
          goto LABEL_20;
        }
      }
      else
      {
        v16 = (_QWORD *)(*(_QWORD *)(v14[1] + 40) + 12 * v15);
        v17 = (_QWORD *)*((_QWORD *)this + 2);
        v18 = *(_DWORD *)(v17[10] + 4 * v11);
        if (v18 != -1)
          goto LABEL_16;
      }
      v20 = *(_QWORD *)(v17[13] + 8 * v11) * *v16;
      *(_QWORD *)(*v5 + 8 * v11) = v20;
      if (!v20)
        goto LABEL_13;
LABEL_20:
      v21 = *(_QWORD *)(v14[1] + 40);
      if (v15 == -1)
        v22 = (_QWORD *)(v14[13] + 8 * v11);
      else
        v22 = (_QWORD *)(v21 + 12 * v15);
      v23 = *v9;
      v24 = *(_QWORD *)(v21 + 12 * *(int *)(v14[4] + 4 * v11));
      v25 = *(_DWORD *)(v14[7] + 4 * v11);
      v26 = *(_QWORD *)(v21 + 12 * v25) - *v22;
      if (v24 > v26)
        v26 = v24;
      *(_QWORD *)(*v9 + 32 * v11) = v26;
      *(_QWORD *)(v23 + 32 * v11 + 8) = -*(_QWORD *)(v21 + 12 * (v25 ^ 1));
      v27 = *(_QWORD *)(v17[1] + 40);
      if (v18 == -1)
        v28 = (_QWORD *)(v17[13] + 8 * v11);
      else
        v28 = (_QWORD *)(v27 + 12 * v18);
      v29 = *(_QWORD *)(v27 + 12 * *(int *)(v17[4] + 4 * v11));
      v30 = *(_DWORD *)(v17[7] + 4 * v11);
      v31 = *(_QWORD *)(v27 + 12 * v30) - *v28;
      if (v29 > v31)
        v31 = v29;
      v32 = v23 + 32 * v11;
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = -*(_QWORD *)(v27 + 12 * (v30 ^ 1));
      v34 = (char *)*((_QWORD *)this + 10);
      v33 = *((_QWORD *)this + 11);
      if ((unint64_t)v34 >= v33)
      {
        v35 = (char *)*v76;
        v36 = v34 - (_BYTE *)*v76;
        v37 = v36 >> 2;
        v38 = (v36 >> 2) + 1;
        if (v38 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v39 = v33 - (_QWORD)v35;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v41 = operator new(4 * v40);
          v42 = &v41[4 * v37];
          *v42 = v11;
          v13 = (uint64_t)(v42 + 1);
          if (v34 == v35)
            goto LABEL_48;
LABEL_42:
          v43 = v34 - 4 - v35;
          if (v43 < 0x2C)
            goto LABEL_77;
          if ((unint64_t)(v34 - &v41[v36]) < 0x20)
            goto LABEL_77;
          v44 = (v43 >> 2) + 1;
          v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
          v46 = &v34[-v45];
          v42 = (_DWORD *)((char *)v42 - v45);
          v47 = &v41[4 * v37 - 16];
          v48 = v34 - 16;
          v49 = v44 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          v34 = v46;
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_77:
            do
            {
              v51 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *--v42 = v51;
            }
            while (v34 != v35);
          }
        }
        else
        {
          v41 = 0;
          v42 = (_DWORD *)(4 * v37);
          *(_DWORD *)(4 * v37) = v11;
          v13 = 4 * v37 + 4;
          if (v34 != v35)
            goto LABEL_42;
        }
LABEL_48:
        *((_QWORD *)this + 9) = v42;
        *((_QWORD *)this + 10) = v13;
        *((_QWORD *)this + 11) = &v41[4 * v40];
        if (v35)
          operator delete(v35);
        v5 = (_QWORD *)((char *)this + 96);
        v12 = v75;
        goto LABEL_12;
      }
      *(_DWORD *)v34 = v11;
      v13 = (uint64_t)(v34 + 4);
LABEL_12:
      *((_QWORD *)this + 10) = v13;
LABEL_13:
      ++v11;
    }
    while (v11 != v12);
  }
  v52 = (int *)*((_QWORD *)this + 9);
  v53 = *((_QWORD *)this + 10) - (_QWORD)v52;
  if ((unint64_t)v53 < 8)
    return 1;
  v54 = *((_QWORD *)this + 3);
  v55 = *((_QWORD *)this + 4);
  if (v54 == v55)
    return 1;
  v56 = (int ***)((char *)this + 48);
  while (2)
  {
    v57 = (int **)*((_QWORD *)this + 6);
    v58 = (int **)*((_QWORD *)this + 7);
    while (v57 != v58)
    {
      v59 = (uint64_t)v57[1];
      if (v59)
      {
        v60 = *v57;
        v61 = *((_QWORD *)this + 12);
        v62 = (v59 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v62)
        {
          v63 = 0;
          v64 = 0;
          v65 = v62 + 1;
          v66 = (v62 + 1) & 0x7FFFFFFFFFFFFFFELL;
          v67 = &v60[v66];
          v68 = v60 + 1;
          v69 = v66;
          do
          {
            v63 += *(_QWORD *)(v61 + 8 * *(v68 - 1));
            v64 += *(_QWORD *)(v61 + 8 * *v68);
            v68 += 2;
            v69 -= 2;
          }
          while (v69);
          v70 = v64 + v63;
          if (v65 == v66)
          {
LABEL_65:
            v72 = 4 * v59;
            v73 = *v57;
            while ((operations_research::sat::NonOverlappingRectanglesEnergyPropagator::FailWhenEnergyIsTooLarge(this, *v73, v60, v59, v70) & 1) != 0)
            {
              ++v73;
              v72 -= 4;
              if (!v72)
                goto LABEL_55;
            }
            return 0;
          }
        }
        else
        {
          v70 = 0;
          v67 = *v57;
        }
        do
        {
          v71 = *v67++;
          v70 += *(_QWORD *)(v61 + 8 * v71);
        }
        while (v67 != &v60[v59]);
        goto LABEL_65;
      }
LABEL_55:
      v57 += 2;
    }
    v54 += 16;
    result = 1;
    v56 = (int ***)((char *)this + 48);
    if (v54 != v55)
      continue;
    return result;
  }
}

void operations_research::sat::`anonymous namespace'::SplitDisjointBoxes(_QWORD *a1, int *a2, unint64_t a3, int ***a4)
{
  unint64_t v5;
  int *v6;
  _QWORD *v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  int **v22;
  int **v23;
  unint64_t v24;
  int **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  int **v33;
  char *v34;
  char *v35;
  int *v36;
  unint64_t v37;
  int **v38;
  int **v39;
  int **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  int **v47;
  char *v48;
  int **v49;
  _QWORD *v50;
  int *v51;
  _QWORD *v52;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  a4[1] = *a4;
  v8 = &a2[a3];
  v52 = a1;
  v9 = 126 - 2 * __clz((uint64_t)(4 * a3) >> 2);
  if (a3)
    v10 = v9;
  else
    v10 = 0;
  if (v5 < 2)
    return;
  v11 = 0;
  v12 = v7[1];
  v13 = v7[7];
  v14 = -*(_QWORD *)(*(_QWORD *)(v12 + 40) + 12 * (*(_DWORD *)(v13 + 4 * *v6) ^ 1));
  v15 = 1;
  v16 = 1;
  v50 = v7;
  v51 = v6;
  do
  {
    while (1)
    {
      v18 = v6[v15];
      v19 = *(_QWORD *)(v12 + 40);
      if (*(_QWORD *)(v19 + 12 * *(int *)(v7[4] + 4 * v18)) < v14)
        break;
      if (v16 >= 2)
      {
        v20 = &v6[v11];
        v22 = a4[1];
        v21 = (unint64_t)a4[2];
        if ((unint64_t)v22 < v21)
        {
          *v22 = v20;
          v22[1] = (int *)v16;
          v23 = v22 + 2;
LABEL_25:
          a4[1] = v23;
          v12 = v7[1];
          v13 = v7[7];
          goto LABEL_26;
        }
        v24 = v5;
        v25 = *a4;
        v26 = ((char *)v22 - (char *)*a4) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          goto LABEL_47;
        v28 = v21 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0;
        v30 = 0xFFFFFFFFFFFFFFFLL;
        if (!v29)
          v30 = v27;
        if (v30 >> 60)
          goto LABEL_48;
        v31 = 16 * v30;
        v32 = (char *)operator new(16 * v30);
        v33 = (int **)&v32[16 * v26];
        *v33 = v20;
        v33[1] = (int *)v16;
        if (v22 == v25)
        {
          v5 = v24;
          v23 = v33 + 2;
          *a4 = v33;
          a4[1] = v33 + 2;
          a4[2] = (int **)&v32[v31];
          v7 = v50;
          if (!v25)
            goto LABEL_24;
        }
        else
        {
          v34 = &v32[16 * v26];
          v5 = v24;
          do
          {
            v35 = v34 - 16;
            *((_OWORD *)v34 - 1) = *((_OWORD *)v22 - 1);
            v22 -= 2;
            v34 -= 16;
          }
          while (v22 != v25);
          v23 = v33 + 2;
          *a4 = (int **)v35;
          a4[1] = v33 + 2;
          a4[2] = (int **)&v32[v31];
          v7 = v50;
          if (!v25)
            goto LABEL_24;
        }
        operator delete(v25);
LABEL_24:
        v6 = v51;
        goto LABEL_25;
      }
LABEL_26:
      v14 = -*(_QWORD *)(*(_QWORD *)(v12 + 40) + 12 * (*(_DWORD *)(v13 + 4 * v18) ^ 1));
      v16 = 1;
      v11 = v15++;
      if (v15 == v5)
        goto LABEL_30;
    }
    ++v16;
    v17 = *(_QWORD *)(v19 + 12 * (*(_DWORD *)(v13 + 4 * v18) ^ 1));
    if (v14 <= -v17)
      v14 = -v17;
    ++v15;
  }
  while (v15 != v5);
LABEL_30:
  if (v16 > 1)
  {
    v36 = &v6[v11];
    v38 = a4[1];
    v37 = (unint64_t)a4[2];
    if ((unint64_t)v38 < v37)
    {
      *v38 = v36;
      v38[1] = (int *)v16;
      v39 = v38 + 2;
      goto LABEL_43;
    }
    v40 = *a4;
    v41 = ((char *)v38 - (char *)*a4) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
LABEL_47:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v43 = v37 - (_QWORD)v40;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    v29 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0;
    v44 = 0xFFFFFFFFFFFFFFFLL;
    if (!v29)
      v44 = v42;
    if (v44 >> 60)
LABEL_48:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v45 = 16 * v44;
    v46 = (char *)operator new(16 * v44);
    v47 = (int **)&v46[16 * v41];
    v48 = &v46[v45];
    *v47 = v36;
    v47[1] = (int *)v16;
    v39 = v47 + 2;
    if (v38 == v40)
    {
      *a4 = v47;
      a4[1] = v39;
      a4[2] = (int **)v48;
      if (v40)
        goto LABEL_42;
    }
    else
    {
      do
      {
        v49 = v47 - 2;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
        v38 -= 2;
        v47 -= 2;
      }
      while (v38 != v40);
      *a4 = v49;
      a4[1] = v39;
      a4[2] = (int **)v48;
      if (v40)
LABEL_42:
        operator delete(v40);
    }
LABEL_43:
    a4[1] = v39;
  }
}

uint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::FailWhenEnergyIsTooLarge(_QWORD *a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t *v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int64_t *v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v27;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t *v43;
  operations_research::sat::SchedulingConstraintHelper *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  char *v61;
  operations_research::sat::SchedulingConstraintHelper *v62;
  uint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE v85[12];
  uint64_t *v86;

  v7 = a1;
  operations_research::sat::NonOverlappingRectanglesEnergyPropagator::SortBoxesIntoNeighbors(a1, a2, a3, a4, a5);
  v8 = v7[18];
  if (v7[19] == v8)
    return 1;
  v9 = 0;
  v10 = v7[12];
  v11 = *(_QWORD *)(v10 + 8 * a2);
  v12 = v7[15];
  v78 = a2;
  v80 = a2;
  v13 = (int64_t *)(v12 + 32 * a2);
  v14 = v13[2];
  v15 = v13[3];
  v16 = *v13;
  v17 = v13[1];
  v18 = 1;
  while (1)
  {
    v19 = *(int *)(v8 + v9);
    v20 = (uint64_t *)(v10 + 8 * v19);
    *(_DWORD *)v85 = 0;
    if (*v20 < 1)
    {
      v82 = v18;
      v27 = v14;
      v86 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v20, (int)v85, "cached_areas_[other_box] > 0");
      if (v86)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v85, (google::glog_internal_namespace_ *)"./ortools/sat/diffn.cc", 227, &v86);
        google::LogMessage::stream((google::LogMessage *)v85);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v85);
      }
      v12 = v7[15];
      v10 = v7[12];
      v14 = v27;
      v18 = v82;
    }
    v21 = (int64_t *)(v12 + 32 * v19);
    v22 = v21[1];
    if (*v21 < v16)
      v16 = *v21;
    v24 = v21[2];
    v23 = v21[3];
    if (v24 < v14)
      v14 = v24;
    if (v17 <= v22)
      v17 = v22;
    if (v15 <= v23)
      v15 = v23;
    v25 = (v15 - v14) * (v17 - v16);
    if (v25 >= a5)
      return 1;
    v11 += *(_QWORD *)(v10 + 8 * v19);
    if (v11 > v25)
      break;
    v8 = v7[18];
    v9 += 12;
    if (0xAAAAAAAAAAAAAAABLL * ((v7[19] - v8) >> 2) <= v18++)
      return 1;
  }
  v84 = v14;
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v7[1]);
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v7[2]);
  v29 = v7[1];
  v30 = *(_DWORD *)(*(_QWORD *)(v29 + 80) + 4 * v78);
  if (v30 == -1)
    v31 = (unint64_t *)(*(_QWORD *)(v29 + 104) + 8 * v78);
  else
    v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 40) + 12 * v30);
  operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v29, v80, *v31, v16);
  operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason((operations_research::sat::SchedulingConstraintHelper *)v7[1], v80, v17);
  v32 = v7[2];
  v33 = *(_DWORD *)(*(_QWORD *)(v32 + 80) + 4 * v78);
  if (v33 == -1)
    v34 = (unint64_t *)(*(_QWORD *)(v32 + 104) + 8 * v78);
  else
    v34 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 40) + 12 * v33);
  operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v32, v80, *v34, v84);
  operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason((operations_research::sat::SchedulingConstraintHelper *)v7[2], v80, v15);
  v35 = 0;
  if (v17 >= (uint64_t)0x8000000000000002)
    v36 = -v17;
  else
    v36 = 0x7FFFFFFFFFFFFFFFLL;
  v81 = v36;
  v83 = v18;
  v37 = HIDWORD(v36);
  if (v15 >= (uint64_t)0x8000000000000002)
    v38 = -v15;
  else
    v38 = 0x7FFFFFFFFFFFFFFFLL;
  v77 = v37;
  v79 = v38;
  v75 = v7;
  v76 = HIDWORD(v38);
  do
  {
    v40 = *(int *)(v7[18] + 12 * v35);
    v41 = v7[1];
    v42 = *(_DWORD *)(*(_QWORD *)(v41 + 80) + 4 * v40);
    if (v42 == -1)
      v43 = (unint64_t *)(*(_QWORD *)(v41 + 104) + 8 * v40);
    else
      v43 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 40) + 12 * v42);
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v41, *(_DWORD *)(v7[18] + 12 * v35), *v43, v16);
    v44 = (operations_research::sat::SchedulingConstraintHelper *)v7[1];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v44, v40);
    *(_DWORD *)v85 = *(_DWORD *)(*((_QWORD *)v44 + 7) + 4 * v40) ^ 1;
    *(_QWORD *)&v85[4] = v81;
    v45 = *(_QWORD *)v85;
    v47 = (char *)*((_QWORD *)v44 + 49);
    v46 = *((_QWORD *)v44 + 50);
    if ((unint64_t)v47 < v46)
    {
      *(_QWORD *)v47 = *(_QWORD *)v85;
      *((_DWORD *)v47 + 2) = v77;
      v48 = v84;
      *((_QWORD *)v44 + 49) = v47 + 12;
      v49 = v7[2];
      v50 = *(_DWORD *)(*(_QWORD *)(v49 + 80) + 4 * v40);
      if (v50 != -1)
        goto LABEL_39;
      goto LABEL_56;
    }
    v52 = (_BYTE *)*((_QWORD *)v44 + 48);
    v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v52) >> 2) + 1;
    if (v53 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v52) >> 2);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0xAAAAAAAAAAAAAAALL)
      v55 = 0x1555555555555555;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 > 0x1555555555555555)
        goto LABEL_78;
      v56 = (char *)operator new(12 * v55);
    }
    else
    {
      v56 = 0;
    }
    v57 = &v56[4 * ((v47 - v52) >> 2)];
    *(_QWORD *)v57 = v45;
    *((_DWORD *)v57 + 2) = v77;
    v58 = v57;
    if (v47 == v52)
    {
      v7 = v75;
      v61 = v57 + 12;
      *((_QWORD *)v44 + 48) = v57;
      *((_QWORD *)v44 + 49) = v57 + 12;
      *((_QWORD *)v44 + 50) = &v56[12 * v55];
      if (v47)
        goto LABEL_54;
    }
    else
    {
      v7 = v75;
      do
      {
        v59 = *(_QWORD *)(v47 - 12);
        v47 -= 12;
        v60 = *((_DWORD *)v47 + 2);
        *(_QWORD *)(v58 - 12) = v59;
        v58 -= 12;
        *((_DWORD *)v58 + 2) = v60;
      }
      while (v47 != v52);
      v47 = (char *)*((_QWORD *)v44 + 48);
      v61 = v57 + 12;
      *((_QWORD *)v44 + 48) = v58;
      *((_QWORD *)v44 + 49) = v57 + 12;
      *((_QWORD *)v44 + 50) = &v56[12 * v55];
      if (v47)
LABEL_54:
        operator delete(v47);
    }
    v48 = v84;
    *((_QWORD *)v44 + 49) = v61;
    v49 = v7[2];
    v50 = *(_DWORD *)(*(_QWORD *)(v49 + 80) + 4 * v40);
    if (v50 != -1)
    {
LABEL_39:
      v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 40) + 12 * v50);
      goto LABEL_57;
    }
LABEL_56:
    v51 = (unint64_t *)(*(_QWORD *)(v49 + 104) + 8 * v40);
LABEL_57:
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v49, v40, *v51, v48);
    v62 = (operations_research::sat::SchedulingConstraintHelper *)v7[2];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v62, v40);
    *(_DWORD *)v85 = *(_DWORD *)(*((_QWORD *)v62 + 7) + 4 * v40) ^ 1;
    *(_QWORD *)&v85[4] = v79;
    v63 = *(_QWORD *)v85;
    v65 = (_DWORD *)*((_QWORD *)v62 + 49);
    v64 = *((_QWORD *)v62 + 50);
    if ((unint64_t)v65 < v64)
    {
      *(_QWORD *)v65 = *(_QWORD *)v85;
      v65[2] = v76;
      v39 = v65 + 3;
      goto LABEL_33;
    }
    v66 = (_DWORD *)*((_QWORD *)v62 + 48);
    v67 = 0xAAAAAAAAAAAAAAABLL * (v65 - v66) + 1;
    if (v67 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)v66) >> 2);
    if (2 * v68 > v67)
      v67 = 2 * v68;
    if (v68 >= 0xAAAAAAAAAAAAAAALL)
      v69 = 0x1555555555555555;
    else
      v69 = v67;
    if (v69)
    {
      if (v69 > 0x1555555555555555)
LABEL_78:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v70 = (char *)operator new(12 * v69);
    }
    else
    {
      v70 = 0;
    }
    v71 = &v70[4 * (v65 - v66)];
    *(_QWORD *)v71 = v63;
    *((_DWORD *)v71 + 2) = v76;
    v72 = v71;
    if (v65 == v66)
    {
      v7 = v75;
      v39 = v71 + 12;
      *((_QWORD *)v62 + 48) = v71;
      *((_QWORD *)v62 + 49) = v71 + 12;
      *((_QWORD *)v62 + 50) = &v70[12 * v69];
      if (!v65)
        goto LABEL_33;
LABEL_76:
      operator delete(v65);
      goto LABEL_33;
    }
    v7 = v75;
    do
    {
      v73 = *(_QWORD *)(v65 - 3);
      v65 -= 3;
      v74 = v65[2];
      *(_QWORD *)(v72 - 12) = v73;
      v72 -= 12;
      *((_DWORD *)v72 + 2) = v74;
    }
    while (v65 != v66);
    v65 = (_DWORD *)*((_QWORD *)v62 + 48);
    v39 = v71 + 12;
    *((_QWORD *)v62 + 48) = v72;
    *((_QWORD *)v62 + 49) = v71 + 12;
    *((_QWORD *)v62 + 50) = &v70[12 * v69];
    if (v65)
      goto LABEL_76;
LABEL_33:
    *((_QWORD *)v62 + 49) = v39;
    ++v35;
  }
  while (v83 != v35);
  operations_research::sat::SchedulingConstraintHelper::ImportOtherReasons((operations_research::sat::SchedulingConstraintHelper *)v7[1], (char **)v7[2]);
  return operations_research::sat::SchedulingConstraintHelper::ReportConflict((operations_research::sat::SchedulingConstraintHelper *)v7[1]);
}

void sub_22DB3CDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::RegisterWith(operations_research::sat::SchedulingConstraintHelper **this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unint64_t v4;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(this[1], v4, a2, 0, 1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(this[2], v4, a2, 0, 1);
  return v4;
}

uint64_t *operations_research::sat::NonOverlappingRectanglesEnergyPropagator::SortBoxesIntoNeighbors(_QWORD *a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  void **v6;
  uint64_t v7;
  int *v9;
  int v10;
  uint64_t *v12;
  int *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int *v46;
  uint64_t *v47;
  char v49;

  v6 = (void **)(a1 + 18);
  v5 = (uint64_t *)a1[18];
  v7 = a1[15];
  a1[19] = v5;
  if (a4)
  {
    v9 = a3;
    v10 = a2;
    v12 = (uint64_t *)(v7 + 32 * a2);
    v13 = &a3[a4];
    v14 = v12 + 1;
    v15 = v12 + 3;
    v16 = v12 + 2;
    v46 = v13;
    v47 = v12;
    v44 = v12 + 3;
    v45 = v12 + 1;
    v43 = v12 + 2;
    do
    {
      v18 = *v9;
      if (*v9 != v10)
      {
        v19 = (uint64_t *)(a1[15] + 32 * v18);
        v20 = *v14;
        if (*v14 <= v19[1])
          v20 = v19[1];
        v21 = *v12;
        if (*v19 < *v12)
          v21 = *v19;
        v22 = v20 - v21;
        v23 = *v15;
        v26 = v19 + 2;
        v24 = v19[2];
        v25 = v26[1];
        if (*v15 <= v25)
          v23 = v25;
        if (v24 >= *v16)
          v24 = *v16;
        v27 = (v23 - v24) * v22;
        if (v27 < a5)
        {
          v28 = a1[20];
          if ((unint64_t)v5 < v28)
          {
            *(_DWORD *)v5 = v18;
            *(uint64_t *)((char *)v5 + 4) = v27;
            v17 = (uint64_t *)((char *)v5 + 12);
          }
          else
          {
            v29 = v6;
            v30 = (uint64_t *)*v6;
            v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v30) >> 2) + 1;
            if (v31 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v30) >> 2);
            if (2 * v32 > v31)
              v31 = 2 * v32;
            if (v32 >= 0xAAAAAAAAAAAAAAALL)
              v33 = 0x1555555555555555;
            else
              v33 = v31;
            if (v33)
            {
              if (v33 > 0x1555555555555555)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v34 = (char *)operator new(12 * v33);
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * (((char *)v5 - (char *)v30) >> 2)];
            *(_DWORD *)v35 = v18;
            *(_QWORD *)(v35 + 4) = v27;
            v36 = v35;
            if (v5 == v30)
            {
              v6 = v29;
            }
            else
            {
              do
              {
                v37 = *(uint64_t *)((char *)v5 - 12);
                v5 = (uint64_t *)((char *)v5 - 12);
                v38 = *((_DWORD *)v5 + 2);
                *(_QWORD *)(v36 - 12) = v37;
                v36 -= 12;
                *((_DWORD *)v36 + 2) = v38;
              }
              while (v5 != v30);
              v6 = v29;
              v5 = (uint64_t *)*v29;
            }
            v10 = a2;
            v17 = (uint64_t *)(v35 + 12);
            a1[18] = v36;
            a1[19] = v35 + 12;
            a1[20] = &v34[12 * v33];
            if (v5)
              operator delete(v5);
            v13 = v46;
            v12 = v47;
            v15 = v44;
            v14 = v45;
            v16 = v43;
          }
          a1[19] = v17;
          v5 = v17;
        }
      }
      ++v9;
    }
    while (v9 != v13);
    v39 = (uint64_t *)*v6;
  }
  else
  {
    v39 = v5;
  }
  v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v39) >> 2));
  if (v5 == v39)
    v41 = 0;
  else
    v41 = v40;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(v39, (char *)v5, (uint64_t)&v49, v41, 1);
}

operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::NonOverlappingRectanglesDisjunctivePropagator(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3, operations_research::sat::SchedulingConstraintHelper *a4, operations_research::sat::Model *a5)
{
  operations_research::sat::SchedulingConstraintHelper *v9;

  *(_QWORD *)this = &off_24F985B10;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  v9 = (operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24);
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24), (*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 2, a5);
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 472), (*((_QWORD *)a4 + 5) - *((_QWORD *)a4 + 4)) >> 2, a5);
  *((_BYTE *)this + 920) = a2;
  *((_QWORD *)this + 116) = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a5);
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 127) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_QWORD *)this + 138) = 0;
  operations_research::sat::DisjunctiveOverloadChecker::DisjunctiveOverloadChecker((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1112), v9);
  operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1240), 1, v9);
  operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1392), 0, v9);
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1544), 1, v9);
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1648), 0, v9);
  *((_QWORD *)this + 219) = &off_24F985D48;
  *((_BYTE *)this + 1760) = 1;
  *((_QWORD *)this + 221) = v9;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 1824);
  *((_QWORD *)this + 241) = 0;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *((_QWORD *)this + 242) = &off_24F985D48;
  *((_BYTE *)this + 1944) = 0;
  *((_QWORD *)this + 244) = v9;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 2008);
  *((_QWORD *)this + 264) = 0;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  return this;
}

void sub_22DB3D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  operations_research::sat::SchedulingConstraintHelper *v10;
  uint64_t v11;
  operations_research::sat::SchedulingConstraintHelper *v12;
  operations_research::sat::DisjunctiveOverloadChecker *v13;
  operations_research::sat::DisjunctiveDetectablePrecedences *v14;
  void **v15;
  operations_research::sat::DisjunctiveDetectablePrecedences *v16;
  operations_research::sat::DisjunctiveNotLast *v17;
  operations_research::sat::DisjunctiveNotLast *v18;
  operations_research::sat::DisjunctiveEdgeFinding *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void **v24;
  void *v25;
  void *v26;

  v20 = *(void **)(v11 + 1984);
  if (v20)
  {
    *(_QWORD *)(v11 + 1992) = v20;
    operator delete(v20);
  }
  v21 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v11 + 1968) = v21;
    operator delete(v21);
  }
  operations_research::sat::DisjunctiveEdgeFinding::~DisjunctiveEdgeFinding(v19);
  operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(v18);
  operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(v17);
  operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(v16);
  operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(v14);
  operations_research::sat::DisjunctiveOverloadChecker::~DisjunctiveOverloadChecker(v13);
  v22 = *(void **)(v11 + 1088);
  if (v22)
  {
    *(_QWORD *)(v11 + 1096) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v11 + 1064);
  if (v23)
  {
    *(_QWORD *)(v11 + 1072) = v23;
    operator delete(v23);
  }
  v24 = (void **)(v11 + 944);
  absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<int>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::~flat_hash_set(v11 + 1016);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v11 + 992));
  v25 = *(void **)(v11 + 968);
  if (v25)
  {
    *(_QWORD *)(v11 + 976) = v25;
    operator delete(v25);
  }
  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v11 + 952) = v26;
    operator delete(v26);
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v12);
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
    _Unwind_Resume(a1);
  }
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v12);
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
  _Unwind_Resume(a1);
}

void sub_22DB3D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  operations_research::sat::SchedulingConstraintHelper *v10;

  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
  _Unwind_Resume(a1);
}

void operations_research::sat::DisjunctiveEdgeFinding::~DisjunctiveEdgeFinding(operations_research::sat::DisjunctiveEdgeFinding *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F985D48;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F985D48;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(operations_research::sat::DisjunctiveNotLast *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24F985D00;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24F985D00;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(operations_research::sat::DisjunctiveDetectablePrecedences *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985CB8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985CB8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::DisjunctiveOverloadChecker::~DisjunctiveOverloadChecker(operations_research::sat::DisjunctiveOverloadChecker *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24F985C70;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24F985C70;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<int>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::~NonOverlappingRectanglesDisjunctivePropagator(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  *(_QWORD *)this = &off_24F985B10;
  *((_QWORD *)this + 242) = &off_24F985D48;
  v2 = (void *)*((_QWORD *)this + 262);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 259);
  if (v3)
  {
    *((_QWORD *)this + 260) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 256);
  if (v4)
  {
    *((_QWORD *)this + 257) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 253);
  if (v5)
  {
    *((_QWORD *)this + 254) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 248);
  if (v6)
  {
    *((_QWORD *)this + 249) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 245);
  if (v7)
  {
    *((_QWORD *)this + 246) = v7;
    operator delete(v7);
  }
  *((_QWORD *)this + 219) = &off_24F985D48;
  v8 = (void *)*((_QWORD *)this + 239);
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 236);
  if (v9)
  {
    *((_QWORD *)this + 237) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 233);
  if (v10)
  {
    *((_QWORD *)this + 234) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 230);
  if (v11)
  {
    *((_QWORD *)this + 231) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 225);
  if (v12)
  {
    *((_QWORD *)this + 226) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 222);
  if (v13)
  {
    *((_QWORD *)this + 223) = v13;
    operator delete(v13);
  }
  *((_QWORD *)this + 206) = &off_24F985D00;
  v14 = (void *)*((_QWORD *)this + 215);
  if (v14)
  {
    *((_QWORD *)this + 216) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 210);
  if (v15)
  {
    *((_QWORD *)this + 211) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 207);
  if (v16)
  {
    *((_QWORD *)this + 208) = v16;
    operator delete(v16);
  }
  *((_QWORD *)this + 193) = &off_24F985D00;
  v17 = (void *)*((_QWORD *)this + 202);
  if (v17)
  {
    *((_QWORD *)this + 203) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 197);
  if (v18)
  {
    *((_QWORD *)this + 198) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 194);
  if (v19)
  {
    *((_QWORD *)this + 195) = v19;
    operator delete(v19);
  }
  *((_QWORD *)this + 174) = &off_24F985CB8;
  v20 = (void *)*((_QWORD *)this + 189);
  if (v20)
  {
    *((_QWORD *)this + 190) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 184);
  if (v21)
  {
    *((_QWORD *)this + 185) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 181);
  if (v22)
    operator delete(v22);
  v23 = (void *)*((_QWORD *)this + 178);
  if (v23)
  {
    *((_QWORD *)this + 179) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 175);
  if (v24)
  {
    *((_QWORD *)this + 176) = v24;
    operator delete(v24);
  }
  *((_QWORD *)this + 155) = &off_24F985CB8;
  v25 = (void *)*((_QWORD *)this + 170);
  if (v25)
  {
    *((_QWORD *)this + 171) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 165);
  if (v26)
  {
    *((_QWORD *)this + 166) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 162);
  if (v27)
    operator delete(v27);
  v28 = (void *)*((_QWORD *)this + 159);
  if (v28)
  {
    *((_QWORD *)this + 160) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 156);
  if (v29)
  {
    *((_QWORD *)this + 157) = v29;
    operator delete(v29);
  }
  *((_QWORD *)this + 139) = &off_24F985C70;
  v30 = (void *)*((_QWORD *)this + 152);
  if (v30)
  {
    *((_QWORD *)this + 153) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 149);
  if (v31)
  {
    *((_QWORD *)this + 150) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 144);
  if (v32)
  {
    *((_QWORD *)this + 145) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 141);
  if (v33)
  {
    *((_QWORD *)this + 142) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 136);
  if (v34)
  {
    *((_QWORD *)this + 137) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 133);
  if (v35)
  {
    *((_QWORD *)this + 134) = v35;
    operator delete(v35);
  }
  if (*((_QWORD *)this + 130))
  {
    operator delete(*((void **)this + 127));
    *((_QWORD *)this + 127) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 132) = 0;
    *((_QWORD *)this + 128) = 0;
    *((_QWORD *)this + 130) = 0;
    *((_QWORD *)this + 129) = 0;
  }
  v36 = (_QWORD *)*((_QWORD *)this + 131);
  if (v36)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v36);
  v37 = *((_QWORD *)this + 124);
  if (v37)
  {
    v38 = *((_QWORD *)this + 125);
    v39 = (void *)*((_QWORD *)this + 124);
    if (v38 != v37)
    {
      v40 = *((_QWORD *)this + 125);
      do
      {
        v42 = *(void **)(v40 - 24);
        v40 -= 24;
        v41 = v42;
        if (v42)
        {
          *(_QWORD *)(v38 - 16) = v41;
          operator delete(v41);
        }
        v38 = v40;
      }
      while (v40 != v37);
      v39 = (void *)*((_QWORD *)this + 124);
    }
    *((_QWORD *)this + 125) = v37;
    operator delete(v39);
  }
  v43 = (void *)*((_QWORD *)this + 121);
  if (v43)
  {
    *((_QWORD *)this + 122) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 118);
  if (v44)
  {
    *((_QWORD *)this + 119) = v44;
    operator delete(v44);
  }
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 472));
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24));
}

{
  operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::~NonOverlappingRectanglesDisjunctivePropagator(this);
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Register(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this, int a2, int a3)
{
  int v6;
  unsigned int v7;

  v6 = operations_research::sat::GenericLiteralWatcher::Register(*((_QWORD *)this + 116), (uint64_t)this);
  *((_DWORD *)this + 234) = v6;
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 116), v6, a2);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), *((_DWORD *)this + 234), *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 2), *((_DWORD *)this + 234), *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  v7 = operations_research::sat::GenericLiteralWatcher::Register(*((_QWORD *)this + 116), (uint64_t)this);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 116), v7, a3);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v7, *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 2), v7, *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _DWORD *v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  int64_t v66;
  absl::lts_2020_02_25::hash_internal::CityHashState *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _DWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  uint64_t *v115;
  uint64_t *v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  _BOOL4 v128;
  uint64_t v130;
  int v131;
  BOOL v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  absl::lts_2020_02_25::hash_internal **v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  absl::lts_2020_02_25::hash_internal **v148;
  absl::lts_2020_02_25::hash_internal **v149;
  unint64_t v150;
  _QWORD *v151;
  absl::lts_2020_02_25::hash_internal **v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  absl::lts_2020_02_25::hash_internal **v158;
  uint64_t v159;
  absl::lts_2020_02_25::hash_internal *v160;
  absl::lts_2020_02_25::hash_internal *v161;
  size_t v162;
  unint64_t v163;
  _UNKNOWN **v164;
  _UNKNOWN **v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::vector<int> *v171;
  std::vector<int> *v172;
  int *v173;
  uint64_t v174;
  int *v175;
  unint64_t v176;
  uint64_t v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t CanonicalValue;
  uint64_t v187;
  uint64_t result;
  BOOL v189;
  uint64_t v190;
  int ***v191;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  absl::lts_2020_02_25::hash_internal ***v196;
  int *v197;
  uint64_t *v198;
  int *v199;
  uint64_t v200;
  absl::lts_2020_02_25::hash_internal::CityHashState *v201;
  uint64_t v202;
  absl::lts_2020_02_25::hash_internal **v203;
  void **v204;
  uint64_t v205;
  absl::lts_2020_02_25::hash_internal *v206;
  void **__s2;
  void *__s2a;
  absl::lts_2020_02_25::hash_internal *__s2b;
  unint64_t v211[2];
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;

  v4 = a1;
  v5 = (char *)a1[118];
  a1[119] = v5;
  __s2 = (void **)(a1 + 121);
  a1[122] = a1[121];
  v7 = a2[4];
  v6 = a2[5];
  v194 = a3;
  v195 = (uint64_t)a2;
  if ((int)((unint64_t)(v6 - v7) >> 2) < 1)
    return 1;
  v8 = 0;
  v204 = (void **)(a1 + 118);
  do
  {
    if (!*((_BYTE *)v4 + 920))
    {
      v15 = *(_DWORD *)(a2[10] + 4 * v8);
      if (v15 == -1)
      {
        if (!*(_QWORD *)(a2[13] + 8 * v8))
          goto LABEL_5;
      }
      else if (!*(_QWORD *)(*(_QWORD *)(a2[1] + 40) + 12 * v15))
      {
        goto LABEL_5;
      }
      v25 = *(_DWORD *)(a3[10] + 4 * v8);
      if (v25 == -1)
      {
        if (!*(_QWORD *)(a3[13] + 8 * v8))
          goto LABEL_5;
      }
      else if (!*(_QWORD *)(*(_QWORD *)(a3[1] + 40) + 12 * v25))
      {
        goto LABEL_5;
      }
    }
    v10 = *(_QWORD *)(a3[1] + 40);
    v11 = -*(_QWORD *)(v10 + 12 * (*(_DWORD *)(a3[4] + 4 * v8) ^ 1));
    if (*(_QWORD *)(v10 + 12 * *(int *)(a3[7] + 4 * v8)) > v11)
    {
      v12 = (char *)v4[122];
      v13 = v4[123];
      if ((unint64_t)v12 < v13)
      {
        *(_QWORD *)v12 = v11;
        v4[122] = v12 + 8;
        v14 = v4[120];
        if ((unint64_t)v5 >= v14)
          goto LABEL_40;
LABEL_3:
        *(_DWORD *)v5 = v8;
        v9 = (uint64_t)(v5 + 4);
LABEL_4:
        v4[119] = v9;
        v7 = a2[4];
        v6 = a2[5];
        v5 = (char *)v9;
        a3 = v194;
        goto LABEL_5;
      }
      v16 = (char *)*__s2;
      v17 = v12 - (_BYTE *)*__s2;
      v18 = v17 >> 3;
      v19 = (v17 >> 3) + 1;
      if (v19 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v20 = v13 - (_QWORD)v16;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          goto LABEL_231;
        v22 = operator new(8 * v21);
        v4 = a1;
        v23 = &v22[8 * v18];
        *v23 = v11;
        v24 = (uint64_t)(v23 + 1);
        if (v12 == v16)
        {
LABEL_37:
          v4[121] = v23;
          v4[122] = v24;
          v4[123] = &v22[8 * v21];
          if (v16)
          {
            operator delete(v16);
            v4 = a1;
            v5 = (char *)a1[119];
          }
          a2 = (_QWORD *)v195;
          v4[122] = v24;
          v14 = v4[120];
          if ((unint64_t)v5 < v14)
            goto LABEL_3;
LABEL_40:
          v35 = (char *)*v204;
          v36 = v5 - (_BYTE *)*v204;
          v37 = v36 >> 2;
          v38 = (v36 >> 2) + 1;
          if (v38 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v39 = v14 - (_QWORD)v35;
          if (v39 >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 >> 62)
              goto LABEL_231;
            v41 = operator new(4 * v40);
            v4 = a1;
            v42 = &v41[4 * v37];
            *v42 = v8;
            v9 = (uint64_t)(v42 + 1);
            if (v5 == v35)
              goto LABEL_54;
LABEL_51:
            v43 = v5 - 4 - v35;
            if (v43 < 0xBC)
            {
              v44 = v5;
              goto LABEL_53;
            }
            if (&v41[v36 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v36 - 4])
            {
              v44 = v5;
              goto LABEL_53;
            }
            if (&v5[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
            {
              v44 = v5;
              goto LABEL_53;
            }
            if ((unint64_t)(v5 - v41 - v36) < 0x20)
            {
              v44 = v5;
              goto LABEL_53;
            }
            v46 = (v43 >> 2) + 1;
            v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            v44 = &v5[-v47];
            v42 = (_DWORD *)((char *)v42 - v47);
            v48 = &v41[4 * v37 - 16];
            v49 = v5 - 16;
            v50 = v46 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_53:
                v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *--v42 = v45;
              }
              while (v44 != v35);
            }
          }
          else
          {
            v41 = 0;
            v42 = (_DWORD *)(4 * v37);
            *(_DWORD *)(4 * v37) = v8;
            v9 = 4 * v37 + 4;
            if (v5 != v35)
              goto LABEL_51;
          }
LABEL_54:
          v4[118] = v42;
          v4[119] = v9;
          v4[120] = &v41[4 * v40];
          if (v35)
          {
            operator delete(v35);
            v4 = a1;
          }
          a2 = (_QWORD *)v195;
          goto LABEL_4;
        }
      }
      else
      {
        v22 = 0;
        v23 = (_QWORD *)(8 * v18);
        *(_QWORD *)(8 * v18) = v11;
        v24 = 8 * v18 + 8;
        if (v12 == v16)
          goto LABEL_37;
      }
      v26 = v12 - 8 - v16;
      if (v26 < 0x58)
        goto LABEL_240;
      if ((unint64_t)(v12 - &v22[v17]) < 0x20)
        goto LABEL_240;
      v27 = (v26 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v12[-v28];
      v23 = (_QWORD *)((char *)v23 - v28);
      v30 = &v22[8 * v18 - 16];
      v31 = v12 - 16;
      v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 4;
      }
      while (v32);
      v12 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_240:
        do
        {
          v34 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v23 = v34;
        }
        while (v12 != v16);
      }
      goto LABEL_37;
    }
LABEL_5:
    ++v8;
  }
  while (v8 < (int)((unint64_t)(v6 - v7) >> 2));
  if ((unint64_t)(v5 - (_BYTE *)*v204) < 8)
    return 1;
  v52 = v4[121];
  v53 = (char *)v4[122];
  v54 = 126 - 2 * __clz((uint64_t)&v53[-v52] >> 3);
  if (v53 == (char *)v52)
    v55 = 0;
  else
    v55 = v54;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v52, v53, (uint64_t)v211, v55, 1);
  v56 = a1;
  v57 = (char *)a1[121];
  v58 = (char *)a1[122];
  if (v57 != v58)
  {
    v59 = v57 + 8;
    while (v59 != v58)
    {
      v60 = *((_QWORD *)v59 - 1);
      v61 = *(_QWORD *)v59;
      v59 += 8;
      if (v60 == v61)
      {
        v62 = v59 - 16;
        while (v59 != v58)
        {
          v63 = v60;
          v60 = *(_QWORD *)v59;
          if (v63 != *(_QWORD *)v59)
          {
            *((_QWORD *)v62 + 1) = v60;
            v62 += 8;
          }
          v59 += 8;
        }
        v65 = v62 + 8;
        v66 = v58 - (v62 + 8);
        if (v58 == v62 + 8)
          break;
        if (v58 != (char *)v65 + v66)
        {
          memmove(v62 + 8, (char *)v65 + v66, 0);
          v56 = a1;
        }
        v64 = v65;
        v56[122] = v65;
        goto LABEL_88;
      }
    }
  }
  v64 = (_QWORD *)a1[122];
LABEL_88:
  v67 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v56 + 124);
  v68 = ((uint64_t)v64 - v56[121]) >> 3;
  v69 = v56[125];
  v70 = v56[124];
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3);
  if (v68 <= v71)
  {
    if (v68 < v71)
    {
      v72 = v70 + 24 * v68;
      if (v69 != v72)
      {
        v73 = v56[125];
        do
        {
          v75 = *(void **)(v73 - 24);
          v73 -= 24;
          v74 = v75;
          if (v75)
          {
            *(_QWORD *)(v69 - 16) = v74;
            operator delete(v74);
            v56 = a1;
          }
          v69 = v73;
        }
        while (v73 != v72);
      }
      v56[125] = v72;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)(v56 + 124), v68 - v71);
    v56 = a1;
  }
  v76 = (_QWORD *)v56[122];
  v77 = (uint64_t)v76 - v56[121];
  if (v77)
  {
    v78 = v77 >> 3;
    v79 = *(_QWORD *)v67;
    if (v78 <= 1)
      v78 = 1;
    if (v78 < 2)
    {
      v80 = 0;
      goto LABEL_105;
    }
    v80 = v78 & 0xFFFFFFFFFFFFFFFELL;
    v81 = (uint64_t *)(v79 + 24);
    v82 = v78 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v83 = *v81;
      *(v81 - 2) = *(v81 - 3);
      v81[1] = v83;
      v81 += 6;
      v82 -= 2;
    }
    while (v82);
    if (v78 != v80)
    {
LABEL_105:
      v84 = (_QWORD *)(v79 + 24 * v80 + 8);
      v85 = v78 - v80;
      do
      {
        *v84 = *(v84 - 1);
        v84 += 3;
        --v85;
      }
      while (v85);
    }
  }
  v197 = (int *)v56[119];
  v199 = (int *)v56[118];
  if (v199 != v197)
  {
    v86 = *__s2;
    v87 = v76;
    v201 = v67;
    while (v87 == v86)
    {
      v87 = v86;
LABEL_110:
      if (++v199 == v197)
        goto LABEL_139;
    }
    v88 = 0;
    __s2a = (void *)*v199;
    v89 = *(_QWORD *)(v194[1] + 40);
    v90 = -*(_QWORD *)(v89 + 12 * (*(_DWORD *)(v194[4] + 4 * (_QWORD)__s2a) ^ 1));
    v91 = *(_QWORD *)(v89 + 12 * *(int *)(v194[7] + 4 * (_QWORD)__s2a));
    v202 = v91;
    v205 = v90;
    while (2)
    {
      v93 = v86[v88];
      if (v93 < v90)
        goto LABEL_115;
      if (v93 >= v91)
        goto LABEL_110;
      v94 = *(_QWORD *)v67 + 24 * v88;
      v96 = (uint64_t *)(v94 + 8);
      v95 = *(char **)(v94 + 8);
      v97 = *(_QWORD *)(v94 + 16);
      if ((unint64_t)v95 < v97)
      {
        *(_DWORD *)v95 = (_DWORD)__s2a;
        v92 = (uint64_t)(v95 + 4);
        goto LABEL_114;
      }
      v98 = *(char **)v94;
      v99 = (uint64_t)&v95[-*(_QWORD *)v94];
      v100 = v99 >> 2;
      v101 = (v99 >> 2) + 1;
      if (v101 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v102 = v97 - (_QWORD)v98;
      if (v102 >> 1 > v101)
        v101 = v102 >> 1;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
        v103 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        if (v103 >> 62)
          goto LABEL_231;
        v104 = operator new(4 * v103);
        v56 = a1;
        v105 = &v104[4 * v100];
        *v105 = (_DWORD)__s2a;
        v92 = (uint64_t)(v105 + 1);
        if (v95 == v98)
        {
LABEL_136:
          *(_QWORD *)v94 = v105;
          *v96 = v92;
          *(_QWORD *)(v94 + 16) = &v104[4 * v103];
          if (v98)
          {
            operator delete(v98);
            v56 = a1;
          }
          v67 = v201;
          v91 = v202;
          v90 = v205;
LABEL_114:
          *v96 = v92;
          v76 = (_QWORD *)v56[122];
          v86 = (_QWORD *)v56[121];
LABEL_115:
          ++v88;
          v87 = v76;
          if (v88 >= v76 - v86)
            goto LABEL_110;
          continue;
        }
      }
      else
      {
        v104 = 0;
        v105 = (_DWORD *)(4 * v100);
        *(_DWORD *)(4 * v100) = (_DWORD)__s2a;
        v92 = 4 * v100 + 4;
        if (v95 == v98)
          goto LABEL_136;
      }
      break;
    }
    v106 = v95 - 4 - v98;
    if (v106 < 0x2C)
      goto LABEL_241;
    if ((unint64_t)(v95 - &v104[v99]) < 0x20)
      goto LABEL_241;
    v107 = (v106 >> 2) + 1;
    v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
    v109 = &v95[-v108];
    v105 = (_DWORD *)((char *)v105 - v108);
    v110 = &v104[4 * v100 - 16];
    v111 = v95 - 16;
    v112 = v107 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v113 = *(_OWORD *)v111;
      *(v110 - 1) = *((_OWORD *)v111 - 1);
      *v110 = v113;
      v110 -= 2;
      v111 -= 32;
      v112 -= 8;
    }
    while (v112);
    v95 = v109;
    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_241:
      do
      {
        v114 = *((_DWORD *)v95 - 1);
        v95 -= 4;
        *--v105 = v114;
      }
      while (v95 != v98);
    }
    goto LABEL_136;
  }
LABEL_139:
  v115 = (uint64_t *)v56[124];
  v116 = (uint64_t *)v56[125];
  if (v115 == v116)
  {
    v117 = 0;
  }
  else
  {
    v117 = 0;
    do
    {
      v122 = *v115;
      v123 = v115[1];
      if ((unint64_t)(v123 - *v115) >= 8)
      {
        v124 = *(_QWORD *)v67;
        if (v117 >= 1)
        {
          v125 = v124 + 24 * (v117 - 1);
          v126 = *(_DWORD **)v125;
          v127 = *(_DWORD **)(v125 + 8);
          v128 = v126 == v127;
          if (v122 == v123 || v126 == v127)
          {
LABEL_141:
            if (v128)
              --v117;
          }
          else
          {
            v130 = v122 + 4;
            while (1)
            {
              v131 = *(_DWORD *)(v130 - 4);
              if (*v126 < v131)
                break;
              v126 += v131 >= *v126;
              v128 = v126 == v127;
              v132 = v126 == v127 || v130 == v123;
              v130 += 4;
              if (v132)
                goto LABEL_141;
            }
          }
        }
        v118 = (uint64_t *)(v124 + 24 * v117);
        v119 = *v118;
        *v118 = v122;
        *v115 = v119;
        v120 = v118[1];
        v118[1] = v115[1];
        v115[1] = v120;
        v121 = v118[2];
        v118[2] = v115[2];
        v115[2] = v121;
        ++v117;
      }
      v115 += 3;
    }
    while (v115 != v116);
  }
  v56[134] = v56[133];
  v133 = v56[130];
  if (v133 < 0x80)
  {
    if (v133)
    {
      v56[129] = 0;
      memset((void *)v56[127], 128, v133 + 8);
      v56 = a1;
      *(_BYTE *)(a1[127] + a1[130]) = -1;
      v133 = a1[130];
      v134 = v133 - (v133 >> 3);
      if (v133 == 7)
        v134 = 6;
      a1[132] = v134 - a1[129];
    }
  }
  else
  {
    operator delete((void *)v56[127]);
    v56 = a1;
    v133 = 0;
    a1[127] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a1[132] = 0;
    a1[128] = 0;
    a1[130] = 0;
    a1[129] = 0;
  }
  v135 = (unint64_t *)v56[131];
  v136 = (_QWORD *)v195;
  if (v135)
  {
    v135[1] = 0;
    *v135 = v133;
    v135[4] = 0;
    v135[2] = 0;
    if (v117 >= 1)
      goto LABEL_168;
  }
  else if (v117 >= 1)
  {
LABEL_168:
    v137 = 0;
    v196 = (absl::lts_2020_02_25::hash_internal ***)(v56 + 133);
    v198 = v56 + 127;
    v191 = (int ***)(v56 + 136);
    v190 = v117;
    while (1)
    {
      v193 = v137;
      v56 = a1;
      v138 = (absl::lts_2020_02_25::hash_internal **)a1[136];
      v203 = (absl::lts_2020_02_25::hash_internal **)a1[137];
      if (v138 != v203)
        break;
LABEL_169:
      v137 = v193 + 1;
      v136 = (_QWORD *)v195;
      if (v193 + 1 == v190)
        goto LABEL_210;
    }
    while (2)
    {
      v160 = *v138;
      v161 = v138[1];
      v162 = 4 * (_QWORD)v161;
      __s2b = *v138;
      if ((unint64_t)(4 * (_QWORD)v161) < 0x11)
      {
        if (v162 < 9)
        {
          if (!v162)
          {
            v165 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
            goto LABEL_206;
          }
          v163 = ((unint64_t)*(unsigned int *)((char *)v160 + v162 - 4) << (32 * v161 - 32)) | *(unsigned int *)v160;
          v164 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
        }
        else
        {
          v163 = *(_QWORD *)((char *)v160 + v162 - 8) >> (-32 * v161);
          v164 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                + *(_QWORD *)v160)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + *(_QWORD *)v160)));
        }
LABEL_205:
        v165 = (_UNKNOWN **)(((((unint64_t)v164 + v163) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v164 + v163)));
      }
      else
      {
        if (v162 < 0x401)
        {
          v163 = absl::lts_2020_02_25::hash_internal::CityHash64(v160, 4 * (_QWORD)v161);
          v164 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
          v56 = a1;
          goto LABEL_205;
        }
        v165 = (_UNKNOWN **)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v160, (char *)(4 * (_QWORD)v161));
        v56 = a1;
      }
LABEL_206:
      v145 = 0;
      v206 = v161;
      v166 = ((((unint64_t)v161 + (unint64_t)v165) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((unint64_t)v161 + (_QWORD)v165));
      v167 = v56[127];
      v146 = (v166 >> 7) ^ (v167 >> 12);
      v168 = v56[130];
      while (1)
      {
        v139 = v146 & v168;
        v140 = *(_QWORD *)(v167 + (v146 & v168));
        v141 = ((v140 ^ (0x101010101010101 * (v166 & 0x7F))) - 0x101010101010101) & ~(v140 ^ (0x101010101010101
                                                                                                * (v166 & 0x7F))) & 0x8080808080808080;
        if (v141)
        {
          v142 = v56[128];
          v200 = v145;
          do
          {
            v143 = v142 + 16 * ((v139 + (__clz(__rbit64(v141)) >> 3)) & v168);
            if (v162 == 4 * *(_QWORD *)(v143 + 8))
            {
              v144 = memcmp(*(const void **)v143, __s2b, v162);
              v56 = a1;
              if (!v144)
                goto LABEL_197;
            }
            v141 &= v141 - 1;
            v145 = v200;
          }
          while (v141);
        }
        if ((v140 & (~v140 << 6) & 0x8080808080808080) != 0)
          break;
        v145 += 8;
        v146 = v145 + v139;
      }
      v147 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::prepare_insert(v198, v166);
      v56 = a1;
      v148 = (absl::lts_2020_02_25::hash_internal **)(a1[128] + 16 * v147);
      *v148 = __s2b;
      v148[1] = v206;
      v149 = (absl::lts_2020_02_25::hash_internal **)a1[134];
      v150 = a1[135];
      if ((unint64_t)v149 < v150)
      {
        *v149 = __s2b;
        v149[1] = v206;
        v151 = v149 + 2;
        goto LABEL_196;
      }
      v152 = *v196;
      v153 = ((char *)v149 - (char *)*v196) >> 4;
      v154 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v155 = v150 - (_QWORD)v152;
      if (v155 >> 3 > v154)
        v154 = v155 >> 3;
      if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0)
        v156 = 0xFFFFFFFFFFFFFFFLL;
      else
        v156 = v154;
      if (v156)
      {
        if (!(v156 >> 60))
        {
          v157 = (char *)operator new(16 * v156);
          v56 = a1;
          v158 = (absl::lts_2020_02_25::hash_internal **)&v157[16 * v153];
          *v158 = __s2b;
          v158[1] = v206;
          v159 = (uint64_t)v158;
          if (v149 == v152)
            goto LABEL_194;
          goto LABEL_192;
        }
LABEL_231:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v157 = 0;
      v158 = (absl::lts_2020_02_25::hash_internal **)(16 * v153);
      *v158 = __s2b;
      v158[1] = v206;
      v159 = 16 * v153;
      if (v149 == v152)
        goto LABEL_194;
      do
      {
LABEL_192:
        *(_OWORD *)(v159 - 16) = *((_OWORD *)v149 - 1);
        v159 -= 16;
        v149 -= 2;
      }
      while (v149 != v152);
      v149 = *v196;
LABEL_194:
      v56[133] = v159;
      v151 = v158 + 2;
      v56[134] = v158 + 2;
      v56[135] = &v157[16 * v156];
      if (v149)
      {
        operator delete(v149);
        v56 = a1;
      }
LABEL_196:
      v56[134] = v151;
LABEL_197:
      v138 += 2;
      if (v138 == v203)
        goto LABEL_169;
      continue;
    }
  }
LABEL_210:
  v169 = v56[133];
  v170 = v56[134];
  if (v169 == v170)
    return 1;
  v171 = (std::vector<int> *)(v56 + 3);
  v172 = (std::vector<int> *)(v56 + 59);
  do
  {
    v173 = *(int **)v169;
    v174 = *(_QWORD *)(v169 + 8);
    operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(v171, v195, *(int **)v169, v174);
    operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(v172, (uint64_t)v194, v173, v174);
    v213 = 0x7FFFFFFFFFFFFFFFLL;
    v214 = 0x8000000000000000;
    v175 = (int *)a1[63];
    v176 = a1[64] - (_QWORD)v175;
    if ((int)(v176 >> 2) <= 0)
    {
      v181 = 0x8000000000000000;
      v180 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v177 = *(_QWORD *)(a1[60] + 40);
      v178 = (int *)a1[66];
      v179 = (v176 >> 2);
      v180 = 0x7FFFFFFFFFFFFFFFLL;
      v181 = 0x8000000000000000;
      do
      {
        v182 = *v175++;
        v183 = *(_QWORD *)(v177 + 12 * (v182 ^ 1));
        if (v181 <= -v183)
          v181 = -v183;
        v214 = v181;
        v184 = *v178++;
        v185 = *(_QWORD *)(v177 + 12 * v184) - 1;
        if (v185 < v180)
          v180 = v185;
        v213 = v180;
        --v179;
      }
      while (v179);
      if (v181 > v180)
      {
        v212 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v214, (int)&v213, "lb <= ub");
        if (v212)
        {
          google::LogMessageFatal::LogMessageFatal(v211, (google::glog_internal_namespace_ *)"./ortools/sat/diffn.cc", 396, &v212);
          google::LogMessage::stream((google::LogMessage *)v211);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v211);
        }
        v180 = v213;
        v181 = v214;
      }
    }
    a1[54] = v172;
    a1[55] = CanonicalValue;
    v187 = *(_QWORD *)(a4 + 24);
    if (!v187)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v187 + 48))(v187);
    v169 += 16;
    if ((_DWORD)result)
      v189 = v169 == v170;
    else
      v189 = 1;
  }
  while (!v189);
  return result;
}

void sub_22DB3E914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::`anonymous namespace'::FindCanonicalValue(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  int v4;
  int64_t v5;

  if (result != a2)
  {
    if (result > 0)
      goto LABEL_3;
    if (a2 > 0)
      return 0;
    if (result < 0)
    {
    }
    else
    {
LABEL_3:
      v2 = a2 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(a2 & 0xFFFFFFFFFFFFFFFELL) >= result)
      {
        v3 = 0;
        v4 = 62;
        while (--v4)
        {
          v3 = (2 * v3) | 2;
          v5 = v2;
          v2 = (v3 ^ 0xFFFFFFFFFFFFFFFELL) & a2;
          if (v2 < result)
            return v5;
        }
        return v2;
      }
      else
      {
        return a2;
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  uint64_t (***v2)();
  operations_research::sat::SchedulingConstraintHelper *v3;
  operations_research::sat::SchedulingConstraintHelper *v4;
  _QWORD *v5;
  char MustOverlapAHorizontalLineAndPropagate;
  _QWORD *v7;
  uint64_t v8;
  operations_research::sat::SchedulingConstraintHelper *v9;
  operations_research::sat::SchedulingConstraintHelper *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t (**v24)();
  operations_research::sat::SchedulingConstraintHelper **v25;
  uint64_t (***v26)();
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[1], 1);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[2], 1);
  v23 = 0;
  if (*((_DWORD *)this[116] + 128) == *((_DWORD *)this + 234))
  {
    v24 = &off_24F985B70;
    v25 = this;
    v26 = &v24;
    std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v24, v22);
    v2 = v26;
    if (v26 != &v24)
    {
      if (!v26)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v24 = &off_24F985BF0;
    v25 = this;
    v26 = &v24;
    std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v24, v22);
    v2 = v26;
    if (v26 != &v24)
    {
      if (!v26)
      {
LABEL_4:
        v3 = this[1];
        v4 = this[2];
        v5 = v23;
        if (!v23)
          goto LABEL_13;
        goto LABEL_11;
      }
LABEL_8:
      ((void (*)(uint64_t (***)()))(*v2)[5])(v2);
      v3 = this[1];
      v4 = this[2];
      v5 = v23;
      if (!v23)
        goto LABEL_13;
      goto LABEL_11;
    }
  }
  v24[4]();
  v3 = this[1];
  v4 = this[2];
  v5 = v23;
  if (!v23)
  {
LABEL_13:
    v21 = v5;
    goto LABEL_15;
  }
LABEL_11:
  if (v5 != v22)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    goto LABEL_13;
  }
  v21 = v20;
  (*(void (**)(_QWORD *, _BYTE *))(v22[0] + 24))(v22, v20);
LABEL_15:
  MustOverlapAHorizontalLineAndPropagate = operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(this, v3, v4, (uint64_t)v20);
  v7 = v21;
  if (v21 == v20)
  {
    v8 = 4;
    v7 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  if ((MustOverlapAHorizontalLineAndPropagate & 1) == 0)
  {
    v12 = 0;
    goto LABEL_32;
  }
  v10 = this[1];
  v9 = this[2];
  v11 = (uint64_t)v23;
  if (!v23)
    goto LABEL_24;
  if (v23 != v22)
  {
    v11 = (*(uint64_t (**)(void))(*v23 + 16))();
LABEL_24:
    v19 = (_BYTE *)v11;
    goto LABEL_27;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _BYTE *))(v22[0] + 24))(v22, v18);
LABEL_27:
  v12 = operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(this, v9, v10, (uint64_t)v18);
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_32;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_32:
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
    goto LABEL_36;
  }
  if (v23)
  {
    v16 = 5;
LABEL_36:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  return v12;
}

void sub_22DB3EC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a21;
  if (a21 == &a18)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  void **v10;
  int v12;
  int v13;

  v1 = (int *)*((_QWORD *)this + 10);
  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
  v3 = *(_QWORD *)(v2 + 12 * *v1);
  v4 = -*(_QWORD *)(v2 + 12 * (*(_DWORD *)(*((_QWORD *)this + 7) + 4) ^ 1));
  v5 = v3 + *(_QWORD *)(v2 + 12 * (*(_DWORD *)(*((_QWORD *)this + 7) + 4) ^ 1)) < 0;
  v6 = *(_QWORD *)(v2 + 12 * v1[1]);
  v7 = *(_QWORD *)(v2 + 12 * (**((_DWORD **)this + 7) ^ 1));
  if (v5 ^ __OFSUB__(v3, v4) | (v3 == v4))
    v8 = 1;
  else
    v8 = 0;
  v9 = v8 | (2 * (v6 <= -v7));
  if (v9 == 2)
  {
    v12 = 1;
    v13 = 0;
    return operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(this, v12, v13);
  }
  if (v9 == 1)
  {
    v12 = 0;
    v13 = 1;
    return operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(this, v12, v13);
  }
  if (v9)
    return 1;
  v10 = (void **)((char *)this + 24);
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24));
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v10, 0, 1);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v10, 1, 0);
  return operations_research::sat::SchedulingConstraintHelper::ReportConflict((operations_research::sat::SchedulingConstraintHelper *)v10);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(_QWORD *a1, int a2, int a3)
{
  void **v5;
  int v6;
  uint64_t v7;
  int64_t v8;
  int v9;
  uint64_t result;
  uint64_t v12;
  int64_t v13;

  v5 = (void **)(a1 + 3);
  v6 = *(_DWORD *)(a1[10] + 4 * a2);
  v7 = *(_QWORD *)(a1[4] + 40);
  v8 = *(_QWORD *)(v7 + 12 * v6);
  v9 = *(_DWORD *)(a1[7] + 4 * a3);
  if (v8 > *(_QWORD *)(v7 + 12 * v9))
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)(a1 + 3));
    operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v5, a2, a3);
    operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(v5, a2, v8);
    result = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin((uint64_t)v5, a3, v8);
    if (!(_DWORD)result)
      return result;
    v9 = *(_DWORD *)(a1[7] + 4 * a3);
    v7 = *(_QWORD *)(a1[4] + 40);
    v6 = *(_DWORD *)(a1[10] + 4 * a2);
  }
  v12 = *(_QWORD *)(v7 + 12 * (v9 ^ 1));
  if (*(_QWORD *)(v7 + 12 * (v6 ^ 1)) >= v12)
    return 1;
  v13 = -v12;
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v5);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v5, a2, a3);
  operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason((operations_research::sat::SchedulingConstraintHelper *)v5, a3, v13);
  result = operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax((uint64_t)v5, a2, v13);
  if ((_DWORD)result)
    return 1;
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  BOOL v79;
  uint64_t v80;
  int *v81;
  int *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  int *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  int v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int64_t v139;
  int *v140;
  int v141;
  int *v142;
  int *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v90 = *(a2 - 1);
        v91 = *v10;
        v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
        if (*(_QWORD *)(v92 + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4 * v90)) < *(_QWORD *)(v92 + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4 * v91)))
        {
          *v10 = v90;
          *(a2 - 1) = v91;
        }
        return result;
      case 3:
        v93 = *(_QWORD *)(*(_QWORD *)a3 + 32);
        v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
        v95 = *v10;
        v96 = v10[1];
        v97 = *(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * v96));
        v98 = *(a2 - 1);
        v99 = *(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * v98));
        if (v97 >= *(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * *v10)))
        {
          if (v99 < v97)
          {
            v10[1] = v98;
            *(a2 - 1) = v96;
            v154 = *v10;
            v153 = v10[1];
            if (*(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * v153)) < *(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * v154)))
            {
              *v10 = v153;
              v10[1] = v154;
            }
          }
        }
        else
        {
          if (v99 >= v97)
          {
            *v10 = v96;
            v10[1] = v95;
            v160 = *(a2 - 1);
            if (*(_QWORD *)(v94 + 12 * *(int *)(v93 + 4 * v160)) >= *(_QWORD *)(v94 + 12
                                                                                       * *(int *)(v93 + 4 * v95)))
              return result;
            v10[1] = v160;
          }
          else
          {
            *v10 = v98;
          }
          *(a2 - 1) = v95;
        }
        return result;
      case 4:
      case 5:
        v100 = v10 + 2;
        v101 = v10 + 3;
        v102 = *(a2 - 1);
        v103 = v9[3];
        v104 = *(_QWORD *)(*(_QWORD *)a3 + 32);
        v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
        if (*(_QWORD *)(v105 + 12 * *(int *)(v104 + 4 * v102)) < *(_QWORD *)(v105 + 12 * *(int *)(v104 + 4 * v103)))
        {
          *v101 = v102;
          *(a2 - 1) = v103;
          v106 = *v101;
          v107 = *v100;
          if (*(_QWORD *)(v105 + 12 * *(int *)(v104 + 4 * *v101)) < *(_QWORD *)(v105
                                                                                   + 12 * *(int *)(v104 + 4 * v107)))
          {
            *v100 = v106;
            *v101 = v107;
            v108 = v9[1];
            if (*(_QWORD *)(v105 + 12 * *(int *)(v104 + 4 * v106)) < *(_QWORD *)(v105
                                                                                    + 12 * *(int *)(v104 + 4 * v108)))
            {
              v9[1] = v106;
              v9[2] = v108;
              v109 = *v9;
              if (*(_QWORD *)(v105 + 12 * *(int *)(v104 + 4 * v106)) < *(_QWORD *)(v105
                                                                                      + 12 * *(int *)(v104 + 4 * v109)))
              {
                *v9 = v106;
                v9[1] = v109;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v121 = (unint64_t)(v12 - 2) >> 1;
              v122 = *(_QWORD *)a3;
              v123 = v121;
              do
              {
                v124 = v123;
                if (v121 >= v123)
                {
                  v125 = (2 * v123) | 1;
                  v126 = &v10[v125];
                  v127 = *v126;
                  if (2 * v124 + 2 >= v12)
                  {
                    v128 = *(_QWORD *)(v122 + 32);
                    v129 = *(_QWORD *)(*(_QWORD *)(v122 + 8) + 40);
                  }
                  else
                  {
                    v128 = *(_QWORD *)(v122 + 32);
                    v129 = *(_QWORD *)(*(_QWORD *)(v122 + 8) + 40);
                    if (*(_QWORD *)(v129 + 12 * *(int *)(v128 + 4 * v127)) < *(_QWORD *)(v129
                                                                                            + 12
                                                                                            * *(int *)(v128 + 4 * v126[1])))
                    {
                      v127 = v126[1];
                      ++v126;
                      v125 = 2 * v124 + 2;
                    }
                  }
                  v130 = &v10[v124];
                  v131 = *v130;
                  if (*(_QWORD *)(v129 + 12 * *(int *)(v128 + 4 * v127)) >= *(_QWORD *)(v129
                                                                                           + 12
                                                                                           * *(int *)(v128 + 4 * *v130)))
                  {
                    do
                    {
                      v132 = v126;
                      *v130 = v127;
                      if (v121 < v125)
                        break;
                      v133 = (2 * v125) | 1;
                      v126 = &v10[v133];
                      v125 = 2 * v125 + 2;
                      v127 = *v126;
                      if (v125 < v12)
                      {
                        if (*(_QWORD *)(v129 + 12 * *(int *)(v128 + 4 * v127)) >= *(_QWORD *)(v129
                                                                                                 + 12
                                                                                                 * *(int *)(v128 + 4 * v126[1])))
                        {
                          v125 = v133;
                        }
                        else
                        {
                          v127 = v126[1];
                          ++v126;
                        }
                      }
                      else
                      {
                        v125 = v133;
                      }
                      v130 = v132;
                    }
                    while (*(_QWORD *)(v129 + 12 * *(int *)(v128 + 4 * v127)) >= *(_QWORD *)(v129
                                                                                                + 12
                                                                                                * *(int *)(v128 + 4 * v131)));
                    *v132 = v131;
                    v122 = *(_QWORD *)a3;
                  }
                }
                v123 = v124 - 1;
              }
              while (v124);
              v134 = (unint64_t)v11 >> 2;
              do
              {
                v136 = 0;
                v137 = *v10;
                v138 = *(_QWORD *)a3;
                v139 = (unint64_t)(v134 - 2) >> 1;
                v140 = v10;
                do
                {
                  while (1)
                  {
                    v143 = &v140[v136];
                    v144 = v143[1];
                    v142 = v143 + 1;
                    v141 = v144;
                    result = (int *)(2 * v136);
                    v145 = (2 * v136) | 1;
                    v136 = 2 * v136 + 2;
                    if (v136 < v134)
                      break;
                    v136 = v145;
                    *v140 = v141;
                    v140 = v142;
                    if (v145 > v139)
                      goto LABEL_151;
                  }
                  result = v142 + 1;
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) + 40)
                                 + 12 * *(int *)(*(_QWORD *)(v138 + 32) + 4 * v141)) >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) + 40) + 12 * *(int *)(*(_QWORD *)(v138 + 32) + 4 * v142[1])))
                  {
                    v136 = v145;
                  }
                  else
                  {
                    v141 = v142[1];
                    ++v142;
                  }
                  *v140 = v141;
                  v140 = v142;
                }
                while (v136 <= v139);
LABEL_151:
                if (v142 == --a2)
                {
                  *v142 = v137;
                }
                else
                {
                  *v142 = *a2;
                  *a2 = v137;
                  v146 = (char *)v142 - (char *)v10 + 4;
                  if (v146 >= 5)
                  {
                    v147 = (((unint64_t)v146 >> 2) - 2) >> 1;
                    v148 = &v10[v147];
                    result = (int *)*v148;
                    v149 = *v142;
                    v150 = *(_QWORD *)(*(_QWORD *)a3 + 32);
                    v151 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
                    if (*(_QWORD *)(v151 + 12 * *(int *)(v150 + 4 * (_QWORD)result)) < *(_QWORD *)(v151 + 12 * *(int *)(v150 + 4 * *v142)))
                    {
                      do
                      {
                        v152 = v148;
                        *v142 = (int)result;
                        if (!v147)
                          break;
                        v147 = (v147 - 1) >> 1;
                        v148 = &v10[v147];
                        result = (int *)*v148;
                        v142 = v152;
                      }
                      while (*(_QWORD *)(v151 + 12 * *(int *)(v150 + 4 * (_QWORD)result)) < *(_QWORD *)(v151 + 12 * *(int *)(v150 + 4 * v149)));
                      *v152 = v149;
                    }
                  }
                }
              }
              while (v134-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *(_QWORD *)(*(_QWORD *)a3 + 32);
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
          v17 = *(a2 - 1);
          v18 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v17));
          if ((unint64_t)v11 < 0x201)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v22));
            if (v24 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *v14)))
            {
              if (v18 < v24)
              {
                *v10 = v17;
                *(a2 - 1) = v22;
                v27 = *v10;
                v28 = *v14;
                if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v27)) < *(_QWORD *)(v16 + 12
                                                                                         * *(int *)(v15 + 4 * v28)))
                {
                  *v14 = v27;
                  *v10 = v28;
                  --a4;
                  v29 = v28;
                  v30 = (int)v28;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v18 >= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v42 = *(a2 - 1);
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v42)) >= *(_QWORD *)(v16
                                                                                  + 12 * *(int *)(v15 + 4 * v23)))
                goto LABEL_32;
              *v10 = v42;
            }
            else
            {
              *v14 = v17;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v29 = *v10;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v19 = *v14;
          v20 = *v10;
          v21 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v19));
          if (v21 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *v10)))
          {
            if (v18 < v21)
            {
              *v14 = v17;
              *(a2 - 1) = v19;
              v25 = *v14;
              v26 = *v10;
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v25)) < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v26)))
              {
                *v10 = v25;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v18 >= v21)
            {
              *v10 = v19;
              *v14 = v20;
              v31 = *(a2 - 1);
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v31)) >= *(_QWORD *)(v16
                                                                                  + 12 * *(int *)(v15 + 4 * v20)))
                goto LABEL_23;
              *v14 = v31;
            }
            else
            {
              *v10 = v17;
            }
            *(a2 - 1) = v20;
          }
LABEL_23:
          v32 = &v10[v13];
          v35 = *(v32 - 1);
          v33 = v32 - 1;
          v34 = v35;
          v36 = v10[1];
          v37 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v35));
          v38 = *(a2 - 2);
          v39 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v38));
          if (v37 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v36)))
          {
            if (v39 < v37)
            {
              *v33 = v38;
              *(a2 - 2) = v34;
              v40 = *v33;
              v41 = v10[1];
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v40)) < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v41)))
              {
                v10[1] = v40;
                *v33 = v41;
              }
            }
          }
          else
          {
            if (v39 >= v37)
            {
              v10[1] = v34;
              *v33 = v36;
              v43 = *(a2 - 2);
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v43)) >= *(_QWORD *)(v16
                                                                                  + 12 * *(int *)(v15 + 4 * v36)))
                goto LABEL_37;
              *v33 = v43;
            }
            else
            {
              v10[1] = v38;
            }
            *(a2 - 2) = v36;
          }
LABEL_37:
          v44 = &v10[v13];
          v47 = v44[1];
          v45 = v44 + 1;
          v46 = v47;
          v48 = v10[2];
          v49 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v47));
          v50 = *(a2 - 3);
          v51 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v50));
          if (v49 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v48)))
          {
            if (v51 < v49)
            {
              *v45 = v50;
              *(a2 - 3) = v46;
              v52 = *v45;
              v53 = v10[2];
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v52)) < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v53)))
              {
                v10[2] = v52;
                *v45 = v53;
              }
            }
          }
          else
          {
            if (v51 >= v49)
            {
              v10[2] = v46;
              *v45 = v48;
              v54 = *(a2 - 3);
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v54)) >= *(_QWORD *)(v16
                                                                                  + 12 * *(int *)(v15 + 4 * v48)))
                goto LABEL_46;
              *v45 = v54;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v48;
          }
LABEL_46:
          v55 = *v14;
          v56 = *v33;
          v57 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v55));
          v58 = *v45;
          result = (int *)*v45;
          v59 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * (_QWORD)result));
          if (v57 < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *v33)))
          {
            if (v59 >= v57)
            {
              *v33 = v55;
              *v14 = v56;
              v33 = v14;
              LODWORD(v55) = v58;
              if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v58)) >= *(_QWORD *)(v16
                                                                                    + 12 * *(int *)(v15 + 4 * v56)))
              {
                LODWORD(v55) = v56;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v33 = v58;
            *v45 = v56;
            goto LABEL_53;
          }
          if (v59 >= v57)
            goto LABEL_53;
          *v14 = v58;
          *v45 = v55;
          v45 = v14;
          LODWORD(v55) = v56;
          if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v58)) < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v56)))
            goto LABEL_52;
          LODWORD(v55) = v58;
LABEL_53:
          v60 = *v10;
          *v10 = v55;
          *v14 = v60;
          --a4;
          v29 = *v10;
          v30 = *v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v61 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v30));
          if (*(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *(v10 - 1))) >= v61)
          {
            if (v61 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *(a2 - 1))))
            {
              v81 = v10 + 1;
              do
              {
                v10 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v61 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * *v10)));
            }
            else
            {
              do
              {
                v80 = v10[1];
                ++v10;
              }
              while (v61 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v80)));
            }
            v82 = a2;
            if (v10 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v61 < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v83)));
            }
            if (v10 < v82)
            {
              v84 = *v10;
              v85 = *v82;
              do
              {
                *v10 = v85;
                *v82 = v84;
                v86 = *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v30));
                do
                {
                  v87 = v10[1];
                  ++v10;
                  v84 = v87;
                }
                while (v86 >= *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v87)));
                do
                {
                  v88 = *--v82;
                  v85 = v88;
                }
                while (v86 < *(_QWORD *)(v16 + 12 * *(int *)(v15 + 4 * v88)));
              }
              while (v10 < v82);
            }
            v89 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v89;
            a5 = 0;
            *v89 = v29;
            continue;
          }
LABEL_55:
          v62 = 0;
          v63 = *(_QWORD *)(*(_QWORD *)a3 + 32);
          v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
          v65 = *(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v30));
          do
            v66 = v10[++v62];
          while (*(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v66)) < v65);
          v67 = &v10[v62];
          v68 = a2;
          if (v62 == 1)
          {
            v68 = a2;
            do
            {
              if (v67 >= v68)
                break;
              v70 = *--v68;
            }
            while (*(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v70)) >= v65);
          }
          else
          {
            do
              v69 = *--v68;
            while (*(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v69)) >= v65);
          }
          if (v67 < v68)
          {
            v71 = *v68;
            v72 = v66;
            v73 = v67;
            v74 = v68;
            do
            {
              *v73 = v71;
              *v74 = v72;
              v75 = *(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v30));
              do
              {
                v76 = v73[1];
                ++v73;
                v72 = v76;
              }
              while (*(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v76)) < v75);
              do
              {
                v77 = *--v74;
                v71 = v77;
              }
              while (*(_QWORD *)(v64 + 12 * *(int *)(v63 + 4 * v77)) >= v75);
            }
            while (v73 < v74);
            v78 = v73 - 1;
            if (v73 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v78;
            goto LABEL_73;
          }
          v78 = v67 - 1;
          if (v67 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v78 = v29;
          if (v67 < v68)
            goto LABEL_76;
          v10 = v78 + 1;
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_76:
            a5 = 0;
            v10 = v78 + 1;
            continue;
          }
          a2 = v78;
          if (v79)
            return result;
          goto LABEL_2;
        }
        v110 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v111 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v112 = 0;
              v113 = *(_QWORD *)(v110 + 8);
              v114 = *(_QWORD *)(v110 + 32);
              v115 = *(_QWORD *)(v113 + 40);
              v116 = v10;
              do
              {
                v118 = v116[1];
                v119 = *v116;
                v116 = v111;
                if (*(_QWORD *)(v115 + 12 * *(int *)(v114 + 4 * v118)) < *(_QWORD *)(v115
                                                                                        + 12
                                                                                        * *(int *)(v114 + 4 * v119)))
                {
                  v120 = v112;
                  do
                  {
                    *(int *)((char *)v10 + v120 + 4) = v119;
                    if (!v120)
                    {
                      v117 = v10;
                      goto LABEL_115;
                    }
                    v119 = *(int *)((char *)v10 + v120 - 4);
                    result = *(int **)(v115 + 12 * *(int *)(v114 + 4 * v119));
                    v120 -= 4;
                  }
                  while (*(_QWORD *)(v115 + 12 * *(int *)(v114 + 4 * v118)) < (uint64_t)result);
                  v117 = (int *)((char *)v10 + v120 + 4);
LABEL_115:
                  *v117 = v118;
                }
                v111 = v116 + 1;
                v112 += 4;
              }
              while (v116 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v155 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v156 = *(_QWORD *)(v110 + 32);
            v157 = *(_QWORD *)(*(_QWORD *)(v110 + 8) + 40);
            do
            {
              v158 = v9[1];
              v159 = *v9;
              v9 = v155;
              if (*(_QWORD *)(v157 + 12 * *(int *)(v156 + 4 * v158)) < *(_QWORD *)(v157
                                                                                      + 12 * *(int *)(v156 + 4 * v159)))
              {
                do
                {
                  *v155 = v159;
                  v159 = *(v155 - 2);
                  --v155;
                }
                while (*(_QWORD *)(v157 + 12 * *(int *)(v156 + 4 * v158)) < *(_QWORD *)(v157
                                                                                           + 12
                                                                                           * *(int *)(v156 + 4 * v159)));
                *v155 = v158;
              }
              v155 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
      if (*(_QWORD *)(v10 + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4 * v8)) < *(_QWORD *)(v10 + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4 * v9)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 32);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
      v13 = *a1;
      v14 = a1[1];
      v15 = *(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v14));
      v16 = *(a2 - 1);
      v17 = *(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v16));
      if (v15 >= *(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * *a1)))
      {
        if (v17 < v15)
        {
          a1[1] = v16;
          *(a2 - 1) = v14;
          v41 = *a1;
          v40 = a1[1];
          if (*(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v40)) < *(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v41)))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v14;
        a1[1] = v13;
        v49 = *(a2 - 1);
        if (*(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v49)) < *(_QWORD *)(v12 + 12 * *(int *)(v11 + 4 * v13)))
        {
          a1[1] = v49;
          *(a2 - 1) = v13;
        }
      }
      else
      {
        *a1 = v16;
        *(a2 - 1) = v13;
      }
      return result;
    case 4:
      return 1;
    case 5:
      v30 = a1 + 2;
      v31 = a1 + 3;
      v32 = *(a2 - 1);
      v33 = a1[3];
      v34 = *(_QWORD *)(*(_QWORD *)a3 + 32);
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
      if (*(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v32)) >= *(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v33)))
        return 1;
      *v31 = v32;
      *(a2 - 1) = v33;
      v36 = *v31;
      v37 = *v30;
      if (*(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * *v31)) >= *(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v37)))
        return 1;
      *v30 = v36;
      *v31 = v37;
      v38 = a1[1];
      if (*(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v36)) >= *(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v38)))
        return 1;
      a1[1] = v36;
      a1[2] = v38;
      v39 = *a1;
      if (*(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v36)) >= *(_QWORD *)(v35 + 12 * *(int *)(v34 + 4 * v39)))
        return 1;
      *a1 = v36;
      a1[1] = v39;
      return 1;
    default:
      v18 = a1 + 2;
      v19 = a1[2];
      v20 = a1[1];
      v21 = *(_QWORD *)(*(_QWORD *)a3 + 32);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 40);
      v23 = *a1;
      v24 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v20));
      v25 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v19));
      if (v24 >= *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * *a1)))
      {
        if (v25 >= v24)
          goto LABEL_25;
        a1[1] = v19;
        *v18 = v20;
        v28 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v19));
        v29 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v23));
        v26 = a1;
        v27 = a1 + 1;
      }
      else
      {
        v26 = a1;
        v27 = a1 + 2;
        if (v25 < v24)
          goto LABEL_24;
        *a1 = v20;
        a1[1] = v23;
        v28 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v19));
        v29 = *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v23));
        v26 = a1 + 1;
        v27 = a1 + 2;
      }
      if (v28 >= v29)
        goto LABEL_25;
LABEL_24:
      *v26 = v19;
      *v27 = v23;
LABEL_25:
      v42 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v43 = 0;
      v44 = 12;
      break;
  }
  while (1)
  {
    v45 = *v42;
    v46 = *v18;
    if (*(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * *v42)) < *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v46)))
      break;
LABEL_34:
    v18 = v42;
    v44 += 4;
    if (++v42 == a2)
      return 1;
  }
  v47 = v44;
  do
  {
    *(int *)((char *)a1 + v47) = v46;
    v48 = v47 - 4;
    if (v47 == 4)
    {
      *a1 = v45;
      if (++v43 != 8)
        goto LABEL_34;
      return v42 + 1 == a2;
    }
    v46 = *(int *)((char *)a1 + v47 - 8);
    v47 -= 4;
  }
  while (*(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v45)) < *(_QWORD *)(v22 + 12 * *(int *)(v21 + 4 * v46)));
  *(int *)((char *)a1 + v48) = v45;
  if (++v43 != 8)
    goto LABEL_34;
  return v42 + 1 == a2;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *>(int *result, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *result;
  v8 = *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * *a2));
  v9 = *a3;
  v10 = *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * *a3));
  if (v8 >= *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * *result)))
  {
    if (v10 >= v8)
    {
      v11 = v9;
      goto LABEL_13;
    }
    *a2 = v9;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v12)) >= *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v13)))
    {
      v11 = v6;
      v9 = v6;
      goto LABEL_13;
    }
    *result = v12;
    *a2 = v13;
    v9 = *a3;
    goto LABEL_11;
  }
  v11 = v7;
  if (v10 >= v8)
  {
    *result = v6;
    *a2 = v7;
    v9 = *a3;
    if (*(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * *a3)) < *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v7)))
    {
      *a2 = v9;
      goto LABEL_9;
    }
LABEL_11:
    v11 = v9;
    goto LABEL_13;
  }
  *result = v9;
LABEL_9:
  *a3 = v7;
  v9 = v7;
LABEL_13:
  v14 = *a4;
  if (*(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v14)) < *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v11)))
  {
    *a3 = v14;
    *a4 = v9;
    v15 = *a3;
    v16 = *a2;
    if (*(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v15)) < *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v16)))
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *result;
      if (*(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v17)) < *(_QWORD *)(a5 + 12 * *(int *)(a6 + 4 * v18)))
      {
        *result = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

void operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(void **a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  v8 = a2;
  v9 = *((_DWORD *)a1[4] + a2);
  v10 = a1 + 48;
  if (*(_QWORD *)(*((_QWORD *)a1[1] + 5) + 12 * (int)v9) >= (int64_t)a4)
  {
    v50 = __PAIR64__(a4, v9);
    v11 = __PAIR64__(a4, v9);
    v12 = HIDWORD(a4);
    v14 = (char *)a1[49];
    v21 = (unint64_t)a1[50];
    if ((unint64_t)v14 >= v21)
    {
      v23 = (char *)*v10;
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*v10) >> 2);
      v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555)
        goto LABEL_54;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v23) >> 2);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0xAAAAAAAAAAAAAAALL)
        v27 = 0x1555555555555555;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x1555555555555555)
          goto LABEL_55;
        v28 = (char *)operator new(12 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[12 * v24];
      v30 = &v28[12 * v27];
      *(_QWORD *)v29 = v50;
      *((_DWORD *)v29 + 2) = v12;
      v22 = v29 + 12;
      if (v14 == v23)
        goto LABEL_31;
      do
      {
        v33 = *(_QWORD *)(v14 - 12);
        v14 -= 12;
        v34 = *((_DWORD *)v14 + 2);
        *(_QWORD *)(v29 - 12) = v33;
        v29 -= 12;
        *((_DWORD *)v29 + 2) = v34;
      }
      while (v14 != v23);
      goto LABEL_30;
    }
LABEL_13:
    *(_QWORD *)v14 = v11;
    *((_DWORD *)v14 + 2) = v12;
    v22 = v14 + 12;
    goto LABEL_33;
  }
  LODWORD(v49) = *((_DWORD *)a1[7] + v8);
  HIDWORD(v49) = a4 + a3;
  v11 = v49;
  v12 = (a4 + a3) >> 32;
  v14 = (char *)a1[49];
  v13 = (unint64_t)a1[50];
  if ((unint64_t)v14 < v13)
    goto LABEL_13;
  v15 = (char *)*v10;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*v10) >> 2);
  v17 = v16 + 1;
  if (v16 + 1 > 0x1555555555555555)
    goto LABEL_54;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 2);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0xAAAAAAAAAAAAAAALL)
    v19 = 0x1555555555555555;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0x1555555555555555)
      goto LABEL_55;
    v20 = (char *)operator new(12 * v19);
  }
  else
  {
    v20 = 0;
  }
  v29 = &v20[12 * v16];
  v30 = &v20[12 * v19];
  *(_QWORD *)v29 = v49;
  *((_DWORD *)v29 + 2) = v12;
  v22 = v29 + 12;
  if (v14 == v15)
    goto LABEL_31;
  do
  {
    v31 = *(_QWORD *)(v14 - 12);
    v14 -= 12;
    v32 = *((_DWORD *)v14 + 2);
    *(_QWORD *)(v29 - 12) = v31;
    v29 -= 12;
    *((_DWORD *)v29 + 2) = v32;
  }
  while (v14 != v15);
LABEL_30:
  v14 = (char *)*v10;
LABEL_31:
  a1[48] = v29;
  a1[49] = v22;
  a1[50] = v30;
  if (v14)
    operator delete(v14);
LABEL_33:
  a1[49] = v22;
  v35 = *((_DWORD *)a1[10] + v8);
  if (v35 == -1)
    return;
  v51 = __PAIR64__(a3, v35);
  v36 = HIDWORD(a3);
  v37 = (unint64_t)a1[50];
  if ((unint64_t)v22 < v37)
  {
    *(_QWORD *)v22 = __PAIR64__(a3, v35);
    *((_DWORD *)v22 + 2) = HIDWORD(a3);
    v38 = v22 + 12;
    goto LABEL_52;
  }
  v39 = (char *)*v10;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*v10) >> 2);
  v41 = v40 + 1;
  if (v40 + 1 > 0x1555555555555555)
LABEL_54:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v39) >> 2);
  if (2 * v42 > v41)
    v41 = 2 * v42;
  if (v42 >= 0xAAAAAAAAAAAAAAALL)
    v43 = 0x1555555555555555;
  else
    v43 = v41;
  if (!v43)
  {
    v44 = 0;
    goto LABEL_46;
  }
  if (v43 > 0x1555555555555555)
LABEL_55:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v44 = (char *)operator new(12 * v43);
LABEL_46:
  v45 = &v44[12 * v40];
  v46 = &v44[12 * v43];
  *(_QWORD *)v45 = v51;
  *((_DWORD *)v45 + 2) = v36;
  v38 = v45 + 12;
  if (v22 == v39)
  {
    a1[48] = v45;
    a1[49] = v38;
    a1[50] = v46;
  }
  else
  {
    do
    {
      v47 = *(_QWORD *)(v22 - 12);
      v22 -= 12;
      v48 = *((_DWORD *)v22 + 2);
      *(_QWORD *)(v45 - 12) = v47;
      v45 -= 12;
      *((_DWORD *)v45 + 2) = v48;
    }
    while (v22 != v39);
    v22 = (char *)a1[48];
    a1[48] = v45;
    a1[49] = v38;
    a1[50] = v46;
    if (!v22)
      goto LABEL_52;
  }
  operator delete(v22);
LABEL_52:
  a1[49] = v38;
}

operations_research::sat::DisjunctiveOverloadChecker *operations_research::sat::DisjunctiveOverloadChecker::DisjunctiveOverloadChecker(operations_research::sat::DisjunctiveOverloadChecker *this, operations_research::sat::SchedulingConstraintHelper *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_24F985C70;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 64);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 40) - *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if (((unint64_t)v3 >> 2))
    std::vector<int>::__append((std::vector<int> *)((char *)this + 104), (int)(v3 >> 2));
  return this;
}

void sub_22DB40764(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
    v7 = (void *)v1[10];
    if (!v7)
    {
LABEL_3:
      v8 = (void *)v1[5];
      if (!v8)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = (void *)v1[10];
    if (!v7)
      goto LABEL_3;
  }
  v1[11] = v7;
  operator delete(v7);
  v8 = (void *)v1[5];
  if (!v8)
  {
LABEL_4:
    v9 = *v3;
    if (!*v3)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[6] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[3] = v9;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

operations_research::sat::DisjunctiveDetectablePrecedences *operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences(operations_research::sat::DisjunctiveDetectablePrecedences *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F985CB8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 104) = a2;
  v5 = *((_QWORD *)a3 + 4);
  v4 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = a3;
  v6 = v4 - v5;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  if (((unint64_t)v6 >> 2))
  {
    if ((((unint64_t)v6 >> 2) & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (int)(v6 >> 2);
    v8 = (char *)operator new(20 * v7);
    *((_QWORD *)this + 15) = v8;
    *((_QWORD *)this + 16) = v8;
    *((_QWORD *)this + 17) = &v8[20 * (int)v7];
  }
  return this;
}

void sub_22DB40894(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    v1[16] = v6;
    operator delete(v6);
    v7 = (void *)v1[10];
    if (!v7)
    {
LABEL_3:
      v8 = (void *)v1[7];
      if (!v8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = (void *)v1[10];
    if (!v7)
      goto LABEL_3;
  }
  v1[11] = v7;
  operator delete(v7);
  v8 = (void *)v1[7];
  if (!v8)
  {
LABEL_4:
    v9 = (void *)v1[4];
    if (!v9)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v8);
  v9 = (void *)v1[4];
  if (!v9)
  {
LABEL_5:
    v10 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[5] = v9;
  operator delete(v9);
  v10 = *v3;
  if (!*v3)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[2] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

operations_research::sat::DisjunctiveNotLast *operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast(operations_research::sat::DisjunctiveNotLast *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)this = &off_24F985D00;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 56) = a2;
  v5 = *((_QWORD *)a3 + 4);
  v4 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = a3;
  v6 = v4 - v5;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  if (((unint64_t)v6 >> 2))
  {
    if ((((unint64_t)v6 >> 2) & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (int)(v6 >> 2);
    v8 = (char *)operator new(20 * v7);
    *((_QWORD *)this + 9) = v8;
    *((_QWORD *)this + 10) = v8;
    *((_QWORD *)this + 11) = &v8[20 * (int)v7];
  }
  return this;
}

void sub_22DB409B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((void **)(v1 + 32), (void **)(v1 + 8), v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(_QWORD *a1, int a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  _DWORD **v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  void *v31;
  char *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  v6 = *(_QWORD *)(a1[1] + 40);
  if (*(_QWORD *)(v6 + 12 * *(int *)(a1[7] + 4 * a2)) < (int64_t)a3)
  {
    v7 = a2;
    v8 = *(_DWORD *)(a1[10] + 4 * a2);
    if (v8 == -1)
    {
      v9 = *(_QWORD *)(a1[13] + 8 * a2);
      v12 = (_DWORD *)a1[49];
    }
    else
    {
      v9 = *(_QWORD *)(v6 + 12 * v8);
      LODWORD(v45) = *(_DWORD *)(a1[10] + 4 * a2);
      HIDWORD(v45) = v9;
      v11 = (_DWORD *)a1[49];
      v10 = a1[50];
      if ((unint64_t)v11 >= v10)
      {
        v22 = (_DWORD **)(a1 + 48);
        v23 = (_DWORD *)a1[48];
        v24 = 0xAAAAAAAAAAAAAAABLL * (v11 - v23) + 1;
        if (v24 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v23) >> 2);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0xAAAAAAAAAAAAAAALL)
          v26 = 0x1555555555555555;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 > 0x1555555555555555)
            goto LABEL_58;
          v27 = (char *)operator new(12 * v26);
          v22 = (_DWORD **)(a1 + 48);
        }
        else
        {
          v27 = 0;
        }
        v32 = &v27[4 * (v11 - v23)];
        *(_QWORD *)v32 = v45;
        *((_DWORD *)v32 + 2) = HIDWORD(v9);
        v12 = v32 + 12;
        if (v11 != v23)
        {
          do
          {
            v33 = *(_QWORD *)(v11 - 3);
            v11 -= 3;
            v34 = v11[2];
            *(_QWORD *)(v32 - 12) = v33;
            v32 -= 12;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v11 != v23);
          v11 = *v22;
        }
        a1[48] = v32;
        a1[49] = v12;
        a1[50] = &v27[12 * v26];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v11 = v45;
        v11[2] = HIDWORD(v9);
        v12 = v11 + 3;
      }
      a1[49] = v12;
    }
    LODWORD(v47) = *(_DWORD *)(a1[4] + 4 * v7);
    HIDWORD(v47) = a3 - v9;
    v35 = (a3 - v9) >> 32;
    v36 = a1[50];
    if ((unint64_t)v12 < v36)
    {
      *(_QWORD *)v12 = v47;
      v12[2] = v35;
      v16 = (char *)(v12 + 3);
      goto LABEL_57;
    }
    v37 = (_DWORD *)a1[48];
    v38 = 0xAAAAAAAAAAAAAAABLL * (v12 - v37) + 1;
    if (v38 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v37) >> 2);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0xAAAAAAAAAAAAAAALL)
      v40 = 0x1555555555555555;
    else
      v40 = v38;
    if (!v40)
    {
      v41 = 0;
LABEL_51:
      v42 = &v41[4 * (v12 - v37)];
      *(_QWORD *)v42 = v47;
      *((_DWORD *)v42 + 2) = v35;
      v16 = v42 + 12;
      if (v12 != v37)
      {
        do
        {
          v43 = *(_QWORD *)(v12 - 3);
          v12 -= 3;
          v44 = v12[2];
          *(_QWORD *)(v42 - 12) = v43;
          v42 -= 12;
          *((_DWORD *)v42 + 2) = v44;
        }
        while (v12 != v37);
        v12 = (_DWORD *)a1[48];
      }
      a1[48] = v42;
      a1[49] = v16;
      a1[50] = &v41[12 * v40];
      if (v12)
      {
        v31 = v12;
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v40 <= 0x1555555555555555)
    {
      v41 = (char *)operator new(12 * v40);
      goto LABEL_51;
    }
LABEL_58:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  LODWORD(v46) = *(_DWORD *)(a1[7] + 4 * a2);
  HIDWORD(v46) = a3;
  v13 = HIDWORD(a3);
  v15 = (char *)a1[49];
  v14 = a1[50];
  if ((unint64_t)v15 < v14)
  {
    *(_QWORD *)v15 = v46;
    *((_DWORD *)v15 + 2) = v13;
    v16 = v15 + 12;
    goto LABEL_57;
  }
  v17 = (_BYTE *)a1[48];
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v17) >> 2) + 1;
  if (v18 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 2);
  if (2 * v19 > v18)
    v18 = 2 * v19;
  if (v19 >= 0xAAAAAAAAAAAAAAALL)
    v20 = 0x1555555555555555;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 > 0x1555555555555555)
      goto LABEL_58;
    v21 = (char *)operator new(12 * v20);
  }
  else
  {
    v21 = 0;
  }
  v28 = &v21[4 * ((v15 - v17) >> 2)];
  *(_QWORD *)v28 = v46;
  *((_DWORD *)v28 + 2) = v13;
  v16 = v28 + 12;
  if (v15 != v17)
  {
    do
    {
      v29 = *(_QWORD *)(v15 - 12);
      v15 -= 12;
      v30 = *((_DWORD *)v15 + 2);
      *(_QWORD *)(v28 - 12) = v29;
      v28 -= 12;
      *((_DWORD *)v28 + 2) = v30;
    }
    while (v15 != v17);
    v15 = (char *)a1[48];
  }
  a1[48] = v28;
  a1[49] = v16;
  a1[50] = &v21[12 * v20];
  if (v15)
  {
    v31 = v15;
LABEL_56:
    operator delete(v31);
  }
LABEL_57:
  a1[49] = v16;
}

void operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, int64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002)
    v6 = -a3;
  LODWORD(v19) = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * a2) ^ 1;
  HIDWORD(v19) = v6;
  v7 = HIDWORD(v6);
  v9 = (_DWORD *)*((_QWORD *)a1 + 49);
  v8 = *((_QWORD *)a1 + 50);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_DWORD *)*((_QWORD *)a1 + 48);
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0xAAAAAAAAAAAAAAALL)
      v14 = 0x1555555555555555;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(12 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * (v9 - v11)];
    *(_QWORD *)v16 = v19;
    *((_DWORD *)v16 + 2) = v7;
    v10 = v16 + 12;
    if (v9 != v11)
    {
      do
      {
        v17 = *(_QWORD *)(v9 - 3);
        v9 -= 3;
        v18 = v9[2];
        *(_QWORD *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v9 != v11);
      v9 = (_DWORD *)*((_QWORD *)a1 + 48);
    }
    *((_QWORD *)a1 + 48) = v16;
    *((_QWORD *)a1 + 49) = v10;
    *((_QWORD *)a1 + 50) = &v15[12 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v9 = v19;
    v9[2] = v7;
    v10 = v9 + 3;
  }
  *((_QWORD *)a1 + 49) = v10;
}

void std::vector<operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Dimension>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(uint64_t *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  int v63;
  uint64_t *v64;
  int v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char *v107;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;

  v9 = (uint64_t)result;
LABEL_2:
  v10 = (uint64_t *)(a2 - 12);
  v137 = a2 - 36;
  v138 = a2 - 24;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (uint64_t)&a2[-v11];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v11] >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 4))
        {
          v184 = *(_DWORD *)(v11 + 8);
          v158 = *(_QWORD *)v11;
          v98 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v11 = v98;
          *((_DWORD *)a2 - 1) = v184;
          *(_QWORD *)(a2 - 12) = v158;
        }
        return result;
      case 3uLL:
        v99 = v11 + 12;
        v100 = *(_QWORD *)(v11 + 16);
        v101 = *((_QWORD *)a2 - 1);
        if (v100 >= *(_QWORD *)(v11 + 4))
        {
          if (v101 < v100)
          {
            v118 = *(_QWORD *)v99;
            v119 = *(_DWORD *)(v11 + 20);
            v120 = *((_DWORD *)a2 - 1);
            *(_QWORD *)v99 = *v10;
            *(_DWORD *)(v11 + 20) = v120;
            *((_DWORD *)a2 - 1) = v119;
            *v10 = v118;
            goto LABEL_146;
          }
        }
        else if (v101 >= v100)
        {
          v188 = *(_DWORD *)(v11 + 8);
          v162 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *(_QWORD *)v99;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
          *(_QWORD *)v99 = v162;
          *(_DWORD *)(v11 + 20) = v188;
          if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 16))
          {
            v128 = *(_QWORD *)v99;
            v129 = *(_DWORD *)(v11 + 20);
            v130 = *((_DWORD *)a2 - 1);
            *(_QWORD *)v99 = *v10;
            *(_DWORD *)(v11 + 20) = v130;
            *((_DWORD *)a2 - 1) = v129;
            *v10 = v128;
          }
        }
        else
        {
          v185 = *(_DWORD *)(v11 + 8);
          v159 = *(_QWORD *)v11;
          v102 = *v10;
          *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v11 = v102;
          *((_DWORD *)a2 - 1) = v185;
          *v10 = v159;
        }
        return result;
      case 4uLL:
        v99 = v11 + 12;
        v103 = (uint64_t *)(v11 + 24);
        v104 = *(_QWORD *)(v11 + 16);
        v105 = *(_QWORD *)(v11 + 28);
        if (v104 >= *(_QWORD *)(v11 + 4))
        {
          if (v105 < v104)
          {
            v121 = *(_DWORD *)(v11 + 20);
            v122 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v122;
            *(_DWORD *)(v11 + 32) = v121;
            if (*(_QWORD *)(v11 + 16) < *(_QWORD *)(v11 + 4))
            {
              v187 = *(_DWORD *)(v11 + 8);
              v161 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v99;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
              *(_QWORD *)v99 = v161;
              *(_DWORD *)(v11 + 20) = v187;
            }
          }
        }
        else
        {
          if (v105 >= v104)
          {
            v189 = *(_DWORD *)(v11 + 8);
            v163 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)v99;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
            *(_QWORD *)v99 = v163;
            *(_DWORD *)(v11 + 20) = v189;
            if (v105 >= *(_QWORD *)(v11 + 16))
              goto LABEL_143;
            v106 = *(_DWORD *)(v11 + 20);
            v131 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v131;
          }
          else
          {
            v186 = *(_DWORD *)(v11 + 8);
            v160 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *v103;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 32);
            *v103 = v160;
            v106 = v186;
          }
          *(_DWORD *)(v11 + 32) = v106;
        }
LABEL_143:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 28))
        {
          v132 = *v103;
          v133 = *(_DWORD *)(v11 + 32);
          v134 = *((_DWORD *)a2 - 1);
          *v103 = *v10;
          *(_DWORD *)(v11 + 32) = v134;
          *((_DWORD *)a2 - 1) = v133;
          *v10 = v132;
          if (*(_QWORD *)(v11 + 28) < *(_QWORD *)(v11 + 16))
          {
            v135 = *(_DWORD *)(v11 + 20);
            v136 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v136;
            *(_DWORD *)(v11 + 32) = v135;
LABEL_146:
            if (*(_QWORD *)(v11 + 16) < *(_QWORD *)(v11 + 4))
            {
              v190 = *(_DWORD *)(v11 + 8);
              v164 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v99;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v99 + 8);
              *(_QWORD *)v99 = v164;
              *(_DWORD *)(v99 + 8) = v190;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)v11, (uint64_t *)(v11 + 12), (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 36), (uint64_t *)(a2 - 12));
      default:
        if (v12 > 287)
        {
          if (!a4)
          {
            if ((char *)v11 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((char *)v11, a2, (uint64_t *)a2);
            return result;
          }
          v14 = v13 >> 1;
          v15 = v11 + 12 * (v13 >> 1);
          v16 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v12 < 0x601)
          {
            v20 = *(_QWORD *)(v11 + 4);
            v21 = (_QWORD *)(v11 + 4 + 12 * v14);
            if (v20 >= *v21)
            {
              if (v16 < v20)
              {
                v169 = *(_DWORD *)(v11 + 8);
                v143 = *(_QWORD *)v11;
                v25 = *v10;
                *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v11 = v25;
                *((_DWORD *)a2 - 1) = v169;
                *v10 = v143;
                if (*(_QWORD *)(v11 + 4) < *v21)
                {
                  v170 = *(_DWORD *)(v15 + 8);
                  v144 = *(_QWORD *)v15;
                  v26 = *(_QWORD *)v11;
                  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                  *(_QWORD *)v15 = v26;
                  *(_DWORD *)(v11 + 8) = v170;
                  *(_QWORD *)v11 = v144;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v16 >= v20)
              {
                v173 = *(_DWORD *)(v15 + 8);
                v147 = *(_QWORD *)v15;
                v43 = *(_QWORD *)v11;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                *(_QWORD *)v15 = v43;
                *(_DWORD *)(v11 + 8) = v173;
                *(_QWORD *)v11 = v147;
                if (*((_QWORD *)a2 - 1) >= *(_QWORD *)(v11 + 4))
                  goto LABEL_32;
                v166 = *(_DWORD *)(v11 + 8);
                v140 = *(_QWORD *)v11;
                v44 = *v10;
                *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v11 = v44;
              }
              else
              {
                v166 = *(_DWORD *)(v15 + 8);
                v140 = *(_QWORD *)v15;
                v22 = *v10;
                *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v15 = v22;
              }
              *((_DWORD *)a2 - 1) = v166;
              *v10 = v140;
            }
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v45 = *(_QWORD *)(v11 + 4);
            if (*(_QWORD *)(v11 - 8) < v45)
              goto LABEL_55;
            if (v45 >= *((_QWORD *)a2 - 1))
            {
              v88 = v11 + 12;
              do
              {
                v11 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v89 = *(_QWORD *)(v88 + 4);
                v88 += 12;
              }
              while (v45 >= v89);
            }
            else
            {
              v86 = v11;
              do
              {
                v11 = v86 + 12;
                v87 = *(_QWORD *)(v86 + 16);
                v86 += 12;
              }
              while (v45 >= v87);
            }
            v90 = a2;
            if (v11 < (unint64_t)a2)
            {
              v91 = a2;
              do
              {
                v90 = v91 - 12;
                v92 = *((_QWORD *)v91 - 1);
                v91 -= 12;
              }
              while (v45 < v92);
            }
            v93 = *(_DWORD *)v9;
            while (v11 < (unint64_t)v90)
            {
              v183 = *(_DWORD *)(v11 + 8);
              v157 = *(_QWORD *)v11;
              v94 = *(_QWORD *)v90;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)v90 + 2);
              *(_QWORD *)v11 = v94;
              *((_DWORD *)v90 + 2) = v183;
              *(_QWORD *)v90 = v157;
              do
              {
                v95 = *(_QWORD *)(v11 + 16);
                v11 += 12;
              }
              while (v45 >= v95);
              do
              {
                v96 = *((_QWORD *)v90 - 1);
                v90 -= 12;
              }
              while (v45 < v96);
            }
            if (v11 - 12 != v9)
            {
              v97 = *(_QWORD *)(v11 - 12);
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
              *(_QWORD *)v9 = v97;
            }
            a5 = 0;
            *(_DWORD *)(v11 - 12) = v93;
            *(_QWORD *)(v11 - 8) = v45;
            continue;
          }
          v17 = (uint64_t *)(v11 + 4 + 12 * v14);
          v18 = *v17;
          if (*v17 >= *(_QWORD *)(v11 + 4))
          {
            if (v16 < v18)
            {
              v167 = *(_DWORD *)(v15 + 8);
              v141 = *(_QWORD *)v15;
              v23 = *v10;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v15 = v23;
              *((_DWORD *)a2 - 1) = v167;
              *v10 = v141;
              if (*v17 < *(_QWORD *)(v11 + 4))
              {
                v168 = *(_DWORD *)(v11 + 8);
                v142 = *(_QWORD *)v11;
                v24 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v24;
                *(_DWORD *)(v15 + 8) = v168;
                *(_QWORD *)v15 = v142;
              }
            }
          }
          else
          {
            if (v16 >= v18)
            {
              v171 = *(_DWORD *)(v11 + 8);
              v145 = *(_QWORD *)v11;
              v27 = *(_QWORD *)v15;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
              *(_QWORD *)v11 = v27;
              *(_DWORD *)(v15 + 8) = v171;
              *(_QWORD *)v15 = v145;
              if (*((_QWORD *)a2 - 1) >= *v17)
                goto LABEL_23;
              v165 = *(_DWORD *)(v15 + 8);
              v139 = *(_QWORD *)v15;
              v28 = *v10;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v15 = v28;
            }
            else
            {
              v165 = *(_DWORD *)(v11 + 8);
              v139 = *(_QWORD *)v11;
              v19 = *v10;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v11 = v19;
            }
            *((_DWORD *)a2 - 1) = v165;
            *v10 = v139;
          }
LABEL_23:
          v29 = (uint64_t *)(v11 + 12);
          v30 = v11 + 12 * v14;
          v33 = *(_QWORD *)(v30 - 8);
          v31 = v30 - 8;
          v32 = v33;
          v34 = (uint64_t *)(v31 - 4);
          v35 = *(_QWORD *)(a2 - 20);
          if (v33 >= *(_QWORD *)(v11 + 16))
          {
            if (v35 < v32)
            {
              v172 = *(_DWORD *)(v31 + 4);
              v146 = *v34;
              v39 = *(_QWORD *)v138;
              *(_DWORD *)(v31 + 4) = *((_DWORD *)a2 - 4);
              *v34 = v39;
              *((_DWORD *)a2 - 4) = v172;
              *(_QWORD *)v138 = v146;
              if (*(_QWORD *)v31 < *(_QWORD *)(v11 + 16))
              {
                v40 = *v29;
                v41 = *(_DWORD *)(v11 + 20);
                v42 = *(_DWORD *)(v31 + 4);
                *v29 = *v34;
                *(_DWORD *)(v11 + 20) = v42;
                *(_DWORD *)(v31 + 4) = v41;
                *v34 = v40;
              }
            }
          }
          else if (v35 >= v32)
          {
            v46 = *v29;
            v47 = *(_DWORD *)(v11 + 20);
            v48 = *(_DWORD *)(v31 + 4);
            *v29 = *v34;
            *(_DWORD *)(v11 + 20) = v48;
            *(_DWORD *)(v31 + 4) = v47;
            *v34 = v46;
            if (*(_QWORD *)(a2 - 20) < *(_QWORD *)v31)
            {
              v174 = *(_DWORD *)(v31 + 4);
              v148 = *v34;
              v49 = *(_QWORD *)v138;
              *(_DWORD *)(v31 + 4) = *((_DWORD *)a2 - 4);
              *v34 = v49;
              *((_DWORD *)a2 - 4) = v174;
              *(_QWORD *)v138 = v148;
            }
          }
          else
          {
            v36 = *v29;
            v37 = *(_DWORD *)(v11 + 20);
            result = (uint64_t *)(a2 - 24);
            v38 = *((_DWORD *)a2 - 4);
            *v29 = *(_QWORD *)v138;
            *(_DWORD *)(v11 + 20) = v38;
            *((_DWORD *)a2 - 4) = v37;
            *(_QWORD *)v138 = v36;
          }
          v50 = (uint64_t **)(v11 + 24);
          v51 = v11 + 12 * v14;
          v54 = *(_QWORD *)(v51 + 16);
          v52 = v51 + 16;
          v53 = v54;
          v55 = (uint64_t **)(v52 - 4);
          v56 = *((_QWORD *)a2 - 4);
          if (v54 >= *(_QWORD *)(v11 + 28))
          {
            if (v56 < v53)
            {
              v175 = *(_DWORD *)(v52 + 4);
              v149 = *v55;
              v60 = *(uint64_t **)v137;
              *(_DWORD *)(v52 + 4) = *((_DWORD *)a2 - 7);
              *v55 = v60;
              *((_DWORD *)a2 - 7) = v175;
              *(_QWORD *)v137 = v149;
              if (*(_QWORD *)v52 < *(_QWORD *)(v11 + 28))
              {
                v61 = *v50;
                v62 = *(_DWORD *)(v11 + 32);
                v63 = *(_DWORD *)(v52 + 4);
                result = *v55;
                *v50 = *v55;
                *(_DWORD *)(v11 + 32) = v63;
                *(_DWORD *)(v52 + 4) = v62;
                *v55 = v61;
              }
            }
          }
          else if (v56 >= v53)
          {
            v64 = *v50;
            v65 = *(_DWORD *)(v11 + 32);
            v66 = *(_DWORD *)(v52 + 4);
            result = *v55;
            *v50 = *v55;
            *(_DWORD *)(v11 + 32) = v66;
            *(_DWORD *)(v52 + 4) = v65;
            *v55 = v64;
            if (*((_QWORD *)a2 - 4) < *(_QWORD *)v52)
            {
              v176 = *(_DWORD *)(v52 + 4);
              v150 = *v55;
              v67 = *(uint64_t **)v137;
              *(_DWORD *)(v52 + 4) = *((_DWORD *)a2 - 7);
              *v55 = v67;
              *((_DWORD *)a2 - 7) = v176;
              *(_QWORD *)v137 = v150;
            }
          }
          else
          {
            v57 = *v50;
            v58 = *(_DWORD *)(v11 + 32);
            v59 = *((_DWORD *)a2 - 7);
            result = *(uint64_t **)v137;
            *v50 = *(uint64_t **)v137;
            *(_DWORD *)(v11 + 32) = v59;
            *((_DWORD *)a2 - 7) = v58;
            *(_QWORD *)v137 = v57;
          }
          v68 = *v17;
          v69 = *(_QWORD *)v52;
          if (*v17 >= *(_QWORD *)v31)
          {
            if (v69 < v68)
            {
              v178 = *(_DWORD *)(v15 + 8);
              v152 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v55;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v52 + 4);
              *(_DWORD *)(v52 + 4) = v178;
              *v55 = (uint64_t *)v152;
              if (*v17 < *(_QWORD *)v31)
              {
                v179 = *(_DWORD *)(v31 + 4);
                v153 = *v34;
                *v34 = *(_QWORD *)v15;
                *(_DWORD *)(v31 + 4) = *(_DWORD *)(v15 + 8);
                *(_DWORD *)(v15 + 8) = v179;
                *(_QWORD *)v15 = v153;
              }
            }
          }
          else
          {
            if (v69 >= v68)
            {
              v180 = *(_DWORD *)(v31 + 4);
              v154 = *v34;
              *v34 = *(_QWORD *)v15;
              *(_DWORD *)(v31 + 4) = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v180;
              *(_QWORD *)v15 = v154;
              if (*(_QWORD *)v52 >= *v17)
                goto LABEL_53;
              v177 = *(_DWORD *)(v15 + 8);
              v151 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v55;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v52 + 4);
            }
            else
            {
              v177 = *(_DWORD *)(v31 + 4);
              v151 = *v34;
              *v34 = (uint64_t)*v55;
              *(_DWORD *)(v31 + 4) = *(_DWORD *)(v52 + 4);
            }
            *(_DWORD *)(v52 + 4) = v177;
            *v55 = (uint64_t *)v151;
          }
LABEL_53:
          v181 = *(_DWORD *)(v11 + 8);
          v155 = *(_QWORD *)v11;
          v70 = *(_QWORD *)v15;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v11 = v70;
          *(_DWORD *)(v15 + 8) = v181;
          *(_QWORD *)v15 = v155;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v45 = *(_QWORD *)(v11 + 4);
LABEL_55:
          v71 = 0;
          v72 = *(_DWORD *)v11;
          do
          {
            v73 = *(_QWORD *)(v11 + v71 + 16);
            v71 += 12;
          }
          while (v73 < v45);
          v74 = v11 + v71;
          v75 = a2;
          if (v71 == 12)
          {
            v78 = a2;
            while (v74 < (unint64_t)v78)
            {
              v76 = v78 - 12;
              v79 = *((_QWORD *)v78 - 1);
              v78 -= 12;
              if (v79 < v45)
                goto LABEL_63;
            }
            v76 = v78;
            v11 = v74;
          }
          else
          {
            do
            {
              v76 = v75 - 12;
              v77 = *((_QWORD *)v75 - 1);
              v75 -= 12;
            }
            while (v77 >= v45);
LABEL_63:
            v11 = v74;
            if (v74 < (unint64_t)v76)
            {
              v80 = (unint64_t)v76;
              do
              {
                v182 = *(_DWORD *)(v11 + 8);
                v156 = *(_QWORD *)v11;
                v81 = *(_QWORD *)v80;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v80 + 8);
                *(_QWORD *)v11 = v81;
                *(_DWORD *)(v80 + 8) = v182;
                *(_QWORD *)v80 = v156;
                do
                {
                  v82 = *(_QWORD *)(v11 + 16);
                  v11 += 12;
                }
                while (v82 < v45);
                do
                {
                  v83 = *(_QWORD *)(v80 - 8);
                  v80 -= 12;
                }
                while (v83 >= v45);
              }
              while (v11 < v80);
            }
          }
          if (v11 - 12 != v9)
          {
            v84 = *(_QWORD *)(v11 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
            *(_QWORD *)v9 = v84;
          }
          *(_DWORD *)(v11 - 12) = v72;
          *(_QWORD *)(v11 - 8) = v45;
          if (v74 < (unint64_t)v76)
            goto LABEL_74;
          v85 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(v9, (uint64_t *)(v11 - 12));
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(v11, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v85)
              continue;
LABEL_74:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(v9, v11 - 12, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (char *)(v11 - 12);
          if (v85)
            return result;
          goto LABEL_2;
        }
        v107 = (char *)(v11 + 12);
        v109 = (char *)v11 == a2 || v107 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v109)
          {
            v110 = 0;
            v111 = v11;
            do
            {
              v113 = *(_QWORD *)(v111 + 16);
              v114 = *(_QWORD *)(v111 + 4);
              v111 = (unint64_t)v107;
              if (v113 < v114)
              {
                v115 = *(_DWORD *)v107;
                v116 = v110;
                do
                {
                  v117 = v11 + v116;
                  *(_QWORD *)(v117 + 12) = *(_QWORD *)(v11 + v116);
                  *(_DWORD *)(v117 + 20) = *(_DWORD *)(v11 + v116 + 8);
                  if (!v116)
                  {
                    v112 = v11;
                    goto LABEL_117;
                  }
                  v116 -= 12;
                }
                while (v113 < *(_QWORD *)(v117 - 8));
                v112 = v11 + v116 + 12;
LABEL_117:
                *(_DWORD *)v112 = v115;
                *(_QWORD *)(v112 + 4) = v113;
              }
              v107 = (char *)(v111 + 12);
              v110 += 12;
            }
            while ((char *)(v111 + 12) != a2);
          }
        }
        else if (!v109)
        {
          do
          {
            v123 = *(_QWORD *)(v9 + 16);
            v124 = *(_QWORD *)(v9 + 4);
            v9 = (uint64_t)v107;
            if (v123 < v124)
            {
              v125 = *(_DWORD *)v107;
              do
              {
                v126 = v107;
                v127 = *(_QWORD *)(v107 - 12);
                v107 -= 12;
                *(_QWORD *)v126 = v127;
                *((_DWORD *)v126 + 2) = *((_DWORD *)v126 - 1);
              }
              while (v123 < *(_QWORD *)(v126 - 20));
              *(_DWORD *)v107 = v125;
              *(_QWORD *)(v107 + 4) = v123;
            }
            v107 = (char *)(v9 + 12);
          }
          while ((char *)(v9 + 12) != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(a2 - 1) < *(_QWORD *)(a1 + 4))
      {
        v10 = *(_DWORD *)(a1 + 8);
        v11 = *(_QWORD *)a1;
        v12 = *((_DWORD *)a2 - 1);
        *(_QWORD *)a1 = *(uint64_t *)((char *)a2 - 12);
        *(_DWORD *)(a1 + 8) = v12;
        *(uint64_t *)((char *)a2 - 12) = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      v13 = (uint64_t *)(a1 + 12);
      v14 = (uint64_t *)((char *)a2 - 12);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(a2 - 1);
      if (v15 >= *(_QWORD *)(a1 + 4))
      {
        if (v16 >= v15)
          return 1;
        v29 = *(_DWORD *)(a1 + 20);
        v30 = *v13;
        v31 = *((_DWORD *)a2 - 1);
        *v13 = *v14;
        goto LABEL_45;
      }
      if (v16 < v15)
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
        v19 = *((_DWORD *)a2 - 1);
        *(_QWORD *)a1 = *v14;
        *(_DWORD *)(a1 + 8) = v19;
        *v14 = v18;
        *((_DWORD *)a2 - 1) = v17;
        return 1;
      }
      v48 = *(_DWORD *)(a1 + 8);
      v49 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v13 = v49;
      *(_DWORD *)(a1 + 20) = v48;
      if (*(a2 - 1) < *(_QWORD *)(a1 + 16))
      {
        v50 = *(_DWORD *)(a1 + 20);
        v51 = *v13;
        v52 = *((_DWORD *)a2 - 1);
        *v13 = *v14;
        *(_DWORD *)(a1 + 20) = v52;
        *v14 = v51;
        *((_DWORD *)a2 - 1) = v50;
        return 1;
      }
      return 1;
    case 4uLL:
      v13 = (uint64_t *)(a1 + 12);
      v14 = (uint64_t *)(a1 + 24);
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 4);
      v22 = *(_QWORD *)(a1 + 28);
      if (v20 >= v21)
      {
        if (v22 < v20)
        {
          v32 = *(_DWORD *)(a1 + 20);
          v33 = *v13;
          *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v14 = v33;
          *(_DWORD *)(a1 + 32) = v32;
          if (*(_QWORD *)(a1 + 16) < v21)
          {
            v34 = *(_DWORD *)(a1 + 8);
            v35 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v13;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v13 = v35;
            *(_DWORD *)(a1 + 20) = v34;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          v53 = *(_DWORD *)(a1 + 8);
          v54 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *v13 = v54;
          *(_DWORD *)(a1 + 20) = v53;
          if (v22 >= *(_QWORD *)(a1 + 16))
            goto LABEL_42;
          v23 = *(_DWORD *)(a1 + 20);
          v24 = *v13;
          *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          v23 = *(_DWORD *)(a1 + 8);
          v24 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v14;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        *v14 = v24;
        *(_DWORD *)(a1 + 32) = v23;
      }
LABEL_42:
      if (*(a2 - 1) >= *(_QWORD *)(a1 + 28))
        return 1;
      v55 = (uint64_t)a2 - 12;
      v56 = *(_DWORD *)(a1 + 32);
      v57 = *v14;
      v58 = *((_DWORD *)a2 - 1);
      *v14 = *(uint64_t *)((char *)a2 - 12);
      *(_DWORD *)(a1 + 32) = v58;
      *(_QWORD *)v55 = v57;
      *(_DWORD *)(v55 + 8) = v56;
      if (*(_QWORD *)(a1 + 28) >= *(_QWORD *)(a1 + 16))
        return 1;
      v29 = *(_DWORD *)(a1 + 20);
      v30 = *v13;
      *v13 = *v14;
      v31 = *(_DWORD *)(a1 + 32);
LABEL_45:
      *((_DWORD *)v13 + 2) = v31;
      *v14 = v30;
      *((_DWORD *)v14 + 2) = v29;
      if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a1 + 4))
        return 1;
      v59 = *(_DWORD *)(a1 + 8);
      v60 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)v13 + 2);
      *v13 = v60;
      *((_DWORD *)v13 + 2) = v59;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      v3 = (uint64_t *)(a1 + 24);
      v4 = (uint64_t *)(a1 + 12);
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 4);
      v7 = *(_QWORD *)(a1 + 28);
      if (v5 >= v6)
      {
        if (v7 < v5)
        {
          v25 = *(_DWORD *)(a1 + 20);
          v26 = *v4;
          *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v3 = v26;
          *(_DWORD *)(a1 + 32) = v25;
          if (*(_QWORD *)(a1 + 16) < v6)
          {
            v27 = *(_DWORD *)(a1 + 8);
            v28 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v4;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v4 = v28;
            *(_DWORD *)(a1 + 20) = v27;
          }
        }
      }
      else if (v7 >= v5)
      {
        v36 = *(_DWORD *)(a1 + 8);
        v37 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v4 = v37;
        *(_DWORD *)(a1 + 20) = v36;
        if (v7 < *(_QWORD *)(a1 + 16))
        {
          v38 = *(_DWORD *)(a1 + 20);
          v39 = *v4;
          *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v3 = v39;
          *(_DWORD *)(a1 + 32) = v38;
        }
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v3;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        *v3 = v9;
        *(_DWORD *)(a1 + 32) = v8;
      }
      v40 = (uint64_t *)(a1 + 36);
      if ((uint64_t *)(a1 + 36) == a2)
        return 1;
      v41 = 0;
      v42 = 0;
      break;
  }
  while (1)
  {
    v43 = *(uint64_t *)((char *)v40 + 4);
    if (v43 < *(uint64_t *)((char *)v3 + 4))
      break;
LABEL_35:
    v3 = v40;
    v41 += 12;
    v40 = (uint64_t *)((char *)v40 + 12);
    if (v40 == a2)
      return 1;
  }
  v44 = *(_DWORD *)v40;
  v45 = v41;
  do
  {
    v46 = a1 + v45;
    *(_QWORD *)(v46 + 36) = *(_QWORD *)(a1 + v45 + 24);
    *(_DWORD *)(v46 + 44) = *(_DWORD *)(a1 + v45 + 32);
    if (v45 == -24)
    {
      *(_DWORD *)a1 = v44;
      *(_QWORD *)(a1 + 4) = v43;
      if (++v42 != 8)
        goto LABEL_35;
      return (uint64_t *)((char *)v40 + 12) == a2;
    }
    v45 -= 12;
  }
  while (v43 < *(_QWORD *)(v46 + 16));
  v47 = a1 + v45;
  *(_DWORD *)(v47 + 36) = v44;
  *(_QWORD *)(v47 + 40) = v43;
  if (++v42 != 8)
    goto LABEL_35;
  return (uint64_t *)((char *)v40 + 12) == a2;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;

  v5 = *(uint64_t *)((char *)a2 + 4);
  v6 = *(uint64_t *)((char *)a3 + 4);
  if (v5 >= *(uint64_t *)((char *)result + 4))
  {
    if (v6 < v5)
    {
      v10 = *((_DWORD *)a2 + 2);
      v11 = *a2;
      v12 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v12;
      *a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
      {
        v13 = *((_DWORD *)result + 2);
        v14 = *result;
        v15 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v15;
        *a2 = v14;
        *((_DWORD *)a2 + 2) = v13;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *((_DWORD *)result + 2);
      v8 = *result;
      v9 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v9;
LABEL_9:
      *a3 = v8;
      *((_DWORD *)a3 + 2) = v7;
      goto LABEL_10;
    }
    v16 = *((_DWORD *)result + 2);
    v17 = *result;
    v18 = *((_DWORD *)a2 + 2);
    *result = *a2;
    *((_DWORD *)result + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
    {
      v7 = *((_DWORD *)a2 + 2);
      v8 = *a2;
      v19 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v19;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)a3 + 4))
  {
    v20 = *((_DWORD *)a3 + 2);
    v21 = *a3;
    v22 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v22;
    *a4 = v21;
    *((_DWORD *)a4 + 2) = v20;
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
    {
      v23 = *((_DWORD *)a2 + 2);
      v24 = *a2;
      v25 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v25;
      *a3 = v24;
      *((_DWORD *)a3 + 2) = v23;
      if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
      {
        v26 = *((_DWORD *)result + 2);
        v27 = *result;
        v28 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v28;
        *a2 = v27;
        *((_DWORD *)a2 + 2) = v26;
      }
    }
  }
  if (*(uint64_t *)((char *)a5 + 4) < *(uint64_t *)((char *)a4 + 4))
  {
    v29 = *((_DWORD *)a4 + 2);
    v30 = *a4;
    v31 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v31;
    *a5 = v30;
    *((_DWORD *)a5 + 2) = v29;
    if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)a3 + 4))
    {
      v32 = *((_DWORD *)a3 + 2);
      v33 = *a3;
      v34 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v34;
      *a4 = v33;
      *((_DWORD *)a4 + 2) = v32;
      if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
      {
        v35 = *((_DWORD *)a2 + 2);
        v36 = *a2;
        v37 = *((_DWORD *)a3 + 2);
        *a2 = *a3;
        *((_DWORD *)a2 + 2) = v37;
        *a3 = v36;
        *((_DWORD *)a3 + 2) = v35;
        if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
        {
          v38 = *((_DWORD *)result + 2);
          v39 = *result;
          v40 = *((_DWORD *)a2 + 2);
          *result = *a2;
          *((_DWORD *)result + 2) = v40;
          *a2 = v39;
          *((_DWORD *)a2 + 2) = v38;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  if (a2 - a1 >= 13 && (unint64_t)v3 >= 0x18)
  {
    v44 = (unint64_t)(v4 - 2) >> 1;
    v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        v46 = (2 * v45) | 1;
        v47 = (int *)&a1[12 * v46];
        if (2 * v45 + 2 < v4)
        {
          v48 = *(_QWORD *)&a1[12 * v46 + 4];
          v49 = *((_QWORD *)v47 + 2);
          v47 += 3 * (v48 < v49);
          if (v48 < v49)
            v46 = 2 * v45 + 2;
        }
        v50 = *(_QWORD *)&a1[12 * v45 + 4];
        if (*(_QWORD *)(v47 + 1) >= v50)
        {
          v51 = (int *)&a1[12 * v45];
          v52 = *v51;
          do
          {
            v53 = v51;
            v51 = v47;
            v54 = *(_QWORD *)v47;
            v53[2] = v51[2];
            *(_QWORD *)v53 = v54;
            if (v44 < v46)
              break;
            v55 = (2 * v46) | 1;
            v47 = (int *)&a1[12 * v55];
            v56 = 2 * v46 + 2;
            if (v56 < v4)
            {
              v57 = *(_QWORD *)&a1[12 * v55 + 4];
              v58 = *((_QWORD *)v47 + 2);
              v47 += 3 * (v57 < v58);
              if (v57 < v58)
                v55 = v56;
            }
            v46 = v55;
          }
          while (*(_QWORD *)(v47 + 1) >= v50);
          *v51 = v52;
          *(_QWORD *)(v51 + 1) = v50;
        }
      }
      v26 = v45-- <= 0;
    }
    while (!v26);
  }
  v5 = (uint64_t *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 24)
    {
      v6 = (uint64_t *)a2;
      do
      {
        if (*(uint64_t *)((char *)v6 + 4) < *(_QWORD *)(a1 + 4))
        {
          v7 = *((_DWORD *)v6 + 2);
          v8 = *v6;
          v9 = *((_DWORD *)a1 + 2);
          *v6 = *(_QWORD *)a1;
          *((_DWORD *)v6 + 2) = v9;
          *(_QWORD *)a1 = v8;
          *((_DWORD *)a1 + 2) = v7;
        }
        v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
LABEL_28:
      v5 = a3;
      goto LABEL_29;
    }
    v10 = (uint64_t *)a2;
    while (1)
    {
      if (*(uint64_t *)((char *)v10 + 4) < *(_QWORD *)(a1 + 4))
      {
        v11 = *((_DWORD *)v10 + 2);
        v12 = *v10;
        v13 = *((_DWORD *)a1 + 2);
        *v10 = *(_QWORD *)a1;
        *((_DWORD *)v10 + 2) = v13;
        *(_QWORD *)a1 = v12;
        *((_DWORD *)a1 + 2) = v11;
        if ((unint64_t)v4 < 3)
        {
          v14 = (int *)(a1 + 12);
          v15 = 1;
          v16 = *(_QWORD *)(a1 + 4);
          if (*((_QWORD *)a1 + 2) >= v16)
            goto LABEL_21;
        }
        else
        {
          v14 = (int *)&a1[12 * (*((_QWORD *)a1 + 2) < *(_QWORD *)(a1 + 28)) + 12];
          if (*((_QWORD *)a1 + 2) >= *(_QWORD *)(a1 + 28))
            v15 = 1;
          else
            v15 = 2;
          v16 = *(_QWORD *)(a1 + 4);
          if (*(_QWORD *)(v14 + 1) >= v16)
          {
LABEL_21:
            v17 = *(_DWORD *)a1;
            v18 = (int *)a1;
            do
            {
              v19 = v18;
              v18 = v14;
              v20 = *(_QWORD *)v14;
              v19[2] = v18[2];
              *(_QWORD *)v19 = v20;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v21 = (2 * v15) | 1;
              v14 = (int *)&a1[12 * v21];
              v22 = 2 * v15 + 2;
              if (v22 < v4)
              {
                v23 = *(_QWORD *)&a1[12 * v21 + 4];
                v24 = *((_QWORD *)v14 + 2);
                v14 += 3 * (v23 < v24);
                if (v23 < v24)
                  v21 = v22;
              }
              v15 = v21;
            }
            while (*(_QWORD *)(v14 + 1) >= v16);
            *v18 = v17;
            *(_QWORD *)(v18 + 1) = v16;
          }
        }
      }
      v10 = (uint64_t *)((char *)v10 + 12);
      if (v10 == a3)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (v3 >= 13)
  {
    v25 = v3 / 0xCuLL;
    do
    {
      v27 = 0;
      v59 = *(_QWORD *)a1;
      v60 = *((_DWORD *)a1 + 2);
      v28 = (uint64_t *)a1;
      do
      {
        v30 = v27 + 1;
        v31 = (int *)v28 + 3 * v27 + 3;
        v32 = (2 * v27) | 1;
        v33 = 2 * v27 + 2;
        if (v33 < v25)
        {
          v34 = *(uint64_t *)((char *)v28 + 12 * v30 + 4);
          v35 = *((_QWORD *)v31 + 2);
          v31 += 3 * (v34 < v35);
          if (v34 < v35)
            v32 = v33;
        }
        v29 = *(_QWORD *)v31;
        *((_DWORD *)v28 + 2) = v31[2];
        *v28 = v29;
        v28 = (uint64_t *)v31;
        v27 = v32;
      }
      while (v32 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
      a2 -= 12;
      if (v31 == (int *)a2)
      {
        v31[2] = v60;
        *(_QWORD *)v31 = v59;
      }
      else
      {
        v36 = *(_QWORD *)a2;
        v31[2] = *((_DWORD *)a2 + 2);
        *(_QWORD *)v31 = v36;
        *(_QWORD *)a2 = v59;
        *((_DWORD *)a2 + 2) = v60;
        v37 = (char *)v31 - a1 + 12;
        if (v37 >= 13)
        {
          v38 = (v37 / 0xCuLL - 2) >> 1;
          v39 = *(_QWORD *)(v31 + 1);
          if (*(_QWORD *)&a1[12 * v38 + 4] < v39)
          {
            v40 = *v31;
            do
            {
              v41 = v31;
              v31 = (int *)&a1[12 * v38];
              v42 = *(_QWORD *)v31;
              v41[2] = v31[2];
              *(_QWORD *)v41 = v42;
              if (!v38)
                break;
              v38 = (v38 - 1) >> 1;
            }
            while (*(_QWORD *)&a1[12 * v38 + 4] < v39);
            *v31 = v40;
            *(_QWORD *)(v31 + 1) = v39;
          }
        }
      }
      v26 = v25-- <= 2;
    }
    while (!v26);
  }
  return v5;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  absl::lts_2020_02_25::hash_internal::CityHashState *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v26 = a1[4];
    if (!v26)
      return;
LABEL_21:
    *((_QWORD *)v26 + 4) = v14 >> 3;
    *((_QWORD *)v26 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = *((_QWORD *)v18 + 1);
      v20 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v18, 4 * v19);
      v21 = ((((unint64_t)v20 + v19) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((_QWORD)v20 + v19));
      v22 = *a1;
      v23 = a1[3];
      v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      v25 = *(_QWORD *)&(*a1)[v24] & (~*(_QWORD *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v24 = (v15 + v24) & (unint64_t)v23;
          v25 = *(_QWORD *)&v22[v24] & (~*(_QWORD *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v26 = a1[4];
  if (v26)
    goto LABEL_21;
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  absl::lts_2020_02_25::hash_internal::CityHashState *v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v1 = result;
  v2 = *(int8x16_t **)result;
  v3 = *((_QWORD *)result + 3);
  v4 = *(_QWORD *)result + v3;
  if (v4 + 1 != *(_QWORD *)result)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)result;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  if (!*((_QWORD *)result + 3))
  {
    v15 = 0;
    *((_QWORD *)result + 5) = -*((_QWORD *)result + 2);
    v32 = *((_QWORD *)result + 4);
    if (!v32)
      return result;
LABEL_26:
    *(_QWORD *)(v32 + 32) = v15 >> 3;
    *(_QWORD *)(v32 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)v1 + v14) == 254)
    {
      v20 = *((_QWORD *)v1 + 1) + 16 * v14;
      v21 = *(_QWORD *)(v20 + 8);
      result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v20, 4 * v21);
      v22 = ((((unint64_t)result + v21) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((_QWORD)result + v21));
      v23 = *(_QWORD *)v1;
      v24 = *((_QWORD *)v1 + 3);
      v25 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
      v26 = *(_QWORD *)(*(_QWORD *)v1 + v25) & (~*(_QWORD *)(*(_QWORD *)v1 + v25) << 7) & 0x8080808080808080;
      if (v26)
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
      }
      else
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v24;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v24;
          v26 = *(_QWORD *)(v23 + v17) & (~*(_QWORD *)(v23 + v17) << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v18 = (v17 + (__clz(__rbit64(v26)) >> 3)) & v24;
      v15 += v16;
      if ((((v18 - v25) ^ (v14 - v25)) & v24) > 7)
      {
        v27 = *(unsigned __int8 *)(v23 + v18);
        v28 = v22 & 0x7F;
        *(_BYTE *)(v23 + v18) = v28;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v18 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v28;
        v29 = *((_QWORD *)v1 + 1);
        if (v27 == 128)
        {
          *(_OWORD *)(v29 + 16 * v18) = *(_OWORD *)(v29 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)v1 + v14) = 0x80;
          *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = 0x80;
        }
        else
        {
          v30 = *(_OWORD *)(v29 + 16 * v14);
          *(_OWORD *)(v29 + 16 * v14) = *(_OWORD *)(v29 + 16 * v18);
          *(_OWORD *)(*((_QWORD *)v1 + 1) + 16 * v18) = v30;
          --v14;
        }
      }
      else
      {
        v19 = v22 & 0x7F;
        *(_BYTE *)(v23 + v14) = v19;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v19;
      }
    }
    ++v14;
  }
  while (v14 != *((_QWORD *)v1 + 3));
  v31 = v14 - (v14 >> 3);
  if (v14 == 7)
    v31 = 6;
  *((_QWORD *)v1 + 5) = v31 - *((_QWORD *)v1 + 2);
  v32 = *((_QWORD *)v1 + 4);
  if (v32)
    goto LABEL_26;
  return result;
}

void std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F985B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F985B70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  if (((*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) & 0x3FFFFFFFCLL) == 8)
    return (operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(*(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator **)(a1 + 8)) & 1) != 0;
  result = operations_research::sat::DisjunctiveOverloadChecker::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1112));
  if ((_DWORD)result)
  {
    result = operations_research::sat::DisjunctiveDetectablePrecedences::Propagate((operations_research::sat::DisjunctiveDetectablePrecedences *)(v1 + 1240));
    if ((_DWORD)result)
    {
      result = operations_research::sat::DisjunctiveDetectablePrecedences::Propagate((operations_research::sat::DisjunctiveDetectablePrecedences *)(v1 + 1392));
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB43300(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F985BF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F985BF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  if ((int)((*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) >> 2) < 3)
    return 1;
  result = operations_research::sat::DisjunctiveNotLast::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1544));
  if ((_DWORD)result)
  {
    result = operations_research::sat::DisjunctiveNotLast::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1648));
    if ((_DWORD)result)
    {
      result = operations_research::sat::DisjunctiveEdgeFinding::Propagate((operations_research::sat::DisjunctiveEdgeFinding *)(v1 + 1936));
      if ((_DWORD)result)
        return operations_research::sat::DisjunctiveEdgeFinding::Propagate((operations_research::sat::DisjunctiveEdgeFinding *)(v1 + 1752));
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::target_type()
{
}

void operations_research::sat::Disjunctive(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F985E20;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DB43568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TaskSet::AddEntry(uint64_t a1, __int128 *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  __int128 *v20;
  _DWORD *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v5 = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  v6 = ((uint64_t)v4 - *(_QWORD *)a1) / 20;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v4 >= v7)
  {
    v10 = v6 + 1;
    if ((unint64_t)(v6 + 1) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)v5) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x666666666666666)
      v12 = 0xCCCCCCCCCCCCCCCLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(20 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[20 * v6];
    v15 = &v13[20 * v12];
    *(_OWORD *)v14 = *a2;
    *((_DWORD *)v14 + 4) = *((_DWORD *)a2 + 4);
    v9 = v14 + 20;
    if (v4 != v5)
    {
      do
      {
        v16 = *(_OWORD *)(v4 - 5);
        *((_DWORD *)v14 - 1) = *(v4 - 1);
        *(_OWORD *)(v14 - 20) = v16;
        v14 -= 20;
        v4 -= 5;
      }
      while (v4 != v5);
      v4 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v15;
    if (v4)
      operator delete(v4);
  }
  else
  {
    v8 = *a2;
    v4[4] = *((_DWORD *)a2 + 4);
    *(_OWORD *)v4 = v8;
    v9 = v4 + 5;
  }
  *(_QWORD *)(a1 + 8) = v9;
  if ((int)v6 >= 1)
  {
    v17 = v6 + 1;
    v18 = 5 * v6;
    while (1)
    {
      v19 = *(_DWORD **)a1;
      if (*(_QWORD *)(*(_QWORD *)a1 + 20 * (v17 - 2) + 4) <= *(_QWORD *)((char *)a2 + 4))
        break;
      v20 = (__int128 *)&v19[5 * (v17 - 2)];
      v21 = &v19[v18];
      v22 = *v20;
      v21[4] = *((_DWORD *)v20 + 4);
      *(_OWORD *)v21 = v22;
      LODWORD(v6) = v6 - 1;
      --v17;
      v18 -= 5;
      if (v17 <= 1)
      {
        LODWORD(v6) = 0;
        break;
      }
    }
  }
  v23 = *(_QWORD *)a1 + 20 * (int)v6;
  v24 = *a2;
  *(_DWORD *)(v23 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v23 = v24;
  if ((int)v6 <= *(_DWORD *)(a1 + 24))
    *(_DWORD *)(a1 + 24) = 0;
}

void operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(uint64_t a1, _DWORD *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;

  v3 = *(char **)a1;
  v2 = *(char **)(a1 + 8);
  v4 = (unint64_t)&v2[-*(_QWORD *)a1];
  v5 = -858993459 * (v4 >> 2);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = 20 * v5;
    while (*(_DWORD *)&v3[v8] != *a2)
    {
      v8 += 20;
      if (v9 == v8)
        return;
    }
    v10 = &v3[v8 + 20];
    v11 = v4 - v8 - 20;
    if (v10 == v2)
    {
      v12 = *(char **)a1;
    }
    else
    {
      memmove(&v3[v8], v10, v4 - v8 - 20);
      v12 = *(char **)a1;
    }
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 2);
    v14 = &v3[v11 + v8];
    *(_QWORD *)(a1 + 8) = v14;
    v15 = (uint64_t)&v3[v8 + v11 - (_QWORD)v12] / 20;
    *(_DWORD *)(a1 + 24) = v15;
    v16 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v14 >= v16)
    {
      v19 = v15 + 1;
      if ((unint64_t)(v15 + 1) > 0xCCCCCCCCCCCCCCCLL)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)v12) >> 2);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x666666666666666)
        v21 = 0xCCCCCCCCCCCCCCCLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v22 = (char *)operator new(20 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[20 * v15];
      *(_OWORD *)v23 = *(_OWORD *)a2;
      *((_DWORD *)v23 + 4) = a2[4];
      v18 = (uint64_t)(v23 + 20);
      if (v14 != v12)
      {
        v24 = 0;
        v25 = &v3[20 * v13];
        do
        {
          v26 = &v25[v24 + v8];
          v27 = &v23[v24];
          v28 = *(_OWORD *)(v26 - 20);
          *((_DWORD *)v27 - 1) = *((_DWORD *)v26 - 1);
          *(_OWORD *)(v27 - 20) = v28;
          v24 -= 20;
        }
        while (&v25[v8 + v24] != v12);
        v12 = *(char **)a1;
        v23 += v24;
      }
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = &v22[20 * v21];
      if (v12)
        operator delete(v12);
    }
    else
    {
      v17 = *(_OWORD *)a2;
      *((_DWORD *)v14 + 4) = a2[4];
      *(_OWORD *)v14 = v17;
      v18 = (uint64_t)&v3[4 * (v11 >> 2) + 20 + v8];
    }
    *(_QWORD *)(a1 + 8) = v18;
  }
}

BOOL operations_research::sat::DisjunctiveWithTwoItems::Propagate(operations_research::sat::DisjunctiveWithTwoItems *this)
{
  operations_research::sat::SchedulingConstraintHelper *v2;
  int *v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 1);
  v3 = (int *)*((_QWORD *)v2 + 16);
  v4 = *v3;
  if (*v3 != -1
    && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4 & 0x3F ^ 1u)) & 1) != 0)
  {
    return 1;
  }
  v5 = v3[1];
  if (v5 != -1
    && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 24) + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v5 & 0x3F ^ 1u)) & 1) != 0)
  {
    return 1;
  }
  v6 = (_DWORD *)*((_QWORD *)v2 + 4);
  v7 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 40);
  v8 = (int *)*((_QWORD *)v2 + 7);
  if (*(_QWORD *)(v7 + 12 * v8[1]) <= -*(_QWORD *)(v7 + 12 * (*v6 ^ 1)))
  {
    if (*(_QWORD *)(v7 + 12 * *v8) <= -*(_QWORD *)(v7 + 12 * (v6[1] ^ 1)))
      return 1;
    v9 = 0;
    v4 = v3[1];
    v10 = 1;
    if (v5 == -1)
      goto LABEL_11;
  }
  else
  {
    v9 = 1;
    v10 = 0;
    if (v4 == -1)
      goto LABEL_11;
  }
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
  {
    v12 = v9;
    v13 = v3[v9];
    if ((_DWORD)v13 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_11:
  v11 = *(_QWORD *)(v7 + 12 * v8[v10]);
  v12 = v9;
  if (*(_QWORD *)(v7 + 12 * (int)v6[v9]) < v11)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
    operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)this + 1), v10, v9);
    operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v10);
    operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*((_QWORD **)this + 1), v10, v11);
    if (!operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*((_QWORD *)this + 1), v9, v11))return 0;
    v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 1);
    v3 = (int *)*((_QWORD *)v2 + 16);
  }
  v13 = v3[v9];
  if ((_DWORD)v13 != -1)
  {
LABEL_17:
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 24) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
      goto LABEL_18;
    return 1;
  }
LABEL_18:
  v14 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 40);
  v15 = *(_QWORD *)(v14 + 12 * (*(_DWORD *)(*((_QWORD *)v2 + 4) + 4 * v12) ^ 1));
  if (v15 <= *(_QWORD *)(v14 + 12 * (*(_DWORD *)(*((_QWORD *)v2 + 7) + 4 * v10) ^ 1)))
    return 1;
  v16 = -v15;
  operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)this + 1), v10, v9);
  operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v9);
  operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v9, v16);
  return operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(*((_QWORD *)this + 1), v10, v16) != 0;
}

uint64_t operations_research::sat::DisjunctiveOverloadChecker::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  void **v2;
  uint64_t started;
  int *v4;
  int *v5;
  uint64_t v6;
  operations_research::sat::SchedulingConstraintHelper *v7;
  int64_t v8;
  _QWORD *v9;
  int v10;
  int64_t v11;
  unint64_t v12;
  operations_research::sat::SchedulingConstraintHelper *v13;
  operations_research::sat::SchedulingConstraintHelper *v14;
  operations_research::sat::SchedulingConstraintHelper *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  operations_research::sat::SchedulingConstraintHelper *v19;
  unint64_t v20;
  int v21;
  operations_research::sat::SchedulingConstraintHelper *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  operations_research::sat::SchedulingConstraintHelper *v33;
  operations_research::sat::SchedulingConstraintHelper *v34;
  operations_research::sat::SchedulingConstraintHelper *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  operations_research::sat::SchedulingConstraintHelper *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;

  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[1], 1);
  v2 = (void **)(this + 2);
  this[3] = this[2];
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[1]);
  v5 = *(int **)started;
  v4 = *(int **)(started + 8);
  if (*(int **)started != v4)
  {
    v6 = 0;
    v46 = *(int **)(started + 8);
    v47 = 0;
    v7 = this[1];
    v8 = 0x8000000000000002;
    while (1)
    {
      v10 = *v5;
      v11 = *(_QWORD *)(v5 + 1);
      v12 = *(int *)(*((_QWORD *)v7 + 16) + 4 * *v5);
      if ((_DWORD)v12 == -1
        || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 & 0x3F ^ 1)) & 1) == 0)
      {
        if (v11 < v8)
        {
          v14 = this[3];
          v13 = this[4];
          if (v14 < v13)
          {
            *(_DWORD *)v14 = v10;
            *(_QWORD *)((char *)v14 + 4) = v11;
            v15 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
            this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
            v7 = this[1];
            v16 = *(_DWORD *)(*((_QWORD *)v7 + 10) + 4 * v10);
            if (v16 != -1)
              goto LABEL_11;
LABEL_28:
            v18 = (_QWORD *)(*((_QWORD *)v7 + 13) + 8 * v10);
            v17 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 40);
            goto LABEL_29;
          }
          v22 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v2) >> 2);
          v24 = v23 + 1;
          if (v23 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v22) >> 2);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0xAAAAAAAAAAAAAAALL)
            v26 = 0x1555555555555555;
          else
            v26 = v24;
          v45 = v6;
          if (v26)
          {
            if (v26 > 0x1555555555555555)
              goto LABEL_60;
            v27 = (char *)operator new(12 * v26);
            v28 = (uint64_t)&v27[12 * v23];
            *(_DWORD *)v28 = v10;
            *(_QWORD *)(v28 + 4) = v11;
            v29 = v28;
            if (v14 != v22)
            {
LABEL_23:
              v4 = v46;
              do
              {
                v30 = *(_QWORD *)((char *)v14 - 12);
                v14 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 - 12);
                v31 = *((_DWORD *)v14 + 2);
                *(_QWORD *)(v29 - 12) = v30;
                v29 -= 12;
                *(_DWORD *)(v29 + 8) = v31;
              }
              while (v14 != v22);
              v14 = this[2];
              v15 = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
              this[2] = (operations_research::sat::SchedulingConstraintHelper *)v29;
              this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
              this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v27[12 * v26];
              if (v14)
LABEL_26:
                operator delete(v14);
LABEL_27:
              v2 = (void **)(this + 2);
              v6 = v45;
              this[3] = v15;
              v7 = this[1];
              v16 = *(_DWORD *)(*((_QWORD *)v7 + 10) + 4 * v10);
              if (v16 == -1)
                goto LABEL_28;
LABEL_11:
              v17 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 40);
              v18 = (_QWORD *)(v17 + 12 * v16);
LABEL_29:
              v8 += *v18;
              if (v8 > -*(_QWORD *)(v17 + 12 * (*(_DWORD *)(*((_QWORD *)v7 + 7) + 4 * v10) ^ 1)))
              {
                v6 = -1431655765
                   * ((unint64_t)(v15 - (operations_research::sat::SchedulingConstraintHelper *)*v2) >> 2);
                v47 = v8;
              }
              goto LABEL_5;
            }
          }
          else
          {
            v27 = 0;
            v28 = 12 * v23;
            *(_DWORD *)v28 = v10;
            *(_QWORD *)(v28 + 4) = v11;
            v29 = 12 * v23;
            if (v14 != v22)
              goto LABEL_23;
          }
          v4 = v46;
          v15 = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
          this[2] = (operations_research::sat::SchedulingConstraintHelper *)v29;
          this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
          this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v27[12 * v26];
          if (v14)
            goto LABEL_26;
          goto LABEL_27;
        }
        v19 = this[2];
        v20 = 0xAAAAAAAAAAAAAAABLL * ((this[3] - v19) >> 2);
        if ((int)v6 <= v20)
        {
          if ((int)v6 < v20)
            this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v19 + 12 * (int)v6);
        }
        else
        {
          v21 = v6;
          std::vector<operations_research::sat::TaskTime>::__append((uint64_t)v2, (int)v6 - v20);
          LODWORD(v6) = v21;
        }
        if ((int)v6 >= 1)
        {
          result = operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow((uint64_t)this, v47);
          if (!(_DWORD)result)
            return result;
        }
        v33 = this[2];
        this[3] = v33;
        v34 = this[4];
        if (v33 >= v34)
        {
          v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 2);
          v37 = 2 * v36;
          if (2 * v36 <= 1)
            v37 = 1;
          if (v36 >= 0xAAAAAAAAAAAAAAALL)
            v38 = 0x1555555555555555;
          else
            v38 = v37;
          if (v38 > 0x1555555555555555)
LABEL_60:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = 12 * v38;
          v40 = (char *)operator new(12 * v38);
          *(_DWORD *)v40 = v10;
          *(_QWORD *)(v40 + 4) = v11;
          v35 = (operations_research::sat::SchedulingConstraintHelper *)(v40 + 12);
          this[2] = (operations_research::sat::SchedulingConstraintHelper *)v40;
          this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v40 + 12);
          this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v40[v39];
          if (v33)
            operator delete(v33);
          v4 = v46;
        }
        else
        {
          *(_DWORD *)v33 = v10;
          *(_QWORD *)((char *)v33 + 4) = v11;
          v35 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v33 + 12);
        }
        this[3] = v35;
        v7 = this[1];
        v41 = *(_DWORD *)(*((_QWORD *)v7 + 10) + 4 * v10);
        if (v41 == -1)
          v9 = (_QWORD *)(*((_QWORD *)v7 + 13) + 8 * v10);
        else
          v9 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 40) + 12 * v41);
        v6 = 0;
        v8 = *v9 + v11;
      }
LABEL_5:
      v5 += 3;
      if (v5 == v4)
        goto LABEL_52;
    }
  }
  v47 = 0;
  LODWORD(v6) = 0;
LABEL_52:
  v42 = v6;
  v43 = this[2];
  v44 = 0xAAAAAAAAAAAAAAABLL * ((this[3] - v43) >> 2);
  if ((int)v6 <= v44)
  {
    if ((int)v6 < v44)
      this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v43 + 12 * (int)v6);
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)v2, (int)v6 - v44);
  }
  if (v42 < 1)
    return 1;
  result = operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow((uint64_t)this, v47);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  int64_t v47;
  operations_research::sat::SchedulingConstraintHelper *v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  int *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _OWORD *v65;
  int *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  operations_research::sat::SchedulingConstraintHelper *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  operations_research::sat::SchedulingConstraintHelper *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  _BYTE *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  operations_research::sat::SchedulingConstraintHelper *v102;
  unint64_t v103;
  unint64_t v105;
  uint64_t EnvelopeOf;
  unint64_t v107;
  char *v108;
  int64_t v109;
  operations_research::sat::SchedulingConstraintHelper *v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  int *v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  int *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  _OWORD *v127;
  int *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  operations_research::sat::SchedulingConstraintHelper *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  _BYTE *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int v144;
  int *v145;
  int *v146;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];

  v3 = a1;
  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  v160 = a1 + 64;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)(a1 + 64), v4);
  v5 = *(char **)(v3 + 40);
  v161 = (uint64_t *)(v3 + 40);
  *(_QWORD *)(v3 + 48) = v5;
  v152 = v3;
  v155 = v4;
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v4;
    while (1)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v152 + 16) + 12 * v6);
      v10 = -*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) + 8) + 40)
                       + 12 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) + 56) + 4 * v9) ^ 1));
      if (v10 >= a2)
        goto LABEL_5;
      *(_DWORD *)(*(_QWORD *)(v152 + 104) + 4 * v9) = v6;
      v11 = *(_QWORD *)(v152 + 56);
      if ((unint64_t)v5 >= v11)
        break;
      *(_DWORD *)v5 = v9;
      *(_QWORD *)(v5 + 4) = v10;
      v8 = v5 + 12;
LABEL_4:
      *(_QWORD *)(v152 + 48) = v8;
      v5 = v8;
LABEL_5:
      if (++v6 == v7)
      {
        v22 = *v161;
        v3 = v152;
        goto LABEL_26;
      }
    }
    v12 = (char *)*v161;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*v161] >> 2);
    v14 = v13 + 1;
    if (v13 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v12) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 > 0x1555555555555555)
        goto LABEL_176;
      v17 = (char *)operator new(12 * v16);
      v18 = (uint64_t)&v17[12 * v13];
      *(_DWORD *)v18 = v9;
      *(_QWORD *)(v18 + 4) = v10;
      v19 = v18;
      if (v5 == v12)
        goto LABEL_21;
    }
    else
    {
      v17 = 0;
      v18 = 4 * ((uint64_t)&v5[-*v161] >> 2);
      *(_DWORD *)v18 = v9;
      *(_QWORD *)(v18 + 4) = v10;
      v19 = 12 * v13;
      if (v5 == v12)
        goto LABEL_21;
    }
    do
    {
      v20 = *(_QWORD *)(v5 - 12);
      v5 -= 12;
      v21 = *((_DWORD *)v5 + 2);
      *(_QWORD *)(v19 - 12) = v20;
      v19 -= 12;
      *(_DWORD *)(v19 + 8) = v21;
    }
    while (v5 != v12);
    v5 = (char *)*v161;
LABEL_21:
    v8 = (char *)(v18 + 12);
    *(_QWORD *)(v152 + 40) = v19;
    *(_QWORD *)(v152 + 48) = v18 + 12;
    *(_QWORD *)(v152 + 56) = &v17[12 * v16];
    v4 = v155;
    if (v5)
      operator delete(v5);
    goto LABEL_4;
  }
  v22 = (uint64_t)v5;
LABEL_26:
  v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v22] >> 2));
  if (v5 == (char *)v22)
    v24 = 0;
  else
    v24 = v23;
  v25 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v22, (uint64_t *)v5, (uint64_t)v166, v24, 1);
  v26 = *(int **)(v3 + 40);
  v145 = *(int **)(v3 + 48);
  if (v26 == v145)
    return v25;
  v27 = v160;
  while (1)
  {
    v28 = *v26;
    v146 = v26;
    v29 = *(_QWORD *)(v26 + 1);
    v30 = *(_QWORD **)(v3 + 8);
    v31 = *(int *)(v30[16] + 4 * v28);
    v32 = *(_DWORD *)(v30[16] + 4 * v28);
    if ((_DWORD)v31 != -1
      && ((*(_QWORD *)(*(_QWORD *)(*v30 + 24) + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v32 & 0x3F ^ 1u)) & 1) != 0)
    {
      goto LABEL_31;
    }
    v33 = *(_DWORD *)(v30[10] + 4 * v28);
    if (v33 == -1)
    {
      v34 = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 4 * v28);
      v35 = *(_QWORD *)(v30[13] + 8 * v28);
      if ((_DWORD)v31 == -1)
        goto LABEL_39;
LABEL_38:
      if (((*(_QWORD *)(*(_QWORD *)(*v30 + 24) + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
        goto LABEL_39;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v27, v34, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 12 * v34 + 4), v35);
      if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v27) <= v29)
        goto LABEL_42;
LABEL_126:
      operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
      LODWORD(v29) = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v27, v29);
      v105 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 12 * (int)v29 + 4);
      EnvelopeOf = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelopeOf(v27, v29);
      if ((int)v29 >= v4)
        return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
      v29 = (int)v29;
      v107 = 1 - EnvelopeOf;
      if (EnvelopeOf < (uint64_t)0x8000000000000003)
        v107 = 0x7FFFFFFFFFFFFFFFLL;
      v163 = v107;
      v159 = HIDWORD(v107);
      v154 = v105;
      while (1)
      {
        v109 = *(_QWORD *)(*(_QWORD *)(v3 + 80)
                         + 32
                         * (int)operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeafFromEvent(v27, v29)+ 16);
        if (v109 < 1)
          goto LABEL_132;
        v110 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        v111 = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 12 * v29);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v110, v111);
        v112 = *(_DWORD *)(*((_QWORD *)v110 + 16) + 4 * v111);
        if (v112 != -1)
          break;
LABEL_157:
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v152 + 8), v111, v109, v105);
        v132 = *(operations_research::sat::SchedulingConstraintHelper **)(v152 + 8);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v132, v111);
        LODWORD(v166[0]) = *(_DWORD *)(*((_QWORD *)v132 + 7) + 4 * v111) ^ 1;
        *(_QWORD *)((char *)v166 + 4) = v163;
        v133 = v166[0];
        v135 = (char *)*((_QWORD *)v132 + 49);
        v134 = *((_QWORD *)v132 + 50);
        if ((unint64_t)v135 < v134)
        {
          *(_QWORD *)v135 = v166[0];
          v27 = v160;
          *((_DWORD *)v135 + 2) = v159;
          v108 = v135 + 12;
        }
        else
        {
          v136 = (_BYTE *)*((_QWORD *)v132 + 48);
          v137 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v136) >> 2) + 1;
          if (v137 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 2);
          if (2 * v138 > v137)
            v137 = 2 * v138;
          if (v138 >= 0xAAAAAAAAAAAAAAALL)
            v139 = 0x1555555555555555;
          else
            v139 = v137;
          if (v139)
          {
            if (v139 > 0x1555555555555555)
              goto LABEL_176;
            v140 = (char *)operator new(12 * v139);
          }
          else
          {
            v140 = 0;
          }
          v141 = &v140[4 * ((v135 - v136) >> 2)];
          *(_QWORD *)v141 = v133;
          *((_DWORD *)v141 + 2) = v159;
          v142 = v141;
          if (v135 != v136)
          {
            v27 = v160;
            do
            {
              v143 = *(_QWORD *)(v135 - 12);
              v135 -= 12;
              v144 = *((_DWORD *)v135 + 2);
              *(_QWORD *)(v142 - 12) = v143;
              v142 -= 12;
              *((_DWORD *)v142 + 2) = v144;
            }
            while (v135 != v136);
            v135 = (char *)*((_QWORD *)v132 + 48);
            v108 = v141 + 12;
            *((_QWORD *)v132 + 48) = v142;
            *((_QWORD *)v132 + 49) = v141 + 12;
            *((_QWORD *)v132 + 50) = &v140[12 * v139];
            if (!v135)
              goto LABEL_131;
LABEL_174:
            operator delete(v135);
            goto LABEL_131;
          }
          v27 = v160;
          v108 = v141 + 12;
          *((_QWORD *)v132 + 48) = v141;
          *((_QWORD *)v132 + 49) = v141 + 12;
          *((_QWORD *)v132 + 50) = &v140[12 * v139];
          if (v135)
            goto LABEL_174;
        }
LABEL_131:
        *((_QWORD *)v132 + 49) = v108;
        v3 = v152;
LABEL_132:
        if ((_DWORD)++v29 == v4)
          return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
      }
      v113 = v112 ^ 1;
      v115 = (int *)*((_QWORD *)v110 + 46);
      v114 = *((_QWORD *)v110 + 47);
      if ((unint64_t)v115 < v114)
      {
        *v115 = v113;
        v116 = (uint64_t)(v115 + 1);
LABEL_156:
        *((_QWORD *)v110 + 46) = v116;
        goto LABEL_157;
      }
      v117 = (int *)*((_QWORD *)v110 + 45);
      v118 = v115 - v117;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62)
        goto LABEL_178;
      v120 = v114 - (_QWORD)v117;
      if (v120 >> 1 > v119)
        v119 = v120 >> 1;
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
        v119 = 0x3FFFFFFFFFFFFFFFLL;
      v157 = v119;
      if (v119)
      {
        if (v119 >> 62)
          goto LABEL_176;
        v121 = operator new(4 * v119);
        v122 = (int *)&v121[4 * v118];
        *v122 = v113;
        v116 = (uint64_t)(v122 + 1);
        if (v115 == v117)
          goto LABEL_153;
      }
      else
      {
        v121 = 0;
        v122 = (int *)(4 * v118);
        *(_DWORD *)(4 * v118) = v113;
        v116 = 4 * v118 + 4;
        if (v115 == v117)
        {
LABEL_153:
          *((_QWORD *)v110 + 45) = v122;
          *((_QWORD *)v110 + 46) = v116;
          *((_QWORD *)v110 + 47) = &v121[4 * v157];
          if (v117)
            operator delete(v117);
          v105 = v154;
          v4 = v155;
          goto LABEL_156;
        }
      }
      v123 = (char *)(v115 - 1) - (char *)v117;
      if (v123 < 0x2C)
        goto LABEL_184;
      if ((unint64_t)((char *)v117 - v121) < 0x20)
        goto LABEL_184;
      v124 = (v123 >> 2) + 1;
      v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
      v126 = &v115[v125 / 0xFFFFFFFFFFFFFFFCLL];
      v122 = (int *)((char *)v122 - v125);
      v127 = &v121[4 * v118 - 16];
      v128 = v115 - 4;
      v129 = v124 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v130 = *(_OWORD *)v128;
        *(v127 - 1) = *((_OWORD *)v128 - 1);
        *v127 = v130;
        v127 -= 2;
        v128 -= 8;
        v129 -= 8;
      }
      while (v129);
      v115 = v126;
      if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_184:
        do
        {
          v131 = *--v115;
          *--v122 = v131;
        }
        while (v115 != v117);
      }
      goto LABEL_153;
    }
    v34 = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 4 * v28);
    v35 = *(_QWORD *)(*(_QWORD *)(v30[1] + 40) + 12 * v33);
    if ((_DWORD)v31 != -1)
      goto LABEL_38;
LABEL_39:
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v27, v34, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 12 * v34 + 4), v35, v35);
    if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v27) > v29)
      goto LABEL_126;
LABEL_42:
    v151 = v29;
    if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v27) > v29)
      break;
LABEL_31:
    v26 = v146 + 3;
    if (v146 + 3 == v145)
      return 1;
  }
  while (2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
    v165 = 0;
    v164 = 0;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v27, v29, (int *)&v165 + 1, (int *)&v165, &v164);
    v36 = *(_QWORD *)(v3 + 8);
    v37 = *(_QWORD *)(v3 + 16);
    v38 = *(int *)(v37 + 12 * (int)v165);
    v39 = *(_DWORD *)(*(_QWORD *)(v36 + 80) + 4 * v38);
    if (v39 == -1)
      v40 = (unint64_t *)(*(_QWORD *)(v36 + 104) + 8 * v38);
    else
      v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 40) + 12 * v39);
    v41 = *v40;
    v42 = SHIDWORD(v165);
    v162 = *(_QWORD *)(v37 + 12 * SHIDWORD(v165) + 4);
    v43 = v29 + ~v164;
    v44 = *v40 + v43;
    if (SHIDWORD(v165) >= v4)
    {
      v83 = v29;
      v84 = -v44;
      goto LABEL_98;
    }
    v149 = v41 + v43;
    v150 = v38;
    v147 = -v44;
    v148 = *v40;
    v45 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 >= (uint64_t)0x8000000000000002)
      v45 = -v44;
    v158 = v45;
    v156 = HIDWORD(v45);
    while (2)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v3 + 80)
                      + 32
                      * (int)operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeafFromEvent(v27, v42)+ 16);
      if (v47 >= 1)
      {
        v48 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        v49 = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 12 * v42);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v48, v49);
        v50 = *(_DWORD *)(*((_QWORD *)v48 + 16) + 4 * v49);
        if (v50 != -1)
        {
          v51 = v50 ^ 1;
          v53 = (int *)*((_QWORD *)v48 + 46);
          v52 = *((_QWORD *)v48 + 47);
          if ((unint64_t)v53 < v52)
          {
            *v53 = v51;
            v54 = (uint64_t)(v53 + 1);
            goto LABEL_79;
          }
          v55 = (int *)*((_QWORD *)v48 + 45);
          v56 = v53 - v55;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
LABEL_178:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v58 = v52 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          v153 = v57;
          if (v57)
          {
            if (v57 >> 62)
              goto LABEL_176;
            v59 = operator new(4 * v57);
            v60 = (int *)&v59[4 * v56];
            *v60 = v51;
            v54 = (uint64_t)(v60 + 1);
            if (v53 == v55)
              goto LABEL_76;
LABEL_70:
            v61 = (char *)(v53 - 1) - (char *)v55;
            if (v61 < 0x2C)
              goto LABEL_185;
            if ((unint64_t)((char *)v55 - v59) < 0x20)
              goto LABEL_185;
            v62 = (v61 >> 2) + 1;
            v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            v64 = &v53[v63 / 0xFFFFFFFFFFFFFFFCLL];
            v60 = (int *)((char *)v60 - v63);
            v65 = &v59[4 * v56 - 16];
            v66 = v53 - 4;
            v67 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v68 = *(_OWORD *)v66;
              *(v65 - 1) = *((_OWORD *)v66 - 1);
              *v65 = v68;
              v65 -= 2;
              v66 -= 8;
              v67 -= 8;
            }
            while (v67);
            v53 = v64;
            if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_185:
              do
              {
                v69 = *--v53;
                *--v60 = v69;
              }
              while (v53 != v55);
            }
          }
          else
          {
            v59 = 0;
            v60 = (int *)(4 * v56);
            *(_DWORD *)(4 * v56) = v51;
            v54 = 4 * v56 + 4;
            if (v53 != v55)
              goto LABEL_70;
          }
LABEL_76:
          *((_QWORD *)v48 + 45) = v60;
          *((_QWORD *)v48 + 46) = v54;
          *((_QWORD *)v48 + 47) = &v59[4 * v153];
          if (v55)
            operator delete(v55);
          v3 = v152;
LABEL_79:
          *((_QWORD *)v48 + 46) = v54;
        }
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v3 + 8), v49, v47, v162);
        v70 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v70, v49);
        LODWORD(v166[0]) = *(_DWORD *)(*((_QWORD *)v70 + 7) + 4 * v49) ^ 1;
        *(_QWORD *)((char *)v166 + 4) = v158;
        v71 = v166[0];
        v73 = (char *)*((_QWORD *)v70 + 49);
        v72 = *((_QWORD *)v70 + 50);
        if ((unint64_t)v73 < v72)
        {
          *(_QWORD *)v73 = v166[0];
          v4 = v155;
          *((_DWORD *)v73 + 2) = v156;
          v46 = v73 + 12;
        }
        else
        {
          v74 = (_BYTE *)*((_QWORD *)v70 + 48);
          v75 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v74) >> 2) + 1;
          v4 = v155;
          if (v75 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (_QWORD)v74) >> 2);
          if (2 * v76 > v75)
            v75 = 2 * v76;
          if (v76 >= 0xAAAAAAAAAAAAAAALL)
            v77 = 0x1555555555555555;
          else
            v77 = v75;
          if (v77)
          {
            if (v77 > 0x1555555555555555)
              goto LABEL_176;
            v78 = (char *)operator new(12 * v77);
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[4 * ((v73 - v74) >> 2)];
          *(_QWORD *)v79 = v71;
          *((_DWORD *)v79 + 2) = v156;
          v80 = v79;
          if (v73 != v74)
          {
            do
            {
              v81 = *(_QWORD *)(v73 - 12);
              v73 -= 12;
              v82 = *((_DWORD *)v73 + 2);
              *(_QWORD *)(v80 - 12) = v81;
              v80 -= 12;
              *((_DWORD *)v80 + 2) = v82;
            }
            while (v73 != v74);
            v73 = (char *)*((_QWORD *)v70 + 48);
          }
          v46 = v79 + 12;
          *((_QWORD *)v70 + 48) = v80;
          *((_QWORD *)v70 + 49) = v79 + 12;
          *((_QWORD *)v70 + 50) = &v78[12 * v77];
          if (v73)
            operator delete(v73);
        }
        *((_QWORD *)v70 + 49) = v46;
        v27 = v160;
      }
      if ((_DWORD)++v42 != v4)
        continue;
      break;
    }
    v36 = *(_QWORD *)(v3 + 8);
    v38 = v150;
    v83 = v151;
    v41 = v148;
    v44 = v149;
    v84 = v147;
LABEL_98:
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v36, v38, v41, v162);
    v85 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v85, v38);
    v86 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 >= (uint64_t)0x8000000000000002)
      v86 = v84;
    LODWORD(v166[0]) = *(_DWORD *)(*((_QWORD *)v85 + 7) + 4 * v38) ^ 1;
    *(_QWORD *)((char *)v166 + 4) = v86;
    v87 = v166[0];
    v88 = HIDWORD(v86);
    v90 = (char *)*((_QWORD *)v85 + 49);
    v89 = *((_QWORD *)v85 + 50);
    if ((unint64_t)v90 < v89)
    {
      v91 = v38;
      *(_QWORD *)v90 = v166[0];
      *((_DWORD *)v90 + 2) = HIDWORD(v86);
      v92 = v90 + 12;
      v29 = v83;
      goto LABEL_120;
    }
    v93 = (_BYTE *)*((_QWORD *)v85 + 48);
    v94 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v93) >> 2) + 1;
    if (v94 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)v93) >> 2);
    if (2 * v95 > v94)
      v94 = 2 * v95;
    if (v95 >= 0xAAAAAAAAAAAAAAALL)
      v96 = 0x1555555555555555;
    else
      v96 = v94;
    if (!v96)
    {
      v97 = 0;
      goto LABEL_112;
    }
    if (v96 > 0x1555555555555555)
LABEL_176:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v97 = (char *)operator new(12 * v96);
LABEL_112:
    v98 = &v97[4 * ((v90 - v93) >> 2)];
    *(_QWORD *)v98 = v87;
    *((_DWORD *)v98 + 2) = v88;
    v99 = v98;
    if (v90 == v93)
    {
      v29 = v151;
    }
    else
    {
      v29 = v151;
      do
      {
        v100 = *(_QWORD *)(v90 - 12);
        v90 -= 12;
        v101 = *((_DWORD *)v90 + 2);
        *(_QWORD *)(v99 - 12) = v100;
        v99 -= 12;
        *((_DWORD *)v99 + 2) = v101;
      }
      while (v90 != v93);
      v90 = (char *)*((_QWORD *)v85 + 48);
    }
    v92 = v98 + 12;
    *((_QWORD *)v85 + 48) = v99;
    *((_QWORD *)v85 + 49) = v98 + 12;
    *((_QWORD *)v85 + 50) = &v97[12 * v96];
    v3 = v152;
    if (v90)
      operator delete(v90);
    v91 = v38;
LABEL_120:
    *((_QWORD *)v85 + 49) = v92;
    v102 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
    v103 = *(int *)(*((_QWORD *)v102 + 16) + 4 * v91);
    if ((_DWORD)v103 != -1
      && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v102 + 24) + ((v103 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v103 & 0x3F ^ 1)) & 1) != 0
      || (operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(v102, v91) & 1) != 0)
    {
      v27 = v160;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v160, v165);
      if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v160) <= v29)
        goto LABEL_31;
      continue;
    }
    return 0;
  }
}

uint64_t operations_research::sat::DisjunctiveDetectablePrecedences::Propagate(operations_research::sat::DisjunctiveDetectablePrecedences *this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t started;
  int *v5;
  int *v6;
  int64_t v7;
  int64_t v8;
  int v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int *v20;
  uint64_t result;
  unint64_t v22;
  _DWORD *v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int *v41;
  char v42;

  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 14), *((unsigned __int8 *)this + 104));
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  v2 = (int)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 14) + 40) - *(_QWORD *)(*((_QWORD *)this + 14) + 32)) >> 2);
  v42 = 0;
  std::vector<BOOL>::assign((char **)this + 7, v2, &v42);
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                                  + 14));
  v6 = *(int **)started;
  v5 = *(int **)(started + 8);
  if (*(int **)started != v5)
  {
    v7 = 0x8000000000000002;
    v41 = *(int **)(started + 8);
    do
    {
      v9 = *v6;
      v10 = *(_QWORD *)(v6 + 1);
      v11 = (_QWORD *)*((_QWORD *)this + 14);
      v12 = *(int *)(v11[16] + 4 * *v6);
      if ((_DWORD)v12 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*v11 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 & 0x3F ^ 1)) & 1) != 0)
      {
        v8 = v7;
      }
      else
      {
        v13 = *(_DWORD *)(v11[10] + 4 * v9);
        if (v13 == -1)
        {
          v15 = (uint64_t *)(v11[13] + 8 * v9);
          v14 = *(_QWORD *)(v11[1] + 40);
        }
        else
        {
          v14 = *(_QWORD *)(v11[1] + 40);
          v15 = (uint64_t *)(v14 + 12 * v13);
        }
        v16 = *v15;
        v8 = *v15 + v10;
        v17 = (char *)*((_QWORD *)this + 2);
        if (*(_QWORD *)(v14 + 12 * *(int *)(v11[4] + 4 * v9)) < v7)
        {
          v18 = *((_QWORD *)this + 3);
          if ((unint64_t)v17 < v18)
          {
            *(_DWORD *)v17 = v9;
            *(_QWORD *)(v17 + 4) = v8;
            v19 = v17 + 12;
LABEL_32:
            *((_QWORD *)this + 2) = v19;
            if (v7 <= v10)
              v34 = v10;
            else
              v34 = v7;
            v8 = v16 + v34;
            goto LABEL_4;
          }
          v24 = (int *)*v3;
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*v3] >> 2);
          v26 = v25 + 1;
          if (v25 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v24) >> 2);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0xAAAAAAAAAAAAAAALL)
            v28 = 0x1555555555555555;
          else
            v28 = v26;
          v40 = v28;
          if (v28)
          {
            if (v28 > 0x1555555555555555)
              goto LABEL_53;
            v29 = (char *)operator new(12 * v28);
            v30 = (uint64_t)&v29[12 * v25];
            *(_DWORD *)v30 = v9;
            *(_QWORD *)(v30 + 4) = v8;
            v31 = v30;
            if (v17 != (char *)v24)
            {
LABEL_27:
              v3 = (_QWORD *)((char *)this + 8);
              do
              {
                v32 = *(_QWORD *)(v17 - 12);
                v17 -= 12;
                v33 = *((_DWORD *)v17 + 2);
                *(_QWORD *)(v31 - 12) = v32;
                v31 -= 12;
                *(_DWORD *)(v31 + 8) = v33;
              }
              while (v17 != (char *)v24);
              v17 = (char *)*((_QWORD *)this + 1);
              v19 = (char *)(v30 + 12);
              *((_QWORD *)this + 1) = v31;
              *((_QWORD *)this + 2) = v30 + 12;
              *((_QWORD *)this + 3) = &v29[12 * v40];
              if (v17)
LABEL_30:
                operator delete(v17);
LABEL_31:
              v5 = v41;
              goto LABEL_32;
            }
          }
          else
          {
            v29 = 0;
            v30 = 12 * v25;
            *(_DWORD *)v30 = v9;
            *(_QWORD *)(v30 + 4) = v8;
            v31 = 12 * v25;
            if (v17 != (char *)v24)
              goto LABEL_27;
          }
          v3 = (_QWORD *)((char *)this + 8);
          v19 = (char *)(v30 + 12);
          *((_QWORD *)this + 1) = v31;
          *((_QWORD *)this + 2) = v30 + 12;
          *((_QWORD *)this + 3) = &v29[12 * v40];
          if (v17)
            goto LABEL_30;
          goto LABEL_31;
        }
        v20 = (int *)*v3;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*v3] >> 2) >= 2)
        {
          result = operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow((char **)this);
          if (!(_DWORD)result)
            return result;
          v20 = (int *)*v3;
          v5 = v41;
        }
        *((_QWORD *)this + 2) = v20;
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v20 >= v22)
        {
          v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v20) >> 2);
          v36 = 2 * v35;
          if (2 * v35 <= 1)
            v36 = 1;
          if (v35 >= 0xAAAAAAAAAAAAAAALL)
            v37 = 0x1555555555555555;
          else
            v37 = v36;
          if (v37 > 0x1555555555555555)
LABEL_53:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v38 = 12 * v37;
          v39 = (char *)operator new(12 * v37);
          *(_DWORD *)v39 = v9;
          *(_QWORD *)(v39 + 4) = v8;
          v23 = v39 + 12;
          *((_QWORD *)this + 1) = v39;
          *((_QWORD *)this + 2) = v39 + 12;
          *((_QWORD *)this + 3) = &v39[v38];
          if (v20)
            operator delete(v20);
          v5 = v41;
        }
        else
        {
          *v20 = v9;
          *(_QWORD *)(v20 + 1) = v8;
          v23 = v20 + 3;
        }
        *((_QWORD *)this + 2) = v23;
      }
LABEL_4:
      v6 += 3;
      v7 = v8;
    }
    while (v6 != v5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2) < 2)
    return 1;
  result = operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow((char **)this);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow(char **this)
{
  operations_research::sat::DisjunctiveDetectablePrecedences *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  int *v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  _QWORD *v57;
  int v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  operations_research::sat::SchedulingConstraintHelper *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  int v109;
  operations_research::sat::SchedulingConstraintHelper *v110;
  int v111;
  int v112;
  unint64_t v113;
  int *v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  int *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  _OWORD *v127;
  int *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  operations_research::sat::SchedulingConstraintHelper *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  _BYTE *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int v144;
  char started;
  unint64_t v146;
  _QWORD *v147;
  int v148;
  int *v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  _BYTE *v159;
  _DWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _OWORD *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  int v170;
  int *v172;
  unint64_t v173;
  unint64_t v174;
  int *v175;
  void **v176;
  char *v177;
  int64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  unsigned int v182;
  char *v183;
  uint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  operations_research::sat::DisjunctiveDetectablePrecedences *v191;
  _BYTE v192[12];
  uint64_t v193;

  v1 = (operations_research::sat::DisjunctiveDetectablePrecedences *)this;
  v3 = this[1];
  v2 = this[2];
  v4 = v3;
  if ((int)(-1431655765 * ((unint64_t)(v2 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v2 - v3) >> 2), v3, v2, 0);
  }
  else if (v2 - v3 >= 24)
  {
    v5 = v2 - 12;
    if (v2 - 12 != v3)
    {
      v4 = v2 - 12;
      v6 = v2 - 12;
      do
      {
        v7 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v8 = *((_DWORD *)v6 + 2);
        *(_QWORD *)v192 = v7;
        *(_DWORD *)&v192[8] = v8;
        if (*((_QWORD *)v6 + 2) < *(uint64_t *)&v192[4])
        {
          v9 = *((_DWORD *)v5 + 2);
          v10 = *(_QWORD *)v5;
          *(_QWORD *)v5 = *(_QWORD *)v6;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v6 = v10;
          *((_DWORD *)v6 + 2) = v9;
          v4 = v5;
        }
        v5 = v6;
      }
      while (v6 != v3);
    }
    while (1)
    {
      v11 = v4 + 12;
      if (v4 + 12 == v2)
        break;
      v12 = *((_DWORD *)v4 + 3);
      v13 = *((_QWORD *)v4 + 2);
      v4 += 12;
      v14 = *((_DWORD *)v11 - 1);
      *(_QWORD *)v192 = *(_QWORD *)(v11 - 12);
      *(_DWORD *)&v192[8] = v14;
      if (v13 < *(uint64_t *)&v192[4])
      {
        v15 = v11;
        do
        {
          v16 = *(_QWORD *)(v11 - 12);
          v11 -= 12;
          *(_QWORD *)v15 = v16;
          *((_DWORD *)v15 + 2) = *((_DWORD *)v15 - 1);
          v17 = *((_QWORD *)v15 - 3);
          v18 = *((_DWORD *)v15 - 4);
          *(_QWORD *)v192 = v17;
          *(_DWORD *)&v192[8] = v18;
          v15 = v11;
        }
        while (v13 < *(uint64_t *)&v192[4]);
      }
      *(_DWORD *)v11 = v12;
      *(_QWORD *)(v11 + 4) = v13;
    }
  }
  v19 = (char *)*((_QWORD *)v1 + 4);
  v21 = (int *)*((_QWORD *)v1 + 1);
  v20 = (int *)*((_QWORD *)v1 + 2);
  v22 = *((_QWORD *)v20 - 1);
  v184 = (uint64_t *)((char *)v1 + 32);
  *((_QWORD *)v1 + 5) = v19;
  if (v21 == v20)
    return 1;
  v191 = v1;
  do
  {
    while (1)
    {
      while (1)
      {
        v23 = *v21;
        v24 = (_QWORD *)*((_QWORD *)v1 + 14);
        v25 = -*(_QWORD *)(*(_QWORD *)(v24[1] + 40) + 12 * (*(_DWORD *)(v24[4] + 4 * *v21) ^ 1));
        if (v22 > v25)
        {
          v26 = *(int *)(v24[16] + 4 * v23);
          if ((_DWORD)v26 == -1
            || ((*(_QWORD *)(*(_QWORD *)(*v24 + 24) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v24[16] + 4 * v23)) & 1) != 0)
          {
            break;
          }
        }
        v1 = v191;
        v21 += 3;
        if (v21 == v20)
          goto LABEL_42;
      }
      v27 = *((_QWORD *)v191 + 6);
      if ((unint64_t)v19 >= v27)
        break;
      *(_DWORD *)v19 = v23;
      *(_QWORD *)(v19 + 4) = v25;
      v1 = v191;
      *((_QWORD *)v191 + 5) = v19 + 12;
      v19 += 12;
      v21 += 3;
      if (v21 == v20)
        goto LABEL_42;
    }
    v28 = *v184;
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-*v184] >> 2);
    v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v28) >> 2);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0xAAAAAAAAAAAAAAALL)
      v32 = 0x1555555555555555;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 > 0x1555555555555555)
        goto LABEL_184;
      v33 = (char *)operator new(12 * v32);
      v34 = (uint64_t)&v33[12 * v29];
      *(_DWORD *)v34 = v23;
      *(_QWORD *)(v34 + 4) = v25;
      v35 = v34;
      if (v19 == (char *)v28)
      {
LABEL_40:
        v1 = v191;
        v38 = (char *)(v34 + 12);
        *((_QWORD *)v191 + 4) = v35;
        *((_QWORD *)v191 + 5) = v34 + 12;
        *((_QWORD *)v191 + 6) = &v33[12 * v32];
        if (v19)
          goto LABEL_36;
        goto LABEL_37;
      }
    }
    else
    {
      v33 = 0;
      v34 = 4 * ((uint64_t)&v19[-*v184] >> 2);
      *(_DWORD *)v34 = v23;
      *(_QWORD *)(v34 + 4) = v25;
      v35 = 12 * v29;
      if (v19 == (char *)v28)
        goto LABEL_40;
    }
    v1 = v191;
    do
    {
      v36 = *(_QWORD *)(v19 - 12);
      v19 -= 12;
      v37 = *((_DWORD *)v19 + 2);
      *(_QWORD *)(v35 - 12) = v36;
      v35 -= 12;
      *(_DWORD *)(v35 + 8) = v37;
    }
    while (v19 != (char *)v28);
    v19 = (char *)*v184;
    v38 = (char *)(v34 + 12);
    *((_QWORD *)v191 + 4) = v35;
    *((_QWORD *)v191 + 5) = v34 + 12;
    *((_QWORD *)v191 + 6) = &v33[12 * v32];
    if (v19)
LABEL_36:
      operator delete(v19);
LABEL_37:
    *((_QWORD *)v1 + 5) = v38;
    v19 = v38;
    v21 += 3;
  }
  while (v21 != v20);
LABEL_42:
  if ((char *)*v184 == v19)
    return 1;
  v39 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(*v184, (uint64_t *)v19, (uint64_t)v192, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-*v184] >> 2)), 1);
  *((_QWORD *)v1 + 16) = *((_QWORD *)v1 + 15);
  *((_DWORD *)v1 + 36) = 0;
  v40 = (int *)*((_QWORD *)v1 + 1);
  v172 = (int *)*((_QWORD *)v1 + 2);
  if (v40 == v172)
    return v39;
  v41 = 0;
  v42 = 0;
  v43 = 0x8000000000000002;
  v176 = (void **)((char *)v1 + 80);
  v177 = (char *)v1 + 120;
  v173 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v1 + 5) - *((_QWORD *)v1 + 4)) >> 2);
  v44 = 0xFFFFFFFFLL;
  v45 = (uint64_t)v1 + 120;
  while (2)
  {
    v46 = *v40;
    v179 = v43;
    v175 = v40;
    if ((int)v42 >= (int)v173)
      goto LABEL_84;
    v187 = *v40;
    v47 = *(_QWORD *)(v40 + 1);
    v48 = (int)v42;
    v189 = v47;
    while (1)
    {
      v56 = (unsigned int *)(*v184 + 12 * v48);
      if (v47 <= *(_QWORD *)(v56 + 1))
        break;
      v55 = *v56;
      if (((*(_QWORD *)(*((_QWORD *)v1 + 7) + (((unint64_t)(int)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
      {
        if ((_DWORD)v44 != -1)
        {
          operations_research::sat::SchedulingConstraintHelper::ClearReason(*((operations_research::sat::SchedulingConstraintHelper **)v1
                                                                            + 14));
          operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v1 + 14), v44);
          operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v1 + 14), v55);
          operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)v1 + 14), v44, v55);
          operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)v1 + 14), v55, v44);
          return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*((operations_research::sat::SchedulingConstraintHelper **)v1
                                                                                      + 14));
        }
        v60 = (char *)*((_QWORD *)v1 + 11);
        v59 = *((_QWORD *)v1 + 12);
        if ((unint64_t)v60 < v59)
        {
          *(_DWORD *)v60 = v55;
          v61 = (uint64_t)(v60 + 4);
          goto LABEL_80;
        }
        v62 = (char *)*v176;
        v63 = v60 - (_BYTE *)*v176;
        v64 = v63 >> 2;
        v65 = (v63 >> 2) + 1;
        if (v65 >> 62)
          goto LABEL_188;
        v66 = v59 - (_QWORD)v62;
        if (v66 >> 1 > v65)
          v65 = v66 >> 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          if (v67 >> 62)
            goto LABEL_184;
          v68 = operator new(4 * v67);
          v69 = &v68[4 * v64];
          *v69 = v55;
          v61 = (uint64_t)(v69 + 1);
          if (v60 == v62)
            goto LABEL_77;
LABEL_71:
          v70 = v60 - 4 - v62;
          if (v70 < 0x2C)
            goto LABEL_191;
          if ((unint64_t)(v60 - &v68[v63]) < 0x20)
            goto LABEL_191;
          v71 = (v70 >> 2) + 1;
          v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
          v73 = &v60[-v72];
          v69 = (_DWORD *)((char *)v69 - v72);
          v74 = &v68[4 * v64 - 16];
          v75 = v60 - 16;
          v76 = v71 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 32;
            v76 -= 8;
          }
          while (v76);
          v60 = v73;
          if (v71 != (v71 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_191:
            do
            {
              v78 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v69 = v78;
            }
            while (v60 != v62);
          }
        }
        else
        {
          v68 = 0;
          v69 = (_DWORD *)(4 * v64);
          *(_DWORD *)(4 * v64) = v55;
          v61 = 4 * v64 + 4;
          if (v60 != v62)
            goto LABEL_71;
        }
LABEL_77:
        v79 = &v68[4 * v67];
        v1 = v191;
        *((_QWORD *)v191 + 10) = v69;
        *((_QWORD *)v191 + 11) = v61;
        *((_QWORD *)v191 + 12) = v79;
        if (v62)
          operator delete(v62);
        v45 = (uint64_t)v177;
        v43 = v179;
LABEL_80:
        v47 = v189;
        *((_QWORD *)v1 + 11) = v61;
        v44 = v55;
        if (++v48 == (int)v173)
          goto LABEL_81;
        continue;
      }
      v57 = (_QWORD *)*((_QWORD *)v1 + 14);
      v58 = *(_DWORD *)(v57[10] + 4 * (int)v55);
      if (v58 == -1)
      {
        v49 = (uint64_t *)(v57[13] + 8 * (int)v55);
        v50 = *(_QWORD *)(v57[1] + 40);
      }
      else
      {
        v50 = *(_QWORD *)(v57[1] + 40);
        v49 = (uint64_t *)(v50 + 12 * v58);
      }
      v51 = *v49;
      *(_DWORD *)v192 = *v56;
      v52 = 4 * (int)v55;
      v53 = *(_QWORD *)(v50 + 12 * *(int *)(v57[4] + v52));
      v54 = *(_QWORD *)(v50 + 12 * *(int *)(v57[7] + v52)) - v51;
      if (v53 > v54)
        v54 = v53;
      *(_QWORD *)&v192[4] = v54;
      v193 = v51;
      operations_research::sat::TaskSet::AddEntry(v45, (__int128 *)v192);
      v41 = 1;
      v55 = v44;
      if (++v48 == (int)v173)
      {
LABEL_81:
        v44 = v55;
        v42 = v173;
        goto LABEL_83;
      }
    }
    v42 = v48;
LABEL_83:
    v46 = v187;
LABEL_84:
    v80 = (char *)*((_QWORD *)v1 + 11);
    v174 = v42;
    if ((_DWORD)v44 != v46)
    {
      v150 = *((_QWORD *)v1 + 12);
      if ((unint64_t)v80 < v150)
      {
        *(_DWORD *)v80 = v46;
        v80 += 4;
        *((_QWORD *)v1 + 11) = v80;
        if ((_DWORD)v44 == -1)
          break;
        goto LABEL_46;
      }
      v151 = v44;
      v152 = (char *)*v176;
      v153 = v80 - (_BYTE *)*v176;
      v154 = v153 >> 2;
      v155 = (v153 >> 2) + 1;
      if (v155 >> 62)
LABEL_188:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v156 = v150 - (_QWORD)v152;
      if (v156 >> 1 > v155)
        v155 = v156 >> 1;
      if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
        v157 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v157 = v155;
      if (v157)
      {
        if (v157 >> 62)
LABEL_184:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v158 = (char *)*((_QWORD *)v1 + 11);
        v159 = operator new(4 * v157);
        v80 = v158;
        v160 = &v159[4 * v154];
        *v160 = v46;
        v161 = (uint64_t)(v160 + 1);
        if (v80 == v152)
          goto LABEL_176;
      }
      else
      {
        v159 = 0;
        v160 = (_DWORD *)(4 * v154);
        *(_DWORD *)(4 * v154) = v46;
        v161 = 4 * v154 + 4;
        if (v80 == v152)
          goto LABEL_176;
      }
      v162 = v80 - 4 - v152;
      if (v162 < 0x2C)
        goto LABEL_192;
      if ((unint64_t)(v80 - &v159[v153]) < 0x20)
        goto LABEL_192;
      v163 = (v162 >> 2) + 1;
      v164 = 4 * (v163 & 0x7FFFFFFFFFFFFFF8);
      v165 = &v80[-v164];
      v160 = (_DWORD *)((char *)v160 - v164);
      v166 = &v159[4 * v154 - 16];
      v167 = v80 - 16;
      v168 = v163 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v169 = *(_OWORD *)v167;
        *(v166 - 1) = *((_OWORD *)v167 - 1);
        *v166 = v169;
        v166 -= 2;
        v167 -= 32;
        v168 -= 8;
      }
      while (v168);
      v80 = v165;
      if (v163 != (v163 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_192:
        do
        {
          v170 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--v160 = v170;
        }
        while (v80 != v152);
      }
LABEL_176:
      *((_QWORD *)v1 + 10) = v160;
      *((_QWORD *)v1 + 11) = v161;
      *((_QWORD *)v1 + 12) = &v159[4 * v157];
      if (v152)
        operator delete(v152);
      v45 = (uint64_t)v177;
      v43 = v179;
      v44 = v151;
      v42 = v174;
      *((_QWORD *)v1 + 11) = v161;
      v80 = (char *)v161;
      if ((_DWORD)v44 == -1)
        break;
LABEL_46:
      v40 = v175 + 3;
      if (v175 + 3 == v172)
        return 1;
      continue;
    }
    break;
  }
  v81 = (int *)*v176;
  if (*v176 == v80)
  {
LABEL_45:
    *((_QWORD *)v1 + 11) = *((_QWORD *)v1 + 10);
    v42 = v174;
    goto LABEL_46;
  }
  v183 = v80;
  while (1)
  {
    v185 = *v81;
    *(_QWORD *)(*((_QWORD *)v1 + 7) + ((v185 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v81;
    if (v41)
    {
      v88 = *((_QWORD *)v1 + 15);
      v89 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v1 + 16) - v88) >> 2);
      v90 = *((_DWORD *)v1 + 36);
      v43 = 0x8000000000000002;
      if (v90 < (int)v89)
      {
        v91 = (uint64_t *)(v88 + 20 * v90 + 12);
        v92 = (int)v89 - (uint64_t)v90;
        do
        {
          while (1)
          {
            v94 = *(v91 - 1);
            if (v94 >= v43)
              break;
            v93 = *v91;
            v91 = (uint64_t *)((char *)v91 + 20);
            v43 += v93;
            ++v90;
            if (!--v92)
              goto LABEL_98;
          }
          *((_DWORD *)v1 + 36) = v90;
          v95 = *v91;
          v91 = (uint64_t *)((char *)v91 + 20);
          v43 = v95 + v94;
          ++v90;
          --v92;
        }
        while (v92);
      }
    }
LABEL_98:
    v96 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)v1 + 14);
    v97 = v185;
    if (v43 > *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v96 + 1) + 40) + 12 * *(int *)(*((_QWORD *)v96 + 4) + 4 * v185)))
    {
      v181 = v81;
      v182 = v44;
      v98 = *((int *)v1 + 36);
      operations_research::sat::SchedulingConstraintHelper::ClearReason(v96);
      v99 = (_QWORD *)*((_QWORD *)v1 + 14);
      v100 = *(_QWORD *)(v99[1] + 40);
      v101 = *(_DWORD *)(v99[10] + 4 * v185);
      if (v101 == -1)
        v102 = (_QWORD *)(v99[13] + 8 * v185);
      else
        v102 = (_QWORD *)(v100 + 12 * v101);
      v103 = *(_QWORD *)(v100 + 12 * *(int *)(v99[4] + 4 * v185));
      v104 = *(_QWORD *)(v100 + 12 * *(int *)(v99[7] + 4 * v185)) - *v102;
      if (v103 > v104)
        v104 = v103;
      v105 = *v102 + v104;
      v106 = *((_QWORD *)v1 + 15);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v1 + 16) - v106) >> 2) > v98)
      {
        v178 = v105;
        v180 = v43;
        v107 = 1 - v105;
        if (v105 < (uint64_t)0x8000000000000003)
          v107 = 0x7FFFFFFFFFFFFFFFLL;
        v188 = v107;
        v190 = *(_QWORD *)(v106 + 20 * (int)v98 + 4);
        v186 = HIDWORD(v107);
        while (1)
        {
          v109 = *(_DWORD *)(v106 + 20 * v98);
          v110 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)v1 + 14);
          operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v110, v109);
          v111 = *(_DWORD *)(*((_QWORD *)v110 + 16) + 4 * v109);
          if (v111 != -1)
            break;
LABEL_131:
          operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)v1 + 14), v109, *(_QWORD *)(*((_QWORD *)v1 + 15) + 20 * v98 + 12), v190);
          v132 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)v1 + 14);
          operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v132, v109);
          *(_DWORD *)v192 = *(_DWORD *)(*((_QWORD *)v132 + 4) + 4 * v109) ^ 1;
          *(_QWORD *)&v192[4] = v188;
          v133 = *(_QWORD *)v192;
          v135 = (char *)*((_QWORD *)v132 + 49);
          v134 = *((_QWORD *)v132 + 50);
          if ((unint64_t)v135 < v134)
          {
            *(_QWORD *)v135 = *(_QWORD *)v192;
            *((_DWORD *)v135 + 2) = v186;
            v108 = v135 + 12;
          }
          else
          {
            v136 = (_BYTE *)*((_QWORD *)v132 + 48);
            v137 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v136) >> 2) + 1;
            if (v137 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 2);
            if (2 * v138 > v137)
              v137 = 2 * v138;
            if (v138 >= 0xAAAAAAAAAAAAAAALL)
              v139 = 0x1555555555555555;
            else
              v139 = v137;
            if (v139)
            {
              if (v139 > 0x1555555555555555)
                goto LABEL_184;
              v140 = (char *)operator new(12 * v139);
            }
            else
            {
              v140 = 0;
            }
            v141 = &v140[4 * ((v135 - v136) >> 2)];
            *(_QWORD *)v141 = v133;
            *((_DWORD *)v141 + 2) = v186;
            v142 = v141;
            if (v135 != v136)
            {
              do
              {
                v143 = *(_QWORD *)(v135 - 12);
                v135 -= 12;
                v144 = *((_DWORD *)v135 + 2);
                *(_QWORD *)(v142 - 12) = v143;
                v142 -= 12;
                *((_DWORD *)v142 + 2) = v144;
              }
              while (v135 != v136);
              v135 = (char *)*((_QWORD *)v132 + 48);
            }
            v108 = v141 + 12;
            *((_QWORD *)v132 + 48) = v142;
            *((_QWORD *)v132 + 49) = v141 + 12;
            *((_QWORD *)v132 + 50) = &v140[12 * v139];
            if (v135)
              operator delete(v135);
          }
          *((_QWORD *)v132 + 49) = v108;
          ++v98;
          v106 = *((_QWORD *)v1 + 15);
          if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v1 + 16) - v106) >> 2) <= v98)
          {
            v99 = (_QWORD *)*((_QWORD *)v1 + 14);
            v45 = (uint64_t)v177;
            v105 = v178;
            v43 = v180;
            goto LABEL_152;
          }
        }
        v112 = v111 ^ 1;
        v114 = (int *)*((_QWORD *)v110 + 46);
        v113 = *((_QWORD *)v110 + 47);
        if ((unint64_t)v114 < v113)
        {
          *v114 = v112;
          v115 = (uint64_t)(v114 + 1);
LABEL_130:
          *((_QWORD *)v110 + 46) = v115;
          v1 = v191;
          goto LABEL_131;
        }
        v116 = (int *)*((_QWORD *)v110 + 45);
        v117 = v114 - v116;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v119 = v113 - (_QWORD)v116;
        if (v119 >> 1 > v118)
          v118 = v119 >> 1;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
          v120 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v120 = v118;
        if (v120)
        {
          if (v120 >> 62)
            goto LABEL_184;
          v121 = operator new(4 * v120);
          v122 = (int *)&v121[4 * v117];
          *v122 = v112;
          v115 = (uint64_t)(v122 + 1);
          if (v114 != v116)
            goto LABEL_122;
LABEL_149:
          *((_QWORD *)v110 + 45) = v122;
          *((_QWORD *)v110 + 46) = v115;
          *((_QWORD *)v110 + 47) = &v121[4 * v120];
          if (!v116)
            goto LABEL_130;
        }
        else
        {
          v121 = 0;
          v122 = (int *)(4 * v117);
          *(_DWORD *)(4 * v117) = v112;
          v115 = 4 * v117 + 4;
          if (v114 == v116)
            goto LABEL_149;
LABEL_122:
          v123 = (char *)(v114 - 1) - (char *)v116;
          if (v123 < 0x2C)
            goto LABEL_193;
          if ((unint64_t)((char *)v116 - v121) < 0x20)
            goto LABEL_193;
          v124 = (v123 >> 2) + 1;
          v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
          v126 = &v114[v125 / 0xFFFFFFFFFFFFFFFCLL];
          v122 = (int *)((char *)v122 - v125);
          v127 = &v121[4 * v117 - 16];
          v128 = v114 - 4;
          v129 = v124 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v130 = *(_OWORD *)v128;
            *(v127 - 1) = *((_OWORD *)v128 - 1);
            *v127 = v130;
            v127 -= 2;
            v128 -= 8;
            v129 -= 8;
          }
          while (v129);
          v114 = v126;
          if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_193:
            do
            {
              v131 = *--v114;
              *--v122 = v131;
            }
            while (v114 != v116);
          }
          *((_QWORD *)v110 + 45) = v122;
          *((_QWORD *)v110 + 46) = v115;
          *((_QWORD *)v110 + 47) = &v121[4 * v120];
          if (!v116)
            goto LABEL_130;
        }
        operator delete(v116);
        goto LABEL_130;
      }
LABEL_152:
      v97 = v185;
      operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(v99, v185, v105);
      started = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*((_QWORD *)v1 + 14), v185, v43);
      v44 = v182;
      v80 = v183;
      v81 = v181;
      if ((started & 1) == 0)
        return 0;
    }
    v41 = (_DWORD)v97 == (_DWORD)v44;
    if ((_DWORD)v97 == (_DWORD)v44)
    {
      v146 = v97;
      v147 = (_QWORD *)*((_QWORD *)v1 + 14);
      v148 = *(_DWORD *)(v147[10] + 4 * v97);
      v149 = v81;
      if (v148 == -1)
      {
        v83 = (uint64_t *)(v147[13] + 8 * v146);
        v82 = *(_QWORD *)(v147[1] + 40);
      }
      else
      {
        v82 = *(_QWORD *)(v147[1] + 40);
        v83 = (uint64_t *)(v82 + 12 * v148);
      }
      v84 = *v83;
      *(_DWORD *)v192 = v44;
      v85 = 4 * v146;
      v86 = *(_QWORD *)(v82 + 12 * *(int *)(v147[4] + v85));
      v87 = *(_QWORD *)(v82 + 12 * *(int *)(v147[7] + v85)) - v84;
      if (v86 > v87)
        v87 = v86;
      *(_QWORD *)&v192[4] = v87;
      v193 = v84;
      operations_research::sat::TaskSet::AddEntry(v45, (__int128 *)v192);
      v44 = 0xFFFFFFFFLL;
      v80 = v183;
      v81 = v149;
    }
    if (++v81 == (int *)v80)
      goto LABEL_45;
  }
}

uint64_t operations_research::sat::DisjunctivePrecedences::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  _QWORD *v2;
  uint64_t started;
  int *v4;
  int *v5;
  operations_research::sat::SchedulingConstraintHelper *v6;
  int64_t v7;
  _QWORD *v8;
  int v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  operations_research::sat::SchedulingConstraintHelper *v13;
  operations_research::sat::SchedulingConstraintHelper *v14;
  int v15;
  operations_research::sat::SchedulingConstraintHelper *v16;
  uint64_t result;
  operations_research::sat::SchedulingConstraintHelper *v18;
  int v19;
  _DWORD **v20;
  operations_research::sat::SchedulingConstraintHelper *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  operations_research::sat::SchedulingConstraintHelper *v33;
  char *v34;
  operations_research::sat::SchedulingConstraintHelper *v35;
  uint64_t v36;
  int v37;
  operations_research::sat::SchedulingConstraintHelper *v38;
  operations_research::sat::SchedulingConstraintHelper *v39;
  int *v40;

  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[2], *((unsigned __int8 *)this + 8));
  v2 = this + 5;
  this[6] = this[5];
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[2]);
  v4 = *(int **)started;
  v5 = *(int **)(started + 8);
  if (*(int **)started != v5)
  {
    v6 = this[2];
    v7 = 0x8000000000000002;
    v40 = *(int **)(started + 8);
    while (1)
    {
      v9 = *v4;
      v10 = *(_QWORD *)(v4 + 1);
      v11 = *(int *)(*((_QWORD *)v6 + 16) + 4 * *v4);
      if ((_DWORD)v11 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        goto LABEL_5;
      }
      v12 = v9;
      v13 = this[6];
      if (v10 >= v7)
        break;
      v14 = this[7];
      if (v13 >= v14)
      {
        v20 = (_DWORD **)v2;
        v21 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
        v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v2) >> 2);
        v23 = v22 + 1;
        if (v22 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v21) >> 2);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0xAAAAAAAAAAAAAAALL)
          v25 = 0x1555555555555555;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 > 0x1555555555555555)
            goto LABEL_50;
          v26 = (char *)operator new(12 * v25);
        }
        else
        {
          v26 = 0;
        }
        v34 = &v26[12 * v22];
        *(_DWORD *)v34 = v9;
        *(_QWORD *)(v34 + 4) = v10;
        v35 = (operations_research::sat::SchedulingConstraintHelper *)v34;
        v2 = v20;
        if (v13 != v21)
        {
          do
          {
            v36 = *(_QWORD *)((char *)v13 - 12);
            v13 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v13 - 12);
            v37 = *((_DWORD *)v13 + 2);
            *(_QWORD *)((char *)v35 - 12) = v36;
            v35 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v35 - 12);
            *((_DWORD *)v35 + 2) = v37;
          }
          while (v13 != v21);
          v13 = (operations_research::sat::SchedulingConstraintHelper *)*v20;
        }
        v5 = v40;
        v38 = (operations_research::sat::SchedulingConstraintHelper *)&v26[12 * v25];
        v39 = (operations_research::sat::SchedulingConstraintHelper *)(v34 + 12);
        this[5] = v35;
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)(v34 + 12);
        this[7] = v38;
        if (v13)
          operator delete(v13);
        v12 = v9;
        this[6] = v39;
        v6 = this[2];
        v15 = *(_DWORD *)(*((_QWORD *)v6 + 10) + 4 * v9);
        if (v15 == -1)
        {
LABEL_45:
          v8 = (_QWORD *)(*((_QWORD *)v6 + 13) + 8 * v12);
          goto LABEL_4;
        }
      }
      else
      {
        *(_DWORD *)v13 = v9;
        *(_QWORD *)((char *)v13 + 4) = v10;
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v13 + 12);
        v6 = this[2];
        v15 = *(_DWORD *)(*((_QWORD *)v6 + 10) + 4 * v9);
        if (v15 == -1)
          goto LABEL_45;
      }
      v8 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 40) + 12 * v15);
LABEL_4:
      v7 += *v8;
LABEL_5:
      v4 += 3;
      if (v4 == v5)
        goto LABEL_46;
    }
    v16 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v2) >> 2) >= 2)
    {
      result = operations_research::sat::DisjunctivePrecedences::PropagateSubwindow((operations_research::sat::DisjunctivePrecedences *)this);
      if (!(_DWORD)result)
        return result;
      v16 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
      v12 = v9;
    }
    this[6] = v16;
    v18 = this[7];
    if (v16 >= v18)
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 2);
      v28 = 2 * v27;
      if (2 * v27 <= 1)
        v28 = 1;
      if (v27 >= 0xAAAAAAAAAAAAAAALL)
        v29 = 0x1555555555555555;
      else
        v29 = v28;
      if (v29 > 0x1555555555555555)
LABEL_50:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = v12;
      v31 = 12 * v29;
      v32 = (char *)operator new(12 * v29);
      *(_DWORD *)v32 = v9;
      *(_QWORD *)(v32 + 4) = v10;
      v33 = (operations_research::sat::SchedulingConstraintHelper *)(v32 + 12);
      this[5] = (operations_research::sat::SchedulingConstraintHelper *)v32;
      this[6] = (operations_research::sat::SchedulingConstraintHelper *)(v32 + 12);
      this[7] = (operations_research::sat::SchedulingConstraintHelper *)&v32[v31];
      if (v16)
        operator delete(v16);
      v12 = v30;
      this[6] = v33;
      v6 = this[2];
      v19 = *(_DWORD *)(*((_QWORD *)v6 + 10) + 4 * v30);
      if (v19 != -1)
        goto LABEL_17;
    }
    else
    {
      *(_DWORD *)v16 = v9;
      *(_QWORD *)((char *)v16 + 4) = v10;
      this[6] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v16 + 12);
      v6 = this[2];
      v19 = *(_DWORD *)(*((_QWORD *)v6 + 10) + 4 * v12);
      if (v19 != -1)
      {
LABEL_17:
        v8 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 40) + 12 * v19);
LABEL_37:
        v7 = v10;
        goto LABEL_4;
      }
    }
    v8 = (_QWORD *)(*((_QWORD *)v6 + 13) + 8 * v12);
    goto LABEL_37;
  }
LABEL_46:
  if (0xAAAAAAAAAAAAAAABLL * ((this[6] - this[5]) >> 2) < 2)
    return 1;
  result = operations_research::sat::DisjunctivePrecedences::PropagateSubwindow((operations_research::sat::DisjunctivePrecedences *)this);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t operations_research::sat::DisjunctivePrecedences::PropagateSubwindow(operations_research::sat::DisjunctivePrecedences *this)
{
  char *v2;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  int v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  operations_research::sat::SchedulingConstraintHelper *v77;
  int v78;
  int v79;
  unint64_t v80;
  int *v81;
  int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  int *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  _OWORD *v93;
  int *v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  unint64_t v100;
  int64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  void **v109;
  uint64_t v110;
  void **v111;
  _QWORD *v112;

  v2 = (char *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = v2;
  v3 = (int *)*((_QWORD *)this + 5);
  v4 = (int *)*((_QWORD *)this + 6);
  v111 = (void **)((char *)this + 64);
  while (v3 != v4)
  {
    v6 = *v3;
    v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
    v8 = *((_QWORD *)this + 10);
    if ((unint64_t)v2 < v8)
    {
      *(_DWORD *)v2 = *(_DWORD *)(v7 + 4 * v6);
      v5 = (uint64_t)(v2 + 4);
      goto LABEL_3;
    }
    v9 = (char *)*v111;
    v10 = v2 - (_BYTE *)*v111;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
LABEL_109:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      *v16 = *(_DWORD *)(v7 + 4 * v6);
      v5 = (uint64_t)(v16 + 1);
      if (v2 == v9)
        goto LABEL_29;
    }
    else
    {
      v15 = 0;
      v16 = (_DWORD *)(4 * v11);
      *(_DWORD *)(4 * v11) = *(_DWORD *)(v7 + 4 * v6);
      v5 = 4 * v11 + 4;
      if (v2 == v9)
        goto LABEL_29;
    }
    v17 = v2 - 4 - v9;
    if (v17 >= 0xBC)
    {
      if (&v15[v10 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v10 - 4])
      {
        v18 = v2;
      }
      else if (&v2[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v2 - 4)
      {
        v18 = v2;
      }
      else if ((unint64_t)(v2 - &v15[v10]) >= 0x20)
      {
        v19 = (v17 >> 2) + 1;
        v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        v18 = &v2[-v20];
        v16 = (_DWORD *)((char *)v16 - v20);
        v21 = &v15[4 * v11 - 16];
        v22 = v2 - 16;
        v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v18 = v2;
      }
    }
    else
    {
      v18 = v2;
    }
    do
    {
      v25 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--v16 = v25;
    }
    while (v18 != v9);
LABEL_29:
    *((_QWORD *)this + 8) = v16;
    *((_QWORD *)this + 9) = v5;
    *((_QWORD *)this + 10) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
LABEL_3:
    *((_QWORD *)this + 9) = v5;
    v3 += 3;
    v2 = (char *)v5;
  }
  v26 = (uint64_t *)v111;
  v112 = (_QWORD *)((char *)this + 144);
  operations_research::sat::PrecedencesPropagator::ComputePrecedences(*((_QWORD **)this + 4), v26, (uint64_t)this + 144);
  v27 = (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2;
  v28 = -858993459 * v27;
  if (-858993459 * (int)v27 < 1)
    return 1;
  v29 = 0;
  v109 = (void **)((char *)this + 88);
  v110 = v28;
  v102 = -858993459 * v27;
  while (2)
  {
    v30 = v29;
    v31 = *((_QWORD *)this + 18) + 20 * v29;
    v32 = *(_DWORD *)(v31 + 4);
    v33 = (char *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 12) = v33;
    *((_DWORD *)this + 28) = 0;
    v34 = *(_QWORD *)(v31 + 12);
    if (v29 + 1 > v28)
      v35 = v29 + 1;
    else
      v35 = v28;
    v105 = v35;
    v106 = (int)v32;
    v103 = v30;
    v108 = v32;
    while (2)
    {
      if (*(_DWORD *)(*v112 + 20 * v30 + 4) == v32)
      {
        v36 = (int *)(*v112 + 20 * v30);
        v37 = *((_QWORD *)this + 5) + 12 * *v36;
        v38 = *(_DWORD *)v37;
        v39 = *(_QWORD *)(v36 + 3);
        if (v39 < v34)
          v34 = v39;
        v40 = (_QWORD *)*((_QWORD *)this + 2);
        v41 = *(_DWORD *)(v40[10] + 4 * v38);
        if (v41 == -1)
        {
          v42 = *(_QWORD *)(v37 + 4);
          v43 = *(_QWORD *)(v40[13] + 8 * v38);
          v44 = *((_QWORD *)this + 13);
          if ((unint64_t)v33 < v44)
          {
LABEL_39:
            *(_DWORD *)v33 = v38;
            *(_QWORD *)(v33 + 4) = v42;
            *(_QWORD *)(v33 + 12) = v43;
            v33 += 20;
            *((_QWORD *)this + 12) = v33;
            if (++v30 >= v110)
              goto LABEL_67;
            continue;
          }
        }
        else
        {
          v42 = *(_QWORD *)(v37 + 4);
          v43 = *(_QWORD *)(*(_QWORD *)(v40[1] + 40) + 12 * v41);
          v44 = *((_QWORD *)this + 13);
          if ((unint64_t)v33 < v44)
            goto LABEL_39;
        }
        v45 = (char *)*v109;
        v46 = 0xCCCCCCCCCCCCCCCDLL * ((v33 - (_BYTE *)*v109) >> 2);
        v47 = v46 + 1;
        if (v46 + 1 > 0xCCCCCCCCCCCCCCCLL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v45) >> 2);
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0x666666666666666)
          v49 = 0xCCCCCCCCCCCCCCCLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_109;
          v50 = (char *)operator new(20 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[20 * v46];
        *(_DWORD *)v51 = v38;
        *(_QWORD *)(v51 + 4) = v42;
        *(_QWORD *)(v51 + 12) = v43;
        if (v33 == v45)
        {
          v54 = v33;
          v33 = v51 + 20;
          *((_QWORD *)this + 11) = v51;
          *((_QWORD *)this + 12) = v51 + 20;
          *((_QWORD *)this + 13) = &v50[20 * v49];
          if (v54)
            goto LABEL_61;
        }
        else
        {
          v52 = &v50[20 * v46];
          do
          {
            v53 = *(_OWORD *)(v33 - 20);
            *((_DWORD *)v52 - 1) = *((_DWORD *)v33 - 1);
            *(_OWORD *)(v52 - 20) = v53;
            v52 -= 20;
            v33 -= 20;
          }
          while (v33 != v45);
          v54 = *v109;
          v33 = v51 + 20;
          *((_QWORD *)this + 11) = v52;
          *((_QWORD *)this + 12) = v51 + 20;
          *((_QWORD *)this + 13) = &v50[20 * v49];
          if (v54)
LABEL_61:
            operator delete(v54);
        }
        v32 = v108;
        *((_QWORD *)this + 12) = v33;
        if (++v30 >= v110)
          goto LABEL_67;
        continue;
      }
      break;
    }
    v105 = v30;
LABEL_67:
    v55 = (_QWORD *)*((_QWORD *)this + 3);
    v56 = *(int *)(v55[51] + 4 * v106);
    if ((_DWORD)v56 != -1
      && ((*(_QWORD *)(*(_QWORD *)(v55[117] + 24) + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56) & 1) != 0)
    {
      v29 = v105;
      goto LABEL_34;
    }
    v57 = *((_QWORD *)this + 11);
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v33[-v57] >> 2);
    v59 = *((_DWORD *)this + 28);
    v60 = 0x8000000000000002;
    v29 = v105;
    if (v59 < (int)v58)
    {
      v61 = (uint64_t *)(v57 + 20 * v59 + 12);
      v62 = (int)v58 - (uint64_t)v59;
      v60 = 0x8000000000000002;
      do
      {
        while (1)
        {
          v64 = *(v61 - 1);
          if (v64 >= v60)
            break;
          v63 = *v61;
          v61 = (uint64_t *)((char *)v61 + 20);
          v60 += v63;
          ++v59;
          if (!--v62)
            goto LABEL_75;
        }
        *((_DWORD *)this + 28) = v59;
        v65 = *v61;
        v61 = (uint64_t *)((char *)v61 + 20);
        v60 = v65 + v64;
        ++v59;
        --v62;
      }
      while (v62);
    }
LABEL_75:
    if (v60 + v34 <= *(_QWORD *)(v55[5] + 12 * (int)v106))
    {
LABEL_34:
      v28 = v102;
      if (v29 >= v102)
        return 1;
      continue;
    }
    break;
  }
  v101 = v60 + v34;
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                    + 2));
  if ((int)v103 < v105)
  {
    v66 = *((_QWORD *)this + 5);
    v67 = *((_QWORD *)this + 15);
    v68 = (int *)(*((_QWORD *)this + 18) + 20 * (int)v103 + 8);
    v69 = v105 - v103;
    do
    {
      v70 = *(int *)(v66 + 12 * *(v68 - 2));
      v71 = *v68;
      v68 += 5;
      *(_DWORD *)(v67 + 4 * v70) = v71;
      --v69;
    }
    while (v69);
  }
  v72 = *((int *)this + 28);
  v73 = *((_QWORD *)this + 11);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v73) >> 2) > v72)
  {
    v74 = *(_QWORD *)(v73 + 20 * (int)v72 + 4);
    v104 = v74;
    while (1)
    {
      v76 = *(_DWORD *)(v73 + 20 * v72);
      v77 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 2);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v77, v76);
      v78 = *(_DWORD *)(*((_QWORD *)v77 + 16) + 4 * v76);
      if (v78 == -1)
        goto LABEL_83;
      v79 = v78 ^ 1;
      v81 = (int *)*((_QWORD *)v77 + 46);
      v80 = *((_QWORD *)v77 + 47);
      if ((unint64_t)v81 >= v80)
        break;
      *v81 = v79;
      v75 = (uint64_t)(v81 + 1);
LABEL_82:
      *((_QWORD *)v77 + 46) = v75;
LABEL_83:
      operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)this + 2), v76, *(_QWORD *)(*((_QWORD *)this + 11) + 20 * v72 + 12), v74);
      operations_research::sat::PrecedencesPropagator::AddPrecedenceReason(*((_QWORD *)this + 4), *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v76), v34, *((_QWORD *)this + 2) + 360, (char **)(*((_QWORD *)this + 2) + 384));
      ++v72;
      v73 = *((_QWORD *)this + 11);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v73) >> 2) <= v72)
        goto LABEL_33;
    }
    v82 = (int *)*((_QWORD *)v77 + 45);
    v83 = v81 - v82;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v85 = v80 - (_QWORD)v82;
    if (v85 >> 1 > v84)
      v84 = v85 >> 1;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
      v84 = 0x3FFFFFFFFFFFFFFFLL;
    v107 = v84;
    if (v84)
    {
      if (v84 >> 62)
        goto LABEL_109;
      v86 = operator new(4 * v84);
      v87 = (int *)&v86[4 * v83];
      *v87 = v79;
      v75 = (uint64_t)(v87 + 1);
      if (v81 != v82)
        goto LABEL_94;
    }
    else
    {
      v86 = 0;
      v87 = (int *)(4 * v83);
      *(_DWORD *)(4 * v83) = v79;
      v75 = 4 * v83 + 4;
      if (v81 != v82)
      {
LABEL_94:
        v88 = (char *)(v81 - 1) - (char *)v82;
        v89 = v107;
        if (v88 < 0x2C)
          goto LABEL_114;
        if ((unint64_t)((char *)v82 - v86) < 0x20)
          goto LABEL_114;
        v90 = (v88 >> 2) + 1;
        v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        v92 = &v81[v91 / 0xFFFFFFFFFFFFFFFCLL];
        v87 = (int *)((char *)v87 - v91);
        v93 = &v86[4 * v83 - 16];
        v94 = v81 - 4;
        v95 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v96 = *(_OWORD *)v94;
          *(v93 - 1) = *((_OWORD *)v94 - 1);
          *v93 = v96;
          v93 -= 2;
          v94 -= 8;
          v95 -= 8;
        }
        while (v95);
        v81 = v92;
        if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_114:
          do
          {
            v97 = *--v81;
            *--v87 = v97;
          }
          while (v81 != v82);
        }
        goto LABEL_103;
      }
    }
    v89 = v107;
LABEL_103:
    *((_QWORD *)v77 + 45) = v87;
    *((_QWORD *)v77 + 46) = v75;
    *((_QWORD *)v77 + 47) = &v86[4 * v89];
    if (v82)
    {
      v98 = v75;
      operator delete(v82);
      v75 = v98;
    }
    v74 = v104;
    goto LABEL_82;
  }
LABEL_33:
  v100 = v100 & 0xFFFFFFFF00000000 | HIDWORD(v101);
  v29 = v105;
  if ((operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(*((_QWORD *)this + 2), __SPAIR64__(v101, v108), SHIDWORD(v101)) & 1) != 0)goto LABEL_34;
  return 0;
}

uint64_t operations_research::sat::DisjunctiveNotLast::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  char *started;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  int v8;
  operations_research::sat::SchedulingConstraintHelper *v9;
  uint64_t v10;
  int v11;
  operations_research::sat::SchedulingConstraintHelper *v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  int *v16;
  int v17;
  unint64_t v18;
  operations_research::sat::SchedulingConstraintHelper *v19;
  operations_research::sat::SchedulingConstraintHelper *v20;
  operations_research::sat::SchedulingConstraintHelper *v21;
  int v22;
  operations_research::sat::SchedulingConstraintHelper *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  operations_research::sat::SchedulingConstraintHelper *v34;
  char *v35;
  operations_research::sat::SchedulingConstraintHelper *v36;
  uint64_t v37;
  int v38;
  operations_research::sat::SchedulingConstraintHelper *v39;
  operations_research::sat::SchedulingConstraintHelper *v40;
  operations_research::sat::SchedulingConstraintHelper *v41;
  operations_research::sat::SchedulingConstraintHelper *v42;
  int *v44;
  int64_t v45;
  int v46;
  operations_research::sat::SchedulingConstraintHelper *v47;
  unint64_t v48;
  operations_research::sat::SchedulingConstraintHelper *v49;
  operations_research::sat::SchedulingConstraintHelper *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t result;
  int v61;
  char *v62;
  int v63;
  int v64;
  void **v65;
  _QWORD *v66;
  operations_research::sat::SchedulingConstraintHelper **v67;
  uint64_t v68;

  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[8], *((unsigned __int8 *)this + 56));
  started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(this[8]);
  v3 = (_QWORD *)operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[8]);
  v4 = (uint64_t)(v3[1] - *v3) >> 2;
  v5 = -1431655765 * v4;
  if (-1431655765 * (int)v4 < 1)
    return 1;
  v6 = v3;
  v7 = 0;
  v8 = -1431655765 * ((*((_QWORD *)started + 1) - *(_QWORD *)started) >> 2) - 1;
  v65 = (void **)(this + 4);
  v66 = v3;
  v67 = this + 1;
  v68 = v5;
  v61 = -1431655765 * v4;
  v62 = started;
  while (2)
  {
    v63 = v8;
    v9 = this[1];
    this[2] = v9;
    v10 = v7;
    if (v7 + 1 > v5)
      v11 = v7 + 1;
    else
      v11 = v5;
    v64 = v11;
    v12 = this[8];
    v13 = 0x8000000000000002;
    while (1)
    {
      v16 = (int *)(*v6 + 12 * v10);
      v17 = *v16;
      v15 = *(_QWORD *)(v16 + 1);
      v18 = *(int *)(*((_QWORD *)v12 + 16) + 4 * *v16);
      if ((_DWORD)v18 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      {
        goto LABEL_11;
      }
      v19 = *v67;
      if (*v67 != v9)
        break;
      v23 = this[3];
      if (v9 >= v23)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v9) >> 2);
        v30 = 2 * v29;
        if (2 * v29 <= 1)
          v30 = 1;
        if (v29 >= 0xAAAAAAAAAAAAAAALL)
          v31 = 0x1555555555555555;
        else
          v31 = v30;
        if (v31 > 0x1555555555555555)
LABEL_82:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v32 = 12 * v31;
        v33 = (char *)operator new(12 * v31);
        *(_DWORD *)v33 = v17;
        v34 = (operations_research::sat::SchedulingConstraintHelper *)&v33[v32];
        *(_QWORD *)(v33 + 4) = v15;
        v21 = (operations_research::sat::SchedulingConstraintHelper *)(v33 + 12);
        this[1] = (operations_research::sat::SchedulingConstraintHelper *)v33;
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)(v33 + 12);
        this[3] = v34;
        if (v9)
        {
          operator delete(v9);
          v12 = this[8];
        }
        this[2] = v21;
        v24 = *(_DWORD *)(*((_QWORD *)v12 + 10) + 4 * v17);
        if (v24 == -1)
        {
LABEL_40:
          v14 = (_QWORD *)(*((_QWORD *)v12 + 13) + 8 * v17);
          goto LABEL_10;
        }
      }
      else
      {
        *(_DWORD *)v9 = v17;
        *(_QWORD *)((char *)v9 + 4) = v15;
        v21 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        v24 = *(_DWORD *)(*((_QWORD *)v12 + 10) + 4 * v17);
        if (v24 == -1)
          goto LABEL_40;
      }
      v14 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 1) + 40) + 12 * v24);
LABEL_10:
      v13 = *v14 + v15;
      v9 = v21;
LABEL_11:
      if (++v10 >= v68)
        goto LABEL_49;
    }
    if (v15 < v13)
    {
      v20 = this[3];
      if (v9 >= v20)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v19) >> 2) + 1;
        if (v25 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0xAAAAAAAAAAAAAAALL)
          v27 = 0x1555555555555555;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 > 0x1555555555555555)
            goto LABEL_82;
          v28 = (char *)operator new(12 * v27);
        }
        else
        {
          v28 = 0;
        }
        v35 = &v28[4 * ((v9 - v19) >> 2)];
        *(_DWORD *)v35 = v17;
        *(_QWORD *)(v35 + 4) = v15;
        v36 = (operations_research::sat::SchedulingConstraintHelper *)v35;
        do
        {
          v37 = *(_QWORD *)((char *)v9 - 12);
          v9 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 - 12);
          v38 = *((_DWORD *)v9 + 2);
          *(_QWORD *)((char *)v36 - 12) = v37;
          v36 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v36 - 12);
          *((_DWORD *)v36 + 2) = v38;
        }
        while (v9 != v19);
        v39 = (operations_research::sat::SchedulingConstraintHelper *)&v28[12 * v27];
        v40 = this[1];
        v21 = (operations_research::sat::SchedulingConstraintHelper *)(v35 + 12);
        this[1] = v36;
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)(v35 + 12);
        this[3] = v39;
        v6 = v66;
        if (v40)
          operator delete(v40);
        this[2] = v21;
        v12 = this[8];
        v22 = *(_DWORD *)(*((_QWORD *)v12 + 10) + 4 * v17);
        if (v22 == -1)
          goto LABEL_47;
      }
      else
      {
        *(_DWORD *)v9 = v17;
        *(_QWORD *)((char *)v9 + 4) = v15;
        v21 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        v12 = this[8];
        v22 = *(_DWORD *)(*((_QWORD *)v12 + 10) + 4 * v17);
        if (v22 == -1)
        {
LABEL_47:
          v14 = (_QWORD *)(*((_QWORD *)v12 + 13) + 8 * v17);
          goto LABEL_9;
        }
      }
      v14 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 1) + 40) + 12 * v22);
LABEL_9:
      v15 = v13;
      goto LABEL_10;
    }
    v64 = v10;
LABEL_49:
    v8 = v63;
    v41 = this[4];
    this[5] = v41;
    if (v63 < 0)
      goto LABEL_77;
    while (2)
    {
      v44 = (int *)(*(_QWORD *)v62 + 12 * v8);
      v45 = *(_QWORD *)(v44 + 1);
      if (v45 < v13)
      {
        v46 = *v44;
        v47 = this[8];
        v48 = *(int *)(*((_QWORD *)v47 + 16) + 4 * *v44);
        if ((_DWORD)v48 != -1
          && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 24) + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v48 & 0x3F ^ 1)) & 1) != 0)
        {
          goto LABEL_53;
        }
        v49 = this[6];
        if (v41 < v49)
        {
          *(_DWORD *)v41 = v46;
          *(_QWORD *)((char *)v41 + 4) = v45;
          v42 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v41 + 12);
          goto LABEL_52;
        }
        v50 = (operations_research::sat::SchedulingConstraintHelper *)*v65;
        v51 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (operations_research::sat::SchedulingConstraintHelper *)*v65) >> 2);
        v52 = v51 + 1;
        if (v51 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v50) >> 2);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0xAAAAAAAAAAAAAAALL)
          v54 = 0x1555555555555555;
        else
          v54 = v52;
        if (v54)
        {
          if (v54 > 0x1555555555555555)
            goto LABEL_82;
          v55 = (char *)operator new(12 * v54);
          v56 = (uint64_t)&v55[12 * v51];
          *(_DWORD *)v56 = v46;
          *(_QWORD *)(v56 + 4) = v45;
          v57 = v56;
          if (v41 != v50)
          {
LABEL_67:
            v6 = v66;
            do
            {
              v58 = *(_QWORD *)((char *)v41 - 12);
              v41 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v41 - 12);
              v59 = *((_DWORD *)v41 + 2);
              *(_QWORD *)(v57 - 12) = v58;
              v57 -= 12;
              *(_DWORD *)(v57 + 8) = v59;
            }
            while (v41 != v50);
            v41 = (operations_research::sat::SchedulingConstraintHelper *)*v65;
            v42 = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
            this[4] = (operations_research::sat::SchedulingConstraintHelper *)v57;
            this[5] = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
            this[6] = (operations_research::sat::SchedulingConstraintHelper *)&v55[12 * v54];
            if (v41)
LABEL_70:
              operator delete(v41);
LABEL_52:
            this[5] = v42;
            v41 = v42;
LABEL_53:
            if (v8-- <= 0)
            {
              v8 = -1;
              break;
            }
            continue;
          }
        }
        else
        {
          v55 = 0;
          v56 = 4 * ((v41 - (operations_research::sat::SchedulingConstraintHelper *)*v65) >> 2);
          *(_DWORD *)v56 = v46;
          *(_QWORD *)(v56 + 4) = v45;
          v57 = 12 * v51;
          if (v41 != v50)
            goto LABEL_67;
        }
        v6 = v66;
        v42 = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
        this[4] = (operations_research::sat::SchedulingConstraintHelper *)v57;
        this[5] = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)&v55[12 * v54];
        if (v41)
          goto LABEL_70;
        goto LABEL_52;
      }
      break;
    }
    v9 = this[2];
LABEL_77:
    v5 = v61;
    v7 = v64;
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - *v67) >> 2) < 2
      || *v65 == v41
      || (result = operations_research::sat::DisjunctiveNotLast::PropagateSubwindow((operations_research::sat::DisjunctiveNotLast *)this),
          (_DWORD)result))
    {
      if (v64 >= v61)
        return 1;
      continue;
    }
    return result;
  }
}

uint64_t operations_research::sat::DisjunctiveNotLast::PropagateSubwindow(operations_research::sat::DisjunctiveNotLast *this)
{
  operations_research::sat::DisjunctiveNotLast *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  operations_research::sat::DisjunctiveNotLast *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  int *v45;
  operations_research::sat::DisjunctiveNotLast *v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  int64_t v91;
  int64_t v92;
  operations_research::sat::SchedulingConstraintHelper *v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  operations_research::sat::DisjunctiveNotLast *v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int *v109;
  int v110;
  int *v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v117[12];

  v1 = this;
  v3 = (char *)*((_QWORD *)this + 4);
  v2 = (char *)*((_QWORD *)this + 5);
  v4 = v3;
  if (v3 != v2)
  {
    v5 = *((_QWORD *)this + 8);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(_QWORD *)(v6 + 40);
    v9 = (char *)*((_QWORD *)this + 4);
    do
    {
      *(_QWORD *)(v9 + 4) = -*(_QWORD *)(v8 + 12 * (*(_DWORD *)(v7 + 4 * *(int *)v9) ^ 1));
      v9 += 12;
    }
    while (v9 != v2);
  }
  if ((int)(-1431655765 * ((unint64_t)(v2 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v2 - v3) >> 2), v3, v2, 0);
    v1 = this;
  }
  else if (v2 - v3 >= 24)
  {
    v10 = v2 - 12;
    if (v2 - 12 != v3)
    {
      v4 = v2 - 12;
      v11 = v2 - 12;
      do
      {
        v12 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        v13 = *((_DWORD *)v11 + 2);
        *(_QWORD *)v117 = v12;
        *(_DWORD *)&v117[8] = v13;
        if (*((_QWORD *)v11 + 2) < *(uint64_t *)&v117[4])
        {
          v14 = *((_DWORD *)v10 + 2);
          v15 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *(_QWORD *)v11;
          *((_DWORD *)v10 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v11 = v15;
          *((_DWORD *)v11 + 2) = v14;
          v4 = v10;
        }
        v10 = v11;
      }
      while (v11 != v3);
    }
    while (1)
    {
      v16 = v4 + 12;
      if (v4 + 12 == v2)
        break;
      v17 = *((_DWORD *)v4 + 3);
      v18 = *((_QWORD *)v4 + 2);
      v4 += 12;
      v19 = *((_DWORD *)v16 - 1);
      *(_QWORD *)v117 = *(_QWORD *)(v16 - 12);
      *(_DWORD *)&v117[8] = v19;
      if (v18 < *(uint64_t *)&v117[4])
      {
        v20 = v16;
        do
        {
          v21 = *(_QWORD *)(v16 - 12);
          v16 -= 12;
          *(_QWORD *)v20 = v21;
          *((_DWORD *)v20 + 2) = *((_DWORD *)v20 - 1);
          v22 = *((_QWORD *)v20 - 3);
          v23 = *((_DWORD *)v20 - 4);
          *(_QWORD *)v117 = v22;
          *(_DWORD *)&v117[8] = v23;
          v20 = v16;
        }
        while (v18 < *(uint64_t *)&v117[4]);
      }
      *(_DWORD *)v16 = v17;
      *(_QWORD *)(v16 + 4) = v18;
    }
  }
  v24 = *((_QWORD *)v1 + 1);
  v25 = (uint64_t *)*((_QWORD *)v1 + 2);
  if ((uint64_t *)v24 == v25)
    return 1;
  v26 = 0;
  v112 = (uint64_t)v1 + 8;
  v27 = *(_QWORD *)(*((_QWORD *)v1 + 5) - 8);
  v28 = *((_QWORD *)v1 + 8);
  v29 = *(_QWORD *)(v28 + 8);
  v30 = *(_QWORD *)(v28 + 32);
  v31 = *(_QWORD *)(v29 + 40);
  v32 = (uint64_t *)*((_QWORD *)v1 + 1);
  do
  {
    v33 = *(int *)v32;
    v34 = -*(_QWORD *)(v31 + 12 * (*(_DWORD *)(v30 + 4 * v33) ^ 1));
    if (v27 > v34)
    {
      v35 = v24 + 12 * v26++;
      *(_DWORD *)v35 = v33;
      *(_QWORD *)(v35 + 4) = v34;
    }
    v32 = (uint64_t *)((char *)v32 + 12);
  }
  while (v32 != v25);
  if (v26 < 2)
    return 1;
  v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2);
  v114 = v26;
  v39 = v26 >= v38;
  v40 = v26 - v38;
  if (v40 != 0 && v39)
  {
    std::vector<operations_research::sat::TaskTime>::__append(v112, v40);
    v41 = this;
    v24 = *((_QWORD *)this + 1);
    v25 = (uint64_t *)*((_QWORD *)this + 2);
  }
  else if (v39)
  {
    v41 = this;
  }
  else
  {
    v25 = (uint64_t *)(v24 + 12 * v26);
    v41 = this;
    *((_QWORD *)this + 2) = v25;
  }
  v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2));
  if (v25 == (uint64_t *)v24)
    v43 = 0;
  else
    v43 = v42;
  v36 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v24, v25, (uint64_t)v117, v43, 1);
  v44 = (char **)((char *)v41 + 72);
  *((_QWORD *)v41 + 10) = *((_QWORD *)v41 + 9);
  *((_DWORD *)v41 + 24) = 0;
  v45 = (int *)*((_QWORD *)v41 + 4);
  v109 = (int *)*((_QWORD *)v41 + 5);
  if (v45 != v109)
  {
    v46 = v41;
    v47 = 0;
    v110 = v26;
    while (1)
    {
      v50 = *v45;
      v111 = v45;
      v51 = *(_QWORD *)(v45 + 1);
      v115 = v50;
      v113 = v51;
      if (v47 < v26)
        break;
LABEL_76:
      v84 = *((_QWORD *)v46 + 9);
      v85 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v46 + 10) - v84) >> 2);
      v86 = *((_DWORD *)v46 + 24);
      if (v86 + 1 == (_DWORD)v85 && *(_DWORD *)(v84 + 20 * v86) == (_DWORD)v50)
      {
        v86 = 0;
        *((_DWORD *)v46 + 24) = 0;
      }
      if (v86 >= (int)v85)
      {
        v87 = 0;
        v91 = 0x8000000000000002;
      }
      else
      {
        v87 = 0;
        v88 = 0;
        v89 = (_QWORD *)(v84 + 20 * v86 + 12);
        v90 = (int)v85 - (uint64_t)v86;
        v91 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v89 - 3) == (_DWORD)v50)
          {
            v88 = 1;
          }
          else
          {
            v92 = *(v89 - 1);
            if (v92 >= v91)
            {
              if ((v88 & 1) == 0)
                *((_DWORD *)v46 + 24) = v86;
              v91 = *v89 + v92;
              v87 = v86;
            }
            else
            {
              v91 += *v89;
            }
          }
          v89 = (_QWORD *)((char *)v89 + 20);
          ++v86;
          --v90;
        }
        while (v90);
      }
      v93 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)v46 + 8);
      v94 = *((_QWORD *)v93 + 4);
      v95 = *(_QWORD *)(*((_QWORD *)v93 + 1) + 40);
      if (v91 > -*(_QWORD *)(v95 + 12 * (*(_DWORD *)(v94 + 4 * v50) ^ 1)))
      {
        v96 = 0x8000000000000002;
        if ((int)v85 > v87)
        {
          v97 = (int *)(v84 + 20 * v87);
          v98 = (int)v85 - (uint64_t)v87;
          do
          {
            v100 = *v97;
            v97 += 5;
            v99 = v100;
            if ((_DWORD)v50 != (_DWORD)v100)
            {
              v101 = *(_QWORD *)(v95 + 12 * (*(_DWORD *)(v94 + 4 * v99) ^ 1));
              if (v96 <= -v101)
                v96 = -v101;
            }
            --v98;
          }
          while (v98);
        }
        if (v113 > v96)
        {
          operations_research::sat::SchedulingConstraintHelper::ClearReason(v93);
          v103 = v115;
          v102 = this;
          v104 = v85 - v87;
          if ((int)v85 > v87)
          {
            v105 = v87;
            v106 = *(_QWORD *)&(*v44)[20 * v87 + 4];
            v107 = 20 * v105;
            do
            {
              v108 = *(_DWORD *)&(*v44)[v107];
              if (v108 != v103)
              {
                operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v102 + 8), *(_DWORD *)&(*v44)[v107]);
                operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)this + 8), v108, *(_QWORD *)(*((_QWORD *)this + 9) + v107 + 12), v106);
                operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 8), v108, v96);
                v103 = v115;
                v102 = this;
              }
              v107 += 20;
              --v104;
            }
            while (v104);
          }
          v48 = v103;
          operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)v102 + 8), v103, v91 - 1);
          v49 = operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(*((_QWORD *)this + 8), v48, v96);
          v46 = this;
          if ((v49 & 1) == 0)
            return 0;
        }
      }
      v45 = v111 + 3;
      v26 = v110;
      if (v111 + 3 == v109)
        return 1;
    }
    v52 = v47;
    v53 = (_QWORD *)v112;
    while (1)
    {
      v54 = *v53 + 12 * v52;
      if (v51 <= *(_QWORD *)(v54 + 4))
      {
        v47 = v52;
        goto LABEL_76;
      }
      v55 = *(_DWORD *)v54;
      v56 = (_QWORD *)*((_QWORD *)v46 + 8);
      v57 = *(_QWORD *)(v56[1] + 40);
      v58 = *(_DWORD *)(v56[10] + 4 * v55);
      if (v58 == -1)
        v59 = (uint64_t *)(v56[13] + 8 * v55);
      else
        v59 = (uint64_t *)(v57 + 12 * v58);
      v60 = *(_QWORD *)(v57 + 12 * *(int *)(v56[4] + 4 * v55));
      v61 = *v59;
      v62 = *(_QWORD *)(v57 + 12 * *(int *)(v56[7] + 4 * v55)) - *v59;
      if (v60 <= v62)
        v63 = v62;
      else
        v63 = v60;
      v64 = (char *)*((_QWORD *)v46 + 9);
      v65 = (char *)*((_QWORD *)v46 + 10);
      v66 = (v65 - v64) / 20;
      v67 = *((_QWORD *)v46 + 11);
      if ((unint64_t)v65 >= v67)
      {
        v68 = v66 + 1;
        if ((unint64_t)(v66 + 1) > 0xCCCCCCCCCCCCCCCLL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (_QWORD)v64) >> 2);
        if (2 * v69 > v68)
          v68 = 2 * v69;
        if (v69 >= 0x666666666666666)
          v70 = 0xCCCCCCCCCCCCCCCLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v71 = (char *)operator new(20 * v70);
          v50 = v115;
          v46 = this;
        }
        else
        {
          v71 = 0;
        }
        v72 = &v71[20 * v66];
        *(_DWORD *)v72 = v55;
        *(_QWORD *)(v72 + 4) = v63;
        *(_QWORD *)(v72 + 12) = v61;
        v73 = v72;
        if (v65 != v64)
        {
          do
          {
            v74 = *(_OWORD *)(v65 - 20);
            *((_DWORD *)v73 - 1) = *((_DWORD *)v65 - 1);
            *(_OWORD *)(v73 - 20) = v74;
            v73 -= 20;
            v65 -= 20;
          }
          while (v65 != v64);
          v65 = *v44;
        }
        v75 = &v71[20 * v70];
        v76 = v72 + 20;
        *((_QWORD *)v46 + 9) = v73;
        *((_QWORD *)v46 + 10) = v72 + 20;
        *((_QWORD *)v46 + 11) = v75;
        if (v65)
        {
          operator delete(v65);
          v50 = v115;
          v46 = this;
        }
        v53 = (_QWORD *)v112;
        v51 = v113;
        *((_QWORD *)v46 + 10) = v76;
        if ((int)v66 >= 1)
        {
LABEL_68:
          v77 = v66 + 1;
          v78 = 20 * v66;
          while (1)
          {
            v79 = *v44;
            if (*(_QWORD *)&(*v44)[20 * (v77 - 2) + 4] <= v63)
              break;
            v80 = &v79[20 * (v77 - 2)];
            v81 = &v79[v78];
            v82 = *(_OWORD *)v80;
            *((_DWORD *)v81 + 4) = *((_DWORD *)v80 + 4);
            *(_OWORD *)v81 = v82;
            LODWORD(v66) = v66 - 1;
            --v77;
            v78 -= 20;
            if (v77 <= 1)
            {
              LODWORD(v66) = 0;
              break;
            }
          }
        }
      }
      else
      {
        *(_DWORD *)v65 = v55;
        *(_QWORD *)(v65 + 4) = v63;
        *(_QWORD *)(v65 + 12) = v61;
        *((_QWORD *)v46 + 10) = v65 + 20;
        if ((int)v66 >= 1)
          goto LABEL_68;
      }
      v83 = *((_QWORD *)v46 + 9) + 20 * (int)v66;
      *(_DWORD *)v83 = v55;
      *(_QWORD *)(v83 + 4) = v63;
      *(_QWORD *)(v83 + 12) = v61;
      if ((int)v66 <= *((_DWORD *)v46 + 24))
        *((_DWORD *)v46 + 24) = 0;
      if (++v52 == v114)
      {
        v47 = v110;
        goto LABEL_76;
      }
    }
  }
  return v36;
}

uint64_t operations_research::sat::DisjunctiveEdgeFinding::Propagate(operations_research::sat::DisjunctiveEdgeFinding *this)
{
  operations_research::sat::SchedulingConstraintHelper *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int **v8;
  uint64_t started;
  int *v10;
  int *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  int v19;
  int *v20;
  uint64_t result;
  unint64_t v22;
  int v23;
  int **v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  unint64_t v42;
  int *v43;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v2, *((unsigned __int8 *)this + 8));
  v4 = (int)(v3 >> 2);
  std::vector<BOOL>::resize((uint64_t)this + 160, v4, 0);
  v5 = *((_QWORD *)this + 17);
  v6 = (*((_QWORD *)this + 18) - v5) >> 2;
  if (v4 <= v6)
  {
    if (v4 < v6)
      *((_QWORD *)this + 18) = v5 + 4 * v4;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 136), v4 - v6);
  }
  v7 = 0x8000000000000002;
  v8 = (int **)((char *)this + 48);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                                  + 2));
  v11 = *(int **)started;
  v10 = *(int **)(started + 8);
  if (*(int **)started != v10)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 2);
    v43 = *(int **)(started + 8);
    while (1)
    {
      v14 = *v11;
      v15 = *(_QWORD *)(v11 + 1);
      v16 = *(int *)(v12[16] + 4 * *v11);
      if ((_DWORD)v16 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*v12 + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v16 & 0x3F ^ 1)) & 1) != 0)
      {
        goto LABEL_9;
      }
      v17 = (int *)*((_QWORD *)this + 7);
      if (*(_QWORD *)(*(_QWORD *)(v12[1] + 40) + 12 * *(int *)(v12[4] + 4 * v14)) >= v7)
      {
        v20 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * (v17 - *v8) >= 3)
        {
          result = operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow((uint64_t)this, v7);
          if (!(_DWORD)result)
            return result;
          v20 = *v8;
          v10 = v43;
        }
        *((_QWORD *)this + 7) = v20;
        v22 = *((_QWORD *)this + 8);
        if ((unint64_t)v20 >= v22)
        {
          v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v20) >> 2);
          v32 = 2 * v31;
          if (2 * v31 <= 1)
            v32 = 1;
          if (v31 >= 0xAAAAAAAAAAAAAAALL)
            v33 = 0x1555555555555555;
          else
            v33 = v32;
          if (v33 > 0x1555555555555555)
LABEL_55:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v34 = 12 * v33;
          v35 = (char *)operator new(12 * v33);
          *(_DWORD *)v35 = v14;
          *(_QWORD *)(v35 + 4) = v15;
          v36 = v35 + 12;
          *((_QWORD *)this + 6) = v35;
          *((_QWORD *)this + 7) = v35 + 12;
          *((_QWORD *)this + 8) = &v35[v34];
          if (v20)
            operator delete(v20);
          v10 = v43;
          *((_QWORD *)this + 7) = v36;
          v12 = (_QWORD *)*((_QWORD *)this + 2);
          v23 = *(_DWORD *)(v12[10] + 4 * v14);
          if (v23 == -1)
            goto LABEL_40;
LABEL_21:
          v13 = (_QWORD *)(*(_QWORD *)(v12[1] + 40) + 12 * v23);
        }
        else
        {
          *v20 = v14;
          *(_QWORD *)(v20 + 1) = v15;
          *((_QWORD *)this + 7) = v20 + 3;
          v12 = (_QWORD *)*((_QWORD *)this + 2);
          v23 = *(_DWORD *)(v12[10] + 4 * v14);
          if (v23 != -1)
            goto LABEL_21;
LABEL_40:
          v13 = (_QWORD *)(v12[13] + 8 * v14);
        }
        v7 = v15;
        goto LABEL_8;
      }
      v18 = *((_QWORD *)this + 8);
      if ((unint64_t)v17 >= v18)
        break;
      *v17 = v14;
      *(_QWORD *)(v17 + 1) = v15;
      *((_QWORD *)this + 7) = v17 + 3;
      v12 = (_QWORD *)*((_QWORD *)this + 2);
      v19 = *(_DWORD *)(v12[10] + 4 * v14);
      if (v19 == -1)
        goto LABEL_48;
LABEL_7:
      v13 = (_QWORD *)(*(_QWORD *)(v12[1] + 40) + 12 * v19);
LABEL_8:
      v7 += *v13;
LABEL_9:
      v11 += 3;
      if (v11 == v10)
        goto LABEL_51;
    }
    v24 = v8;
    v25 = *v8;
    v26 = 0xAAAAAAAAAAAAAAABLL * (v17 - *v8);
    v27 = v26 + 1;
    if (v26 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v25) >> 2);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0xAAAAAAAAAAAAAAALL)
      v29 = 0x1555555555555555;
    else
      v29 = v27;
    v42 = v29;
    if (v29)
    {
      if (v29 > 0x1555555555555555)
        goto LABEL_55;
      v30 = (char *)operator new(12 * v29);
    }
    else
    {
      v30 = 0;
    }
    v37 = &v30[12 * v26];
    *(_DWORD *)v37 = v14;
    *(_QWORD *)(v37 + 4) = v15;
    v38 = v37;
    v8 = v24;
    if (v17 == v25)
    {
      v41 = v37 + 12;
      *((_QWORD *)this + 6) = v37;
      *((_QWORD *)this + 7) = v37 + 12;
      *((_QWORD *)this + 8) = &v30[12 * v42];
      if (v17)
LABEL_46:
        operator delete(v17);
    }
    else
    {
      do
      {
        v39 = *(_QWORD *)(v17 - 3);
        v17 -= 3;
        v40 = v17[2];
        *(_QWORD *)(v38 - 12) = v39;
        v38 -= 12;
        *((_DWORD *)v38 + 2) = v40;
      }
      while (v17 != v25);
      v17 = *v24;
      v41 = v37 + 12;
      *((_QWORD *)this + 6) = v38;
      *((_QWORD *)this + 7) = v37 + 12;
      *((_QWORD *)this + 8) = &v30[12 * v42];
      if (v17)
        goto LABEL_46;
    }
    v10 = v43;
    *((_QWORD *)this + 7) = v41;
    v12 = (_QWORD *)*((_QWORD *)this + 2);
    v19 = *(_DWORD *)(v12[10] + 4 * v14);
    if (v19 == -1)
    {
LABEL_48:
      v13 = (_QWORD *)(v12[13] + 8 * v14);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_51:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2) < 3)
    return 1;
  result = operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow((uint64_t)this, v7);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow(uint64_t a1, uint64_t a2)
{
  char *v3;
  int *v4;
  int *v5;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _OWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t Envelope;
  int v62;
  uint64_t EnvelopeOf;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  operations_research::sat::SchedulingConstraintHelper *v68;
  int v69;
  int v70;
  unint64_t v71;
  int *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  int *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  _OWORD *v84;
  int *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  operations_research::sat::SchedulingConstraintHelper *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  _BYTE *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t OptionalEnvelope;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int MaxEventWithEnvelopeGreaterThan;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  operations_research::sat::SchedulingConstraintHelper *v113;
  int v114;
  int v115;
  unint64_t v116;
  int *v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  int *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  _OWORD *v129;
  int *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  unint64_t v134;
  operations_research::sat::SchedulingConstraintHelper *v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  _BYTE *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  void **v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BYTE v172[12];
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v3 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(int **)(a1 + 48);
  v5 = *(int **)(a1 + 56);
  v168 = (uint64_t *)(a1 + 24);
  if (v4 == v5)
  {
    v27 = (uint64_t)v3;
  }
  else
  {
    do
    {
      while (1)
      {
        while (1)
        {
          v7 = *v4;
          v8 = *(_QWORD **)(a1 + 16);
          v9 = 4 * *v4;
          v10 = *v4;
          v11 = -*(_QWORD *)(*(_QWORD *)(v8[1] + 40) + 12 * (*(_DWORD *)(v8[7] + v9) ^ 1));
          v12 = *(int *)(v8[16] + v9);
          v13 = (unint64_t)*v4 >> 3;
          if (((_DWORD)v12 == -1
             || ((*(_QWORD *)(*(_QWORD *)(*v8 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
            && v11 < a2)
          {
            break;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 160) + (v13 & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
          v4 += 3;
          if (v4 == v5)
            goto LABEL_26;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + (v13 & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
        v14 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v3 >= v14)
          break;
        *(_DWORD *)v3 = v7;
        *(_QWORD *)(v3 + 4) = v11;
        *(_QWORD *)(a1 + 32) = v3 + 12;
        v3 += 12;
        v4 += 3;
        if (v4 == v5)
          goto LABEL_26;
      }
      v15 = (char *)*v168;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*v168] >> 2);
      v17 = v16 + 1;
      if (v16 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v15) >> 2);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0xAAAAAAAAAAAAAAALL)
        v19 = 0x1555555555555555;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0x1555555555555555)
LABEL_185:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(12 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[12 * v16];
      *(_DWORD *)v21 = v7;
      *(_QWORD *)(v21 + 4) = v11;
      v22 = v21;
      if (v3 != v15)
      {
        do
        {
          v23 = *(_QWORD *)(v3 - 12);
          v3 -= 12;
          v24 = *((_DWORD *)v3 + 2);
          *(_QWORD *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v3 != v15);
        v3 = (char *)*v168;
      }
      v25 = &v20[12 * v19];
      v26 = v21 + 12;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v21 + 12;
      *(_QWORD *)(a1 + 40) = v25;
      if (v3)
        operator delete(v3);
      *(_QWORD *)(a1 + 32) = v26;
      v3 = v26;
      v4 += 3;
    }
    while (v4 != v5);
LABEL_26:
    v27 = *v168;
  }
  v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-v27] >> 2);
  if (v28 < 2)
    return 1;
  v30 = 126 - 2 * __clz(v28);
  if (v3 == (char *)v27)
    v31 = 0;
  else
    v31 = v30;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v27, (uint64_t *)v3, (uint64_t)v172, v31, 1);
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  v165 = (void **)(a1 + 112);
  v33 = a1 + 72;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)(a1 + 72), v32);
  v164 = v32;
  if ((int)v32 >= 1)
  {
    v34 = 0;
    v35 = v32;
    v161 = v32;
    while (1)
    {
      v36 = (int *)(*(_QWORD *)(a1 + 48) + 12 * v34);
      v32 = *v36;
      v37 = *(_QWORD **)(a1 + 16);
      v38 = *(_DWORD *)(v37[10] + 4 * v32);
      if (v38 == -1)
      {
        v39 = *(_QWORD *)(v36 + 1);
        v40 = *(_QWORD *)(v37[13] + 8 * v32);
        v42 = *(uint64_t **)(a1 + 120);
        v41 = *(_QWORD *)(a1 + 128);
        if ((unint64_t)v42 >= v41)
        {
LABEL_40:
          v169 = v39;
          v44 = (uint64_t *)*v165;
          v45 = (char *)v42 - (_BYTE *)*v165;
          v46 = v45 >> 3;
          v47 = (v45 >> 3) + 1;
          if (v47 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v48 = v41 - (_QWORD)v44;
          if (v48 >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            if (v49 >> 61)
              goto LABEL_185;
            v50 = operator new(8 * v49);
            v51 = (uint64_t *)&v50[8 * v46];
            *v51 = v40;
            v43 = (uint64_t)(v51 + 1);
            if (v42 != v44)
            {
LABEL_49:
              v52 = (char *)(v42 - 1) - (char *)v44;
              if (v52 < 0x58)
                goto LABEL_193;
              if ((unint64_t)((char *)v42 - &v50[v45]) < 0x20)
                goto LABEL_193;
              v53 = (v52 >> 3) + 1;
              v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              v55 = &v42[v54 / 0xFFFFFFFFFFFFFFF8];
              v51 = (uint64_t *)((char *)v51 - v54);
              v56 = &v50[8 * v46 - 16];
              v57 = v42 - 2;
              v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *(_OWORD *)v57;
                *(v56 - 1) = *((_OWORD *)v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 4;
                v58 -= 4;
              }
              while (v58);
              v42 = v55;
              if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                do
                {
                  v60 = *--v42;
                  *--v51 = v60;
                }
                while (v42 != v44);
              }
            }
          }
          else
          {
            v50 = 0;
            v51 = (uint64_t *)(8 * v46);
            *(_QWORD *)(8 * v46) = v40;
            v43 = 8 * v46 + 8;
            if (v42 != v44)
              goto LABEL_49;
          }
          *(_QWORD *)(a1 + 112) = v51;
          *(_QWORD *)(a1 + 120) = v43;
          *(_QWORD *)(a1 + 128) = &v50[8 * v49];
          if (v44)
            operator delete(v44);
          v33 = a1 + 72;
          v35 = v161;
          v39 = v169;
          goto LABEL_61;
        }
      }
      else
      {
        v39 = *(_QWORD *)(v36 + 1);
        v40 = *(_QWORD *)(*(_QWORD *)(v37[1] + 40) + 12 * v38);
        v42 = *(uint64_t **)(a1 + 120);
        v41 = *(_QWORD *)(a1 + 128);
        if ((unint64_t)v42 >= v41)
          goto LABEL_40;
      }
      *v42 = v40;
      v43 = (uint64_t)(v42 + 1);
LABEL_61:
      *(_QWORD *)(a1 + 120) = v43;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
      {
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v33, v34, v39, v40);
        LODWORD(v32) = v164;
        if (++v34 == v35)
          break;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v32) = v34;
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v33, v34, v39, v40, v40);
        LODWORD(v32) = v164;
        if (++v34 == v35)
          break;
      }
    }
  }
  v177 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
  Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v33);
  if (Envelope <= v177)
  {
    v102 = Envelope;
    while (1)
    {
      OptionalEnvelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33);
      v104 = v177;
      if (OptionalEnvelope > v177)
        break;
LABEL_181:
      v151 = *(_QWORD *)(a1 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v151) >> 2) < 3)
        return 1;
      v152 = *(_QWORD *)(v151 + 4);
      if (v152 >= operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33))
        return 1;
      v153 = *(_QWORD *)(a1 + 32);
      v154 = *(int *)(v153 - 12);
      *(_QWORD *)(a1 + 32) = v153 - 12;
      v155 = *(int *)(*(_QWORD *)(a1 + 136) + 4 * v154);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v154 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v154;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v33, v155, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 12 * (int)v155 + 4), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v155));
      v177 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
      v102 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v33);
      if (v102 > v177)
        goto LABEL_64;
    }
    v156 = v102;
    v157 = v102 - 1;
    while (1)
    {
      v176 = 0;
      v175 = 0;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v33, v104, (int *)&v176 + 1, (int *)&v176, &v175);
      v105 = v176;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 40)
                     + 12
                     * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)
                              + 4 * *(int *)(*(_QWORD *)(a1 + 48) + 12 * (int)v176))) < v102)
      {
        v158 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * (int)v176);
        MaxEventWithEnvelopeGreaterThan = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v33, v157);
        if (SHIDWORD(v176) >= MaxEventWithEnvelopeGreaterThan)
          LODWORD(v108) = MaxEventWithEnvelopeGreaterThan;
        else
          LODWORD(v108) = HIDWORD(v176);
        if (MaxEventWithEnvelopeGreaterThan <= SHIDWORD(v176))
          v109 = HIDWORD(v176);
        else
          v109 = MaxEventWithEnvelopeGreaterThan;
        v110 = *(_QWORD *)(a1 + 48);
        v167 = *(_QWORD *)(v110 + 12 * v109 + 4);
        v171 = *(_QWORD *)(v110 + 12 * (int)v108 + 4);
        v174 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (int)v176) + v177 + ~v175;
        if (v174 < v177)
        {
          v173 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v174, (int)&v177, "window_end >= non_gray_end_max");
          if (v173)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v172, (google::glog_internal_namespace_ *)"./ortools/sat/disjunctive.cc", 1297, &v173);
            google::LogMessage::stream((google::LogMessage *)v172);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v172);
          }
        }
        v108 = (int)v108;
        operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
        if ((int)v108 < (int)v32)
        {
          v163 = v109;
          while (2)
          {
            v112 = *(int *)(*(_QWORD *)(a1 + 48) + 12 * v108);
            if (((*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) != 0)
              goto LABEL_132;
            v113 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
            operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v113, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * v108));
            v114 = *(_DWORD *)(*((_QWORD *)v113 + 16) + 4 * v112);
            if (v114 == -1)
              goto LABEL_155;
            v115 = v114 ^ 1;
            v117 = (int *)*((_QWORD *)v113 + 46);
            v116 = *((_QWORD *)v113 + 47);
            if ((unint64_t)v117 < v116)
            {
              *v117 = v115;
              v118 = (uint64_t)(v117 + 1);
              goto LABEL_154;
            }
            v119 = (int *)*((_QWORD *)v113 + 45);
            v120 = v117 - v119;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
LABEL_187:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v122 = v116 - (_QWORD)v119;
            if (v122 >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            v160 = v121;
            if (v121)
            {
              if (v121 >> 62)
                goto LABEL_185;
              v123 = operator new(4 * v121);
              v124 = (int *)&v123[4 * v120];
              *v124 = v115;
              v118 = (uint64_t)(v124 + 1);
              if (v117 != v119)
              {
LABEL_145:
                v125 = (char *)(v117 - 1) - (char *)v119;
                if (v125 < 0x2C)
                  goto LABEL_194;
                if ((unint64_t)((char *)v119 - v123) < 0x20)
                  goto LABEL_194;
                v126 = (v125 >> 2) + 1;
                v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
                v128 = &v117[v127 / 0xFFFFFFFFFFFFFFFCLL];
                v124 = (int *)((char *)v124 - v127);
                v129 = &v123[4 * v120 - 16];
                v130 = v117 - 4;
                v131 = v126 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v132 = *(_OWORD *)v130;
                  *(v129 - 1) = *((_OWORD *)v130 - 1);
                  *v129 = v132;
                  v129 -= 2;
                  v130 -= 8;
                  v131 -= 8;
                }
                while (v131);
                v117 = v128;
                if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_194:
                  do
                  {
                    v133 = *--v117;
                    *--v124 = v133;
                  }
                  while (v117 != v119);
                }
                *((_QWORD *)v113 + 45) = v124;
                *((_QWORD *)v113 + 46) = v118;
                *((_QWORD *)v113 + 47) = &v123[4 * v160];
                if (v119)
LABEL_152:
                  operator delete(v119);
LABEL_153:
                LODWORD(v32) = v164;
LABEL_154:
                *((_QWORD *)v113 + 46) = v118;
LABEL_155:
                if (v108 >= v163)
                  v134 = v167;
                else
                  v134 = v171;
                operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v112, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v108), v134);
                v135 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
                v136 = v174;
                operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v135, v112);
                v137 = 0x7FFFFFFFFFFFFFFFLL;
                if (v136 >= (uint64_t)0x8000000000000002)
                  v137 = -v136;
                *(_DWORD *)v172 = *(_DWORD *)(*((_QWORD *)v135 + 7) + 4 * v112) ^ 1;
                *(_QWORD *)&v172[4] = v137;
                v138 = *(_QWORD *)v172;
                v139 = HIDWORD(v137);
                v141 = (char *)*((_QWORD *)v135 + 49);
                v140 = *((_QWORD *)v135 + 50);
                if ((unint64_t)v141 < v140)
                {
                  *(_QWORD *)v141 = *(_QWORD *)v172;
                  *((_DWORD *)v141 + 2) = HIDWORD(v137);
                  v111 = v141 + 12;
                }
                else
                {
                  v142 = (_BYTE *)*((_QWORD *)v135 + 48);
                  v143 = 0xAAAAAAAAAAAAAAABLL * ((v141 - v142) >> 2) + 1;
                  if (v143 > 0x1555555555555555)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140 - (_QWORD)v142) >> 2);
                  if (2 * v144 > v143)
                    v143 = 2 * v144;
                  if (v144 >= 0xAAAAAAAAAAAAAAALL)
                    v145 = 0x1555555555555555;
                  else
                    v145 = v143;
                  if (v145)
                  {
                    if (v145 > 0x1555555555555555)
                      goto LABEL_185;
                    v146 = (char *)operator new(12 * v145);
                  }
                  else
                  {
                    v146 = 0;
                  }
                  v147 = &v146[4 * ((v141 - v142) >> 2)];
                  *(_QWORD *)v147 = v138;
                  *((_DWORD *)v147 + 2) = v139;
                  v148 = v147;
                  if (v141 != v142)
                  {
                    do
                    {
                      v149 = *(_QWORD *)(v141 - 12);
                      v141 -= 12;
                      v150 = *((_DWORD *)v141 + 2);
                      *(_QWORD *)(v148 - 12) = v149;
                      v148 -= 12;
                      *((_DWORD *)v148 + 2) = v150;
                    }
                    while (v141 != v142);
                    v141 = (char *)*((_QWORD *)v135 + 48);
                  }
                  v111 = v147 + 12;
                  *((_QWORD *)v135 + 48) = v148;
                  *((_QWORD *)v135 + 49) = v147 + 12;
                  *((_QWORD *)v135 + 50) = &v146[12 * v145];
                  LODWORD(v32) = v164;
                  if (v141)
                    operator delete(v141);
                }
                *((_QWORD *)v135 + 49) = v111;
LABEL_132:
                if ((_DWORD)v32 == (_DWORD)++v108)
                  goto LABEL_117;
                continue;
              }
            }
            else
            {
              v123 = 0;
              v124 = (int *)(4 * v120);
              *(_DWORD *)(4 * v120) = v115;
              v118 = 4 * v120 + 4;
              if (v117 != v119)
                goto LABEL_145;
            }
            break;
          }
          *((_QWORD *)v113 + 45) = v124;
          *((_QWORD *)v113 + 46) = v118;
          *((_QWORD *)v113 + 47) = &v123[4 * v160];
          if (v119)
            goto LABEL_152;
          goto LABEL_153;
        }
LABEL_117:
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v158, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (int)v176), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 12 * SHIDWORD(v176) + 4));
        v102 = v156;
        result = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(a1 + 16), v158, v156);
        if (!(_DWORD)result)
          return result;
        v105 = v176;
        v33 = a1 + 72;
      }
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v33, v105);
      v106 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33);
      v104 = v177;
      if (v106 <= v177)
        goto LABEL_181;
    }
  }
LABEL_64:
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
  v62 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v33, v177);
  v170 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 12 * v62 + 4);
  EnvelopeOf = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelopeOf(v33, v62);
  if (v62 < (int)v32)
  {
    v64 = v62;
    v65 = 1 - EnvelopeOf;
    if (EnvelopeOf < (uint64_t)0x8000000000000003)
      v65 = 0x7FFFFFFFFFFFFFFFLL;
    v166 = v65;
    v162 = HIDWORD(v65);
    while (1)
    {
      v67 = *(int *)(*(_QWORD *)(a1 + 48) + 12 * v64);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67) & 1) != 0)
        goto LABEL_70;
      v68 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v68, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * v64));
      v69 = *(_DWORD *)(*((_QWORD *)v68 + 16) + 4 * v67);
      if (v69 != -1)
        break;
LABEL_92:
      operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v67, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v64), v170);
      v89 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v89, v67);
      *(_DWORD *)v172 = *(_DWORD *)(*((_QWORD *)v89 + 7) + 4 * v67) ^ 1;
      *(_QWORD *)&v172[4] = v166;
      v90 = *(_QWORD *)v172;
      v92 = (char *)*((_QWORD *)v89 + 49);
      v91 = *((_QWORD *)v89 + 50);
      if ((unint64_t)v92 < v91)
      {
        *(_QWORD *)v92 = *(_QWORD *)v172;
        *((_DWORD *)v92 + 2) = v162;
        v66 = v92 + 12;
      }
      else
      {
        v93 = (_BYTE *)*((_QWORD *)v89 + 48);
        v94 = 0xAAAAAAAAAAAAAAABLL * ((v92 - v93) >> 2) + 1;
        if (v94 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (_QWORD)v93) >> 2);
        if (2 * v95 > v94)
          v94 = 2 * v95;
        if (v95 >= 0xAAAAAAAAAAAAAAALL)
          v96 = 0x1555555555555555;
        else
          v96 = v94;
        if (v96)
        {
          if (v96 > 0x1555555555555555)
            goto LABEL_185;
          v97 = (char *)operator new(12 * v96);
        }
        else
        {
          v97 = 0;
        }
        v98 = &v97[4 * ((v92 - v93) >> 2)];
        *(_QWORD *)v98 = v90;
        *((_DWORD *)v98 + 2) = v162;
        v99 = v98;
        if (v92 != v93)
        {
          do
          {
            v100 = *(_QWORD *)(v92 - 12);
            v92 -= 12;
            v101 = *((_DWORD *)v92 + 2);
            *(_QWORD *)(v99 - 12) = v100;
            v99 -= 12;
            *((_DWORD *)v99 + 2) = v101;
          }
          while (v92 != v93);
          v92 = (char *)*((_QWORD *)v89 + 48);
        }
        v66 = v98 + 12;
        *((_QWORD *)v89 + 48) = v99;
        *((_QWORD *)v89 + 49) = v98 + 12;
        *((_QWORD *)v89 + 50) = &v97[12 * v96];
        if (v92)
          operator delete(v92);
      }
      *((_QWORD *)v89 + 49) = v66;
LABEL_70:
      if ((_DWORD)++v64 == (_DWORD)v32)
        return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
    }
    v70 = v69 ^ 1;
    v72 = (int *)*((_QWORD *)v68 + 46);
    v71 = *((_QWORD *)v68 + 47);
    if ((unint64_t)v72 < v71)
    {
      *v72 = v70;
      v73 = (uint64_t)(v72 + 1);
      LODWORD(v32) = v164;
LABEL_91:
      *((_QWORD *)v68 + 46) = v73;
      goto LABEL_92;
    }
    v74 = (int *)*((_QWORD *)v68 + 45);
    v75 = v72 - v74;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 62)
      goto LABEL_187;
    v77 = v71 - (_QWORD)v74;
    if (v77 >> 1 > v76)
      v76 = v77 >> 1;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
      v76 = 0x3FFFFFFFFFFFFFFFLL;
    v159 = v76;
    if (v76)
    {
      if (v76 >> 62)
        goto LABEL_185;
      v78 = operator new(4 * v76);
      v79 = (int *)&v78[4 * v75];
      *v79 = v70;
      v73 = (uint64_t)(v79 + 1);
      if (v72 != v74)
      {
LABEL_83:
        v80 = (char *)(v72 - 1) - (char *)v74;
        LODWORD(v32) = v164;
        if (v80 < 0x2C)
          goto LABEL_195;
        if ((unint64_t)((char *)v74 - v78) < 0x20)
          goto LABEL_195;
        v81 = (v80 >> 2) + 1;
        v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        v83 = &v72[v82 / 0xFFFFFFFFFFFFFFFCLL];
        v79 = (int *)((char *)v79 - v82);
        v84 = &v78[4 * v75 - 16];
        v85 = v72 - 4;
        v86 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v87 = *(_OWORD *)v85;
          *(v84 - 1) = *((_OWORD *)v85 - 1);
          *v84 = v87;
          v84 -= 2;
          v85 -= 8;
          v86 -= 8;
        }
        while (v86);
        v72 = v83;
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_195:
          do
          {
            v88 = *--v72;
            *--v79 = v88;
          }
          while (v72 != v74);
        }
        *((_QWORD *)v68 + 45) = v79;
        *((_QWORD *)v68 + 46) = v73;
        *((_QWORD *)v68 + 47) = &v78[4 * v159];
        if (!v74)
          goto LABEL_91;
LABEL_90:
        operator delete(v74);
        goto LABEL_91;
      }
    }
    else
    {
      v78 = 0;
      v79 = (int *)(4 * v75);
      *(_DWORD *)(4 * v75) = v70;
      v73 = 4 * v75 + 4;
      if (v72 != v74)
        goto LABEL_83;
    }
    LODWORD(v32) = v164;
    *((_QWORD *)v68 + 45) = v79;
    *((_QWORD *)v68 + 46) = v73;
    *((_QWORD *)v68 + 47) = &v78[4 * v159];
    if (!v74)
      goto LABEL_91;
    goto LABEL_90;
  }
  return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
}

void sub_22DB48B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::DisjunctivePrecedences::~DisjunctivePrecedences(operations_research::sat::DisjunctivePrecedences *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985D90;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_24F985D90;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::DisjunctiveWithTwoItems::~DisjunctiveWithTwoItems(operations_research::sat::DisjunctiveWithTwoItems *this)
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F985E20;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F985E20;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F985E20;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DB48F50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F985E20;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DB48FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  operations_research::sat::GenericLiteralWatcher *v11;
  operations_research::sat::SatParameters *v12;
  operations_research::sat::SatParameters *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  operations_research::sat::SchedulingConstraintHelper *v18;
  uint64_t (**v19)();
  uint64_t (***v20)();
  uint64_t v21;
  unsigned int v22;
  uint64_t (**v23)();
  uint64_t (***v24)();
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  char *v33;
  uint64_t v34;
  int *v35;
  char *v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t (***v54)();
  uint64_t v55;
  operations_research::sat::SchedulingConstraintHelper **v56;
  unsigned int v57;
  uint64_t (**v58)();
  uint64_t v59;
  uint64_t (***v60)();
  char *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t (**v64)();
  char **v65;
  uint64_t (***v66)();
  char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t (**v70)();
  uint64_t v71;
  uint64_t (***v72)();
  char *v73;
  operations_research::sat::SchedulingConstraintHelper **v74;
  unsigned int v75;
  uint64_t (**v76)();
  uint64_t (***v77)();
  char *v78;
  operations_research::sat::SchedulingConstraintHelper **v79;
  unsigned int v80;
  uint64_t (**v81)();
  uint64_t v82;
  uint64_t (***v83)();
  char *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t (**v87)();
  uint64_t (***v88)();
  char *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t (**v92)();
  uint64_t (***v93)();
  uint64_t v94;
  operations_research::sat::IntegerTrail *v95;
  operations_research::sat::PrecedencesPropagator *v96;
  uint64_t (**v97)();
  uint64_t v98;
  char **v99;
  uint64_t (***v100)();
  char *v101;
  uint64_t v102;
  operations_research::sat::IntegerTrail *v103;
  operations_research::sat::PrecedencesPropagator *v104;
  unsigned int v105;
  uint64_t (**v106)();
  uint64_t (***v107)();
  _QWORD *v108;
  uint64_t v109;
  void *__p;
  char *v111;
  char *v112;
  uint64_t v113;
  _BYTE v114[24];
  _BYTE *v115;
  uint64_t (**v116)();
  int v117;
  uint64_t (***v118)();
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  v5 = *(int **)(a1 + 8);
  v6 = *(int **)(a1 + 16);
  v109 = v3;
  if (v5 != v6)
  {
    v7 = *(int **)(a1 + 8);
    while (1)
    {
      v8 = *v7;
      if (*(_DWORD *)(v4[2] + 4 * v8) != -1)
        break;
      v9 = *(_DWORD *)(v4[11] + 4 * v8);
      if (v9 == -1)
      {
        if (*(_QWORD *)(v4[14] + 8 * v8) != 1)
          break;
      }
      else
      {
        v10 = *(_QWORD *)(*v4 + 40);
        if (*(_QWORD *)(v10 + 12 * v9) != 1 || *(_QWORD *)(v10 + 12 * (v9 ^ 1)) != -1)
          break;
      }
      if (++v7 == v6)
      {
        __p = 0;
        v111 = 0;
        v112 = 0;
        if ((char *)v6 - (char *)v5 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        __p = operator new((char *)v6 - (char *)v5);
        v111 = (char *)__p;
        v112 = (char *)__p + 4 * (v6 - v5);
        v25 = (_QWORD *)(v3 + 32);
        v108 = (_QWORD *)(v3 + 32);
        while (1)
        {
          v26 = *v5;
          v116 = &off_24F985E90;
          v117 = v26;
          v118 = &v116;
          v27 = (_QWORD *)*v25;
          v28 = v25;
          do
          {
            v29 = v27[4];
            v30 = v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
            if (v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
              v31 = v27;
            else
              v31 = v27 + 1;
            if (v30)
              v28 = v27;
            v27 = (_QWORD *)*v31;
          }
          while (*v31);
          v32 = *(_DWORD *)(*(_QWORD *)(v28[5] + 40) + 4 * v26);
          v33 = v111;
          if (v111 < v112)
          {
            *(_DWORD *)v111 = v32;
            v34 = (uint64_t)(v33 + 4);
LABEL_61:
            v111 = (char *)v34;
            v54 = &v116;
            v55 = 4;
            goto LABEL_62;
          }
          v35 = v6;
          v36 = (char *)__p;
          v37 = v111 - (_BYTE *)__p;
          v38 = (v111 - (_BYTE *)__p) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v40 = v112 - (_BYTE *)__p;
          if ((v112 - (_BYTE *)__p) >> 1 > v39)
            v39 = v40 >> 1;
          v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
          if (v41)
          {
            if (v41 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v42 = (char *)operator new(4 * v41);
            v43 = &v42[4 * v38];
            *(_DWORD *)v43 = v32;
            v34 = (uint64_t)(v43 + 4);
            if (v33 == v36)
            {
LABEL_50:
              v6 = v35;
              goto LABEL_56;
            }
          }
          else
          {
            v42 = 0;
            v43 = (char *)(4 * v38);
            *(_DWORD *)(4 * v38) = v32;
            v34 = 4 * v38 + 4;
            if (v33 == v36)
              goto LABEL_50;
          }
          v44 = v33 - 4 - v36;
          if (v44 < 0x2C)
            break;
          v45 = v33 - &v42[v37];
          v6 = v35;
          if (v45 < 0x20)
            goto LABEL_55;
          v46 = (v44 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v33[-v47];
          v43 -= v47;
          v49 = &v42[4 * v38 - 16];
          v50 = v33 - 16;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
            *(_OWORD *)v49 = v52;
            v49 -= 32;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          v33 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_55;
LABEL_56:
          __p = v43;
          v111 = (char *)v34;
          v112 = &v42[4 * v41];
          if (!v36)
          {
            v25 = v108;
            goto LABEL_61;
          }
          operator delete(v36);
          v54 = v118;
          v111 = (char *)v34;
          v25 = v108;
          if (v118 == &v116)
          {
            v54 = &v116;
            v55 = 4;
            goto LABEL_62;
          }
          if (v118)
          {
            v55 = 5;
LABEL_62:
            (*v54)[v55]();
          }
          if (++v5 == v6)
            goto LABEL_13;
        }
        v6 = v35;
        do
        {
LABEL_55:
          v53 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v43 - 1) = v53;
          v43 -= 4;
        }
        while (v33 != v36);
        goto LABEL_56;
      }
    }
    v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
    v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(v3);
    v13 = v12;
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) >= 9uLL && *((_BYTE *)v12 + 157))
    {
      v14 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<true>>(v3);
      operations_research::sat::CombinedDisjunctive<true>::AddNoOverlap(v14, (int **)(a1 + 8));
      v15 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<false>>(v3);
      operations_research::sat::CombinedDisjunctive<false>::AddNoOverlap(v15, (int **)(a1 + 8));
      return;
    }
    v18 = (operations_research::sat::SchedulingConstraintHelper *)operator new();
    operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(v18, a1 + 8, v3);
    v19 = (uint64_t (**)())operator new();
    *v19 = (uint64_t (*)())&off_24F983868;
    v19[1] = (uint64_t (*)())v18;
    v116 = v19;
    v20 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v20 >= *(_QWORD *)(v3 + 64))
    {
      *(_QWORD *)(v3 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v116);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_19:
        v21 = operator new();
        *(_QWORD *)v21 = &off_24F985DD8;
        *(_QWORD *)(v21 + 8) = v18;
        v22 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v21);
        operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v21 + 8), v22, v11, 1, 1);
        v23 = (uint64_t (**)())operator new();
        *v23 = (uint64_t (*)())&off_24F986058;
        v23[1] = (uint64_t (*)())v21;
        v116 = v23;
        v24 = *(uint64_t (****)())(v3 + 56);
        if ((unint64_t)v24 >= *(_QWORD *)(v3 + 64))
        {
          *(_QWORD *)(v3 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v116);
          if (!*((_BYTE *)v13 + 391))
            return;
        }
        else
        {
          *v24 = v23;
          *(_QWORD *)(v3 + 56) = v24 + 1;
          if (!*((_BYTE *)v13 + 391))
            return;
        }
LABEL_91:
        if (!*((_BYTE *)v13 + 157))
        {
          v94 = operator new();
          v95 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
          v96 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(v3);
          operations_research::sat::DisjunctivePrecedences::DisjunctivePrecedences((operations_research::sat::DisjunctivePrecedences *)v94, 1, v18, v95, v96);
          LODWORD(v95) = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v94);
          operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v94 + 16), *(unsigned __int8 *)(v94 + 8));
          operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v94 + 16), v95, v11, 0, 0);
          operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, (int)v95, 5);
          v97 = (uint64_t (**)())operator new();
          v98 = v3;
          v99 = (char **)(v3 + 48);
          *v97 = (uint64_t (*)())&off_24F986170;
          v97[1] = (uint64_t (*)())v94;
          v116 = v97;
          v100 = *(uint64_t (****)())(v3 + 56);
          if ((unint64_t)v100 >= *(_QWORD *)(v3 + 64))
          {
            v101 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v99, &v116);
            v98 = v3;
          }
          else
          {
            *v100 = v97;
            v101 = (char *)(v100 + 1);
          }
          *(_QWORD *)(v98 + 56) = v101;
          v102 = operator new();
          v103 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
          v104 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(v3);
          operations_research::sat::DisjunctivePrecedences::DisjunctivePrecedences((operations_research::sat::DisjunctivePrecedences *)v102, 0, v18, v103, v104);
          v105 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v102);
          operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v102 + 16), *(unsigned __int8 *)(v102 + 8));
          operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v102 + 16), v105, v11, 0, 0);
          operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v105, 5);
          v106 = (uint64_t (**)())operator new();
          *v106 = (uint64_t (*)())&off_24F986170;
          v106[1] = (uint64_t (*)())v102;
          v116 = v106;
          v107 = *(uint64_t (****)())(v3 + 56);
          if ((unint64_t)v107 >= *(_QWORD *)(v3 + 64))
          {
            *(_QWORD *)(v3 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v99, &v116);
          }
          else
          {
            *v107 = v106;
            *(_QWORD *)(v3 + 56) = v107 + 1;
          }
        }
        return;
      }
    }
    else
    {
      *v20 = v19;
      *(_QWORD *)(v3 + 56) = v20 + 1;
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_19;
    }
    v56 = (operations_research::sat::SchedulingConstraintHelper **)operator new();
    operations_research::sat::DisjunctiveOverloadChecker::DisjunctiveOverloadChecker((operations_research::sat::DisjunctiveOverloadChecker *)v56, v18);
    v57 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, (uint64_t)v56);
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v56[1], 1);
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(v56[1], v57, v11, 0, 1);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v57, 1);
    v58 = (uint64_t (**)())operator new();
    *v58 = (uint64_t (*)())&off_24F986090;
    v58[1] = (uint64_t (*)())v56;
    v116 = v58;
    v59 = v3;
    v60 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v60 >= *(_QWORD *)(v3 + 64))
    {
      v61 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v116);
      v59 = v3;
    }
    else
    {
      *v60 = v58;
      v61 = (char *)(v60 + 1);
    }
    *(_QWORD *)(v59 + 56) = v61;
    v62 = operator new();
    operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::DisjunctiveDetectablePrecedences *)v62, 1, v18);
    v63 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v62);
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v62 + 112), *(unsigned __int8 *)(v62 + 104));
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v62 + 112), v63, v11, 1, 0);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v63);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v63, 2);
    v64 = (uint64_t (**)())operator new();
    v65 = (char **)(v3 + 48);
    *v64 = (uint64_t (*)())&off_24F9860C8;
    v64[1] = (uint64_t (*)())v62;
    v116 = v64;
    v66 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v66 >= *(_QWORD *)(v3 + 64))
    {
      v67 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
    }
    else
    {
      *v66 = v64;
      v67 = (char *)(v66 + 1);
    }
    *(_QWORD *)(v3 + 56) = v67;
    v68 = operator new();
    operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::DisjunctiveDetectablePrecedences *)v68, 0, v18);
    v69 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v68);
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v68 + 112), *(unsigned __int8 *)(v68 + 104));
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v68 + 112), v69, v11, 1, 0);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v69);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v69, 2);
    v70 = (uint64_t (**)())operator new();
    *v70 = (uint64_t (*)())&off_24F9860C8;
    v70[1] = (uint64_t (*)())v68;
    v116 = v70;
    v71 = v3;
    v72 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v72 >= *(_QWORD *)(v3 + 64))
    {
      v73 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
      v71 = v3;
    }
    else
    {
      *v72 = v70;
      v73 = (char *)(v72 + 1);
    }
    *(_QWORD *)(v71 + 56) = v73;
    v74 = (operations_research::sat::SchedulingConstraintHelper **)operator new();
    operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::DisjunctiveNotLast *)v74, 1, v18);
    v75 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, (uint64_t)v74);
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(v74[8], v75, v11, 1, 1);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v75);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v75, 3);
    v76 = (uint64_t (**)())operator new();
    *v76 = (uint64_t (*)())&off_24F986100;
    v76[1] = (uint64_t (*)())v74;
    v116 = v76;
    v77 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v77 >= *(_QWORD *)(v3 + 64))
    {
      v78 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
    }
    else
    {
      *v77 = v76;
      v78 = (char *)(v77 + 1);
    }
    *(_QWORD *)(v3 + 56) = v78;
    v79 = (operations_research::sat::SchedulingConstraintHelper **)operator new();
    operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::DisjunctiveNotLast *)v79, 0, v18);
    v80 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, (uint64_t)v79);
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(v79[8], v80, v11, 1, 1);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v80);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v80, 3);
    v81 = (uint64_t (**)())operator new();
    *v81 = (uint64_t (*)())&off_24F986100;
    v81[1] = (uint64_t (*)())v79;
    v116 = v81;
    v82 = v3;
    v83 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v83 >= *(_QWORD *)(v3 + 64))
    {
      v84 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
      v82 = v3;
    }
    else
    {
      *v83 = v81;
      v84 = (char *)(v83 + 1);
    }
    *(_QWORD *)(v82 + 56) = v84;
    v85 = operator new();
    *(_QWORD *)v85 = &off_24F985D48;
    *(_BYTE *)(v85 + 8) = 1;
    *(_QWORD *)(v85 + 16) = v18;
    *(_OWORD *)(v85 + 24) = 0u;
    *(_OWORD *)(v85 + 40) = 0u;
    *(_OWORD *)(v85 + 56) = 0u;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree(v85 + 72);
    *(_QWORD *)(v85 + 176) = 0;
    *(_OWORD *)(v85 + 144) = 0u;
    *(_OWORD *)(v85 + 160) = 0u;
    *(_OWORD *)(v85 + 112) = 0u;
    *(_OWORD *)(v85 + 128) = 0u;
    v86 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v85);
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v85 + 16), *(unsigned __int8 *)(v85 + 8));
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v85 + 16), v86, v11, 0, 1);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v86);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v86, 4);
    v87 = (uint64_t (**)())operator new();
    *v87 = (uint64_t (*)())&off_24F986138;
    v87[1] = (uint64_t (*)())v85;
    v116 = v87;
    v88 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v88 >= *(_QWORD *)(v3 + 64))
    {
      v89 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
    }
    else
    {
      *v88 = v87;
      v89 = (char *)(v88 + 1);
    }
    *(_QWORD *)(v3 + 56) = v89;
    v90 = operator new();
    *(_QWORD *)v90 = &off_24F985D48;
    *(_BYTE *)(v90 + 8) = 0;
    *(_QWORD *)(v90 + 16) = v18;
    *(_OWORD *)(v90 + 24) = 0u;
    *(_OWORD *)(v90 + 40) = 0u;
    *(_OWORD *)(v90 + 56) = 0u;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree(v90 + 72);
    *(_QWORD *)(v90 + 176) = 0;
    *(_OWORD *)(v90 + 144) = 0u;
    *(_OWORD *)(v90 + 160) = 0u;
    *(_OWORD *)(v90 + 112) = 0u;
    *(_OWORD *)(v90 + 128) = 0u;
    v91 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v11, v90);
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(v90 + 16), *(unsigned __int8 *)(v90 + 8));
    operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(v90 + 16), v91, v11, 0, 1);
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v11, v91);
    operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v11, v91, 4);
    v92 = (uint64_t (**)())operator new();
    *v92 = (uint64_t (*)())&off_24F986138;
    v92[1] = (uint64_t (*)())v90;
    v116 = v92;
    v93 = *(uint64_t (****)())(v3 + 56);
    if ((unint64_t)v93 >= *(_QWORD *)(v3 + 64))
    {
      *(_QWORD *)(v3 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v65, &v116);
      if (!*((_BYTE *)v13 + 391))
        return;
    }
    else
    {
      *v93 = v92;
      *(_QWORD *)(v3 + 56) = v93 + 1;
      if (!*((_BYTE *)v13 + 391))
        return;
    }
    goto LABEL_91;
  }
  __p = 0;
  v111 = 0;
  v112 = 0;
LABEL_13:
  operations_research::sat::AllDifferentOnBounds((uint64_t)&__p, (uint64_t)v114);
  v113 = v109;
  if (!v115)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v115 + 48))(v115, &v113);
  v16 = v115;
  if (v115 == v114)
  {
    v17 = 4;
    v16 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_24;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_24:
  if (__p)
  {
    v111 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DB49E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C407206607ELL);
  _Unwind_Resume(a1);
}

void sub_22DB49E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void **v24;
  void *v26;

  v26 = *(void **)(v23 + 48);
  if (v26)
  {
    *(_QWORD *)(v23 + 56) = v26;
    operator delete(v26);
  }
  std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(v24, v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_"
                     "EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVa"
                                "riable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<true>>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d)
  {
    return v4[5];
  }
LABEL_12:
  v8 = operator new();
  operations_research::sat::CombinedDisjunctive<true>::CombinedDisjunctive(v8, a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F985FA0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB4A168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C4092E5BC27);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<true>::AddNoOverlap(_QWORD *a1, int **a2)
{
  _QWORD *v3;
  void **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  int *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;

  v3 = a1;
  v6 = a1[8];
  v5 = a1[9];
  v4 = (void **)(a1 + 8);
  v7 = (char *)a2[1] - (char *)*a2;
  v57 = v7 >> 2;
  if (v5 < (unint64_t)v4[2])
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    if (((unint64_t)v7 >> 2))
    {
      if ((((unint64_t)v7 >> 2) & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v8 = (int)(v7 >> 2);
      v9 = (char *)operator new(20 * v8);
      *(_QWORD *)v5 = v9;
      *(_QWORD *)(v5 + 8) = v9;
      *(_QWORD *)(v5 + 16) = &v9[20 * (int)v8];
    }
    v3[9] = v5 + 32;
    v3[9] = v5 + 32;
    v11 = (char *)v3[12];
    v10 = v3[13];
    if ((unint64_t)v11 >= v10)
      goto LABEL_6;
LABEL_16:
    *(_QWORD *)v11 = 0x8000000000000002;
    v18 = v11 + 8;
    goto LABEL_27;
  }
  v3[9] = std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(v4, &v57);
  v11 = (char *)v3[12];
  v10 = v3[13];
  if ((unint64_t)v11 < v10)
    goto LABEL_16;
LABEL_6:
  v12 = (char *)v3[11];
  v13 = (v11 - v12) >> 3;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = v10 - (_QWORD)v12;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
LABEL_53:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v19 = &v17[8 * v13];
  v20 = &v17[8 * v16];
  *v19 = 0x8000000000000002;
  v18 = v19 + 1;
  if (v11 != v12)
  {
    v21 = v11 - v12 - 8;
    if (v21 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v12 - v17) < 0x20)
      goto LABEL_58;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v11[-v23];
    v19 = (_QWORD *)((char *)v19 - v23);
    v25 = &v17[8 * v13 - 16];
    v26 = v11 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v11 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v29 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v19 = v29;
      }
      while (v11 != v12);
    }
  }
  v3[11] = v19;
  v3[12] = v18;
  v3[13] = v20;
  if (v12)
    operator delete(v12);
LABEL_27:
  v3[12] = v18;
  v31 = *a2;
  v30 = a2[1];
  if (*a2 != v30)
  {
    v55 = v3;
    v56 = (v5 - v6) >> 5;
    v54 = a2[1];
    while (1)
    {
      while (1)
      {
        v32 = v3[2] + 24 * *v31;
        v34 = (uint64_t *)(v32 + 8);
        v33 = *(char **)(v32 + 8);
        v35 = *(_QWORD *)(v32 + 16);
        if ((unint64_t)v33 >= v35)
          break;
        *(_DWORD *)v33 = v56;
        *v34 = (uint64_t)(v33 + 4);
        if (++v31 == v30)
          return;
      }
      v36 = *(char **)v32;
      v37 = (uint64_t)&v33[-*(_QWORD *)v32];
      v38 = v37 >> 2;
      v39 = (v37 >> 2) + 1;
      if (v39 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = v35 - (_QWORD)v36;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41)
        break;
      v42 = 0;
      v43 = (_DWORD *)(4 * v38);
      *(_DWORD *)(4 * v38) = v56;
      v44 = 4 * v38 + 4;
      if (v33 != v36)
        goto LABEL_42;
LABEL_48:
      *(_QWORD *)v32 = v43;
      *v34 = v44;
      *(_QWORD *)(v32 + 16) = &v42[4 * v41];
      if (v36)
        operator delete(v36);
      v30 = v54;
      v3 = v55;
      *v34 = v44;
      if (++v31 == v54)
        return;
    }
    if (v41 >> 62)
      goto LABEL_53;
    v42 = operator new(4 * v41);
    v43 = &v42[4 * v38];
    *v43 = v56;
    v44 = (uint64_t)(v43 + 1);
    if (v33 == v36)
      goto LABEL_48;
LABEL_42:
    v45 = v33 - 4 - v36;
    if (v45 < 0x2C)
      goto LABEL_59;
    if ((unint64_t)(v33 - &v42[v37]) < 0x20)
      goto LABEL_59;
    v46 = (v45 >> 2) + 1;
    v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    v48 = &v33[-v47];
    v43 = (_DWORD *)((char *)v43 - v47);
    v49 = &v42[4 * v38 - 16];
    v50 = v33 - 16;
    v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    v33 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        v53 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *--v43 = v53;
      }
      while (v33 != v36);
    }
    goto LABEL_48;
  }
}

void sub_22DB4A530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v2 + 72) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<false>>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d)
  {
    return v4[5];
  }
LABEL_12:
  v8 = operator new();
  operations_research::sat::CombinedDisjunctive<false>::CombinedDisjunctive(v8, a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F986020;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB4A6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C4092E5BC27);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<false>::AddNoOverlap(_QWORD *a1, int **a2)
{
  _QWORD *v3;
  void **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  int *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;

  v3 = a1;
  v6 = a1[8];
  v5 = a1[9];
  v4 = (void **)(a1 + 8);
  v7 = (char *)a2[1] - (char *)*a2;
  v57 = v7 >> 2;
  if (v5 < (unint64_t)v4[2])
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    if (((unint64_t)v7 >> 2))
    {
      if ((((unint64_t)v7 >> 2) & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v8 = (int)(v7 >> 2);
      v9 = (char *)operator new(20 * v8);
      *(_QWORD *)v5 = v9;
      *(_QWORD *)(v5 + 8) = v9;
      *(_QWORD *)(v5 + 16) = &v9[20 * (int)v8];
    }
    v3[9] = v5 + 32;
    v3[9] = v5 + 32;
    v11 = (char *)v3[12];
    v10 = v3[13];
    if ((unint64_t)v11 >= v10)
      goto LABEL_6;
LABEL_16:
    *(_QWORD *)v11 = 0x8000000000000002;
    v18 = v11 + 8;
    goto LABEL_27;
  }
  v3[9] = std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(v4, &v57);
  v11 = (char *)v3[12];
  v10 = v3[13];
  if ((unint64_t)v11 < v10)
    goto LABEL_16;
LABEL_6:
  v12 = (char *)v3[11];
  v13 = (v11 - v12) >> 3;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = v10 - (_QWORD)v12;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
LABEL_53:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v19 = &v17[8 * v13];
  v20 = &v17[8 * v16];
  *v19 = 0x8000000000000002;
  v18 = v19 + 1;
  if (v11 != v12)
  {
    v21 = v11 - v12 - 8;
    if (v21 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v12 - v17) < 0x20)
      goto LABEL_58;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v11[-v23];
    v19 = (_QWORD *)((char *)v19 - v23);
    v25 = &v17[8 * v13 - 16];
    v26 = v11 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v11 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v29 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v19 = v29;
      }
      while (v11 != v12);
    }
  }
  v3[11] = v19;
  v3[12] = v18;
  v3[13] = v20;
  if (v12)
    operator delete(v12);
LABEL_27:
  v3[12] = v18;
  v31 = *a2;
  v30 = a2[1];
  if (*a2 != v30)
  {
    v55 = v3;
    v56 = (v5 - v6) >> 5;
    v54 = a2[1];
    while (1)
    {
      while (1)
      {
        v32 = v3[2] + 24 * *v31;
        v34 = (uint64_t *)(v32 + 8);
        v33 = *(char **)(v32 + 8);
        v35 = *(_QWORD *)(v32 + 16);
        if ((unint64_t)v33 >= v35)
          break;
        *(_DWORD *)v33 = v56;
        *v34 = (uint64_t)(v33 + 4);
        if (++v31 == v30)
          return;
      }
      v36 = *(char **)v32;
      v37 = (uint64_t)&v33[-*(_QWORD *)v32];
      v38 = v37 >> 2;
      v39 = (v37 >> 2) + 1;
      if (v39 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = v35 - (_QWORD)v36;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41)
        break;
      v42 = 0;
      v43 = (_DWORD *)(4 * v38);
      *(_DWORD *)(4 * v38) = v56;
      v44 = 4 * v38 + 4;
      if (v33 != v36)
        goto LABEL_42;
LABEL_48:
      *(_QWORD *)v32 = v43;
      *v34 = v44;
      *(_QWORD *)(v32 + 16) = &v42[4 * v41];
      if (v36)
        operator delete(v36);
      v30 = v54;
      v3 = v55;
      *v34 = v44;
      if (++v31 == v54)
        return;
    }
    if (v41 >> 62)
      goto LABEL_53;
    v42 = operator new(4 * v41);
    v43 = &v42[4 * v38];
    *v43 = v56;
    v44 = (uint64_t)(v43 + 1);
    if (v33 == v36)
      goto LABEL_48;
LABEL_42:
    v45 = v33 - 4 - v36;
    if (v45 < 0x2C)
      goto LABEL_59;
    if ((unint64_t)(v33 - &v42[v37]) < 0x20)
      goto LABEL_59;
    v46 = (v45 >> 2) + 1;
    v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    v48 = &v33[-v47];
    v43 = (_DWORD *)((char *)v43 - v47);
    v49 = &v42[4 * v38 - 16];
    v50 = v33 - 16;
    v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    v33 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        v53 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *--v43 = v53;
      }
      while (v33 != v36);
    }
    goto LABEL_48;
  }
}

void sub_22DB4AAA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v2 + 72) = v1;
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F985E90;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F985E90;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v4 = *(_QWORD **)(a2 + 32);
  v2 = (_QWORD *)(a2 + 32);
  v3 = v4;
  do
  {
    v5 = v3[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v2 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  return *(unsigned int *)(*(_QWORD *)(v2[5] + 40) + 4 * *(int *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::target_type()
{
}

uint64_t operations_research::sat::CombinedDisjunctive<true>::CombinedDisjunctive(uint64_t a1, uint64_t a2)
{
  operations_research::sat::SchedulingConstraintHelper *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  operations_research::sat::GenericLiteralWatcher *v13;
  unsigned int v14;

  *(_QWORD *)a1 = &off_24F985F20;
  v4 = (operations_research::sat::SchedulingConstraintHelper *)operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(a2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v4, 1);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3);
  if (v6 <= v8)
  {
    if (v6 < v8)
    {
      v9 = v5 + 24 * (int)v6;
      if (v7 != v9)
      {
        v10 = *(_QWORD *)(a1 + 24);
        do
        {
          v12 = *(void **)(v10 - 24);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *(_QWORD *)(v7 - 16) = v11;
            operator delete(v11);
          }
          v7 = v10;
        }
        while (v10 != v9);
      }
      *(_QWORD *)(a1 + 24) = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 16, v6 - v8);
  }
  v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  v14 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v13, a1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), v14, v13, 1, 0);
  operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v13, v14);
  return a1;
}

void sub_22DB4AD0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    v6 = (void *)v1[5];
    if (!v6)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    v6 = (void *)v1[5];
    if (!v6)
      goto LABEL_3;
  }
  operator delete(v6);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::AllIntervalsHelper>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F985F68;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(_QWORD *a1)
{
  operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(a1);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CombinedDisjunctive<true>::Propagate(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int64_t v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  int v61;
  int v62;
  int64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  int v81;
  int v82;
  int v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int *v95;
  int v96;
  int v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  int64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  int *v135;
  int *v136;
  _QWORD *v137;
  char *started;
  int64_t v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  int v146;
  int64_t v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  int64_t v153;
  uint64_t v154;

  v1 = a1;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), 1);
  v2 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  v4 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  if (v4 != v3)
  {
    v5 = v3 - v4 - 32;
    v6 = *(_QWORD *)(v1 + 64);
    if (v5 < 0x20)
      goto LABEL_140;
    v7 = (v5 >> 5) + 1;
    v6 = v4 + 32 * (v7 & 0xFFFFFFFFFFFFFFELL);
    v8 = (uint64_t *)(v4 + 32);
    v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v10 = *v8;
      *(v8 - 3) = *(v8 - 4);
      v8[1] = v10;
      *((_DWORD *)v8 - 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_140:
      do
      {
        *(_QWORD *)(v6 + 8) = *(_QWORD *)v6;
        *(_DWORD *)(v6 + 24) = 0;
        v6 += 32;
      }
      while (v6 != v3);
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(v1 + 88, (uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 3, &operations_research::sat::kMinIntegerValue);
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40) - *(_QWORD *)(*(_QWORD *)(v1 + 8) + 32);
  v148 = (uint64_t *)(v1 + 88);
  LOBYTE(v149) = 0;
  v137 = (_QWORD *)(v1 + 40);
  std::vector<BOOL>::assign((char **)(v1 + 40), (int)(v11 >> 2), &v149);
  v12 = *(int **)v2;
  v135 = (int *)*((_QWORD *)v2 + 1);
  if (*(int **)v2 == v135)
    return 1;
  v13 = 0x8000000000000002;
  v14 = ((unint64_t)v11 >> 2) - 1;
  v143 = v1;
  while (1)
  {
    v15 = *v12;
    v136 = v12;
    v139 = *(_QWORD *)(v12 + 1);
    v16 = *(_QWORD **)(v1 + 8);
    v17 = *(int *)(v16[16] + 4 * *v12);
    if ((_DWORD)v17 != -1
      && ((*(_QWORD *)(*(_QWORD *)(*v16 + 24) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 & 0x3F ^ 1)) & 1) != 0)
    {
      goto LABEL_11;
    }
    v140 = v15;
    if ((v14 & 0x80000000) == 0)
    {
      while (1)
      {
        v18 = (int *)(*(_QWORD *)started + 12 * v14);
        v16 = *(_QWORD **)(v1 + 8);
        if (v139 <= *(_QWORD *)(v18 + 1))
          goto LABEL_63;
        v19 = *v18;
        v20 = *(int *)(v16[16] + 4 * *v18);
        v141 = v14;
        if ((_DWORD)v20 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*v16 + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          *(_QWORD *)(*v137 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          v21 = *(_QWORD *)(v16[1] + 40);
          v22 = *(_DWORD *)(v16[10] + 4 * v19);
          v23 = (uint64_t *)(v22 == -1 ? v16[13] + 8 * v19 : v21 + 12 * v22);
          v24 = *(_QWORD *)(v21 + 12 * *(int *)(v16[4] + 4 * v19));
          v25 = *v23;
          v26 = *(_QWORD *)(v21 + 12 * *(int *)(v16[7] + 4 * v19)) - *v23;
          v27 = v24 <= v26 ? v26 : v24;
          v28 = *(_QWORD *)(v1 + 16) + 24 * v19;
          v30 = *(int **)v28;
          v29 = *(int **)(v28 + 8);
          if (*(int **)v28 != v29)
            break;
        }
LABEL_16:
        v14 = v141 - 1;
        v15 = v140;
        if (v141 <= 0)
        {
          v16 = *(_QWORD **)(v1 + 8);
          v14 = -1;
          goto LABEL_63;
        }
      }
      v31 = *(_QWORD *)(v1 + 64);
      v145 = *v23;
      v146 = v19;
      v144 = *(int **)(v28 + 8);
      while (1)
      {
        v32 = *v30;
        v33 = (char **)(v31 + 32 * v32);
        v34 = *v33;
        v35 = v33[1];
        v36 = (v35 - *v33) / 20;
        v37 = (unint64_t)v33[2];
        if ((unint64_t)v35 >= v37)
        {
          v38 = v36 + 1;
          if ((unint64_t)(v36 + 1) > 0xCCCCCCCCCCCCCCCLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - (_QWORD)v34) >> 2);
          if (2 * v39 > v38)
            v38 = 2 * v39;
          if (v39 >= 0x666666666666666)
            v40 = 0xCCCCCCCCCCCCCCCLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 > 0xCCCCCCCCCCCCCCCLL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = v13;
            v42 = (char *)operator new(20 * v40);
            v25 = v145;
            v19 = v146;
          }
          else
          {
            v41 = v13;
            v42 = 0;
          }
          v43 = &v42[20 * v36];
          *(_DWORD *)v43 = v19;
          *(_QWORD *)(v43 + 4) = v27;
          *(_QWORD *)(v43 + 12) = v25;
          v44 = v43;
          if (v35 != v34)
          {
            do
            {
              v45 = *(_OWORD *)(v35 - 20);
              *((_DWORD *)v44 - 1) = *((_DWORD *)v35 - 1);
              *(_OWORD *)(v44 - 20) = v45;
              v44 -= 20;
              v35 -= 20;
            }
            while (v35 != v34);
            v35 = *v33;
          }
          v46 = v43 + 20;
          *v33 = v44;
          v33[1] = v43 + 20;
          v33[2] = &v42[20 * v40];
          if (v35)
          {
            operator delete(v35);
            v25 = v145;
            v19 = v146;
          }
          v1 = v143;
          v29 = v144;
          v13 = v41;
          v33[1] = v46;
          if ((int)v36 >= 1)
          {
LABEL_50:
            v47 = v36 + 1;
            v48 = 20 * v36;
            while (1)
            {
              v49 = *v33;
              if (*(_QWORD *)&(*v33)[20 * (v47 - 2) + 4] <= v27)
                break;
              v50 = &v49[20 * (v47 - 2)];
              v51 = &v49[v48];
              v52 = *(_OWORD *)v50;
              *((_DWORD *)v51 + 4) = *((_DWORD *)v50 + 4);
              *(_OWORD *)v51 = v52;
              LODWORD(v36) = v36 - 1;
              --v47;
              v48 -= 20;
              if (v47 <= 1)
              {
                LODWORD(v36) = 0;
                break;
              }
            }
          }
        }
        else
        {
          *(_DWORD *)v35 = v19;
          *(_QWORD *)(v35 + 4) = v27;
          *(_QWORD *)(v35 + 12) = v25;
          v33[1] = v35 + 20;
          if ((int)v36 >= 1)
            goto LABEL_50;
        }
        v53 = (uint64_t)&(*v33)[20 * (int)v36];
        *(_DWORD *)v53 = v19;
        *(_QWORD *)(v53 + 4) = v27;
        *(_QWORD *)(v53 + 12) = v25;
        v54 = v31 + 32 * v32;
        v56 = *(_DWORD *)(v54 + 24);
        v55 = (_DWORD *)(v54 + 24);
        if ((int)v36 <= v56)
          *v55 = 0;
        v31 = *(_QWORD *)(v1 + 64);
        v57 = (uint64_t *)(v31 + 32 * v32);
        v58 = *v57;
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57[1] - *v57) >> 2);
        v62 = *((_DWORD *)v57 + 6);
        v60 = (int *)(v57 + 3);
        v61 = v62;
        v63 = 0x8000000000000002;
        if (v62 < (int)v59)
        {
          v64 = (uint64_t *)(v58 + 20 * v61 + 12);
          v65 = (int)v59 - (uint64_t)v61;
          v63 = 0x8000000000000002;
          do
          {
            while (1)
            {
              v67 = *(v64 - 1);
              if (v67 >= v63)
                break;
              v66 = *v64;
              v64 = (uint64_t *)((char *)v64 + 20);
              v63 += v66;
              ++v61;
              if (!--v65)
                goto LABEL_28;
            }
            *v60 = v61;
            v68 = *v64;
            v64 = (uint64_t *)((char *)v64 + 20);
            v63 = v68 + v67;
            ++v61;
            --v65;
          }
          while (v65);
        }
LABEL_28:
        *(_QWORD *)(*v148 + 8 * v32) = v63;
        if (v13 <= v63)
          v13 = v63;
        if (++v30 == v29)
          goto LABEL_16;
      }
    }
LABEL_63:
    v69 = *(_QWORD *)(*(_QWORD *)(v16[1] + 40) + 12 * *(int *)(v16[4] + 4 * v15));
    v154 = v69;
    v142 = v14;
    if (v69 >= v13)
      goto LABEL_10;
    v70 = *(_QWORD *)(v1 + 16) + 24 * v15;
    v71 = *(int **)v70;
    v72 = *(int **)(v70 + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      if (v71 == v72)
        goto LABEL_10;
      v147 = v13;
      v73 = 0;
      v74 = *v148;
      v75 = -1;
      do
      {
        v76 = *v71;
        if (v69 < *(_QWORD *)(v74 + 8 * *v71))
        {
          v77 = *(_QWORD *)(v1 + 64) + 32 * v76;
          v78 = *(_QWORD *)v77;
          v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v77 + 8) - *(_QWORD *)v77) >> 2);
          v82 = *(_DWORD *)(v77 + 24);
          v80 = (int *)(v77 + 24);
          v81 = v82;
          if (v82 + 1 == (_DWORD)v79 && *(_DWORD *)(v78 + 20 * v81) == v15)
          {
            v81 = 0;
            *v80 = 0;
          }
          if (v81 >= (int)v79)
          {
            v83 = 0;
            v87 = 0x8000000000000002;
          }
          else
          {
            v83 = 0;
            v84 = 0;
            v85 = (_QWORD *)(v78 + 20 * v81 + 12);
            v86 = (int)v79 - (uint64_t)v81;
            v87 = 0x8000000000000002;
            do
            {
              if (*((_DWORD *)v85 - 3) == v15)
              {
                v84 = 1;
              }
              else
              {
                v88 = *(v85 - 1);
                if (v88 >= v87)
                {
                  if ((v84 & 1) == 0)
                    *v80 = v81;
                  v87 = *v85 + v88;
                  v83 = v81;
                }
                else
                {
                  v87 += *v85;
                }
              }
              v85 = (_QWORD *)((char *)v85 + 20);
              ++v81;
              --v86;
            }
            while (v86);
          }
          if (v87 > v69)
          {
            v154 = v87;
            v69 = v87;
            v73 = v83;
            v75 = v76;
          }
        }
        ++v71;
      }
      while (v71 != v72);
    }
    else
    {
      if (v71 == v72)
        goto LABEL_10;
      v89 = *v148;
      v75 = -1;
      do
      {
        v90 = *v71;
        v91 = *(_QWORD *)(v89 + 8 * v90);
        if (v91 > v69)
        {
          v154 = *(_QWORD *)(v89 + 8 * v90);
          v69 = v91;
          v75 = v90;
        }
        ++v71;
      }
      while (v71 != v72);
      if (v75 == -1)
        goto LABEL_10;
      v92 = *(_QWORD *)(v1 + 64) + 32 * v75;
      v93 = *(_QWORD *)v92;
      v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v92 + 8) - *(_QWORD *)v92) >> 2);
      v97 = *(_DWORD *)(v92 + 24);
      v95 = (int *)(v92 + 24);
      v96 = v97;
      if (v97 + 1 == (_DWORD)v94 && *(_DWORD *)(v93 + 20 * v96) == v15)
      {
        v96 = 0;
        *v95 = 0;
      }
      if (v96 >= (int)v94)
      {
        v73 = 0;
        v101 = 0x8000000000000002;
      }
      else
      {
        v73 = 0;
        v98 = 0;
        v99 = (_QWORD *)(v93 + 20 * v96 + 12);
        v100 = (int)v94 - (uint64_t)v96;
        v101 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v99 - 3) == v15)
          {
            v98 = 1;
          }
          else
          {
            v102 = *(v99 - 1);
            if (v102 >= v101)
            {
              if ((v98 & 1) == 0)
                *v95 = v96;
              v101 = *v99 + v102;
              v73 = v96;
            }
            else
            {
              v101 += *v99;
            }
          }
          v99 = (_QWORD *)((char *)v99 + 20);
          ++v96;
          --v100;
        }
        while (v100);
      }
      v147 = v13;
      v153 = v101;
      if (v101 != v69)
      {
        v152 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v153, (int)&v154, "end_min_of_critical_tasks == new_start_min");
        if (v152)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v149, (google::glog_internal_namespace_ *)"./ortools/sat/disjunctive.cc", 414, &v152);
          google::LogMessage::stream((google::LogMessage *)&v149);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v149);
        }
      }
    }
    if (v75 != -1)
      break;
    v13 = v147;
LABEL_10:
    v1 = v143;
    v14 = v142;
LABEL_11:
    v12 = v136 + 3;
    if (v136 + 3 == v135)
      return 1;
  }
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  v103 = (uint64_t *)(*(_QWORD *)(v1 + 64) + 32 * v75);
  v104 = v73;
  v106 = *v103;
  v105 = v103[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v105 - *v103) >> 2) > v73)
  {
    v107 = *(_QWORD *)(v106 + 20 * v73 + 4);
    v108 = 20 * v73;
    do
    {
      v109 = *(_DWORD *)(v106 + v108);
      if (v109 != v15)
      {
        operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), *(_DWORD *)(v106 + v108));
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v1 + 8), v109, *(_QWORD *)(*v103 + v108 + 12), v107);
        operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), v109, v139 - 1);
        v106 = *v103;
        v105 = v103[1];
      }
      ++v104;
      v108 += 20;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v105 - v106) >> 2) > v104);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(_QWORD **)(v1 + 8), v15, v139);
  if ((operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(v1 + 8), v15, v154) & 1) != 0)
  {
    if ((*(_QWORD *)(*v137 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      v110 = *(_QWORD **)(v1 + 8);
      v111 = *(_QWORD *)(v110[1] + 40);
      v112 = *(_DWORD *)(v110[10] + 4 * v15);
      v13 = v147;
      if (v112 == -1)
        v113 = (uint64_t *)(v110[13] + 8 * v15);
      else
        v113 = (uint64_t *)(v111 + 12 * v112);
      v114 = *(_QWORD *)(v111 + 12 * *(int *)(v110[4] + 4 * v15));
      v115 = *v113;
      v116 = *(_QWORD *)(v111 + 12 * *(int *)(v110[7] + 4 * v15)) - *v113;
      if (v114 <= v116)
        v117 = v116;
      else
        v117 = v114;
      v118 = *(_QWORD *)(v1 + 16) + 24 * v15;
      v119 = v1;
      v120 = *(int **)v118;
      v121 = *(int **)(v118 + 8);
      if (*(int **)v118 != v121)
      {
        v122 = *(_QWORD *)(v119 + 64);
        do
        {
          v123 = *v120;
          v124 = v13;
          v149 = v140;
          v150 = v117;
          v151 = v115;
          operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(v122 + 32 * v123, &v149);
          v13 = v124;
          v122 = *(_QWORD *)(v143 + 64);
          v125 = *(_QWORD *)(v122 + 32 * v123);
          v126 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v122 + 32 * v123 + 8) - v125) >> 2);
          v127 = *(_DWORD *)(v122 + 32 * v123 + 24);
          v128 = 0x8000000000000002;
          if (v127 < (int)v126)
          {
            v129 = (uint64_t *)(v125 + 20 * v127 + 12);
            v130 = (int)v126 - (uint64_t)v127;
            v128 = 0x8000000000000002;
            do
            {
              while (1)
              {
                v132 = *(v129 - 1);
                if (v132 >= v128)
                  break;
                v131 = *v129;
                v129 = (uint64_t *)((char *)v129 + 20);
                v128 += v131;
                ++v127;
                if (!--v130)
                  goto LABEL_123;
              }
              *(_DWORD *)(v122 + 32 * v123 + 24) = v127;
              v133 = *v129;
              v129 = (uint64_t *)((char *)v129 + 20);
              v128 = v133 + v132;
              ++v127;
              --v130;
            }
            while (v130);
          }
LABEL_123:
          *(_QWORD *)(*v148 + 8 * v123) = v128;
          if (v124 <= v128)
            v13 = v128;
          ++v120;
        }
        while (v120 != v121);
      }
    }
    else
    {
      v13 = v147;
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_22DB4BA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::AllIntervalsHelper>(uint64_t a1)
{
  uint64_t v2;
  operations_research::sat::IntervalsRepository *v3;
  void *__p[3];

  v2 = operator new();
  v3 = (operations_research::sat::IntervalsRepository *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(a1);
  operations_research::sat::IntervalsRepository::AllIntervals(v3, (int **)__p);
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(v2, (int **)__p, a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2;
}

void sub_22DB4BA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x22E31DF78](v11, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntervalsRepository::AllIntervals(operations_research::sat::IntervalsRepository *this@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int *v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  if ((int)((unint64_t)(v3 - v4) >> 2) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (v7 < v6)
    {
      *(_DWORD *)v7 = v8;
      v9 = (uint64_t)(v7 + 4);
LABEL_4:
      a2[1] = (int *)v9;
      ++v8;
      v7 = (char *)v9;
      if (v8 >= (int)((unint64_t)(v3 - v4) >> 2))
        return;
    }
    v10 = (v7 - v5) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v6 - v5) >> 1 > v11)
      v11 = (v6 - v5) >> 1;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = v3;
      v14 = operator new(4 * v12);
      v3 = v13;
      v15 = (int *)&v14[4 * v10];
      *v15 = v8;
      v9 = (uint64_t)(v15 + 1);
      if (v7 == v5)
        goto LABEL_20;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(4 * v10);
      *(_DWORD *)(4 * v10) = v8;
      v9 = 4 * v10 + 4;
      if (v7 == v5)
        goto LABEL_20;
    }
    v16 = v7 - 4 - v5;
    if (v16 >= 0xBC)
    {
      if (&v14[v7 - v5 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v7 - v5 - 4])
      {
        v17 = v7;
      }
      else if (&v7[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v17 = v7;
      }
      else if ((unint64_t)(v5 - v14) >= 0x20)
      {
        v19 = (v16 >> 2) + 1;
        v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        v17 = &v7[-v20];
        v15 = (int *)((char *)v15 - v20);
        v21 = &v14[4 * v10 - 16];
        v22 = v7 - 16;
        v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          v6 = &v14[4 * v12];
          *a2 = v15;
          a2[1] = (int *)v9;
          a2[2] = (int *)v6;
          if (v5)
          {
            operator delete(v5);
            v4 = *((_QWORD *)this + 5);
            v3 = *((_QWORD *)this + 6);
          }
          v5 = (char *)v15;
          goto LABEL_4;
        }
      }
      else
      {
        v17 = v7;
      }
    }
    else
    {
      v17 = v7;
    }
    do
    {
      v18 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--v15 = v18;
    }
    while (v17 != v5);
    goto LABEL_20;
  }
}

void sub_22DB4BCE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::AllIntervalsHelper>::~Delete(_QWORD *a1)
{
  operations_research::sat::SchedulingConstraintHelper *v2;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &off_24F985F68;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllIntervalsHelper>::~Delete(_QWORD *a1)
{
  operations_research::sat::SchedulingConstraintHelper *v2;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &off_24F985F68;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  *a1 = &off_24F985F20;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = a1[8];
  if (v3)
  {
    v4 = a1[9];
    v5 = (void *)a1[8];
    if (v4 != v3)
    {
      v6 = a1[9];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[8];
    }
    a1[9] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[5];
  if (v9)
    operator delete(v9);
  v10 = a1[2];
  if (v10)
  {
    v11 = a1[3];
    v12 = (void *)a1[2];
    if (v11 != v10)
    {
      v13 = a1[3];
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)a1[2];
    }
    a1[3] = v10;
    operator delete(v12);
  }
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<true>>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F985FA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<true>>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F985FA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

char *std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(void **a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v5];
  v12 = &v10[32 * v9];
  v13 = *a2;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *((_DWORD *)v11 + 6) = 0;
  if ((_DWORD)v13)
  {
    if ((v13 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = v13;
    v15 = (char *)operator new(20 * (int)v13);
    *(_QWORD *)v11 = v15;
    *((_QWORD *)v11 + 1) = v15;
    *((_QWORD *)v11 + 2) = &v15[20 * v14];
  }
  v16 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v16;
    a1[2] = v12;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v11[v17];
      v19 = &v3[v17];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v3[v17 - 32];
      *((_QWORD *)v18 - 2) = *(_QWORD *)&v3[v17 - 16];
      *((_QWORD *)v19 - 4) = 0;
      *((_QWORD *)v19 - 3) = 0;
      *((_QWORD *)v19 - 2) = 0;
      *((_DWORD *)v18 - 2) = *(_DWORD *)&v3[v17 - 8];
      v17 -= 32;
    }
    while (&v3[v17] != v4);
    v20 = (char *)*a1;
    v3 = (char *)a1[1];
    v16 = v11 + 32;
    *a1 = &v11[v17];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 4);
        v21 -= 32;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 3) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v16;
}

void sub_22DB4C0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::__split_buffer<operations_research::sat::TaskSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::TaskSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 32;
        v4 = *(void **)(v2 - 32);
        *(_QWORD *)(a1 + 16) = v2 - 32;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 24) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t operations_research::sat::CombinedDisjunctive<false>::CombinedDisjunctive(uint64_t a1, uint64_t a2)
{
  operations_research::sat::SchedulingConstraintHelper *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  operations_research::sat::GenericLiteralWatcher *v13;
  unsigned int v14;

  *(_QWORD *)a1 = &off_24F985FD8;
  v4 = (operations_research::sat::SchedulingConstraintHelper *)operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(a2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v4, 0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3);
  if (v6 <= v8)
  {
    if (v6 < v8)
    {
      v9 = v5 + 24 * (int)v6;
      if (v7 != v9)
      {
        v10 = *(_QWORD *)(a1 + 24);
        do
        {
          v12 = *(void **)(v10 - 24);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *(_QWORD *)(v7 - 16) = v11;
            operator delete(v11);
          }
          v7 = v10;
        }
        while (v10 != v9);
      }
      *(_QWORD *)(a1 + 24) = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 16, v6 - v8);
  }
  v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  v14 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v13, a1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), v14, v13, 1, 0);
  operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v13, v14);
  return a1;
}

void sub_22DB4C294(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    v6 = (void *)v1[5];
    if (!v6)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    v6 = (void *)v1[5];
    if (!v6)
      goto LABEL_3;
  }
  operator delete(v6);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(_QWORD *a1)
{
  operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(a1);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::CombinedDisjunctive<false>::Propagate(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int64_t v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  int v61;
  int v62;
  int64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  int v81;
  int v82;
  int v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int *v95;
  int v96;
  int v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  int64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  int *v135;
  int *v136;
  _QWORD *v137;
  char *started;
  int64_t v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  int v146;
  int64_t v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  int64_t v153;
  uint64_t v154;

  v1 = a1;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), 0);
  v2 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  v4 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  if (v4 != v3)
  {
    v5 = v3 - v4 - 32;
    v6 = *(_QWORD *)(v1 + 64);
    if (v5 < 0x20)
      goto LABEL_140;
    v7 = (v5 >> 5) + 1;
    v6 = v4 + 32 * (v7 & 0xFFFFFFFFFFFFFFELL);
    v8 = (uint64_t *)(v4 + 32);
    v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v10 = *v8;
      *(v8 - 3) = *(v8 - 4);
      v8[1] = v10;
      *((_DWORD *)v8 - 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_140:
      do
      {
        *(_QWORD *)(v6 + 8) = *(_QWORD *)v6;
        *(_DWORD *)(v6 + 24) = 0;
        v6 += 32;
      }
      while (v6 != v3);
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(v1 + 88, (uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 3, &operations_research::sat::kMinIntegerValue);
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40) - *(_QWORD *)(*(_QWORD *)(v1 + 8) + 32);
  v148 = (uint64_t *)(v1 + 88);
  LOBYTE(v149) = 0;
  v137 = (_QWORD *)(v1 + 40);
  std::vector<BOOL>::assign((char **)(v1 + 40), (int)(v11 >> 2), &v149);
  v12 = *(int **)v2;
  v135 = (int *)*((_QWORD *)v2 + 1);
  if (*(int **)v2 == v135)
    return 1;
  v13 = 0x8000000000000002;
  v14 = ((unint64_t)v11 >> 2) - 1;
  v143 = v1;
  while (1)
  {
    v15 = *v12;
    v136 = v12;
    v139 = *(_QWORD *)(v12 + 1);
    v16 = *(_QWORD **)(v1 + 8);
    v17 = *(int *)(v16[16] + 4 * *v12);
    if ((_DWORD)v17 != -1
      && ((*(_QWORD *)(*(_QWORD *)(*v16 + 24) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 & 0x3F ^ 1)) & 1) != 0)
    {
      goto LABEL_11;
    }
    v140 = v15;
    if ((v14 & 0x80000000) == 0)
    {
      while (1)
      {
        v18 = (int *)(*(_QWORD *)started + 12 * v14);
        v16 = *(_QWORD **)(v1 + 8);
        if (v139 <= *(_QWORD *)(v18 + 1))
          goto LABEL_63;
        v19 = *v18;
        v20 = *(int *)(v16[16] + 4 * *v18);
        v141 = v14;
        if ((_DWORD)v20 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*v16 + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          *(_QWORD *)(*v137 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          v21 = *(_QWORD *)(v16[1] + 40);
          v22 = *(_DWORD *)(v16[10] + 4 * v19);
          v23 = (uint64_t *)(v22 == -1 ? v16[13] + 8 * v19 : v21 + 12 * v22);
          v24 = *(_QWORD *)(v21 + 12 * *(int *)(v16[4] + 4 * v19));
          v25 = *v23;
          v26 = *(_QWORD *)(v21 + 12 * *(int *)(v16[7] + 4 * v19)) - *v23;
          v27 = v24 <= v26 ? v26 : v24;
          v28 = *(_QWORD *)(v1 + 16) + 24 * v19;
          v30 = *(int **)v28;
          v29 = *(int **)(v28 + 8);
          if (*(int **)v28 != v29)
            break;
        }
LABEL_16:
        v14 = v141 - 1;
        v15 = v140;
        if (v141 <= 0)
        {
          v16 = *(_QWORD **)(v1 + 8);
          v14 = -1;
          goto LABEL_63;
        }
      }
      v31 = *(_QWORD *)(v1 + 64);
      v145 = *v23;
      v146 = v19;
      v144 = *(int **)(v28 + 8);
      while (1)
      {
        v32 = *v30;
        v33 = (char **)(v31 + 32 * v32);
        v34 = *v33;
        v35 = v33[1];
        v36 = (v35 - *v33) / 20;
        v37 = (unint64_t)v33[2];
        if ((unint64_t)v35 >= v37)
        {
          v38 = v36 + 1;
          if ((unint64_t)(v36 + 1) > 0xCCCCCCCCCCCCCCCLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - (_QWORD)v34) >> 2);
          if (2 * v39 > v38)
            v38 = 2 * v39;
          if (v39 >= 0x666666666666666)
            v40 = 0xCCCCCCCCCCCCCCCLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 > 0xCCCCCCCCCCCCCCCLL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = v13;
            v42 = (char *)operator new(20 * v40);
            v25 = v145;
            v19 = v146;
          }
          else
          {
            v41 = v13;
            v42 = 0;
          }
          v43 = &v42[20 * v36];
          *(_DWORD *)v43 = v19;
          *(_QWORD *)(v43 + 4) = v27;
          *(_QWORD *)(v43 + 12) = v25;
          v44 = v43;
          if (v35 != v34)
          {
            do
            {
              v45 = *(_OWORD *)(v35 - 20);
              *((_DWORD *)v44 - 1) = *((_DWORD *)v35 - 1);
              *(_OWORD *)(v44 - 20) = v45;
              v44 -= 20;
              v35 -= 20;
            }
            while (v35 != v34);
            v35 = *v33;
          }
          v46 = v43 + 20;
          *v33 = v44;
          v33[1] = v43 + 20;
          v33[2] = &v42[20 * v40];
          if (v35)
          {
            operator delete(v35);
            v25 = v145;
            v19 = v146;
          }
          v1 = v143;
          v29 = v144;
          v13 = v41;
          v33[1] = v46;
          if ((int)v36 >= 1)
          {
LABEL_50:
            v47 = v36 + 1;
            v48 = 20 * v36;
            while (1)
            {
              v49 = *v33;
              if (*(_QWORD *)&(*v33)[20 * (v47 - 2) + 4] <= v27)
                break;
              v50 = &v49[20 * (v47 - 2)];
              v51 = &v49[v48];
              v52 = *(_OWORD *)v50;
              *((_DWORD *)v51 + 4) = *((_DWORD *)v50 + 4);
              *(_OWORD *)v51 = v52;
              LODWORD(v36) = v36 - 1;
              --v47;
              v48 -= 20;
              if (v47 <= 1)
              {
                LODWORD(v36) = 0;
                break;
              }
            }
          }
        }
        else
        {
          *(_DWORD *)v35 = v19;
          *(_QWORD *)(v35 + 4) = v27;
          *(_QWORD *)(v35 + 12) = v25;
          v33[1] = v35 + 20;
          if ((int)v36 >= 1)
            goto LABEL_50;
        }
        v53 = (uint64_t)&(*v33)[20 * (int)v36];
        *(_DWORD *)v53 = v19;
        *(_QWORD *)(v53 + 4) = v27;
        *(_QWORD *)(v53 + 12) = v25;
        v54 = v31 + 32 * v32;
        v56 = *(_DWORD *)(v54 + 24);
        v55 = (_DWORD *)(v54 + 24);
        if ((int)v36 <= v56)
          *v55 = 0;
        v31 = *(_QWORD *)(v1 + 64);
        v57 = (uint64_t *)(v31 + 32 * v32);
        v58 = *v57;
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57[1] - *v57) >> 2);
        v62 = *((_DWORD *)v57 + 6);
        v60 = (int *)(v57 + 3);
        v61 = v62;
        v63 = 0x8000000000000002;
        if (v62 < (int)v59)
        {
          v64 = (uint64_t *)(v58 + 20 * v61 + 12);
          v65 = (int)v59 - (uint64_t)v61;
          v63 = 0x8000000000000002;
          do
          {
            while (1)
            {
              v67 = *(v64 - 1);
              if (v67 >= v63)
                break;
              v66 = *v64;
              v64 = (uint64_t *)((char *)v64 + 20);
              v63 += v66;
              ++v61;
              if (!--v65)
                goto LABEL_28;
            }
            *v60 = v61;
            v68 = *v64;
            v64 = (uint64_t *)((char *)v64 + 20);
            v63 = v68 + v67;
            ++v61;
            --v65;
          }
          while (v65);
        }
LABEL_28:
        *(_QWORD *)(*v148 + 8 * v32) = v63;
        if (v13 <= v63)
          v13 = v63;
        if (++v30 == v29)
          goto LABEL_16;
      }
    }
LABEL_63:
    v69 = *(_QWORD *)(*(_QWORD *)(v16[1] + 40) + 12 * *(int *)(v16[4] + 4 * v15));
    v154 = v69;
    v142 = v14;
    if (v69 >= v13)
      goto LABEL_10;
    v70 = *(_QWORD *)(v1 + 16) + 24 * v15;
    v71 = *(int **)v70;
    v72 = *(int **)(v70 + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      if (v71 == v72)
        goto LABEL_10;
      v147 = v13;
      v73 = 0;
      v74 = *v148;
      v75 = -1;
      do
      {
        v76 = *v71;
        if (v69 < *(_QWORD *)(v74 + 8 * *v71))
        {
          v77 = *(_QWORD *)(v1 + 64) + 32 * v76;
          v78 = *(_QWORD *)v77;
          v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v77 + 8) - *(_QWORD *)v77) >> 2);
          v82 = *(_DWORD *)(v77 + 24);
          v80 = (int *)(v77 + 24);
          v81 = v82;
          if (v82 + 1 == (_DWORD)v79 && *(_DWORD *)(v78 + 20 * v81) == v15)
          {
            v81 = 0;
            *v80 = 0;
          }
          if (v81 >= (int)v79)
          {
            v83 = 0;
            v87 = 0x8000000000000002;
          }
          else
          {
            v83 = 0;
            v84 = 0;
            v85 = (_QWORD *)(v78 + 20 * v81 + 12);
            v86 = (int)v79 - (uint64_t)v81;
            v87 = 0x8000000000000002;
            do
            {
              if (*((_DWORD *)v85 - 3) == v15)
              {
                v84 = 1;
              }
              else
              {
                v88 = *(v85 - 1);
                if (v88 >= v87)
                {
                  if ((v84 & 1) == 0)
                    *v80 = v81;
                  v87 = *v85 + v88;
                  v83 = v81;
                }
                else
                {
                  v87 += *v85;
                }
              }
              v85 = (_QWORD *)((char *)v85 + 20);
              ++v81;
              --v86;
            }
            while (v86);
          }
          if (v87 > v69)
          {
            v154 = v87;
            v69 = v87;
            v73 = v83;
            v75 = v76;
          }
        }
        ++v71;
      }
      while (v71 != v72);
    }
    else
    {
      if (v71 == v72)
        goto LABEL_10;
      v89 = *v148;
      v75 = -1;
      do
      {
        v90 = *v71;
        v91 = *(_QWORD *)(v89 + 8 * v90);
        if (v91 > v69)
        {
          v154 = *(_QWORD *)(v89 + 8 * v90);
          v69 = v91;
          v75 = v90;
        }
        ++v71;
      }
      while (v71 != v72);
      if (v75 == -1)
        goto LABEL_10;
      v92 = *(_QWORD *)(v1 + 64) + 32 * v75;
      v93 = *(_QWORD *)v92;
      v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v92 + 8) - *(_QWORD *)v92) >> 2);
      v97 = *(_DWORD *)(v92 + 24);
      v95 = (int *)(v92 + 24);
      v96 = v97;
      if (v97 + 1 == (_DWORD)v94 && *(_DWORD *)(v93 + 20 * v96) == v15)
      {
        v96 = 0;
        *v95 = 0;
      }
      if (v96 >= (int)v94)
      {
        v73 = 0;
        v101 = 0x8000000000000002;
      }
      else
      {
        v73 = 0;
        v98 = 0;
        v99 = (_QWORD *)(v93 + 20 * v96 + 12);
        v100 = (int)v94 - (uint64_t)v96;
        v101 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v99 - 3) == v15)
          {
            v98 = 1;
          }
          else
          {
            v102 = *(v99 - 1);
            if (v102 >= v101)
            {
              if ((v98 & 1) == 0)
                *v95 = v96;
              v101 = *v99 + v102;
              v73 = v96;
            }
            else
            {
              v101 += *v99;
            }
          }
          v99 = (_QWORD *)((char *)v99 + 20);
          ++v96;
          --v100;
        }
        while (v100);
      }
      v147 = v13;
      v153 = v101;
      if (v101 != v69)
      {
        v152 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v153, (int)&v154, "end_min_of_critical_tasks == new_start_min");
        if (v152)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v149, (google::glog_internal_namespace_ *)"./ortools/sat/disjunctive.cc", 414, &v152);
          google::LogMessage::stream((google::LogMessage *)&v149);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v149);
        }
      }
    }
    if (v75 != -1)
      break;
    v13 = v147;
LABEL_10:
    v1 = v143;
    v14 = v142;
LABEL_11:
    v12 = v136 + 3;
    if (v136 + 3 == v135)
      return 1;
  }
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  v103 = (uint64_t *)(*(_QWORD *)(v1 + 64) + 32 * v75);
  v104 = v73;
  v106 = *v103;
  v105 = v103[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v105 - *v103) >> 2) > v73)
  {
    v107 = *(_QWORD *)(v106 + 20 * v73 + 4);
    v108 = 20 * v73;
    do
    {
      v109 = *(_DWORD *)(v106 + v108);
      if (v109 != v15)
      {
        operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), *(_DWORD *)(v106 + v108));
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v1 + 8), v109, *(_QWORD *)(*v103 + v108 + 12), v107);
        operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), v109, v139 - 1);
        v106 = *v103;
        v105 = v103[1];
      }
      ++v104;
      v108 += 20;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v105 - v106) >> 2) > v104);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(_QWORD **)(v1 + 8), v15, v139);
  if ((operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(v1 + 8), v15, v154) & 1) != 0)
  {
    if ((*(_QWORD *)(*v137 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      v110 = *(_QWORD **)(v1 + 8);
      v111 = *(_QWORD *)(v110[1] + 40);
      v112 = *(_DWORD *)(v110[10] + 4 * v15);
      v13 = v147;
      if (v112 == -1)
        v113 = (uint64_t *)(v110[13] + 8 * v15);
      else
        v113 = (uint64_t *)(v111 + 12 * v112);
      v114 = *(_QWORD *)(v111 + 12 * *(int *)(v110[4] + 4 * v15));
      v115 = *v113;
      v116 = *(_QWORD *)(v111 + 12 * *(int *)(v110[7] + 4 * v15)) - *v113;
      if (v114 <= v116)
        v117 = v116;
      else
        v117 = v114;
      v118 = *(_QWORD *)(v1 + 16) + 24 * v15;
      v119 = v1;
      v120 = *(int **)v118;
      v121 = *(int **)(v118 + 8);
      if (*(int **)v118 != v121)
      {
        v122 = *(_QWORD *)(v119 + 64);
        do
        {
          v123 = *v120;
          v124 = v13;
          v149 = v140;
          v150 = v117;
          v151 = v115;
          operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(v122 + 32 * v123, &v149);
          v13 = v124;
          v122 = *(_QWORD *)(v143 + 64);
          v125 = *(_QWORD *)(v122 + 32 * v123);
          v126 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v122 + 32 * v123 + 8) - v125) >> 2);
          v127 = *(_DWORD *)(v122 + 32 * v123 + 24);
          v128 = 0x8000000000000002;
          if (v127 < (int)v126)
          {
            v129 = (uint64_t *)(v125 + 20 * v127 + 12);
            v130 = (int)v126 - (uint64_t)v127;
            v128 = 0x8000000000000002;
            do
            {
              while (1)
              {
                v132 = *(v129 - 1);
                if (v132 >= v128)
                  break;
                v131 = *v129;
                v129 = (uint64_t *)((char *)v129 + 20);
                v128 += v131;
                ++v127;
                if (!--v130)
                  goto LABEL_123;
              }
              *(_DWORD *)(v122 + 32 * v123 + 24) = v127;
              v133 = *v129;
              v129 = (uint64_t *)((char *)v129 + 20);
              v128 = v133 + v132;
              ++v127;
              --v130;
            }
            while (v130);
          }
LABEL_123:
          *(_QWORD *)(*v148 + 8 * v123) = v128;
          if (v124 <= v128)
            v13 = v128;
          ++v120;
        }
        while (v120 != v121);
      }
    }
    else
    {
      v13 = v147;
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_22DB4CE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

_QWORD *operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  *a1 = &off_24F985FD8;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = a1[8];
  if (v3)
  {
    v4 = a1[9];
    v5 = (void *)a1[8];
    if (v4 != v3)
    {
      v6 = a1[9];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[8];
    }
    a1[9] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[5];
  if (v9)
    operator delete(v9);
  v10 = a1[2];
  if (v10)
  {
    v11 = a1[3];
    v12 = (void *)a1[2];
    if (v11 != v10)
    {
      v13 = a1[3];
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)a1[2];
    }
    a1[3] = v10;
    operator delete(v12);
  }
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<false>>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986020;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<false>>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986020;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveWithTwoItems>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986058;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveWithTwoItems>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986058;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveOverloadChecker>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveOverloadChecker>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveDetectablePrecedences>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9860C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveDetectablePrecedences>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9860C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveNotLast>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986100;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveNotLast>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986100;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveEdgeFinding>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986138;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveEdgeFinding>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986138;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

operations_research::sat::DisjunctivePrecedences *operations_research::sat::DisjunctivePrecedences::DisjunctivePrecedences(operations_research::sat::DisjunctivePrecedences *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3, operations_research::sat::IntegerTrail *a4, operations_research::sat::PrecedencesPropagator *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;

  *((_BYTE *)this + 8) = a2;
  *(_QWORD *)this = &off_24F985D90;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v8 = *((_QWORD *)a3 + 4);
  v7 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 4) = a5;
  v9 = v7 - v8;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  if (((unint64_t)v9 >> 2))
  {
    if ((((unint64_t)v9 >> 2) & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (int)(v9 >> 2);
    v11 = (char *)operator new(20 * v10);
    *((_QWORD *)this + 11) = v11;
    *((_QWORD *)this + 12) = v11;
    *((_QWORD *)this + 13) = &v11[20 * (int)v10];
  }
  v13 = *((_QWORD *)a3 + 4);
  v12 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v14 = v12 - v13;
  *((_QWORD *)this + 17) = 0;
  if (((unint64_t)v14 >> 2))
  {
    if (v14 << 30 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = 4 * (int)(v14 >> 2);
    v16 = (char *)operator new(v15);
    *((_QWORD *)this + 15) = v16;
    *((_QWORD *)this + 17) = &v16[v15];
    bzero(v16, v15);
    *((_QWORD *)this + 16) = &v16[v15];
  }
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  return this;
}

void sub_22DB4D390(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = v3;
  v7 = *v5;
  if (*v5)
  {
    v1[16] = v7;
    operator delete(v7);
    v8 = *v2;
    if (!*v2)
    {
LABEL_3:
      v9 = (void *)v1[8];
      if (!v9)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[12] = v8;
  operator delete(v8);
  v9 = (void *)v1[8];
  if (!v9)
  {
LABEL_4:
    v10 = *v4;
    if (!*v4)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[9] = v9;
  operator delete(v9);
  v10 = *v4;
  if (!*v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[6] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DisjunctivePrecedences>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986170;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctivePrecedences>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986170;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::vector<operations_research::sat::TaskTime>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  int v77;
  int v78;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        *(_QWORD *)&v67 = *(_QWORD *)v10;
        DWORD2(v67) = *(_DWORD *)(v10 + 8);
        if (*(a2 - 1) < *(uint64_t *)((char *)&v67 + 4))
        {
          v77 = *(_DWORD *)(v10 + 8);
          v68 = *(_QWORD *)v10;
          v35 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v10 = v35;
          *((_DWORD *)a2 - 1) = v77;
          *(uint64_t *)((char *)a2 - 12) = v68;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)((char *)a2 - 12));
      case 4uLL:
        v36 = (uint64_t *)(v10 + 12);
        v37 = (uint64_t *)(v10 + 24);
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24));
        *(_QWORD *)&v69 = *(_QWORD *)(v10 + 24);
        DWORD2(v69) = *(_DWORD *)(v10 + 32);
        if (*(a2 - 1) < *(uint64_t *)((char *)&v69 + 4))
        {
          v38 = *v37;
          v39 = *(_DWORD *)(v10 + 32);
          v40 = *((_DWORD *)a2 - 1);
          *v37 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 32) = v40;
          *((_DWORD *)a2 - 1) = v39;
          *(uint64_t *)((char *)a2 - 12) = v38;
          *(_QWORD *)&v70 = *(_QWORD *)(v10 + 12);
          DWORD2(v70) = *(_DWORD *)(v10 + 20);
          if (*(_QWORD *)(v10 + 28) < *(uint64_t *)((char *)&v70 + 4))
          {
            v41 = *(_DWORD *)(v10 + 20);
            v42 = *v36;
            *v36 = *v37;
            *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
            *v37 = v42;
            *(_DWORD *)(v10 + 32) = v41;
            *(_QWORD *)&v71 = *(_QWORD *)v10;
            DWORD2(v71) = *(_DWORD *)(v10 + 8);
            if (*(_QWORD *)(v10 + 16) < *(uint64_t *)((char *)&v71 + 4))
            {
              v78 = *(_DWORD *)(v10 + 8);
              v72 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v36;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
              *v36 = v72;
              *(_DWORD *)(v10 + 20) = v78;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v10, v10 + 12, v10 + 24, (uint64_t *)(v10 + 36), (uint64_t *)((char *)a2 - 12));
      default:
        if (v11 <= 287)
        {
          v43 = (uint64_t *)(v10 + 12);
          v45 = (uint64_t *)v10 == a2 || v43 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = v10;
              do
              {
                v49 = *(_QWORD *)v47;
                v50 = *(_DWORD *)(v47 + 8);
                v51 = *(_QWORD *)(v47 + 16);
                v47 = (unint64_t)v43;
                if (v51 < __SPAIR64__(v50, HIDWORD(v49)))
                {
                  v52 = *(_DWORD *)v43;
                  v53 = v46;
                  do
                  {
                    v54 = v10 + v53;
                    *(_QWORD *)(v54 + 12) = *(_QWORD *)(v10 + v53);
                    *(_DWORD *)(v54 + 20) = *(_DWORD *)(v10 + v53 + 8);
                    if (!v53)
                    {
                      v48 = v10;
                      goto LABEL_54;
                    }
                    *(_QWORD *)&v73 = *(_QWORD *)(v54 - 12);
                    DWORD2(v73) = *(_DWORD *)(v54 - 4);
                    v53 -= 12;
                  }
                  while (v51 < *(uint64_t *)((char *)&v73 + 4));
                  v48 = v10 + v53 + 12;
LABEL_54:
                  *(_DWORD *)v48 = v52;
                  *(_QWORD *)(v48 + 4) = v51;
                }
                v43 = (uint64_t *)(v47 + 12);
                v46 += 12;
              }
              while ((uint64_t *)(v47 + 12) != a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v55 = *(_QWORD *)v9;
              v56 = *(_DWORD *)(v9 + 8);
              v57 = *(_QWORD *)(v9 + 16);
              v9 = (uint64_t)v43;
              if (v57 < __SPAIR64__(v56, HIDWORD(v55)))
              {
                v58 = *(_DWORD *)v43;
                do
                {
                  v59 = v43;
                  v60 = *(uint64_t *)((char *)v43 - 12);
                  v43 = (uint64_t *)((char *)v43 - 12);
                  *v59 = v60;
                  *((_DWORD *)v59 + 2) = *((_DWORD *)v59 - 1);
                  *(_QWORD *)&v74 = *(v59 - 3);
                  DWORD2(v74) = *((_DWORD *)v59 - 4);
                }
                while (v57 < *(uint64_t *)((char *)&v74 + 4));
                *(_DWORD *)v43 = v58;
                *(uint64_t *)((char *)v43 + 4) = v57;
              }
              v43 = (uint64_t *)(v9 + 12);
            }
            while ((uint64_t *)(v9 + 12) != a2);
          }
          return result;
        }
        if (!a4)
        {
          if ((uint64_t *)v10 != a2)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(v10, a2, a2, a3);
          return result;
        }
        v13 = v12 >> 1;
        v14 = v10 + 12 * (v12 >> 1);
        if ((unint64_t)v11 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 12 * v13), (uint64_t *)v9, (uint64_t *)((char *)a2 - 12));
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v9, (uint64_t *)(v9 + 12 * v13), (uint64_t *)((char *)a2 - 12));
          v15 = 12 * v13;
          v16 = (uint64_t *)(12 * v13 + v9 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 12), v16, a2 - 3);
          v17 = (uint64_t *)(v9 + 12 + v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 24), v17, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v16, (uint64_t *)v14, v17);
          v75 = *(_DWORD *)(v9 + 8);
          v61 = *(_QWORD *)v9;
          v18 = *(_QWORD *)v14;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)v9 = v18;
          *(_DWORD *)(v14 + 8) = v75;
          *(_QWORD *)v14 = v61;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        *(_QWORD *)&v62 = *(_QWORD *)v9;
        DWORD2(v62) = *(_DWORD *)(v9 + 8);
        if (*(_QWORD *)(v9 - 8) >= *(uint64_t *)((char *)&v62 + 4))
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>((uint64_t *)v9, a2);
          v10 = result;
          a5 = 0;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *(_QWORD *)v9;
        v21 = *(_DWORD *)(v9 + 8);
        do
        {
          *(_QWORD *)&v63 = *(_QWORD *)v9;
          DWORD2(v63) = *(_DWORD *)(v9 + 8);
          v22 = *(_QWORD *)(v9 + v19 + 16);
          v19 += 12;
        }
        while (v22 < *(uint64_t *)((char *)&v63 + 4));
        v23 = v9 + v19;
        v24 = a2;
        if (v19 == 12)
        {
          v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            v25 = (uint64_t *)((char *)v27 - 12);
            *(_QWORD *)&v65 = *(_QWORD *)v9;
            DWORD2(v65) = *(_DWORD *)(v9 + 8);
            v28 = *(v27 - 1);
            v27 = (uint64_t *)((char *)v27 - 12);
            if (v28 < *(uint64_t *)((char *)&v65 + 4))
              goto LABEL_19;
          }
          v25 = v27;
          v10 = v23;
        }
        else
        {
          do
          {
            v25 = (uint64_t *)((char *)v24 - 12);
            *(_QWORD *)&v64 = *(_QWORD *)v9;
            DWORD2(v64) = *(_DWORD *)(v9 + 8);
            v26 = *(v24 - 1);
            v24 = (uint64_t *)((char *)v24 - 12);
          }
          while (v26 >= *(uint64_t *)((char *)&v64 + 4));
LABEL_19:
          v10 = v23;
          if (v23 < (unint64_t)v25)
          {
            v29 = (unint64_t)v25;
            do
            {
              v76 = *(_DWORD *)(v10 + 8);
              v66 = *(_QWORD *)v10;
              v30 = *(_QWORD *)v29;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v29 + 8);
              *(_QWORD *)v10 = v30;
              *(_DWORD *)(v29 + 8) = v76;
              *(_QWORD *)v29 = v66;
              do
              {
                v31 = *(_QWORD *)(v10 + 16);
                v10 += 12;
              }
              while (v31 < __SPAIR64__(v21, HIDWORD(v20)));
              do
              {
                v32 = *(_QWORD *)(v29 - 8);
                v29 -= 12;
              }
              while (v32 >= __SPAIR64__(v21, HIDWORD(v20)));
            }
            while (v10 < v29);
          }
        }
        if (v10 - 12 != v9)
        {
          v33 = *(_QWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          *(_QWORD *)v9 = v33;
        }
        *(_QWORD *)(v10 - 12) = v20;
        *(_DWORD *)(v10 - 4) = v21;
        if (v23 < (unint64_t)v25)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v9, v10 - 12, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v9, v10 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v10, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_30;
        }
        a2 = (uint64_t *)(v10 - 12);
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  *(_QWORD *)&v19 = *a1;
  DWORD2(v19) = *((_DWORD *)a1 + 2);
  if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)&v19 + 4))
  {
    *(_QWORD *)&v20 = *a2;
    DWORD2(v20) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)&v20 + 4))
    {
      v3 = *((_DWORD *)a1 + 2);
      v4 = *a1;
      v5 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v5;
      *a3 = v4;
      *((_DWORD *)a3 + 2) = v3;
      return 1;
    }
    v13 = *((_DWORD *)a1 + 2);
    v14 = *a1;
    v15 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v15;
    *a2 = v14;
    *((_DWORD *)a2 + 2) = v13;
    LODWORD(v23) = HIDWORD(v14);
    HIDWORD(v23) = *((_DWORD *)a2 + 2);
    if (*(uint64_t *)((char *)a3 + 4) < v23)
    {
      v16 = *((_DWORD *)a2 + 2);
      v17 = *a2;
      v18 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v18;
      *a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      return 2;
    }
    return 1;
  }
  *(_QWORD *)&v21 = *a2;
  DWORD2(v21) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
  if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)&v21 + 4))
  {
    v7 = *((_DWORD *)a2 + 2);
    v8 = *a2;
    v9 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v9;
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v7;
    *(_QWORD *)&v22 = *a1;
    DWORD2(v22) = *((_DWORD *)a1 + 2);
    if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)&v22 + 4))
    {
      v10 = *((_DWORD *)a1 + 2);
      v11 = *a1;
      v12 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v12;
      *a2 = v11;
      *((_DWORD *)a2 + 2) = v10;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v2 = *(_DWORD *)a1;
  v3 = *(uint64_t *)((char *)a1 + 4);
  HIDWORD(v15) = *((_DWORD *)a2 - 1);
  if (v3 >= v15)
  {
    v6 = (unint64_t)a1 + 12;
    do
    {
      v4 = (uint64_t *)v6;
      if (v6 >= (unint64_t)a2)
        break;
      *(_QWORD *)&v13 = *(_QWORD *)v6;
      DWORD2(v13) = *(_DWORD *)(v6 + 8);
      v6 += 12;
    }
    while (v3 >= *(uint64_t *)((char *)&v13 + 4));
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = *(uint64_t *)((char *)v4 + 12);
      v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v16) = HIDWORD(v5);
      HIDWORD(v16) = *((_DWORD *)v4 + 2);
    }
    while (v3 >= v16);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v17) = HIDWORD(v7);
      HIDWORD(v17) = *((_DWORD *)a2 + 2);
    }
    while (v3 < v17);
  }
  while (v4 < a2)
  {
    v20 = *((_DWORD *)v4 + 2);
    v14 = *v4;
    v8 = *a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *v4 = v8;
    *((_DWORD *)a2 + 2) = v20;
    *a2 = v14;
    do
    {
      v9 = *(uint64_t *)((char *)v4 + 12);
      v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v18) = HIDWORD(v9);
      HIDWORD(v18) = *((_DWORD *)v4 + 2);
    }
    while (v3 >= v18);
    do
    {
      v10 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v19) = HIDWORD(v10);
      HIDWORD(v19) = *((_DWORD *)a2 + 2);
    }
    while (v3 < v19);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    v11 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v11;
  }
  *((_DWORD *)v4 - 3) = v2;
  *(v4 - 1) = v3;
  return v4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(_QWORD *)&v29 = *(_QWORD *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a2 - 8) < *(uint64_t *)((char *)&v29 + 4))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    case 4uLL:
      v18 = (uint64_t *)(a1 + 12);
      v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(_QWORD *)(a2 - 8) >= *(uint64_t *)((char *)&v30 + 4))
        goto LABEL_13;
      v20 = *(_DWORD *)(a1 + 32);
      v21 = *v19;
      v22 = *(_DWORD *)(a2 - 4);
      *v19 = *(_QWORD *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(_QWORD *)&v31 = *(_QWORD *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(_QWORD *)(a1 + 28) >= *(uint64_t *)((char *)&v31 + 4))
        goto LABEL_13;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = *v18;
      *v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(_QWORD *)&v32 = *(_QWORD *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) >= *(uint64_t *)((char *)&v32 + 4))
        goto LABEL_13;
      v25 = *(_DWORD *)(a1 + 8);
      v26 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          *(_QWORD *)&v27 = *(_QWORD *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          v10 = *(_QWORD *)(v7 + 4);
          if (v10 < *(uint64_t *)((char *)&v27 + 4))
            break;
LABEL_12:
          v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2)
            goto LABEL_13;
        }
        v11 = *(_DWORD *)v7;
        v12 = v8;
        do
        {
          v13 = a1 + v12;
          *(_QWORD *)(v13 + 36) = *(_QWORD *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(_QWORD *)(a1 + 4) = v10;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_22;
          }
          *(_QWORD *)&v28 = *(_QWORD *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 < *(uint64_t *)((char *)&v28 + 4));
        v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(_QWORD *)(v14 + 40) = v10;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_22:
        result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  *(_QWORD *)&v32 = *(_QWORD *)a3;
  DWORD2(v32) = *(_DWORD *)(a3 + 8);
  if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)&v32 + 4))
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_QWORD *)a3;
    v13 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *a4;
    *(_DWORD *)(a3 + 8) = v13;
    *a4 = v12;
    *((_DWORD *)a4 + 2) = v11;
    *(_QWORD *)&v33 = *(_QWORD *)a2;
    DWORD2(v33) = *(_DWORD *)(a2 + 8);
    if (*(_QWORD *)(a3 + 4) < *(uint64_t *)((char *)&v33 + 4))
    {
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_QWORD *)a2;
      v16 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(_QWORD *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      *(_QWORD *)&v34 = *(_QWORD *)a1;
      DWORD2(v34) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a2 + 4) < *(uint64_t *)((char *)&v34 + 4))
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(_QWORD *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  *(_QWORD *)&v35 = *a4;
  DWORD2(v35) = *((_DWORD *)a4 + 2);
  if (*(uint64_t *)((char *)a5 + 4) < *(uint64_t *)((char *)&v35 + 4))
  {
    v20 = *((_DWORD *)a4 + 2);
    v21 = *a4;
    v22 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v22;
    *a5 = v21;
    *((_DWORD *)a5 + 2) = v20;
    *(_QWORD *)&v36 = *(_QWORD *)a3;
    DWORD2(v36) = *(_DWORD *)(a3 + 8);
    if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)&v36 + 4))
    {
      v23 = *(_DWORD *)(a3 + 8);
      v24 = *(_QWORD *)a3;
      v25 = *((_DWORD *)a4 + 2);
      *(_QWORD *)a3 = *a4;
      *(_DWORD *)(a3 + 8) = v25;
      *a4 = v24;
      *((_DWORD *)a4 + 2) = v23;
      *(_QWORD *)&v37 = *(_QWORD *)a2;
      DWORD2(v37) = *(_DWORD *)(a2 + 8);
      if (*(_QWORD *)(a3 + 4) < *(uint64_t *)((char *)&v37 + 4))
      {
        v26 = *(_DWORD *)(a2 + 8);
        v27 = *(_QWORD *)a2;
        v28 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v28;
        *(_QWORD *)a3 = v27;
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)&v38 = *(_QWORD *)a1;
        DWORD2(v38) = *(_DWORD *)(a1 + 8);
        if (*(_QWORD *)(a2 + 4) < *(uint64_t *)((char *)&v38 + 4))
        {
          v29 = *(_DWORD *)(a1 + 8);
          v30 = *(_QWORD *)a1;
          v31 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v31;
          *(_QWORD *)a2 = v30;
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2;
    v7 = (uint64_t)a2 - a1;
    v8 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      v10 = (v8 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a4, v8, v12);
        v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    v13 = v5;
    if (v5 != a3)
    {
      if (v7 > 23)
      {
        v18 = v5;
        do
        {
          *(_QWORD *)&v52 = *(_QWORD *)a1;
          DWORD2(v52) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v18 + 4) < *(uint64_t *)((char *)&v52 + 4))
          {
            v19 = *((_DWORD *)v18 + 2);
            v20 = *v18;
            v21 = *(_DWORD *)(a1 + 8);
            *v18 = *(_QWORD *)a1;
            *((_DWORD *)v18 + 2) = v21;
            *(_QWORD *)a1 = v20;
            *(_DWORD *)(a1 + 8) = v19;
            if (v8 < 3)
            {
              v24 = a1 + 12;
              v25 = 1;
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)&v53 = *(_QWORD *)(a1 + 24);
              DWORD2(v53) = *(_DWORD *)(a1 + 32);
              v23 = v22 < *(_QWORD *)((char *)&v53 + 4);
              v24 = v22 >= *(uint64_t *)((char *)&v53 + 4) ? a1 + 12 : a1 + 24;
              v25 = v23 ? 2 : 1;
            }
            v26 = *(_QWORD *)a1;
            v27 = *(_DWORD *)(a1 + 8);
            *(_QWORD *)&v54 = *(_QWORD *)a1;
            DWORD2(v54) = v27;
            if (*(_QWORD *)(v24 + 4) >= *(uint64_t *)((char *)&v54 + 4))
            {
              v28 = a1;
              do
              {
                v29 = v28;
                v28 = v24;
                v30 = *(_QWORD *)v24;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v28 + 8);
                *(_QWORD *)v29 = v30;
                if ((uint64_t)((v8 - 2) >> 1) < v25)
                  break;
                v31 = (2 * v25) | 1;
                v24 = a1 + 12 * v31;
                v32 = 2 * v25 + 2;
                if (v32 < (uint64_t)v8)
                {
                  *(_QWORD *)&v55 = *(_QWORD *)(v24 + 12);
                  DWORD2(v55) = *(_DWORD *)(v24 + 20);
                  if (*(_QWORD *)(a1 + 12 * v31 + 4) < *(uint64_t *)((char *)&v55 + 4))
                  {
                    v24 += 12;
                    v31 = v32;
                  }
                }
                v25 = v31;
              }
              while (*(_QWORD *)(v24 + 4) >= __SPAIR64__(v27, HIDWORD(v26)));
              *(_QWORD *)v28 = v26;
              *(_DWORD *)(v28 + 8) = v27;
            }
          }
          v18 = (uint64_t *)((char *)v18 + 12);
        }
        while (v18 != a3);
      }
      else
      {
        v14 = v5;
        do
        {
          *(_QWORD *)&v51 = *(_QWORD *)a1;
          DWORD2(v51) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v14 + 4) < *(uint64_t *)((char *)&v51 + 4))
          {
            v15 = *((_DWORD *)v14 + 2);
            v16 = *v14;
            v17 = *(_DWORD *)(a1 + 8);
            *v14 = *(_QWORD *)a1;
            *((_DWORD *)v14 + 2) = v17;
            *(_QWORD *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v15;
          }
          v14 = (uint64_t *)((char *)v14 + 12);
        }
        while (v14 != a3);
      }
      v13 = a3;
    }
    if (v7 >= 13)
    {
      v33 = v7 / 0xCuLL;
      do
      {
        v34 = 0;
        v49 = *(_QWORD *)a1;
        v50 = *(_DWORD *)(a1 + 8);
        v35 = a1;
        do
        {
          v37 = v34 + 1;
          v38 = v35 + 12 * (v34 + 1);
          v39 = (2 * v34) | 1;
          v40 = 2 * v34 + 2;
          if (v40 < v33)
          {
            *(_QWORD *)&v56 = *(_QWORD *)(v38 + 12);
            DWORD2(v56) = *(_DWORD *)(v38 + 20);
            if (*(_QWORD *)(v35 + 12 * v37 + 4) < *(uint64_t *)((char *)&v56 + 4))
            {
              v38 += 12;
              v39 = v40;
            }
          }
          v36 = *(_QWORD *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          *(_QWORD *)v35 = v36;
          v35 = v38;
          v34 = v39;
        }
        while (v39 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        v5 = (uint64_t *)((char *)v5 - 12);
        if ((uint64_t *)v38 == v5)
        {
          *(_DWORD *)(v38 + 8) = v50;
          *(_QWORD *)v38 = v49;
        }
        else
        {
          v41 = *v5;
          *(_DWORD *)(v38 + 8) = *((_DWORD *)v5 + 2);
          *(_QWORD *)v38 = v41;
          *v5 = v49;
          *((_DWORD *)v5 + 2) = v50;
          v42 = v38 - a1 + 12;
          if (v42 >= 13)
          {
            v43 = (v42 / 0xCuLL - 2) >> 1;
            v44 = *(_QWORD *)v38;
            v45 = *(_DWORD *)(v38 + 8);
            *(_QWORD *)&v57 = *(_QWORD *)v38;
            DWORD2(v57) = v45;
            if (*(_QWORD *)(a1 + 12 * v43 + 4) < *(uint64_t *)((char *)&v57 + 4))
            {
              do
              {
                v46 = v38;
                v38 = a1 + 12 * v43;
                v47 = *(_QWORD *)v38;
                *(_DWORD *)(v46 + 8) = *(_DWORD *)(v38 + 8);
                *(_QWORD *)v46 = v47;
                if (!v43)
                  break;
                v43 = (v43 - 1) >> 1;
              }
              while (*(_QWORD *)(a1 + 12 * v43 + 4) < __SPAIR64__(v45, HIDWORD(v44)));
              *(_QWORD *)v38 = v44;
              *(_DWORD *)(v38 + 8) = v45;
            }
          }
        }
        v23 = v33-- <= 2;
      }
      while (!v23);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        *(_QWORD *)&v13 = *(uint64_t *)((char *)v6 + 12);
        DWORD2(v13) = *((_DWORD *)v6 + 5);
        if (*(_QWORD *)(result + 12 * v5 + 4) < *(uint64_t *)((char *)&v13 + 4))
        {
          v6 = (uint64_t *)((char *)v6 + 12);
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v7 = *a4;
      v8 = *((_DWORD *)a4 + 2);
      *(_QWORD *)&v14 = *a4;
      DWORD2(v14) = v8;
      if (*(uint64_t *)((char *)v6 + 4) >= *(uint64_t *)((char *)&v14 + 4))
      {
        do
        {
          v9 = a4;
          a4 = v6;
          v10 = *v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)a4 + 2);
          *v9 = v10;
          if (v4 < v5)
            break;
          v11 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 12 * v11);
          v12 = 2 * v5 + 2;
          if (v12 < a3)
          {
            *(_QWORD *)&v15 = *(uint64_t *)((char *)v6 + 12);
            DWORD2(v15) = *((_DWORD *)v6 + 5);
            if (*(_QWORD *)(result + 12 * v11 + 4) < *(uint64_t *)((char *)&v15 + 4))
            {
              v6 = (uint64_t *)((char *)v6 + 12);
              v11 = v12;
            }
          }
          v5 = v11;
        }
        while (*(uint64_t *)((char *)v6 + 4) >= __SPAIR64__(v8, HIDWORD(v7)));
        *a4 = v7;
        *((_DWORD *)a4 + 2) = v8;
      }
    }
  }
  return result;
}

void operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(int a1, char *a2, char *a3, int a4)
{
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  const std::nothrow_t *v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE v30[12];

  if (a3 - a2 >= 24)
  {
    v5 = a3 - 12;
    if (a3 - 12 == a2)
    {
      v5 = a2;
    }
    else
    {
      v6 = a3 - 12;
      v7 = a3 - 12;
      do
      {
        v8 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v9 = *((_DWORD *)v7 + 2);
        *(_QWORD *)v30 = v8;
        *(_DWORD *)&v30[8] = v9;
        if (*((_QWORD *)v7 + 2) < *(uint64_t *)&v30[4])
        {
          v10 = *((_DWORD *)v6 + 2);
          v11 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v7;
          *((_DWORD *)v6 + 2) = *((_DWORD *)v7 + 2);
          *(_QWORD *)v7 = v11;
          *((_DWORD *)v7 + 2) = v10;
          v5 = v6;
        }
        v6 = v7;
      }
      while (v7 != a2);
    }
    v12 = v5 + 12;
    if (v5 + 12 != a3 && a1 >= 1)
    {
      v13 = v5;
      do
      {
        v14 = *((_DWORD *)v13 + 3);
        v15 = *((_QWORD *)v13 + 2);
        v13 = v12;
        --a1;
        v16 = *((_DWORD *)v12 - 1);
        *(_QWORD *)v30 = *(_QWORD *)(v12 - 12);
        *(_DWORD *)&v30[8] = v16;
        if (v15 >= *(uint64_t *)&v30[4])
        {
          *(_DWORD *)v12 = v14;
          *(_QWORD *)(v12 + 4) = v15;
          v12 += 12;
          if (v13 + 12 == a3)
            break;
        }
        else
        {
          v17 = v12;
          do
          {
            v18 = *(_QWORD *)(v12 - 12);
            v12 -= 12;
            *(_QWORD *)v17 = v18;
            *((_DWORD *)v17 + 2) = *((_DWORD *)v17 - 1);
            --a1;
            v19 = *((_QWORD *)v17 - 3);
            v20 = *((_DWORD *)v17 - 4);
            *(_QWORD *)v30 = v19;
            *(_DWORD *)&v30[8] = v20;
            v17 = v12;
          }
          while (v15 < *(uint64_t *)&v30[4]);
          *(_DWORD *)v12 = v14;
          *(_QWORD *)(v12 + 4) = v15;
          v12 = v13 + 12;
          if (v13 + 12 == a3)
            break;
        }
      }
      while (a1 > 0);
    }
    if (v12 != a3)
    {
      v21 = (a3 - v5) >> 2;
      v22 = 0xAAAAAAAAAAAAAAABLL * v21;
      if (a4)
      {
        if (a3 - v5 < 1537)
        {
LABEL_24:
          v27 = 0;
          v24 = 0;
        }
        else
        {
          v23 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          v24 = 0xAAAAAAAAAAAAAAABLL * v21;
          while (1)
          {
            v25 = operator new(12 * v24, v23);
            if (v25)
              break;
            v26 = v24 > 1;
            v24 >>= 1;
            if (!v26)
              goto LABEL_24;
          }
          v27 = v25;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v5, a3, (uint64_t)v30, v22, (uint64_t)v27, v24);
        if (v27)
          operator delete(v27);
      }
      else
      {
        v28 = 126 - 2 * __clz(v22);
        if (v5 == a3)
          v29 = 0;
        else
          v29 = v28;
        std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>((uint64_t)v5, (uint64_t *)a3, (uint64_t)v30, v29, 1);
      }
    }
  }
}

void sub_22DB4EC14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (a4 >= 2)
  {
    v7 = result;
    if (a4 == 2)
    {
      *(_QWORD *)&v39 = *(_QWORD *)result;
      DWORD2(v39) = *((_DWORD *)result + 2);
      if (*((_QWORD *)a2 - 1) < *(uint64_t *)((char *)&v39 + 4))
      {
        v8 = *((_DWORD *)result + 2);
        v9 = *(_QWORD *)result;
        v10 = *((_DWORD *)a2 - 1);
        *(_QWORD *)result = *(_QWORD *)(a2 - 12);
        *((_DWORD *)result + 2) = v10;
        *(_QWORD *)(a2 - 12) = v9;
        *((_DWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v23 = a5;
      v25 = a4 >> 1;
      v26 = (uint64_t)&result[12 * (a4 >> 1)];
      v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)result, v26, a3, v27, a5);
        v28 = v23 + 12 * v25;
        result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)&v7[12 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        v29 = v23 + 12 * a4;
        v30 = v28;
        while (v30 != v29)
        {
          *(_QWORD *)&v41 = *(_QWORD *)v23;
          DWORD2(v41) = *(_DWORD *)(v23 + 8);
          if (*(_QWORD *)(v30 + 4) >= *(uint64_t *)((char *)&v41 + 4))
          {
            v31 = *(_QWORD *)v23;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v23 + 8);
            *(_QWORD *)v7 = v31;
            v7 += 12;
            v23 += 12;
            if (v23 == v28)
              goto LABEL_24;
          }
          else
          {
            v32 = *(_QWORD *)v30;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v30 + 8);
            *(_QWORD *)v7 = v32;
            v7 += 12;
            v30 += 12;
            if (v23 == v28)
            {
LABEL_24:
              if (v30 != v29)
              {
                v33 = 0;
                do
                {
                  v34 = &v7[v33];
                  v35 = *(_QWORD *)(v30 + v33);
                  *((_DWORD *)v34 + 2) = *(_DWORD *)(v30 + v33 + 8);
                  *(_QWORD *)v34 = v35;
                  v33 += 12;
                }
                while (v30 + v33 != v29);
              }
              return result;
            }
          }
        }
        if (v23 != v28)
        {
          v36 = 0;
          do
          {
            v37 = &v7[v36];
            v38 = *(_QWORD *)(v23 + v36);
            *((_DWORD *)v37 + 2) = *(_DWORD *)(v23 + v36 + 8);
            *(_QWORD *)v37 = v38;
            v36 += 12;
          }
          while (v23 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v7[12 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v23, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v7, &v7[12 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v23, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 12;
      if (result + 12 != a2)
      {
        v13 = 0;
        v14 = result;
        do
        {
          v16 = *(_QWORD *)v14;
          v17 = *((_DWORD *)v14 + 2);
          v18 = *((_QWORD *)v14 + 2);
          v14 = v12;
          if (v18 < __SPAIR64__(v17, HIDWORD(v16)))
          {
            v19 = *(_DWORD *)v12;
            v20 = v13;
            do
            {
              v21 = &result[v20];
              *(_QWORD *)(v21 + 12) = *(_QWORD *)&result[v20];
              *((_DWORD *)v21 + 5) = *(_DWORD *)&result[v20 + 8];
              if (!v20)
              {
                v15 = (uint64_t)result;
                goto LABEL_10;
              }
              *(_QWORD *)&v40 = *(_QWORD *)(v21 - 12);
              DWORD2(v40) = *((_DWORD *)v21 - 1);
              v20 -= 12;
            }
            while (v18 < *(uint64_t *)((char *)&v40 + 4));
            v15 = (uint64_t)&result[v20 + 12];
LABEL_10:
            *(_DWORD *)v15 = v19;
            *(_QWORD *)(v15 + 4) = v18;
          }
          v12 = v14 + 12;
          v13 += 12;
        }
        while (v14 + 12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (a4)
  {
    v5 = a5;
    v8 = result;
    if (a4 == 2)
    {
      v10 = (uint64_t *)(a2 - 12);
      *(_QWORD *)&v38 = *(_QWORD *)result;
      DWORD2(v38) = *(_DWORD *)(result + 8);
      v11 = (_QWORD *)(a5 + 12);
      if (*(_QWORD *)(a2 - 8) >= *(uint64_t *)((char *)&v38 + 4))
      {
        v23 = *(_QWORD *)result;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
        *(_QWORD *)a5 = v23;
        v24 = *v10;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(a2 - 4);
        *v11 = v24;
      }
      else
      {
        v12 = *v10;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a5 = v12;
        v13 = *(_QWORD *)result;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(result + 8);
        *v11 = v13;
      }
    }
    else if (a4 == 1)
    {
      v9 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      v26 = a4 >> 1;
      v27 = 12 * (a4 >> 1);
      v28 = result + v27;
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, result + v27, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v8 + v27, a2, a3, a4 - v26, v5 + v27, a4 - v26);
      v29 = v8 + v27;
      while (v29 != a2)
      {
        *(_QWORD *)&v41 = *(_QWORD *)v8;
        DWORD2(v41) = *(_DWORD *)(v8 + 8);
        if (*(_QWORD *)(v29 + 4) >= *(uint64_t *)((char *)&v41 + 4))
        {
          v30 = *(_QWORD *)v8;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v8 + 8);
          *(_QWORD *)v5 = v30;
          v5 += 12;
          v8 += 12;
          if (v8 == v28)
            goto LABEL_24;
        }
        else
        {
          v31 = *(_QWORD *)v29;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v29 + 8);
          *(_QWORD *)v5 = v31;
          v5 += 12;
          v29 += 12;
          if (v8 == v28)
          {
LABEL_24:
            if (v29 != a2)
            {
              v32 = 0;
              do
              {
                v33 = v5 + v32;
                v34 = *(_QWORD *)(v29 + v32);
                *(_DWORD *)(v33 + 8) = *(_DWORD *)(v29 + v32 + 8);
                *(_QWORD *)v33 = v34;
                v32 += 12;
              }
              while (v29 + v32 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v28)
      {
        v35 = 0;
        do
        {
          v36 = v5 + v35;
          v37 = *(_QWORD *)(v8 + v35);
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v8 + v35 + 8);
          *(_QWORD *)v36 = v37;
          v35 += 12;
        }
        while (v8 + v35 != v28);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v14;
      v15 = result + 12;
      if (result + 12 != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v19 = v8;
          v20 = v17;
          v8 = v15;
          v17 += 12;
          *(_QWORD *)&v39 = *(_QWORD *)v20;
          DWORD2(v39) = *(_DWORD *)(v20 + 8);
          v21 = v17;
          if (*(_QWORD *)(v19 + 16) < *(uint64_t *)((char *)&v39 + 4))
          {
            *(_QWORD *)v17 = *(_QWORD *)v20;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 8);
            v21 = a5;
            if (v20 != a5)
            {
              v22 = v16;
              while (1)
              {
                v21 = a5 + v22;
                *(_QWORD *)&v40 = *(_QWORD *)(a5 + v22 - 12);
                DWORD2(v40) = *(_DWORD *)(a5 + v22 - 4);
                if (*(_QWORD *)(v19 + 16) >= *(uint64_t *)((char *)&v40 + 4))
                  break;
                *(_QWORD *)v21 = *(_QWORD *)(a5 + v22 - 12);
                *(_DWORD *)(v21 + 8) = *(_DWORD *)(a5 + v22 - 4);
                v22 -= 12;
                if (!v22)
                {
                  v21 = a5;
                  break;
                }
              }
            }
          }
          v18 = *(_QWORD *)v8;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v8 + 8);
          *(_QWORD *)v21 = v18;
          v15 = v8 + 12;
          v16 += 12;
        }
        while (v8 + 12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;

  if (a6)
  {
    v10 = a6;
    v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v13 = 0;
      v14 = -a5;
      while (1)
      {
        v15 = &v12[v13];
        *(_QWORD *)&v65 = *(_QWORD *)&v12[v13];
        DWORD2(v65) = *(_DWORD *)&v12[v13 + 8];
        if (*(_QWORD *)(a2 + 4) < *(uint64_t *)((char *)&v65 + 4))
          break;
        v13 += 12;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v17 = -v14;
      v62 = a3;
      v63 = a7;
      v61 = a8;
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          v55 = &v12[v13];
          v70 = *(_DWORD *)&v12[v13 + 8];
          v69 = *(_QWORD *)&v12[v13];
          v56 = *(_QWORD *)a2;
          *((_DWORD *)v55 + 2) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v55 = v56;
          *(_QWORD *)a2 = v69;
          *((_DWORD *)a2 + 2) = v70;
          return result;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v26 = v17 >> 1;
        v20 = &v12[12 * (v17 >> 1) + v13];
        v25 = a2;
        if (a2 != a3)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
          v25 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v25[12 * (v27 >> 1)];
            v30 = *(_QWORD *)(v29 + 4);
            v31 = v29 + 12;
            v27 += ~(v27 >> 1);
            if (v30 < __SPAIR64__(*(_DWORD *)&v12[12 * v26 + 8 + v13], HIDWORD(*(_QWORD *)v20)))
              v25 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 2);
      }
      else
      {
        if (v10 >= 0)
          v18 = v10;
        else
          v18 = v10 + 1;
        v19 = v18 >> 1;
        v20 = a2;
        if (a2 - v12 != v13)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12 - v13) >> 2);
          v20 = &v12[v13];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[12 * (v21 >> 1)];
            *(_QWORD *)&v66 = *(_QWORD *)v23;
            DWORD2(v66) = *((_DWORD *)v23 + 2);
            v24 = v23 + 12;
            v21 += ~(v21 >> 1);
            if (*(_QWORD *)&a2[12 * v19 + 4] < *(uint64_t *)((char *)&v66 + 4))
              v21 = v22;
            else
              v20 = v24;
          }
          while (v21);
        }
        v25 = &a2[12 * v19];
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12 - v13) >> 2);
      }
      a5 = -(v26 + v14);
      v60 = v10 - v19;
      v32 = v26;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(v20, a2, v25);
      v34 = v32;
      v35 = v33;
      if (v34 + v19 >= v10 - (v34 + v19) - v14)
      {
        v37 = v25;
        v38 = v34;
        a8 = v61;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v33, v37, v62, a4, a5, v60, v63, v61);
        a2 = v20;
        a7 = v63;
        a5 = v38;
        a3 = v35;
        v10 = v19;
        v12 = v15;
        if (!v19)
          return result;
      }
      else
      {
        v36 = v20;
        a7 = v63;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v12[v13], v36, v33, a4, v34, v19, v63, v61);
        a2 = v25;
        a8 = v61;
        a3 = v62;
        v10 -= v19;
        v12 = v35;
        if (!v60)
          return result;
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        v48 = 0;
        do
        {
          v49 = &a7[v48];
          v50 = *(_QWORD *)&v12[v48];
          *((_DWORD *)v49 + 2) = *(_DWORD *)&v12[v48 + 8];
          *(_QWORD *)v49 = v50;
          v48 += 12;
        }
        while (&v12[v48] != a2);
        if (v48)
        {
          v51 = &a7[v48];
          v52 = a7;
          while (a2 != a3)
          {
            *(_QWORD *)&v68 = *(_QWORD *)v52;
            DWORD2(v68) = *((_DWORD *)v52 + 2);
            if (*(_QWORD *)(a2 + 4) >= *(uint64_t *)((char *)&v68 + 4))
            {
              v53 = *(_QWORD *)v52;
              *((_DWORD *)v12 + 2) = *((_DWORD *)v52 + 2);
              *(_QWORD *)v12 = v53;
              v12 += 12;
              v52 += 12;
              if (v51 == v52)
                return result;
            }
            else
            {
              v54 = *(_QWORD *)a2;
              *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
              *(_QWORD *)v12 = v54;
              v12 += 12;
              a2 += 12;
              if (v51 == v52)
                return result;
            }
          }
          return (char *)memmove(v12, v52, a7 - v52 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      v39 = 0;
      do
      {
        v40 = &a7[v39];
        v41 = *(_QWORD *)&a2[v39];
        *((_DWORD *)v40 + 2) = *(_DWORD *)&a2[v39 + 8];
        *(_QWORD *)v40 = v41;
        v39 += 12;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        v42 = &a7[v39];
        v43 = a3 - 12;
        while (a2 != v12)
        {
          *(_QWORD *)&v67 = *(_QWORD *)(a2 - 12);
          DWORD2(v67) = *((_DWORD *)a2 - 1);
          v44 = *((_QWORD *)v42 - 1);
          v45 = v44 < *(_QWORD *)((char *)&v67 + 4);
          if (v44 >= *(uint64_t *)((char *)&v67 + 4))
            v46 = v42 - 12;
          else
            v46 = a2 - 12;
          if (v45)
            a2 -= 12;
          else
            v42 -= 12;
          v47 = *(_QWORD *)v46;
          *((_DWORD *)v43 + 2) = *((_DWORD *)v46 + 2);
          *(_QWORD *)v43 = v47;
          v43 -= 12;
          if (v42 == a7)
            return result;
        }
        v57 = 0;
        do
        {
          v58 = &v43[v57];
          v59 = *(_QWORD *)&v42[v57 - 12];
          *((_DWORD *)v58 + 2) = *(_DWORD *)&v42[v57 - 4];
          *(_QWORD *)v58 = v59;
          v57 -= 12;
        }
        while (&v42[v57] != a7);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 12 == a2)
    {
      v30 = *(_QWORD *)__src;
      v33 = *((_DWORD *)__src + 2);
      v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v13];
      *(_QWORD *)v4 = v30;
      *((_DWORD *)v4 + 2) = v33;
    }
    else if (a2 + 12 == a3)
    {
      v4 = __src + 12;
      v31 = *(_QWORD *)(a3 - 12);
      v34 = *((_DWORD *)a3 - 1);
      v14 = a3 - 12 - __src;
      if (a3 - 12 != __src)
        memmove(__src + 12, __src, v14);
      *(_QWORD *)__src = v31;
      *((_DWORD *)__src + 2) = v34;
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 2);
      if (v6 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2))
      {
        v7 = __src + 12;
        v8 = a2 + 12;
        do
        {
          v9 = *((_DWORD *)v7 - 1);
          v10 = *(_QWORD *)(v7 - 12);
          v11 = *((_DWORD *)v8 - 1);
          *(_QWORD *)(v7 - 12) = *(_QWORD *)(v8 - 12);
          *((_DWORD *)v7 - 1) = v11;
          *(_QWORD *)(v8 - 12) = v10;
          *((_DWORD *)v8 - 1) = v9;
          if (v7 == a2)
            break;
          v7 += 12;
          v12 = v8 == a3;
          v8 += 12;
        }
        while (!v12);
        return a2;
      }
      else
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
        v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 2);
        do
        {
          v17 = v16;
          v16 = v15;
          v15 = v17 % v15;
        }
        while (v15);
        if (v16)
        {
          v18 = &__src[12 * v16];
          do
          {
            v19 = *(_QWORD *)(v18 - 12);
            v18 -= 12;
            v32 = v19;
            v35 = *((_DWORD *)v18 + 2);
            v20 = &v18[4 * ((a2 - __src) >> 2)];
            v21 = v18;
            do
            {
              v22 = v20;
              v23 = *(_QWORD *)v20;
              *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
              *(_QWORD *)v21 = v23;
              v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (char *)v22) >> 2);
              v20 = (char *)v22 + 4 * ((a2 - __src) >> 2);
              v25 = __OFSUB__(v6, v24);
              v27 = v6 - v24;
              v26 = (v27 < 0) ^ v25;
              v28 = &__src[12 * v27];
              if (!v26)
                v20 = v28;
              v21 = (char *)v22;
            }
            while (v20 != v18);
            *((_DWORD *)v22 + 2) = v35;
            *v22 = v32;
          }
          while (v18 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  int v77;
  int v78;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        *(_QWORD *)&v67 = *(_QWORD *)v10;
        DWORD2(v67) = *(_DWORD *)(v10 + 8);
        if (*(a2 - 1) < *(uint64_t *)((char *)&v67 + 4))
        {
          v77 = *(_DWORD *)(v10 + 8);
          v68 = *(_QWORD *)v10;
          v35 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v10 = v35;
          *((_DWORD *)a2 - 1) = v77;
          *(uint64_t *)((char *)a2 - 12) = v68;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)((char *)a2 - 12));
      case 4uLL:
        v36 = (uint64_t *)(v10 + 12);
        v37 = (uint64_t *)(v10 + 24);
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24));
        *(_QWORD *)&v69 = *(_QWORD *)(v10 + 24);
        DWORD2(v69) = *(_DWORD *)(v10 + 32);
        if (*(a2 - 1) < *(uint64_t *)((char *)&v69 + 4))
        {
          v38 = *v37;
          v39 = *(_DWORD *)(v10 + 32);
          v40 = *((_DWORD *)a2 - 1);
          *v37 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 32) = v40;
          *((_DWORD *)a2 - 1) = v39;
          *(uint64_t *)((char *)a2 - 12) = v38;
          *(_QWORD *)&v70 = *(_QWORD *)(v10 + 12);
          DWORD2(v70) = *(_DWORD *)(v10 + 20);
          if (*(_QWORD *)(v10 + 28) < *(uint64_t *)((char *)&v70 + 4))
          {
            v41 = *(_DWORD *)(v10 + 20);
            v42 = *v36;
            *v36 = *v37;
            *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
            *v37 = v42;
            *(_DWORD *)(v10 + 32) = v41;
            *(_QWORD *)&v71 = *(_QWORD *)v10;
            DWORD2(v71) = *(_DWORD *)(v10 + 8);
            if (*(_QWORD *)(v10 + 16) < *(uint64_t *)((char *)&v71 + 4))
            {
              v78 = *(_DWORD *)(v10 + 8);
              v72 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v36;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
              *v36 = v72;
              *(_DWORD *)(v10 + 20) = v78;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v10, v10 + 12, v10 + 24, (uint64_t *)(v10 + 36), (uint64_t *)((char *)a2 - 12));
      default:
        if (v11 <= 287)
        {
          v43 = (uint64_t *)(v10 + 12);
          v45 = (uint64_t *)v10 == a2 || v43 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = v10;
              do
              {
                v49 = *(_QWORD *)v47;
                v50 = *(_DWORD *)(v47 + 8);
                v51 = *(_QWORD *)(v47 + 16);
                v47 = (unint64_t)v43;
                if (v51 < __SPAIR64__(v50, HIDWORD(v49)))
                {
                  v52 = *(_DWORD *)v43;
                  v53 = v46;
                  do
                  {
                    v54 = v10 + v53;
                    *(_QWORD *)(v54 + 12) = *(_QWORD *)(v10 + v53);
                    *(_DWORD *)(v54 + 20) = *(_DWORD *)(v10 + v53 + 8);
                    if (!v53)
                    {
                      v48 = v10;
                      goto LABEL_54;
                    }
                    *(_QWORD *)&v73 = *(_QWORD *)(v54 - 12);
                    DWORD2(v73) = *(_DWORD *)(v54 - 4);
                    v53 -= 12;
                  }
                  while (v51 < *(uint64_t *)((char *)&v73 + 4));
                  v48 = v10 + v53 + 12;
LABEL_54:
                  *(_DWORD *)v48 = v52;
                  *(_QWORD *)(v48 + 4) = v51;
                }
                v43 = (uint64_t *)(v47 + 12);
                v46 += 12;
              }
              while ((uint64_t *)(v47 + 12) != a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v55 = *(_QWORD *)v9;
              v56 = *(_DWORD *)(v9 + 8);
              v57 = *(_QWORD *)(v9 + 16);
              v9 = (uint64_t)v43;
              if (v57 < __SPAIR64__(v56, HIDWORD(v55)))
              {
                v58 = *(_DWORD *)v43;
                do
                {
                  v59 = v43;
                  v60 = *(uint64_t *)((char *)v43 - 12);
                  v43 = (uint64_t *)((char *)v43 - 12);
                  *v59 = v60;
                  *((_DWORD *)v59 + 2) = *((_DWORD *)v59 - 1);
                  *(_QWORD *)&v74 = *(v59 - 3);
                  DWORD2(v74) = *((_DWORD *)v59 - 4);
                }
                while (v57 < *(uint64_t *)((char *)&v74 + 4));
                *(_DWORD *)v43 = v58;
                *(uint64_t *)((char *)v43 + 4) = v57;
              }
              v43 = (uint64_t *)(v9 + 12);
            }
            while ((uint64_t *)(v9 + 12) != a2);
          }
          return result;
        }
        if (!a4)
        {
          if ((uint64_t *)v10 != a2)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(v10, a2, a2, a3);
          return result;
        }
        v13 = v12 >> 1;
        v14 = v10 + 12 * (v12 >> 1);
        if ((unint64_t)v11 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 12 * v13), (uint64_t *)v9, (uint64_t *)((char *)a2 - 12));
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v9, (uint64_t *)(v9 + 12 * v13), (uint64_t *)((char *)a2 - 12));
          v15 = 12 * v13;
          v16 = (uint64_t *)(12 * v13 + v9 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 12), v16, a2 - 3);
          v17 = (uint64_t *)(v9 + 12 + v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v9 + 24), v17, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v16, (uint64_t *)v14, v17);
          v75 = *(_DWORD *)(v9 + 8);
          v61 = *(_QWORD *)v9;
          v18 = *(_QWORD *)v14;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)v9 = v18;
          *(_DWORD *)(v14 + 8) = v75;
          *(_QWORD *)v14 = v61;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        *(_QWORD *)&v62 = *(_QWORD *)v9;
        DWORD2(v62) = *(_DWORD *)(v9 + 8);
        if (*(_QWORD *)(v9 - 8) >= *(uint64_t *)((char *)&v62 + 4))
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>((uint64_t *)v9, a2);
          v10 = result;
          a5 = 0;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *(_QWORD *)v9;
        v21 = *(_DWORD *)(v9 + 8);
        do
        {
          *(_QWORD *)&v63 = *(_QWORD *)v9;
          DWORD2(v63) = *(_DWORD *)(v9 + 8);
          v22 = *(_QWORD *)(v9 + v19 + 16);
          v19 += 12;
        }
        while (v22 < *(uint64_t *)((char *)&v63 + 4));
        v23 = v9 + v19;
        v24 = a2;
        if (v19 == 12)
        {
          v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            v25 = (uint64_t *)((char *)v27 - 12);
            *(_QWORD *)&v65 = *(_QWORD *)v9;
            DWORD2(v65) = *(_DWORD *)(v9 + 8);
            v28 = *(v27 - 1);
            v27 = (uint64_t *)((char *)v27 - 12);
            if (v28 < *(uint64_t *)((char *)&v65 + 4))
              goto LABEL_19;
          }
          v25 = v27;
          v10 = v23;
        }
        else
        {
          do
          {
            v25 = (uint64_t *)((char *)v24 - 12);
            *(_QWORD *)&v64 = *(_QWORD *)v9;
            DWORD2(v64) = *(_DWORD *)(v9 + 8);
            v26 = *(v24 - 1);
            v24 = (uint64_t *)((char *)v24 - 12);
          }
          while (v26 >= *(uint64_t *)((char *)&v64 + 4));
LABEL_19:
          v10 = v23;
          if (v23 < (unint64_t)v25)
          {
            v29 = (unint64_t)v25;
            do
            {
              v76 = *(_DWORD *)(v10 + 8);
              v66 = *(_QWORD *)v10;
              v30 = *(_QWORD *)v29;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v29 + 8);
              *(_QWORD *)v10 = v30;
              *(_DWORD *)(v29 + 8) = v76;
              *(_QWORD *)v29 = v66;
              do
              {
                v31 = *(_QWORD *)(v10 + 16);
                v10 += 12;
              }
              while (v31 < __SPAIR64__(v21, HIDWORD(v20)));
              do
              {
                v32 = *(_QWORD *)(v29 - 8);
                v29 -= 12;
              }
              while (v32 >= __SPAIR64__(v21, HIDWORD(v20)));
            }
            while (v10 < v29);
          }
        }
        if (v10 - 12 != v9)
        {
          v33 = *(_QWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          *(_QWORD *)v9 = v33;
        }
        *(_QWORD *)(v10 - 12) = v20;
        *(_DWORD *)(v10 - 4) = v21;
        if (v23 < (unint64_t)v25)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(v9, v10 - 12, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v9, v10 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v10, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_30;
        }
        a2 = (uint64_t *)(v10 - 12);
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(_QWORD *)&v29 = *(_QWORD *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a2 - 8) < *(uint64_t *)((char *)&v29 + 4))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    case 4uLL:
      v18 = (uint64_t *)(a1 + 12);
      v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(_QWORD *)(a2 - 8) >= *(uint64_t *)((char *)&v30 + 4))
        goto LABEL_13;
      v20 = *(_DWORD *)(a1 + 32);
      v21 = *v19;
      v22 = *(_DWORD *)(a2 - 4);
      *v19 = *(_QWORD *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(_QWORD *)&v31 = *(_QWORD *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(_QWORD *)(a1 + 28) >= *(uint64_t *)((char *)&v31 + 4))
        goto LABEL_13;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = *v18;
      *v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(_QWORD *)&v32 = *(_QWORD *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) >= *(uint64_t *)((char *)&v32 + 4))
        goto LABEL_13;
      v25 = *(_DWORD *)(a1 + 8);
      v26 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          *(_QWORD *)&v27 = *(_QWORD *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          v10 = *(_QWORD *)(v7 + 4);
          if (v10 < *(uint64_t *)((char *)&v27 + 4))
            break;
LABEL_12:
          v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2)
            goto LABEL_13;
        }
        v11 = *(_DWORD *)v7;
        v12 = v8;
        do
        {
          v13 = a1 + v12;
          *(_QWORD *)(v13 + 36) = *(_QWORD *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(_QWORD *)(a1 + 4) = v10;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_22;
          }
          *(_QWORD *)&v28 = *(_QWORD *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 < *(uint64_t *)((char *)&v28 + 4));
        v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(_QWORD *)(v14 + 40) = v10;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_22:
        result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

unint64_t operations_research::sat::DratChecker::ClauseHash::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *a1;
  v3 = (int *)(*(_QWORD *)(*a1 + 8) + 56 * a2);
  v4 = v3[1];
  if (!(_DWORD)v4)
    return 0;
  v5 = 0;
  result = 0;
  v7 = (int *)(*(_QWORD *)(v2 + 96) + 4 * *v3);
  v8 = 4 * v4;
  do
  {
    v9 = *v7++;
    v10 = (v5 + 0x1F73E299748A907ELL + v9) ^ (result >> 43);
    v11 = (v5 - v10 - 0x1F73E299748A907ELL) ^ (v10 << 9);
    v12 = (result - v10 - v11) ^ (v11 >> 8);
    v13 = (v10 - v11 - v12) ^ (v12 >> 38);
    v14 = (v11 - v12 - v13) ^ (v13 << 23);
    v15 = (v12 - v13 - v14) ^ (v14 >> 5);
    v16 = (v13 - v14 - v15) ^ (v15 >> 35);
    v17 = (v14 - v15 - v16) ^ (v16 << 49);
    v18 = (v15 - v16 - v17) ^ (v17 >> 11);
    v19 = (v16 - v17 - v18) ^ (v18 >> 12);
    result = (v18 - v19 - ((v17 - v18 - v19) ^ (v19 << 18))) ^ (((v17 - v18 - v19) ^ (v19 << 18)) >> 22);
    v5 = -(uint64_t)result;
    v8 -= 4;
  }
  while (v8);
  return result;
}

double operations_research::sat::DratChecker::DratChecker(operations_research::sat::DratChecker *this)
{
  double result;

  *(_DWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = this;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 11) = this;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = (char *)this + 152;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 48) = -1;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = (char *)this + 352;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 98) = -1;
  return result;
}

void operations_research::sat::DratChecker::AddProblemClause(_QWORD *a1, char *a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  int v12;

  v12 = operations_research::sat::DratChecker::AddClause((uint64_t)a1, a2, a3);
  if (a1[4] + a1[7] == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(a1 + 4, &v12))
  {
    v9 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(a1 + 4, &v12);
    if (v10)
      *(_DWORD *)(a1[5] + 4 * v9) = v12;
  }
  else
  {
    v5 = a1[12];
    v6 = a1[2];
    ++*(_DWORD *)(a1[1] + 56 * *v4 + 12);
    v7 = *(int *)(v6 - 56);
    v8 = (a1[13] - v5) >> 2;
    if (v7 <= v8)
    {
      if (v7 < v8)
        a1[13] = v5 + 4 * v7;
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append((uint64_t)(a1 + 12), v7 - v8);
      v6 = a1[2];
    }
    v11 = *(void **)(v6 - 32);
    if (v11)
    {
      *(_QWORD *)(v6 - 24) = v11;
      operator delete(v11);
    }
    a1[2] = v6 - 56;
  }
}

uint64_t operations_research::sat::DratChecker::AddClause(uint64_t a1, char *__src, uint64_t a3)
{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  void *v31;
  int v32;
  int v33;
  __int128 v35;
  int v36;
  void *__p;
  void *v38;
  uint64_t v39;
  __int16 v40;

  v6 = *(void **)(a1 + 104);
  v7 = (uint64_t *)(a1 + 96);
  v8 = (uint64_t)v6 - *(_QWORD *)(a1 + 96);
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 96), v6, __src, &__src[4 * a3], (4 * a3) >> 2);
  v9 = v8 << 30 >> 30;
  v10 = (char *)v7[1];
  v11 = (int *)(*v7 + v9);
  v12 = 126 - 2 * __clz((v10 - (char *)v11) >> 2);
  v13 = (int)(v8 >> 2);
  if (v10 == (char *)v11)
    v14 = 0;
  else
    v14 = v12;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v11, v10, (uint64_t)&v35, v14, 1);
  v15 = *v7;
  v16 = (char *)v7[1];
  if ((char *)(*v7 + v9) != v16)
  {
    v17 = (char *)(v15 + 4 * v13 + 4);
    while (v17 != v16)
    {
      v19 = *((_DWORD *)v17 - 1);
      v18 = *(_DWORD *)v17;
      v17 += 4;
      if (v19 == v18)
      {
        v20 = v17 - 8;
        while (v17 != v16)
        {
          v21 = v18;
          v18 = *(_DWORD *)v17;
          if (v21 != *(_DWORD *)v17)
          {
            *((_DWORD *)v20 + 1) = v18;
            v20 += 4;
          }
          v17 += 4;
        }
        v23 = v20 + 4;
        v22 = v8 >> 2;
        v24 = v16 - (v20 + 4);
        if (v16 != v20 + 4)
        {
          if (v16 != &v23[v24])
          {
            memmove(v20 + 4, &v23[v24], 0);
            v15 = *v7;
          }
          v16 = v23;
          *(_QWORD *)(a1 + 104) = v23;
        }
        goto LABEL_18;
      }
    }
  }
  v22 = v8 >> 2;
LABEL_18:
  v25 = (uint64_t)&v16[-v15] >> 2;
  while (v25 > v13 + 1)
  {
    v26 = (_DWORD *)(v15 + 4 * v13++);
    if (v26[1] == (*v26 ^ 1))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v35, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 100);
      v27 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: literals_[i] != literals_[i - 1].Negated() ", 57);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v35);
    }
  }
  LODWORD(v35) = v22;
  DWORD1(v35) = v25 - v22;
  *((_QWORD *)&v35 + 1) = 0x1FFFFFFFFLL;
  v36 = 0x7FFFFFFF;
  v38 = 0;
  v39 = 0;
  __p = 0;
  v40 = 0;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28 >= *(_QWORD *)(a1 + 24))
  {
    v30 = std::vector<operations_research::sat::DratChecker::Clause>::__push_back_slow_path<operations_research::sat::DratChecker::Clause>((void **)(a1 + 8), (uint64_t)&v35);
    v31 = __p;
    *(_QWORD *)(a1 + 16) = v30;
    if (v31)
    {
      v38 = v31;
      operator delete(v31);
    }
  }
  else
  {
    v29 = v35;
    *(_DWORD *)(v28 + 16) = v36;
    *(_OWORD *)v28 = v29;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 40) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_WORD *)(v28 + 48) = 0;
    *(_QWORD *)(a1 + 16) = v28 + 56;
  }
  if (a3)
  {
    v32 = *(int *)(*(_QWORD *)(a1 + 104) - 4) >> 1;
    if (*(_DWORD *)(a1 + 120) <= v32 + 1)
      v33 = v32 + 1;
    else
      v33 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 120) = v33;
  }
  return -1227133513 * ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
}

void sub_22DB506FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DB50718(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(uint64_t *a1, int *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;

  v3 = *a2;
  v4 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *a2);
  v5 = 0;
  v6 = *a1;
  v7 = ((unint64_t)*a1 >> 12) ^ (v4 >> 7);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v6 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (!v12)
      goto LABEL_11;
    v13 = a1[1];
    v14 = a1[7];
    v15 = *(_QWORD *)(v14 + 8);
    v16 = (int *)(v15 + 56 * v3);
    v17 = v16[1];
    if (!v17)
      break;
    v18 = *(_QWORD *)(v14 + 96);
    do
    {
      v19 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
      v20 = (int *)(v15 + 56 * *(int *)(v13 + 4 * v19));
      v21 = v20[1];
      if ((_DWORD)v21 == v17)
      {
        v22 = (_DWORD *)(v18 + 4 * *v20);
        v23 = (_DWORD *)(v18 + 4 * *v16);
        v24 = 4 * v21;
        while (*v22 == *v23)
        {
          ++v22;
          ++v23;
          v24 -= 4;
          if (!v24)
            return v6 + v19;
        }
      }
      v12 &= v12 - 1;
    }
    while (v12);
LABEL_11:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      return v6 + v8;
    v5 += 8;
    v7 = v5 + v10;
  }
  while (1)
  {
    v19 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (!*(_DWORD *)(v15 + 56 * *(int *)(v13 + 4 * v19) + 4))
      return v6 + v19;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_11;
  }
}

void operations_research::sat::DratChecker::AddInferedClause(uint64_t a1, char *a2, uint64_t a3)
{
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  void *v18;
  unint64_t v19;
  char v20;
  unint64_t v21[2];
  uint64_t *v22;
  int v23;

  v6 = operations_research::sat::DratChecker::AddClause(a1, a2, a3);
  v23 = v6;
  if (*(_DWORD *)a1 == -1)
    *(_DWORD *)a1 = v6;
  if (*(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 56) == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>((uint64_t *)(a1 + 32), &v23))
  {
    if (a3)
      v17 = *(_DWORD *)a2;
    else
      v17 = -1;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 56 * v23 + 8) = v17;
    v19 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>((uint64_t *)(a1 + 32), &v23);
    if (v20)
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v19) = v23;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    ++*(_DWORD *)(v8 + 56 * *v7 + 12);
    if (*v7 >= *(_DWORD *)a1 && a3 != 0)
    {
      v10 = v8 + 56 * *v7;
      LODWORD(v21[0]) = *(_DWORD *)a2;
      v12 = *(_DWORD *)(v10 + 8);
      v11 = v10 + 8;
      if (v12 != LODWORD(v21[0]))
      {
        v22 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>(v11, (int)v21, "clauses_[*it].rat_literal_index == clause[0].Index()");
        if (v22)
        {
          google::LogMessageFatal::LogMessageFatal(v21, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 79, &v22);
          google::LogMessage::stream((google::LogMessage *)v21);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(int *)(v14 - 56);
    v16 = (*(_QWORD *)(a1 + 104) - v13) >> 2;
    if (v15 <= v16)
    {
      if (v15 < v16)
        *(_QWORD *)(a1 + 104) = v13 + 4 * v15;
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append(a1 + 96, v15 - v16);
      v14 = *(_QWORD *)(a1 + 16);
    }
    v18 = *(void **)(v14 - 32);
    if (v18)
    {
      *(_QWORD *)(v14 - 24) = v18;
      operator delete(v18);
    }
    *(_QWORD *)(a1 + 16) = v14 - 56;
  }
}

void sub_22DB50A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::DratChecker::DeleteClause(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  _BOOL8 v48;
  char v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63[4];

  v4 = a1 + 4;
  v63[0] = operations_research::sat::DratChecker::AddClause((uint64_t)a1, a2, a3);
  v5 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(v4, v63);
  v7 = a1[4];
  v8 = a1[7];
  if (v7 + v8 == v5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 127, 1);
    v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Couldn't find deleted clause", 28);
    google::LogMessage::~LogMessage((google::LogMessage *)v63);
  }
  else
  {
    v9 = v6;
    v10 = *v6;
    v11 = a1[1];
    v12 = v11 + 56 * *v6;
    v13 = *(_DWORD *)(v12 + 12) - 1;
    *(_DWORD *)(v12 + 12) = v13;
    if (!v13)
    {
      v14 = (_QWORD *)v5;
      v15 = a1[2];
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v11) >> 3);
      *(_DWORD *)(v11 + 56 * v10 + 16) = v16 - 1;
      if (*(int *)(v15 - 52) >= 2)
      {
        v17 = v11 + 56 * ((int)v16 - 2);
        v20 = *(_QWORD *)(v17 + 40);
        v19 = (_QWORD *)(v17 + 40);
        v18 = v20;
        v21 = v19 - 1;
        v22 = (char *)*(v19 - 1);
        if ((unint64_t)v22 >= v20)
        {
          v25 = v19 - 2;
          v26 = (char *)*(v19 - 2);
          v27 = v22 - v26;
          v28 = (v22 - v26) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v30 = v18 - (_QWORD)v26;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v32 = operator new(4 * v31);
            v28 = (v22 - v26) >> 2;
            v25 = v19 - 2;
            v27 = v22 - v26;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v28];
          *v33 = *v9;
          v23 = v33 + 1;
          if (v22 != v26)
          {
            v34 = v22 - v26 - 4;
            if (v34 < 0x2C)
              goto LABEL_56;
            if ((unint64_t)(v22 - v32 - v27) < 0x20)
              goto LABEL_56;
            v35 = (v34 >> 2) + 1;
            v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            v37 = &v22[-v36];
            v33 = (_DWORD *)((char *)v33 - v36);
            v38 = &v32[4 * v28 - 16];
            v39 = v22 - 16;
            v40 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *v38 = v41;
              v38 -= 2;
              v39 -= 32;
              v40 -= 8;
            }
            while (v40);
            v22 = v37;
            if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_56:
              do
              {
                v42 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *--v33 = v42;
              }
              while (v22 != v26);
            }
          }
          *v25 = v33;
          *v21 = v23;
          *v19 = &v32[4 * v31];
          if (v26)
          {
            operator delete(v26);
            v8 = a1[7];
          }
        }
        else
        {
          *(_DWORD *)v22 = *v6;
          v23 = v22 + 4;
        }
        *v21 = v23;
        v7 = *v4;
      }
      --a1[6];
      v43 = (uint64_t)v14 - v7 - 8;
      v44 = *v14 & (~*v14 << 6) & 0x8080808080808080;
      v45 = *(_QWORD *)(v7 + (v43 & v8)) & (~*(_QWORD *)(v7 + (v43 & v8)) << 6) & 0x8080808080808080;
      v46 = (__clz(v45) >> 3) + (__clz(__rbit64(v44)) >> 3);
      v47 = v46 >= 8;
      v48 = v46 < 8;
      if (v47)
        v49 = -2;
      else
        v49 = 0x80;
      if (v45)
        v50 = v44 == 0;
      else
        v50 = 1;
      if (v50)
        v51 = -2;
      else
        v51 = v49;
      *(_BYTE *)v14 = v51;
      v52 = !v50 && v48;
      *(_BYTE *)((a1[7] & v43) + (a1[7] & 7) + a1[4] + 1) = v51;
      v53 = a1[8];
      a1[9] += v52;
      if (v53)
      {
        v59 = (unint64_t *)(v53 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 - 1, v59));
        v61 = (unint64_t *)(v53 + 16);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
    }
  }
  v54 = a1[12];
  v55 = a1[2];
  v56 = *(int *)(v55 - 56);
  v57 = (a1[13] - v54) >> 2;
  if (v56 <= v57)
  {
    if (v56 < v57)
      a1[13] = v54 + 4 * v56;
  }
  else
  {
    std::vector<operations_research::sat::Literal>::__append((uint64_t)(a1 + 12), v56 - v57);
    v55 = a1[2];
  }
  v58 = *(void **)(v55 - 32);
  if (v58)
  {
    *(_QWORD *)(v55 - 24) = v58;
    operator delete(v58);
  }
  a1[2] = v55 - 56;
}

void sub_22DB50DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::DratChecker::Check(operations_research::sat::DratChecker *this, double a2)
{
  uint64_t v2;
  uint64_t v4;
  absl::lts_2020_02_25 *CurrentTimeNanos;
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep HasRupProperty;
  int i;
  unsigned __int8 v11;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int *j;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  int *v36;
  void *__p;
  _BYTE *v38;
  uint64_t v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45[2];
  __int128 v46;
  char v47;
  absl::lts_2020_02_25 *v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  unsigned __int8 *v53;
  uint64_t v54;

  v2 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) == v2 || *(_DWORD *)this == -1 || *(_DWORD *)(v2 - 52))
    return 2;
  *(_BYTE *)(v2 - 8) = 1;
  CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  v43 = (uint64_t)(0.0001 * 1000000000.0);
  v44 = 100;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v52 = 0.0;
  v53 = 0;
  v49 = 0;
  v51 = INFINITY;
  v54 = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    v47 = 1;
    CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    v48 = CurrentTimeNanos;
    v50 = a2;
  }
  v40 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  v41 = v40;
  v8 = v40 + (uint64_t)(a2 * 1000000000.0);
  if ((double)(v40 ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= a2)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  v42 = v8;
  operations_research::sat::DratChecker::Init(this);
  for (i = -1227133513 * ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) - 1; i >= *(_DWORD *)this; --i)
  {
    if (v53 && (v11 = atomic_load(v53), (v11 & 1) != 0) || fmax(v51 - v52, 0.0) <= 0.0)
    {
      v4 = 0;
      goto LABEL_52;
    }
    v12 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
    v13 = v12;
    if (v43 <= v12 - v41)
      v14 = v12 - v41;
    else
      v14 = v43;
    operations_research::RunningMax<long long>::Add(&v44, v14);
    v41 = v13;
    if (*((_QWORD *)v45[0] + SHIDWORD(v46)) + v13 >= v42)
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_51;
      v15 = v50;
      if (v47)
      {
        HasRupProperty = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
        v16 = v15 + (double)(HasRupProperty - (uint64_t)v48 + v49) * -0.000000001;
        if (v16 <= 0.0001)
          goto LABEL_51;
      }
      else
      {
        v16 = v50 + (double)v49 * -0.000000001;
        if (v16 <= 0.0001)
        {
LABEL_51:
          v4 = 0;
          v42 = 0;
          goto LABEL_52;
        }
      }
      v42 = v41 + (uint64_t)(v16 * 1000000000.0);
    }
    v17 = *((_QWORD *)this + 1);
    v18 = (int *)(v17 + 56 * i);
    v19 = (int *)*((_QWORD *)v18 + 3);
    for (j = (int *)*((_QWORD *)v18 + 4); v19 != j; ++v19)
      operations_research::sat::DratChecker::WatchClause(this, *v19);
    if (*(_BYTE *)(v17 + 56 * i + 48))
    {
      v21 = v17 + 56 * i;
      v23 = *(int *)(v21 + 4);
      v22 = (int *)(v21 + 4);
      HasRupProperty = operations_research::sat::DratChecker::HasRupProperty(this, i, (int *)(*((_QWORD *)this + 12) + 4 * *v18), v23);
      if ((HasRupProperty & 1) == 0)
      {
        v24 = v17 + 56 * i;
        v26 = *(_DWORD *)(v24 + 8);
        v25 = (int *)(v24 + 8);
        if (v26 == -1)
          goto LABEL_49;
        ++*((_DWORD *)this + 102);
        __p = 0;
        v38 = 0;
        v39 = 0;
        if (i >= 1)
        {
          v27 = 0;
          v28 = 1;
          do
          {
            v29 = *((_QWORD *)this + 1);
            if (*(_DWORD *)(v29 + 56 * v27 + 16) > i)
            {
              v30 = (int *)(v29 + 56 * v27);
              v31 = *((_QWORD *)this + 12);
              v32 = v30[1];
              v33 = (int *)(v31 + 4 * *v30);
              v34 = *v25;
              if ((_DWORD)v32)
              {
                v35 = 4 * v32;
                v36 = (int *)(v31 + 4 * *v30);
                while (*v36 != (v34 ^ 1))
                {
                  ++v36;
                  v35 -= 4;
                  if (!v35)
                  {
                    v36 = &v33[v32];
                    break;
                  }
                }
                if (v32 != v36 - v33
                  && (!operations_research::sat::Resolve((int *)(v31 + 4 * *v18), *v22, v33, v32, v34, (uint64_t)this + 352, (uint64_t)&__p)|| !operations_research::sat::DratChecker::HasRupProperty(this, i, (int *)__p, (v38 - (_BYTE *)__p) >> 2)))
                {
                  break;
                }
              }
            }
            v28 = ++v27 < i;
          }
          while (v27 != i);
          HasRupProperty = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)__p;
          if (__p)
          {
            v38 = __p;
            operator delete(__p);
          }
          if (v28)
          {
LABEL_49:
            v4 = 2;
            goto LABEL_52;
          }
        }
      }
    }
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
  operations_research::sat::DratChecker::LogStatistics(this);
  v4 = 1;
LABEL_52:
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  return v4;
}

void sub_22DB51234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DratChecker::Init(operations_research::sat::DratChecker *this)
{
  int v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  void **v49;
  uint64_t v50;

  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  v2 = *((_DWORD *)this + 30);
  v3 = (2 * v2) & ~((2 * v2) >> 31);
  *((_DWORD *)this + 38) = v3;
  v5 = *((_QWORD *)this + 20);
  v6 = *((_QWORD *)this + 21);
  v4 = (char *)this + 160;
  v7 = (v3 + 63) >> 6;
  v50 = 0;
  v8 = (v6 - v5) >> 3;
  if (v7 <= v8)
  {
    if (v7 < v8)
      *((_QWORD *)this + 21) = v5 + 8 * v7;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v4, v7 - v8, &v50);
    v2 = *((_DWORD *)this + 30);
  }
  v9 = *((_QWORD *)this + 26);
  v10 = (*((_QWORD *)this + 27) - v9) >> 2;
  if (v2 <= v10)
  {
    if (v2 < v10)
      *((_QWORD *)this + 27) = v9 + 4 * v2;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 208), v2 - v10, &operations_research::sat::kNoClauseIndex);
  }
  *((_QWORD *)this + 30) = *((_QWORD *)this + 29);
  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  v12 = *((_QWORD *)this + 35);
  v11 = *((_QWORD *)this + 36);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 36);
    do
    {
      v15 = *(void **)(v13 - 24);
      v13 -= 24;
      v14 = v15;
      if (v15)
      {
        *(_QWORD *)(v11 - 16) = v14;
        operator delete(v14);
      }
      v11 = v13;
    }
    while (v13 != v12);
    v11 = *((_QWORD *)this + 35);
  }
  *((_QWORD *)this + 36) = v12;
  v16 = 2 * *((int *)this + 30);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
  if (v16 <= v17)
  {
    if (v16 < v17)
    {
      v18 = v11 + 48 * *((int *)this + 30);
      if (v12 != v18)
      {
        v19 = v12;
        do
        {
          v21 = *(void **)(v19 - 24);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v12 - 16) = v20;
            operator delete(v20);
          }
          v12 = v19;
        }
        while (v19 != v18);
      }
      *((_QWORD *)this + 36) = v18;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 280, v16 - v17);
  }
  *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
  *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
  v22 = (2 * *((_DWORD *)this + 30)) & ~((2 * *((_DWORD *)this + 30)) >> 31);
  *((_DWORD *)this + 88) = v22;
  v23 = (v22 + 63) >> 6;
  v50 = 0;
  v24 = *((_QWORD *)this + 45);
  v25 = (*((_QWORD *)this + 46) - v24) >> 3;
  if (v23 <= v25)
  {
    if (v23 < v25)
      *((_QWORD *)this + 46) = v24 + 8 * v23;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 360, v23 - v25, &v50);
  }
  *((_DWORD *)this + 102) = 0;
  v26 = *((_QWORD *)this + 1);
  if ((int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 2) - v26) >> 3)) >= 1)
  {
    v27 = 0;
    v49 = (void **)((char *)this + 304);
    while (1)
    {
      v29 = *(_DWORD *)(v26 + 56 * v27 + 4);
      if (v29 >= 2)
      {
        if (*(_DWORD *)(v26 + 56 * v27 + 16) == 0x7FFFFFFF)
          operations_research::sat::DratChecker::WatchClause(this, v27);
        goto LABEL_32;
      }
      if (v29 == 1)
        break;
LABEL_32:
      ++v27;
      v26 = *((_QWORD *)this + 1);
      if (v27 >= (int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 2) - v26) >> 3)))
        return;
    }
    v31 = (char *)*((_QWORD *)this + 39);
    v30 = *((_QWORD *)this + 40);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = v27;
      v28 = (uint64_t)(v31 + 4);
LABEL_31:
      *((_QWORD *)this + 39) = v28;
      goto LABEL_32;
    }
    v32 = (char *)*v49;
    v33 = v31 - (_BYTE *)*v49;
    v34 = v33 >> 2;
    v35 = (v33 >> 2) + 1;
    if (v35 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v36 = v30 - (_QWORD)v32;
    if (v36 >> 1 > v35)
      v35 = v36 >> 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(4 * v37);
      v39 = &v38[4 * v34];
      *v39 = v27;
      v28 = (uint64_t)(v39 + 1);
      if (v31 == v32)
        goto LABEL_55;
    }
    else
    {
      v38 = 0;
      v39 = (_DWORD *)(4 * v34);
      *(_DWORD *)(4 * v34) = v27;
      v28 = 4 * v34 + 4;
      if (v31 == v32)
      {
LABEL_55:
        *((_QWORD *)this + 38) = v39;
        *((_QWORD *)this + 39) = v28;
        *((_QWORD *)this + 40) = &v38[4 * v37];
        if (v32)
          operator delete(v32);
        goto LABEL_31;
      }
    }
    v40 = v31 - 4 - v32;
    if (v40 < 0x2C)
      goto LABEL_63;
    if ((unint64_t)(v31 - &v38[v33]) < 0x20)
      goto LABEL_63;
    v41 = (v40 >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v31[-v42];
    v39 = (_DWORD *)((char *)v39 - v42);
    v44 = &v38[4 * v34 - 16];
    v45 = v31 - 16;
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 8;
    }
    while (v46);
    v31 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_63:
      do
      {
        v48 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--v39 = v48;
      }
      while (v31 != v32);
    }
    goto LABEL_55;
  }
}

void operations_research::sat::DratChecker::WatchClause(_QWORD *a1, int a2)
{
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  _DWORD *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BYTE *v42;
  _DWORD *v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  char *v55;
  uint64_t v56;

  v3 = (int *)(a1[12] + 4 * *(int *)(a1[1] + 56 * a2));
  v4 = a1[35] + 24 * *v3;
  v5 = (uint64_t *)(v4 + 8);
  v6 = *(char **)(v4 + 8);
  v7 = v6;
  v8 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v6 < v8)
  {
    *(_DWORD *)v6 = a2;
    v9 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  v10 = *(char **)v4;
  v11 = (uint64_t)&v6[-*(_QWORD *)v4];
  v12 = v11 >> 2;
  v13 = (v11 >> 2) + 1;
  if (v13 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = v8 - (_QWORD)v10;
  if (v14 >> 1 > v13)
    v13 = v14 >> 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    v55 = &v6[-*(_QWORD *)v4];
    v56 = a1[12] + 4 * *(int *)(a1[1] + 56 * a2);
    if (v15 >> 62)
      goto LABEL_44;
    v16 = a2;
    v17 = operator new(4 * v15);
    a2 = v16;
    v11 = (uint64_t)v55;
    v3 = (int *)v56;
    v18 = &v17[4 * v12];
    v19 = &v17[4 * v15];
    *v18 = a2;
    v9 = (uint64_t)(v18 + 1);
    v20 = v6 - v10;
    if (v6 == v10)
      goto LABEL_20;
    goto LABEL_14;
  }
  v17 = 0;
  v18 = (_DWORD *)(4 * v12);
  v19 = 0;
  *(_DWORD *)(4 * v12) = a2;
  v9 = 4 * v12 + 4;
  v20 = v6 - v10;
  if (v6 != v10)
  {
LABEL_14:
    v21 = v20 - 4;
    if (v21 < 0x2C)
      goto LABEL_49;
    if ((unint64_t)(v6 - v17 - v11) < 0x20)
      goto LABEL_49;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v23];
    v18 = (_DWORD *)((char *)v18 - v23);
    v24 = &v17[4 * v12 - 16];
    v25 = v6 - 16;
    v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        v28 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v18 = v28;
      }
      while (v7 != v10);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v18;
  *v5 = v9;
  *(_QWORD *)(v4 + 16) = v19;
  if (v10)
  {
    v29 = a2;
    operator delete(v10);
    a2 = v29;
  }
LABEL_22:
  *v5 = v9;
  v30 = a1[35] + 24 * v3[1];
  v31 = (uint64_t *)(v30 + 8);
  v32 = *(char **)(v30 + 8);
  v33 = *(_QWORD *)(v30 + 16);
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a2;
    v34 = (uint64_t)(v32 + 4);
    goto LABEL_43;
  }
  v35 = *(char **)v30;
  v36 = (uint64_t)&v32[-*(_QWORD *)v30];
  v37 = v36 >> 2;
  v38 = (v36 >> 2) + 1;
  if (v38 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v39 = v33 - (_QWORD)v35;
  if (v39 >> 1 > v38)
    v38 = v39 >> 1;
  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
    v40 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v40 = v38;
  if (!v40)
  {
    v42 = 0;
    v43 = (_DWORD *)(4 * v37);
    v44 = 0;
    *(_DWORD *)(4 * v37) = a2;
    v34 = 4 * v37 + 4;
    v45 = v32 - v35;
    if (v32 == v35)
      goto LABEL_41;
LABEL_35:
    v46 = v45 - 4;
    if (v46 < 0x2C)
      goto LABEL_50;
    if ((unint64_t)(v32 - &v42[v36]) < 0x20)
      goto LABEL_50;
    v47 = (v46 >> 2) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v49 = &v32[-v48];
    v43 = (_DWORD *)((char *)v43 - v48);
    v50 = &v42[4 * v37 - 16];
    v51 = v32 - 16;
    v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 8;
    }
    while (v52);
    v32 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_50:
      do
      {
        v54 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--v43 = v54;
      }
      while (v32 != v35);
    }
    goto LABEL_41;
  }
  if (v40 >> 62)
LABEL_44:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v41 = a2;
  v42 = operator new(4 * v40);
  v43 = &v42[4 * v37];
  v44 = &v42[4 * v40];
  *v43 = v41;
  v34 = (uint64_t)(v43 + 1);
  v45 = v32 - v35;
  if (v32 != v35)
    goto LABEL_35;
LABEL_41:
  *(_QWORD *)v30 = v43;
  *v31 = v34;
  *(_QWORD *)(v30 + 16) = v44;
  if (v35)
    operator delete(v35);
LABEL_43:
  *v31 = v34;
}

uint64_t operations_research::sat::DratChecker::HasRupProperty(_QWORD *a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _DWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t result;
  uint64_t v95;
  int v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  int *v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int *v107;
  int *v108;
  uint64_t v109;
  int *v110;
  int v111;
  char **v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  int *v116;
  void **v117;
  char **v118;
  unint64_t v119;

  if (!a4)
  {
    v11 = -1;
    v13 = (int *)a1[38];
    v12 = (int *)a1[39];
    if (v13 == v12)
      goto LABEL_61;
    goto LABEL_11;
  }
  v7 = 4 * a4 - 4;
  do
  {
    v8 = *a3++;
    v9 = operations_research::sat::DratChecker::AssignAndPropagate(a1, a2, v8 ^ 1u, -1);
    v10 = v9 != -1 || v7 == 0;
    v7 -= 4;
  }
  while (!v10);
  v11 = v9;
  v13 = (int *)a1[38];
  v12 = (int *)a1[39];
  if (v13 != v12)
  {
LABEL_11:
    v116 = v12;
    v118 = (char **)(a1 + 29);
    v112 = (char **)(a1 + 32);
    while (1)
    {
      v14 = *v13;
      if ((int)v14 >= a2)
        goto LABEL_13;
      v15 = a1[1];
      if (*(_DWORD *)(v15 + 56 * (int)v14 + 16) <= a2)
        goto LABEL_13;
      v16 = v14 << 32;
      v17 = *(unsigned int *)(a1[12] + 4 * *(int *)(v15 + 56 * (int)v14));
      if (!*(_BYTE *)(v15 + 56 * (int)v14 + 48))
        break;
      v19 = (char *)a1[30];
      v18 = a1[31];
      if ((unint64_t)v19 >= v18)
      {
        v20 = *v118;
        v21 = v19 - *v118;
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        v113 = v23;
        if (v23)
        {
          if (v23 >> 61)
            goto LABEL_120;
          v25 = operator new(8 * v23);
          v26 = (uint64_t *)&v25[8 * v22];
          *v26 = v16 | v17;
          v27 = (uint64_t)(v26 + 1);
          if (v19 == v20)
            goto LABEL_46;
LABEL_39:
          v38 = v19 - 8 - v20;
          if (v38 < 0x58)
            goto LABEL_126;
          if ((unint64_t)(v19 - &v25[v21]) < 0x20)
            goto LABEL_126;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v19[-v40];
          v26 = (uint64_t *)((char *)v26 - v40);
          v42 = &v25[8 * v22 - 16];
          v43 = v19 - 16;
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          v19 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_126:
            do
            {
              v46 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *--v26 = v46;
            }
            while (v19 != v20);
          }
          v19 = *v118;
        }
        else
        {
          v25 = 0;
          v26 = (uint64_t *)(8 * v22);
          *(_QWORD *)(8 * v22) = v16 | v17;
          v27 = 8 * v22 + 8;
          if (v19 != v20)
            goto LABEL_39;
        }
LABEL_46:
        a1[29] = v26;
        a1[30] = v27;
        a1[31] = &v25[8 * v113];
        if (v19)
          operator delete(v19);
        v12 = v116;
        a1[30] = v27;
        goto LABEL_13;
      }
      *(_QWORD *)v19 = v16 | v17;
      a1[30] = v19 + 8;
LABEL_13:
      if (++v13 == v12)
        goto LABEL_61;
    }
    v29 = (char *)a1[33];
    v28 = a1[34];
    if ((unint64_t)v29 < v28)
    {
      *(_QWORD *)v29 = v16 | v17;
      v30 = (uint64_t)(v29 + 8);
LABEL_60:
      a1[33] = v30;
      goto LABEL_13;
    }
    v31 = *v112;
    v32 = v29 - *v112;
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = v28 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    v114 = v34;
    if (v34)
    {
      if (v34 >> 61)
LABEL_120:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v36 = operator new(8 * v34);
      v37 = (uint64_t *)&v36[8 * v33];
      *v37 = v16 | v17;
      v30 = (uint64_t)(v37 + 1);
      if (v29 == v31)
        goto LABEL_57;
    }
    else
    {
      v36 = 0;
      v37 = (uint64_t *)(8 * v33);
      *(_QWORD *)(8 * v33) = v16 | v17;
      v30 = 8 * v33 + 8;
      if (v29 == v31)
      {
LABEL_57:
        a1[32] = v37;
        a1[33] = v30;
        a1[34] = &v36[8 * v114];
        if (v29)
          operator delete(v29);
        v12 = v116;
        goto LABEL_60;
      }
    }
    v47 = v29 - 8 - v31;
    if (v47 < 0x58)
      goto LABEL_127;
    if ((unint64_t)(v29 - &v36[v32]) < 0x20)
      goto LABEL_127;
    v48 = (v47 >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v29[-v49];
    v37 = (uint64_t *)((char *)v37 - v49);
    v51 = &v36[8 * v33 - 16];
    v52 = (__int128 *)(v29 - 16);
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *v52;
      *(v51 - 1) = *(v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 2;
      v53 -= 4;
    }
    while (v53);
    v29 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_127:
      do
      {
        v55 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v37 = v55;
      }
      while (v29 != v31);
    }
    v29 = *v112;
    goto LABEL_57;
  }
LABEL_61:
  v56 = a1 + 32;
  v115 = a2;
  v117 = (void **)(a1 + 41);
  v57 = a1[29];
  if (v57 != a1[30])
    goto LABEL_65;
LABEL_67:
  while (2)
  {
    v59 = a1[32] != a1[33] && v11 == -1;
    v58 = v56;
    LODWORD(v60) = v11;
    if (v59)
    {
      while (1)
      {
        v61 = v58[1];
        v62 = *(_QWORD *)(v61 - 8);
        v60 = HIDWORD(v62);
        v58[1] = v61 - 8;
        v63 = *(_QWORD *)(a1[20] + (((unint64_t)(int)v62 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v63 >> (v62 & 0x3E)) & 3) == 0)
          break;
        v11 = -1;
        if (((v63 >> (v62 & 0x3F ^ 1)) & 1) != 0)
          goto LABEL_97;
        v57 = a1[29];
        if (v57 == a1[30])
          goto LABEL_67;
LABEL_65:
        v58 = a1 + 29;
        if (v11 != -1)
          goto LABEL_98;
      }
      v65 = (char *)a1[42];
      v64 = a1[43];
      if ((unint64_t)v65 < v64)
      {
        *(_DWORD *)v65 = HIDWORD(v62);
        v66 = (uint64_t)(v65 + 4);
        goto LABEL_95;
      }
      v67 = v56;
      v68 = (char *)*v117;
      v69 = v65 - (_BYTE *)*v117;
      v70 = v69 >> 2;
      v71 = (v69 >> 2) + 1;
      if (v71 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v72 = v64 - (_QWORD)v68;
      if (v72 >> 1 > v71)
        v71 = v72 >> 1;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      v119 = v71;
      if (v71)
      {
        if (v71 >> 62)
          goto LABEL_120;
        v73 = operator new(4 * v71);
        v74 = &v73[4 * v70];
        *v74 = HIDWORD(v62);
        v66 = (uint64_t)(v74 + 1);
        if (v65 != v68)
          goto LABEL_83;
      }
      else
      {
        v73 = 0;
        v74 = (_DWORD *)(4 * v70);
        *(_DWORD *)(4 * v70) = HIDWORD(v62);
        v66 = 4 * v70 + 4;
        if (v65 != v68)
        {
LABEL_83:
          v75 = v65 - 4 - v68;
          if (v75 >= 0x2C)
          {
            v76 = v65 - &v73[v69];
            v56 = v67;
            if (v76 >= 0x20)
            {
              v77 = (v75 >> 2) + 1;
              v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
              v79 = &v65[-v78];
              v74 = (_DWORD *)((char *)v74 - v78);
              v80 = &v73[4 * v70 - 16];
              v81 = v65 - 16;
              v82 = v77 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v83 = *(_OWORD *)v81;
                *(v80 - 1) = *((_OWORD *)v81 - 1);
                *v80 = v83;
                v80 -= 2;
                v81 -= 32;
                v82 -= 8;
              }
              while (v82);
              v65 = v79;
              if (v77 == (v77 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_92;
            }
          }
          else
          {
            v56 = v67;
          }
          do
          {
            v84 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--v74 = v84;
          }
          while (v65 != v68);
LABEL_92:
          a1[41] = v74;
          a1[42] = v66;
          a1[43] = &v73[4 * v119];
          if (v68)
            operator delete(v68);
          a2 = v115;
LABEL_95:
          a1[42] = v66;
          v11 = operations_research::sat::DratChecker::AssignAndPropagate(a1, a2, v62, SHIDWORD(v62));
          v57 = a1[29];
          if (v57 == a1[30])
            continue;
          goto LABEL_65;
        }
      }
      v56 = v67;
      goto LABEL_92;
    }
    break;
  }
LABEL_97:
  v11 = v60;
  if ((_DWORD)v60 == -1)
  {
    result = 0;
    v107 = (int *)a1[16];
    v108 = (int *)a1[17];
    if (v107 == v108)
      goto LABEL_117;
    goto LABEL_115;
  }
LABEL_98:
  v85 = a1[1];
  v86 = (int *)(v85 + 56 * v11);
  *((_BYTE *)v86 + 48) = 1;
  v87 = a1[12];
  v88 = v86[1];
  if ((_DWORD)v88)
  {
    v89 = (int *)(v87 + 4 * *v86);
    v90 = a1[26];
    v91 = 4 * v88;
    do
    {
      v92 = *(_DWORD *)(v90 + 4 * (*v89 >> 1));
      if (v92 != -1)
        *(_BYTE *)(v85 + 56 * v92 + 49) = 1;
      ++v89;
      v91 -= 4;
    }
    while (v91);
  }
  v93 = a1[41];
  result = 1;
  v95 = ((unint64_t)(a1[42] - v93) >> 2) - 1;
  if ((int)v95 >= 0)
  {
    do
    {
      v97 = *(_DWORD *)(v93 + 4 * v95);
      v98 = v85 + 56 * v97;
      v100 = *(unsigned __int8 *)(v98 + 49);
      v99 = (_BYTE *)(v98 + 49);
      if (v100)
      {
        v101 = (int *)(v85 + 56 * v97);
        *((_BYTE *)v101 + 48) = 1;
        v102 = v101[1];
        if ((_DWORD)v102)
        {
          v103 = (int *)(v87 + 4 * *v101);
          v104 = a1[26];
          v105 = 4 * v102;
          do
          {
            v106 = *(_DWORD *)(v104 + 4 * (*v103 >> 1));
            if (v106 != -1)
              *(_BYTE *)(v85 + 56 * v106 + 49) = 1;
            ++v103;
            v105 -= 4;
          }
          while (v105);
        }
        *v99 = 0;
      }
    }
    while (v95-- > 0);
    result = 1;
  }
  v107 = (int *)a1[16];
  v108 = (int *)a1[17];
  if (v107 != v108)
  {
LABEL_115:
    v109 = a1[20];
    v110 = v107;
    do
    {
      v111 = *v110++;
      *(_QWORD *)(v109 + (((unint64_t)v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v111 & 0x3E));
    }
    while (v110 != v108);
  }
LABEL_117:
  a1[17] = v107;
  a1[30] = v57;
  a1[33] = a1[32];
  a1[42] = a1[41];
  return result;
}

uint64_t operations_research::sat::Resolve(int *a1, uint64_t a2, int *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v10;
  char *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  int *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *v64;
  int *v65;
  int v66;
  unint64_t v68;
  unint64_t v69;

  v7 = a7;
  v10 = a1;
  v11 = *(char **)a7;
  *(_QWORD *)(a7 + 8) = *(_QWORD *)a7;
  v66 = a5;
  if (a2)
  {
    v12 = a1;
    v13 = &a1[a2];
    v64 = v13;
    while (1)
    {
      v15 = *v12;
      if (*v12 == a5)
        goto LABEL_5;
      *(_QWORD *)(*(_QWORD *)(a6 + 8) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v11 >= v16)
        break;
      *(_DWORD *)v11 = v15;
      v14 = (uint64_t)(v11 + 4);
LABEL_4:
      *(_QWORD *)(v7 + 8) = v14;
      v11 = (char *)v14;
LABEL_5:
      if (++v12 == v13)
        goto LABEL_32;
    }
    v17 = a6;
    v18 = *(char **)v7;
    v19 = (uint64_t)&v11[-*(_QWORD *)v7];
    v20 = v19 >> 2;
    v21 = (v19 >> 2) + 1;
    if (v21 >> 62)
LABEL_75:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = v16 - (_QWORD)v18;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    v68 = v21;
    if (v21)
    {
      if (v21 >> 62)
LABEL_76:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(4 * v21);
      v24 = &v23[4 * v20];
      *v24 = v15;
      v14 = (uint64_t)(v24 + 1);
      if (v11 != v18)
      {
LABEL_16:
        v25 = v11 - 4 - v18;
        if (v25 >= 0xBC
          && &v23[v19 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] <= &v23[v19 - 4]
          && &v11[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v11 - 4
          && (unint64_t)(v11 - &v23[v19]) >= 0x20)
        {
          v29 = (v25 >> 2) + 1;
          v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
          v26 = &v11[-v30];
          v24 = (_DWORD *)((char *)v24 - v30);
          v31 = &v23[4 * v20 - 16];
          v32 = v11 - 16;
          v33 = v29 & 0x7FFFFFFFFFFFFFF8;
          a6 = v17;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 8;
          }
          while (v33);
          v7 = a7;
          v27 = v68;
          if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            *(_QWORD *)v7 = v24;
            *(_QWORD *)(v7 + 8) = v14;
            *(_QWORD *)(v7 + 16) = &v23[4 * v27];
            if (!v18)
            {
LABEL_24:
              v13 = v64;
              a5 = v66;
              goto LABEL_4;
            }
LABEL_23:
            operator delete(v18);
            goto LABEL_24;
          }
        }
        else
        {
          v26 = v11;
          a6 = v17;
          v7 = a7;
          v27 = v68;
        }
        do
        {
          v28 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *--v24 = v28;
        }
        while (v26 != v18);
        goto LABEL_22;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v15;
      v14 = 4 * v20 + 4;
      if (v11 != v18)
        goto LABEL_16;
    }
    a6 = v17;
    v7 = a7;
    *(_QWORD *)a7 = v24;
    *(_QWORD *)(a7 + 8) = v14;
    *(_QWORD *)(a7 + 16) = &v23[4 * v68];
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_32:
  if (!a4)
  {
    result = 1;
    v59 = a2;
    if (a2)
      goto LABEL_70;
    return result;
  }
  v35 = a5 ^ 1;
  v36 = &a3[a4];
  v65 = v36;
  while (1)
  {
    v38 = *a3;
    if (*a3 == v35)
      goto LABEL_36;
    v39 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v39 >> (v38 & 0x3F ^ 1u)) & 1) != 0)
      break;
    if (((v39 >> (v38 & 0x3E)) & 3) != 0)
      goto LABEL_36;
    v40 = *(_QWORD *)(v7 + 16);
    if ((unint64_t)v11 >= v40)
    {
      v41 = *(char **)v7;
      v42 = (uint64_t)&v11[-*(_QWORD *)v7];
      v43 = v42 >> 2;
      v44 = (v42 >> 2) + 1;
      if (v44 >> 62)
        goto LABEL_75;
      v45 = v40 - (_QWORD)v41;
      if (v45 >> 1 > v44)
        v44 = v45 >> 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      v69 = v44;
      if (v44)
      {
        if (v44 >> 62)
          goto LABEL_76;
        v46 = operator new(4 * v44);
        v47 = &v46[4 * v43];
        *v47 = v38;
        v37 = (uint64_t)(v47 + 1);
        if (v11 != v41)
        {
LABEL_49:
          v48 = v11 - 4 - v41;
          if (v48 < 0xBC
            || &v46[v42 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v46[v42 - 4]
            || &v11[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4
            || (unint64_t)(v11 - v46 - v42) < 0x20)
          {
            v49 = v11;
            v7 = a7;
            v50 = v69;
          }
          else
          {
            v52 = (v48 >> 2) + 1;
            v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
            v49 = &v11[-v53];
            v47 = (_DWORD *)((char *)v47 - v53);
            v54 = &v46[4 * v43 - 16];
            v55 = v11 - 16;
            v56 = v52 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 8;
            }
            while (v56);
            v7 = a7;
            v50 = v69;
            if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_52:
              *(_QWORD *)v7 = v47;
              *(_QWORD *)(v7 + 8) = v37;
              *(_QWORD *)(v7 + 16) = &v46[4 * v50];
              if (v41)
                goto LABEL_53;
              goto LABEL_54;
            }
          }
          do
          {
            v51 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--v47 = v51;
          }
          while (v49 != v41);
          goto LABEL_52;
        }
      }
      else
      {
        v46 = 0;
        v47 = (_DWORD *)(4 * v43);
        *(_DWORD *)(4 * v43) = v38;
        v37 = 4 * v43 + 4;
        if (v11 != v41)
          goto LABEL_49;
      }
      v7 = a7;
      *(_QWORD *)a7 = v47;
      *(_QWORD *)(a7 + 8) = v37;
      *(_QWORD *)(a7 + 16) = &v46[4 * v69];
      if (v41)
LABEL_53:
        operator delete(v41);
LABEL_54:
      v36 = v65;
      goto LABEL_35;
    }
    *(_DWORD *)v11 = v38;
    v37 = (uint64_t)(v11 + 4);
LABEL_35:
    *(_QWORD *)(v7 + 8) = v37;
    v11 = (char *)v37;
LABEL_36:
    if (++a3 == v36)
    {
      result = 1;
      goto LABEL_69;
    }
  }
  result = 0;
LABEL_69:
  a5 = v66;
  v59 = a2;
  if (a2)
  {
LABEL_70:
    v60 = 4 * v59;
    do
    {
      v61 = *v10;
      if ((_DWORD)v61 != a5)
        *(_QWORD *)(*(_QWORD *)(a6 + 8) + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v61 & 0x3E));
      ++v10;
      v60 -= 4;
    }
    while (v60);
  }
  return result;
}

void operations_research::sat::DratChecker::LogStatistics(operations_research::sat::DratChecker *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE v13[16];

  v1 = *((_QWORD *)this + 1);
  if ((int)(-1227133513 * ((*((_QWORD *)this + 2) - v1) >> 3)) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = -1227133513 * ((*((_QWORD *)this + 2) - v1) >> 3);
    v6 = (unsigned __int8 *)(v1 + 48);
    do
    {
      v7 = *v6;
      v6 += 56;
      if (v7)
      {
        if (v2 < *(int *)this)
          ++v3;
        else
          ++v4;
      }
      ++v2;
    }
    while (v5 != v2);
  }
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 450);
  google::LogMessage::stream((google::LogMessage *)v13);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" problem clauses needed for proof, out of ", 42);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 453);
  google::LogMessage::stream((google::LogMessage *)v13);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" infered clauses needed for proof, out of ", 42);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 456);
  google::LogMessage::stream((google::LogMessage *)v13);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" RAT infered clauses", 20);
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 457);
  v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"verification time: ", 19);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" s", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
}

void sub_22DB5275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB52770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB52784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB52798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::DratChecker::AssignAndPropagate(_QWORD *a1, int a2, int a3, int a4)
{
  unint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  int *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  std::vector<int> *v30;
  int *begin;
  std::vector<int>::pointer *p_end;
  int *end;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v118;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char **v134;
  std::vector<int>::pointer *v135;
  std::vector<int>::pointer *v136;
  std::vector<int>::pointer *v137;
  char **v138;

  v9 = (int *)a1[17];
  v8 = a1[18];
  v10 = v9;
  if ((unint64_t)v9 >= v8)
  {
    v12 = (int *)a1[16];
    v13 = v9 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = v8 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
LABEL_112:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(4 * v16);
      v18 = (int *)&v17[4 * v13];
      v19 = &v17[4 * v16];
      *v18 = a3;
      v11 = (uint64_t)(v18 + 1);
      v20 = (char *)v9 - (char *)v12;
      if (v9 == v12)
        goto LABEL_20;
    }
    else
    {
      v17 = 0;
      v18 = (int *)(4 * v13);
      v19 = 0;
      *(_DWORD *)(4 * v13) = a3;
      v11 = 4 * v13 + 4;
      v20 = (char *)v9 - (char *)v12;
      if (v9 == v12)
      {
LABEL_20:
        a1[16] = v18;
        a1[17] = v11;
        a1[18] = v19;
        if (v12)
          operator delete(v12);
        goto LABEL_22;
      }
    }
    v21 = v20 - 4;
    if (v21 < 0x2C)
      goto LABEL_119;
    if ((unint64_t)((char *)v12 - v17) < 0x20)
      goto LABEL_119;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v10 = &v9[v23 / 0xFFFFFFFFFFFFFFFCLL];
    v18 = (int *)((char *)v18 - v23);
    v24 = &v17[4 * v13 - 16];
    v25 = v9 - 4;
    v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_119:
      do
      {
        v28 = *--v10;
        *--v18 = v28;
      }
      while (v10 != v12);
    }
    goto LABEL_20;
  }
  *v9 = a3;
  v11 = (uint64_t)(v9 + 1);
LABEL_22:
  *(_QWORD *)(a1[20] + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
  *(_DWORD *)(a1[26] + 4 * (a3 >> 1)) = a4;
  a1[17] = v11;
  v29 = a3 ^ 1;
  v30 = (std::vector<int> *)(a1[35] + 24 * (int)v29);
  begin = v30->__begin_;
  p_end = &v30->__end_;
  end = v30->__end_;
  if (v30->__begin_ == end)
  {
    v35 = 0xFFFFFFFFLL;
    v116 = 0;
    v118 = 1;
    goto LABEL_109;
  }
  v34 = 0;
  v138 = (char **)(a1 + 29);
  v134 = (char **)(a1 + 32);
  v35 = 0xFFFFFFFFLL;
  do
  {
    v37 = *begin;
    if ((int)v37 >= a2)
      goto LABEL_27;
    if ((_DWORD)v35 != -1)
      goto LABEL_25;
    v38 = a1[1];
    v39 = a1[12];
    v40 = *(int *)(v38 + 56 * (int)v37);
    v41 = (_DWORD *)(v39 + 4 * v40);
    v42 = *v41 ^ v41[1] ^ v29;
    v43 = a1[20];
    v44 = *(_QWORD *)(v43 + (((unint64_t)(int)v42 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v44 >> ((*(_BYTE *)v41 ^ *((_BYTE *)v41 + 4)) ^ v29)) & 1) != 0)
    {
      v30->__begin_[v34] = v37;
      v36 = v34 + 1;
      v35 = 0xFFFFFFFFLL;
      goto LABEL_26;
    }
    v45 = *(unsigned int *)(v38 + 56 * (int)v37 + 4);
    if ((int)v45 < 3)
    {
LABEL_24:
      v35 = *begin;
      if (((v44 >> ((*(_BYTE *)v41 ^ *((_BYTE *)v41 + 4) ^ v29) & 0x3F ^ 1)) & 1) != 0)
      {
LABEL_25:
        v30->__begin_[v34] = v37;
        v36 = v34 + 1;
LABEL_26:
        v34 = v36;
        goto LABEL_27;
      }
      v49 = v37 << 32;
      if (*(_BYTE *)(v38 + 56 * (int)v37 + 48))
      {
        v51 = (char *)a1[30];
        v50 = a1[31];
        if ((unint64_t)v51 < v50)
        {
          *(_QWORD *)v51 = v49 | v42;
          a1[30] = v51 + 8;
LABEL_105:
          v35 = 0xFFFFFFFFLL;
          goto LABEL_25;
        }
        v69 = *v138;
        v70 = v51 - *v138;
        v71 = v70 >> 3;
        v72 = (v70 >> 3) + 1;
        if (v72 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v73 = v50 - (_QWORD)v69;
        if (v73 >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        v136 = p_end;
        v132 = v72;
        if (v72)
        {
          v122 = (char *)(v51 - *v138);
          v125 = v70 >> 3;
          v129 = v29;
          if (v72 >> 61)
            goto LABEL_112;
          v74 = operator new(8 * v72);
          v29 = v129;
          v70 = (uint64_t)v122;
          v71 = v125;
          v75 = (uint64_t *)&v74[8 * v125];
          *v75 = (v37 << 32) | v42;
          v76 = (uint64_t)(v75 + 1);
          if (v51 == v69)
            goto LABEL_90;
LABEL_83:
          v96 = v51 - 8 - v69;
          if (v96 < 0x58)
            goto LABEL_120;
          if ((unint64_t)(v51 - &v74[v70]) < 0x20)
            goto LABEL_120;
          v97 = (v96 >> 3) + 1;
          v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
          v99 = &v51[-v98];
          v75 = (uint64_t *)((char *)v75 - v98);
          v100 = &v74[8 * v71 - 16];
          v101 = v51 - 16;
          v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v103 = *(_OWORD *)v101;
            *(v100 - 1) = *((_OWORD *)v101 - 1);
            *v100 = v103;
            v100 -= 2;
            v101 -= 32;
            v102 -= 4;
          }
          while (v102);
          v51 = v99;
          if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_120:
            do
            {
              v104 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *--v75 = v104;
            }
            while (v51 != v69);
          }
          v51 = *v138;
        }
        else
        {
          v74 = 0;
          v75 = (uint64_t *)(8 * v71);
          *(_QWORD *)(8 * v71) = v49 | v42;
          v76 = 8 * v71 + 8;
          if (v51 != v69)
            goto LABEL_83;
        }
LABEL_90:
        a1[29] = v75;
        a1[30] = v76;
        a1[31] = &v74[8 * v132];
        if (v51)
        {
          v105 = v29;
          operator delete(v51);
          v29 = v105;
        }
        p_end = v136;
        a1[30] = v76;
        goto LABEL_105;
      }
      v67 = (char *)a1[33];
      v66 = a1[34];
      if ((unint64_t)v67 < v66)
      {
        *(_QWORD *)v67 = v49 | v42;
        v68 = (uint64_t)(v67 + 8);
LABEL_104:
        a1[33] = v68;
        goto LABEL_105;
      }
      v77 = *v134;
      v78 = v67 - *v134;
      v79 = v78 >> 3;
      v80 = (v78 >> 3) + 1;
      if (v80 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v81 = v66 - (_QWORD)v77;
      if (v81 >> 2 > v80)
        v80 = v81 >> 2;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      v137 = p_end;
      v133 = v80;
      if (v80)
      {
        v123 = (char *)(v67 - *v134);
        v126 = v78 >> 3;
        v130 = v29;
        if (v80 >> 61)
          goto LABEL_112;
        v82 = operator new(8 * v80);
        v29 = v130;
        v78 = (uint64_t)v123;
        v79 = v126;
        v83 = (uint64_t *)&v82[8 * v126];
        *v83 = (v37 << 32) | v42;
        v68 = (uint64_t)(v83 + 1);
        if (v67 == v77)
          goto LABEL_101;
LABEL_94:
        v106 = v67 - 8 - v77;
        if (v106 < 0x58)
          goto LABEL_121;
        if ((unint64_t)(v67 - &v82[v78]) < 0x20)
          goto LABEL_121;
        v107 = (v106 >> 3) + 1;
        v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
        v109 = &v67[-v108];
        v83 = (uint64_t *)((char *)v83 - v108);
        v110 = &v82[8 * v79 - 16];
        v111 = v67 - 16;
        v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          *v110 = v113;
          v110 -= 2;
          v111 -= 32;
          v112 -= 4;
        }
        while (v112);
        v67 = v109;
        if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_121:
          do
          {
            v114 = *((_QWORD *)v67 - 1);
            v67 -= 8;
            *--v83 = v114;
          }
          while (v67 != v77);
        }
        v67 = *v134;
      }
      else
      {
        v82 = 0;
        v83 = (uint64_t *)(8 * v79);
        *(_QWORD *)(8 * v79) = v49 | v42;
        v68 = 8 * v79 + 8;
        if (v67 != v77)
          goto LABEL_94;
      }
LABEL_101:
      a1[32] = v83;
      a1[33] = v68;
      a1[34] = &v82[8 * v133];
      if (v67)
      {
        v115 = v29;
        operator delete(v67);
        v29 = v115;
      }
      p_end = v137;
      goto LABEL_104;
    }
    v46 = (int *)(v39 + 4 * v40 + 8);
    v47 = v45 - 2;
    while (1)
    {
      v48 = *v46;
      if (((*(_QWORD *)(v43 + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v48 & 0x3F ^ 1u)) & 1) == 0)
        break;
      ++v46;
      if (!--v47)
        goto LABEL_24;
    }
    *v41 = v42;
    v41[1] = v48;
    *v46 = v29;
    v52 = (_QWORD *)(a1[35] + 24 * (int)v41[1]);
    v54 = v52 + 1;
    v53 = (char *)v52[1];
    v56 = v52 + 2;
    v55 = v52[2];
    if ((unint64_t)v53 >= v55)
    {
      v58 = (char *)*v52;
      v59 = (uint64_t)&v53[-*v52];
      v60 = v59 >> 2;
      v61 = (v59 >> 2) + 1;
      if (v61 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v62 = v55 - (_QWORD)v58;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
        v61 = 0x3FFFFFFFFFFFFFFFLL;
      v135 = p_end;
      v131 = v61;
      if (v61)
      {
        v120 = &v53[-*v52];
        v121 = v59 >> 2;
        v124 = v52 + 2;
        v127 = a1[35] + 24 * (int)v41[1];
        v128 = v52 + 1;
        if (v61 >> 62)
          goto LABEL_112;
        v63 = v29;
        v64 = operator new(4 * v61);
        v29 = v63;
        v52 = (_QWORD *)v127;
        v54 = v128;
        v60 = v121;
        v56 = v124;
        v59 = (uint64_t)v120;
        v65 = &v64[4 * v121];
        *v65 = v37;
        v57 = (uint64_t)(v65 + 1);
        if (v53 == v58)
          goto LABEL_78;
      }
      else
      {
        v64 = 0;
        v65 = (_DWORD *)(4 * v60);
        *(_DWORD *)(4 * v60) = v37;
        v57 = 4 * v60 + 4;
        if (v53 == v58)
        {
LABEL_78:
          *v52 = v65;
          *v54 = v57;
          *v56 = &v64[4 * v131];
          if (v58)
          {
            v93 = v58;
            v94 = v29;
            v95 = v57;
            operator delete(v93);
            v57 = v95;
            v29 = v94;
          }
          p_end = v135;
          goto LABEL_81;
        }
      }
      v84 = v53 - 4 - v58;
      if (v84 < 0x2C)
        goto LABEL_122;
      if ((unint64_t)(v53 - &v64[v59]) < 0x20)
        goto LABEL_122;
      v85 = (v84 >> 2) + 1;
      v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
      v87 = &v53[-v86];
      v65 = (_DWORD *)((char *)v65 - v86);
      v88 = &v64[4 * v60 - 16];
      v89 = v53 - 16;
      v90 = v85 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v91 = *(_OWORD *)v89;
        *(v88 - 1) = *((_OWORD *)v89 - 1);
        *v88 = v91;
        v88 -= 2;
        v89 -= 32;
        v90 -= 8;
      }
      while (v90);
      v53 = v87;
      if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_122:
        do
        {
          v92 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *--v65 = v92;
        }
        while (v53 != v58);
      }
      goto LABEL_78;
    }
    *(_DWORD *)v53 = v37;
    v57 = (uint64_t)(v53 + 4);
LABEL_81:
    *v54 = v57;
    v35 = 0xFFFFFFFFLL;
LABEL_27:
    ++begin;
  }
  while (begin != end);
  begin = v30->__begin_;
  v116 = v34;
  v117 = *p_end - v30->__begin_;
  v118 = v34 >= v117;
  if (v34 > v117)
  {
    std::vector<int>::__append(v30, v34 - v117);
    return v35;
  }
LABEL_109:
  if (!v118)
    *p_end = &begin[v116];
  return v35;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(uint64_t *a1, int *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  unint64_t result;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  v3 = *a2;
  v4 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *a2);
  v5 = 0;
  v6 = ((unint64_t)*a1 >> 12) ^ (v4 >> 7);
  v7 = a1[3];
  while (1)
  {
    v8 = v6 & v7;
    v9 = *(_QWORD *)(*a1 + v8);
    v10 = ((v9 ^ (0x101010101010101 * (v4 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v4 & 0x7F))) & 0x8080808080808080;
    if (v10)
    {
      v11 = a1[7];
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 96);
      v14 = (int *)(v12 + 56 * v3);
      v15 = v14[1];
      do
      {
        result = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
        v17 = (int *)(v12 + 56 * *(int *)(a1[1] + 4 * result));
        v18 = v17[1];
        if ((_DWORD)v18 == v15)
        {
          if (!v15)
            return result;
          v19 = (_DWORD *)(v13 + 4 * *v17);
          v20 = (_DWORD *)(v13 + 4 * *v14);
          v21 = 4 * v18;
          while (*v19 == *v20)
          {
            ++v19;
            ++v20;
            v21 -= 4;
            if (!v21)
              return result;
          }
        }
        v10 &= v10 - 1;
      }
      while (v10);
    }
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
      break;
    v5 += 8;
    v6 = v5 + v8;
  }
  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::prepare_insert(a1, v4);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::rehash_and_grow_if_necessary(a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::rehash_and_grow_if_necessary(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (a1[2] > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::resize(a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::drop_deletes_without_resize((unint64_t)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::resize(uint64_t *a1, char *a2)
{
  unint64_t v2;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = (char *)a1[1];
  v6 = (char *)a1[3];
  a1[3] = (uint64_t)a2;
  if (!v5)
  {
    v7 = (char *)a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 4 * v2);
  *a1 = (uint64_t)v8;
  a1[1] = (uint64_t)&v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = (char *)a1[2];
  a1[5] = v9 - (_QWORD)v10;
  v11 = (char *)a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v21 = (char *)a1[4];
    if (!v21)
      return;
LABEL_21:
    *((_QWORD *)v21 + 4) = v13 >> 3;
    *((_QWORD *)v21 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[v4] & 0x80000000) == 0)
    {
      v16 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *(_DWORD *)&v5[4 * (_QWORD)v12]);
      v17 = (char *)*a1;
      v18 = (char *)a1[3];
      v19 = (((unint64_t)*a1 >> 12) ^ (v16 >> 7)) & (unint64_t)v18;
      v20 = *(_QWORD *)(*a1 + v19) & (~*(_QWORD *)(*a1 + v19) << 7) & 0x8080808080808080;
      if (v20)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v19 = (v14 + v19) & (unint64_t)v18;
          v20 = *(_QWORD *)&v17[v19] & (~*(_QWORD *)&v17[v19] << 7) & 0x8080808080808080;
        }
        while (!v20);
      }
      v15 = (v19 + (__clz(__rbit64(v20)) >> 3)) & (unint64_t)v18;
      v13 += v14;
      v17[v15] = v16 & 0x7F;
      *(_BYTE *)((a1[3] & 7) + *a1 + ((v15 - 8) & a1[3]) + 1) = v16 & 0x7F;
      *(_DWORD *)(a1[1] + 4 * v15) = *(_DWORD *)&v5[4 * (_QWORD)v12];
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete((void *)v4);
  v21 = (char *)a1[4];
  if (v21)
    goto LABEL_21;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::drop_deletes_without_resize(unint64_t result)
{
  _QWORD *v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (_QWORD *)result;
  v2 = *(int8x16_t **)result;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)result + v3;
  if (v4 + 1 != *(_QWORD *)result)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)result;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(result + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v28 = *(_QWORD *)(result + 32);
    if (!v28)
      return result;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return result;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *v1;
    if (*(unsigned __int8 *)(*v1 + v15) == 254)
    {
      result = operations_research::sat::DratChecker::ClauseHash::operator()(v1 + 6, *(_DWORD *)(v1[1] + 4 * v15));
      v21 = ((result >> 7) ^ (v20 >> 12)) & v14;
      v22 = *(_QWORD *)(v20 + v21) & (~*(_QWORD *)(v20 + v21) << 7) & 0x8080808080808080;
      if (v22)
      {
        v17 = 0;
        v18 = ((result >> 7) ^ (v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((result >> 7) ^ (v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v22 = *(_QWORD *)(v20 + v18) & (~*(_QWORD *)(v20 + v18) << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      v19 = (v18 + (__clz(__rbit64(v22)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v21) ^ (v15 - v21)) & v14) > 7)
      {
        v23 = *(unsigned __int8 *)(v20 + v19);
        *(_BYTE *)(v20 + v19) = result & 0x7F;
        *(_BYTE *)((v1[3] & (v19 - 8)) + (v1[3] & 7) + *v1 + 1) = result & 0x7F;
        v24 = v1[1];
        if (v23 == 128)
        {
          *(_DWORD *)(v24 + 4 * v19) = *(_DWORD *)(v24 + 4 * v15);
          *(_BYTE *)(*v1 + v15) = 0x80;
          *(_BYTE *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = 0x80;
        }
        else
        {
          v25 = *(_DWORD *)(v24 + 4 * v15);
          v26 = 4 * v19;
          *(_DWORD *)(v24 + 4 * v15) = *(_DWORD *)(v24 + v26);
          *(_DWORD *)(v24 + v26) = v25;
          --v15;
        }
      }
      else
      {
        *(_BYTE *)(v20 + v15) = result & 0x7F;
        *(_BYTE *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = result & 0x7F;
      }
    }
    ++v15;
    v14 = v1[3];
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  v1[5] = v27 - v1[2];
  v28 = v1[4];
  if (v28)
    goto LABEL_26;
  return result;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB53794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

char *std::vector<operations_research::sat::DratChecker::Clause>::__push_back_slow_path<operations_research::sat::DratChecker::Clause>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  void *v19;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v4;
  if (v5 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_WORD *)v9 + 24) = *(_WORD *)(a2 + 48);
  v11 = v9 + 56;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13)
      return v11;
    goto LABEL_18;
  }
  v14 = 0;
  do
  {
    v15 = &v9[v14];
    v16 = &v13[v14];
    v17 = *(_OWORD *)&v13[v14 - 56];
    *((_DWORD *)v15 - 10) = *(_DWORD *)&v13[v14 - 40];
    *(_OWORD *)(v15 - 56) = v17;
    *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
    *((_QWORD *)v15 - 2) = *(_QWORD *)&v13[v14 - 16];
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *((_WORD *)v15 - 4) = *(_WORD *)&v13[v14 - 8];
    v14 -= 56;
  }
  while (&v13[v14] != v12);
  v18 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v18)
  {
    do
    {
      v19 = (void *)*((_QWORD *)v13 - 4);
      if (v19)
      {
        *((_QWORD *)v13 - 3) = v19;
        operator delete(v19);
      }
      v13 -= 56;
    }
    while (v13 != v18);
    v13 = v18;
  }
  if (v13)
LABEL_18:
    operator delete(v13);
  return v11;
}

operations_research::sat::DratProofHandler *operations_research::sat::DratProofHandler::DratProofHandler(operations_research::sat::DratProofHandler *this)
{
  operations_research::sat::DratChecker *v2;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v2 = (operations_research::sat::DratChecker *)operator new();
  operations_research::sat::DratChecker::DratChecker(v2);
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_22DB539C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v4 = v2;
  MEMORY[0x22E31DF78](v4, 0x1070C400E70C037);
  v6 = (void *)v1[4];
  if (v6)
  {
    v1[5] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[2] = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

operations_research::sat::DratProofHandler *operations_research::sat::DratProofHandler::DratProofHandler(operations_research::sat::DratProofHandler *this, char a2, File *a3, int a4)
{
  operations_research::sat::DratChecker **v8;
  uint64_t v9;
  operations_research::sat::DratChecker *v10;
  operations_research::sat::DratChecker *v11;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 7) = 0;
  v8 = (operations_research::sat::DratChecker **)((char *)this + 56);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v9 = operator new();
  *(_BYTE *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *((_QWORD *)this + 8) = v9;
  if (a4)
  {
    v10 = (operations_research::sat::DratChecker *)operator new();
    operations_research::sat::DratChecker::DratChecker(v10);
    v11 = *v8;
    *v8 = v10;
    if (v11)
    {
      operations_research::sat::DratChecker::~DratChecker(v11);
      MEMORY[0x22E31DF78]();
    }
  }
  return this;
}

void sub_22DB53AF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  operations_research::sat::DratChecker **v2;
  operations_research::sat::DratWriter **v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;

  MEMORY[0x22E31DF78](v4, 0x1070C400E70C037);
  std::unique_ptr<operations_research::sat::DratWriter>::~unique_ptr[abi:ne180100](v3);
  std::unique_ptr<operations_research::sat::DratChecker>::~unique_ptr[abi:ne180100](v2);
  v7 = (void *)v1[4];
  if (v7)
  {
    v1[5] = v7;
    operator delete(v7);
    v8 = *v5;
    if (!*v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v8 = *v5;
    if (!*v5)
      goto LABEL_3;
  }
  v1[2] = v8;
  operator delete(v8);
  _Unwind_Resume(a1);
}

operations_research::sat::DratChecker **std::unique_ptr<operations_research::sat::DratChecker>::~unique_ptr[abi:ne180100](operations_research::sat::DratChecker **a1)
{
  operations_research::sat::DratChecker *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratChecker::~DratChecker(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

operations_research::sat::DratWriter **std::unique_ptr<operations_research::sat::DratWriter>::~unique_ptr[abi:ne180100](operations_research::sat::DratWriter **a1)
{
  operations_research::sat::DratWriter *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratWriter::~DratWriter(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::DratProofHandler::ApplyMapping(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  std::vector<int>::pointer begin;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int *value;
  int *v16;
  int *v17;
  unint64_t v18[2];
  uint64_t *v19;
  std::vector<int> v20;

  v3 = 0uLL;
  memset(&v20, 0, sizeof(v20));
  v5 = *a2;
  v4 = a2[1];
  if ((int)((unint64_t)(v4 - *a2) >> 2) >= 1)
  {
    v7 = 0;
    while (1)
    {
      v10 = *(int *)(v5 + 4 * v7);
      if ((_DWORD)v10 != -1)
        break;
LABEL_15:
      if (++v7 >= (int)((unint64_t)(v4 - v5) >> 2))
      {
        v3 = *(_OWORD *)&v20.__begin_;
        value = v20.__end_cap_.__value_;
        goto LABEL_23;
      }
    }
    begin = v20.__begin_;
    v12 = v20.__end_ - v20.__begin_;
    if ((int)v10 >= (int)v12)
    {
      if (v10 + 1 <= v12)
      {
        if (v10 + 1 < v12)
          v20.__end_ = &v20.__begin_[v10 + 1];
      }
      else
      {
        std::vector<int>::__append(&v20, v10 + 1 - v12, &operations_research::sat::kNoBooleanVariable);
        begin = v20.__begin_;
      }
    }
    v13 = &begin[v10];
    if (*v13 == -1)
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (v7 >= (int)((unint64_t)(*(_QWORD *)(a1 + 40) - v14) >> 2))
        goto LABEL_13;
    }
    else
    {
      v19 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)v13, (int)&operations_research::sat::kNoBooleanVariable, "new_mapping[image] == kNoBooleanVariable");
      if (v19)
      {
        google::LogMessageFatal::LogMessageFatal(v18, (google::glog_internal_namespace_ *)"./ortools/sat/drat_proof_handler.cc", 45, &v19);
        google::LogMessage::stream((google::LogMessage *)v18);
LABEL_27:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
      }
      begin = v20.__begin_;
      v14 = *(_QWORD *)(a1 + 32);
      if (v7 >= (int)((unint64_t)(*(_QWORD *)(a1 + 40) - v14) >> 2))
      {
LABEL_13:
        v9 = &begin[v10];
        *v9 = v7;
        if ((_DWORD)v7 != -1)
          goto LABEL_14;
        goto LABEL_20;
      }
    }
    v8 = *(_DWORD *)(v14 + 4 * v7);
    v9 = &begin[v10];
    *v9 = v8;
    if (v8 != -1)
    {
LABEL_14:
      v5 = *a2;
      v4 = a2[1];
      goto LABEL_15;
    }
LABEL_20:
    v19 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)v9, (int)&operations_research::sat::kNoBooleanVariable, "new_mapping[image] != kNoBooleanVariable");
    if (v19)
    {
      google::LogMessageFatal::LogMessageFatal(v18, (google::glog_internal_namespace_ *)"./ortools/sat/drat_proof_handler.cc", 48, &v19);
      google::LogMessage::stream((google::LogMessage *)v18);
      goto LABEL_27;
    }
    goto LABEL_14;
  }
  value = 0;
LABEL_23:
  v17 = *(int **)(a1 + 48);
  v20.__begin_ = *(std::vector<int>::pointer *)(a1 + 32);
  v16 = v20.__begin_;
  v20.__end_cap_.__value_ = v17;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = value;
  if (v16)
  {
    v20.__end_ = v16;
    operator delete(v16);
  }
}

void sub_22DB53DF4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB53DFC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB53E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DratProofHandler::SetNumVariables(operations_research::sat::DratProofHandler *this, int a2)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7[2];
  int v8;
  uint64_t *v9;

  v8 = a2;
  v3 = (char *)this + 32;
  v4 = (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2;
  v7[0] = v4;
  v5 = a2;
  if (v4 <= a2)
  {
    if (v4 >= a2)
      return;
    goto LABEL_3;
  }
  v9 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v8, (int)v7, "num_variables >= reverse_mapping_.size()");
  if (v9)
  {
    google::LogMessageFatal::LogMessageFatal(v7, (google::glog_internal_namespace_ *)"./ortools/sat/drat_proof_handler.cc", 55, &v9);
    google::LogMessage::stream((google::LogMessage *)v7);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  while (v5 > (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2)
  {
LABEL_3:
    v6 = (*(_DWORD *)this)++;
    LODWORD(v7[0]) = v6;
    gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v3, v7);
  }
}

void sub_22DB53F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::DratProofHandler::AddOneVariable(operations_research::sat::DratProofHandler *this)
{
  int v1;
  int v2;

  v1 = (*(_DWORD *)this)++;
  v2 = v1;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)this + 32, &v2);
}

void operations_research::sat::DratProofHandler::AddProblemClause(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 56);
  if (v3)
    operations_research::sat::DratChecker::AddProblemClause(v3, a2, a3);
}

uint64_t operations_research::sat::DratProofHandler::AddClause(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  operations_research::sat::DratProofHandler::MapClause((_QWORD *)a1, a2, a3);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
    operations_research::sat::DratChecker::AddInferedClause(v4, *(char **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return operations_research::sat::DratWriter::AddClause();
  return result;
}

int *operations_research::sat::DratProofHandler::MapClause(_QWORD *a1, int *a2, uint64_t a3)
{
  int *v3;
  int *v4;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  int *v27;
  uint64_t v28;
  __int128 v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  void **v34;
  unint64_t v35[2];
  int v36;
  uint64_t *v37;

  v3 = (int *)a1[1];
  v34 = (void **)(a1 + 1);
  a1[2] = v3;
  if (a3)
  {
    v4 = a2;
    v6 = &a2[a3];
    while (1)
    {
      v7 = *v4;
      v8 = *v4 >> 1;
      v36 = v8;
      v9 = a1[4];
      v35[0] = (a1[5] - v9) >> 2;
      if (v8 >= SLODWORD(v35[0]))
      {
        v37 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,unsigned long>((int)&v36, (int)v35, "l.Variable() < reverse_mapping_.size()");
        if (v37)
        {
          google::LogMessageFatal::LogMessageFatal(v35, (google::glog_internal_namespace_ *)"./ortools/sat/drat_proof_handler.cc", 103, &v37);
          google::LogMessage::stream((google::LogMessage *)v35);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v35);
        }
        v10 = v7 & 1 | (2 * *(_DWORD *)(a1[4] + 4 * v8));
        v3 = (int *)a1[2];
        v11 = a1[3];
        if ((unint64_t)v3 < v11)
          goto LABEL_3;
LABEL_6:
        v12 = (int *)*v34;
        v13 = (char *)v3 - (_BYTE *)*v34;
        v14 = v13 >> 2;
        v15 = (v13 >> 2) + 1;
        if (v15 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v16 = v11 - (_QWORD)v12;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(4 * v17);
          v19 = (int *)&v18[4 * v14];
          *v19 = v10;
          v20 = (uint64_t)(v19 + 1);
          if (v3 == v12)
            goto LABEL_20;
        }
        else
        {
          v18 = 0;
          v19 = (int *)(4 * v14);
          *(_DWORD *)(4 * v14) = v10;
          v20 = 4 * v14 + 4;
          if (v3 == v12)
            goto LABEL_20;
        }
        v21 = (char *)(v3 - 1) - (char *)v12;
        if (v21 >= 0xBC)
        {
          if (&v18[v13 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v13 - 4])
          {
            v22 = v3;
          }
          else if ((int *)((char *)v3 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
          {
            v22 = v3;
          }
          else if ((unint64_t)((char *)v3 - &v18[v13]) >= 0x20)
          {
            v24 = (v21 >> 2) + 1;
            v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            v22 = &v3[v25 / 0xFFFFFFFFFFFFFFFCLL];
            v19 = (int *)((char *)v19 - v25);
            v26 = &v18[4 * v14 - 16];
            v27 = v3 - 4;
            v28 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v29 = *(_OWORD *)v27;
              *(v26 - 1) = *((_OWORD *)v27 - 1);
              *v26 = v29;
              v26 -= 2;
              v27 -= 8;
              v28 -= 8;
            }
            while (v28);
            if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_20;
          }
          else
          {
            v22 = v3;
          }
        }
        else
        {
          v22 = v3;
        }
        do
        {
          v23 = *--v22;
          *--v19 = v23;
        }
        while (v22 != v12);
LABEL_20:
        a1[1] = v19;
        a1[2] = v20;
        a1[3] = &v18[4 * v17];
        if (v12)
          operator delete(v12);
        v3 = (int *)v20;
        a1[2] = v20;
        if (++v4 == v6)
        {
LABEL_37:
          v30 = (int *)*v34;
          goto LABEL_39;
        }
      }
      else
      {
        v10 = v7 & 1 | (2 * *(_DWORD *)(v9 + 4 * v8));
        v11 = a1[3];
        if ((unint64_t)v3 >= v11)
          goto LABEL_6;
LABEL_3:
        *v3++ = v10;
        a1[2] = v3;
        if (++v4 == v6)
          goto LABEL_37;
      }
    }
  }
  v30 = v3;
LABEL_39:
  v31 = 126 - 2 * __clz(v3 - v30);
  if (v3 == v30)
    v32 = 0;
  else
    v32 = v31;
  return std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(v30, v3, v32, 1);
}

void sub_22DB54274(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::DratProofHandler::DeleteClause(uint64_t a1, int *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;

  operations_research::sat::DratProofHandler::MapClause((_QWORD *)a1, a2, a3);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4)
    operations_research::sat::DratChecker::DeleteClause(v4, *(char **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    operations_research::sat::DratWriter::DeleteClause(v5, *(int **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
}

uint64_t operations_research::sat::DratProofHandler::Check(operations_research::sat::DratProofHandler *this, double a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
  {
    operations_research::sat::DratChecker::AddInferedClause(result, 0, 0);
    return operations_research::sat::DratChecker::Check(*((operations_research::sat::DratChecker **)this + 7), a2);
  }
  return result;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB54390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int *v54;
  BOOL v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int *v79;
  BOOL v81;
  uint64_t v82;
  int *v83;
  int *v84;
  int32x2_t v85;
  int32x2_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  int *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  __int32 v99;
  int8x8_t v100;
  int32x2_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  __int32 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  int v112;
  int64_t v113;
  int *v114;
  int v115;
  int v116;
  int v117;
  int *v118;
  int *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int *v131;
  int v132;
  int v133;
  unsigned int v134;
  int32x2_t v135;
  int32x2_t v136;
  int v137;
  int *v138;
  int v139;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v75 = *(a2 - 1);
        v76 = *v8;
        if ((v75 & 1) != 0)
          v77 = ~(v75 >> 1);
        else
          v77 = (v75 >> 1) + 1;
        if (v77 < 0)
          v77 = -v77;
        if ((v76 & 1) != 0)
          v78 = ~(v76 >> 1);
        else
          v78 = (v76 >> 1) + 1;
        if (v78 < 0)
          v78 = -v78;
        if (v77 > v78)
        {
          *v8 = v75;
          *(a2 - 1) = v76;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v90 = (v10 - 2) >> 1;
              v91 = v90;
              do
              {
                v92 = v91;
                if (v90 >= v91)
                {
                  v93 = (2 * v91) | 1;
                  v94 = &v8[v93];
                  v95 = *v94;
                  if (2 * v92 + 2 < (uint64_t)v10)
                  {
                    v96 = v94[1];
                    if ((v95 & 1) != 0)
                      v97 = ~(v95 >> 1);
                    else
                      v97 = (v95 >> 1) + 1;
                    if (v97 < 0)
                      v97 = -v97;
                    if ((v96 & 1) != 0)
                      v98 = ~(v96 >> 1);
                    else
                      v98 = (v96 >> 1) + 1;
                    if (v98 < 0)
                      v98 = -v98;
                    if (v97 > v98)
                    {
                      v95 = v94[1];
                      ++v94;
                      v93 = 2 * v92 + 2;
                    }
                  }
                  result = &v8[v92];
                  v99 = *result;
                  v100.i32[0] = v95;
                  v100.i32[1] = *result;
                  v101 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(v100, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)v100, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32((int32x2_t)v100, 1uLL))));
                  if (v101.i32[0] <= (unsigned __int32)v101.i32[1])
                  {
                    do
                    {
                      v107 = v94;
                      *result = v95;
                      if (v90 < v93)
                        break;
                      v108 = (2 * v93) | 1;
                      v94 = &v8[v108];
                      v93 = 2 * v93 + 2;
                      v95 = *v94;
                      if (v93 < (uint64_t)v10)
                      {
                        v102 = v94[1];
                        if ((v95 & 1) != 0)
                          v103 = ~(v95 >> 1);
                        else
                          v103 = (v95 >> 1) + 1;
                        if (v103 < 0)
                          v103 = -v103;
                        if ((v102 & 1) != 0)
                          v104 = ~(v102 >> 1);
                        else
                          v104 = (v102 >> 1) + 1;
                        if (v104 < 0)
                          v104 = -v104;
                        if (v103 <= v104)
                        {
                          v93 = v108;
                        }
                        else
                        {
                          v95 = v94[1];
                          ++v94;
                        }
                      }
                      else
                      {
                        v93 = v108;
                      }
                      v105 = (v95 & 1) != 0 ? ~(v95 >> 1) : (v95 >> 1) + 1;
                      v106 = v105 >= 0 ? v105 : -v105;
                      result = v107;
                    }
                    while (v106 <= v101.i32[1]);
                    *v107 = v99;
                  }
                }
                v91 = v92 - 1;
              }
              while (v92);
              v109 = (unint64_t)v9 >> 2;
              do
              {
                v111 = 0;
                v112 = *v8;
                v113 = (unint64_t)(v109 - 2) >> 1;
                v114 = v8;
                do
                {
                  while (1)
                  {
                    v119 = &v114[v111];
                    v120 = v119[1];
                    v118 = v119 + 1;
                    v117 = v120;
                    v121 = (2 * v111) | 1;
                    v111 = 2 * v111 + 2;
                    if (v111 < v109)
                      break;
                    v111 = v121;
                    *v114 = v117;
                    v114 = v118;
                    if (v121 > v113)
                      goto LABEL_226;
                  }
                  v115 = v118[1];
                  if ((v117 & 1) != 0)
                    LODWORD(result) = ~(v117 >> 1);
                  else
                    LODWORD(result) = (v117 >> 1) + 1;
                  if ((int)result >= 0)
                    result = (int *)result;
                  else
                    result = (int *)-(int)result;
                  if ((v115 & 1) != 0)
                    v116 = ~(v115 >> 1);
                  else
                    v116 = (v115 >> 1) + 1;
                  if (v116 < 0)
                    v116 = -v116;
                  if (result <= v116)
                  {
                    v111 = v121;
                  }
                  else
                  {
                    v117 = v118[1];
                    ++v118;
                  }
                  *v114 = v117;
                  v114 = v118;
                }
                while (v111 <= v113);
LABEL_226:
                if (v118 == --a2)
                {
                  *v118 = v112;
                }
                else
                {
                  *v118 = *a2;
                  *a2 = v112;
                  v122 = (char *)v118 - (char *)v8 + 4;
                  if (v122 >= 5)
                  {
                    v123 = (((unint64_t)v122 >> 2) - 2) >> 1;
                    v124 = &v8[v123];
                    v125 = *v124;
                    v126 = *v118;
                    v127 = *v124 >> 1;
                    if ((*v124 & 1) != 0)
                      v128 = ~v127;
                    else
                      v128 = v127 + 1;
                    if (v128 >= 0)
                      v129 = v128;
                    else
                      v129 = -v128;
                    if ((v126 & 1) != 0)
                      v130 = ~(v126 >> 1);
                    else
                      v130 = (v126 >> 1) + 1;
                    if (v130 < 0)
                      v130 = -v130;
                    if (v129 > v130)
                    {
                      do
                      {
                        v131 = v124;
                        *v118 = v125;
                        if (!v123)
                          break;
                        v123 = (v123 - 1) >> 1;
                        v124 = &v8[v123];
                        v125 = *v124;
                        v132 = *v124 >> 1;
                        v133 = (*v124 & 1) != 0 ? ~v132 : v132 + 1;
                        v134 = v133 >= 0 ? v133 : -v133;
                        v118 = v131;
                      }
                      while (v134 > v130);
                      *v131 = v126;
                    }
                  }
                }
              }
              while (v109-- > 2);
            }
            return result;
          }
          v11 = v10 >> 1;
          v12 = &v8[v10 >> 1];
          if ((unint64_t)v9 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v7, &v7[v10 >> 1], a2 - 1);
            v13 = &v7[v11];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v7 + 2, &v7[v11 + 1], a2 - 3);
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v13 - 1, v12, &v7[v11 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            --a3;
            v15 = *v7;
            v16 = *v7 >> 1;
            if ((a4 & 1) != 0)
              goto LABEL_35;
LABEL_8:
            v17 = *(v7 - 1);
            if ((v17 & 1) != 0)
              v18 = ~(v17 >> 1);
            else
              v18 = (v17 >> 1) + 1;
            if (v18 >= 0)
              v19 = v18;
            else
              v19 = -v18;
            v20 = v15 & 1;
            v21 = ~v16;
            if ((v15 & 1) != 0)
              v22 = ~v16;
            else
              v22 = v16 + 1;
            if ((v22 & 0x80000000) != 0)
              v22 = -v22;
            if (v19 > v22)
              goto LABEL_36;
            v23 = *(a2 - 1);
            if ((v23 & 1) != 0)
              v24 = ~(v23 >> 1);
            else
              v24 = (v23 >> 1) + 1;
            if (v24 < 0)
              v24 = -v24;
            if (v22 <= v24)
            {
              v56 = v7 + 1;
              do
              {
                v8 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
                v57 = *v8 >> 1;
                if ((*v8 & 1) != 0)
                  v58 = ~v57;
                else
                  v58 = v57 + 1;
                if (v58 < 0)
                  v58 = -v58;
              }
              while (v22 <= v58);
            }
            else
            {
              v8 = v7;
              do
              {
                v25 = v8[1];
                ++v8;
                v26 = v25 >> 1;
                v27 = ~(v25 >> 1);
                if ((v25 & 1) != 0)
                  v28 = v27;
                else
                  v28 = v26 + 1;
                if (v28 < 0)
                  v28 = -v28;
              }
              while (v22 <= v28);
            }
            v59 = a2;
            if (v8 < a2)
            {
              v59 = a2;
              do
              {
                v60 = *--v59;
                v61 = v60 >> 1;
                v62 = ~(v60 >> 1);
                if ((v60 & 1) != 0)
                  v63 = v62;
                else
                  v63 = v61 + 1;
                if (v63 < 0)
                  v63 = -v63;
              }
              while (v22 > v63);
            }
            if (v8 < v59)
            {
              v64 = *v8;
              v65 = *v59;
              do
              {
                *v8 = v65;
                *v59 = v64;
                do
                {
                  v66 = v8[1];
                  ++v8;
                  v64 = v66;
                  v67 = v66 >> 1;
                  v68 = ~(v66 >> 1);
                  if ((v66 & 1) != 0)
                    v69 = v68;
                  else
                    v69 = v67 + 1;
                  if (v69 < 0)
                    v69 = -v69;
                }
                while (v22 <= v69);
                do
                {
                  v70 = *--v59;
                  v65 = v70;
                  v71 = v70 >> 1;
                  v72 = ~(v70 >> 1);
                  if ((v70 & 1) != 0)
                    v73 = v72;
                  else
                    v73 = v71 + 1;
                  if (v73 < 0)
                    v73 = -v73;
                }
                while (v22 > v73);
              }
              while (v8 < v59);
            }
            v74 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v74;
            a4 = 0;
            *v74 = v15;
            continue;
          }
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(&v7[v10 >> 1], v7, a2 - 1);
          --a3;
          v15 = *v7;
          v16 = *v7 >> 1;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_35:
          v20 = v15 & 1;
          v21 = ~v16;
LABEL_36:
          v29 = v16 + 1;
          v30 = 0;
          if (v20)
            v29 = v21;
          if ((v29 & 0x80000000) != 0)
            v29 = -v29;
          do
          {
            v31 = v7[v30 + 1];
            if ((v31 & 1) != 0)
              v32 = ~(v31 >> 1);
            else
              v32 = (v31 >> 1) + 1;
            if (v32 < 0)
              v32 = -v32;
            ++v30;
          }
          while (v32 > v29);
          v33 = &v7[v30];
          v34 = a2;
          if (v30 == 1)
          {
            v34 = a2;
            do
            {
              if (v33 >= v34)
                break;
              v39 = *--v34;
              v40 = v39 >> 1;
              v41 = ~(v39 >> 1);
              if ((v39 & 1) != 0)
                v42 = v41;
              else
                v42 = v40 + 1;
              if (v42 < 0)
                v42 = -v42;
            }
            while (v42 <= v29);
          }
          else
          {
            do
            {
              v35 = *--v34;
              v36 = v35 >> 1;
              v37 = ~(v35 >> 1);
              if ((v35 & 1) != 0)
                v38 = v37;
              else
                v38 = v36 + 1;
              if (v38 < 0)
                v38 = -v38;
            }
            while (v38 <= v29);
          }
          if (v33 < v34)
          {
            v43 = *v34;
            v44 = v33;
            v45 = v34;
            do
            {
              *v44 = v43;
              *v45 = v31;
              do
              {
                v46 = v44[1];
                ++v44;
                v31 = v46;
                v47 = v46 >> 1;
                v48 = ~(v46 >> 1);
                if ((v46 & 1) != 0)
                  v49 = v48;
                else
                  v49 = v47 + 1;
                if (v49 < 0)
                  v49 = -v49;
              }
              while (v49 > v29);
              do
              {
                v50 = *--v45;
                v43 = v50;
                v51 = v50 >> 1;
                v52 = ~(v50 >> 1);
                if ((v50 & 1) != 0)
                  v53 = v52;
                else
                  v53 = v51 + 1;
                if (v53 < 0)
                  v53 = -v53;
              }
              while (v53 <= v29);
            }
            while (v44 < v45);
            v54 = v44 - 1;
            if (v44 - 1 == v7)
              goto LABEL_82;
LABEL_81:
            *v7 = *v54;
            goto LABEL_82;
          }
          v54 = v33 - 1;
          if (v33 - 1 != v7)
            goto LABEL_81;
LABEL_82:
          *v54 = v15;
          if (v33 < v34)
            goto LABEL_85;
          v55 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v7, v54);
          v8 = v54 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v54 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v55)
              continue;
LABEL_85:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(v7, v54, a3, a4 & 1);
            a4 = 0;
            v8 = v54 + 1;
            continue;
          }
          a2 = v54;
          if (v55)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = v8;
            do
            {
              v85 = *(int32x2_t *)v83;
              v83 = v79;
              v86 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v85, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, v85, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32(v85, 1uLL))));
              if (v86.i32[1] > (unsigned __int32)v86.i32[0])
              {
                v87 = v85.i32[0];
                v88 = v82;
                do
                {
                  *(int *)((char *)v8 + v88 + 4) = v87;
                  if (!v88)
                  {
                    v84 = v8;
                    goto LABEL_150;
                  }
                  v87 = *(int *)((char *)v8 + v88 - 4);
                  if ((v87 & 1) != 0)
                    v89 = ~(v87 >> 1);
                  else
                    v89 = (v87 >> 1) + 1;
                  if (v89 < 0)
                    v89 = -v89;
                  v88 -= 4;
                }
                while (v86.i32[1] > v89);
                v84 = (int *)((char *)v8 + v88 + 4);
LABEL_150:
                *v84 = v85.i32[1];
              }
              v79 = v83 + 1;
              v82 += 4;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v135 = *(int32x2_t *)v7;
            v7 = v79;
            v136 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v135, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, v135, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32(v135, 1uLL))));
            if (v136.i32[1] > (unsigned __int32)v136.i32[0])
            {
              v137 = v135.i32[0];
              v138 = v7;
              do
              {
                *v138 = v137;
                v137 = *(v138 - 2);
                if ((v137 & 1) != 0)
                  v139 = ~(v137 >> 1);
                else
                  v139 = (v137 >> 1) + 1;
                if (v139 < 0)
                  v139 = -v139;
                --v138;
              }
              while (v136.i32[1] > v139);
              *v138 = v135.i32[1];
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a2, a3, a4);
  v11 = *a4;
  v12 = *a5 >> 1;
  if ((*a5 & 1) != 0)
    v13 = ~v12;
  else
    v13 = v12 + 1;
  if (v13 < 0)
    v13 = -v13;
  if ((v11 & 1) != 0)
    v14 = ~(v11 >> 1);
  else
    v14 = (v11 >> 1) + 1;
  if (v14 < 0)
    v14 = -v14;
  if (v13 > v14)
  {
    *a4 = *a5;
    *a5 = v11;
    v15 = *a3;
    v16 = *a4 >> 1;
    if ((*a4 & 1) != 0)
      v17 = ~v16;
    else
      v17 = v16 + 1;
    if (v17 < 0)
      v17 = -v17;
    if ((v15 & 1) != 0)
      v18 = ~(v15 >> 1);
    else
      v18 = (v15 >> 1) + 1;
    if (v18 < 0)
      v18 = -v18;
    if (v17 > v18)
    {
      *a3 = *a4;
      *a4 = v15;
      v19 = *a2;
      v20 = *a3 >> 1;
      if ((*a3 & 1) != 0)
        v21 = ~v20;
      else
        v21 = v20 + 1;
      if (v21 < 0)
        v21 = -v21;
      if ((v19 & 1) != 0)
        v22 = ~(v19 >> 1);
      else
        v22 = (v19 >> 1) + 1;
      if (v22 < 0)
        v22 = -v22;
      if (v21 > v22)
      {
        *a2 = *a3;
        *a3 = v19;
        v23 = *a1;
        v24 = *a2 >> 1;
        if ((*a2 & 1) != 0)
          v25 = ~v24;
        else
          v25 = v24 + 1;
        if (v25 < 0)
          v25 = -v25;
        if ((v23 & 1) != 0)
          v26 = ~(v23 >> 1);
        else
          v26 = (v23 >> 1) + 1;
        if (v26 < 0)
          v26 = -v26;
        if (v25 > v26)
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *a2;
  v4 = *result;
  v5 = *a2 >> 1;
  if ((*a2 & 1) != 0)
    v6 = ~v5;
  else
    v6 = v5 + 1;
  if (v6 >= 0)
    v7 = v6;
  else
    v7 = -v6;
  if ((v4 & 1) != 0)
    v8 = ~(v4 >> 1);
  else
    v8 = (v4 >> 1) + 1;
  if (v8 < 0)
    v8 = -v8;
  v9 = *a3;
  v10 = *a3 >> 1;
  if ((*a3 & 1) != 0)
    v11 = ~v10;
  else
    v11 = v10 + 1;
  if (v11 < 0)
    v11 = -v11;
  if (v7 <= v8)
  {
    if (v11 > v7)
    {
      *a2 = v9;
      *a3 = v3;
      v12 = *result;
      v13 = *a2 >> 1;
      if ((*a2 & 1) != 0)
        v14 = ~v13;
      else
        v14 = v13 + 1;
      if (v14 < 0)
        v14 = -v14;
      if ((v12 & 1) != 0)
        v15 = ~(v12 >> 1);
      else
        v15 = (v12 >> 1) + 1;
      if (v15 < 0)
        v15 = -v15;
      if (v14 > v15)
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 > v7)
    {
      *result = v9;
LABEL_40:
      *a3 = v4;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v16 = *a3 >> 1;
    if ((*a3 & 1) != 0)
      v17 = ~v16;
    else
      v17 = v16 + 1;
    if (v17 < 0)
      v17 = -v17;
    if (v17 > v8)
    {
      *a2 = *a3;
      goto LABEL_40;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int8x8_t *v6;
  int8x8_t *v7;
  int v8;
  uint64_t v9;
  int8x8_t v10;
  int32x2_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      if ((v17 & 1) != 0)
        v19 = ~(v17 >> 1);
      else
        v19 = (v17 >> 1) + 1;
      if (v19 < 0)
        v19 = -v19;
      if ((v18 & 1) != 0)
        v20 = ~(v18 >> 1);
      else
        v20 = (v18 >> 1) + 1;
      if (v20 < 0)
        v20 = -v20;
      if (v19 > v20)
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      break;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a2 - 1);
      result = 1;
      break;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a1 + 2, a2 - 1);
      result = 1;
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      result = 1;
      break;
    default:
      v6 = (int8x8_t *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a1 + 2);
      v7 = (int8x8_t *)(a1 + 3);
      if (a1 + 3 == a2)
      {
LABEL_19:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 12;
        while (1)
        {
          v10 = *v6;
          v11 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(*v6, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)*v6, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32((int32x2_t)*v6, 1uLL))));
          if (v11.i32[1] > (unsigned __int32)v11.i32[0])
            break;
LABEL_18:
          v6 = v7;
          v9 += 4;
          v7 = (int8x8_t *)((char *)v7 + 4);
          if (v7 == (int8x8_t *)a2)
            goto LABEL_19;
        }
        v12 = (int)*v6;
        v13 = v9;
        do
        {
          *(int *)((char *)a1 + v13) = v12;
          v14 = v13 - 4;
          if (v13 == 4)
          {
            *a1 = v10.i32[1];
            if (++v8 != 8)
              goto LABEL_18;
            goto LABEL_35;
          }
          v12 = *(int *)((char *)a1 + v13 - 8);
          if ((v12 & 1) != 0)
            v15 = ~(v12 >> 1);
          else
            v15 = (v12 >> 1) + 1;
          if (v15 >= 0)
            v16 = v15;
          else
            v16 = -v15;
          v13 = v14;
        }
        while (v11.i32[1] > v16);
        *(int *)((char *)a1 + v14) = v10.i32[1];
        if (++v8 != 8)
          goto LABEL_18;
LABEL_35:
        result = &v7->u8[4] == (unsigned __int8 *)a2;
      }
      break;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a2, a3);
  v9 = *a3;
  v10 = *a4 >> 1;
  if ((*a4 & 1) != 0)
    v11 = ~v10;
  else
    v11 = v10 + 1;
  if (v11 < 0)
    v11 = -v11;
  if ((v9 & 1) != 0)
    v12 = ~(v9 >> 1);
  else
    v12 = (v9 >> 1) + 1;
  if (v12 < 0)
    v12 = -v12;
  if (v11 > v12)
  {
    *a3 = *a4;
    *a4 = v9;
    v13 = *a2;
    v14 = *a3 >> 1;
    if ((*a3 & 1) != 0)
      v15 = ~v14;
    else
      v15 = v14 + 1;
    if (v15 < 0)
      v15 = -v15;
    if ((v13 & 1) != 0)
      v16 = ~(v13 >> 1);
    else
      v16 = (v13 >> 1) + 1;
    if (v16 < 0)
      v16 = -v16;
    if (v15 > v16)
    {
      *a2 = *a3;
      *a3 = v13;
      v17 = *a1;
      v18 = *a2 >> 1;
      if ((*a2 & 1) != 0)
        v19 = ~v18;
      else
        v19 = v18 + 1;
      if (v19 < 0)
        v19 = -v19;
      if ((v17 & 1) != 0)
        v20 = ~(v17 >> 1);
      else
        v20 = (v17 >> 1) + 1;
      if (v20 < 0)
        v20 = -v20;
      if (v19 > v20)
      {
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  return result;
}

void operations_research::sat::DratWriter::~DratWriter(operations_research::sat::DratWriter *this)
{
  FILE **v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t v9;

  v2 = (FILE **)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((char *)this + 39) < 0)
    {
      v3 = (char *)*((_QWORD *)this + 2);
      v4 = *((_QWORD *)this + 3);
    }
    else
    {
      v3 = (char *)this + 16;
      v4 = *((unsigned __int8 *)this + 39);
    }
    v8[0] = v3;
    v8[1] = v4;
    file::WriteString(v2, (uint64_t)v8, (char *)0xBABA, &v9);
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 30);
      v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: (file::WriteString(output_, buffer_, file::Defaults())).ok() ", 75);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
    }
    File::Close(*((File **)this + 1), 47802, v7);
    if (v7[0])
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 31);
      v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: (output_->Close(file::Defaults())).ok() ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
    }
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void operations_research::sat::DratWriter::WriteClause(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  FILE **v9;
  _QWORD *v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  BOOL (*v14)(int, uint64_t, unsigned int, char *);
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      v6 = *a2 >> 1;
      if ((*a2 & 1) != 0)
        v7 = ~v6;
      else
        v7 = (v6 + 1);
      v13 = v7;
      v14 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::AppendPack(a1 + 16, "%d ", 3, (uint64_t)&v13, 1);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  std::string::append((std::string *)(a1 + 16), "0\n");
  if (*(char *)(a1 + 39) < 0)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 > 0x2710)
    {
      v9 = *(FILE ***)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      v14 = (BOOL (*)(int, uint64_t, unsigned int, char *))v8;
      file::WriteString(v9, (uint64_t)&v13, (char *)0xBABA, &v12);
      if (v12)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 52);
        v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: (file::WriteString(output_, buffer_, file::Defaults())).ok() ", 75);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
      }
      if (*(char *)(a1 + 39) < 0)
      {
        **(_BYTE **)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 39) = 0;
      }
    }
  }
}

void sub_22DB55560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB55568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  absl::lts_2020_02_25::Status::~Status((absl::lts_2020_02_25::Status *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::DratWriter::DeleteClause(uint64_t a1, int *a2, uint64_t a3)
{
  std::string::append((std::string *)(a1 + 16), "d ");
  operations_research::sat::DratWriter::WriteClause(a1, a2, a3);
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB5562C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

operations_research::sat::FeasibilityPump *operations_research::sat::FeasibilityPump::FeasibilityPump(operations_research::sat::FeasibilityPump *this, operations_research::sat::Model *a2)
{
  operations_research::glop::LinearProgram *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  _BYTE v22[16];
  int v23;
  char v24;
  uint64_t v25;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0;
  v4 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  operations_research::glop::LinearProgram::LinearProgram((operations_research::sat::FeasibilityPump *)((char *)this + 80));
  operations_research::glop::RevisedSimplex::RevisedSimplex((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  *((_QWORD *)this + 2392) = 0;
  *((_OWORD *)this + 1195) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1192) = 0u;
  operations_research::glop::SparseMatrixScaler::SparseMatrixScaler((operations_research::sat::FeasibilityPump *)((char *)this + 19144));
  *((_QWORD *)this + 2401) = 0x3FF0000000000000;
  *((_QWORD *)this + 2402) = 0x3FF0000000000000;
  *((_QWORD *)this + 2403) = 0;
  *((_QWORD *)this + 2405) = 0;
  *((_QWORD *)this + 2404) = 0;
  *((_QWORD *)this + 2406) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 19256) = 0u;
  *(_OWORD *)((char *)this + 19272) = 0u;
  *(_OWORD *)((char *)this + 19288) = 0u;
  *(_OWORD *)((char *)this + 19304) = 0u;
  *(_OWORD *)((char *)this + 19320) = 0u;
  *(_OWORD *)((char *)this + 19336) = 0u;
  *(_OWORD *)((char *)this + 19352) = 0u;
  *((_BYTE *)this + 19368) = 0;
  *((_QWORD *)this + 2422) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_QWORD *)this + 2423) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((_QWORD *)this + 2424) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((_QWORD *)this + 2425) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((_QWORD *)this + 2426) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  v6 = (char *)a2 + 32;
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (!v5)
    goto LABEL_12;
  v7 = (char *)a2 + 32;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
    if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (char *)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v6
    && *((_QWORD *)v7 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
  {
    v11 = *((_QWORD *)v7 + 5);
  }
  else
  {
LABEL_12:
    v11 = 0;
  }
  *((_QWORD *)this + 2427) = v11;
  *((_QWORD *)this + 2428) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  *((_QWORD *)this + 2429) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>((uint64_t)a2);
  v12 = *(_QWORD **)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_24;
  v13 = (char *)a2 + 32;
  do
  {
    v14 = v12[4];
    v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = (char *)v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != v6
    && *((_QWORD *)v13 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
  {
    v17 = *((_QWORD *)v13 + 5);
  }
  else
  {
LABEL_24:
    v17 = 0;
  }
  *((_QWORD *)this + 2430) = v17;
  *((_WORD *)this + 9724) = 0;
  *((_WORD *)this + 9760) = 0;
  *((_QWORD *)this + 2450) = 0;
  *(_OWORD *)((char *)this + 19464) = 0u;
  *(_OWORD *)((char *)this + 19480) = 0u;
  *(_OWORD *)((char *)this + 19496) = 0u;
  *((_OWORD *)this + 1221) = 0u;
  *((_OWORD *)this + 1222) = 0u;
  *((_OWORD *)this + 1223) = 0u;
  *((_DWORD *)this + 4902) = 20;
  *((_BYTE *)this + 19612) = 0;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v22, 0);
  v24 = 0;
  v23 |= 0x4000001u;
  v25 = 2000;
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::FeasibilityPump *)((char *)this + 560), (const operations_research::glop::GlopParameters *)v22);
  operations_research::glop::LinearProgram::Clear(v4);
  v18 = *((_QWORD *)this + 6);
  for (i = *((_QWORD *)this + 7); i != v18; i -= 40)
  {
    v20 = *(void **)(i - 24);
    if (v20)
    {
      *(_QWORD *)(i - 16) = v20;
      operator delete(v20);
    }
  }
  *((_QWORD *)this + 7) = v18;
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v22);
  return this;
}

void sub_22DB558F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  operations_research::glop::RevisedSimplex *v4;
  operations_research::sat::LinearConstraint *v5;
  uint64_t v6;
  void **v7;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v9 = (void **)(v1 + 19536);
  v10 = *(void **)(v1 + 19560);
  if (v10)
  {
    *(_QWORD *)(v1 + 19568) = v10;
    operator delete(v10);
    v11 = *v9;
    if (!*v9)
    {
LABEL_3:
      v12 = *(void **)(v1 + 19488);
      if (!v12)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else
  {
    v11 = *v9;
    if (!*v9)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 19544) = v11;
  operator delete(v11);
  v12 = *(void **)(v1 + 19488);
  if (!v12)
  {
LABEL_4:
    v13 = *v7;
    if (!*v7)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  *(_QWORD *)(v1 + 19496) = v12;
  operator delete(v12);
  v13 = *v7;
  if (!*v7)
  {
LABEL_5:
    v14 = *(void **)(v1 + 19344);
    if (!v14)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  *(_QWORD *)(v1 + 19472) = v13;
  operator delete(v13);
  v14 = *(void **)(v1 + 19344);
  if (!v14)
  {
LABEL_6:
    v15 = (void **)(v1 + 19224);
    v16 = *(void **)(v1 + 19320);
    if (!v16)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(v1 + 19352) = v14;
  operator delete(v14);
  v15 = (void **)(v1 + 19224);
  v16 = *(void **)(v1 + 19320);
  if (!v16)
  {
LABEL_7:
    v17 = *(void **)(v1 + 19296);
    if (!v17)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  *(_QWORD *)(v1 + 19328) = v16;
  operator delete(v16);
  v17 = *(void **)(v1 + 19296);
  if (!v17)
  {
LABEL_8:
    absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(v6);
    v18 = *v15;
    if (!*v15)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_26:
  operator delete(v17);
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(v6);
  v18 = *v15;
  if (!*v15)
  {
LABEL_10:
    operations_research::sat::LinearConstraint::~LinearConstraint(v5);
    v19 = (void **)(v1 + 19072);
    v20 = *(void **)(v1 + 19120);
    if (v20)
    {
      *(_QWORD *)(v1 + 19128) = v20;
      operator delete(v20);
      v21 = *(void **)(v1 + 19096);
      if (!v21)
      {
LABEL_12:
        v22 = *v19;
        if (!*v19)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else
    {
      v21 = *(void **)(v1 + 19096);
      if (!v21)
        goto LABEL_12;
    }
    *(_QWORD *)(v1 + 19104) = v21;
    operator delete(v21);
    v22 = *v19;
    if (!*v19)
    {
LABEL_14:
      operations_research::glop::RevisedSimplex::~RevisedSimplex(v4);
      operations_research::glop::LinearProgram::~LinearProgram(v3);
      gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector(v2);
      v23 = *(void **)v1;
      if (*(_QWORD *)v1)
      {
        *(_QWORD *)(v1 + 8) = v23;
        operator delete(v23);
      }
      _Unwind_Resume(a1);
    }
LABEL_13:
    *(_QWORD *)(v1 + 19080) = v22;
    operator delete(v22);
    goto LABEL_14;
  }
LABEL_9:
  *(_QWORD *)(v1 + 19232) = v18;
  operator delete(v18);
  goto LABEL_10;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void **gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::FeasibilityPump::~FeasibilityPump(operations_research::sat::FeasibilityPump *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  _BYTE v22[16];

  if (*operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__[0] >= 1
    && (operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 60);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Feasibility Pump Total number of simplex iterations: ", 53);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
  v3 = (void *)*((_QWORD *)this + 2445);
  if (v3)
  {
    *((_QWORD *)this + 2446) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2442);
  if (v4)
  {
    *((_QWORD *)this + 2443) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2436);
  if (v5)
  {
    *((_QWORD *)this + 2437) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2433);
  if (v6)
  {
    *((_QWORD *)this + 2434) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2418);
  if (v7)
  {
    *((_QWORD *)this + 2419) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2415);
  if (v8)
  {
    *((_QWORD *)this + 2416) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2412);
  if (v9)
    operator delete(v9);
  if (*((_QWORD *)this + 2409))
  {
    operator delete(*((void **)this + 2406));
    *((_QWORD *)this + 2406) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 2411) = 0;
    *((_QWORD *)this + 2407) = 0;
    *((_QWORD *)this + 2409) = 0;
    *((_QWORD *)this + 2408) = 0;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 2410);
  if (v10)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  v11 = (void *)*((_QWORD *)this + 2403);
  if (v11)
  {
    *((_QWORD *)this + 2404) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 2398);
  if (v12)
  {
    *((_QWORD *)this + 2399) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 2395);
  if (v13)
  {
    *((_QWORD *)this + 2396) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 2390);
  if (v14)
  {
    *((_QWORD *)this + 2391) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 2387);
  if (v15)
  {
    *((_QWORD *)this + 2388) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 2384);
  if (v16)
  {
    *((_QWORD *)this + 2385) = v16;
    operator delete(v16);
  }
  operations_research::glop::RevisedSimplex::~RevisedSimplex((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  operations_research::glop::LinearProgram::~LinearProgram((void **)this + 10);
  v17 = *((_QWORD *)this + 6);
  if (v17)
  {
    v18 = *((_QWORD *)this + 7);
    v19 = (void *)*((_QWORD *)this + 6);
    if (v18 != v17)
    {
      do
      {
        v20 = *(void **)(v18 - 24);
        if (v20)
        {
          *(_QWORD *)(v18 - 16) = v20;
          operator delete(v20);
        }
        v18 -= 40;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v17;
    operator delete(v19);
  }
  v21 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v21;
    operator delete(v21);
  }
}

uint64_t operations_research::sat::FeasibilityPump::AddLinearConstraint(operations_research::sat::FeasibilityPump *this, int **a2)
{
  const operations_research::sat::LinearConstraint *v2;
  int *v4;
  int *v5;
  int v6;
  unint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int MirrorVariable;
  int v18;
  unint64_t v19;
  char *v20;
  operations_research::sat::FeasibilityPump *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const operations_research::sat::LinearConstraint *v37;
  void **v38;
  uint64_t *v39;
  __int128 v40;
  void *__p[2];
  uint64_t v42;

  v2 = (const operations_research::sat::LinearConstraint *)a2;
  v4 = a2[2];
  v5 = a2[3];
  while (v4 != v5)
  {
    v6 = *v4++;
    operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable((uint64_t)this, v6 & 0xFFFFFFFE);
  }
  v42 = 0;
  v40 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = *((_QWORD *)this + 7);
  if (v7 >= *((_QWORD *)this + 8))
  {
    v8 = std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>((void **)this + 6, (uint64_t)&v40);
    v9 = __p[0];
    *((_QWORD *)this + 7) = v8;
    if (v9)
    {
      __p[1] = v9;
      operator delete(v9);
      v8 = (char *)*((_QWORD *)this + 7);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 32) = 0;
    *(_OWORD *)v7 = 0uLL;
    *(_OWORD *)(v7 + 16) = 0uLL;
    v8 = (char *)(v7 + 40);
    *((_QWORD *)this + 7) = v7 + 40;
  }
  *((_QWORD *)v8 - 5) = *(_QWORD *)v2;
  *((_QWORD *)v8 - 4) = *((_QWORD *)v2 + 1);
  v11 = *((_QWORD *)v2 + 2);
  v10 = *((_QWORD *)v2 + 3);
  if (*(_QWORD *)v2 > *((_QWORD *)v2 + 1))
  {
    v39 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)v2, (int)v2 + 8, "ct.lb <= ct.ub");
    if (v39)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v40, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 75, &v39);
      google::LogMessage::stream((google::LogMessage *)&v40);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v40);
    }
  }
  if ((int)((unint64_t)(v10 - v11) >> 2) <= 0)
  {
    v14 = (int *)*((_QWORD *)v8 - 2);
  }
  else
  {
    v12 = 0;
    v37 = v2;
    v38 = (void **)(v8 - 24);
    v13 = ((unint64_t)(v10 - v11) >> 2);
    do
    {
      while (1)
      {
        v15 = *(_DWORD *)(*((_QWORD *)v2 + 2) + 4 * v12);
        v16 = (v15 & 1) != 0 ? -*(_QWORD *)(*((_QWORD *)v2 + 5) + 8 * v12) : *(_QWORD *)(*((_QWORD *)v2 + 5) + 8 * v12);
        MirrorVariable = operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable((uint64_t)this, v15 & 0xFFFFFFFE);
        v18 = MirrorVariable;
        v20 = (char *)*((_QWORD *)v8 - 2);
        v19 = *((_QWORD *)v8 - 1);
        if ((unint64_t)v20 >= v19)
          break;
        *(_DWORD *)v20 = MirrorVariable;
        *(_QWORD *)(v20 + 4) = v16;
        v14 = (int *)(v20 + 12);
        *((_QWORD *)v8 - 2) = v20 + 12;
        if (++v12 == v13)
          goto LABEL_33;
      }
      v21 = this;
      v22 = v13;
      v23 = (char *)*v38;
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)*v38) >> 2);
      v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v23) >> 2);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0xAAAAAAAAAAAAAAALL)
        v27 = 0x1555555555555555;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = (char *)operator new(12 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[12 * v24];
      *(_DWORD *)v29 = v18;
      *(_QWORD *)(v29 + 4) = v16;
      v30 = v29;
      v13 = v22;
      if (v20 != v23)
      {
        do
        {
          v31 = *(_QWORD *)(v20 - 12);
          v20 -= 12;
          v32 = *((_DWORD *)v20 + 2);
          *(_QWORD *)(v30 - 12) = v31;
          v30 -= 12;
          *((_DWORD *)v30 + 2) = v32;
        }
        while (v20 != v23);
        v20 = (char *)*v38;
      }
      this = v21;
      v14 = (int *)(v29 + 12);
      *((_QWORD *)v8 - 3) = v30;
      *((_QWORD *)v8 - 2) = v29 + 12;
      *((_QWORD *)v8 - 1) = &v28[12 * v27];
      v2 = v37;
      if (v20)
        operator delete(v20);
      *((_QWORD *)v8 - 2) = v14;
      ++v12;
    }
    while (v12 != v13);
  }
LABEL_33:
  v33 = *((_QWORD *)v8 - 3);
  v34 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v33) >> 2));
  if (v14 == (int *)v33)
    v35 = 0;
  else
    v35 = v34;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v33, v14, (uint64_t)&v40, v35, 1);
}

void sub_22DB56084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5608C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;

  v4 = 0;
  v5 = (uint64_t *)(a1 + 19248);
  v6 = a2;
  v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v8 = *(_QWORD *)(a1 + 19248);
  v9 = (v7 >> 7) ^ (v8 >> 12);
  v10 = *(_QWORD *)(a1 + 19272);
  v11 = 0x101010101010101 * (v7 & 0x7F);
  for (i = v9; ; i = v4 + v13)
  {
    v13 = i & v10;
    v14 = *(_QWORD *)(v8 + v13);
    v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15)
      break;
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v4 += 8;
  }
  v16 = *(_QWORD *)(a1 + 19256);
  while (1)
  {
    v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(_DWORD *)(v16 + 8 * v17) == a2)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_6;
  }
  if (v17 != v10)
    return *(unsigned int *)(v16 + 8 * v17 + 4);
LABEL_9:
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 19440) + 96);
  if (v6 >= (*(_QWORD *)(*(_QWORD *)(a1 + 19440) + 104) - v18) >> 2)
    v19 = -1;
  else
    v19 = *(_DWORD *)(v18 + 4 * v6);
  v20 = 0;
  if (*(_DWORD *)(a1 + 72) <= v19 + 1)
    v21 = v19 + 1;
  else
    v21 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = v21;
  v22 = (void **)(a1 + 19224);
  v23 = *(char **)(a1 + 19232);
  v24 = (unint64_t)&v23[-*(_QWORD *)(a1 + 19224)] >> 2;
  while (1)
  {
    v25 = v9 & v10;
    v26 = *(_QWORD *)(v8 + (v9 & v10));
    v27 = ((v26 ^ v11) - 0x101010101010101) & ~(v26 ^ v11) & 0x8080808080808080;
    if (v27)
      break;
LABEL_20:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
    {
      v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(v5, v7);
      v28 = *(_QWORD *)(a1 + 19256);
      v30 = (_DWORD *)(v28 + 8 * v29);
      *v30 = a2;
      v30[1] = 0;
      v23 = *(char **)(a1 + 19232);
      goto LABEL_24;
    }
    v20 += 8;
    v9 = v20 + v25;
  }
  v28 = *(_QWORD *)(a1 + 19256);
  while (1)
  {
    v29 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v10;
    if (*(_DWORD *)(v28 + 8 * v29) == a2)
      break;
    v27 &= v27 - 1;
    if (!v27)
      goto LABEL_20;
  }
LABEL_24:
  *(_DWORD *)(v28 + 8 * v29 + 4) = v24;
  v31 = *(_QWORD *)(a1 + 19240);
  if ((unint64_t)v23 < v31)
  {
    *(_DWORD *)v23 = a2;
    v32 = (uint64_t)(v23 + 4);
    goto LABEL_47;
  }
  v33 = (char *)*v22;
  v34 = v23 - (_BYTE *)*v22;
  v35 = v34 >> 2;
  v36 = (v34 >> 2) + 1;
  if (v36 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v37 = v31 - (_QWORD)v33;
  if (v37 >> 1 > v36)
    v36 = v37 >> 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
    v38 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 62)
      goto LABEL_99;
    v39 = operator new(4 * v38);
    v40 = &v39[4 * v35];
    v41 = &v39[4 * v38];
    *v40 = a2;
    v32 = (uint64_t)(v40 + 1);
    v42 = v23 - v33;
    if (v23 == v33)
      goto LABEL_45;
  }
  else
  {
    v39 = 0;
    v40 = (_DWORD *)(4 * v35);
    v41 = 0;
    *(_DWORD *)(4 * v35) = a2;
    v32 = 4 * v35 + 4;
    v42 = v23 - v33;
    if (v23 == v33)
      goto LABEL_45;
  }
  v43 = v42 - 4;
  if (v43 < 0x2C)
  {
    v44 = v23;
    goto LABEL_44;
  }
  if ((unint64_t)(v23 - v39 - v34) < 0x20)
  {
    v44 = v23;
    do
    {
LABEL_44:
      v51 = *((_DWORD *)v44 - 1);
      v44 -= 4;
      *--v40 = v51;
    }
    while (v44 != v33);
    goto LABEL_45;
  }
  v45 = (v43 >> 2) + 1;
  v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
  v44 = &v23[-v46];
  v40 = (_DWORD *)((char *)v40 - v46);
  v47 = &v39[4 * v35 - 16];
  v48 = v23 - 16;
  v49 = v45 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v50 = *(_OWORD *)v48;
    *(v47 - 1) = *((_OWORD *)v48 - 1);
    *v47 = v50;
    v47 -= 2;
    v48 -= 32;
    v49 -= 8;
  }
  while (v49);
  if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_44;
LABEL_45:
  *(_QWORD *)(a1 + 19224) = v40;
  *(_QWORD *)(a1 + 19232) = v32;
  *(_QWORD *)(a1 + 19240) = v41;
  if (v33)
    operator delete(v33);
LABEL_47:
  *(_QWORD *)(a1 + 19232) = v32;
  v52 = *(_QWORD *)(a1 + 19304);
  v53 = *(_QWORD *)(a1 + 19312);
  if (v52 == v53 << 6)
  {
    if ((uint64_t)(v52 + 1) < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = v53 << 7;
    if (v54 <= (v52 & 0xFFFFFFFFFFFFFFC0) + 64)
      v54 = (v52 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v52 <= 0x3FFFFFFFFFFFFFFELL)
      v55 = v54;
    else
      v55 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve(a1 + 19296, v55);
    v52 = *(_QWORD *)(a1 + 19304);
  }
  *(_QWORD *)(a1 + 19304) = v52 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 19296) + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v52);
  v56 = *(char **)(a1 + 19472);
  v57 = *(_QWORD *)(a1 + 19480);
  if ((unint64_t)v56 >= v57)
  {
    v59 = *(char **)(a1 + 19464);
    v60 = (v56 - v59) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v62 = v57 - (_QWORD)v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
        goto LABEL_99;
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    v66 = &v64[8 * v63];
    *v65 = 0x7FF0000000000000;
    v58 = v65 + 1;
    if (v56 != v59)
    {
      v67 = v56 - v59 - 8;
      if (v67 < 0x58)
        goto LABEL_106;
      if ((unint64_t)(v59 - v64) < 0x20)
        goto LABEL_106;
      v68 = (v67 >> 3) + 1;
      v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
      v70 = &v56[-v69];
      v65 = (_QWORD *)((char *)v65 - v69);
      v71 = &v64[8 * v60 - 16];
      v72 = v56 - 16;
      v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v74 = *(_OWORD *)v72;
        *(v71 - 1) = *((_OWORD *)v72 - 1);
        *v71 = v74;
        v71 -= 2;
        v72 -= 32;
        v73 -= 4;
      }
      while (v73);
      v56 = v70;
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_106:
        do
        {
          v75 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v65 = v75;
        }
        while (v56 != v59);
      }
    }
    *(_QWORD *)(a1 + 19464) = v65;
    *(_QWORD *)(a1 + 19472) = v58;
    *(_QWORD *)(a1 + 19480) = v66;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v56 = 0x7FF0000000000000;
    v58 = v56 + 8;
  }
  *(_QWORD *)(a1 + 19472) = v58;
  v76 = *(char **)(a1 + 19544);
  v77 = *(_QWORD *)(a1 + 19552);
  if ((unint64_t)v76 < v77)
  {
    *(_QWORD *)v76 = 0;
    *(_QWORD *)(a1 + 19544) = v76 + 8;
    return v24;
  }
  v78 = *(char **)(a1 + 19536);
  v79 = (v76 - v78) >> 3;
  v80 = v79 + 1;
  if ((unint64_t)(v79 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v81 = v77 - (_QWORD)v78;
  if (v81 >> 2 > v80)
    v80 = v81 >> 2;
  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
    v82 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v82 = v80;
  if (v82)
  {
    if (!(v82 >> 61))
    {
      v83 = operator new(8 * v82);
      v84 = &v83[8 * v79];
      v85 = &v83[8 * v82];
      *v84 = 0;
      v86 = (uint64_t)(v84 + 1);
      v87 = v76 - v78;
      if (v76 == v78)
        goto LABEL_95;
LABEL_89:
      v88 = v87 - 8;
      if (v88 < 0x58)
        goto LABEL_107;
      if ((unint64_t)(v78 - v83) < 0x20)
        goto LABEL_107;
      v89 = (v88 >> 3) + 1;
      v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
      v91 = &v76[-v90];
      v84 = (_QWORD *)((char *)v84 - v90);
      v92 = &v83[8 * v79 - 16];
      v93 = v76 - 16;
      v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v95 = *(_OWORD *)v93;
        *(v92 - 1) = *((_OWORD *)v93 - 1);
        *v92 = v95;
        v92 -= 2;
        v93 -= 32;
        v94 -= 4;
      }
      while (v94);
      v76 = v91;
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_107:
        do
        {
          v96 = *((_QWORD *)v76 - 1);
          v76 -= 8;
          *--v84 = v96;
        }
        while (v76 != v78);
      }
      goto LABEL_95;
    }
LABEL_99:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v83 = 0;
  v84 = (_QWORD *)(8 * v79);
  v85 = 0;
  *(_QWORD *)(8 * v79) = 0;
  v86 = 8 * v79 + 8;
  v87 = v76 - v78;
  if (v76 != v78)
    goto LABEL_89;
LABEL_95:
  *(_QWORD *)(a1 + 19536) = v84;
  *(_QWORD *)(a1 + 19544) = v86;
  *(_QWORD *)(a1 + 19552) = v85;
  if (v78)
    operator delete(v78);
  *(_QWORD *)(a1 + 19544) = v86;
  return v24;
}

void operations_research::sat::FeasibilityPump::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v5 = 0;
  *(_BYTE *)(a1 + 19368) = 1;
  v6 = a2 & 0xFFFFFFFE;
  if ((a2 & 1) != 0)
    v7 = -a3;
  else
    v7 = a3;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v6)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v6));
  v9 = *(_QWORD *)(a1 + 19248);
  v10 = (v8 >> 7) ^ (v9 >> 12);
  v11 = *(_QWORD *)(a1 + 19272);
  v12 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    v13 = v10 & v11;
    v14 = *(_QWORD *)(v9 + v13);
    v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15)
      break;
LABEL_9:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      return;
    v5 += 8;
    v10 = v5 + v13;
  }
  v16 = *(_QWORD *)(a1 + 19256);
  while (1)
  {
    v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
    if (*(_DWORD *)(v16 + 8 * v17) == v6)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_9;
  }
  if (v17 != v11)
  {
    v18 = *(_DWORD *)(v16 + 8 * v17 + 4);
    v20 = *(_DWORD **)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v20 >= v19)
    {
      v22 = *(_DWORD **)a1;
      v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *(_QWORD *)a1) >> 2);
      v24 = v23 + 1;
      if (v23 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v22) >> 2);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0xAAAAAAAAAAAAAAALL)
        v26 = 0x1555555555555555;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v27 = (char *)operator new(12 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[12 * v23];
      *(_DWORD *)v28 = v18;
      *(_QWORD *)(v28 + 4) = v7;
      v21 = v28 + 12;
      if (v20 != v22)
      {
        do
        {
          v29 = *(_QWORD *)(v20 - 3);
          v20 -= 3;
          v30 = v20[2];
          *(_QWORD *)(v28 - 12) = v29;
          v28 -= 12;
          *((_DWORD *)v28 + 2) = v30;
        }
        while (v20 != v22);
        v20 = *(_DWORD **)a1;
      }
      *(_QWORD *)a1 = v28;
      *(_QWORD *)(a1 + 8) = v21;
      *(_QWORD *)(a1 + 16) = &v27[12 * v26];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v20 = v18;
      *(_QWORD *)(v20 + 1) = v7;
      v21 = v20 + 3;
    }
    *(_QWORD *)(a1 + 8) = v21;
    if (a3 >= 0)
      v31 = a3;
    else
      v31 = -a3;
    if (*(_QWORD *)(a1 + 24) > v31)
      v31 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v31;
  }
}

void operations_research::sat::FeasibilityPump::PrintStats(operations_research::sat::FeasibilityPump *this)
{
  char *v2;
  _QWORD *v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int ProblemStatus;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE v14[16];
  void *__p[2];
  unsigned __int8 v16;

  v2 = (char *)this + 19448;
  if (*((_BYTE *)this + 19448))
  {
    if (*_MergedGlobals_10[0] >= 2
      && (_MergedGlobals_10[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_10, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 129);
      v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fractionality: ", 15);
      std::ostream::operator<<();
      v4 = __p;
LABEL_22:
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
    }
  }
  else
  {
    if (*off_254079558[0] >= 2
      && (off_254079558[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079558, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 131);
      v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fractionality: NA", 17);
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
    if (*off_254079560[0] >= 2
      && (off_254079560[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079560, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 132);
      v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"simplex status: ", 16);
      ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560));
      operations_research::glop::GetProblemStatusString(ProblemStatus, (uint64_t)__p);
      if ((v16 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v16 & 0x80u) == 0)
        v10 = v16;
      else
        v10 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
      if ((char)v16 < 0)
        operator delete(__p[0]);
      v4 = (void **)v14;
      goto LABEL_22;
    }
  }
  if (v2[72])
  {
    if (*off_254079568[0] >= 2
      && (off_254079568[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079568, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 136);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#Infeasible const: ", 19);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
    if (*off_254079570[0] >= 2
      && (off_254079570[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079570, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 137);
      v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Infeasibility: ", 15);
      std::ostream::operator<<();
LABEL_36:
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
  }
  else if (*off_254079578[0] >= 2
         && (off_254079578[0] != &google::kLogSiteUninitialized
          || google::InitVLOG3__((google *)off_254079578, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 139);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Infeasibility: NA", 17);
    goto LABEL_36;
  }
}

void sub_22DB56C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DB56CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB56CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB56CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::FeasibilityPump::Solve(operations_research::sat::FeasibilityPump *this)
{
  operations_research::sat::FeasibilityPump *v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v25;
  absl::lts_2020_02_25 *v26;
  double v27;
  double v28;
  int v29;
  char *v31;

  v1 = this;
  v2 = (char *)this + 80;
  v31 = (char *)this + 19448;
  if (!(-1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4)))
    operations_research::sat::FeasibilityPump::InitializeWorkingLP(this);
  v3 = *((_QWORD *)v1 + 2404) - *((_QWORD *)v1 + 2403);
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = 0;
    v5 = (v3 >> 2);
    do
    {
      v6 = *(_DWORD *)(*((_QWORD *)v1 + 2403) + 4 * v4);
      v7 = *(_QWORD *)(*((_QWORD *)v1 + 2424) + 144);
      v8 = *(_QWORD *)(v7 + 20 * v6);
      v9 = (double)v8;
      if (v8 < (uint64_t)0x8000000000000003)
        v9 = -INFINITY;
      if (v8 <= 0x7FFFFFFFFFFFFFFDLL)
        v10 = v9;
      else
        v10 = INFINITY;
      v11 = *(_QWORD *)(v7 + 20 * (v6 ^ 1));
      v12 = (double)-v11;
      if (v11 > 0x7FFFFFFFFFFFFFFDLL)
        v12 = -INFINITY;
      if (v11 >= (uint64_t)0x8000000000000003)
        v13 = v12;
      else
        v13 = INFINITY;
      v14 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)v1 + 19144, v4);
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v4++, v14 * v10, v14 * v13);
    }
    while (v5 != v4);
  }
  *v31 = 0;
  v31[72] = 0;
  if ((int)(-1431655765 * ((*((_QWORD *)v1 + 11) - *((_QWORD *)v1 + 10)) >> 4)) >= 1)
  {
    v15 = 0;
    do
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, v15++, 0.0);
    while (v15 < (int)(-1431655765 * ((*((_QWORD *)v1 + 11) - *((_QWORD *)v1 + 10)) >> 4)));
  }
  v16 = *(_QWORD *)v1;
  v17 = *((_QWORD *)v1 + 1);
  if (*(_QWORD *)v1 != v17)
  {
    do
    {
      v18 = *(_QWORD *)(v16 + 4);
      v19 = (double)v18;
      if (v18 < (uint64_t)0x8000000000000003)
        v19 = -INFINITY;
      if (v18 > 0x7FFFFFFFFFFFFFFDLL)
        v19 = INFINITY;
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, *(_DWORD *)v16, v19);
      v16 += 12;
    }
    while (v16 != v17);
  }
  *((_QWORD *)v1 + 5) = 0x3FF0000000000000;
  if (*((int *)v31 + 40) >= 1)
  {
    v20 = 0;
    while (1)
    {
      v21 = *((_QWORD *)v1 + 2423);
      v22 = *(unsigned __int8 **)(v21 + 120);
      if (v22)
      {
        v23 = atomic_load(v22);
        if ((v23 & 1) != 0)
          break;
      }
      if (fmax(*(double *)(v21 + 104) - *(double *)(v21 + 112), 0.0) <= 0.0)
        break;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
      if (*(_QWORD *)(v21 + 24) <= CurrentTimeNanos - *(_QWORD *)(v21 + 8))
        v25 = CurrentTimeNanos - *(_QWORD *)(v21 + 8);
      else
        v25 = *(_QWORD *)(v21 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v21 + 32), v25);
      *(_QWORD *)(v21 + 8) = CurrentTimeNanos;
      if (*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8 * *(int *)(v21 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v21 + 16))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_46;
        v27 = *(double *)(v21 + 96);
        if (*(_BYTE *)(v21 + 72))
        {
          v28 = v27
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v26) - *(_QWORD *)(v21 + 80) + *(_QWORD *)(v21 + 88))
              * -0.000000001;
          if (v28 <= 0.0001)
            goto LABEL_46;
        }
        else
        {
          v28 = v27 + (double)*(uint64_t *)(v21 + 88) * -0.000000001;
          if (v28 <= 0.0001)
          {
LABEL_46:
            *(_QWORD *)(v21 + 16) = 0;
            break;
          }
        }
        *(_QWORD *)(v21 + 16) = *(_QWORD *)(v21 + 8) + (uint64_t)(v28 * 1000000000.0);
      }
      operations_research::sat::FeasibilityPump::L1DistanceMinimize(v1);
      if (operations_research::sat::FeasibilityPump::SolveLp(v1))
      {
        if (!v31[1])
        {
          this = (operations_research::sat::FeasibilityPump *)operations_research::sat::FeasibilityPump::Round(v1);
          if ((_DWORD)this)
          {
            if (v31[73])
              operations_research::sat::FeasibilityPump::MaybePushToRepo(v1);
            if (++v20 < *((_DWORD *)v31 + 40))
              continue;
          }
        }
      }
      break;
    }
  }
  v29 = v31[164];
  if (!v31[164])
  {
    operations_research::sat::FeasibilityPump::PrintStats(v1);
    operations_research::sat::FeasibilityPump::MaybePushToRepo(v1);
  }
  return v29 == 0;
}

void operations_research::sat::FeasibilityPump::InitializeWorkingLP(operations_research::sat::FeasibilityPump *this)
{
  operations_research::glop::LinearProgram *v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int NewConstraint;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  _BOOL4 IsVariableBinary;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  int *v52;
  unint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  _QWORD *v67;
  std::vector<int>::size_type v68;
  int *v69;
  int v70;
  int NewVariable;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  __n128 v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int *__p;
  operations_research::sat::FeasibilityPump *i;
  int *v83;
  std::vector<int>::value_type __u[2];
  int v85;
  uint64_t *v86;
  int *v87;
  uint64_t v88;
  char *v89;

  v2 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  operations_research::glop::LinearProgram::Clear((operations_research::sat::FeasibilityPump *)((char *)this + 80));
  if (*((_QWORD *)this + 2404) != *((_QWORD *)this + 2403))
  {
    v3 = 0;
    do
    {
      LODWORD(v87) = v3;
      LODWORD(v86) = operations_research::glop::LinearProgram::CreateNewVariable(v2);
      if ((_DWORD)v87 != (_DWORD)v86)
      {
        *(_QWORD *)__u = google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>((int)&v87, (int)&v86, "ColIndex(i) == lp_data_.CreateNewVariable()");
        if (*(_QWORD *)__u)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v87, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 217, (uint64_t **)__u);
          google::LogMessage::stream((google::LogMessage *)&v87);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v87);
        }
      }
      operations_research::glop::LinearProgram::SetVariableType((uint64_t)v2, v3++, 1);
    }
    while (v3 < (uint64_t)(*((_QWORD *)this + 2404) - *((_QWORD *)this + 2403)) >> 2);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  for (i = this; v4 != v5; v4 += 5)
  {
    NewConstraint = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
    v7 = v4[1];
    v8 = (double)*v4;
    v9 = -INFINITY;
    if (*v4 < (uint64_t)0x8000000000000003)
      v8 = -INFINITY;
    if (*v4 > 0x7FFFFFFFFFFFFFFDLL)
      v8 = INFINITY;
    if (v7 >= (uint64_t)0x8000000000000003)
      v9 = (double)v7;
    if (v7 > 0x7FFFFFFFFFFFFFFDLL)
      v9 = INFINITY;
    v10 = NewConstraint;
    operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v2, NewConstraint, v8, v9);
    v12 = v4[2];
    for (j = v4[3]; v12 != j; v12 += 12)
    {
      v13 = *(_QWORD *)(v12 + 4);
      v14 = (double)v13;
      if (v13 < (uint64_t)0x8000000000000003)
        v14 = -INFINITY;
      if (v13 > 0x7FFFFFFFFFFFFFFDLL)
        v14 = INFINITY;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v10, *(_DWORD *)v12, v14);
    }
  }
  v15 = *(_QWORD *)i;
  v16 = *((_QWORD *)i + 1);
  if (*(_QWORD *)i != v16)
  {
    do
    {
      v17 = *(_QWORD *)(v15 + 4);
      v18 = (double)v17;
      if (v17 < (uint64_t)0x8000000000000003)
        v18 = -INFINITY;
      if (v17 > 0x7FFFFFFFFFFFFFFDLL)
        v18 = INFINITY;
      operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, *(_DWORD *)v15, v18);
      v15 += 12;
    }
    while (v15 != v16);
  }
  v19 = *((_QWORD *)i + 2404) - *((_QWORD *)i + 2403);
  if ((int)(v19 >> 2) >= 1)
  {
    v20 = 0;
    v21 = (v19 >> 2);
    do
    {
      v22 = *(_DWORD *)(*((_QWORD *)i + 2403) + 4 * v20);
      v23 = *(_QWORD *)(*((_QWORD *)i + 2424) + 144);
      v24 = *(_QWORD *)(v23 + 20 * v22);
      v25 = (double)v24;
      v26 = -INFINITY;
      if (v24 < (uint64_t)0x8000000000000003)
        v25 = -INFINITY;
      if (v24 > 0x7FFFFFFFFFFFFFFDLL)
        v25 = INFINITY;
      v27 = *(_QWORD *)(v23 + 20 * (v22 ^ 1));
      if (v27 <= 0x7FFFFFFFFFFFFFFDLL)
        v26 = (double)-v27;
      if (v27 < (uint64_t)0x8000000000000003)
        v26 = INFINITY;
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v20++, v25, v26);
    }
    while (v21 != v20);
  }
  *((_QWORD *)i + 4) = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v29 = *((_QWORD *)i + 10);
  v28 = *((_QWORD *)i + 11);
  v30 = operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  v79 = v29;
  v80 = v28;
  v32 = *(int **)v30;
  v31 = *(int **)(v30 + 8);
  if (*(int **)v30 != v31)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v83 = *(int **)(v30 + 8);
    while (1)
    {
      v36 = *v32;
      IsVariableBinary = operations_research::glop::LinearProgram::IsVariableBinary(v2, *v32);
      v38 = *((_QWORD *)i + 2412);
      v39 = (unint64_t)v36 >> 6;
      v40 = 1 << v36;
      if (IsVariableBinary)
      {
        v41 = *(_QWORD *)(v38 + 8 * v39) | v40;
        *(_QWORD *)(v38 + 8 * v39) = v41;
        if ((v41 & v40) == 0)
          goto LABEL_49;
      }
      else
      {
        v42 = *(_QWORD *)(v38 + 8 * v39) & ~v40;
        *(_QWORD *)(v38 + 8 * v39) = v42;
        if ((v42 & v40) == 0)
        {
LABEL_49:
          if (v35 < v34)
          {
            *(_DWORD *)v35 = v36;
            v43 = (uint64_t)(v35 + 4);
LABEL_68:
            v88 = v43;
            v35 = (char *)v43;
            goto LABEL_69;
          }
          v44 = v34;
          v45 = (v35 - v33) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v47 = v44 - v33;
          v48 = (v44 - v33) >> 1;
          if (v48 > v46)
            v46 = v48;
          if (v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v46;
          if (v49)
          {
            if (v49 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v50 = v49;
            v51 = operator new(4 * v49);
            v49 = v50;
            v52 = (int *)&v51[4 * v45];
            *v52 = v36;
            v43 = (uint64_t)(v52 + 1);
            if (v35 == v33)
              goto LABEL_65;
LABEL_62:
            v53 = v35 - 4 - v33;
            if (v53 < 0xBC)
            {
              v54 = v35;
              goto LABEL_64;
            }
            if (&v51[v35 - v33 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v35 - v33 - 4])
            {
              v54 = v35;
              goto LABEL_64;
            }
            if (&v35[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v35 - 4)
            {
              v54 = v35;
              goto LABEL_64;
            }
            if ((unint64_t)(v33 - v51) < 0x20)
            {
              v54 = v35;
              goto LABEL_64;
            }
            v56 = (v53 >> 2) + 1;
            v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            v54 = &v35[-v57];
            v52 = (int *)((char *)v52 - v57);
            v58 = &v51[4 * v45 - 16];
            v59 = v35 - 16;
            v60 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              *v58 = v61;
              v58 -= 2;
              v59 -= 32;
              v60 -= 8;
            }
            while (v60);
            if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_64:
                v55 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *--v52 = v55;
              }
              while (v54 != v33);
            }
          }
          else
          {
            v51 = 0;
            v52 = (int *)(4 * v45);
            *(_DWORD *)(4 * v45) = v36;
            v43 = 4 * v45 + 4;
            if (v35 != v33)
              goto LABEL_62;
          }
LABEL_65:
          v34 = &v51[4 * v49];
          v87 = v52;
          v88 = v43;
          v89 = v34;
          if (v33)
            operator delete(v33);
          v33 = (char *)v52;
          v31 = v83;
          goto LABEL_68;
        }
      }
LABEL_69:
      *((double *)i + 4) = fabs(operations_research::glop::LinearProgram::GetObjectiveCoefficientForMinimizationVersion((uint64_t)v2, v36))+ *((double *)i + 4);
      if (++v32 == v31)
        goto LABEL_82;
    }
  }
  v35 = 0;
LABEL_82:
  v62 = (uint64_t *)operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  v64 = *v62;
  v63 = v62[1];
  v85 = 0;
  v65 = v63 - v64;
  *(_QWORD *)__u = v65 >> 2;
  if (!v65)
  {
    v86 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)__u, (int)&v85, "lp_data_.IntegerVariablesList().size() > 0");
    if (v86)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 258, &v86);
      google::LogMessage::stream((google::LogMessage *)__u);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__u);
    }
  }
  v66 = *((double *)i + 4);
  v67 = (_QWORD *)operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  *((double *)i + 4) = v66 / (double)(unint64_t)((uint64_t)(v67[1] - *v67) >> 2);
  __p = v87;
  if (v87 != (int *)v35)
  {
    __u[0] = -1;
    v68 = (int)(-1431655765 * ((v80 - v79) >> 4));
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19072), v68, __u);
    __u[0] = -1;
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19096), v68, __u);
    __u[0] = -1;
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19120), v68, __u);
    v69 = __p;
    do
    {
      v70 = *v69;
      NewVariable = operations_research::glop::LinearProgram::CreateNewVariable(v2);
      *(_DWORD *)(*((_QWORD *)i + 2384) + 4 * v70) = NewVariable;
      v72 = NewVariable;
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, NewVariable, 0.0, INFINITY);
      v73 = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
      *(_DWORD *)(*((_QWORD *)i + 2387) + 4 * v70) = v73;
      v74 = v73;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v73, v72, 1.0);
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v74, v70, -1.0);
      v75 = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
      *(_DWORD *)(*((_QWORD *)i + 2390) + 4 * v70) = v75;
      v76 = v75;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v75, v72, 1.0);
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v76, v70, 1.0);
      ++v69;
    }
    while (v69 != (int *)v35);
  }
  v77.n128_f64[0] = operations_research::glop::LpScalingHelper::Scale((operations_research::sat::FeasibilityPump *)((char *)i + 19144), (float64x2_t **)v2);
  operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(v2, 0, v78, v77);
  if (__p)
    operator delete(__p);
}

void sub_22DB577AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB577B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FeasibilityPump::L1DistanceMinimize(operations_research::sat::FeasibilityPump *this)
{
  operations_research::glop::LinearProgram *v2;
  unint64_t v3;
  size_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  unint64_t v14;
  float64x2_t v15;
  double *v16;
  double *v17;
  unint64_t v18;
  double v19;
  uint64_t v21;
  int *v22;
  int *v23;
  unint64_t v24;
  double v25;
  double v26;
  int SlackVariable;
  double v28;
  int v29;
  double v30;
  uint64_t v31;

  v2 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  v3 = (unint64_t)(-1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4)) << 32;
  if (!v3)
  {
    v5 = 0;
    v6 = (float64x2_t *)*((_QWORD *)this + 27);
    v7 = *((_QWORD *)this + 28) - (_QWORD)v6;
    if ((int)(v7 >> 3) < 1)
      goto LABEL_14;
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = (0xFFFFFFFD55555558 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4)) & 0x7FFFFFFFFLL;
  v5 = (float64x2_t *)operator new(v4);
  bzero(v5, v4);
  v6 = (float64x2_t *)*((_QWORD *)this + 27);
  v7 = *((_QWORD *)this + 28) - (_QWORD)v6;
  if ((int)(v7 >> 3) >= 1)
  {
LABEL_6:
    v8 = 0;
    v9 = (v7 >> 3);
    v10 = *((double *)this + 5);
    if (v9 < 4)
      goto LABEL_11;
    if ((unint64_t)((char *)v5 - (char *)v6) < 0x20)
      goto LABEL_11;
    v11 = (v7 >> 3) & 3;
    v8 = v9 - v11;
    v12 = v6 + 1;
    v13 = v5 + 1;
    v14 = v9 - v11;
    do
    {
      v15 = vmulq_n_f64(*v12, v10);
      v13[-1] = vmulq_n_f64(v12[-1], v10);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11)
    {
LABEL_11:
      v16 = &v6->f64[v8];
      v17 = &v5->f64[v8];
      v18 = v8 - v9;
      do
      {
        v19 = *v16++;
        *v17++ = v10 * v19;
      }
      while (!__CFADD__(v18++, 1));
    }
  }
LABEL_14:
  v21 = operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  v22 = *(int **)v21;
  v23 = *(int **)(v21 + 8);
  if (*(int **)v21 != v23)
  {
    do
    {
      v24 = *v22;
      v25 = *((double *)this + 5);
      v26 = 1.0 - v25;
      if (((*(_QWORD *)(*((_QWORD *)this + 2412) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      {
        v5->f64[v24] = v26 * *((double *)this + 4) * (double)(1 - 2 * *(_QWORD *)(*((_QWORD *)this + 2442) + 8 * v24))
                     + v25 * *(double *)(*((_QWORD *)this + 27) + 8 * v24);
      }
      else
      {
        v5->f64[*(int *)(*((_QWORD *)this + 2384) + 4 * v24)] = v26 * *((double *)this + 4);
        SlackVariable = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)v2, *(_DWORD *)(*((_QWORD *)this + 2387) + 4 * v24));
        v28 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19144, SlackVariable);
        operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, SlackVariable, -INFINITY, v28 * (double)*(uint64_t *)(*((_QWORD *)this + 2442) + 8 * v24));
        v29 = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)v2, *(_DWORD *)(*((_QWORD *)this + 2390) + 4 * v24));
        v30 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19144, v29);
        operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v29, -INFINITY, -(v30 * (double)*(uint64_t *)(*((_QWORD *)this + 2442) + 8 * v24)));
      }
      ++v22;
    }
    while (v22 != v23);
  }
  if ((int)(-1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4)) >= 1)
  {
    v31 = 0;
    do
    {
      operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, v31, v5->f64[v31]);
      ++v31;
    }
    while (v31 < (int)(-1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4)));
    *((double *)this + 5) = *((double *)this + 5) * 0.8;
    goto LABEL_25;
  }
  *((double *)this + 5) = *((double *)this + 5) * 0.8;
  if (v5)
LABEL_25:
    operator delete(v5);
}

void sub_22DB57B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::FeasibilityPump::SolveLp(operations_research::sat::FeasibilityPump *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int ProblemStatus;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  double VariableValue;
  double v23;
  double v24;
  int *v25;
  int *v26;
  uint64_t v27;
  double v28;
  _BYTE v29[16];
  void *__p;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;

  v2 = *((_QWORD *)this + 2404);
  v3 = *((_QWORD *)this + 2403);
  if (*off_254079580[0] >= 3
    && (off_254079580[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079580, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 364);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LP relaxation: ", 15);
    operations_research::glop::LinearProgram::GetDimensionString((operations_research::sat::FeasibilityPump *)((char *)this + 80), (uint64_t)&__p);
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v32 >= 0)
      v7 = HIBYTE(v32);
    else
      v7 = (uint64_t)v31;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)v34);
  }
  operations_research::glop::RevisedSimplex::Solve((operations_research::sat::FeasibilityPump *)((char *)this + 560), (operations_research::sat::FeasibilityPump *)((char *)this + 80), *((operations_research::TimeLimit **)this + 2423), (uint64_t)&__p);
  *((_QWORD *)this + 2450) += operations_research::glop::RevisedSimplex::GetNumberOfIterations((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  if ((_DWORD)__p)
  {
    if (*off_254079588[0] >= 1
      && (off_254079588[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079588, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 369);
      v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v33 & 0x80u) == 0)
        v11 = &v31;
      else
        v11 = v31;
      if ((v33 & 0x80u) == 0)
        v12 = v33;
      else
        v12 = v32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
    }
    operations_research::glop::RevisedSimplex::ClearStateForNextSolve((uint64_t)this + 560);
  }
  else
  {
    if (*off_254079590[0] >= 3
      && (off_254079590[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079590, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 377);
      v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v29);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"simplex status: ", 16);
      ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560));
      operations_research::glop::GetProblemStatusString(ProblemStatus, (uint64_t)v34);
      if ((v35 & 0x80u) == 0)
        v16 = v34;
      else
        v16 = (void **)v34[0];
      if ((v35 & 0x80u) == 0)
        v17 = v35;
      else
        v17 = (uint64_t)v34[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      if ((char)v35 < 0)
        operator delete(v34[0]);
      google::LogMessage::~LogMessage((google::LogMessage *)v29);
    }
    if (operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) != 1)
    {
      *((_QWORD *)this + 2439) = 0;
      if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560))
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 8
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 7
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 11)
      {
        *((_BYTE *)this + 19448) = 1;
        if ((int)((unint64_t)(v2 - v3) >> 2) >= 1)
        {
          v20 = 0;
          v21 = ((unint64_t)(v2 - v3) >> 2);
          do
          {
            VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 560, v20);
            v23 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)this + 19144, v20, VariableValue);
            *(double *)(*((_QWORD *)this + 2433) + 8 * v20) = v23;
            v24 = vabdd_f64(v23, round(v23));
            if (*((double *)this + 2439) >= v24)
              v24 = *((double *)this + 2439);
            *((double *)this + 2439) = v24;
            ++v20;
          }
          while (v21 != v20);
        }
        *((_QWORD *)this + 2432) = 0;
        v25 = *(int **)this;
        v26 = (int *)*((_QWORD *)this + 1);
        if (*(int **)this != v26)
        {
          v27 = *((_QWORD *)this + 2433);
          v28 = 0.0;
          do
          {
            v28 = v28 + *(double *)(v27 + 8 * *v25) * (double)*(uint64_t *)(v25 + 1);
            *((double *)this + 2432) = v28;
            v25 += 3;
          }
          while (v25 != v26);
        }
        *((_BYTE *)this + 19449) = *((double *)this + 2439) < 0.0001;
      }
      v18 = 1;
      if ((char)v33 < 0)
        goto LABEL_39;
      return v18;
    }
  }
  v18 = 0;
  if ((char)v33 < 0)
LABEL_39:
    operator delete(v31);
  return v18;
}

void sub_22DB57F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, void *__p, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::FeasibilityPump::Round(operations_research::sat::FeasibilityPump *this)
{
  float64x2_t *v2;
  uint64_t v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  float64x2_t *v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  double *v15;
  double v16;

  switch(*(_DWORD *)(*((_QWORD *)this + 2422) + 192))
  {
    case 0:
      if (!*((_BYTE *)this + 19448))
        return 0;
      v2 = (float64x2_t *)*((_QWORD *)this + 2433);
      v3 = *((_QWORD *)this + 2434) - (_QWORD)v2;
      if (!v3)
        goto LABEL_19;
      v4 = v3 >> 3;
      v5 = (int64x2_t *)*((_QWORD *)this + 2442);
      if (v4 <= 1)
        v4 = 1;
      if (v4 >= 4)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        v8 = v2 + 1;
        v9 = v5 + 1;
        v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v11 = vcvtq_s64_f64(vrndaq_f64(*v8));
          v9[-1] = vcvtq_s64_f64(vrndaq_f64(v8[-1]));
          *v9 = v11;
          v8 += 2;
          v9 += 2;
          v10 -= 4;
        }
        while (v10);
        if (v4 == v6)
          goto LABEL_19;
      }
      else
      {
        v6 = 0;
      }
      v12 = v4 - v6;
      v13 = v6;
      v14 = &v5->i64[v13];
      v15 = &v2->f64[v13];
      do
      {
        v16 = *v15++;
        *v14++ = llround(v16);
        --v12;
      }
      while (v12);
LABEL_19:
      *((_BYTE *)this + 19520) = 1;
      goto LABEL_20;
    case 1:
      if (operations_research::sat::FeasibilityPump::LockBasedRounding((std::vector<int> *)this))
        goto LABEL_20;
      return 0;
    case 2:
      if ((operations_research::sat::FeasibilityPump::PropagationRounding(this) & 1) != 0)
        goto LABEL_20;
      return 0;
    case 3:
      if (operations_research::sat::FeasibilityPump::ActiveLockBasedRounding(this))
        goto LABEL_20;
      return 0;
    default:
LABEL_20:
      operations_research::sat::FeasibilityPump::FillIntegerSolutionStats((int **)this);
      return 1;
  }
}

void operations_research::sat::FeasibilityPump::MaybePushToRepo(operations_research::sat::FeasibilityPump *this)
{
  uint64_t v1;
  uint64_t v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  void *__p;
  void *v14;
  char *v15;
  int v16;

  v1 = *((_QWORD *)this + 2427);
  if (v1)
  {
    v3 = *((int *)this + 18);
    v14 = 0;
    v15 = 0;
    __p = 0;
    if ((_DWORD)v3)
    {
      if ((v3 & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      __p = operator new(8 * v3);
      v15 = (char *)__p + 8 * v3;
      memset_pattern16(__p, &unk_22DCE6720, 8 * v3);
      v14 = v15;
    }
    if (*((_BYTE *)this + 19449))
    {
      v4 = (int *)*((_QWORD *)this + 2403);
      v5 = (int *)*((_QWORD *)this + 2404);
      if (v4 != v5)
      {
        do
        {
          v6 = *(_QWORD *)(*((_QWORD *)this + 2430) + 96);
          if (*v4 < (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 2430) + 104) - v6) >> 2))
          {
            v7 = *(unsigned int *)(v6 + 4 * *v4);
            if ((v7 & 0x80000000) == 0 && (int)v7 < *((_DWORD *)this + 18))
            {
              v16 = *v4;
              *((_QWORD *)__p + v7) = *(_QWORD *)(*((_QWORD *)this + 2433)
                                                + 8
                                                * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2406, &v16));
            }
          }
          ++v4;
        }
        while (v4 != v5);
        v1 = *((_QWORD *)this + 2427);
      }
      operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(v1, (absl::lts_2020_02_25::Mutex *)&__p);
    }
    if (*((_BYTE *)this + 19521))
    {
      v8 = (int *)*((_QWORD *)this + 2403);
      for (i = (int *)*((_QWORD *)this + 2404); v8 != i; ++v8)
      {
        v10 = *(_QWORD *)(*((_QWORD *)this + 2430) + 96);
        if (*v8 < (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 2430) + 104) - v10) >> 2))
        {
          v11 = *(unsigned int *)(v10 + 4 * *v8);
          if ((v11 & 0x80000000) == 0 && (int)v11 < *((_DWORD *)this + 18))
          {
            v16 = *v8;
            v12 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2406, &v16);
            *((double *)__p + v11) = (double)*(uint64_t *)(*((_QWORD *)this + 2442) + 8 * *v12);
          }
        }
      }
      operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(*((_QWORD *)this + 2427), (absl::lts_2020_02_25::Mutex *)&__p);
    }
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_22DB58314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v17[16];

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = a1[1];
  v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 8 * v13) == (_DWORD)v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 8 * v13 + 4;
}

void sub_22DB58478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

BOOL operations_research::sat::FeasibilityPump::LockBasedRounding(std::vector<int> *this)
{
  int end_low;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  int v10;
  int v11;
  BOOL v12;
  std::vector<int>::pointer v13;
  uint64_t v15;
  unint64_t v16;
  std::vector<int>::pointer begin;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *SparseColumn;
  uint64_t v22;
  double *v23;
  int *v24;
  int v25;
  int SlackVariable;
  int v27;
  double v28;
  double v29;
  int v30;
  std::vector<int>::pointer *p_end;
  std::vector<int>::value_type v32;
  std::vector<int>::value_type __x;

  end_low = LOBYTE(this[810].__end_);
  if (LOBYTE(this[810].__end_))
  {
    p_end = &this[810].__end_;
    if (this[805].__begin_ == this[805].__end_)
    {
      v15 = (char *)this[801].__end_ - (char *)this[801].__begin_;
      v16 = (int)(v15 >> 2);
      __x = 0;
      if (v15 << 30)
        std::vector<int>::__append(this + 805, (int)(v15 >> 2), &__x);
      v32 = 0;
      begin = this[806].__begin_;
      v18 = this[806].__end_ - begin;
      if (v16 <= v18)
      {
        if (v16 < v18)
          this[806].__end_ = &begin[v16];
      }
      else
      {
        std::vector<int>::__append(this + 806, v16 - v18, &v32);
      }
      if ((int)((unint64_t)v15 >> 2) >= 1)
      {
        v19 = 0;
        v20 = ((unint64_t)v15 >> 2);
        do
        {
          SparseColumn = (_QWORD *)operations_research::glop::LinearProgram::GetSparseColumn(&this[3].__end_, v19);
          v22 = SparseColumn[1];
          if (v22 >= 1)
          {
            v24 = (int *)SparseColumn[3];
            v23 = (double *)SparseColumn[4];
            do
            {
              v25 = *v24++;
              SlackVariable = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)&this[3].__end_, v25);
              v27 = *(double *)&this[10].__begin_[2 * SlackVariable] > -INFINITY;
              v28 = *v23++;
              v29 = v28;
              if (v28 <= 0.0)
                v30 = *(double *)&this[11].__begin_[2 * SlackVariable] < INFINITY;
              else
                v30 = *(double *)&this[10].__begin_[2 * SlackVariable] > -INFINITY;
              if (v29 > 0.0)
                v27 = *(double *)&this[11].__begin_[2 * SlackVariable] < INFINITY;
              this[805].__begin_[v19] += v30;
              this[806].__begin_[v19] += v27;
              --v22;
            }
            while (v22);
          }
          ++v19;
        }
        while (v19 != v20);
      }
    }
    end = this[811].__end_;
    v4 = this[811].__begin_;
    v5 = (char *)end - (char *)v4;
    if (end != v4)
    {
      v6 = 0;
      v7 = v5 >> 3;
      if (v7 <= 1)
        v7 = 1;
      do
      {
        while (1)
        {
          while (1)
          {
            v8 = *(double *)&v4[2 * v6];
            v9 = round(v8);
            if (vabdd_f64(v8, v9) >= 0.1)
            {
              v10 = this[805].__begin_[v6];
              v11 = this[806].__begin_[v6];
              v12 = v10 <= v11;
              if (v10 != v11)
                break;
            }
            *(_QWORD *)&this[814].__begin_[2 * v6++] = (uint64_t)v9;
            if (v7 == v6)
              goto LABEL_14;
          }
          v13 = this[814].__begin_;
          if (v12)
            break;
          *(_QWORD *)&v13[2 * v6++] = vcvtmd_s64_f64(v8);
          if (v7 == v6)
            goto LABEL_14;
        }
        *(_QWORD *)&v13[2 * v6++] = vcvtpd_s64_f64(v8);
      }
      while (v7 != v6);
    }
LABEL_14:
    *((_BYTE *)p_end + 72) = 1;
  }
  return end_low != 0;
}

BOOL operations_research::sat::FeasibilityPump::ActiveLockBasedRounding(operations_research::sat::FeasibilityPump *this)
{
  int v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  _QWORD *SparseColumn;
  uint64_t v10;
  int v11;
  int v12;
  double *v13;
  int *v14;
  int v15;
  int ConstraintStatus;
  double v17;
  uint64_t v18;
  char *v20;
  int v21;

  v1 = *((unsigned __int8 *)this + 19448);
  if (*((_BYTE *)this + 19448))
  {
    v20 = (char *)this + 19448;
    v21 = *((unsigned __int8 *)this + 19448);
    v3 = *((_QWORD *)this + 2404) - *((_QWORD *)this + 2403);
    if ((int)(v3 >> 2) >= 1)
    {
      v4 = 0;
      v5 = (v3 >> 2);
      v6 = *((_QWORD *)this + 2433);
      do
      {
        while (1)
        {
          while (1)
          {
            v7 = *(double *)(v6 + 8 * v4);
            v8 = round(v7);
            if (vabdd_f64(v7, v8) < 0.1)
              *(_QWORD *)(*((_QWORD *)this + 2442) + 8 * v4) = (uint64_t)v8;
            SparseColumn = (_QWORD *)operations_research::glop::LinearProgram::GetSparseColumn((_QWORD *)this + 10, v4);
            v10 = SparseColumn[1];
            if (v10 >= 1)
            {
              v11 = 0;
              v12 = 0;
              v14 = (int *)SparseColumn[3];
              v13 = (double *)SparseColumn[4];
              do
              {
                v15 = *v14++;
                ConstraintStatus = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)this + 560, v15);
                if (ConstraintStatus == 3)
                {
                  if (*v13 <= 0.0)
                    ++v11;
                  else
                    ++v12;
                }
                else if (ConstraintStatus == 2)
                {
                  if (*v13 > 0.0)
                    ++v11;
                  else
                    ++v12;
                }
                ++v13;
                --v10;
              }
              while (v10);
              if (v12 != v11)
                break;
            }
            v6 = *((_QWORD *)this + 2433);
            *(_QWORD *)(*((_QWORD *)this + 2442) + 8 * v4) = llround(*(double *)(v6 + 8 * v4));
            if (++v4 == v5)
              goto LABEL_23;
          }
          v6 = *((_QWORD *)this + 2433);
          v17 = *(double *)(v6 + 8 * v4);
          v18 = *((_QWORD *)this + 2442);
          if (v12 <= v11)
            break;
          *(_QWORD *)(v18 + 8 * v4++) = vcvtmd_s64_f64(v17);
          if (v4 == v5)
            goto LABEL_23;
        }
        *(_QWORD *)(v18 + 8 * v4++) = vcvtpd_s64_f64(v17);
      }
      while (v4 != v5);
    }
LABEL_23:
    v20[72] = 1;
    v1 = v21;
  }
  return v1 != 0;
}

uint64_t operations_research::sat::FeasibilityPump::PropagationRounding(operations_research::sat::FeasibilityPump *this)
{
  operations_research::sat::FeasibilityPump *v1;
  uint64_t v2;
  double *v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  char *v7;
  _BYTE *v8;
  double *v9;
  unint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _BYTE *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  unint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  absl::lts_2020_02_25 *v78;
  int *v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 v84;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  operations_research::Domain *v94;
  double v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  _BOOL4 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  int AssociatedLiteral;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  int v115;
  _QWORD *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  double *__p;
  unint64_t __pa;
  operations_research::sat::FeasibilityPump *v123;
  unint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  double *v129;
  __int128 v130;
  char *v131;
  void *v132;
  _DWORD *v133;
  char *v134;

  if (!*((_BYTE *)this + 19448))
    return 0;
  v1 = this;
  v119 = (char *)this + 19448;
  operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)this + 2428));
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v130 = 0uLL;
  v131 = 0;
  v128 = 0uLL;
  v129 = 0;
  v2 = *((_QWORD *)v1 + 2433);
  if (*((_QWORD *)v1 + 2434) != v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)&v130 + 1);
    __p = (double *)*((_QWORD *)&v128 + 1);
    v123 = v1;
    while (1)
    {
      v11 = vabdd_f64(round(*(double *)(v2 + 8 * v5)), *(double *)(v2 + 8 * v5));
      if (((*(_QWORD *)(*((_QWORD *)v1 + 2412) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        if (v4 >= (unint64_t)v7)
        {
          v12 = v6;
          v13 = (uint64_t)(v4 - (_QWORD)v8) >> 4;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 60)
          {
            *((_QWORD *)&v130 + 1) = v10;
            v131 = v7;
            v129 = v6;
            *(_QWORD *)&v130 = v8;
            *(_QWORD *)&v128 = v9;
            *((_QWORD *)&v128 + 1) = __p;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v7 - v8) >> 3 > v14)
            v14 = (v7 - v8) >> 3;
          if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
          {
            if (v15 >> 60)
            {
              *((_QWORD *)&v130 + 1) = v10;
              v131 = v7;
              v129 = v12;
              *(_QWORD *)&v130 = v8;
              *(_QWORD *)&v128 = v9;
              *((_QWORD *)&v128 + 1) = __p;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v16 = (char *)operator new(16 * v15);
            v17 = (uint64_t)&v16[16 * v13];
            *(double *)v17 = v11;
            *(_DWORD *)(v17 + 8) = v5;
            if ((_BYTE *)v4 != v8)
            {
LABEL_17:
              v18 = v17;
              do
              {
                v19 = (_BYTE *)(v18 - 16);
                *(_OWORD *)(v18 - 16) = *(_OWORD *)(v4 - 16);
                v4 -= 16;
                v18 -= 16;
              }
              while ((_BYTE *)v4 != v8);
              v7 = &v16[16 * v15];
              v10 = v17 + 16;
              if (v8)
LABEL_20:
                operator delete(v8);
LABEL_21:
              v4 = v10;
              v8 = v19;
              v6 = v12;
              v1 = v123;
              goto LABEL_5;
            }
          }
          else
          {
            v16 = 0;
            v17 = 16 * v13;
            *(double *)v17 = v11;
            *(_DWORD *)(v17 + 8) = v5;
            if ((_BYTE *)v4 != v8)
              goto LABEL_17;
          }
          v19 = (_BYTE *)v17;
          v7 = &v16[16 * v15];
          v10 = v17 + 16;
          if (v8)
            goto LABEL_20;
          goto LABEL_21;
        }
        *(double *)v4 = v11;
        *(_DWORD *)(v4 + 8) = v5;
        v10 = v4 + 16;
        v4 += 16;
      }
      else
      {
        if (v3 >= v6)
        {
          v20 = ((char *)v3 - (char *)v9) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
          {
            *((_QWORD *)&v130 + 1) = v10;
            v131 = v7;
            v129 = v6;
            *(_QWORD *)&v130 = v8;
            *(_QWORD *)&v128 = v9;
            *((_QWORD *)&v128 + 1) = __p;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          v22 = v6;
          if (v6 - v9 > v21)
            v21 = v6 - v9;
          if ((unint64_t)((char *)v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 >> 60)
            {
              *((_QWORD *)&v130 + 1) = v10;
              v131 = v7;
              v129 = v22;
              *(_QWORD *)&v130 = v8;
              *(_QWORD *)&v128 = v9;
              *((_QWORD *)&v128 + 1) = __p;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v24 = (char *)operator new(16 * v23);
            v25 = (uint64_t)&v24[16 * v20];
            *(double *)v25 = v11;
            *(_DWORD *)(v25 + 8) = v5;
            v1 = v123;
            if (v3 != v9)
            {
LABEL_33:
              v26 = v25;
              do
              {
                v27 = (double *)(v26 - 16);
                *(_OWORD *)(v26 - 16) = *((_OWORD *)v3 - 1);
                v3 -= 2;
                v26 -= 16;
              }
              while (v3 != v9);
              v6 = (double *)&v24[16 * v23];
              v3 = (double *)(v25 + 16);
              __p = (double *)(v25 + 16);
              if (v9)
LABEL_36:
                operator delete(v9);
LABEL_37:
              v9 = v27;
              goto LABEL_5;
            }
          }
          else
          {
            v24 = 0;
            v25 = 16 * v20;
            *(double *)v25 = v11;
            *(_DWORD *)(v25 + 8) = v5;
            v1 = v123;
            if (v3 != v9)
              goto LABEL_33;
          }
          v27 = (double *)v25;
          v6 = (double *)&v24[16 * v23];
          v3 = (double *)(v25 + 16);
          __p = (double *)(v25 + 16);
          if (v9)
            goto LABEL_36;
          goto LABEL_37;
        }
        *v3 = v11;
        *((_DWORD *)v3 + 2) = v5;
        v3 += 2;
        __p = v3;
      }
LABEL_5:
      ++v5;
      v2 = *((_QWORD *)v1 + 2433);
      if (v5 >= (*((_QWORD *)v1 + 2434) - v2) >> 3)
      {
        *((_QWORD *)&v130 + 1) = v10;
        v131 = v7;
        *((_QWORD *)&v128 + 1) = __p;
        v129 = v6;
        goto LABEL_47;
      }
    }
  }
  v4 = 0;
  v9 = 0;
  v8 = 0;
LABEL_47:
  v29 = 126 - 2 * __clz((uint64_t)(v4 - (_QWORD)v8) >> 4);
  *(_QWORD *)&v130 = v8;
  *(_QWORD *)&v128 = v9;
  if ((_BYTE *)v4 == v8)
    v30 = 0;
  else
    v30 = v29;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>((uint64_t)v8, v4, (uint64_t)&v127, v30, 1);
  v31 = (char *)v128;
  v124 = (uint64_t)(*((_QWORD *)&v128 + 1) - v128) >> 4;
  v32 = 126 - 2 * __clz(v124);
  if (*((_QWORD *)&v128 + 1) == (_QWORD)v128)
    v33 = 0;
  else
    v33 = v32;
  v120 = *((_QWORD *)&v128 + 1);
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v128, *((unint64_t *)&v128 + 1), (uint64_t)&v127, v33, 1);
  v34 = v130;
  __pa = v130;
  if (*((_QWORD *)&v130 + 1) != (_QWORD)v130)
  {
    v35 = 0;
    v36 = v133;
    v37 = (uint64_t)(*((_QWORD *)&v130 + 1) - v130) >> 4;
    do
    {
      while (1)
      {
        v38 = (_DWORD *)(v34 + 16 * v35 + 8);
        if (v36 >= (_DWORD *)v134)
          break;
        *v36++ = *v38;
        v133 = v36;
        if (v37 <= ++v35)
          goto LABEL_85;
      }
      v39 = v132;
      v40 = (char *)v36 - (_BYTE *)v132;
      v41 = ((char *)v36 - (_BYTE *)v132) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v43 = v134 - (_BYTE *)v132;
      if ((v134 - (_BYTE *)v132) >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = operator new(4 * v44);
        v46 = &v45[4 * v41];
        *v46 = *v38;
        v47 = (uint64_t)(v46 + 1);
        if (v36 == (_DWORD *)v39)
          goto LABEL_71;
      }
      else
      {
        v45 = 0;
        v46 = (_DWORD *)(4 * v41);
        *(_DWORD *)(4 * v41) = *v38;
        v47 = 4 * v41 + 4;
        if (v36 == (_DWORD *)v39)
          goto LABEL_71;
      }
      v48 = (char *)(v36 - 1) - v39;
      if (v48 >= 0xBC)
      {
        if (&v45[v40 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
        {
          v49 = v36;
        }
        else if ((_DWORD *)((char *)v36 - (v48 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v36 - 1)
        {
          v49 = v36;
        }
        else if ((unint64_t)((char *)v36 - v45 - v40) >= 0x20)
        {
          v51 = (v48 >> 2) + 1;
          v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
          v49 = &v36[v52 / 0xFFFFFFFFFFFFFFFCLL];
          v46 = (_DWORD *)((char *)v46 - v52);
          v53 = &v45[4 * v41 - 16];
          v54 = (__int128 *)(v36 - 4);
          v55 = v51 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v56 = *v54;
            *(v53 - 1) = *(v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 2;
            v55 -= 8;
          }
          while (v55);
          if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_71;
        }
        else
        {
          v49 = v36;
        }
      }
      else
      {
        v49 = v36;
      }
      do
      {
        v50 = *--v49;
        *--v46 = v50;
      }
      while (v49 != (_DWORD *)v39);
LABEL_71:
      v132 = v46;
      v133 = (_DWORD *)v47;
      v134 = &v45[4 * v44];
      if (v39)
        operator delete(v39);
      v34 = __pa;
      v133 = (_DWORD *)v47;
      ++v35;
      v36 = (_DWORD *)v47;
    }
    while (v37 > v35);
  }
LABEL_85:
  if ((char *)v120 != v31)
  {
    v57 = 0;
    v58 = (char *)v133;
    while (1)
    {
      v60 = &v31[16 * v57 + 8];
      if (v58 >= v134)
        break;
      *(_DWORD *)v58 = *(_DWORD *)v60;
      v59 = (uint64_t)(v58 + 4);
LABEL_88:
      v133 = (_DWORD *)v59;
      ++v57;
      v58 = (char *)v59;
      if (v124 <= v57)
        goto LABEL_116;
    }
    v61 = (char *)v132;
    v62 = v58 - (_BYTE *)v132;
    v63 = (v58 - (_BYTE *)v132) >> 2;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v65 = v134 - (_BYTE *)v132;
    if ((v134 - (_BYTE *)v132) >> 1 > v64)
      v64 = v65 >> 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      if (v66 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v67 = operator new(4 * v66);
      v68 = &v67[4 * v63];
      *v68 = *(_DWORD *)v60;
      v59 = (uint64_t)(v68 + 1);
      if (v58 == v61)
        goto LABEL_104;
    }
    else
    {
      v67 = 0;
      v68 = (_DWORD *)(4 * v63);
      *(_DWORD *)(4 * v63) = *(_DWORD *)v60;
      v59 = 4 * v63 + 4;
      if (v58 == v61)
        goto LABEL_104;
    }
    v69 = v58 - 4 - v61;
    if (v69 >= 0xBC)
    {
      if (&v67[v62 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v62 - 4])
      {
        v70 = v58;
      }
      else if (&v58[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v58 - 4)
      {
        v70 = v58;
      }
      else if ((unint64_t)(v58 - v67 - v62) >= 0x20)
      {
        v72 = (v69 >> 2) + 1;
        v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        v70 = &v58[-v73];
        v68 = (_DWORD *)((char *)v68 - v73);
        v74 = &v67[4 * v63 - 16];
        v75 = v58 - 16;
        v76 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 8;
        }
        while (v76);
        if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_104:
          v132 = v68;
          v133 = (_DWORD *)v59;
          v134 = &v67[4 * v66];
          if (v61)
            operator delete(v61);
          goto LABEL_88;
        }
      }
      else
      {
        v70 = v58;
      }
    }
    else
    {
      v70 = v58;
    }
    do
    {
      v71 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *--v68 = v71;
    }
    while (v70 != v61);
    goto LABEL_104;
  }
LABEL_116:
  if (v31)
    operator delete(v31);
  v78 = (absl::lts_2020_02_25 *)__pa;
  if (__pa)
    operator delete((void *)__pa);
  v79 = (int *)v132;
  v80 = v133;
  if (v132 == v133)
  {
LABEL_178:
    operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)v1 + 2428));
    v28 = 1;
    v119[72] = 1;
    goto LABEL_183;
  }
  v125 = v133;
  while (1)
  {
    v81 = *v79;
    v82 = *((_QWORD *)v1 + 2423);
    v83 = *(unsigned __int8 **)(v82 + 120);
    if (v83 && (v84 = atomic_load(v83), (v84 & 1) != 0)
      || fmax(*(double *)(v82 + 104) - *(double *)(v82 + 112), 0.0) <= 0.0)
    {
      v28 = 0;
      goto LABEL_183;
    }
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v78);
    if (*(_QWORD *)(v82 + 24) <= CurrentTimeNanos - *(_QWORD *)(v82 + 8))
      v86 = CurrentTimeNanos - *(_QWORD *)(v82 + 8);
    else
      v86 = *(_QWORD *)(v82 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v82 + 32), v86);
    *(_QWORD *)(v82 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v82 + 40) + 8 * *(int *)(v82 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v82 + 16))
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_180;
      v87 = *(double *)(v82 + 96);
      if (*(_BYTE *)(v82 + 72))
      {
        v78 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v78);
        v88 = v87 + (double)((uint64_t)v78 + *(_QWORD *)(v82 + 88) - *(_QWORD *)(v82 + 80)) * -0.000000001;
        if (v88 <= 0.0001)
          goto LABEL_180;
      }
      else
      {
        v88 = v87 + (double)*(uint64_t *)(v82 + 88) * -0.000000001;
        if (v88 <= 0.0001)
        {
LABEL_180:
          v28 = 0;
          *(_QWORD *)(v82 + 16) = 0;
          goto LABEL_183;
        }
      }
      *(_QWORD *)(v82 + 16) = *(_QWORD *)(v82 + 8) + (uint64_t)(v88 * 1000000000.0);
    }
    v89 = *(_DWORD *)(*((_QWORD *)v1 + 2403) + 4 * v81);
    v90 = **((_QWORD **)v1 + 2429);
    v91 = *(_QWORD *)(*((_QWORD *)v1 + 2424) + 40);
    v92 = *(_QWORD *)(v91 + 12 * v89);
    v127 = v92;
    v93 = *(_QWORD *)(v91 + 12 * (v89 ^ 1));
    v126 = -v93;
    if (!(v92 + v93))
    {
      *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v92;
      goto LABEL_123;
    }
    v94 = (operations_research::Domain *)(v90 + 24 * v89);
    v95 = *(double *)(*((_QWORD *)v1 + 2433) + 8 * v81);
    v96 = vcvtmd_s64_f64(v95);
    v97 = operations_research::Domain::Contains(v94, v96);
    v98 = vcvtpd_s64_f64(v95);
    v99 = v127 <= v96 && v97;
    v100 = operations_research::Domain::Contains(v94, v98);
    v101 = v126 >= v98 && v100;
    v102 = llround(v95);
    if (operations_research::Domain::IsEmpty(v94))
      break;
    v103 = v127;
    if (v127 <= v98 && (v103 = v126, v126 >= v96))
    {
      if (v101 && v99)
      {
        *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v102;
      }
      else if (v101)
      {
        *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v98;
        v102 = v98;
      }
      else if (v99)
      {
        *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v96;
        v102 = v96;
      }
      else
      {
        v109 = *((_QWORD *)v1 + 2426);
        LODWORD(v128) = v89;
        *(_QWORD *)((char *)&v128 + 4) = v102;
        operations_research::sat::IntegerEncoder::Canonicalize(v109, (const char *)v128, SHIDWORD(v102), (uint64_t)&v130);
        v118 = v118 & 0xFFFFFFFF00000000 | HIDWORD(v102);
        v110 = *(_QWORD *)((char *)&v130 + 4);
        v111 = *(_QWORD *)((char *)&v130 + 4) - v102;
        if (*(_QWORD *)((char *)&v130 + 4) - v102 < 0)
          v111 = v102 - *(_QWORD *)((char *)&v130 + 4);
        v112 = -(uint64_t)v131 - v102;
        if (v112 < 0)
          v112 = (uint64_t)&v131[v102];
        if (v111 >= v112)
          v110 = -(uint64_t)v131;
        v113 = *((_QWORD *)v1 + 2442);
        *(_QWORD *)(v113 + 8 * v81) = v110;
        v102 = *(_QWORD *)(v113 + 8 * v81);
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v103;
      v102 = v103;
    }
    if (!operations_research::Domain::Contains(v94, v102))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v130, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 636);
      v117 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"Check failed: domain.Contains(integer_solution_[var_index]) ", 60);
      goto LABEL_187;
    }
    v104 = *((_QWORD *)v1 + 2442);
    *(_QWORD *)&v130 = *(_QWORD *)(v104 + 8 * v81);
    if (v127 > (uint64_t)v130)
    {
      *(_QWORD *)&v128 = google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v130, (int)&v127, "integer_solution_[var_index] >= lb");
      v80 = v125;
      if ((_QWORD)v128)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v130, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 637, (uint64_t **)&v128);
        google::LogMessage::stream((google::LogMessage *)&v130);
        goto LABEL_187;
      }
      v104 = *((_QWORD *)v1 + 2442);
      *(_QWORD *)&v130 = *(_QWORD *)(v104 + 8 * v81);
      if (v126 >= (uint64_t)v130)
      {
LABEL_151:
        v105 = *(_QWORD *)(v104 + 8 * v81);
        if (v105 != v127)
          goto LABEL_172;
        goto LABEL_152;
      }
    }
    else
    {
      v80 = v125;
      *(_QWORD *)&v130 = *(_QWORD *)(v104 + 8 * v81);
      if (v126 >= (uint64_t)v130)
        goto LABEL_151;
    }
    *(_QWORD *)&v128 = google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v130, (int)&v126, "integer_solution_[var_index] <= ub");
    if ((_QWORD)v128)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v130, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 638, (uint64_t **)&v128);
      google::LogMessage::stream((google::LogMessage *)&v130);
LABEL_187:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v130);
    }
    v105 = *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81);
    if (v105 != v127)
    {
LABEL_172:
      v114 = (unsigned int *)*((_QWORD *)v1 + 2426);
      if (v105 == v126)
      {
        LODWORD(v130) = v89;
        *(_QWORD *)((char *)&v130 + 4) = v105;
        v120 = v120 & 0xFFFFFFFF00000000 | HIDWORD(v105);
        AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v114, (const char *)v130, v120);
      }
      else
      {
        AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality((uint64_t)v114, v89, v105);
      }
      goto LABEL_175;
    }
LABEL_152:
    v106 = (unsigned int *)*((_QWORD *)v1 + 2426);
    v107 = 0x7FFFFFFFFFFFFFFFLL;
    if (v105 >= (uint64_t)0x8000000000000002)
      v107 = -v105;
    LODWORD(v130) = v89 ^ 1;
    *(_QWORD *)((char *)&v130 + 4) = v107;
    __pa = __pa & 0xFFFFFFFF00000000 | HIDWORD(v107);
    AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v106, (const char *)v130, SHIDWORD(v107));
LABEL_175:
    v115 = AssociatedLiteral;
    if (!operations_research::sat::SatSolver::FinishPropagation(*((operations_research::sat::SatSolver **)v1
                                                                               + 2428)))
      goto LABEL_182;
    v78 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(*((_QWORD *)v1 + 2428), v115);
    if (*(_BYTE *)(*((_QWORD *)v1 + 2428) + 496))
      goto LABEL_182;
LABEL_123:
    if (++v79 == v80)
      goto LABEL_178;
  }
  *(_QWORD *)(*((_QWORD *)v1 + 2442) + 8 * v81) = v102;
LABEL_182:
  v28 = 0;
  v119[164] = 1;
LABEL_183:
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  return v28;
}

void sub_22DB594E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB594F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB594F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int **operations_research::sat::FeasibilityPump::FillIntegerSolutionStats(int **this)
{
  _BYTE *v1;
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  int *v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (char *)this + 19521;
  this[2441] = 0;
  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v4 = 0;
    v5 = this[2442];
    do
    {
      v4 = (int *)((char *)v4 + *(_QWORD *)(v2 + 1) * *(_QWORD *)&v5[2 * *v2]);
      this[2441] = v4;
      v2 += 3;
    }
    while (v2 != v3);
  }
  *v1 = 1;
  *((_DWORD *)this + 4896) = 0;
  this[2449] = 0;
  v6 = this[6];
  if ((int)(-858993459 * (((char *)this[7] - (char *)v6) >> 3)) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = -858993459 * (((char *)this[7] - (char *)v6) >> 3);
    do
    {
      v14 = (uint64_t *)&v6[10 * v9];
      v15 = (int *)v14[2];
      v16 = (int *)v14[3];
      if (v15 == v16)
      {
        v27 = 0;
LABEL_54:
        v35 = *(_QWORD *)&v6[10 * v9 + 2];
        v28 = __OFSUB__(v27, v35);
        v36 = v27 - v35;
        if (!((v36 < 0) ^ v28 | (v36 == 0)))
          goto LABEL_6;
      }
      else
      {
        v17 = 0;
        while (1)
        {
          v19 = *(_QWORD *)(v15 + 1);
          if (v19 >= 0)
            v20 = *(_QWORD *)(v15 + 1);
          else
            v20 = -v19;
          v21 = 63 - __clz(v20);
          v18 = this[2442];
          v22 = *(_QWORD *)&v18[2 * *v15];
          if (v19)
            v23 = v21;
          else
            v23 = 0;
          if (v22 >= 0)
            v24 = *(_QWORD *)&v18[2 * *v15];
          else
            v24 = -v22;
          v25 = 63 - __clz(v24);
          if (!v22)
            v25 = 0;
          v26 = v23 + v25;
          if (v26 > 61)
          {
            if (v22)
            {
              v28 = 0;
              v29 = v19 == 0;
            }
            else
            {
              v28 = 0;
              v29 = 1;
            }
            if (v29)
            {
              v27 = 0;
            }
            else
            {
              v27 = ((v19 ^ (unint64_t)v22) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              v30 = v20 * v24;
              if (v26 > 0x3E || v30 >= v27)
              {
                v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                  goto LABEL_54;
              }
              else
              {
                if (v27 >= 0)
                  v27 = v30;
                else
                  v27 = -(uint64_t)v30;
                v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                  goto LABEL_54;
              }
            }
          }
          else
          {
            v27 = v19 * v22;
            v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2)
              goto LABEL_54;
          }
          v32 = v27 + v17;
          v33 = (v27 + v17) ^ v17;
          v34 = (v27 + v17) ^ v27;
          v17 = (v17 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (((v33 & v34 & 0x8000000000000000) != 0) == v28)
            v17 = v32;
          if (v17 - 0x7FFFFFFFFFFFFFFFLL < 2)
            break;
          v15 += 3;
          v27 = v17;
          if (v15 == v16)
            goto LABEL_54;
        }
        v27 = v17;
        v37 = *(_QWORD *)&v6[10 * v9 + 2];
        v28 = __OFSUB__(v17, v37);
        v36 = v17 - v37;
        if (!((v36 < 0) ^ v28 | (v36 == 0)))
          goto LABEL_6;
      }
      if (*v14 > v27)
      {
        v36 = 0;
LABEL_6:
        *v1 = 0;
        *((_DWORD *)this + 4896) = ++v8;
        v11 = *v14;
        v12 = v11 <= v27;
        v13 = v11 - v27;
        if (v12)
          v13 = 0;
        if (v36 > v13)
          v13 = v36;
        if ((uint64_t)v7 <= v13)
          v7 = (int *)v13;
        this[2449] = v7;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return this;
}

char *std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v4;
  if (v5 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 40 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v3];
  v10 = &v8[v7];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = v9 + 40;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14)
      return v12;
    goto LABEL_18;
  }
  v15 = 0;
  do
  {
    v16 = &v9[v15];
    v17 = &v14[v15];
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *(_OWORD *)(v16 - 24) = *(_OWORD *)&v14[v15 - 24];
    *((_QWORD *)v16 - 1) = *(_QWORD *)&v14[v15 - 8];
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v17 - 2) = 0;
    *((_QWORD *)v17 - 1) = 0;
    v15 -= 40;
  }
  while (&v14[v15] != v13);
  v18 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v18)
  {
    do
    {
      v19 = (void *)*((_QWORD *)v14 - 3);
      if (v19)
      {
        *((_QWORD *)v14 - 2) = v19;
        operator delete(v19);
      }
      v14 -= 40;
    }
    while (v14 != v18);
    v14 = v18;
  }
  if (v14)
LABEL_18:
    operator delete(v14);
  return v12;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int *v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int *v54;
  unint64_t v55;
  uint64_t i;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t j;
  int *v63;

  v8 = result;
LABEL_2:
  v63 = a2 - 3;
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 3);
        v24 = *(_DWORD *)v8;
        if (v23 < *(_DWORD *)v8)
        {
          v25 = *(_QWORD *)(v8 + 4);
          v26 = *((_QWORD *)a2 - 1);
LABEL_25:
          *(_DWORD *)v8 = v23;
          *(a2 - 3) = v24;
          *(_QWORD *)(v8 + 4) = v26;
          *((_QWORD *)a2 - 1) = v25;
          return result;
        }
        if (v24 >= v23)
        {
          v26 = *((_QWORD *)a2 - 1);
          v25 = *(_QWORD *)(v8 + 4);
          if (v26 < v25)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (int *)(v8 + 12), v63);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (int *)(v8 + 12), (int *)(v8 + 24));
        v27 = *(a2 - 3);
        v28 = *(_DWORD *)(v8 + 24);
        if (v27 >= v28)
        {
          if (v28 < v27)
            return result;
          v30 = *((_QWORD *)a2 - 1);
          v29 = *(_QWORD *)(v8 + 28);
          if (v30 >= v29)
            return result;
        }
        else
        {
          v29 = *(_QWORD *)(v8 + 28);
          v30 = *((_QWORD *)a2 - 1);
        }
        *(_DWORD *)(v8 + 24) = v27;
        *(a2 - 3) = v28;
        *(_QWORD *)(v8 + 28) = v30;
        *((_QWORD *)a2 - 1) = v29;
        v31 = *(_DWORD *)(v8 + 24);
        v32 = *(_DWORD *)(v8 + 12);
        if (v31 >= v32)
        {
          if (v32 < v31)
            return result;
          v34 = *(_QWORD *)(v8 + 28);
          v33 = *(_QWORD *)(v8 + 16);
          if (v34 >= v33)
            return result;
        }
        else
        {
          v33 = *(_QWORD *)(v8 + 16);
          v34 = *(_QWORD *)(v8 + 28);
        }
        *(_DWORD *)(v8 + 12) = v31;
        *(_DWORD *)(v8 + 24) = v32;
        *(_QWORD *)(v8 + 16) = v34;
        *(_QWORD *)(v8 + 28) = v33;
        v35 = *(_DWORD *)v8;
        if (v31 < *(_DWORD *)v8)
        {
          v36 = *(_QWORD *)(v8 + 4);
LABEL_90:
          *(_DWORD *)v8 = v31;
          *(_DWORD *)(v8 + 12) = v35;
          *(_QWORD *)(v8 + 4) = v34;
          *(_QWORD *)(v8 + 16) = v36;
          return result;
        }
        if (v35 >= v31)
        {
          v36 = *(_QWORD *)(v8 + 4);
          if (v34 < v36)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, v8 + 12, v8 + 24, v8 + 36, v63);
      default:
        if (v12 > 287)
        {
          if (v10 == 1)
          {
            if ((int *)v8 != a2)
            {
              v52 = (v13 - 2) >> 1;
              v53 = v52 + 1;
              v54 = (int *)(v8 + 12 * v52);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, a3, v13, v54);
                v54 -= 3;
                --v53;
              }
              while (v53);
              v55 = v12 / 0xCuLL;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (uint64_t)a2, a3, v55);
                a2 -= 3;
              }
              while (v55-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = (int *)(v8 + 12 * (v13 >> 1));
          if ((unint64_t)v12 < 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v15, (int *)v8, v63);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, v15, v63);
            v16 = v8 + 12 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v8 + 12), (int *)(v16 - 12), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v8 + 24), (int *)(v8 + 12 + 12 * v14), a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v16 - 12), v15, (int *)(v8 + 12 + 12 * v14));
            v17 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v15;
            *v15 = v17;
            v18 = *(_QWORD *)(v8 + 4);
            *(_QWORD *)(v8 + 4) = *(_QWORD *)(v16 + 4);
            *(_QWORD *)(v16 + 4) = v18;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v19 = *(_DWORD *)(v8 - 12);
          if (v19 >= *(_DWORD *)v8 && (*(_DWORD *)v8 < v19 || *(_QWORD *)(v8 - 8) >= *(_QWORD *)(v8 + 4)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v8, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v8, (unint64_t)a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, v20);
          v9 = v20 + 12;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v20 + 12, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 12;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (int *)v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        v37 = (int *)(v8 + 12);
        v39 = (int *)v8 == a2 || v37 == a2;
        if ((a5 & 1) != 0)
        {
          if (v39)
            return result;
          v40 = 0;
          v41 = v8;
LABEL_46:
          v43 = v41;
          v41 = (uint64_t)v37;
          v44 = *(_DWORD *)(v43 + 12);
          v45 = *(_DWORD *)v43;
          if (v44 >= *(_DWORD *)v43)
          {
            if (v45 < v44)
              goto LABEL_45;
            v46 = *(_QWORD *)(v43 + 16);
            v47 = *(_QWORD *)(v43 + 4);
            if (v46 >= v47)
              goto LABEL_45;
          }
          else
          {
            v46 = *(_QWORD *)(v43 + 16);
            v47 = *(_QWORD *)(v43 + 4);
          }
          *(_DWORD *)(v43 + 12) = v45;
          *(_QWORD *)(v41 + 4) = v47;
          v42 = v8;
          if (v43 == v8)
            goto LABEL_44;
          v48 = v40;
          while (1)
          {
            v51 = *(_DWORD *)(v8 + v48 - 12);
            if (v44 < v51)
            {
              v49 = *(_QWORD *)(v8 + v48 - 8);
            }
            else
            {
              if (v51 < v44)
              {
                v42 = v8 + v48;
LABEL_44:
                *(_DWORD *)v42 = v44;
                *(_QWORD *)(v42 + 4) = v46;
LABEL_45:
                v37 = (int *)(v41 + 12);
                v40 += 12;
                if ((int *)(v41 + 12) == a2)
                  return result;
                goto LABEL_46;
              }
              v49 = *(_QWORD *)(v8 + v48 - 8);
              if (v46 >= v49)
              {
                v42 = v43;
                goto LABEL_44;
              }
            }
            v43 -= 12;
            v50 = v8 + v48;
            *(_DWORD *)v50 = v51;
            *(_QWORD *)(v50 + 4) = v49;
            v48 -= 12;
            if (!v48)
            {
              v42 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v39)
        {
          for (i = v8 + 4; ; i += 12)
          {
            v58 = v8;
            v8 = (uint64_t)v37;
            v59 = *(_DWORD *)(v58 + 12);
            v60 = *(_DWORD *)v58;
            if (v59 < *(_DWORD *)v58)
              break;
            if (v60 >= v59)
            {
              v61 = *(_QWORD *)(v58 + 16);
              if (v61 < *(_QWORD *)(v58 + 4))
                goto LABEL_79;
            }
LABEL_74:
            v37 = (int *)(v8 + 12);
            if ((int *)(v8 + 12) == a2)
              return result;
          }
          v61 = *(_QWORD *)(v58 + 16);
LABEL_79:
          for (j = i; ; j -= 12)
          {
            *(_DWORD *)(j + 8) = v60;
            *(_QWORD *)(j + 12) = *(_QWORD *)j;
            v60 = *(_DWORD *)(j - 16);
            if (v59 >= v60 && (v60 < v59 || v61 >= *(_QWORD *)(j - 12)))
              break;
          }
          *(_DWORD *)(j - 4) = v59;
          *(_QWORD *)j = v61;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *(_QWORD *)(a2 + 1) < *(_QWORD *)(a1 + 1))
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = *(_QWORD *)(a3 + 1);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      v16 = *(_QWORD *)(a1 + 1);
      *(_QWORD *)(a1 + 1) = v6;
      *(_QWORD *)(a3 + 1) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_QWORD *)(a3 + 1);
      v10 = *(_QWORD *)(a2 + 1);
      if (v6 < v10)
        goto LABEL_16;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    v17 = *(_QWORD *)(a1 + 1);
    *(_QWORD *)(a1 + 1) = v10;
    *(_QWORD *)(a2 + 1) = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_QWORD *)(a3 + 1);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_QWORD *)(a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *(_QWORD *)(a2 + 1) = v19;
    result = 2;
    *(_QWORD *)(a3 + 1) = v17;
    return result;
  }
  v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7)
      return 0;
    v9 = *(_QWORD *)(a3 + 1);
    v8 = *(_QWORD *)(a2 + 1);
    if (v9 >= v8)
      return 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 1);
    v9 = *(_QWORD *)(a3 + 1);
  }
  *a2 = v7;
  *a3 = v3;
  *(_QWORD *)(a2 + 1) = v9;
  *(_QWORD *)(a3 + 1) = v8;
  v11 = *a2;
  v12 = *a1;
  if (*a2 < *a1)
  {
    v13 = *(_QWORD *)(a1 + 1);
    v14 = *(_QWORD *)(a2 + 1);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *(_QWORD *)(a1 + 1) = v14;
    result = 2;
    *(_QWORD *)(a2 + 1) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    v14 = *(_QWORD *)(a2 + 1);
    v13 = *(_QWORD *)(a1 + 1);
    if (v14 < v13)
      goto LABEL_14;
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v2 = *a1;
  v3 = *(_QWORD *)(a1 + 1);
  v4 = *(a2 - 3);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_QWORD *)a2 - 1)))
  {
    for (i = a1 + 3; i < a2 && v2 >= *i && (*i < v2 || v3 >= *(_QWORD *)(i + 1)); i += 3)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[3];
      i += 3;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *(_QWORD *)(i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 3; v2 < v4 || v4 >= v2 && v3 < *(_QWORD *)(a2 + 1); a2 -= 3)
    {
      v8 = *(a2 - 3);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[3];
      i += 3;
      v9 = v11;
      v12 = *((_QWORD *)i - 1);
      *((_QWORD *)i - 1) = *(_QWORD *)(a2 + 1);
      *(_QWORD *)(a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_QWORD *)(i + 1)))
      {
        v13 = i[3];
        i += 3;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 3);
          a2 -= 3;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_QWORD *)(a2 + 1));
    }
    while (i < a2);
  }
  if (i - 3 != a1)
  {
    *a1 = *(i - 3);
    *(_QWORD *)(a1 + 1) = *((_QWORD *)i - 1);
  }
  *(i - 3) = v2;
  *((_QWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)(a1 + 1);
  while (1)
  {
    v5 = a1[v2 + 3];
    if (v5 >= v3 && (v3 < v5 || *(_QWORD *)&a1[v2 + 4] >= v4))
      break;
    v2 += 3;
  }
  v6 = (unint64_t)&a1[v2 + 3];
  if (v2 * 4)
  {
    do
    {
      v8 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_QWORD *)(a2 + 4) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_DWORD *)(a2 - 12);
        a2 -= 12;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 4) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = v6;
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v13 = v6;
    v14 = a2;
    do
    {
      *(_DWORD *)v13 = v12;
      *(_DWORD *)v14 = v5;
      v15 = *(_QWORD *)(v13 + 4);
      *(_QWORD *)(v13 + 4) = *(_QWORD *)(v14 + 4);
      *(_QWORD *)(v14 + 4) = v15;
      do
      {
        do
        {
          v16 = *(_DWORD *)(v13 + 12);
          v13 += 12;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_QWORD *)(v13 + 4) < v4);
      do
      {
        v17 = *(_DWORD *)(v14 - 12);
        v14 -= 12;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_QWORD *)(v14 + 4) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 12) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 12);
    *(_QWORD *)(a1 + 1) = *(_QWORD *)(v13 - 8);
  }
  *(_DWORD *)(v13 - 12) = v3;
  *(_QWORD *)(v13 - 8) = v4;
  return v13 - 12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(_DWORD *)(a2 - 12);
      v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        v21 = *(_QWORD *)(a1 + 4);
        v22 = *(_QWORD *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 12) = v20;
        *(_QWORD *)(a1 + 4) = v22;
        *(_QWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_QWORD *)(a2 - 8);
        v21 = *(_QWORD *)(a1 + 4);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      v23 = *(_DWORD *)(a2 - 12);
      v24 = *(_DWORD *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_QWORD *)(a2 - 8);
        v25 = *(_QWORD *)(a1 + 28);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a2 - 12) = v24;
      *(_QWORD *)(a1 + 28) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      v27 = *(_DWORD *)(a1 + 24);
      v28 = *(_DWORD *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_QWORD *)(a1 + 28);
        v29 = *(_QWORD *)(a1 + 16);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 16);
        v30 = *(_QWORD *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 24) = v28;
      *(_QWORD *)(a1 + 16) = v30;
      *(_QWORD *)(a1 + 28) = v29;
      v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        v32 = *(_QWORD *)(a1 + 4);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 12) = v31;
        *(_QWORD *)(a1 + 4) = v30;
        result = 1;
        *(_QWORD *)(a1 + 16) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_QWORD *)(a1 + 4);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(a1, a1 + 12, a1 + 24, a1 + 36, (int *)(a2 - 12));
      return 1;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_DWORD *)v7;
        v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_QWORD *)(v7 + 4);
          v14 = *(_QWORD *)(v6 + 4);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_QWORD *)(v7 + 4);
          v14 = *(_QWORD *)(v6 + 4);
        }
        *(_DWORD *)v7 = v12;
        *(_QWORD *)(v7 + 4) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(_DWORD *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            v16 = *(_QWORD *)(v17 + 16);
LABEL_13:
            v6 -= 12;
            *(_DWORD *)(v17 + 24) = v18;
            *(_QWORD *)(a1 + v15 + 28) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_QWORD *)(a1 + v15 + 16);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(_DWORD *)v10 = v11;
        *(_QWORD *)(v10 + 4) = v13;
        if (++v9 == 8)
          return v7 + 12 == a2;
LABEL_7:
        v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)a2, (int *)a3);
  v11 = *(_DWORD *)a4;
  v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v12 < v11)
      goto LABEL_16;
    v14 = *(_QWORD *)(a4 + 4);
    v13 = *(_QWORD *)(a3 + 4);
    if (v14 >= v13)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 4);
    v14 = *(_QWORD *)(a4 + 4);
  }
  *(_DWORD *)a3 = v11;
  *(_DWORD *)a4 = v12;
  *(_QWORD *)(a3 + 4) = v14;
  *(_QWORD *)(a4 + 4) = v13;
  v15 = *(_DWORD *)a3;
  v16 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_QWORD *)(a3 + 4);
    v17 = *(_QWORD *)(a2 + 4);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 4);
    v18 = *(_QWORD *)(a3 + 4);
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)a3 = v16;
  *(_QWORD *)(a2 + 4) = v18;
  *(_QWORD *)(a3 + 4) = v17;
  v19 = *(_DWORD *)a2;
  v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v21 = *(_QWORD *)(a1 + 4);
    v22 = *(_QWORD *)(a2 + 4);
LABEL_7:
    *(_DWORD *)a1 = v19;
    *(_DWORD *)a2 = v20;
    *(_QWORD *)(a1 + 4) = v22;
    *(_QWORD *)(a2 + 4) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v22 = *(_QWORD *)(a2 + 4);
    v21 = *(_QWORD *)(a1 + 4);
    if (v22 < v21)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *a5;
  v24 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v24 < v23)
      return result;
    v26 = *(_QWORD *)(a5 + 1);
    v25 = *(_QWORD *)(a4 + 4);
    if (v26 >= v25)
      return result;
  }
  else
  {
    v25 = *(_QWORD *)(a4 + 4);
    v26 = *(_QWORD *)(a5 + 1);
  }
  *(_DWORD *)a4 = v23;
  *a5 = v24;
  *(_QWORD *)(a4 + 4) = v26;
  *(_QWORD *)(a5 + 1) = v25;
  v27 = *(_DWORD *)a4;
  v28 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v28 < v27)
      return result;
    v30 = *(_QWORD *)(a4 + 4);
    v29 = *(_QWORD *)(a3 + 4);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_QWORD *)(a3 + 4);
    v30 = *(_QWORD *)(a4 + 4);
  }
  *(_DWORD *)a3 = v27;
  *(_DWORD *)a4 = v28;
  *(_QWORD *)(a3 + 4) = v30;
  *(_QWORD *)(a4 + 4) = v29;
  v31 = *(_DWORD *)a3;
  v32 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v32 < v31)
      return result;
    v34 = *(_QWORD *)(a3 + 4);
    v33 = *(_QWORD *)(a2 + 4);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_QWORD *)(a2 + 4);
    v34 = *(_QWORD *)(a3 + 4);
  }
  *(_DWORD *)a2 = v31;
  *(_DWORD *)a3 = v32;
  *(_QWORD *)(a2 + 4) = v34;
  *(_QWORD *)(a3 + 4) = v33;
  v35 = *(_DWORD *)a2;
  v36 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v37 = *(_QWORD *)(a1 + 4);
    v38 = *(_QWORD *)(a2 + 4);
LABEL_24:
    *(_DWORD *)a1 = v35;
    *(_DWORD *)a2 = v36;
    *(_QWORD *)(a1 + 4) = v38;
    *(_QWORD *)(a2 + 4) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v38 = *(_QWORD *)(a2 + 4);
    v37 = *(_QWORD *)(a1 + 4);
    if (v38 < v37)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        v7 = v6[3];
        if (*v6 < v7 || v7 >= *v6 && *(_QWORD *)(result + 12 * v5 + 4) < *((_QWORD *)v6 + 2))
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v8 = *v6;
      v9 = *a4;
      if (*v6 >= *a4)
      {
        if (v9 >= v8)
        {
          v11 = *(_QWORD *)(v6 + 1);
          v10 = *(_QWORD *)(a4 + 1);
          if (v11 < v10)
            return result;
        }
        else
        {
          v10 = *(_QWORD *)(a4 + 1);
          v11 = *(_QWORD *)(v6 + 1);
        }
        *a4 = v8;
        *(_QWORD *)(a4 + 1) = v11;
        if (v4 >= v5)
        {
          while (1)
          {
            v13 = 2 * v5;
            v5 = (2 * v5) | 1;
            v12 = (int *)(result + 12 * v5);
            v14 = v13 + 2;
            if (v14 < a3)
            {
              v15 = v12[3];
              if (*v12 < v15 || v15 >= *v12 && *(_QWORD *)(result + 12 * v5 + 4) < *((_QWORD *)v12 + 2))
              {
                v12 += 3;
                v5 = v14;
              }
            }
            v16 = *v12;
            if (*v12 < v9)
              break;
            v17 = *(_QWORD *)(v12 + 1);
            if (v9 >= v16 && v17 < v10)
              break;
            *v6 = v16;
            *(_QWORD *)(v6 + 1) = v17;
            v6 = v12;
            if (v4 < v5)
              goto LABEL_14;
          }
        }
        v12 = v6;
LABEL_14:
        *v12 = v9;
        *(_QWORD *)(v12 + 1) = v10;
      }
    }
  }
  return result;
}

int *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *(_QWORD *)(result + 1);
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 3 * v4 + 3;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[3];
        if (*v7 < v12 || v12 >= *v7 && *(_QWORD *)&v8[3 * v9 + 1] < *((_QWORD *)v7 + 2))
        {
          v7 += 3;
          v4 = v11;
        }
      }
      *v8 = *v7;
      *(_QWORD *)(v8 + 1) = *(_QWORD *)(v7 + 1);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (int *)(a2 - 12))
    {
      *v7 = v5;
      *(_QWORD *)(v7 + 1) = v6;
      return result;
    }
    *v7 = *(_DWORD *)(a2 - 12);
    *(_QWORD *)(v7 + 1) = *(_QWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 12) = v5;
    *(_QWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 12;
    if (v13 >= 13)
    {
      v14 = v13 / 0xCuLL - 2;
      v15 = v14 >> 1;
      v16 = &result[3 * (v14 >> 1)];
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v20 = *(_QWORD *)&result[3 * v15 + 1];
        v19 = *(_QWORD *)(v7 + 1);
        if (v20 >= v19)
          return result;
      }
      else
      {
        v19 = *(_QWORD *)(v7 + 1);
        v20 = *(_QWORD *)&result[3 * v15 + 1];
      }
      *v7 = v17;
      *(_QWORD *)(v7 + 1) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = &result[3 * v15];
          v24 = *v21;
          if (*v21 < v18)
          {
            v22 = *(_QWORD *)&result[3 * v15 + 1];
          }
          else
          {
            if (v18 < v24)
              break;
            v22 = *(_QWORD *)&result[3 * v15 + 1];
            if (v22 >= v19)
              break;
          }
          *v16 = v24;
          *(_QWORD *)(v16 + 1) = v22;
          v16 = &result[3 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *v21 = v18;
      *(_QWORD *)(v21 + 1) = v19;
    }
  }
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 8 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = a1[2];
  a1[5] = (char *)(v9 - (_QWORD)v10);
  v11 = a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v23 = a1[4];
    if (!v23)
      return;
LABEL_21:
    *((_QWORD *)v23 + 4) = v13 >> 3;
    *((_QWORD *)v23 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[(_QWORD)v4] & 0x80000000) == 0)
    {
      v17 = &v5[8 * (_QWORD)v12];
      v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v17));
      v19 = *a1;
      v20 = a1[3];
      v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      v22 = *(_QWORD *)&(*a1)[v21] & (~*(_QWORD *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v21 = (v14 + v21) & (unint64_t)v20;
          v22 = *(_QWORD *)&v19[v21] & (~*(_QWORD *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      v15 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v13 += v14;
      v16 = v18 & 0x7F;
      v19[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_QWORD *)&a1[1][8 * v15] = *(_QWORD *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  v23 = a1[4];
  if (v23)
    goto LABEL_21;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v37;
  int v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t i;
  unint64_t v60;
  double v61;
  double v62;
  int v63;
  unint64_t j;
  int v65;

  v8 = result;
LABEL_2:
  v9 = a2 - 16;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  v65 = a5;
  while (2)
  {
    v8 = v10;
    v12 = a2 - v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(double *)(a2 - 16);
        v26 = *(double *)v8;
        if (v25 < *(double *)v8)
        {
          v27 = *(_DWORD *)(v8 + 8);
          v28 = *(_DWORD *)(a2 - 8);
LABEL_25:
          *(double *)v8 = v25;
          *(double *)(a2 - 16) = v26;
          *(_DWORD *)(v8 + 8) = v28;
          *(_DWORD *)(a2 - 8) = v27;
          return result;
        }
        if (v26 >= v25)
        {
          v28 = *(_DWORD *)(a2 - 8);
          v27 = *(_DWORD *)(v8 + 8);
          if (v28 < v27)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v8 + 32);
        v29 = *(double *)(a2 - 16);
        v30 = *(double *)(v8 + 32);
        if (v29 >= v30)
        {
          if (v30 < v29)
            return result;
          v32 = *(_DWORD *)(a2 - 8);
          v31 = *(_DWORD *)(v8 + 40);
          if (v32 >= v31)
            return result;
        }
        else
        {
          v31 = *(_DWORD *)(v8 + 40);
          v32 = *(_DWORD *)(a2 - 8);
        }
        *(double *)(v8 + 32) = v29;
        *(double *)(a2 - 16) = v30;
        *(_DWORD *)(v8 + 40) = v32;
        *(_DWORD *)(a2 - 8) = v31;
        v33 = *(double *)(v8 + 32);
        v34 = *(double *)(v8 + 16);
        if (v33 >= v34)
        {
          if (v34 < v33)
            return result;
          v36 = *(_DWORD *)(v8 + 40);
          v35 = *(_DWORD *)(v8 + 24);
          if (v36 >= v35)
            return result;
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 40);
        }
        *(double *)(v8 + 16) = v33;
        *(double *)(v8 + 32) = v34;
        *(_DWORD *)(v8 + 24) = v36;
        *(_DWORD *)(v8 + 40) = v35;
        v37 = *(double *)v8;
        if (v33 < *(double *)v8)
        {
          v38 = *(_DWORD *)(v8 + 8);
LABEL_90:
          *(double *)v8 = v33;
          *(double *)(v8 + 16) = v37;
          *(_DWORD *)(v8 + 8) = v36;
          *(_DWORD *)(v8 + 24) = v38;
          return result;
        }
        if (v37 >= v33)
        {
          v38 = *(_DWORD *)(v8 + 8);
          if (v36 < v38)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, v8 + 16, v8 + 32, v8 + 48, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v54 = (v13 - 2) >> 1;
              v55 = v54 + 1;
              v56 = v8 + 16 * v54;
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, a3, v12 >> 4, v56);
                v56 -= 16;
                --v55;
              }
              while (v55);
              v57 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t *)v8, a2, a3, v57);
                a2 -= 16;
              }
              while (v57-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v8 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t)v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8, (uint64_t)v16, v9);
            v17 = v9;
            v18 = v8 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8 + 16, v18 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v8 + 32, v8 + 16 + 16 * v15, a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v18 - 16, (uint64_t)v16, v8 + 16 + 16 * v15);
            v19 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v16;
            *v16 = v19;
            v20 = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v18 + 8);
            *(_DWORD *)(v18 + 8) = v20;
            v9 = v17;
            a5 = v65;
            if ((v65 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(double *)(v8 - 16);
          if (v21 >= *(double *)v8 && (*(double *)v8 < v21 || *(_DWORD *)(v8 - 8) >= *(_DWORD *)(v8 + 8)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v8, a2);
            v10 = result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v8, a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v8, v22);
          v10 = v22 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v22 + 16, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v39 = v8 + 16;
        v41 = v8 == a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (v41)
            return result;
          v42 = 0;
          v43 = v8;
LABEL_46:
          v45 = v43;
          v43 = v39;
          v46 = *(double *)(v45 + 16);
          v47 = *(double *)v45;
          if (v46 >= *(double *)v45)
          {
            if (v47 < v46)
              goto LABEL_45;
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
            if (v48 >= v49)
              goto LABEL_45;
          }
          else
          {
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
          }
          *(double *)(v45 + 16) = v47;
          *(_DWORD *)(v43 + 8) = v49;
          v44 = v8;
          if (v45 == v8)
            goto LABEL_44;
          v50 = v42;
          while (1)
          {
            v53 = *(double *)(v8 + v50 - 16);
            if (v46 < v53)
            {
              v51 = *(_DWORD *)(v8 + v50 - 8);
            }
            else
            {
              if (v53 < v46)
              {
                v44 = v8 + v50;
LABEL_44:
                *(double *)v44 = v46;
                *(_DWORD *)(v44 + 8) = v48;
LABEL_45:
                v39 = v43 + 16;
                v42 += 16;
                if (v43 + 16 == a2)
                  return result;
                goto LABEL_46;
              }
              v51 = *(_DWORD *)(v8 + v50 - 8);
              if (v48 >= v51)
              {
                v44 = v45;
                goto LABEL_44;
              }
            }
            v45 -= 16;
            v52 = v8 + v50;
            *(double *)v52 = v53;
            *(_DWORD *)(v52 + 8) = v51;
            v50 -= 16;
            if (!v50)
            {
              v44 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v41)
        {
          for (i = v8 + 8; ; i += 16)
          {
            v60 = v8;
            v8 = v39;
            v61 = *(double *)(v60 + 16);
            v62 = *(double *)v60;
            if (v61 < *(double *)v60)
              break;
            if (v62 >= v61)
            {
              v63 = *(_DWORD *)(v60 + 24);
              if (v63 < *(_DWORD *)(v60 + 8))
                goto LABEL_79;
            }
LABEL_74:
            v39 += 16;
            if (v8 + 16 == a2)
              return result;
          }
          v63 = *(_DWORD *)(v60 + 24);
LABEL_79:
          for (j = i; ; j -= 16)
          {
            *(double *)(j + 8) = v62;
            *(_DWORD *)(j + 16) = *(_DWORD *)j;
            v62 = *(double *)(j - 24);
            if (v61 >= v62 && (v62 < v61 || v63 >= *(_DWORD *)(j - 16)))
              break;
          }
          *(double *)(j - 8) = v61;
          *(_DWORD *)j = v63;
          goto LABEL_74;
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(double *)(a2 - 16);
      v20 = *(double *)a1;
      if (v19 < *(double *)a1)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v19;
        *(double *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_DWORD *)(a2 - 8);
        v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      v23 = *(double *)(a2 - 16);
      v24 = *(double *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_DWORD *)(a2 - 8);
        v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v23;
      *(double *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      v27 = *(double *)(a1 + 32);
      v28 = *(double *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_DWORD *)(a1 + 40);
        v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 24);
        v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v27;
      *(double *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      v31 = *(double *)a1;
      if (v27 < *(double *)a1)
      {
        v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v27;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(double *)v7;
        v12 = *(double *)v6;
        if (*(double *)v7 >= *(double *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(double *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(double *)v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 16 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB5B828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::ImpliedBounds::~ImpliedBounds(operations_research::sat::ImpliedBounds *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _BYTE v17[16];

  if (*_MergedGlobals_11[0] >= 1
    && (_MergedGlobals_11[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_11, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 21);
    google::LogMessage::stream((google::LogMessage *)v17);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" enqueued deductions.", 21);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  if (*off_2540795A0[0] >= 1
    && (off_2540795A0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795A0, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 22);
    google::LogMessage::stream((google::LogMessage *)v17);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" implied bounds stored.", 23);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  if (*off_2540795A8[0] >= 1
    && (off_2540795A8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795A8, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 23);
    google::LogMessage::stream((google::LogMessage *)v17);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" implied bounds with view stored.", 33);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
  {
    *((_QWORD *)this + 30) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 16);
  if (v8)
  {
    v9 = *((_QWORD *)this + 17);
    v10 = (void *)*((_QWORD *)this + 16);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 17);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v8;
    operator delete(v10);
  }
  v14 = (void *)*((_QWORD *)this + 13);
  if (v14)
  {
    *((_QWORD *)this + 14) = v14;
    operator delete(v14);
  }
  if (*((_QWORD *)this + 10))
  {
    operator delete(*((void **)this + 7));
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 7) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  v15 = (_QWORD *)*((_QWORD *)this + 11);
  if (v15)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
  v16 = (void *)*((_QWORD *)this + 4);
  if (v16)
  {
    *((_QWORD *)this + 5) = v16;
    operator delete(v16);
  }
}

void operations_research::sat::ImpliedBounds::Add(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  BOOL v60;
  _BOOL8 v61;
  char v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  void **v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  void **v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[12];
  uint64_t v122[2];

  *(_QWORD *)v121 = a3;
  *(_DWORD *)&v121[8] = a4;
  if (*(_BYTE *)(*(_QWORD *)a1 + 545))
  {
    v7 = *(_QWORD *)(a1 + 152);
    v8 = (uint64_t *)(a1 + 152);
    v9 = (*(_QWORD *)(a1 + 160) - v7) >> 3;
    if ((int)a3 >= (int)v9)
    {
      v10 = (int)a3 + 1;
      if (v10 <= v9)
      {
        if (v10 < v9)
          *(_QWORD *)(a1 + 160) = v7 + 8 * v10;
      }
      else
      {
        std::vector<unsigned long long>::__append(a1 + 152, v10 - v9, (uint64_t *)&operations_research::sat::kMinIntegerValue);
      }
      if (*(_DWORD *)(a1 + 176) > (int)v10)
      {
        v11 = *(_DWORD **)(a1 + 232);
        v12 = *(_DWORD **)(a1 + 240);
        if (v11 == v12)
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          v14 = *(_DWORD **)(a1 + 232);
          do
          {
            if (*v14 <= (int)a3)
              v11[v13++] = *v14;
            ++v14;
          }
          while (v14 != v12);
        }
        v15 = v12 - v11;
        if (v13 <= v15)
        {
          if (v13 < v15)
            *(_QWORD *)(a1 + 240) = &v11[v13];
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 232), v13 - v15);
        }
      }
      v16 = v10 & ~((int)v10 >> 31);
      *(_DWORD *)(a1 + 176) = v16;
      v17 = *(_QWORD *)(a1 + 184);
      v18 = *(_QWORD *)(a1 + 192);
      v19 = (v16 + 63) >> 6;
      v119 = 0;
      v20 = (v18 - v17) >> 3;
      if (v19 <= v20)
      {
        if (v19 < v20)
          *(_QWORD *)(a1 + 192) = v17 + 8 * v19;
      }
      else
      {
        std::vector<unsigned long long>::__append(a1 + 184, v19 - v20, &v119);
      }
      v7 = *v8;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144);
    v22 = (uint64_t *)(v21 + 20 * (int)a3);
    v23 = *v22;
    if (*(_QWORD *)(v7 + 8 * (int)a3) > *v22)
      v23 = *(_QWORD *)(v7 + 8 * (int)a3);
    *(_QWORD *)(v7 + 8 * (int)a3) = v23;
    v24 = *(_QWORD *)&v121[4];
    if (*(uint64_t *)&v121[4] > v23)
    {
      v25 = a3;
      if (*v22 + 1 < -*(_QWORD *)(v21 + 20 * (int)(a3 ^ 1)))
      {
        v118 = a3 << 32;
        v119 = (a3 << 32) | a2;
        v120 = *(_QWORD *)&v121[4];
        v26 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((uint64_t *)(a1 + 56), (int *)&v119);
        if (v27)
        {
          v28 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * v26);
          *v28 = v119;
          v28[1] = v120;
          v29 = *(_QWORD *)(a1 + 56);
          v30 = *(_QWORD *)(a1 + 64);
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = v30 + 16 * v26;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = (_QWORD *)(v31 + 8);
          if (v33 >= v24)
            return;
          v29 = *(_QWORD *)(a1 + 56);
          *v32 = v24;
        }
        v34 = 0;
        v35 = a2 ^ 1;
        v36 = (int)a3
            + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v35)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v35)));
        v37 = ((v36 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v36);
        v38 = (v37 >> 7) ^ (v29 >> 12);
        v39 = *(_QWORD *)(a1 + 80);
        v40 = 0x101010101010101 * (v37 & 0x7F);
        while (1)
        {
          v41 = v38 & v39;
          v42 = *(_QWORD *)(v29 + v41);
          v43 = ((v42 ^ v40) - 0x101010101010101) & ~(v42 ^ v40) & 0x8080808080808080;
          if (v43)
            break;
LABEL_38:
          if ((v42 & (~v42 << 6) & 0x8080808080808080) != 0)
            goto LABEL_65;
          v34 += 8;
          v38 = v34 + v41;
        }
        while (1)
        {
          v44 = (v41 + (__clz(__rbit64(v43)) >> 3)) & v39;
          v45 = v30 + 16 * v44;
          if (*(_DWORD *)v45 == (_DWORD)v35 && *(_DWORD *)(v45 + 4) == (_DWORD)a3)
            break;
          v43 &= v43 - 1;
          if (!v43)
            goto LABEL_38;
        }
        if (v44 != v39)
        {
          v47 = (char *)(v29 + v44);
          v48 = *(_QWORD *)(v45 + 8);
          v49 = *v8;
          if (v48 <= *(_QWORD *)(*v8 + 8 * (int)a3))
          {
            --*(_QWORD *)(a1 + 72);
            v57 = *(_QWORD *)(v29 + v44) & (~*(_QWORD *)(v29 + v44) << 6) & 0x8080808080808080;
            v58 = *(_QWORD *)(v29 + ((v44 - 8) & v39)) & (~*(_QWORD *)(v29 + ((v44 - 8) & v39)) << 6) & 0x8080808080808080;
            v59 = (__clz(v58) >> 3) + (__clz(__rbit64(v57)) >> 3);
            v60 = v59 >= 8;
            v61 = v59 < 8;
            if (v60)
              v62 = -2;
            else
              v62 = 0x80;
            if (v58)
              v63 = v57 == 0;
            else
              v63 = 1;
            v64 = !v63 && v61;
            if (v63)
              v65 = -2;
            else
              v65 = v62;
            *v47 = v65;
            *(_BYTE *)((*(_QWORD *)(a1 + 80) & (v44 - 8)) + (*(_QWORD *)(a1 + 80) & 7) + *(_QWORD *)(a1 + 56) + 1) = v65;
            v66 = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 96) += v64;
            if (v66)
            {
              v113 = (unint64_t *)(v66 + 8);
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 - 1, v113));
              v115 = (unint64_t *)(v66 + 16);
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
          }
          else
          {
            v117 = (_QWORD *)(v29 + v44);
            v50 = (unint64_t *)&v121[4];
            if (v48 < v24)
              v50 = (unint64_t *)(v45 + 8);
            v51 = *v50;
            ++*(_QWORD *)(a1 + 256);
            *(_QWORD *)(v49 + 8 * (int)a3) = v51;
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)(a1 + 176), a3);
            if (*operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__ >= 1
              && (operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__ != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)&operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v119, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 92);
              v52 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v119);
              v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Deduction old: ", 15);
              v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 144) + 20 * (int)a3);
              LODWORD(v122[0]) = a3;
              *(uint64_t *)((char *)v122 + 4) = v54;
              v55 = operations_research::sat::operator<<(v53, v122[0], (char *)HIDWORD(v54));
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" new: ", 6);
              LODWORD(v122[0]) = a3;
              *(uint64_t *)((char *)v122 + 4) = v51;
              operations_research::sat::operator<<(v56, v122[0], (char *)HIDWORD(v51));
              google::LogMessage::~LogMessage((google::LogMessage *)&v119);
            }
            if (*(_QWORD *)(v45 + 8) == v51)
              absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase((_QWORD *)(a1 + 56), v117);
            if (v24 == v51)
            {
              v119 = (a3 << 32) | a2;
              absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((uint64_t *)(a1 + 56), (int *)&v119);
              return;
            }
          }
        }
LABEL_65:
        v67 = *(_QWORD *)(a1 + 24);
        v68 = *(_QWORD *)(v67 + 160);
        v69 = (unint64_t)(*(_QWORD *)(v67 + 168) - v68) >> 2;
        if (a2 < (int)v69 && *(_DWORD *)(v68 + 4 * a2) != -1)
        {
          v71 = *(_QWORD *)(a1 + 128);
          v70 = *(_QWORD *)(a1 + 136);
          v72 = (v70 - v71) >> 3;
          v73 = 0xAAAAAAAAAAAAAAABLL * v72;
          if ((int)a3 >= -1431655765 * (int)v72)
          {
            v74 = (v118 + 0x100000000) >> 32;
            if (v74 <= v73)
            {
              if (v74 < v73)
              {
                v90 = v71 + 24 * (int)v74;
                if (v70 != v90)
                {
                  v91 = *(_QWORD *)(a1 + 136);
                  do
                  {
                    v93 = *(void **)(v91 - 24);
                    v91 -= 24;
                    v92 = v93;
                    if (v93)
                    {
                      *(_QWORD *)(v70 - 16) = v92;
                      operator delete(v92);
                    }
                    v70 = v91;
                  }
                  while (v91 != v90);
                }
                *(_QWORD *)(a1 + 136) = v90;
              }
            }
            else
            {
              std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 128, v74 - v73);
            }
          }
          ++*(_QWORD *)(a1 + 264);
          v97 = *(_QWORD *)(a1 + 128);
          v98 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 160);
          if (a2 >= (int)((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) - v98) >> 2))
            v99 = -1;
          else
            v99 = *(_DWORD *)(v98 + 4 * a2);
          v100 = v97 + 24 * v25;
          v101 = *(char **)(v100 + 8);
          v79 = (_QWORD *)(v100 + 8);
          v78 = v101;
          v102 = v79[1];
          if ((unint64_t)v101 < v102)
          {
            *(_DWORD *)v78 = v99;
            *(_QWORD *)(v78 + 4) = v24;
            v78[12] = 1;
            v82 = v78 + 13;
            goto LABEL_121;
          }
          v103 = (void **)(v97 + 24 * v25);
          v104 = (char *)*v103;
          v105 = 0x4EC4EC4EC4EC4EC5 * (v78 - (_BYTE *)*v103);
          v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) <= 0x13B13B13B13B13B1)
          {
            v107 = 0x4EC4EC4EC4EC4EC5 * (v102 - (_QWORD)v104);
            if (2 * v107 > v106)
              v106 = 2 * v107;
            if (v107 >= 0x9D89D89D89D89D8)
              v108 = 0x13B13B13B13B13B1;
            else
              v108 = v106;
            if (!v108)
            {
              v109 = 0;
LABEL_116:
              v110 = &v109[13 * v105];
              *(_DWORD *)v110 = v99;
              *(_QWORD *)(v110 + 4) = v24;
              v110[12] = 1;
              v82 = v110 + 13;
              if (v78 != v104)
              {
                do
                {
                  v111 = *(_QWORD *)(v78 - 13);
                  v78 -= 13;
                  v112 = *(_QWORD *)(v78 + 5);
                  *(_QWORD *)(v110 - 13) = v111;
                  v110 -= 13;
                  *(_QWORD *)(v110 + 5) = v112;
                }
                while (v78 != v104);
                v78 = (char *)*v103;
              }
              *v103 = v110;
              *v79 = v82;
              v79[1] = &v109[13 * v108];
              if (!v78)
                goto LABEL_121;
              goto LABEL_120;
            }
            if (v108 <= 0x13B13B13B13B13B1)
            {
              v109 = (char *)operator new(13 * v108);
              goto LABEL_116;
            }
LABEL_129:
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          goto LABEL_128;
        }
        if ((int)v35 < (int)v69 && *(_DWORD *)(v68 + 4 * v35) != -1)
        {
          v75 = *(_QWORD *)(a1 + 128);
          if ((int)a3 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 136) - v75) >> 3)))
          {
            gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::ImpliedBoundEntry>,std::allocator<std::vector<operations_research::sat::ImpliedBoundEntry>>>::resize((_QWORD *)(a1 + 128), (v118 + 0x100000000) >> 32);
            v75 = *(_QWORD *)(a1 + 128);
            v68 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 160);
            v69 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) - v68) >> 2;
          }
          ++*(_QWORD *)(a1 + 264);
          if ((int)v35 >= (int)v69)
            v76 = -1;
          else
            v76 = *(_DWORD *)(v68 + 4 * v35);
          v77 = v75 + 24 * (int)a3;
          v80 = *(char **)(v77 + 8);
          v79 = (_QWORD *)(v77 + 8);
          v78 = v80;
          v81 = v79[1];
          if ((unint64_t)v80 < v81)
          {
            *(_DWORD *)v78 = v76;
            *(_QWORD *)(v78 + 4) = v24;
            v82 = v78 + 13;
            v78[12] = 0;
LABEL_121:
            *v79 = v82;
            return;
          }
          v83 = (void **)(v75 + 24 * v25);
          v84 = (char *)*v83;
          v85 = 0x4EC4EC4EC4EC4EC5 * (v78 - (_BYTE *)*v83);
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) <= 0x13B13B13B13B13B1)
          {
            v87 = 0x4EC4EC4EC4EC4EC5 * (v81 - (_QWORD)v84);
            if (2 * v87 > v86)
              v86 = 2 * v87;
            if (v87 >= 0x9D89D89D89D89D8)
              v88 = 0x13B13B13B13B13B1;
            else
              v88 = v86;
            if (v88)
            {
              if (v88 > 0x13B13B13B13B13B1)
                goto LABEL_129;
              v89 = (char *)operator new(13 * v88);
            }
            else
            {
              v89 = 0;
            }
            v94 = &v89[13 * v85];
            *(_DWORD *)v94 = v76;
            *(_QWORD *)(v94 + 4) = v24;
            v94[12] = 0;
            v82 = v94 + 13;
            if (v78 != v84)
            {
              do
              {
                v95 = *(_QWORD *)(v78 - 13);
                v78 -= 13;
                v96 = *(_QWORD *)(v78 + 5);
                *(_QWORD *)(v94 - 13) = v95;
                v94 -= 13;
                *(_QWORD *)(v94 + 5) = v96;
              }
              while (v78 != v84);
              v78 = (char *)*v83;
            }
            *v83 = v94;
            *v79 = v82;
            v79[1] = &v89[13 * v88];
            if (!v78)
              goto LABEL_121;
LABEL_120:
            operator delete(v78);
            goto LABEL_121;
          }
LABEL_128:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
      }
    }
  }
}

void sub_22DB5C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = result[3];
  --result[2];
  v3 = (char *)a2 - *result;
  v4 = *(_QWORD *)(*result + ((unint64_t)(v3 - 8) & v2));
  v5 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  v6 = v4 & (~v4 << 6) & 0x8080808080808080;
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v11 = 0;
    v8 = -2;
  }
  else
  {
    v9 = (__clz(v6) >> 3) + (__clz(__rbit64(v5)) >> 3);
    v10 = v9 >= 8;
    v11 = v9 < 8;
    if (v10)
      v8 = -2;
    else
      v8 = 0x80;
  }
  *(_BYTE *)a2 = v8;
  *(_BYTE *)((result[3] & (unint64_t)(v3 - 8)) + (result[3] & 7) + *result + 1) = v8;
  v12 = result[4];
  result[5] += v11;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 - 1, v13));
    v15 = (unint64_t *)(v12 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

_QWORD *operations_research::sat::operator<<(_QWORD *a1, uint64_t a2, char *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  uint64_t v8;
  int v9;

  v8 = a2;
  v9 = (int)a3;
  operations_research::sat::IntegerLiteral::DebugString((operations_research::sat::IntegerLiteral *)&v8, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_22DB5C4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = *a1;
  v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v9 = a1[3];
  v10 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    v11 = v8 & v9;
    v12 = *(_QWORD *)(v7 + (v8 & v9));
    v13 = ((v12 ^ v10) - 0x101010101010101) & ~(v12 ^ v10) & 0x8080808080808080;
    if (v13)
      break;
LABEL_8:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v8 = v2 + v11;
  }
  while (1)
  {
    v14 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v9;
    v15 = (int *)(a1[1] + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    if (v17 == (_DWORD)v3 && v16 == (_DWORD)v4)
      break;
    v13 &= v13 - 1;
    if (!v13)
      goto LABEL_8;
  }
  if (v14 == v9)
    return 0;
  --a1[2];
  v20 = *(_QWORD *)(v7 + v14) & (~*(_QWORD *)(v7 + v14) << 6) & 0x8080808080808080;
  v21 = *(_QWORD *)(v7 + ((v14 - 8) & v9)) & (~*(_QWORD *)(v7 + ((v14 - 8) & v9)) << 6) & 0x8080808080808080;
  if (v21)
    v22 = v20 == 0;
  else
    v22 = 1;
  if (v22)
  {
    v26 = 0;
    v23 = -2;
  }
  else
  {
    v24 = (__clz(v21) >> 3) + (__clz(__rbit64(v20)) >> 3);
    v25 = v24 >= 8;
    v26 = v24 < 8;
    if (v25)
      v23 = -2;
    else
      v23 = 0x80;
  }
  *(_BYTE *)(v7 + v14) = v23;
  *(_BYTE *)((a1[3] & (v14 - 8)) + (a1[3] & 7) + *a1 + 1) = v23;
  v27 = a1[4];
  a1[5] += v26;
  if (!v27)
    return 1;
  v28 = (unint64_t *)(v27 + 8);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 - 1, v28));
  v30 = (unint64_t *)(v27 + 16);
  result = 1;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  return result;
}

void gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::ImpliedBoundEntry>,std::allocator<std::vector<operations_research::sat::ImpliedBoundEntry>>>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

char **operations_research::sat::ImpliedBounds::GetImpliedBounds(_QWORD *a1, signed int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char *v6;
  char **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v13;
  unint64_t v14;

  v2 = a1[16];
  if (a2 >= (int)(-1431655765 * ((unint64_t)(a1[17] - v2) >> 3)))
    return (char **)(a1 + 13);
  v3 = a1[19];
  v4 = *(_QWORD *)(*(_QWORD *)(a1[2] + 144) + 20 * a2);
  if (*(_QWORD *)(v3 + 8 * a2) > v4)
    v4 = *(_QWORD *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = v4;
  v5 = (char **)(v2 + 24 * a2);
  v6 = *v5;
  v7 = v5 + 1;
  v8 = v5[1];
  if (*v5 == v8)
  {
    v9 = 0;
    v13 = *v5;
  }
  else
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)(v6 + 4) > v4)
      {
        v10 = &(*v5)[13 * v9++];
        v11 = *(_QWORD *)v6;
        *(_QWORD *)(v10 + 5) = *(_QWORD *)(v6 + 5);
        *(_QWORD *)v10 = v11;
      }
      v6 += 13;
    }
    while (v6 != v8);
    v13 = *v7;
    v6 = *v5;
  }
  v14 = 0x4EC4EC4EC4EC4EC5 * (v13 - v6);
  if (v9 > v14)
  {
    std::vector<operations_research::sat::ImpliedBoundEntry>::__append((void **)v5, v9 - v14);
    return v5;
  }
  if (v9 >= v14)
    return v5;
  *v7 = &v6[13 * v9];
  return v5;
}

void operations_research::sat::ImpliedBounds::ProcessIntegerTrail(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7[2];
  uint64_t *v8;

  if (*(_BYTE *)(*(_QWORD *)a1 + 545))
  {
    LODWORD(v7[0]) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 304);
    LODWORD(v8) = 1;
    if (LODWORD(v7[0]) != 1)
    {
      v8 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v7, (int)&v8, "sat_solver_->CurrentDecisionLevel() == 1");
      if (v8)
      {
        google::LogMessageFatal::LogMessageFatal(v7, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 157, &v8);
        google::LogMessage::stream((google::LogMessage *)v7);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
      }
    }
    v4 = a1 + 32;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    operations_research::sat::IntegerTrail::AppendNewBounds(*(_QWORD **)(a1 + 16), (void **)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 32);
    for (i = *(_QWORD *)(a1 + 40); v5 != i; v5 += 12)
    {
      v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
      operations_research::sat::ImpliedBounds::Add(a1, a2, *(_QWORD *)v5, v4);
    }
  }
}

void sub_22DB5C9A8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::ImpliedBounds::EnqueueNewDeductions(operations_research::sat::ImpliedBounds *this)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v18[12];
  uint64_t *v19;

  *(_DWORD *)v18 = *(_DWORD *)(*((_QWORD *)this + 1) + 304);
  LODWORD(v19) = 0;
  if (*(_DWORD *)v18)
  {
    v19 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v18, (int)&v19, "sat_solver_->CurrentDecisionLevel() == 0");
    if (v19)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v18, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 166, &v19);
      google::LogMessage::stream((google::LogMessage *)v18);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
    }
  }
  v2 = (int *)*((_QWORD *)this + 29);
  v3 = (int *)*((_QWORD *)this + 30);
  if (v2 != v3)
  {
    do
    {
      v4 = *((_QWORD *)this + 2);
      v5 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *v2);
      *(_DWORD *)v18 = *v2;
      *(_QWORD *)&v18[4] = v5;
      if ((operations_research::sat::IntegerTrail::Enqueue(v4, *(uint64_t *)v18, SHIDWORD(v5), 0, 0, 0, 0) & 1) == 0)
        return 0;
      ++v2;
    }
    while (v2 != v3);
    v2 = (int *)*((_QWORD *)this + 29);
    v6 = (int *)*((_QWORD *)this + 30);
    if (v2 != v6)
    {
      v7 = *((_QWORD *)this + 23);
      v8 = (char *)v6 - (char *)v2 - 4;
      v9 = (int *)*((_QWORD *)this + 29);
      if (v8 < 4)
        goto LABEL_17;
      v10 = 0;
      v11 = (v8 >> 2) + 1;
      v12 = v11 & 0x7FFFFFFFFFFFFFFELL;
      v9 = &v2[v11 & 0x7FFFFFFFFFFFFFFELL];
      do
      {
        v13 = &v2[v10];
        v14 = ((unint64_t)*v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v15 = ((unint64_t)v13[1] >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)(v7 + v14) = 0;
        *(_QWORD *)(v7 + v15) = 0;
        v10 += 2;
      }
      while (v12 != v10);
      if (v11 != v12)
      {
LABEL_17:
        do
        {
          v16 = *v9++;
          *(_QWORD *)(v7 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        }
        while (v9 != v6);
      }
    }
  }
  *((_QWORD *)this + 30) = v2;
  return operations_research::sat::SatSolver::FinishPropagation(*((operations_research::sat::SatSolver **)this + 1));
}

void sub_22DB5CB2C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (int *)(a1[1] + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == (_DWORD)v3 && v14 == (_DWORD)v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 16 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = a1[2];
  a1[5] = (char *)(v9 - (_QWORD)v10);
  v11 = a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v13 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[(_QWORD)v4] & 0x80000000) == 0)
    {
      v17 = &v5[16 * (_QWORD)v12];
      v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v17)))
          + *((int *)v17 + 1);
      v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v22 = (v14 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v15 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v13 += v14;
      v16 = v19 & 0x7F;
      v20[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_OWORD *)&a1[1][16 * v15] = *(_OWORD *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(_QWORD *)(result + 8) + 16 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(_QWORD *)(result + 8) + 16 * v14))))
          + *(int *)(*(_QWORD *)(result + 8) + 16 * v14 + 4);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(_QWORD *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void std::vector<operations_research::sat::ImpliedBoundEntry>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0x4EC4EC4EC4EC4EC5 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v13 = 13 * a2 - 13;
      if (v13 < 0xD)
        goto LABEL_34;
      v14 = v13 / 0xD + 1;
      v6 = &v5[13 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      v15 = v5 + 12;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 3) = -1;
        *(_DWORD *)(v15 + 1) = -1;
        *((_QWORD *)v15 - 1) = 0;
        *(_QWORD *)(v15 + 5) = 0;
        *v15 = 1;
        v15[13] = 1;
        v15 += 26;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *(_DWORD *)v6 = -1;
          *(_QWORD *)(v6 + 4) = 0;
          v6[12] = 1;
          v6 += 13;
        }
        while (v6 != &v5[13 * a2]);
      }
      v6 = &v5[13 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = 0x4EC4EC4EC4EC4EC5 * (v5 - (_BYTE *)*a1);
    v9 = v8 + a2;
    if (v8 + a2 > 0x13B13B13B13B13B1)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * (v4 - v7);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x9D89D89D89D89D8)
      v11 = 0x13B13B13B13B13B1;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x13B13B13B13B13B1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(13 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[13 * v8];
    v18 = &v17[13 * a2];
    v19 = 13 * a2 - 13;
    v20 = v17;
    if (v19 < 0xD)
      goto LABEL_35;
    v21 = v19 / 0xD + 1;
    v20 = &v17[13 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    v22 = (uint64_t)&v12[13 * v8 + 12];
    v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(_DWORD *)(v22 - 12) = -1;
      *(_DWORD *)(v22 + 1) = -1;
      *(_QWORD *)(v22 - 8) = 0;
      *(_QWORD *)(v22 + 5) = 0;
      *(_BYTE *)v22 = 1;
      *(_BYTE *)(v22 + 13) = 1;
      v22 += 26;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *(_DWORD *)v20 = -1;
        *(_QWORD *)(v20 + 4) = 0;
        v20[12] = 1;
        v20 += 13;
      }
      while (v20 != v18);
    }
    v24 = &v12[13 * v11];
    if (v5 != v7)
    {
      do
      {
        v25 = *(_QWORD *)(v6 - 13);
        v6 -= 13;
        v26 = *(_QWORD *)(v6 + 5);
        *(_QWORD *)(v17 - 13) = v25;
        v17 -= 13;
        *(_QWORD *)(v17 + 5) = v26;
      }
      while (v6 != v7);
    }
    v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
      operator delete(v27);
  }
}

uint64_t operations_research::sat::AffineExpression::GreaterOrEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[12];
  uint64_t *v9;

  if (*(_DWORD *)a1 == -1)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1, (int)&operations_research::sat::kNoIntegerVariable, "var != kNoIntegerVariable");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 29, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
      goto LABEL_12;
    }
  }
  v4 = *(_QWORD *)(a1 + 4);
  *(_DWORD *)v8 = 0;
  if (v4 < 1)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)a1 + 4, (int)v8, "coeff > 0");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 30, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
LABEL_12:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
    }
    v4 = *(_QWORD *)(a1 + 4);
  }
  v5 = a2 - *(_QWORD *)(a1 + 12);
  if (v5 / v4 * v4 >= v5)
    v6 = v5 / v4;
  else
    v6 = v5 / v4 + 1;
  *(_DWORD *)v8 = *(_DWORD *)a1;
  *(_QWORD *)&v8[4] = v6;
  return *(_QWORD *)v8;
}

void sub_22DB5D654(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5D65C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::AffineExpression::LowerOrEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[12];
  uint64_t *v9;

  if (*(_DWORD *)a1 == -1)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1, (int)&operations_research::sat::kNoIntegerVariable, "var != kNoIntegerVariable");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 37, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
      goto LABEL_12;
    }
  }
  v4 = *(_QWORD *)(a1 + 4);
  *(_DWORD *)v8 = 0;
  if (v4 < 1)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)a1 + 4, (int)v8, "coeff > 0");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 38, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
LABEL_12:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
    }
    v4 = *(_QWORD *)(a1 + 4);
  }
  v5 = (a2 - *(_QWORD *)(a1 + 12)) / v4 - ((a2 - *(_QWORD *)(a1 + 12)) / v4 * v4 > a2 - *(_QWORD *)(a1 + 12));
  if (v5 >= (uint64_t)0x8000000000000002)
    v6 = -v5;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)v8 = *(_DWORD *)a1 ^ 1;
  *(_QWORD *)&v8[4] = v6;
  return *(_QWORD *)v8;
}

void sub_22DB5D78C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5D794(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::NegationOf(int8x16_t **a1@<X0>, int8x16_t **a2@<X8>)
{
  int8x16_t *v3;
  int8x16_t *v4;
  int64_t v5;
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int *v14;
  __int32 *v15;
  unint64_t v16;
  int v17;

  v4 = *a1;
  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)v3 - (char *)v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (int8x16_t *)operator new((char *)v3 - (char *)v4);
    *a2 = v6;
    a2[2] = (int8x16_t *)((char *)v6 + 4 * (v5 >> 2));
    bzero(v6, v5);
    v7 = 0;
    a2[1] = (int8x16_t *)((char *)v6 + v5);
    if ((unint64_t)(v5 >> 2) <= 1)
      v8 = 1;
    else
      v8 = v5 >> 2;
    if (v8 < 8)
      goto LABEL_11;
    if ((unint64_t)((char *)v6 - (char *)v4) < 0x20)
      goto LABEL_11;
    v7 = v8 & 0xFFFFFFFFFFFFFFF8;
    v9 = v4 + 1;
    v10 = v6 + 1;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v13 = veorq_s8(*v9, v11);
      v10[-1] = veorq_s8(v9[-1], v11);
      *v10 = v13;
      v9 += 2;
      v10 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v8 != v7)
    {
LABEL_11:
      v14 = &v6->i32[v7];
      v15 = &v4->i32[v7];
      v16 = v8 - v7;
      do
      {
        v17 = *v15++;
        *v14++ = v17 ^ 1;
        --v16;
      }
      while (v16);
    }
  }
}

void sub_22DB5D898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerEncoder::FullyEncodeVariable(uint64_t a1, signed int a2)
{
  int v2;
  int v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t **v44;
  int v45;
  unint64_t v46[2];
  uint64_t *v47;

  v2 = a2;
  if (operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(a1, a2))
    return;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 304);
  LODWORD(v46[0]) = 0;
  LODWORD(v47) = v5;
  if (v5)
  {
    v47 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v46, (int)&v47, "0 == sat_solver_->CurrentDecisionLevel()");
    if (v47)
    {
      google::LogMessageFatal::LogMessageFatal(v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 54, &v47);
      google::LogMessage::stream((google::LogMessage *)v46);
      goto LABEL_58;
    }
  }
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * a2)))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 55);
    v38 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: !(*domains_)[var].IsEmpty() ", 42);
    goto LABEL_58;
  }
  v46[0] = operations_research::Domain::Size((operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * a2));
  v45 = 100000;
  if ((uint64_t)v46[0] > 99999)
  {
    v47 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v46, (int)&v45, "(*domains_)[var].Size() < 100000");
    if (v47)
    {
      google::LogMessageFatal::LogMessageFatal(v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 56, &v47);
      v39 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v46);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Domain too large for full encoding.");
      goto LABEL_58;
    }
  }
  v6 = *(char **)(a1 + 288);
  *(_QWORD *)(a1 + 296) = v6;
  v7 = (unint64_t *)(**(_QWORD **)(a1 + 8) + 24 * a2);
  v10 = *v7;
  v9 = v7 + 1;
  v8 = v10;
  if ((v10 & 1) != 0)
    v9 = (_QWORD *)*v9;
  if (v8 >= 2)
  {
    v41 = a2;
    v42 = v2;
    v43 = &v9[2 * (v8 >> 1)];
    v44 = (uint64_t **)(a1 + 288);
    while (1)
    {
      v12 = (_QWORD *)*v9;
      v11 = (_QWORD *)v9[1];
      if (*v9 <= (uint64_t)v11)
        break;
LABEL_9:
      v9 += 2;
      if (v9 == v43)
      {
        v33 = *v44;
        v2 = v42;
        while (v33 != (uint64_t *)v6)
        {
          v34 = *v33++;
          operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(a1, v41, v34);
        }
        goto LABEL_43;
      }
    }
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v6 >= v15)
        break;
      *(_QWORD *)v6 = v12;
      v13 = (uint64_t)(v6 + 8);
LABEL_13:
      *(_QWORD *)(a1 + 296) = v13;
      v6 = (char *)v13;
      v14 = v12 == v11;
      v12 = (_QWORD *)((char *)v12 + 1);
      if (v14)
        goto LABEL_9;
    }
    v16 = *v44;
    v17 = v6 - (char *)*v44;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v15 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      *v23 = v12;
      v13 = (uint64_t)(v23 + 1);
      if (v6 == (char *)v16)
        goto LABEL_29;
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      *(_QWORD *)(8 * v18) = v12;
      v13 = 8 * v18 + 8;
      if (v6 == (char *)v16)
        goto LABEL_29;
    }
    v24 = v6 - 8 - (char *)v16;
    if (v24 >= 0x168)
    {
      if (&v22[v17 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
      {
        v25 = v6;
      }
      else if (&v6[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        v25 = v6;
      }
      else if ((unint64_t)(v6 - v22 - v17) >= 0x20)
      {
        v27 = (v24 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v25 = &v6[-v28];
        v23 = (_QWORD *)((char *)v23 - v28);
        v29 = &v22[8 * v18 - 16];
        v30 = v6 - 16;
        v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          *(_QWORD *)(a1 + 288) = v23;
          *(_QWORD *)(a1 + 296) = v13;
          *(_QWORD *)(a1 + 304) = &v22[8 * v21];
          if (v16)
            operator delete(v16);
          goto LABEL_13;
        }
      }
      else
      {
        v25 = v6;
      }
    }
    else
    {
      v25 = v6;
    }
    do
    {
      v26 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *--v23 = v26;
    }
    while (v25 != (char *)v16);
    goto LABEL_29;
  }
LABEL_43:
  if (v2 >= 0)
    v35 = v2;
  else
    v35 = v2 + 1;
  v36 = v35 >> 1;
  v45 = v35 >> 1;
  v46[0] = *(_QWORD *)(a1 + 264);
  if (v35 >> 1 >= SLODWORD(v46[0]))
  {
    v47 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,unsigned long>((int)&v45, (int)v46, "GetPositiveOnlyIndex(var) < is_fully_encoded_.size()");
    if (v47)
    {
      google::LogMessageFatal::LogMessageFatal(v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 78, &v47);
      google::LogMessage::stream((google::LogMessage *)v46);
      goto LABEL_58;
    }
  }
  v37 = (_QWORD *)(*(_QWORD *)(a1 + 232) + 24 * v36);
  if (*v37 == v37[1])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 79);
    v40 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: !equality_by_var_[GetPositiveOnlyIndex(var)].empty() ", 67);
LABEL_58:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v46);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 256) + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
}

void sub_22DB5DD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5DD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5DD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5DD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5DD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(uint64_t a1, signed int a2)
{
  int v2;
  int v3;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *__p[3];

  if (a2 >= 0)
    v2 = a2;
  else
    v2 = a2 + 1;
  v3 = v2 >> 1;
  if (v3 >= *(_DWORD *)(a1 + 264))
    return 0;
  v5 = v3;
  v6 = v3;
  v7 = *(_QWORD *)(a1 + 256);
  v8 = v6 >> 6;
  result = 1;
  v10 = 1 << v5;
  if ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v5)) != 0)
    return result;
  v11 = (a2 & 1) != 0 ? a2 & 0xFFFFFFFE : a2;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 24 * (int)v6 + 8)
                - *(_QWORD *)(*(_QWORD *)(a1 + 232) + 24 * (int)v6)) >> 2) < operations_research::Domain::Size((operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * v11)))
    return 0;
  operations_research::sat::IntegerEncoder::PartialDomainEncoding((uint64_t *)a1, v11, (char **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v12 = *(_QWORD *)(a1 + 232);
  v13 = (_QWORD *)(v12 + 24 * (int)v6);
  v14 = (unint64_t *)(**(_QWORD **)(a1 + 8) + 24 * v11);
  v17 = *v14;
  v15 = v14 + 1;
  v16 = v17;
  if ((v17 & 1) != 0)
    v15 = (_QWORD *)*v15;
  if (v16 >= 2)
  {
    v18 = 0;
    v22 = &v15[2 * (v16 >> 1)];
    do
    {
      v24 = (_QWORD *)*v15;
      v23 = v15[1];
      if (*v15 <= v23)
      {
        v25 = (_QWORD *)(v23 + 1);
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 24 * (int)v6 + 8) - *v13) >> 2) > v18
            && v24 == *(_QWORD **)(*v13 + 12 * v18))
          {
            ++v18;
          }
          v24 = (_QWORD *)((char *)v24 + 1);
        }
        while (v25 != v24);
      }
      v15 += 2;
    }
    while (v15 != v22);
  }
  else
  {
    v18 = 0;
  }
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 24 * (int)v6 + 8) - *v13) >> 2);
  v20 = *(_QWORD *)(a1 + 256);
  v21 = *(_QWORD *)(v20 + 8 * v8);
  if (v19 == v18)
  {
    v21 |= v10;
    *(_QWORD *)(v20 + 8 * v8) = v21;
  }
  return (v21 & v10) != 0;
}

unint64_t operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  operations_research::Domain *v22;
  const char *v23;
  const char *v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  int v33;
  int v34[4];
  _BYTE v35[12];

  v5 = 0;
  if (a2 >= 0)
    v7 = a2;
  else
    v7 = a2 + 1;
  v8 = v7 >> 1;
  if ((a2 & 1) != 0)
    v9 = -a3;
  else
    v9 = a3;
  v34[0] = v8;
  *(_QWORD *)&v34[1] = v9;
  *(_QWORD *)v35 = *(_QWORD *)v34;
  *(_DWORD *)&v35[8] = HIDWORD(v9);
  v10 = *(_QWORD *)&v35[4]
      + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v34[0])
         * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                            * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                             + v34[0])));
  v11 = ((v10 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v10);
  v12 = *(_QWORD *)(a1 + 184);
  v13 = (v11 >> 7) ^ (v12 >> 12);
  v14 = *(_QWORD *)(a1 + 208);
  v15 = 0x101010101010101 * (v11 & 0x7F);
  while (1)
  {
    v16 = v13 & v14;
    v17 = *(_QWORD *)(v12 + v16);
    v18 = ((v17 ^ v15) - 0x101010101010101) & ~(v17 ^ v15) & 0x8080808080808080;
    if (v18)
      break;
LABEL_14:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      goto LABEL_17;
    v5 += 8;
    v13 = v5 + v16;
  }
  while (1)
  {
    v19 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    v20 = *(_QWORD *)(a1 + 192) + 16 * v19;
    if (*(_DWORD *)v20 == v34[0] && *(_QWORD *)(v20 + 4) == *(_QWORD *)&v35[4])
      break;
    v18 &= v18 - 1;
    if (!v18)
      goto LABEL_14;
  }
  if (v19 != v14)
    return *(unsigned int *)(v20 + 12);
LABEL_17:
  v22 = (operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * a2);
  if (operations_research::Domain::Contains(v22, a3))
  {
    if (operations_research::Domain::Min(v22, v23) == a3 && operations_research::Domain::Max(v22, v24) == a3)
    {
      v25 = *(_DWORD *)(a1 + 280);
      if (v25 == -1)
      {
        v26 = *(_DWORD *)(*(_QWORD *)a1 + 16);
        operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v26 + 1);
        *(_DWORD *)(a1 + 280) = 2 * v26;
        operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, 2 * v26);
        v25 = *(_DWORD *)(a1 + 280);
      }
      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, (const char *)v25, a2, a3);
      v27 = *(unsigned int *)(a1 + 280);
      if ((_DWORD)v27 != -1)
        return v27;
      v33 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v33 + 1);
      *(_DWORD *)(a1 + 280) = 2 * v33;
      operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, 2 * v33);
      return *(unsigned int *)(a1 + 280);
    }
    else
    {
      ++*(_QWORD *)(a1 + 24);
      v31 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v31 + 1);
      v27 = (2 * v31);
      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, (const char *)v27, a2, a3);
      if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 208) + 24)
                       + (((unint64_t)(int)v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v27 & 0x3E)) & 3) == 0
        || *operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__ < 1
        || operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__ == &google::kLogSiteUninitialized
        && !google::InitVLOG3__((google *)&operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1))
      {
        return v27;
      }
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 292);
      v32 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Created a fixed literal for no reason!", 38);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
      return v27;
    }
  }
  else
  {
    v29 = *(_DWORD *)(a1 + 280);
    if (v29 == -1)
    {
      v30 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v30 + 1);
      *(_DWORD *)(a1 + 280) = 2 * v30;
      operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, 2 * v30);
      v29 = *(_DWORD *)(a1 + 280);
    }
    return v29 ^ 1u;
  }
}

void sub_22DB5E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *operations_research::sat::IntegerEncoder::PartialDomainEncoding@<X0>(uint64_t *result@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t *v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  uint64_t *v48;

  v4 = result;
  LODWORD(v46) = *(_DWORD *)(*result + 304);
  LODWORD(v48) = 0;
  if ((_DWORD)v46)
  {
    result = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v46, (int)&v48, "sat_solver_->CurrentDecisionLevel() == 0");
    v48 = result;
    if (result)
    {
      google::LogMessageFatal::LogMessageFatal(&v46, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 128, &v48);
      google::LogMessage::stream((google::LogMessage *)&v46);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v46);
    }
  }
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = a2 + 1;
  v7 = v6 >> 1;
  v8 = v4[29];
  if (v7 >= (int)(-1431655765 * ((unint64_t)(v4[30] - v8) >> 3)))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v9 = (uint64_t **)(v8 + 24 * v7);
  v11 = v9 + 1;
  v10 = v9[1];
  v12 = *v9;
  v13 = 0;
  if (v10 == *v9)
    goto LABEL_25;
  v14 = ((char *)v10 - (char *)*v9) / 12;
  v15 = *(_QWORD *)(*(_QWORD *)(*v4 + 208) + 24);
  if (v14 <= 1)
    v14 = 1;
  v16 = (int *)(v12 + 1);
  while (1)
  {
    v18 = *v16;
    v19 = *(_QWORD *)(v15 + (((unint64_t)*v16 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v19 >> (*v16 & 0x3F ^ 1u)) & 1) != 0)
      goto LABEL_11;
    v20 = *((_QWORD *)v16 - 1);
    if (((v19 >> (*v16 & 0x3F)) & 1) != 0)
      break;
    v17 = (_DWORD *)v12 + 3 * v13++;
    *(_QWORD *)v17 = v20;
    v17[2] = v18;
LABEL_11:
    v16 += 3;
    if (!--v14)
      goto LABEL_25;
  }
  *v11 = v12;
  v21 = v8 + 24 * v7;
  v24 = *(_QWORD *)(v21 + 16);
  v23 = (char **)(v21 + 16);
  v22 = v24;
  if ((unint64_t)v12 >= v24)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v12) >> 2);
    v26 = 2 * v25;
    if (2 * v25 <= 1)
      v26 = 1;
    if (v25 >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v26;
    if (v27 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v28 = 12 * v27;
    v29 = (char *)operator new(12 * v27);
    *(_QWORD *)v29 = v20;
    v30 = &v29[v28];
    *((_DWORD *)v29 + 2) = v18;
    v10 = (uint64_t *)(v29 + 12);
    *v9 = (uint64_t *)v29;
    *v11 = (uint64_t *)(v29 + 12);
    *v23 = v30;
    operator delete(v12);
  }
  else
  {
    *v12 = v20;
    *((_DWORD *)v12 + 2) = v18;
    v10 = (uint64_t *)((char *)v12 + 12);
  }
  *v11 = v10;
  v13 = 1;
LABEL_25:
  v31 = v13;
  v32 = *v9;
  v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)*v9) >> 2);
  if (v31 <= v33)
  {
    if (v31 < v33)
    {
      v10 = (uint64_t *)((char *)v32 + 12 * (int)v31);
      *v11 = v10;
    }
  }
  else
  {
    std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair>::__append((void **)v9, v31 - v33);
    v32 = *v9;
    v10 = *v11;
  }
  v34 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v32) >> 2));
  if (v10 == v32)
    v35 = 0;
  else
    v35 = v34;
  result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>(v32, v10, (uint64_t)&v46, v35, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v36 = *v9;
  v37 = (char *)*v11 - (char *)*v9;
  if (*v11 == *v9)
  {
    v39 = 0;
    v38 = 0;
    if ((a2 & 1) == 0)
      return result;
    goto LABEL_37;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v37 >> 2) > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v38 = (char *)operator new((char *)*v11 - (char *)*v9);
  *a3 = v38;
  v39 = &v38[4 * (v37 >> 2)];
  a3[2] = v39;
  result = (uint64_t *)memcpy(v38, v36, v37);
  a3[1] = v39;
  if ((a2 & 1) != 0)
  {
LABEL_37:
    if (v38 != v39)
    {
      v40 = v39 - 12;
      if (v39 - 12 > v38)
      {
        v41 = v38 + 12;
        do
        {
          v42 = *(_QWORD *)(v41 - 12);
          v47 = *((_DWORD *)v41 - 1);
          v46 = v42;
          v43 = *(_QWORD *)v40;
          *((_DWORD *)v41 - 1) = *((_DWORD *)v40 + 2);
          *(_QWORD *)(v41 - 12) = v43;
          v44 = v46;
          *((_DWORD *)v40 + 2) = v47;
          *(_QWORD *)v40 = v44;
          v40 -= 12;
          v45 = v41 >= v40;
          v41 += 12;
        }
        while (!v45);
        v38 = *a3;
      }
    }
    while (v38 != v39)
    {
      *(_QWORD *)v38 = -*(_QWORD *)v38;
      v38 += 12;
    }
  }
  return result;
}

void sub_22DB5E674(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5E67C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *operations_research::sat::IntegerEncoder::FullDomainEncoding@<X0>(uint64_t *a1@<X0>, signed int a2@<W1>, char **a3@<X8>)
{
  _QWORD *v7;
  _BYTE v8[16];

  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)a1, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 122);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: VariableIsFullyEncoded(var) ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
  }
  return operations_research::sat::IntegerEncoder::PartialDomainEncoding(a1, a2, a3);
}

void sub_22DB5E718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::IntegerEncoder::AddImplications(uint64_t result, uint64_t **a2, uint64_t *a3, int a4)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 16))
  {
    v5 = a3;
    v7 = (uint64_t *)result;
    v8 = (uint64_t *)a3[1];
    if (v8)
    {
      do
      {
        v9 = (uint64_t **)v8;
        v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      v10 = a3;
      do
      {
        v9 = (uint64_t **)v10[2];
        v11 = *v9 == v10;
        v10 = (uint64_t *)v9;
      }
      while (!v11);
    }
    if (v9 != a2 + 1)
    {
      v12 = *(_QWORD *)result;
      v17 = *((_DWORD *)v9 + 9) ^ 1;
      v18 = a4;
      result = operations_research::sat::SatSolver::AddClauseDuringSearch(v12, &v17, 2uLL);
    }
    if (*a2 != v5)
    {
      v13 = *v5;
      if (*v5)
      {
        do
        {
          v14 = v13;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = v5[2];
          v11 = *(_QWORD *)v14 == (_QWORD)v5;
          v5 = (uint64_t *)v14;
        }
        while (v11);
      }
      v15 = *v7;
      v16 = *(_DWORD *)(v14 + 36);
      v17 = a4 ^ 1;
      v18 = v16;
      return operations_research::sat::SatSolver::AddClauseDuringSearch(v15, &v17, 2uLL);
    }
  }
  return result;
}

uint64_t *operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals(uint64_t *this)
{
  uint64_t *v1;
  int v2;
  _QWORD *v3;
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11[2];
  uint64_t *v12;

  v1 = this;
  v2 = *(_DWORD *)(*this + 304);
  LODWORD(v11[0]) = 0;
  LODWORD(v12) = v2;
  if (v2)
  {
    this = (uint64_t *)google::MakeCheckOpString<int,int>((int)v11, (int)&v12, "0 == sat_solver_->CurrentDecisionLevel()");
    v12 = this;
    if (this)
    {
      google::LogMessageFatal::LogMessageFatal(v11, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 184, &v12);
      google::LogMessage::stream((google::LogMessage *)v11);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
    }
  }
  *((_BYTE *)v1 + 16) = 1;
  v3 = (_QWORD *)v1[4];
  for (i = (_QWORD *)v1[5]; v3 != i; v3 += 3)
  {
    v5 = (_QWORD *)*v3;
    if ((_QWORD *)*v3 != v3 + 1)
    {
      v6 = 0xFFFFFFFFLL;
      do
      {
        v7 = *((unsigned int *)v5 + 9);
        if (v6 != 0xFFFFFFFFLL)
          this = (uint64_t *)operations_research::sat::SatSolver::AddBinaryClause(*v1, v7 ^ 1, v6);
        v8 = (_QWORD *)v5[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v5[2];
            v10 = *v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v6 = v7;
        v5 = v9;
      }
      while (v9 != v3 + 1);
    }
  }
  return this;
}

void sub_22DB5E968(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t *operations_research::sat::IntegerEncoder::Canonicalize@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v7;
  const char *v8;
  uint64_t *result;
  unint64_t *v10;
  int64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  BOOL v22;
  _BYTE v23[12];
  uint64_t *v24;
  uint64_t v25;
  int64_t *v26;
  _BYTE v27[12];

  v4 = (int)a2;
  *(_QWORD *)v27 = a2;
  *(_DWORD *)&v27[8] = a3;
  v7 = *(_QWORD *)&v27[4];
  v25 = *(_QWORD *)&v27[4] - 1;
  v26 = *(int64_t **)&v27[4];
  *(_QWORD *)v23 = operations_research::Domain::Min((operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * (int)a2), a2);
  if (*(uint64_t *)&v27[4] <= *(uint64_t *)v23)
  {
    v24 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>((int)&v25, (int)v23, "before >= (*domains_)[var].Min()");
    if (v24)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v23, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 204, &v24);
      google::LogMessage::stream((google::LogMessage *)v23);
      goto LABEL_28;
    }
  }
  result = (uint64_t *)operations_research::Domain::Max((operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * v4), v8);
  *(_QWORD *)v23 = result;
  if (v7 > (uint64_t)result)
  {
    result = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>((int)&v26, (int)v23, "after <= (*domains_)[var].Max()");
    v24 = result;
    if (result)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v23, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 205, &v24);
      google::LogMessage::stream((google::LogMessage *)v23);
LABEL_28:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v23);
    }
  }
  v10 = (unint64_t *)(**(_QWORD **)(a1 + 8) + 24 * v4);
  v13 = *v10;
  v11 = (int64_t *)(v10 + 1);
  v12 = v13;
  if ((v13 & 1) != 0)
    v11 = (int64_t *)*v11;
  v14 = v25;
  v15 = (int64_t)v26;
  if (v12 >= 2)
  {
    v20 = 16 * (v12 >> 1) - 16;
    v21 = 0x8000000000000000;
    while (v14 <= v21)
    {
      if (v15 > v21)
        goto LABEL_21;
LABEL_11:
      v21 = v11[1];
      v11 += 2;
      v22 = v15 <= v21 || v20 == 0;
      v20 -= 16;
      if (v22)
        goto LABEL_6;
    }
    if (v14 < *v11)
      v14 = v21;
    if (v15 <= v21)
      goto LABEL_11;
LABEL_21:
    if (v15 <= *v11)
      v15 = *v11;
    goto LABEL_11;
  }
LABEL_6:
  *(_DWORD *)v23 = v4;
  *(_QWORD *)&v23[4] = v15;
  v16 = *(_QWORD *)v23;
  v17 = HIDWORD(v15);
  if (v14 >= (uint64_t)0x8000000000000002)
    v18 = -v14;
  else
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)v23 = v4 ^ 1;
  *(_QWORD *)&v23[4] = v18;
  v19 = *(_QWORD *)v23;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 12) = v19;
  *(_DWORD *)(a4 + 20) = HIDWORD(v18);
  return result;
}

void sub_22DB5EB5C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB5EB64(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(unsigned int *a1, const char *a2, int a3)
{
  const char *v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v11;
  const char *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  int v33;
  _QWORD *v34;
  _BYTE v35[12];
  const char *v36;
  int v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];

  *(_QWORD *)v40 = a2;
  *(_DWORD *)&v40[8] = a3;
  if (*(uint64_t *)&v40[4] <= operations_research::Domain::Min((operations_research::Domain *)(**((_QWORD **)a1 + 1) + 24 * (int)a2), a2))
  {
    v9 = a1[70];
    if ((_DWORD)v9 == -1)
    {
      v11 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v11 + 1);
      a1[70] = 2 * v11;
      operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, 2 * v11);
      return a1[70];
    }
    return v9;
  }
  if (*(uint64_t *)&v40[4] > operations_research::Domain::Max((operations_research::Domain *)(**((_QWORD **)a1 + 1) + 24 * (int)a2), v6))
  {
    v7 = a1[70];
    if (v7 == -1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v8 + 1);
      a1[70] = 2 * v8;
      operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, 2 * v8);
      v7 = a1[70];
    }
    return v7 ^ 1;
  }
  operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)a1, a2, a3, (uint64_t)&v36);
  v12 = v36;
  v13 = v37;
  *(_QWORD *)v35 = v36;
  *(_DWORD *)&v35[8] = v37;
  v14 = *((_QWORD *)a1 + 4);
  v15 = -1431655765 * ((unint64_t)(*((_QWORD *)a1 + 5) - v14) >> 3);
  if ((int)v36 < v15)
  {
    v16 = v14 + 24 * (int)v36;
    v19 = *(_QWORD **)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v18 = v19;
    if (v19)
    {
      v20 = v17;
      do
      {
        v21 = *(_QWORD *)((char *)v18 + 28);
        v22 = v21 < *(_QWORD *)&v35[4];
        if (v21 >= *(uint64_t *)&v35[4])
          v23 = v18;
        else
          v23 = v18 + 1;
        if (!v22)
          v20 = v18;
        v18 = (_QWORD *)*v23;
      }
      while (*v23);
      if (v20 != v17 && *(uint64_t *)&v35[4] >= *(_QWORD *)((char *)v20 + 28))
      {
        v9 = *((unsigned int *)v20 + 9);
        if ((_DWORD)v9 != -1)
          return v9;
      }
    }
  }
  *(_QWORD *)v35 = v38;
  *(_DWORD *)&v35[8] = v39;
  if ((int)v38 < v15)
  {
    v24 = v14 + 24 * (int)v38;
    v27 = *(_QWORD **)(v24 + 8);
    v25 = (_QWORD *)(v24 + 8);
    v26 = v27;
    if (v27)
    {
      v28 = v25;
      do
      {
        v29 = *(_QWORD *)((char *)v26 + 28);
        v30 = v29 < *(_QWORD *)&v35[4];
        if (v29 >= *(uint64_t *)&v35[4])
          v31 = v26;
        else
          v31 = v26 + 1;
        if (!v30)
          v28 = v26;
        v26 = (_QWORD *)*v31;
      }
      while (*v31);
      if (v28 != v25 && *(uint64_t *)&v35[4] >= *(_QWORD *)((char *)v28 + 28))
      {
        v32 = *((_DWORD *)v28 + 9);
        if (v32 != -1)
          return v32 ^ 1u;
      }
    }
  }
  ++*((_QWORD *)a1 + 3);
  v33 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v33 + 1);
  v9 = (2 * v33);
  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)a1, (const char *)v9, v12, v13);
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 208) + 24)
                   + (((unint64_t)(int)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 & 0x3E)) & 3) == 0
    || *operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__[0] < 1
    || operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1))
  {
    return v9;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v35, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 240);
  v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Created a fixed literal for no reason!", 38);
  google::LogMessage::~LogMessage((google::LogMessage *)v35);
  return v9;
}

void sub_22DB5EE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(uint64_t a1, const char *a2, const char *a3, int a4)
{
  unsigned int v6;
  operations_research::Domain *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[12];
  _BYTE v14[12];
  _BYTE v15[12];

  v6 = a2;
  *(_QWORD *)v15 = a3;
  *(_DWORD *)&v15[8] = a4;
  v8 = (operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * (int)a3);
  v9 = operations_research::Domain::Min(v8, a2);
  v11 = operations_research::Domain::Max(v8, v10);
  if (*(uint64_t *)&v15[4] <= v9)
  {
    operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, v6);
  }
  else
  {
    v12 = v11;
    if (*(uint64_t *)&v15[4] <= v11)
    {
      operations_research::sat::IntegerEncoder::Canonicalize(a1, a3, a4, (uint64_t)v13);
      operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(a1, *(uint64_t *)v13, *(int *)&v13[8], v6);
      operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(a1, *(uint64_t *)v14, *(int *)&v14[8], v6 ^ 1);
      if (*(_QWORD *)&v13[4] == v12)
        operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, v6, a3, v12);
      if (!(v9 + *(_QWORD *)&v14[4]))
        operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, v6 ^ 1, a3, v9);
    }
    else
    {
      operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, v6 ^ 1);
    }
  }
}

void operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  char **v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  const char *v49;
  unint64_t v50;
  const char *v51;
  const char *v52;
  unint64_t v53;
  int AssociatedLiteral;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  operations_research::Domain *v93;
  operations_research::Domain *v94;
  _BYTE v95[12];
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v93 = (operations_research::Domain *)(**(_QWORD **)(a1 + 8) + 24 * a3);
  if (a4 == -1)
  {
    if (operations_research::Domain::Min(v93, a2) >= -1 && operations_research::Domain::Max(v93, v11) <= 0)
    {
      v12 = *(_QWORD *)(a1 + 160);
      v13 = (*(_QWORD *)(a1 + 168) - v12) >> 2;
      if ((int)a2 >= (int)v13)
      {
        v15 = (((_QWORD)a2 << 32) + 0x100000000) >> 32;
        if (v15 <= v13)
        {
          if (v15 < v13)
            *(_QWORD *)(a1 + 168) = v12 + 4 * v15;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 160), v15 - v13, &operations_research::sat::kNoIntegerVariable);
          v12 = *(_QWORD *)(a1 + 160);
        }
        *(_DWORD *)(v12 + 4 * (int)a2) = a3 ^ 1;
      }
      else if (*(_DWORD *)(v12 + 4 * (int)a2) == -1)
      {
        *(_DWORD *)(v12 + 4 * (int)a2) = a3 ^ 1;
      }
    }
  }
  else if (a4 == 1
         && (operations_research::Domain::Min(v93, a2) & 0x8000000000000000) == 0
         && operations_research::Domain::Max(v93, v8) <= 1)
  {
    v9 = *(_QWORD *)(a1 + 160);
    v10 = (*(_QWORD *)(a1 + 168) - v9) >> 2;
    if ((int)a2 >= (int)v10)
    {
      v14 = (((_QWORD)a2 << 32) + 0x100000000) >> 32;
      if (v14 <= v10)
      {
        if (v14 < v10)
          *(_QWORD *)(a1 + 168) = v9 + 4 * v14;
        *(_DWORD *)(v9 + 4 * (int)a2) = a3;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 160), v14 - v10, &operations_research::sat::kNoIntegerVariable);
        *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * (int)a2) = a3;
      }
    }
    else if (*(_DWORD *)(v9 + 4 * (int)a2) == -1)
    {
      *(_DWORD *)(v9 + 4 * (int)a2) = a3;
    }
  }
  if (a3 >= 0)
    v16 = a3;
  else
    v16 = a3 + 1;
  v17 = v16 >> 1;
  if ((a3 & 1) != 0)
    v18 = -a4;
  else
    v18 = a4;
  *(_QWORD *)v95 = __PAIR64__(v18, v17);
  *(_DWORD *)&v95[8] = HIDWORD(v18);
  v96 = (int)a2;
  v91 = a2;
  v19 = *(_QWORD *)(a1 + 192)
      + 16
      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>((uint64_t *)(a1 + 184), (int *)v95);
  if (v20)
  {
    v21 = *(_QWORD *)v95;
    *(_DWORD *)(v19 + 8) = *(_DWORD *)&v95[8];
    *(_QWORD *)v19 = v21;
    *(_DWORD *)(v19 + 12) = v96;
    if (operations_research::Domain::Contains(v93, a4))
    {
      v24 = *(_QWORD *)(a1 + 232);
      v23 = *(_QWORD *)(a1 + 240);
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3);
      if (v17 >= (int)v25)
      {
        v26 = v17 + 1;
        if (v26 <= v25)
        {
          if (v26 < v25)
          {
            v30 = v24 + 24 * (int)v26;
            if (v23 != v30)
            {
              v31 = *(_QWORD *)(a1 + 240);
              do
              {
                v33 = *(void **)(v31 - 24);
                v31 -= 24;
                v32 = v33;
                if (v33)
                {
                  *(_QWORD *)(v23 - 16) = v32;
                  operator delete(v32);
                }
                v23 = v31;
              }
              while (v31 != v30);
            }
            *(_QWORD *)(a1 + 240) = v30;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 232, v26 - v25);
        }
        std::vector<BOOL>::resize(a1 + 256, v17 + 1, 0);
        v24 = *(_QWORD *)(a1 + 232);
      }
      v34 = (char **)(v24 + 24 * v17);
      v36 = v34 + 1;
      v35 = v34[1];
      v37 = (unint64_t)v34[2];
      if ((unint64_t)v35 >= v37)
      {
        v39 = *v34;
        v40 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *v34) >> 2);
        v41 = v40 + 1;
        if (v40 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v39) >> 2);
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0xAAAAAAAAAAAAAAALL)
          v43 = 0x1555555555555555;
        else
          v43 = v41;
        if (v43)
        {
          v90 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *v34) >> 2);
          if (v43 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = (char *)operator new(12 * v43);
          v40 = v90;
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[12 * v40];
        *(_QWORD *)v45 = v18;
        *((_DWORD *)v45 + 2) = (_DWORD)v91;
        v38 = v45 + 12;
        if (v35 != v39)
        {
          do
          {
            v46 = *(_QWORD *)(v35 - 12);
            v35 -= 12;
            v47 = *((_DWORD *)v35 + 2);
            *(_QWORD *)(v45 - 12) = v46;
            v45 -= 12;
            *((_DWORD *)v45 + 2) = v47;
          }
          while (v35 != v39);
          v35 = *v34;
        }
        *v34 = v45;
        *v36 = v38;
        v34[2] = &v44[12 * v43];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v35 = v18;
        *((_DWORD *)v35 + 2) = (_DWORD)v91;
        v38 = v35 + 12;
      }
      *v36 = v38;
      if (operations_research::Domain::Min(v93, v22) == a4 && operations_research::Domain::Max(v93, v48) == a4)
      {
        operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, (int)v91);
        return;
      }
      *(_DWORD *)v95 = a3;
      *(_QWORD *)&v95[4] = a4;
      v49 = *(const char **)v95;
      if (a4 >= (uint64_t)0x8000000000000002)
        v50 = -a4;
      else
        v50 = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)v95 = a3 ^ 1;
      *(_QWORD *)&v95[4] = v50;
      v51 = *(const char **)v95;
      v53 = HIDWORD(v50);
      if (operations_research::Domain::Min(v93, v48) == a4)
      {
        operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(a1, (const char *)v91, v51, SHIDWORD(v50));
        return;
      }
      if (operations_research::Domain::Max(v93, v52) == a4)
      {
        operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(a1, (const char *)v91, v49, SHIDWORD(a4));
        return;
      }
      v94 = (operations_research::Domain *)HIDWORD(a4);
      AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)a1, v49, SHIDWORD(a4));
      v55 = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)a1, v51, SHIDWORD(v50));
      v56 = *(_QWORD *)a1;
      *(_DWORD *)v95 = AssociatedLiteral;
      *(_DWORD *)&v95[4] = v91 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v56, (int *)v95, 2uLL);
      v57 = *(_QWORD *)a1;
      *(_DWORD *)v95 = v55;
      *(_DWORD *)&v95[4] = v91 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v57, (int *)v95, 2uLL);
      v58 = *(_QWORD *)a1;
      *(_DWORD *)v95 = AssociatedLiteral ^ 1;
      *(_DWORD *)&v95[4] = v55 ^ 1;
      *(_DWORD *)&v95[8] = (_DWORD)v91;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v58, (int *)v95, 3uLL);
      v59 = (_QWORD)v91 << 32;
      v60 = (((_QWORD)v91 << 32) + 0x100000000) >> 32;
      v61 = *(_QWORD *)(a1 + 112);
      v62 = *(_QWORD *)(a1 + 120);
      v63 = (uint64_t *)(a1 + 112);
      v64 = (v62 - v61) >> 5;
      if (v60 > v64)
      {
        std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v63, v60 - v64);
        v61 = *v63;
      }
      v65 = v61 + 32 * (int)v91;
      v67 = v65 + 8;
      v66 = *(_QWORD *)v65;
      if ((*(_QWORD *)v65 & 1) != 0)
      {
        v67 = *(_QWORD *)(v65 + 8);
        v68 = *(_QWORD *)(v65 + 16);
        v69 = v66 >> 1;
        if (v66 >> 1 != v68)
          goto LABEL_77;
      }
      else
      {
        v68 = 2;
        v69 = v66 >> 1;
        if (v66 >> 1 != 2)
        {
LABEL_77:
          v70 = v67 + 12 * v69;
          *(_QWORD *)v70 = v51;
          *(_DWORD *)(v70 + 8) = HIDWORD(v50);
          v71 = *(_QWORD *)v65;
          goto LABEL_86;
        }
      }
      v92 = 2 * v68;
      if ((unint64_t)(2 * v68) > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v72 = (char *)operator new(24 * v68);
      v73 = v72;
      v74 = &v72[12 * v68];
      *(_QWORD *)v74 = v51;
      *((_DWORD *)v74 + 2) = v53;
      if (v66 >= 2)
      {
        v75 = v72;
        do
        {
          v76 = *(_QWORD *)v67;
          *((_DWORD *)v75 + 2) = *(_DWORD *)(v67 + 8);
          *(_QWORD *)v75 = v76;
          v75 += 12;
          v67 += 12;
          --v68;
        }
        while (v68);
      }
      if ((v66 & 1) != 0)
      {
        operator delete(*(void **)(v65 + 8));
        v66 = *(_QWORD *)v65;
      }
      *(_QWORD *)(v65 + 8) = v73;
      *(_QWORD *)(v65 + 16) = v92;
      v71 = v66 | 1;
LABEL_86:
      *(_QWORD *)v65 = v71 + 2;
      v77 = *v63 + 32 * (v59 >> 32);
      v79 = v77 + 8;
      v78 = *(_QWORD *)v77;
      if ((*(_QWORD *)v77 & 1) != 0)
      {
        v79 = *(_QWORD *)(v77 + 8);
        v80 = *(_QWORD *)(v77 + 16);
        v81 = v78 >> 1;
        if (v78 >> 1 != v80)
          goto LABEL_88;
      }
      else
      {
        v80 = 2;
        v81 = v78 >> 1;
        if (v78 >> 1 != 2)
        {
LABEL_88:
          v82 = v79 + 12 * v81;
          *(_QWORD *)v82 = v49;
          *(_DWORD *)(v82 + 8) = (_DWORD)v94;
          v83 = *(_QWORD *)v77;
LABEL_97:
          *(_QWORD *)v77 = v83 + 2;
          return;
        }
      }
      v84 = 2 * v80;
      if ((unint64_t)(2 * v80) > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v85 = (char *)operator new(24 * v80);
      v86 = v85;
      v87 = &v85[12 * v80];
      *(_QWORD *)v87 = v49;
      *((_DWORD *)v87 + 2) = (_DWORD)v94;
      if (v78 >= 2)
      {
        v88 = v85;
        do
        {
          v89 = *(_QWORD *)v79;
          *((_DWORD *)v88 + 2) = *(_DWORD *)(v79 + 8);
          *(_QWORD *)v88 = v89;
          v88 += 12;
          v79 += 12;
          --v80;
        }
        while (v80);
      }
      if ((v78 & 1) != 0)
      {
        operator delete(*(void **)(v77 + 8));
        v78 = *(_QWORD *)v77;
      }
      *(_QWORD *)(v77 + 8) = v86;
      *(_QWORD *)(v77 + 16) = v84;
      v83 = v78 | 1;
      goto LABEL_97;
    }
    operations_research::sat::SatSolver::AddUnitClause(*(_QWORD *)a1, a2 ^ 1);
  }
  else
  {
    v27 = *(_DWORD *)(v19 + 12);
    if (v27 != (_DWORD)a2)
    {
      v28 = *(_QWORD *)a1;
      *(_DWORD *)v95 = (_DWORD)a2;
      *(_DWORD *)&v95[4] = v27 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v28, (int *)v95, 2uLL);
      v29 = *(_QWORD *)a1;
      *(_DWORD *)v95 = a2 ^ 1;
      *(_DWORD *)&v95[4] = v27;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v29, (int *)v95, 2uLL);
    }
  }
}

void operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _BYTE v68[12];
  int v69;
  int v70;
  uint64_t v71;

  v5 = a2;
  v71 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v68 = a2;
  *(_DWORD *)&v68[8] = a3;
  v7 = a4 + 1;
  v8 = (_QWORD *)(a1 + 88);
  v9 = (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5;
  if (v7 > v9)
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 88), v7 - v9);
  v10 = (_QWORD *)(a1 + 112);
  v11 = (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 5;
  if (v7 > v11)
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 112), v7 - v11);
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v14 = (v12 - v13) >> 3;
  v15 = 0xAAAAAAAAAAAAAAABLL * v14;
  if (v5 >= -1431655765 * (int)v14)
  {
    v16 = v5 + 1;
    if (v16 <= v15)
    {
      if (v16 < v15)
      {
        v17 = v13 + 24 * (int)v16;
        if (v12 != v17)
        {
          do
          {
            v18 = v12 - 24;
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v12 - 24, *(_QWORD **)(v12 - 16));
            v12 = v18;
          }
          while (v18 != v17);
        }
        *(_QWORD *)(a1 + 40) = v17;
      }
    }
    else
    {
      std::vector<std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>::__append((void **)(a1 + 32), v16 - v15);
    }
  }
  v19 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 24 * v5);
  v21 = v19 + 1;
  v20 = v19[1];
  if (!v20)
  {
    v22 = v19 + 1;
    goto LABEL_19;
  }
  do
  {
    while (1)
    {
      v22 = (uint64_t **)v20;
      v23 = *(uint64_t *)((char *)v20 + 28);
      if (*(uint64_t *)&v68[4] >= v23)
        break;
      v20 = *v22;
      v21 = v22;
      if (!*v22)
        goto LABEL_19;
    }
    if (v23 >= *(uint64_t *)&v68[4])
    {
      v35 = *((_DWORD *)v22 + 9);
      if (v35 != a4)
      {
        v36 = *(_QWORD *)a1;
        v69 = a4;
        v70 = v35 ^ 1;
        operations_research::sat::SatSolver::AddClauseDuringSearch(v36, &v69, 2uLL);
        v37 = *(_QWORD *)a1;
        v69 = a4 ^ 1;
        v70 = v35;
        operations_research::sat::SatSolver::AddClauseDuringSearch(v37, &v69, 2uLL);
      }
      return;
    }
    v20 = v22[1];
  }
  while (v20);
  v21 = v22 + 1;
LABEL_19:
  v24 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v24 + 28) = *(_QWORD *)&v68[4];
  *((_DWORD *)v24 + 9) = a4;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = v22;
  *v21 = (uint64_t *)v24;
  v25 = (uint64_t *)**v19;
  v26 = (uint64_t *)v24;
  if (v25)
  {
    *v19 = v25;
    v26 = *v21;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v19[1], v26);
  v19[2] = (uint64_t *)((char *)v19[2] + 1);
  operations_research::sat::IntegerEncoder::AddImplications(a1, v19, (uint64_t *)v24, a4);
  v27 = a4;
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 208) + 24)
                   + (((unint64_t)a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a4) & 1) != 0
    && !*(_DWORD *)(*(_QWORD *)a1 + 304))
  {
    v39 = *(_DWORD **)(a1 + 144);
    v38 = *(_QWORD *)(a1 + 152);
    if ((unint64_t)v39 >= v38)
    {
      v41 = *(_DWORD **)(a1 + 136);
      v42 = 0xAAAAAAAAAAAAAAABLL * (v39 - v41) + 1;
      if (v42 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v41) >> 2);
      if (2 * v43 > v42)
        v42 = 2 * v43;
      if (v43 >= 0xAAAAAAAAAAAAAAALL)
        v44 = 0x1555555555555555;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 > 0x1555555555555555)
          goto LABEL_67;
        v45 = (char *)operator new(12 * v44);
      }
      else
      {
        v45 = 0;
      }
      v46 = &v45[4 * (v39 - v41)];
      *(_QWORD *)v46 = *(_QWORD *)v68;
      *((_DWORD *)v46 + 2) = *(_DWORD *)&v68[8];
      v40 = v46 + 12;
      if (v39 != v41)
      {
        do
        {
          v47 = *(_QWORD *)(v39 - 3);
          v39 -= 3;
          v48 = v39[2];
          *(_QWORD *)(v46 - 12) = v47;
          v46 -= 12;
          *((_DWORD *)v46 + 2) = v48;
        }
        while (v39 != v41);
        v39 = *(_DWORD **)(a1 + 136);
      }
      *(_QWORD *)(a1 + 136) = v46;
      *(_QWORD *)(a1 + 144) = v40;
      *(_QWORD *)(a1 + 152) = &v45[12 * v44];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_QWORD *)v39 = *(_QWORD *)v68;
      v39[2] = *(_DWORD *)&v68[8];
      v40 = v39 + 3;
    }
    *(_QWORD *)(a1 + 144) = v40;
    v28 = *v8 + 32 * v27;
    v30 = v28 + 8;
    v29 = *(_QWORD *)v28;
    if ((*(_QWORD *)v28 & 1) != 0)
      goto LABEL_46;
LABEL_24:
    v31 = 2;
    v32 = v29 >> 1;
    if (v29 >> 1 != 2)
      goto LABEL_25;
LABEL_47:
    v49 = 2 * v31;
    if ((unint64_t)(2 * v31) <= 0x1555555555555555)
    {
      v50 = (char *)operator new(24 * v31);
      v51 = v50;
      v52 = &v50[12 * v31];
      *(_QWORD *)v52 = *(_QWORD *)v68;
      *((_DWORD *)v52 + 2) = *(_DWORD *)&v68[8];
      if (v29 >= 2)
      {
        v53 = v50;
        do
        {
          v54 = *(_QWORD *)v30;
          *((_DWORD *)v53 + 2) = *(_DWORD *)(v30 + 8);
          *(_QWORD *)v53 = v54;
          v53 += 12;
          v30 += 12;
          --v31;
        }
        while (v31);
      }
      if ((v29 & 1) != 0)
      {
        operator delete(*(void **)(v28 + 8));
        v29 = *(_QWORD *)v28;
      }
      *(_QWORD *)(v28 + 8) = v51;
      *(_QWORD *)(v28 + 16) = v49;
      v34 = v29 | 1;
      goto LABEL_54;
    }
LABEL_67:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v28 = *v8 + 32 * a4;
  v30 = v28 + 8;
  v29 = *(_QWORD *)v28;
  if ((*(_QWORD *)v28 & 1) == 0)
    goto LABEL_24;
LABEL_46:
  v30 = *(_QWORD *)(v28 + 8);
  v31 = *(_QWORD *)(v28 + 16);
  v32 = v29 >> 1;
  if (v29 >> 1 == v31)
    goto LABEL_47;
LABEL_25:
  v33 = v30 + 12 * v32;
  *(_QWORD *)v33 = *(_QWORD *)v68;
  *(_DWORD *)(v33 + 8) = *(_DWORD *)&v68[8];
  v34 = *(_QWORD *)v28;
LABEL_54:
  *(_QWORD *)v28 = v34 + 2;
  v55 = *v10 + 32 * v27;
  v57 = v55 + 8;
  v56 = *(_QWORD *)v55;
  if ((*(_QWORD *)v55 & 1) == 0)
  {
    v58 = 2;
    v59 = v56 >> 1;
    if (v56 >> 1 != 2)
      goto LABEL_56;
LABEL_58:
    v62 = 2 * v58;
    if ((unint64_t)(2 * v58) <= 0x1555555555555555)
    {
      v63 = (char *)operator new(24 * v58);
      v64 = v63;
      v65 = &v63[12 * v58];
      *(_QWORD *)v65 = *(_QWORD *)v68;
      *((_DWORD *)v65 + 2) = *(_DWORD *)&v68[8];
      if (v56 >= 2)
      {
        v66 = v63;
        do
        {
          v67 = *(_QWORD *)v57;
          *((_DWORD *)v66 + 2) = *(_DWORD *)(v57 + 8);
          *(_QWORD *)v66 = v67;
          v66 += 12;
          v57 += 12;
          --v58;
        }
        while (v58);
      }
      if ((v56 & 1) != 0)
      {
        operator delete(*(void **)(v55 + 8));
        v56 = *(_QWORD *)v55;
      }
      *(_QWORD *)(v55 + 8) = v64;
      *(_QWORD *)(v55 + 16) = v62;
      v61 = v56 | 1;
      goto LABEL_65;
    }
    goto LABEL_67;
  }
  v57 = *(_QWORD *)(v55 + 8);
  v58 = *(_QWORD *)(v55 + 16);
  v59 = v56 >> 1;
  if (v56 >> 1 == v58)
    goto LABEL_58;
LABEL_56:
  v60 = v57 + 12 * v59;
  *(_QWORD *)v60 = *(_QWORD *)v68;
  *(_DWORD *)(v60 + 8) = *(_DWORD *)&v68[8];
  v61 = *(_QWORD *)v55;
LABEL_65:
  *(_QWORD *)v55 = v61 + 2;
}

void std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](void **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 2);
  v10 = v9 + 1;
  if (v9 + 1 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0xAAAAAAAAAAAAAAALL)
    v12 = 0x1555555555555555;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(12 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[12 * v9];
  *(_QWORD *)v14 = *a2;
  *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
  v7 = v14 + 12;
  if (v5 != v8)
  {
    do
    {
      v15 = *(_QWORD *)(v5 - 12);
      v5 -= 12;
      v16 = *((_DWORD *)v5 + 2);
      *(_QWORD *)(v14 - 12) = v15;
      v14 -= 12;
      *((_DWORD *)v14 + 2) = v16;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[12 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

uint64_t operations_research::sat::IntegerTrail::Propagate(operations_research::sat::IntegerTrail *this, operations_research::sat::Trail *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t result;
  uint64_t *v81[3];
  int v82;
  unint64_t v83[3];
  unint64_t *v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v4 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
  v5 = (uint64_t *)*((_QWORD *)this + 112);
  v6 = (uint64_t *)*((_QWORD *)this + 113);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v4);
  }
  v8 = (char *)*((_QWORD *)this + 24);
  v9 = (char *)*((_QWORD *)this + 25);
  v10 = (v9 - v8) >> 2;
  if (v10 < v4)
  {
    v11 = -858993459 * ((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2);
    v12 = *((_QWORD *)this + 26);
    if ((unint64_t)v9 < v12)
    {
      *(_DWORD *)v9 = v11;
      v13 = (uint64_t)(v9 + 4);
      goto LABEL_25;
    }
    v14 = v10 + 1;
    if ((v10 + 1) >> 62)
      goto LABEL_83;
    v15 = v12 - (_QWORD)v8;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        goto LABEL_84;
      v17 = operator new(4 * v16);
      v18 = &v17[4 * v10];
      v19 = &v17[4 * v16];
      *v18 = v11;
      v13 = (uint64_t)(v18 + 1);
      v20 = v9 - v8;
      if (v9 == v8)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (_DWORD *)(4 * v10);
      v19 = 0;
      *(_DWORD *)(4 * v10) = v11;
      v13 = 4 * v10 + 4;
      v20 = v9 - v8;
      if (v9 == v8)
      {
LABEL_23:
        *((_QWORD *)this + 24) = v18;
        *((_QWORD *)this + 25) = v13;
        *((_QWORD *)this + 26) = v19;
        if (v8)
          operator delete(v8);
LABEL_25:
        *((_QWORD *)this + 25) = v13;
        v30 = (*((_QWORD *)this + 31) - *((_QWORD *)this + 30)) >> 2;
        v32 = (char *)*((_QWORD *)this + 28);
        v31 = *((_QWORD *)this + 29);
        if ((unint64_t)v32 < v31)
        {
          *(_DWORD *)v32 = v30;
          v33 = (uint64_t)(v32 + 4);
LABEL_46:
          *((_QWORD *)this + 28) = v33;
          v52 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
          v82 = (*((_DWORD *)a2 + 2) >> 1) & 0x7FFFFFF;
          v83[0] = (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2;
          if (v83[0] != v52)
          {
            v81[0] = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v82, (int)v83, "trail->CurrentDecisionLevel() == integer_search_levels_.size()");
            if (v81[0])
            {
              google::LogMessageFatal::LogMessageFatal(v83, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 498, v81);
              google::LogMessage::stream((google::LogMessage *)v83);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v83);
            }
          }
          goto LABEL_47;
        }
        v34 = (char *)*((_QWORD *)this + 27);
        v35 = (v32 - v34) >> 2;
        v36 = v35 + 1;
        if (!((unint64_t)(v35 + 1) >> 62))
        {
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (!v38)
          {
            v39 = 0;
            v40 = (_DWORD *)(4 * v35);
            v41 = 0;
            *(_DWORD *)(4 * v35) = v30;
            v33 = 4 * v35 + 4;
            v42 = v32 - v34;
            if (v32 == v34)
              goto LABEL_44;
            goto LABEL_38;
          }
          if (!(v38 >> 62))
          {
            v39 = operator new(4 * v38);
            v40 = &v39[4 * v35];
            v41 = &v39[4 * v38];
            *v40 = v30;
            v33 = (uint64_t)(v40 + 1);
            v42 = v32 - v34;
            if (v32 == v34)
            {
LABEL_44:
              *((_QWORD *)this + 27) = v40;
              *((_QWORD *)this + 28) = v33;
              *((_QWORD *)this + 29) = v41;
              if (v34)
                operator delete(v34);
              goto LABEL_46;
            }
LABEL_38:
            v43 = v42 - 4;
            if (v43 < 0x2C)
              goto LABEL_88;
            if ((unint64_t)(v34 - v39) < 0x20)
              goto LABEL_88;
            v44 = (v43 >> 2) + 1;
            v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            v46 = &v32[-v45];
            v40 = (_DWORD *)((char *)v40 - v45);
            v47 = &v39[4 * v35 - 16];
            v48 = v32 - 16;
            v49 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 8;
            }
            while (v49);
            v32 = v46;
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_88:
              do
              {
                v51 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *--v40 = v51;
              }
              while (v32 != v34);
            }
            goto LABEL_44;
          }
LABEL_84:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
LABEL_83:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    v21 = v20 - 4;
    if (v21 < 0x2C)
      goto LABEL_89;
    if ((unint64_t)(v8 - v17) < 0x20)
      goto LABEL_89;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v9[-v23];
    v18 = (_DWORD *)((char *)v18 - v23);
    v25 = &v17[4 * v10 - 16];
    v26 = v9 - 16;
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    v9 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_89:
      do
      {
        v29 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--v18 = v29;
      }
      while (v9 != v8);
    }
    goto LABEL_23;
  }
LABEL_47:
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel((uint64_t *)this + 54, v4);
  if ((_DWORD)v4)
  {
    v53 = *((_DWORD *)this + 9);
    v54 = *((_DWORD *)a2 + 3);
    if (v53 < v54)
      goto LABEL_67;
    return 1;
  }
  v55 = *((_QWORD *)this + 116);
  memset(v81, 0, sizeof(v81));
  v57 = *(_BYTE **)(v55 + 136);
  v56 = *(_BYTE **)(v55 + 144);
  v58 = v56 - v57;
  if (v56 != v57)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v58 >> 2) >= 0x1555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (unint64_t)operator new(v58);
    memcpy((void *)v4, v57, v58);
    v59 = v4;
    while (1)
    {
      v62 = *(_QWORD *)v59;
      v63 = *(_DWORD *)(v59 + 8);
      v64 = *(int *)(*((_QWORD *)this + 51) + ((uint64_t)(*(_QWORD *)v59 << 32) >> 30));
      if ((_DWORD)v64 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 117) + 24) + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v64) & 1) != 0)
      {
        goto LABEL_56;
      }
      v84 = 0;
      v65 = operations_research::sat::IntegerTrail::EnqueueInternal((uint64_t)this, v62, v63, (uint64_t)v83, 0, 0, 0, 0, -858993459 * ((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2));
      v60 = v84;
      if (v84 == v83)
        break;
      if (v84)
      {
        v61 = 5;
        goto LABEL_54;
      }
LABEL_55:
      if (!v65)
      {
        operator delete((void *)v4);
        return 0;
      }
LABEL_56:
      v59 += 12;
      if (v59 == v4 + 4 * (v58 >> 2))
      {
        operator delete((void *)v4);
        goto LABEL_63;
      }
    }
    v60 = v83;
    v61 = 4;
LABEL_54:
    (*(void (**)(void))(*v60 + 8 * v61))();
    goto LABEL_55;
  }
LABEL_63:
  *(_QWORD *)(*((_QWORD *)this + 116) + 144) = *(_QWORD *)(*((_QWORD *)this + 116) + 136);
  v53 = *((_DWORD *)this + 9);
  v54 = *((_DWORD *)a2 + 3);
  if (v53 >= v54)
    return 1;
  while (1)
  {
LABEL_67:
    v66 = v53++;
    *((_DWORD *)this + 9) = v53;
    v67 = *(int *)(*((_QWORD *)a2 + 9) + 4 * v66);
    v68 = (_QWORD *)*((_QWORD *)this + 116);
    v69 = v68[11];
    v70 = (unint64_t)(v68[12] - v69) >> 5;
    v71 = v68 + 7;
    v72 = (unint64_t *)(v69 + 32 * v67);
    if ((int)v67 >= (int)v70)
      v73 = v71;
    else
      v73 = v72;
    v76 = *v73;
    v75 = (uint64_t)(v73 + 1);
    v74 = v76;
    if ((v76 & 1) != 0)
      v75 = *(_QWORD *)v75;
    if (v74 >= 2)
      break;
LABEL_66:
    if (v53 >= v54)
      return 1;
  }
  v77 = v67;
  v78 = v75 + 12 * (v74 >> 1);
  while (1)
  {
    v79 = *(int *)(*((_QWORD *)this + 51) + ((uint64_t)(*(_QWORD *)v75 << 32) >> 30));
    if ((_DWORD)v79 == -1
      || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 117) + 24) + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v79) & 1) == 0)
    {
      v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v75 + 8);
      result = operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral(this, *(_QWORD *)v75, v4, v77);
      if (!(_DWORD)result)
        return result;
    }
    v75 += 12;
    if (v75 == v78)
    {
      v53 = *((_DWORD *)this + 9);
      v54 = *((_DWORD *)a2 + 3);
      goto LABEL_66;
    }
  }
}

void sub_22DB60400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB60408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v7 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v11, a4, a5, a6, a7, -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_22DB60534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  uint64_t updated;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD *v16;
  void **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  int v67;
  unint64_t v68;
  int *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  int *v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  _OWORD *v84;
  int *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  int v103;
  int v104;
  uint64_t *__src;
  void *v106[3];
  _BYTE v107[12];
  unint64_t v108[3];
  unint64_t *v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v107 = a2;
  *(_DWORD *)&v107[8] = a3;
  v4 = *(_QWORD *)&v107[4];
  v5 = a1[5];
  if (*(uint64_t *)&v107[4] <= *(_QWORD *)(v5 + 12 * (int)a2))
    return 1;
  v8 = a2;
  ++a1[106];
  v9 = a2 ^ 1;
  if (v4 <= -*(_QWORD *)(v5 + 12 * (int)(a2 ^ 1)))
  {
    v13 = a2;
    v14 = (_QWORD **)a1[109];
    v15 = (_QWORD **)a1[110];
    while (v14 != v15)
    {
      v16 = *v14++;
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v16, v13);
    }
    if (a1[24] == a1[25])
    {
      v23 = a1[5];
      v24 = 12 * v8;
      *(_QWORD *)(v23 + v24) = v4;
      *(_QWORD *)(a1[18] + 20 * v8) = v4;
      v25 = (_QWORD *)a1[117];
      v25[18] = 0;
      v25[13] = v25[12];
      operations_research::Domain::Domain(v106, *(_QWORD *)(v23 + v24), -*(_QWORD *)(v23 + 12 * v9));
      updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((int)a1, v13, (operations_research::Domain *)v106);
      if (((uint64_t)v106[0] & 1) != 0)
        operator delete(v106[1]);
      return updated;
    }
    v18 = (char *)a1[31];
    v17 = (void **)(a1 + 30);
    v19 = (unint64_t)&v18[-a1[30]] >> 2;
    v104 = v19;
    v108[0] = (uint64_t)(a1[34] - a1[33]) >> 2;
    v103 = v19;
    if (v108[0] == (int)v19)
    {
      v20 = (a1[37] - a1[36]) >> 2;
      v21 = a1[32];
      if ((unint64_t)v18 < v21)
      {
LABEL_11:
        *(_DWORD *)v18 = v20;
        v22 = (uint64_t)(v18 + 4);
        goto LABEL_39;
      }
    }
    else
    {
      __src = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v104, (int)v108, "reason_index == bounds_reason_starts_.size()");
      if (__src)
      {
        google::LogMessageFatal::LogMessageFatal(v108, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 1327, &__src);
        google::LogMessage::stream((google::LogMessage *)v108);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v108);
      }
      v20 = (a1[37] - a1[36]) >> 2;
      v18 = (char *)a1[31];
      v21 = a1[32];
      if ((unint64_t)v18 < v21)
        goto LABEL_11;
    }
    v26 = (char *)*v17;
    v27 = v18 - (_BYTE *)*v17;
    v28 = v27 >> 2;
    v29 = (v27 >> 2) + 1;
    if (v29 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v30 = v21 - (_QWORD)v26;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v32 = operator new(4 * v31);
      v33 = &v32[4 * v28];
      v34 = &v32[4 * v31];
      *v33 = v20;
      v22 = (uint64_t)(v33 + 1);
      v35 = v18 - v26;
      if (v18 == v26)
        goto LABEL_37;
    }
    else
    {
      v32 = 0;
      v33 = (_DWORD *)(4 * v28);
      v34 = 0;
      *(_DWORD *)(4 * v28) = v20;
      v22 = 4 * v28 + 4;
      v35 = v18 - v26;
      if (v18 == v26)
        goto LABEL_37;
    }
    v36 = v35 - 4;
    if (v36 >= 0x2C)
    {
      if ((unint64_t)(v18 - v32 - v27) >= 0x20)
      {
        v38 = (v36 >> 2) + 1;
        v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
        v37 = &v18[-v39];
        v33 = (_DWORD *)((char *)v33 - v39);
        v40 = &v32[4 * v28 - 16];
        v41 = v18 - 16;
        v42 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 32;
          v42 -= 8;
        }
        while (v42);
        if (v38 == (v38 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          a1[30] = v33;
          a1[31] = v22;
          a1[32] = v34;
          if (v26)
            operator delete(v26);
LABEL_39:
          a1[31] = v22;
          v45 = -1431655765 * ((a1[40] - a1[39]) >> 2);
          v47 = (char *)a1[34];
          v46 = a1[35];
          if ((unint64_t)v47 < v46)
          {
            *(_DWORD *)v47 = v45;
            v48 = (uint64_t)(v47 + 4);
            goto LABEL_60;
          }
          v49 = (char *)a1[33];
          v50 = (v47 - v49) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v52 = v46 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v54 = operator new(4 * v53);
            v55 = &v54[4 * v50];
            v56 = &v54[4 * v53];
            *v55 = v45;
            v48 = (uint64_t)(v55 + 1);
            v57 = v47 - v49;
            if (v47 == v49)
              goto LABEL_58;
          }
          else
          {
            v54 = 0;
            v55 = (_DWORD *)(4 * v50);
            v56 = 0;
            *(_DWORD *)(4 * v50) = v45;
            v48 = 4 * v50 + 4;
            v57 = v47 - v49;
            if (v47 == v49)
            {
LABEL_58:
              a1[33] = v55;
              a1[34] = v48;
              a1[35] = v56;
              if (v49)
                operator delete(v49);
LABEL_60:
              a1[34] = v48;
              v67 = a4 ^ 1;
              v69 = (int *)a1[37];
              v68 = a1[38];
              if ((unint64_t)v69 < v68)
              {
                *v69 = v67;
                v70 = (uint64_t)(v69 + 1);
LABEL_81:
                a1[37] = v70;
                v89 = *(_DWORD *)v107;
                v90 = *(_DWORD *)(a1[5] + 12 * *(int *)v107 + 8);
                v92 = (_DWORD *)a1[19];
                v91 = a1[20];
                if ((unint64_t)v92 >= v91)
                {
                  v94 = (_DWORD *)a1[18];
                  v95 = 0xCCCCCCCCCCCCCCCDLL * (v92 - v94) + 1;
                  if (v95 > 0xCCCCCCCCCCCCCCCLL)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v96 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (_QWORD)v94) >> 2);
                  if (2 * v96 > v95)
                    v95 = 2 * v96;
                  if (v96 >= 0x666666666666666)
                    v97 = 0xCCCCCCCCCCCCCCCLL;
                  else
                    v97 = v95;
                  if (v97)
                  {
                    if (v97 > 0xCCCCCCCCCCCCCCCLL)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v98 = (char *)operator new(20 * v97);
                  }
                  else
                  {
                    v98 = 0;
                  }
                  v99 = &v98[4 * (v92 - v94)];
                  *(_QWORD *)v99 = v4;
                  *((_DWORD *)v99 + 2) = v89;
                  *((_DWORD *)v99 + 3) = v90;
                  *((_DWORD *)v99 + 4) = v103;
                  v93 = v99 + 20;
                  if (v92 != v94)
                  {
                    do
                    {
                      v100 = *(_OWORD *)(v92 - 5);
                      *((_DWORD *)v99 - 1) = *(v92 - 1);
                      *(_OWORD *)(v99 - 20) = v100;
                      v99 -= 20;
                      v92 -= 5;
                    }
                    while (v92 != v94);
                    v92 = (_DWORD *)a1[18];
                  }
                  a1[18] = v99;
                  a1[19] = v93;
                  a1[20] = &v98[20 * v97];
                  if (v92)
                    operator delete(v92);
                }
                else
                {
                  *(_QWORD *)v92 = v4;
                  v92[2] = v89;
                  v92[3] = v90;
                  v93 = v92 + 5;
                  v92[4] = v103;
                }
                a1[19] = v93;
                v101 = a1[5] + 12 * v89;
                *(_QWORD *)v101 = v4;
                *(_DWORD *)(v101 + 8) = -858993459 * (((unint64_t)v93 - a1[18]) >> 2) - 1;
                return 1;
              }
              v71 = (int *)a1[36];
              v72 = v69 - v71;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v74 = v68 - (_QWORD)v71;
              if (v74 >> 1 > v73)
                v73 = v74 >> 1;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                if (v75 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v76 = operator new(4 * v75);
                v77 = (int *)&v76[4 * v72];
                v78 = &v76[4 * v75];
                *v77 = v67;
                v70 = (uint64_t)(v77 + 1);
                v79 = (char *)v69 - (char *)v71;
                if (v69 == v71)
                  goto LABEL_79;
              }
              else
              {
                v76 = 0;
                v77 = (int *)(4 * v72);
                v78 = 0;
                *(_DWORD *)(4 * v72) = v67;
                v70 = 4 * v72 + 4;
                v79 = (char *)v69 - (char *)v71;
                if (v69 == v71)
                {
LABEL_79:
                  a1[36] = v77;
                  a1[37] = v70;
                  a1[38] = v78;
                  if (v71)
                    operator delete(v71);
                  goto LABEL_81;
                }
              }
              v80 = v79 - 4;
              if (v80 < 0x2C)
                goto LABEL_112;
              if ((unint64_t)((char *)v71 - v76) < 0x20)
                goto LABEL_112;
              v81 = (v80 >> 2) + 1;
              v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
              v83 = &v69[v82 / 0xFFFFFFFFFFFFFFFCLL];
              v77 = (int *)((char *)v77 - v82);
              v84 = &v76[4 * v72 - 16];
              v85 = v69 - 4;
              v86 = v81 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *v84 = v87;
                v84 -= 2;
                v85 -= 8;
                v86 -= 8;
              }
              while (v86);
              v69 = v83;
              if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_112:
                do
                {
                  v88 = *--v69;
                  *--v77 = v88;
                }
                while (v69 != v71);
              }
              goto LABEL_79;
            }
          }
          v58 = v57 - 4;
          if (v58 < 0x2C)
            goto LABEL_113;
          if ((unint64_t)(v49 - v54) < 0x20)
            goto LABEL_113;
          v59 = (v58 >> 2) + 1;
          v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
          v61 = &v47[-v60];
          v55 = (_DWORD *)((char *)v55 - v60);
          v62 = &v54[4 * v50 - 16];
          v63 = v47 - 16;
          v64 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v65 = *(_OWORD *)v63;
            *(v62 - 1) = *((_OWORD *)v63 - 1);
            *v62 = v65;
            v62 -= 2;
            v63 -= 32;
            v64 -= 8;
          }
          while (v64);
          v47 = v61;
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_113:
            do
            {
              v66 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *--v55 = v66;
            }
            while (v47 != v49);
          }
          goto LABEL_58;
        }
      }
      else
      {
        v37 = v18;
      }
    }
    else
    {
      v37 = v18;
    }
    do
    {
      v44 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *--v33 = v44;
    }
    while (v37 != v26);
    goto LABEL_37;
  }
  LODWORD(__src) = a4 ^ 1;
  v109 = 0;
  updated = operations_research::sat::IntegerTrail::EnqueueInternal((int)a1, a2, a3, (int)v108, &__src, 1, 0, 0, -858993459 * ((a1[19] - a1[18]) >> 2));
  v11 = v109;
  if (v109 == v108)
  {
    v12 = 4;
    v11 = v108;
    goto LABEL_15;
  }
  if (v109)
  {
    v12 = 5;
LABEL_15:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return updated;
}

void sub_22DB60D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB60D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((a13 & 1) != 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerTrail::Untrail(operations_research::sat::IntegerTrail *this, const operations_research::sat::Trail *a2, int a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  std::vector<int>::size_type v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41[2];
  int v42;
  uint64_t *v43;

  ++*((_QWORD *)this + 107);
  v5 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
  v6 = (uint64_t *)*((_QWORD *)this + 112);
  v7 = (uint64_t *)*((_QWORD *)this + 113);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  }
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel((uint64_t *)this + 54, v5);
  v9 = *((_DWORD *)this + 9);
  if (v9 >= a3)
    v9 = a3;
  *((_DWORD *)this + 9) = v9;
  v10 = *((_QWORD *)this + 24);
  if (v5 >= (*((_QWORD *)this + 25) - v10) >> 2)
    return;
  v11 = *(_DWORD *)(v10 + 4 * v5);
  *((_QWORD *)this + 25) = v10 + 4 * v5;
  v42 = v11;
  v41[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  if (v41[0] > v11)
  {
    v43 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v42, (int)v41, "target >= vars_.size()");
    if (v43)
    {
      google::LogMessageFatal::LogMessageFatal(v41, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 551, &v43);
      google::LogMessage::stream((google::LogMessage *)v41);
      goto LABEL_47;
    }
  }
  v42 = v11;
  v12 = *((_QWORD *)this + 18);
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 19) - v12) >> 2);
  v41[0] = v13;
  if (v13 >= v11)
  {
    v14 = v13 - 1;
    if ((int)v13 - 1 < v11)
      goto LABEL_9;
    goto LABEL_44;
  }
  v43 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v42, (int)v41, "target <= integer_trail_.size()");
  if (v43)
  {
    google::LogMessageFatal::LogMessageFatal(v41, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 552, &v43);
    google::LogMessage::stream((google::LogMessage *)v41);
LABEL_47:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v41);
  }
  v12 = *((_QWORD *)this + 18);
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 19) - v12) >> 2);
  v14 = v13 - 1;
  if ((int)v13 - 1 >= v11)
  {
    do
    {
LABEL_44:
      v34 = v14;
      v35 = v12 + 20 * v14;
      v38 = *(_DWORD *)(v35 + 8);
      v36 = (int *)(v35 + 8);
      v37 = v38;
      if ((v38 & 0x80000000) == 0)
      {
        v39 = *(_DWORD *)(v12 + 20 * v34 + 12);
        v40 = *((_QWORD *)this + 5);
        *(_DWORD *)(v40 + 12 * v37 + 8) = v39;
        *(_QWORD *)(v40 + 12 * *v36) = *(_QWORD *)(v12 + 20 * v39);
      }
      v14 = v34 - 1;
    }
    while (v34 - 1 >= v11);
  }
LABEL_9:
  if (v11 <= v13)
  {
    if (v11 < v13)
      *((_QWORD *)this + 19) = v12 + 20 * v11;
  }
  else
  {
    std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append((char **)this + 18, v11 - v13);
  }
  v15 = *((_QWORD *)this + 27);
  v16 = (int *)(v15 + 4 * v5);
  v17 = *v16;
  v18 = (*((_QWORD *)this + 28) - v15) >> 2;
  if (v5 <= v18)
  {
    if (v5 < v18)
      *((_QWORD *)this + 28) = v16;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)this + 9, v5 - v18);
  }
  v19 = *((_QWORD *)this + 30);
  if (v17 < (*((_QWORD *)this + 31) - v19) >> 2)
  {
    v20 = *(int *)(v19 + 4 * v17);
    v21 = *((_QWORD *)this + 36);
    v22 = (*((_QWORD *)this + 37) - v21) >> 2;
    if (v20 <= v22)
    {
      if (v20 < v22)
        *((_QWORD *)this + 37) = v21 + 4 * v20;
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append((uint64_t)this + 288, v20 - v22);
    }
    v23 = *(int *)(*((_QWORD *)this + 33) + 4 * v17);
    v24 = *((_QWORD *)this + 39);
    v25 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 40) - v24) >> 2);
    if (v23 <= v25)
    {
      if (v23 < v25)
      {
        *((_QWORD *)this + 40) = v24 + 12 * (int)v23;
        v26 = *((_QWORD *)this + 42);
        if (v23 < (*((_QWORD *)this + 43) - v26) >> 2)
          goto LABEL_30;
      }
      else
      {
        v26 = *((_QWORD *)this + 42);
        if (v23 < (*((_QWORD *)this + 43) - v26) >> 2)
          goto LABEL_30;
      }
    }
    else
    {
      std::vector<operations_research::sat::IntegerLiteral>::__append((void **)this + 39, v23 - v25);
      v26 = *((_QWORD *)this + 42);
      if (v23 < (*((_QWORD *)this + 43) - v26) >> 2)
      {
LABEL_30:
        *((_QWORD *)this + 43) = v26 + 4 * v23;
        v27 = *((_QWORD *)this + 30);
        v31 = (*((_QWORD *)this + 31) - v27) >> 2;
        v29 = v17 >= v31;
        v30 = v17 - v31;
        if (v17 <= v31)
        {
LABEL_31:
          if (!v29)
            *((_QWORD *)this + 31) = v27 + 4 * v17;
          goto LABEL_33;
        }
LABEL_28:
        std::vector<int>::__append((std::vector<int> *)this + 10, v30);
LABEL_33:
        v32 = *((_QWORD *)this + 33);
        v33 = (*((_QWORD *)this + 34) - v32) >> 2;
        if (v17 <= v33)
        {
          if (v17 < v33)
            *((_QWORD *)this + 34) = v32 + 4 * v17;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)this + 11, v17 - v33);
        }
        return;
      }
    }
    v27 = *((_QWORD *)this + 30);
    v28 = (*((_QWORD *)this + 31) - v27) >> 2;
    v29 = v17 >= v28;
    v30 = v17 - v28;
    if (v17 <= v28)
      goto LABEL_31;
    goto LABEL_28;
  }
}

void sub_22DB6115C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB61164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;
  BOOL v3;
  std::vector<int>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void operations_research::sat::IntegerTrail::ReserveSpaceForNumVariables(operations_research::sat::IntegerTrail *this, int a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _BYTE *v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  int v63;

  v4 = (char *)*((_QWORD *)this + 5);
  v5 = 2 * a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v4) >> 2) < v5)
  {
    if (a2 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)*((_QWORD *)this + 6);
    v7 = (char *)operator new(12 * v5);
    v8 = &v7[12 * ((v6 - v4) / 12)];
    v9 = v8;
    if (v6 != v4)
    {
      v9 = &v7[12 * ((v6 - v4) / 12)];
      do
      {
        v10 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v11 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v9 - 12) = v10;
        v9 -= 12;
        *((_DWORD *)v9 + 2) = v11;
      }
      while (v6 != v4);
    }
    *((_QWORD *)this + 5) = v9;
    *((_QWORD *)this + 6) = v8;
    *((_QWORD *)this + 7) = &v7[12 * v5];
    if (v4)
      operator delete(v4);
  }
  v12 = (_BYTE *)*((_QWORD *)this + 51);
  if (v5 > (uint64_t)(*((_QWORD *)this + 53) - (_QWORD)v12) >> 2)
  {
    if (a2 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (_BYTE *)*((_QWORD *)this + 52);
    v14 = (char *)operator new(4 * v5);
    v15 = v13 - v12;
    v16 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
    v17 = v16;
    if (v13 == v12)
      goto LABEL_18;
    if ((unint64_t)(v15 - 4) >= 0x2C)
    {
      v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
      if (v13 - v14 - (v15 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v18 = v15 >> 2;
        v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
        v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v13[-v20];
        v17 = &v16[-v20];
        v22 = &v14[4 * v18 - 16];
        v23 = (__int128 *)(v13 - 16);
        v24 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *v23;
          *((_OWORD *)v22 - 1) = *(v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 2;
          v24 -= 8;
        }
        while (v24);
        v13 = v21;
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          *((_QWORD *)this + 51) = v17;
          *((_QWORD *)this + 52) = v16;
          *((_QWORD *)this + 53) = &v14[4 * v5];
          if (v12)
            operator delete(v12);
          goto LABEL_20;
        }
      }
    }
    else
    {
      v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v26 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v17 - 1) = v26;
      v17 -= 4;
    }
    while (v13 != v12);
    goto LABEL_18;
  }
LABEL_20:
  v27 = (_BYTE *)*((_QWORD *)this + 18);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 20) - (_QWORD)v27) >> 2) < v5)
  {
    if (a2 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v28 = (_BYTE *)*((_QWORD *)this + 19);
    v29 = (char *)operator new(20 * v5);
    v30 = &v29[20 * ((v28 - v27) / 20)];
    v31 = v30;
    if (v28 != v27)
    {
      v32 = &v29[20 * ((v28 - v27) / 20)];
      do
      {
        v33 = *(_OWORD *)(v28 - 20);
        v31 = v32 - 20;
        *((_DWORD *)v32 - 1) = *((_DWORD *)v28 - 1);
        *(_OWORD *)(v32 - 20) = v33;
        v28 -= 20;
        v32 -= 20;
      }
      while (v28 != v27);
    }
    *((_QWORD *)this + 18) = v31;
    *((_QWORD *)this + 19) = v30;
    *((_QWORD *)this + 20) = &v29[20 * v5];
    if (v27)
      operator delete(v27);
  }
  std::vector<operations_research::Domain>::reserve(*((uint64_t **)this + 115), v5);
  v34 = (_BYTE *)*((_QWORD *)this + 9);
  if (v5 > (uint64_t)(*((_QWORD *)this + 11) - (_QWORD)v34) >> 2)
  {
    if (a2 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = (_BYTE *)*((_QWORD *)this + 10);
    v36 = (char *)operator new(4 * v5);
    v37 = v35 - v34;
    v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    v39 = v38;
    if (v35 == v34)
      goto LABEL_37;
    if ((unint64_t)(v37 - 4) >= 0x2C)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      if (v35 - v36 - (v37 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v40 = v37 >> 2;
        v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v43 = &v35[-v42];
        v39 = &v38[-v42];
        v44 = &v36[4 * v40 - 16];
        v45 = (__int128 *)(v35 - 16);
        v46 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 32;
          v45 -= 2;
          v46 -= 8;
        }
        while (v46);
        v35 = v43;
        if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          *((_QWORD *)this + 9) = v39;
          *((_QWORD *)this + 10) = v38;
          *((_QWORD *)this + 11) = &v36[4 * v5];
          if (v34)
            operator delete(v34);
          goto LABEL_39;
        }
      }
    }
    else
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v48 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *((_DWORD *)v39 - 1) = v48;
      v39 -= 4;
    }
    while (v35 != v34);
    goto LABEL_37;
  }
LABEL_39:
  v49 = (_BYTE *)*((_QWORD *)this + 74);
  if (v5 <= (uint64_t)(*((_QWORD *)this + 76) - (_QWORD)v49) >> 2)
    return;
  if (a2 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v50 = (_BYTE *)*((_QWORD *)this + 75);
  v51 = (char *)operator new(4 * v5);
  v52 = v50 - v49;
  v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
  v54 = v53;
  if (v50 != v49)
  {
    if ((unint64_t)(v52 - 4) >= 0x2C)
    {
      v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v50 - &v51[v52 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v55 = v52 >> 2;
        v56 = ((unint64_t)(v52 - 4) >> 2) + 1;
        v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
        v58 = &v50[-v57];
        v54 = &v53[-v57];
        v59 = &v51[4 * v55 - 16];
        v60 = (__int128 *)(v50 - 16);
        v61 = v56 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *v60;
          *((_OWORD *)v59 - 1) = *(v60 - 1);
          *(_OWORD *)v59 = v62;
          v59 -= 32;
          v60 -= 2;
          v61 -= 8;
        }
        while (v61);
        v50 = v58;
        if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_49;
      }
    }
    else
    {
      v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v63 = *((_DWORD *)v50 - 1);
      v50 -= 4;
      *((_DWORD *)v54 - 1) = v63;
      v54 -= 4;
    }
    while (v50 != v49);
  }
LABEL_49:
  *((_QWORD *)this + 74) = v54;
  *((_QWORD *)this + 75) = v53;
  *((_QWORD *)this + 76) = &v51[4 * v5];
  if (v49)
    operator delete(v49);
}

uint64_t operations_research::sat::IntegerTrail::AddIntegerVariable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int **v48;
  int **i;
  int *v50;
  int v51;
  int *v52;
  int *v53;
  int v54;
  int *v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v63;
  int v64;
  uint64_t *v65;
  std::vector<int>::value_type __x[2];
  void *__p[2];

  v6 = (void **)(a1 + 40);
  v7 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  v8 = a1 + 408;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 408, &operations_research::sat::kNoLiteralIndex);
  *(_QWORD *)__x = a2;
  v9 = (_QWORD *)(a1 + 144);
  LODWORD(__p[0]) = -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2);
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](v6, (uint64_t *)__x);
  v11 = *(char **)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 160);
  v63 = v7;
  if ((unint64_t)v11 >= v10)
  {
    v13 = (char *)*v9;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-*v9] >> 2);
    v15 = v14 + 1;
    if (v14 + 1 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_73;
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x666666666666666)
      v17 = 0xCCCCCCCCCCCCCCCLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_74;
      v18 = (char *)operator new(20 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[20 * v14];
    *(_QWORD *)v19 = a2;
    *((_DWORD *)v19 + 3) = 0;
    *((_DWORD *)v19 + 4) = 0;
    v20 = &v18[20 * v17];
    v7 = v63;
    *((_DWORD *)v19 + 2) = v63;
    v12 = v19 + 20;
    if (v11 != v13)
    {
      do
      {
        v21 = *(_OWORD *)(v11 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v11 - 1);
        *(_OWORD *)(v19 - 20) = v21;
        v19 -= 20;
        v11 -= 20;
      }
      while (v11 != v13);
      v11 = (char *)*v9;
    }
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v12;
    *(_QWORD *)(a1 + 160) = v20;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v11 = a2;
    *((_DWORD *)v11 + 3) = 0;
    *((_DWORD *)v11 + 4) = 0;
    v12 = v11 + 20;
    *((_DWORD *)v11 + 2) = v7;
  }
  *(_QWORD *)(a1 + 152) = v12;
  v22 = *(uint64_t **)(a1 + 920);
  operations_research::Domain::Domain(__x, a2, a3);
  v23 = v22[1];
  if (v23 >= v22[2])
  {
    v24 = std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(v22, (uint64_t)__x);
    v25 = __x[0];
    v22[1] = v24;
    if ((v25 & 1) != 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v23 = *(_QWORD *)__x;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
    v22[1] = v23 + 24;
  }
  v26 = v7 ^ 1;
  v64 = v7 ^ 1;
  *(_QWORD *)__x = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  if (*(_QWORD *)__x != (v7 ^ 1))
  {
    v65 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v64, (int)__x, "NegationOf(i).value() == vars_.size()");
    if (v65)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 609, &v65);
      google::LogMessage::stream((google::LogMessage *)__x);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
    }
  }
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(v8, &operations_research::sat::kNoLiteralIndex);
  v27 = -a3;
  *(_QWORD *)__x = v27;
  LODWORD(__p[0]) = -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2);
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](v6, (uint64_t *)__x);
  v29 = *(char **)(a1 + 152);
  v28 = *(_QWORD *)(a1 + 160);
  if ((unint64_t)v29 < v28)
  {
    *(_QWORD *)v29 = v27;
    *((_DWORD *)v29 + 3) = 0;
    *((_DWORD *)v29 + 4) = 0;
    v30 = v29 + 20;
    *((_DWORD *)v29 + 2) = v26;
    goto LABEL_40;
  }
  v31 = (char *)*v9;
  v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v29[-*v9] >> 2);
  v33 = v32 + 1;
  if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL)
LABEL_73:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (_QWORD)v31) >> 2);
  if (2 * v34 > v33)
    v33 = 2 * v34;
  if (v34 >= 0x666666666666666)
    v35 = 0xCCCCCCCCCCCCCCCLL;
  else
    v35 = v33;
  if (!v35)
  {
    v36 = 0;
    goto LABEL_35;
  }
  if (v35 > 0xCCCCCCCCCCCCCCCLL)
LABEL_74:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v36 = (char *)operator new(20 * v35);
LABEL_35:
  v37 = &v36[20 * v32];
  *(_QWORD *)v37 = v27;
  *((_DWORD *)v37 + 3) = 0;
  *((_DWORD *)v37 + 4) = 0;
  *((_DWORD *)v37 + 2) = v26;
  v30 = v37 + 20;
  if (v29 != v31)
  {
    do
    {
      v38 = *(_OWORD *)(v29 - 20);
      *((_DWORD *)v37 - 1) = *((_DWORD *)v29 - 1);
      *(_OWORD *)(v37 - 20) = v38;
      v37 -= 20;
      v29 -= 20;
    }
    while (v29 != v31);
    v29 = (char *)*v9;
  }
  *(_QWORD *)(a1 + 144) = v37;
  *(_QWORD *)(a1 + 152) = v30;
  *(_QWORD *)(a1 + 160) = &v36[20 * v35];
  if (v29)
    operator delete(v29);
LABEL_40:
  *(_QWORD *)(a1 + 152) = v30;
  v39 = *(uint64_t **)(a1 + 920);
  operations_research::Domain::Domain(__x, v27, -a2);
  v40 = v39[1];
  if (v40 >= v39[2])
  {
    v41 = std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(v39, (uint64_t)__x);
    v42 = __x[0];
    v39[1] = v41;
    if ((v42 & 1) != 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)v40 = 0;
    *(_QWORD *)v40 = *(_QWORD *)__x;
    *(_OWORD *)(v40 + 8) = *(_OWORD *)__p;
    v39[1] = v40 + 24;
  }
  v43 = *(_QWORD *)(a1 + 72);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  __x[0] = -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2);
  v45 = (*(_QWORD *)(a1 + 80) - v43) >> 2;
  if (v44 <= v45)
  {
    if (v44 < v45)
      *(_QWORD *)(a1 + 80) = v43 + 4 * v44;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 72), v44 - v45, __x);
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  }
  __x[0] = 0;
  v46 = *(_QWORD *)(a1 + 592);
  v47 = (*(_QWORD *)(a1 + 600) - v46) >> 2;
  if (v44 <= v47)
  {
    if (v44 < v47)
      *(_QWORD *)(a1 + 600) = v46 + 4 * v44;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 592), v44 - v47, __x);
  }
  v48 = *(int ***)(a1 + 872);
  for (i = *(int ***)(a1 + 880); v48 != i; ++v48)
  {
    v50 = *v48;
    v51 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
    if (**v48 > v51)
    {
      v52 = (int *)*((_QWORD *)v50 + 7);
      v53 = (int *)*((_QWORD *)v50 + 8);
      if (v52 == v53)
      {
        v54 = 0;
      }
      else
      {
        v54 = 0;
        v55 = (int *)*((_QWORD *)v50 + 7);
        do
        {
          if (*v55 < v51)
            v52[v54++] = *v55;
          ++v55;
        }
        while (v55 != v53);
      }
      v56 = v53 - v52;
      if (v54 <= v56)
      {
        if (v54 < v56)
          *((_QWORD *)v50 + 8) = &v52[v54];
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(v50 + 14), v54 - v56);
      }
    }
    v57 = v51 & ~(v51 >> 31);
    *v50 = v57;
    v58 = *((_QWORD *)v50 + 1);
    v59 = *((_QWORD *)v50 + 2);
    v60 = (v57 + 63) >> 6;
    *(_QWORD *)__x = 0;
    v61 = (v59 - v58) >> 3;
    if (v60 > v61)
    {
      std::vector<unsigned long long>::__append((uint64_t)(v50 + 2), v60 - v61, (uint64_t *)__x);
    }
    else if (v60 < v61)
    {
      *((_QWORD *)v50 + 2) = v58 + 8 * v60;
    }
  }
  return v63;
}

void sub_22DB61BCC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB61BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p)
{
  if ((a12 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::AddIntegerVariable(operations_research::sat::IntegerTrail *this, __int128 **a2)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p[2];
  _BYTE v20[16];

  if (operations_research::Domain::IsEmpty((operations_research::Domain *)a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 625);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: !domain.IsEmpty() ", 32);
    goto LABEL_19;
  }
  v5 = operations_research::Domain::Min((operations_research::Domain *)a2, v4);
  v7 = operations_research::Domain::Max((operations_research::Domain *)a2, v6);
  v8 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)this, v5, v7);
  v18 = 0;
  v9 = (unint64_t)*a2;
  if ((*a2 & 1) == 0)
  {
    v18 = (uint64_t)*a2;
    *(_OWORD *)__p = *(_OWORD *)(a2 + 1);
    goto LABEL_13;
  }
  v10 = a2[1];
  v11 = v9 >> 1;
  if (v9 >= 4)
  {
    if (v9 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = operator new(16 * v11);
    __p[0] = v12;
    __p[1] = (void *)(v9 >> 1);
    v18 = 1;
    goto LABEL_10;
  }
  if (v9 >= 2)
  {
    v12 = __p;
    do
    {
LABEL_10:
      v14 = *v10++;
      *v12++ = v14;
      --v11;
    }
    while (v11);
    v13 = v18;
    goto LABEL_12;
  }
  v13 = 0;
LABEL_12:
  v18 = v13 + (v9 & 0xFFFFFFFFFFFFFFFELL);
LABEL_13:
  if ((operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)this, v8, (operations_research::Domain *)&v18) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 628);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: UpdateInitialDomain(var, domain) ", 47);
LABEL_19:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v20);
  }
  if ((v18 & 1) != 0)
    operator delete(__p[0]);
  return v8;
}

void sub_22DB61D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, char a13)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DB61D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::IntegerTrail::UpdateInitialDomain(uint64_t a1, int a2, operations_research::Domain *this)
{
  const operations_research::Domain *v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v17;
  uint64_t v18;
  unint64_t *v19;
  __int128 *v20;
  const char *v21;
  int v22;
  int v23;
  _BYTE *v24;
  void **v25;
  uint64_t v26;
  const char *v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  char **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v63 = (*(_DWORD *)(*(_QWORD *)(a1 + 936) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v62) = 0;
  if (*(_DWORD *)v63)
  {
    v62 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v63, (int)&v62, "trail_->CurrentDecisionLevel() == 0");
    if (v62)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 637, &v62);
      google::LogMessage::stream((google::LogMessage *)v63);
      goto LABEL_91;
    }
  }
  v6 = (const operations_research::Domain *)(**(_QWORD **)(a1 + 920) + 24 * a2);
  operations_research::Domain::IntersectionWith(this, v6, (unint64_t *)v63);
  v7 = *(_QWORD *)this;
  if (v63 == (_BYTE *)this)
  {
    if ((v7 & 1) != 0)
      operator delete(*(void **)&v63[8]);
  }
  else
  {
    v8 = (void **)((char *)this + 8);
    if ((v7 & 1) != 0)
      operator delete(*v8);
    *(_QWORD *)this = *(_QWORD *)v63;
    *(_OWORD *)v8 = *(_OWORD *)&v63[8];
  }
  v9 = *(_QWORD *)v6;
  v12 = (_QWORD *)*((_QWORD *)v6 + 1);
  v11 = (_QWORD *)((char *)v6 + 8);
  v10 = v12;
  if ((v9 & 1) == 0)
    v10 = v11;
  v13 = (8 * v9) & 0xFFFFFFFFFFFFFFF0;
  if (v13 == 16 * (*(_QWORD *)this >> 1))
  {
    if (v9 < 2)
      return 1;
    v14 = (_QWORD *)((char *)v10 + v13);
    if ((*(_QWORD *)this & 1) != 0)
      v15 = (_QWORD *)*((_QWORD *)this + 1);
    else
      v15 = (_QWORD *)((char *)this + 8);
    while (*v10 == *v15 && v10[1] == v15[1])
    {
      v10 += 2;
      v15 += 2;
      if (v10 == v14)
        return 1;
    }
  }
  if (operations_research::Domain::IsEmpty(this))
    return 0;
  v19 = (unint64_t *)(**(_QWORD **)(a1 + 920) + 24 * a2);
  if (v19 != (unint64_t *)this)
  {
    if ((*(_QWORD *)this & 1) != 0)
      v20 = (__int128 *)*((_QWORD *)this + 1);
    else
      v20 = (__int128 *)((char *)this + 8);
    absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(v19, v20, *(uint64_t *)this >> 1);
  }
  operations_research::Domain::Negation(this, v17, (unint64_t *)v63);
  v22 = a2;
  v23 = a2 ^ 1;
  v24 = (_BYTE *)(**(_QWORD **)(a1 + 920) + 24 * (a2 ^ 1));
  if (v24 == v63)
  {
    if ((v63[0] & 1) != 0)
      operator delete(*(void **)&v63[8]);
  }
  else
  {
    v25 = (void **)(v24 + 8);
    if ((*v24 & 1) != 0)
      operator delete(*v25);
    *(_QWORD *)v24 = *(_QWORD *)v63;
    *(_OWORD *)v25 = *(_OWORD *)&v63[8];
  }
  if ((int)(*(_QWORD *)this >> 1) >= 2)
  {
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((_QWORD *)(a1 + 432), a2, 0);
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((_QWORD *)(a1 + 432), a2 ^ 1, 0);
  }
  v26 = operations_research::Domain::Min(this, v21);
  *(_DWORD *)v63 = a2;
  *(_QWORD *)&v63[4] = v26;
  v64 = 0;
  v28 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, *(uint64_t *)v63, SHIDWORD(v26), (uint64_t)v63, 0, 0, 0, 0, -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
  v29 = v64;
  if (v64 == v63)
  {
    v30 = 4;
    v29 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_38;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_38:
  if ((v28 & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 656);
    v60 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Check failed: Enqueue(IntegerLiteral::GreaterOrEqual(var, IntegerValue(domain.Min())), {}, {}) ", 95);
    goto LABEL_91;
  }
  v31 = operations_research::Domain::Max(this, v27);
  v32 = 0x7FFFFFFFFFFFFFFFLL;
  if (v31 >= (uint64_t)0x8000000000000002)
    v32 = -v31;
  *(_DWORD *)v63 = v23;
  *(_QWORD *)&v63[4] = v32;
  v64 = 0;
  v33 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, *(uint64_t *)v63, SHIDWORD(v32), (uint64_t)v63, 0, 0, 0, 0, -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
  v34 = v64;
  if (v64 == v63)
  {
    v35 = 4;
    v34 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_46;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_46:
  if ((v33 & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 658);
    v61 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: Enqueue(IntegerLiteral::LowerOrEqual(var, IntegerValue(domain.Max())), {}, {}) ", 93);
LABEL_91:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v63);
  }
  operations_research::sat::IntegerEncoder::PartialDomainEncoding(*(uint64_t **)(a1 + 928), v22, (char **)v63);
  v36 = *(int **)v63;
  v37 = *(int **)&v63[8];
  if (*(_QWORD *)v63 != *(_QWORD *)&v63[8])
  {
    LODWORD(v38) = 0;
    v39 = 0;
    v40 = (char **)((char *)this + 8);
    while (1)
    {
      v41 = *(_QWORD *)v36;
      v42 = v36[2];
      v43 = *(_QWORD *)this;
      v44 = *(_QWORD *)this >> 1;
      if ((int)v38 < (int)v44)
      {
        if ((v43 & 1) != 0)
        {
          v48 = (uint64_t *)&(*v40)[16 * (int)v38 + 8];
          v49 = (int)v44 - (uint64_t)(int)v38;
          while (1)
          {
            v50 = *v48;
            v48 += 2;
            if (v41 <= v50)
              break;
            LODWORD(v38) = v38 + 1;
            if (!--v49)
            {
LABEL_59:
              v38 = *(_QWORD *)this >> 1;
              goto LABEL_64;
            }
          }
        }
        else
        {
          v45 = (uint64_t *)((char *)this + 16 * (int)v38 + 16);
          v46 = (int)v44 - (uint64_t)(int)v38;
          while (1)
          {
            v47 = *v45;
            v45 += 2;
            if (v41 <= v47)
              break;
            LODWORD(v38) = v38 + 1;
            if (!--v46)
              goto LABEL_59;
          }
        }
      }
      if ((_DWORD)v38 == (_DWORD)v44)
        goto LABEL_64;
      v51 = (char *)this + 8;
      if ((v43 & 1) != 0)
        v51 = *v40;
      if (v41 < *(_QWORD *)&v51[16 * (int)v38])
      {
LABEL_64:
        v52 = v36[2];
        ++v39;
        v53 = *(_QWORD *)(a1 + 936);
        v54 = *(_QWORD *)(*(_QWORD *)(v53 + 24) + 8 * (v42 >> 6));
        if (((v54 >> v42) & 1) != 0)
        {
          v18 = 0;
          v36 = *(int **)v63;
          if (*(_QWORD *)v63)
            goto LABEL_68;
          goto LABEL_69;
        }
        if (((v54 >> (v52 & 0x3F ^ 1u)) & 1) == 0)
        {
          v55 = v52 ^ 1;
          *(_DWORD *)(*(_QWORD *)(v53 + 72) + 4 * *(int *)(v53 + 12)) = v55;
          *(_DWORD *)(v53 + 8) = (*(_DWORD *)(v53 + 8) & 0xFFFFFFE | v55 & 1) ^ 0x10000001;
          *(_QWORD *)(*(_QWORD *)(v53 + 120) + 8 * ((int)v42 >> 1)) = *(_QWORD *)(v53 + 8);
          *(_QWORD *)(*(_QWORD *)(v53 + 24) + 8 * (v42 >> 6)) |= 1 << v55;
          ++*(_DWORD *)(v53 + 12);
        }
      }
      v36 += 3;
      if (v36 == v37)
      {
        v18 = 1;
        v36 = *(int **)v63;
        if (*(_QWORD *)v63)
          goto LABEL_68;
        goto LABEL_69;
      }
    }
  }
  v39 = 0;
  v18 = 1;
  if (*(_QWORD *)v63)
  {
LABEL_68:
    *(_QWORD *)&v63[8] = v36;
    operator delete(v36);
  }
LABEL_69:
  if (v39 > 0)
    v56 = v18;
  else
    v56 = 0;
  if (v56 == 1)
  {
    if (*operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__ >= 1
      && (operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 675);
      v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Domain intersection fixed ", 26);
      v58 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" equality literal corresponding to values outside the new domain.", 65);
      google::LogMessage::~LogMessage((google::LogMessage *)v63);
    }
    return 1;
  }
  return v18;
}

void sub_22DB6240C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB62414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15 != v15)
  {
    if (a15)
    {
      (*(void (**)(void))(*(_QWORD *)a15 + 40))();
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(a12 + 32))();
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::InitialVariableDomain(uint64_t a1, int a2)
{
  return **(_QWORD **)(a1 + 920) + 24 * a2;
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  void **v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;

  v6 = 0;
  v9 = a1[1];
  v7 = a1 + 1;
  v8 = v9;
  v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a2));
  v11 = (v10 >> 7) ^ (v9 >> 12);
  v12 = v7[3];
  while (1)
  {
    v13 = v11 & v12;
    v14 = *(_QWORD *)(v8 + v13);
    v15 = ((v14 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v15)
    {
      v16 = a1[2];
      while (1)
      {
        v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
        if (*(_DWORD *)(v16 + 8 * v17) == a2)
          break;
        v15 &= v15 - 1;
        if (!v15)
          goto LABEL_6;
      }
      v18 = (_DWORD *)(v16 + 8 * v17);
      if ((int)((a1[11] - a1[10]) >> 2) <= 0)
        goto LABEL_43;
      v19 = v18[1];
      v21 = (_DWORD *)a1[8];
      v20 = a1[9];
      if ((unint64_t)v21 < v20)
      {
        *(_BYTE *)v21 = 0;
        *(_DWORD *)((char *)v21 + 1) = a2;
        v22 = (char *)(v21 + 3);
        v21[2] = v19;
        goto LABEL_42;
      }
      v24 = (void **)(a1 + 7);
      v25 = (_BYTE *)a1[7];
      v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v25) >> 2) + 1;
      if (v26 <= 0x1555555555555555)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v25) >> 2);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0xAAAAAAAAAAAAAAALL)
          v28 = 0x1555555555555555;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 > 0x1555555555555555)
            goto LABEL_45;
          v29 = (char *)operator new(12 * v28);
        }
        else
        {
          v29 = 0;
        }
        v35 = &v29[4 * (((char *)v21 - v25) >> 2)];
        *v35 = 0;
        v36 = &v29[12 * v28];
        *(_DWORD *)(v35 + 1) = a2;
        *((_DWORD *)v35 + 2) = v19;
        v22 = v35 + 12;
        if (v21 != (_DWORD *)v25)
        {
          do
          {
            v37 = *(_QWORD *)(v21 - 3);
            v21 -= 3;
            v38 = v21[2];
            *(_QWORD *)(v35 - 12) = v37;
            v35 -= 12;
            *((_DWORD *)v35 + 2) = v38;
          }
          while (v21 != (_DWORD *)v25);
LABEL_39:
          v21 = *v24;
        }
        goto LABEL_40;
      }
LABEL_44:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      break;
    v6 += 8;
    v11 = v6 + v13;
  }
  v18 = (_DWORD *)(a1[2]
                 + 8
                 * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(v7, v10));
  *v18 = a2;
  v18[1] = a3;
  if ((int)((a1[11] - a1[10]) >> 2) < 1)
    goto LABEL_43;
  v21 = (_DWORD *)a1[8];
  v23 = a1[9];
  if ((unint64_t)v21 < v23)
  {
    *(_BYTE *)v21 = 1;
    *(_DWORD *)((char *)v21 + 1) = a2;
    v21[2] = 0;
    v22 = (char *)(v21 + 3);
    goto LABEL_42;
  }
  v24 = (void **)(a1 + 7);
  v30 = (_BYTE *)a1[7];
  v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v30) >> 2) + 1;
  if (v31 > 0x1555555555555555)
    goto LABEL_44;
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v30) >> 2);
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0xAAAAAAAAAAAAAAALL)
    v33 = 0x1555555555555555;
  else
    v33 = v31;
  if (v33)
  {
    if (v33 <= 0x1555555555555555)
    {
      v34 = (char *)operator new(12 * v33);
      goto LABEL_37;
    }
LABEL_45:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v34 = 0;
LABEL_37:
  v35 = &v34[4 * (((char *)v21 - v30) >> 2)];
  *v35 = 1;
  v36 = &v34[12 * v33];
  *(_DWORD *)(v35 + 1) = a2;
  *((_DWORD *)v35 + 2) = 0;
  v22 = v35 + 12;
  if (v21 != (_DWORD *)v30)
  {
    do
    {
      v39 = *(_QWORD *)(v21 - 3);
      v21 -= 3;
      v40 = v21[2];
      *(_QWORD *)(v35 - 12) = v39;
      v35 -= 12;
      *((_DWORD *)v35 + 2) = v40;
    }
    while (v21 != (_DWORD *)v30);
    goto LABEL_39;
  }
LABEL_40:
  a1[7] = v35;
  a1[8] = v22;
  a1[9] = v36;
  if (v21)
    operator delete(v21);
LABEL_42:
  a1[8] = v22;
LABEL_43:
  v18[1] = a3;
}

uint64_t operations_research::sat::Trail::EnqueueWithUnitReason(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 72) + 4 * *(int *)(result + 12)) = a2;
  *(_DWORD *)(result + 8) = (*(_DWORD *)(result + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
  *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(result + 8);
  *(_QWORD *)(*(_QWORD *)(result + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(result + 12);
  return result;
}

uint64_t operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v4 = 0;
  v6 = a1 + 12;
  v5 = a1[12];
  v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v8 = (v7 >> 7) ^ (v5 >> 12);
  v9 = a1[15];
  while (1)
  {
    v10 = v8 & v9;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v7 & 0x7F))) & 0x8080808080808080;
    if (v12)
    {
      v13 = a1[13];
      do
      {
        v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
        if (*(_QWORD *)(v13 + 12 * v14) == a2)
          return *(unsigned int *)(v13 + 12 * v14 + 8);
        v12 &= v12 - 1;
      }
      while (v12);
    }
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      break;
    v4 += 8;
    v8 = v4 + v10;
  }
  v17 = a1[13]
      + 12
      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(v6, v7);
  *(_QWORD *)v17 = a2;
  *(_DWORD *)(v17 + 8) = -1;
  v18 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)a1, a2, a2);
  v15 = v18;
  *(_DWORD *)(v17 + 8) = v18;
  if (!a2)
    return v15;
  v20 = -a2;
  v19 = v18 ^ 1;
  gtl::InsertOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>>(v6, &v20, &v19);
  return v15;
}

unint64_t gtl::InsertOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>>(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t result;
  uint64_t v16;
  _BYTE v17[16];

  v4 = 0;
  v5 = *a2;
  v6 = *a3;
  v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v8 = (v7 >> 7) ^ ((unint64_t)*a1 >> 12);
  v9 = a1[3];
  while (1)
  {
    v10 = v8 & v9;
    v11 = *(_QWORD *)(*a1 + v10);
    for (i = ((v11 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                           * (v7 & 0x7F))) & 0x8080808080808080;
          i;
          i &= i - 1)
    {
      if (*(_QWORD *)(a1[1] + 12 * ((v10 + (__clz(__rbit64(i)) >> 3)) & v9)) == v5)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 147);
        v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: collection->insert(value_type(key, data)).second ", 63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"duplicate key: ", 15);
        std::ostream::operator<<();
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
      }
    }
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      break;
    v4 += 8;
    v8 = v4 + v10;
  }
  result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(a1, v7);
  v16 = a1[1] + 12 * result;
  *(_QWORD *)v16 = v5;
  *(_DWORD *)(v16 + 8) = v6;
  return result;
}

void sub_22DB62B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(uint64_t a1, int a2, signed int a3)
{
  signed int v3;
  uint64_t v4;
  signed int v5;
  signed int v6;
  BOOL v7;
  uint64_t v9;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4 * a2);
  if (v3 >= a3)
  {
    if (v3 != 0x7FFFFFFF)
      *(_BYTE *)(a1 + 536) = 1;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_DWORD *)(v4 + 12 * a2 + 8);
    if (v5 > a3)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * a2);
      v7 = v6 >= a3 && v6 < v5;
      if (v7 && *(_DWORD *)(*(_QWORD *)(a1 + 144) + 20 * v6 + 8) == a2)
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * a2);
    }
    if (v5 >= a3)
    {
      v9 = *(_QWORD *)(a1 + 144);
      do
      {
        v5 = *(_DWORD *)(v9 + 20 * v5 + 12);
        if (v5 >= *(_DWORD *)(a1 + 64))
          *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * a2) = v5;
      }
      while (v5 >= a3);
    }
    if (v5 < (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 48) - v4) >> 2)))
      return 0xFFFFFFFFLL;
    else
      return v5;
  }
}

void operations_research::sat::IntegerTrail::RelaxLinearReason(std::vector<int> *a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  unint64_t v9;
  std::vector<int>::pointer begin;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int *value;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  std::vector<int>::pointer v19;
  int *i;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;
  _BYTE v38[12];
  uint64_t *v39;
  int v40[2];

  *(_QWORD *)v40 = a2;
  *(_DWORD *)v38 = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a2)
      return;
    goto LABEL_3;
  }
  v39 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v40, (int)v38, "slack >= 0");
  if (v39)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 776, &v39);
    google::LogMessage::stream((google::LogMessage *)v38);
    goto LABEL_43;
  }
  if (*(_QWORD *)v40)
  {
LABEL_3:
    v9 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2);
    begin = a1[30].__begin_;
    v11 = a1[30].__end_ - begin;
    if ((int)v9 <= v11)
    {
      if ((int)v9 < v11)
        a1[30].__end_ = &begin[(int)v9];
    }
    else
    {
      std::vector<int>::__append(a1 + 30, (int)v9 - v11);
    }
    if ((int)v9 >= 1)
    {
      v12 = 0;
      v13 = *a5;
      value = a1[1].__end_cap_.__value_;
      v15 = 4 * v9;
      v16 = 4;
      v17 = (_QWORD *)a3;
      while (1)
      {
        *(_QWORD *)v38 = *(_QWORD *)&value[3 * *(int *)&v13[v16 - 4]];
        if (*(_QWORD *)&v13[v16] != *(_QWORD *)v38)
        {
          v39 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)v13 + (int)v16, (int)v38, "(*reason)[i].bound == LowerBound((*reason)[i].var)");
          if (v39)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 781, &v39);
            google::LogMessage::stream((google::LogMessage *)v38);
            goto LABEL_43;
          }
        }
        *(_DWORD *)v38 = 0;
        if ((*v17 & 0x8000000000000000) != 0)
        {
          v39 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v17, (int)v38, "coeffs[i] >= 0");
          if (v39)
            break;
        }
        v13 = *a5;
        value = a1[1].__end_cap_.__value_;
        a1[30].__begin_[v12 / 4] = value[3 * *(int *)&(*a5)[v16 - 4] + 2];
        ++v17;
        v12 += 4;
        v16 += 12;
        if (v15 == v12)
          goto LABEL_17;
      }
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 782, &v39);
      google::LogMessage::stream((google::LogMessage *)v38);
LABEL_43:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v38);
    }
LABEL_17:
    operations_research::sat::IntegerTrail::RelaxLinearReason(a1, *(uint64_t *)v40, a3, a4, a1 + 30);
    v18 = *a5;
    a5[1] = *a5;
    v19 = a1[30].__begin_;
    for (i = a1[30].__end_; v19 != i; v18 = v37)
    {
      while (1)
      {
        v21 = (uint64_t)&a1[6].__begin_[5 * *v19];
        v22 = *(_DWORD *)(v21 + 8);
        v23 = *(_QWORD *)v21;
        *(_DWORD *)v38 = v22;
        *(_QWORD *)&v38[4] = v23;
        v24 = *(_QWORD *)v38;
        v25 = HIDWORD(v23);
        v26 = (unint64_t)a5[2];
        if ((unint64_t)v18 >= v26)
          break;
        *(_QWORD *)v18 = *(_QWORD *)v38;
        *((_DWORD *)v18 + 2) = v25;
        a5[1] = v18 + 12;
        ++v19;
        v18 += 12;
        if (v19 == i)
          return;
      }
      v27 = *a5;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a5) >> 2);
      v29 = v28 + 1;
      if (v28 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v27) >> 2);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0xAAAAAAAAAAAAAAALL)
        v31 = 0x1555555555555555;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v32 = (char *)operator new(12 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[12 * v28];
      *(_QWORD *)v33 = v24;
      *((_DWORD *)v33 + 2) = v25;
      v34 = v33;
      if (v18 != v27)
      {
        do
        {
          v35 = *(_QWORD *)(v18 - 12);
          v18 -= 12;
          v36 = *((_DWORD *)v18 + 2);
          *(_QWORD *)(v34 - 12) = v35;
          v34 -= 12;
          *((_DWORD *)v34 + 2) = v36;
        }
        while (v18 != v27);
        v18 = *a5;
      }
      v37 = v33 + 12;
      *a5 = v34;
      a5[1] = v33 + 12;
      a5[2] = &v32[12 * v31];
      if (v18)
        operator delete(v18);
      a5[1] = v37;
      ++v19;
    }
  }
}

void sub_22DB62F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB62F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB62FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::IntegerTrail::RelaxLinearReason(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, std::vector<int> *this)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  char *v65;
  BOOL v66;
  uint64_t v67;
  int *v68;
  std::vector<int>::pointer v69;
  int *v70;
  uint64_t v71;
  int v72;
  int *v73;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  int *v83;
  std::vector<int>::pointer v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  int *v92;
  int *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v119;
  int *value;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  _OWORD *v138;
  __int128 *v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  unint64_t v143;
  char *v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  int v152;
  char *v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  _OWORD *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  int v163;
  uint64_t v164;
  int *v165;
  int *v166;
  std::vector<int>::pointer v167;
  int *v168;
  int *v169;
  std::vector<int>::pointer v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  int *v177;
  unint64_t v178;
  int *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  __int128 *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int64_t v188;
  int64_t v189;
  uint64_t v190;
  int *v191;
  int v192;
  BOOL v193;
  int *v194;
  int v195;
  int v196;
  int v197;
  int *v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v205;
  int v206;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  int v212;
  int v213;
  __int128 v214;
  int v215;

  v6 = a2;
  v7 = a1;
  v8 = -1431655765 * ((a1[6] - a1[5]) >> 2);
  v206 = v8;
  if (a4 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v203 = a1 + 87;
    v11 = a4;
    v201 = a3;
    while (1)
    {
      v12 = this->__begin_[v9];
      if (v12 >= v8)
      {
        v13 = *(_QWORD *)(a3 + 8 * v9);
        if (v13 <= v6)
        {
          v14 = v7[18];
          v15 = (uint64_t *)(v14 + 20 * v12);
          v16 = *v15;
          v17 = *(_QWORD *)(v14 + 20 * *((int *)v15 + 3));
          v18 = *v15 - v17;
          if (v18 < 0)
            v18 = -v18;
          v19 = 63 - __clz(v18);
          v20 = v16 - v17;
          if (v16 == v17)
            v21 = 0;
          else
            v21 = v19;
          if (v13 >= 0)
            v22 = *(_QWORD *)(a3 + 8 * v9);
          else
            v22 = -v13;
          v23 = 63 - __clz(v22);
          if (!v13)
            v23 = 0;
          v24 = v21 + v23;
          if (v24 > 61)
          {
            v25 = 0;
            if (!v13
              || v16 == v17
              || ((v25 = ((v20 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL,
                   v26 = v18 * v22,
                   v24 <= 0x3E)
                ? (v27 = v26 >= v25)
                : (v27 = 1),
                  v27))
            {
              if (v25 <= v6)
                goto LABEL_28;
            }
            else
            {
              if (v25 >= 0)
                v25 = v26;
              else
                v25 = -(uint64_t)v26;
              if (v25 <= v6)
              {
LABEL_28:
                v28 = (_QWORD *)v7[88];
                v29 = v7[89];
                if ((unint64_t)v28 >= v29)
                {
                  v31 = (_QWORD *)*v203;
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *v203) >> 3);
                  v33 = v32 + 1;
                  if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v31) >> 3);
                  if (2 * v34 > v33)
                    v33 = 2 * v34;
                  if (v34 >= 0x555555555555555)
                    v35 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v35 = v33;
                  v202 = v35;
                  if (v35)
                  {
                    if (v35 > 0xAAAAAAAAAAAAAAALL)
LABEL_255:
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v36 = (char *)operator new(24 * v35);
                    v6 = a2;
                    a3 = v201;
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v37 = &v36[24 * v32];
                  *(_DWORD *)v37 = v12;
                  *(_QWORD *)(v37 + 4) = v13;
                  *((_QWORD *)v37 + 2) = v25;
                  v38 = v37;
                  if (v28 == v31)
                  {
                    v39 = a1;
                    v40 = v202;
                  }
                  else
                  {
                    v39 = a1;
                    v40 = v202;
                    do
                    {
                      v41 = *(_OWORD *)(v28 - 3);
                      *((_QWORD *)v38 - 1) = *(v28 - 1);
                      *(_OWORD *)(v38 - 24) = v41;
                      v38 -= 24;
                      v28 -= 3;
                    }
                    while (v28 != v31);
                    v28 = (_QWORD *)*v203;
                  }
                  v39[87] = v38;
                  v30 = v37 + 24;
                  v39[88] = v37 + 24;
                  v39[89] = &v36[24 * v40];
                  v8 = v206;
                  if (v28)
                  {
                    operator delete(v28);
                    a3 = v201;
                    v6 = a2;
                  }
                }
                else
                {
                  *(_DWORD *)v28 = v12;
                  *(_QWORD *)((char *)v28 + 4) = v13;
                  v30 = v28 + 3;
                  v28[2] = v25;
                }
                a1[88] = v30;
                v7 = a1;
                goto LABEL_4;
              }
            }
          }
          else
          {
            v25 = v20 * v13;
            if (v20 * v13 <= v6)
              goto LABEL_28;
          }
        }
        this->__begin_[v10++] = v12;
      }
LABEL_4:
      if (++v9 == v11)
        goto LABEL_54;
    }
  }
  v10 = 0;
LABEL_54:
  v42 = this->__end_ - this->__begin_;
  if (v10 <= v42)
  {
    if (v10 < v42)
      this->__end_ = &this->__begin_[v10];
  }
  else
  {
    std::vector<int>::__append(this, v10 - v42);
    v6 = a2;
  }
  v43 = v7[87];
  v44 = v7[88] - v43;
  if (v44 >= 48)
  {
    v187 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 3);
    v188 = (unint64_t)(v187 - 2) >> 1;
    v189 = v188;
    do
    {
      if (v188 >= v189)
      {
        v190 = (2 * v189) | 1;
        v191 = (int *)(v43 + 24 * v190);
        if (2 * v189 + 2 >= v187)
        {
          v194 = (int *)(v43 + 24 * v189);
          v195 = *v194;
          if (*v191 >= *v194)
            goto LABEL_243;
        }
        else
        {
          v192 = v191[6];
          v193 = *v191 < v192;
          if (*v191 > v192)
            v192 = *v191;
          if (v193)
          {
            v191 += 6;
            v190 = 2 * v189 + 2;
          }
          v194 = (int *)(v43 + 24 * v189);
          v195 = *v194;
          if (v192 >= *v194)
          {
LABEL_243:
            v210 = *(_OWORD *)(v194 + 1);
            v213 = v194[5];
            while (1)
            {
              v198 = v194;
              v194 = v191;
              v199 = *(_OWORD *)v191;
              *((_QWORD *)v198 + 2) = *((_QWORD *)v191 + 2);
              *(_OWORD *)v198 = v199;
              if (v188 < v190)
                break;
              v200 = (2 * v190) | 1;
              v191 = (int *)(v43 + 24 * v200);
              v190 = 2 * v190 + 2;
              if (v190 < v187)
              {
                v196 = *v191;
                v197 = v191[6];
                if (*v191 <= v197)
                  v196 = v191[6];
                if (*v191 >= v197)
                  v190 = v200;
                else
                  v191 += 6;
                if (v196 < v195)
                  break;
              }
              else
              {
                v190 = v200;
                if (*v191 < v195)
                  break;
              }
            }
            *v194 = v195;
            v194[5] = v213;
            *(_OWORD *)(v194 + 1) = v210;
          }
        }
      }
      v193 = v189-- <= 0;
    }
    while (!v193);
  }
  v205 = v7 + 87;
  if (v6 >= 1)
  {
    while (1)
    {
      v45 = v7[87];
      v46 = (char *)v7[88];
      if ((char *)v45 == v46)
        goto LABEL_200;
      v47 = *(_DWORD *)v45;
      v48 = *(_QWORD *)(v45 + 4);
      v49 = *(_QWORD *)(v45 + 16);
      if ((uint64_t)&v46[-v45] >= 25)
      {
        v50 = 0;
        v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-v45] >> 3);
        v208 = *(_OWORD *)v45;
        v211 = *(_QWORD *)(v45 + 16);
        v52 = v7[87];
        do
        {
          v54 = v52 + 24 * v50 + 24;
          v55 = (2 * v50) | 1;
          v56 = 2 * v50 + 2;
          if (v56 < v51 && *(_DWORD *)v54 < *(_DWORD *)(v54 + 24))
          {
            v54 += 24;
            v55 = v56;
          }
          v53 = *(_OWORD *)v54;
          *(_QWORD *)(v52 + 16) = *(_QWORD *)(v54 + 16);
          *(_OWORD *)v52 = v53;
          v52 = v54;
          v50 = v55;
        }
        while (v55 <= (uint64_t)((unint64_t)(v51 - 2) >> 1));
        v57 = v46 - 24;
        if ((char *)v54 == v46 - 24)
        {
          *(_QWORD *)(v54 + 16) = v211;
          *(_OWORD *)v54 = v208;
        }
        else
        {
          v58 = *(_OWORD *)v57;
          *(_QWORD *)(v54 + 16) = *((_QWORD *)v46 - 1);
          *(_OWORD *)v54 = v58;
          *(_OWORD *)v57 = v208;
          *((_QWORD *)v46 - 1) = v211;
          v59 = v54 - v45 + 24;
          if (v59 >= 25)
          {
            v60 = (v59 / 0x18uLL - 2) >> 1;
            v61 = v45 + 24 * v60;
            v62 = *(_DWORD *)v54;
            if (*(_DWORD *)v61 < *(_DWORD *)v54)
            {
              v215 = *(_DWORD *)(v54 + 20);
              v214 = *(_OWORD *)(v54 + 4);
              do
              {
                v63 = v54;
                v54 = v61;
                v64 = *(_OWORD *)v61;
                *(_QWORD *)(v63 + 16) = *(_QWORD *)(v61 + 16);
                *(_OWORD *)v63 = v64;
                if (!v60)
                  break;
                v60 = (v60 - 1) >> 1;
                v61 = v45 + 24 * v60;
              }
              while (*(_DWORD *)v61 < v62);
              *(_DWORD *)v54 = v62;
              *(_OWORD *)(v54 + 4) = v214;
              *(_DWORD *)(v54 + 20) = v215;
            }
          }
        }
        v46 = (char *)v7[88];
      }
      v65 = v46 - 24;
      v7[88] = v46 - 24;
      v66 = __OFSUB__(v6, v49);
      v67 = v6 - v49;
      if (v67 < 0 != v66)
        break;
      v6 = v67;
      v71 = v7[18];
      v72 = *(_DWORD *)(v71 + 20 * v47 + 12);
      if (v72 < v8)
        goto LABEL_62;
      if (v48 <= v67)
      {
        v95 = (uint64_t *)(v71 + 20 * v72);
        v96 = 20 * *((int *)v95 + 3);
        v97 = *v95;
        v98 = *(_QWORD *)(v71 + v96);
        v99 = v97 - v98;
        if (v97 - v98 < 0)
          v99 = v98 - v97;
        v100 = 63 - __clz(v99);
        v101 = v97 - v98;
        if (v97 == v98)
          v102 = 0;
        else
          v102 = v100;
        if (v48 >= 0)
          v103 = v48;
        else
          v103 = -v48;
        v104 = 63 - __clz(v103);
        if (!v48)
          v104 = 0;
        v105 = v102 + v104;
        if (v105 > 61)
        {
          v106 = 0;
          if (!v48
            || v97 == v98
            || ((v106 = ((v101 ^ (unint64_t)v48) >> 63) + 0x7FFFFFFFFFFFFFFFLL,
                 v118 = v99 * v103,
                 v105 <= 0x3E)
              ? (v119 = v118 >= v106)
              : (v119 = 1),
                v119))
          {
            if (v67 >= v106)
              goto LABEL_121;
          }
          else
          {
            if (v106 >= 0)
              v106 = v118;
            else
              v106 = -(uint64_t)v118;
            if (v67 >= v106)
            {
LABEL_121:
              v107 = v7[89];
              if ((unint64_t)v65 < v107)
              {
                *((_DWORD *)v46 - 6) = v72;
                *(_QWORD *)(v46 - 20) = v48;
                *((_QWORD *)v46 - 1) = v106;
                goto LABEL_182;
              }
              v126 = (int *)*v205;
              v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v65[-*v205] >> 3);
              v128 = v127 + 1;
              if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - (_QWORD)v126) >> 3);
              if (2 * v129 > v128)
                v128 = 2 * v129;
              if (v129 >= 0x555555555555555)
                v130 = 0xAAAAAAAAAAAAAAALL;
              else
                v130 = v128;
              if (v130)
              {
                if (v130 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_255;
                v131 = v6;
                v132 = (char *)operator new(24 * v130);
                v6 = v131;
                v8 = v206;
              }
              else
              {
                v132 = 0;
              }
              v144 = &v132[24 * v127];
              *(_DWORD *)v144 = v72;
              v145 = &v132[24 * v130];
              *(_QWORD *)(v144 + 4) = v48;
              *((_QWORD *)v144 + 2) = v106;
              v46 = v144 + 24;
              if (v65 == (char *)v126)
              {
                v7 = a1;
                a1[87] = v144;
                a1[88] = v46;
                a1[89] = v145;
              }
              else
              {
                v7 = a1;
                do
                {
                  v146 = *(_OWORD *)(v65 - 24);
                  *((_QWORD *)v144 - 1) = *((_QWORD *)v65 - 1);
                  *(_OWORD *)(v144 - 24) = v146;
                  v144 -= 24;
                  v65 -= 24;
                }
                while (v65 != (char *)v126);
                v65 = (char *)a1[87];
                a1[87] = v144;
                a1[88] = v46;
                a1[89] = v145;
                if (!v65)
                {
LABEL_182:
                  v7[88] = v46;
                  v148 = v7[87];
                  if ((uint64_t)&v46[-v148] >= 25)
                  {
                    v149 = ((unint64_t)&v46[-v148] / 0x18 - 2) >> 1;
                    v150 = (char *)(v148 + 24 * v149);
                    v151 = v46 - 24;
                    v152 = *((_DWORD *)v46 - 6);
                    if (*(_DWORD *)v150 < v152)
                    {
                      v212 = *((_DWORD *)v46 - 1);
                      v209 = *(_OWORD *)(v46 - 20);
                      do
                      {
                        v153 = v151;
                        v151 = v150;
                        v154 = *(_OWORD *)v150;
                        *((_QWORD *)v153 + 2) = *((_QWORD *)v150 + 2);
                        *(_OWORD *)v153 = v154;
                        if (!v149)
                          break;
                        v149 = (v149 - 1) >> 1;
                        v150 = (char *)(v148 + 24 * v149);
                      }
                      while (*(_DWORD *)v150 < v152);
                      *(_DWORD *)v151 = v152;
                      *(_OWORD *)(v151 + 4) = v209;
                      *((_DWORD *)v151 + 5) = v212;
                    }
                  }
                  goto LABEL_62;
                }
              }
              v147 = v6;
              operator delete(v65);
              v6 = v147;
              goto LABEL_182;
            }
          }
        }
        else
        {
          v106 = v101 * v48;
          if (v67 >= v101 * v48)
            goto LABEL_121;
        }
        end = this->__end_;
        value = this->__end_cap_.__value_;
        if (end >= value)
        {
          begin = this->__begin_;
          v121 = (char *)end - (char *)this->__begin_;
          v122 = v121 >> 2;
          v123 = (v121 >> 2) + 1;
          if (v123 >> 62)
LABEL_254:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v124 = (char *)value - (char *)begin;
          if (v124 >> 1 > v123)
            v123 = v124 >> 1;
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL)
            v80 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v80 = v123;
          if (v80)
          {
            if (v80 >> 62)
              goto LABEL_255;
            v125 = v6;
            v82 = operator new(4 * v80);
            v6 = v125;
            v8 = v206;
            v83 = (int *)&v82[4 * v122];
            *v83 = v72;
            v70 = v83 + 1;
            if (end == begin)
            {
LABEL_173:
              v7 = a1;
              goto LABEL_193;
            }
          }
          else
          {
            v82 = 0;
            v83 = (int *)(4 * v122);
            *(_DWORD *)(4 * v122) = v72;
            v70 = (int *)(4 * v122 + 4);
            if (end == begin)
              goto LABEL_173;
          }
          v143 = (char *)(end - 1) - (char *)begin;
          if (v143 >= 0x2C)
          {
            v155 = (char *)end - &v82[v121];
            v7 = a1;
            if (v155 >= 0x20)
            {
              v156 = (v143 >> 2) + 1;
              v157 = 4 * (v156 & 0x7FFFFFFFFFFFFFF8);
              v158 = &end[v157 / 0xFFFFFFFFFFFFFFFCLL];
              v83 = (int *)((char *)v83 - v157);
              v159 = &v82[4 * v122 - 16];
              v160 = (__int128 *)(end - 4);
              v161 = v156 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v162 = *v160;
                *(v159 - 1) = *(v160 - 1);
                *v159 = v162;
                v159 -= 2;
                v160 -= 2;
                v161 -= 8;
              }
              while (v161);
              end = v158;
              if (v156 == (v156 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_193;
            }
          }
          else
          {
            v7 = a1;
          }
          do
          {
            v163 = *--end;
            *--v83 = v163;
          }
          while (end != begin);
LABEL_193:
          this->__begin_ = v83;
          this->__end_ = v70;
          this->__end_cap_.__value_ = (int *)&v82[4 * v80];
          if (begin)
          {
            v164 = v6;
            operator delete(begin);
            v6 = v164;
          }
LABEL_84:
          this->__end_ = v70;
          goto LABEL_62;
        }
      }
      else
      {
        end = this->__end_;
        v73 = this->__end_cap_.__value_;
        if (end >= v73)
        {
          begin = this->__begin_;
          v76 = (char *)end - (char *)this->__begin_;
          v77 = v76 >> 2;
          v78 = (v76 >> 2) + 1;
          if (v78 >> 62)
            goto LABEL_254;
          v79 = (char *)v73 - (char *)begin;
          if (v79 >> 1 > v78)
            v78 = v79 >> 1;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
            v80 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 >> 62)
              goto LABEL_255;
            v81 = v6;
            v82 = operator new(4 * v80);
            v6 = v81;
            v8 = v206;
            v83 = (int *)&v82[4 * v77];
            *v83 = v72;
            v70 = v83 + 1;
            if (end == begin)
              goto LABEL_173;
          }
          else
          {
            v82 = 0;
            v83 = (int *)(4 * v77);
            *(_DWORD *)(4 * v77) = v72;
            v70 = (int *)(4 * v77 + 4);
            if (end == begin)
              goto LABEL_173;
          }
          v133 = (char *)(end - 1) - (char *)begin;
          if (v133 >= 0x2C)
          {
            v134 = (char *)end - &v82[v76];
            v7 = a1;
            if (v134 >= 0x20)
            {
              v135 = (v133 >> 2) + 1;
              v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
              v137 = &end[v136 / 0xFFFFFFFFFFFFFFFCLL];
              v83 = (int *)((char *)v83 - v136);
              v138 = &v82[4 * v77 - 16];
              v139 = (__int128 *)(end - 4);
              v140 = v135 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v141 = *v139;
                *(v138 - 1) = *(v139 - 1);
                *v138 = v141;
                v138 -= 2;
                v139 -= 2;
                v140 -= 8;
              }
              while (v140);
              end = v137;
              if (v135 == (v135 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_193;
            }
          }
          else
          {
            v7 = a1;
          }
          do
          {
            v142 = *--end;
            *--v83 = v142;
          }
          while (end != begin);
          goto LABEL_193;
        }
      }
      *end = v72;
      this->__end_ = end + 1;
LABEL_62:
      if (v6 <= 0)
        goto LABEL_200;
    }
    v69 = this->__end_;
    v68 = this->__end_cap_.__value_;
    if (v69 >= v68)
    {
      v84 = this->__begin_;
      v85 = (char *)v69 - (char *)this->__begin_;
      v86 = v85 >> 2;
      v87 = (v85 >> 2) + 1;
      if (v87 >> 62)
        goto LABEL_254;
      v88 = (char *)v68 - (char *)v84;
      if (v88 >> 1 > v87)
        v87 = v88 >> 1;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
        v89 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 >> 62)
          goto LABEL_255;
        v90 = v6;
        v91 = operator new(4 * v89);
        v6 = v90;
        v8 = v206;
        v92 = (int *)&v91[4 * v86];
        *v92 = v47;
        v93 = v92 + 1;
        if (v69 != v84)
        {
LABEL_107:
          v94 = (char *)(v69 - 1) - (char *)v84;
          if (v94 < 0x2C)
          {
            v7 = a1;
            goto LABEL_129;
          }
          v108 = (char *)v69 - &v91[v85];
          v7 = a1;
          if (v108 < 0x20)
            goto LABEL_260;
          v109 = (v94 >> 2) + 1;
          v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
          v111 = &v69[v110 / 0xFFFFFFFFFFFFFFFCLL];
          v92 = (int *)((char *)v92 - v110);
          v112 = &v91[4 * v86 - 16];
          v113 = (__int128 *)(v69 - 4);
          v114 = v109 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v113;
            *(v112 - 1) = *(v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 2;
            v114 -= 8;
          }
          while (v114);
          v69 = v111;
          if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_260:
            do
            {
LABEL_129:
              v116 = *--v69;
              *--v92 = v116;
            }
            while (v69 != v84);
          }
LABEL_130:
          this->__begin_ = v92;
          this->__end_ = v93;
          this->__end_cap_.__value_ = (int *)&v91[4 * v89];
          if (v84)
          {
            v117 = v6;
            operator delete(v84);
            v6 = v117;
          }
          this->__end_ = v93;
          goto LABEL_62;
        }
      }
      else
      {
        v91 = 0;
        v92 = (int *)(4 * v86);
        *(_DWORD *)(4 * v86) = v47;
        v93 = (int *)(4 * v86 + 4);
        if (v69 != v84)
          goto LABEL_107;
      }
      v7 = a1;
      goto LABEL_130;
    }
    *v69 = v47;
    v70 = v69 + 1;
    goto LABEL_84;
  }
LABEL_200:
  v165 = (int *)v7[87];
  v166 = (int *)v7[88];
  if (v165 != v166)
  {
    v167 = this->__end_;
    while (1)
    {
      v169 = this->__end_cap_.__value_;
      if (v167 < v169)
      {
        *v167 = *v165;
        v168 = v167 + 1;
      }
      else
      {
        v170 = this->__begin_;
        v171 = (char *)v167 - (char *)this->__begin_;
        v172 = v171 >> 2;
        v173 = (v171 >> 2) + 1;
        if (v173 >> 62)
          goto LABEL_254;
        v174 = (char *)v169 - (char *)v170;
        if (v174 >> 1 > v173)
          v173 = v174 >> 1;
        if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
          v175 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v175 = v173;
        if (v175)
        {
          if (v175 >> 62)
            goto LABEL_255;
          v176 = operator new(4 * v175);
          v177 = (int *)&v176[4 * v172];
          *v177 = *v165;
          v168 = v177 + 1;
          if (v167 != v170)
          {
LABEL_214:
            v178 = (char *)(v167 - 1) - (char *)v170;
            if (v178 < 0xBC
              || &v176[v171 - 4 - (v178 & 0xFFFFFFFFFFFFFFFCLL)] > &v176[v171 - 4]
              || (std::vector<int>::pointer)((char *)v167 - (v178 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v167 - 1
              || (unint64_t)((char *)v167 - v176 - v171) < 0x20)
            {
              v179 = v167;
              v7 = a1;
              goto LABEL_219;
            }
            v181 = (v178 >> 2) + 1;
            v182 = 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
            v179 = &v167[v182 / 0xFFFFFFFFFFFFFFFCLL];
            v177 = (int *)((char *)v177 - v182);
            v183 = &v176[4 * v172 - 16];
            v184 = (__int128 *)(v167 - 4);
            v185 = v181 & 0x7FFFFFFFFFFFFFF8;
            v7 = a1;
            do
            {
              v186 = *v184;
              *(v183 - 1) = *(v184 - 1);
              *v183 = v186;
              v183 -= 2;
              v184 -= 2;
              v185 -= 8;
            }
            while (v185);
            if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_219:
                v180 = *--v179;
                *--v177 = v180;
              }
              while (v179 != v170);
            }
            this->__begin_ = v177;
            this->__end_ = v168;
            this->__end_cap_.__value_ = (int *)&v176[4 * v175];
            if (!v170)
              goto LABEL_203;
LABEL_224:
            operator delete(v170);
            goto LABEL_203;
          }
        }
        else
        {
          v176 = 0;
          v177 = (int *)(4 * v172);
          *(_DWORD *)(4 * v172) = *v165;
          v168 = (int *)(4 * v172 + 4);
          if (v167 != v170)
            goto LABEL_214;
        }
        v7 = a1;
        this->__begin_ = v177;
        this->__end_ = v168;
        this->__end_cap_.__value_ = (int *)&v176[4 * v175];
        if (v170)
          goto LABEL_224;
      }
LABEL_203:
      this->__end_ = v168;
      v165 += 6;
      v167 = v168;
      if (v165 == v166)
      {
        v165 = (int *)*v205;
        break;
      }
    }
  }
  v7[88] = v165;
}

void operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(std::vector<int> *a1, uint64_t a2, uint64_t a3, int a4, int *a5, uint64_t a6, void **a7)
{
  std::vector<int> *v9;
  char *begin;
  int *v11;
  int *v12;
  uint64_t end;
  int *v14;
  unint64_t value;
  std::vector<int> *v16;
  std::vector<int>::pointer v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int *v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  std::vector<int>::pointer v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  void *v49;
  int *v53;
  _BYTE v54[12];

  v9 = a1 + 30;
  begin = (char *)a1[30].__begin_;
  a1[30].__end_ = (std::vector<int>::pointer)begin;
  if (a6)
  {
    v11 = a5;
    v12 = &a5[a6];
    v53 = v12;
    while (1)
    {
      while (1)
      {
        v14 = &a1[1].__end_cap_.__value_[3 * *v11 + 2];
        value = (unint64_t)a1[30].__end_cap_.__value_;
        if ((unint64_t)begin >= value)
          break;
        *(_DWORD *)begin = *v14;
        begin += 4;
        end = (uint64_t)begin;
        a1[30].__end_ = (std::vector<int>::pointer)begin;
        if (++v11 == v12)
          goto LABEL_32;
      }
      v16 = v9;
      v17 = v9->__begin_;
      v18 = begin - (char *)v9->__begin_;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v21 = value - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22)
      {
        if (v22 >> 62)
LABEL_55:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v23 = operator new(4 * v22);
        v24 = (int *)&v23[4 * v19];
        *v24 = *v14;
        end = (uint64_t)(v24 + 1);
        if (begin == (char *)v17)
        {
LABEL_25:
          v9 = v16;
          a1[30].__begin_ = v24;
          a1[30].__end_ = (std::vector<int>::pointer)end;
          a1[30].__end_cap_.__value_ = (int *)&v23[4 * v22];
          if (!v17)
            goto LABEL_22;
LABEL_21:
          operator delete(v17);
          goto LABEL_22;
        }
      }
      else
      {
        v23 = 0;
        v24 = (int *)(4 * v19);
        *(_DWORD *)(4 * v19) = *v14;
        end = 4 * v19 + 4;
        if (begin == (char *)v17)
          goto LABEL_25;
      }
      v25 = begin - 4 - (char *)v17;
      if (v25 < 0xBC
        || &v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4]
        || &begin[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > begin - 4
        || (unint64_t)(begin - v23 - v18) < 0x20)
      {
        break;
      }
      v28 = (v25 >> 2) + 1;
      v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
      v26 = &begin[-v29];
      v24 = (int *)((char *)v24 - v29);
      v30 = &v23[4 * v19 - 16];
      v31 = begin - 16;
      v32 = v28 & 0x7FFFFFFFFFFFFFF8;
      v9 = v16;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 8;
      }
      while (v32);
      if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
LABEL_20:
      a1[30].__begin_ = v24;
      a1[30].__end_ = (std::vector<int>::pointer)end;
      a1[30].__end_cap_.__value_ = (int *)&v23[4 * v22];
      if (v17)
        goto LABEL_21;
LABEL_22:
      v12 = v53;
      a1[30].__end_ = (std::vector<int>::pointer)end;
      ++v11;
      begin = (char *)end;
      if (v11 == v53)
        goto LABEL_32;
    }
    v26 = begin;
    v9 = v16;
    do
    {
LABEL_19:
      v27 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v24 = v27;
    }
    while (v26 != (char *)v17);
    goto LABEL_20;
  }
  end = (uint64_t)begin;
LABEL_32:
  if (a2 > 0)
  {
    operations_research::sat::IntegerTrail::RelaxLinearReason(a1, a2, a3, a4, v9);
    end = (uint64_t)a1[30].__end_;
  }
  v34 = v9->__begin_;
  if (v9->__begin_ != (std::vector<int>::pointer)end)
  {
    v35 = (char *)a7[1];
    do
    {
      while (1)
      {
        v36 = (uint64_t)&a1[6].__begin_[5 * *v34];
        *(_DWORD *)v54 = *(_DWORD *)(v36 + 8);
        *(_QWORD *)&v54[4] = *(_QWORD *)v36;
        v37 = HIDWORD(*(_QWORD *)v36);
        v38 = (unint64_t)a7[2];
        if ((unint64_t)v35 >= v38)
          break;
        *(_QWORD *)v35 = *(_QWORD *)v54;
        *((_DWORD *)v35 + 2) = v37;
        a7[1] = v35 + 12;
        ++v34;
        v35 += 12;
        if (v34 == (std::vector<int>::pointer)end)
          return;
      }
      v39 = (char *)*a7;
      v40 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)*a7) >> 2);
      v41 = v40 + 1;
      if (v40 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v39) >> 2);
      if (2 * v42 > v41)
        v41 = 2 * v42;
      if (v42 >= 0xAAAAAAAAAAAAAAALL)
        v43 = 0x1555555555555555;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 > 0x1555555555555555)
          goto LABEL_55;
        v44 = (char *)operator new(12 * v43);
      }
      else
      {
        v44 = 0;
      }
      v45 = &v44[12 * v40];
      *(_QWORD *)v45 = *(_QWORD *)v54;
      *((_DWORD *)v45 + 2) = v37;
      v46 = v45;
      if (v35 != v39)
      {
        do
        {
          v47 = *(_QWORD *)(v35 - 12);
          v35 -= 12;
          v48 = *((_DWORD *)v35 + 2);
          *(_QWORD *)(v46 - 12) = v47;
          v46 -= 12;
          *((_DWORD *)v46 + 2) = v48;
        }
        while (v35 != v39);
        v35 = (char *)*a7;
      }
      v49 = v45 + 12;
      *a7 = v46;
      a7[1] = v45 + 12;
      a7[2] = &v44[12 * v43];
      if (v35)
        operator delete(v35);
      a7[1] = v49;
      ++v34;
      v35 = (char *)v49;
    }
    while (v34 != (std::vector<int>::pointer)end);
  }
}

void operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(uint64_t a1, int **a2)
{
  int *v2;
  char *v3;
  int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v3 = (char *)*a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 144);
    v6 = *a2;
    do
    {
      v7 = *(_QWORD *)(v6 + 1);
      if (v7 > *(_QWORD *)(v5 + 20 * *v6))
      {
        v8 = &v3[12 * v4++];
        *(_DWORD *)v8 = *v6;
        *(_QWORD *)(v8 + 4) = v7;
      }
      v6 += 3;
    }
    while (v6 != v2);
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - v3) >> 2);
  v10 = v4 >= v9;
  v11 = v4 - v9;
  if (v11 != 0 && v10)
  {
    std::vector<operations_research::sat::IntegerLiteral>::__append((void **)a2, v11);
  }
  else if (!v10)
  {
    a2[1] = (int *)&v3[12 * v4];
  }
}

_QWORD *operations_research::sat::IntegerTrail::InitializeConflict(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char *__src, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  _QWORD *v48;
  uint64_t *v49;
  int v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  _BYTE v55[12];

  v9 = *(_QWORD **)(a1 + 936);
  v9[18] = 0;
  v10 = v9 + 12;
  v11 = *(_QWORD *)(a4 + 24);
  v48 = v9 + 12;
  if (!v11)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, __src, &__src[4 * a6], (4 * a6) >> 2);
    if (!a8)
      return v48;
    v16 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
    v17 = (uint64_t *)((char *)a7 + 12 * a8);
    v51 = (void **)(a1 + 544);
    v50 = v16;
    v49 = v17;
    while (1)
    {
      v19 = *a7;
      v20 = *((_DWORD *)a7 + 2);
      *(_QWORD *)v55 = v19;
      *(_DWORD *)&v55[8] = v20;
      v21 = *(_QWORD *)&v55[4];
      v22 = *(_QWORD *)(a1 + 144);
      if (*(uint64_t *)&v55[4] <= *(_QWORD *)(v22 + 20 * (int)v19))
      {
        v24 = -1;
LABEL_21:
        if (v24 < v16)
          goto LABEL_8;
      }
      else
      {
        v23 = (int)v19;
        v24 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 12 * (int)v19 + 8);
        v25 = *(_QWORD *)(a1 + 72);
        v26 = *(_DWORD *)(v25 + 4 * (int)v19);
        if (v26 < v24
          && *(_DWORD *)(v22 + 20 * v26 + 8) == (_DWORD)v19
          && *(_QWORD *)(v22 + 20 * v26) >= *(uint64_t *)&v55[4])
        {
          v24 = *(_DWORD *)(v25 + 4 * (int)v19);
        }
        v27 = v24;
        if (v24 >= *(_DWORD *)(a1 + 64))
LABEL_15:
          *(_DWORD *)(v25 + 4 * v23) = v27;
        while (1)
        {
          v28 = *(_QWORD *)(v22 + 20 * v27);
          if (v28 == v21)
            break;
          if (v28 < v21)
            goto LABEL_21;
          v24 = v27;
          v27 = *(_DWORD *)(v22 + 20 * v27 + 12);
          if (v27 >= *(_DWORD *)(a1 + 64))
            goto LABEL_15;
        }
        v24 = v27;
        if (v27 < v16)
          goto LABEL_8;
      }
      v29 = *(int **)(a1 + 552);
      v30 = *(_QWORD *)(a1 + 560);
      if ((unint64_t)v29 >= v30)
        break;
      *v29 = v24;
      v18 = (uint64_t)(v29 + 1);
LABEL_7:
      *(_QWORD *)(a1 + 552) = v18;
LABEL_8:
      a7 = (uint64_t *)((char *)a7 + 12);
      if (a7 == v17)
        return v48;
    }
    v31 = (int *)*v51;
    v32 = (char *)v29 - (_BYTE *)*v51;
    v33 = v32 >> 2;
    v34 = (v32 >> 2) + 1;
    if (v34 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = v30 - (_QWORD)v31;
    if (v35 >> 1 > v34)
      v34 = v35 >> 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
      v36 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v37 = operator new(4 * v36);
      v38 = (int *)&v37[4 * v33];
      *v38 = v24;
      v18 = (uint64_t)(v38 + 1);
      if (v29 == v31)
        goto LABEL_42;
    }
    else
    {
      v37 = 0;
      v38 = (int *)(4 * v33);
      *(_DWORD *)(4 * v33) = v24;
      v18 = 4 * v33 + 4;
      if (v29 == v31)
      {
LABEL_42:
        *(_QWORD *)(a1 + 544) = v38;
        *(_QWORD *)(a1 + 552) = v18;
        *(_QWORD *)(a1 + 560) = &v37[4 * v36];
        if (v31)
          operator delete(v31);
        v16 = v50;
        v17 = v49;
        goto LABEL_7;
      }
    }
    v39 = (char *)(v29 - 1) - (char *)v31;
    if (v39 < 0x2C)
      goto LABEL_49;
    if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20)
      goto LABEL_49;
    v40 = (v39 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v29[v41 / 0xFFFFFFFFFFFFFFFCLL];
    v38 = (int *)((char *)v38 - v41);
    v43 = &v37[4 * v33 - 16];
    v44 = v29 - 4;
    v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 8;
      v45 -= 8;
    }
    while (v45);
    v29 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        v47 = *--v29;
        *--v38 = v47;
      }
      while (v29 != v31);
    }
    goto LABEL_42;
  }
  v9[13] = v9[12];
  v12 = -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2);
  *(_QWORD *)v55 = a2;
  *(_DWORD *)&v55[8] = a3;
  v54 = v12;
  v52 = a1 + 544;
  v53 = v10;
  (*(void (**)(uint64_t, _BYTE *, int *, _QWORD **, uint64_t *))(*(_QWORD *)v11 + 48))(v11, v55, &v54, &v53, &v52);
  return v48;
}

uint64_t std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v11 = a2;
  v12 = a3;
  v10 = a4;
  v8 = a6;
  v9 = a5;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v11, &v10, &v9, &v8);
}

uint64_t operations_research::sat::IntegerTrail::EnqueueInternal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char *__src, uint64_t a6, uint64_t *a7, uint64_t a8, int a9)
{
  int v11;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int64_t *v21;
  uint64_t v22;
  int64_t v23;
  int64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  char **v36;
  void **v37;
  int v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  _QWORD **v42;
  _QWORD **i;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int **v61;
  void **v62;
  unint64_t v63;
  int *v64;
  _DWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int *v73;
  int *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  signed int v103;
  uint64_t v104;
  signed int v105;
  signed int v106;
  uint64_t v107;
  signed int *v108;
  unint64_t v109;
  _DWORD *v110;
  signed int *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  signed int *v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  signed int *v126;
  _OWORD *v127;
  signed int *v128;
  uint64_t v129;
  __int128 v130;
  signed int v131;
  uint64_t updated;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  int *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  _OWORD *v149;
  int *v150;
  uint64_t v151;
  __int128 v152;
  int v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  __int128 *p_p;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  __int128 v179;
  uint64_t v180;
  void *v185[3];
  _BYTE v186[12];
  _BYTE v187[12];
  _QWORD v188[3];
  _QWORD *v189;
  __int128 __p;
  char *v191;
  __int128 *v192;
  uint64_t v193;

  v11 = a2;
  v193 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v187 = a2;
  *(_DWORD *)&v187[8] = a3;
  v13 = *(int *)(*(_QWORD *)(a1 + 408) + 4 * (int)a2);
  if ((_DWORD)v13 != -1
    && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 936) + 24) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    return 1;
  }
  v14 = (int)a2;
  v15 = *(_QWORD *)&v187[4];
  v16 = *(_QWORD *)(a1 + 40);
  if (*(uint64_t *)&v187[4] <= *(_QWORD *)(v16 + 12 * (int)a2))
    return 1;
  ++*(_QWORD *)(a1 + 848);
  v17 = **(_QWORD **)(a1 + 920);
  v18 = (_QWORD *)(v17 + 24 * (int)a2);
  if ((int)(*v18 >> 1) >= 2)
  {
    LODWORD(__p) = a2;
    v19 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>((uint64_t *)(a1 + 440), (int *)&__p);
    v20 = *v18 >> 1;
    if (v19 < (int)v20)
    {
      if ((*v18 & 1) != 0)
      {
        v24 = (int64_t *)(v18[1] + 16 * v19 + 8);
        v25 = (int)v20 - (uint64_t)v19;
        while (1)
        {
          v26 = *v24;
          v24 += 2;
          if (v15 <= v26)
            break;
          ++v19;
          if (!--v25)
            goto LABEL_16;
        }
      }
      else
      {
        v21 = (int64_t *)(24 * (int)v14 + 16 * v19 + v17 + 16);
        v22 = (int)v20 - (uint64_t)v19;
        while (1)
        {
          v23 = *v21;
          v21 += 2;
          if (v15 <= v23)
            break;
          ++v19;
          if (!--v22)
            goto LABEL_16;
        }
      }
    }
    if (v19 == (_DWORD)v20)
    {
LABEL_16:
      v27 = *(_QWORD *)(a1 + 936);
      *(_QWORD *)(v27 + 144) = 0;
      v28 = (void **)(v27 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v27 + 96), __src, &__src[4 * a6], (4 * a6) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(a1, a7, a8, v28);
      return 0;
    }
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((_QWORD *)(a1 + 432), v11, v19);
    v30 = *(_BYTE *)v18;
    v29 = v18 + 1;
    if ((v30 & 1) != 0)
      v29 = (_QWORD *)*v29;
    if (v15 <= v29[2 * v19])
      v15 = v29[2 * v19];
    *(_QWORD *)&v187[4] = v15;
    v16 = *(_QWORD *)(a1 + 40);
  }
  if (v15 <= -*(_QWORD *)(v16 + 12 * (int)(v14 ^ 1)))
  {
    v42 = *(_QWORD ***)(a1 + 872);
    for (i = *(_QWORD ***)(a1 + 880); v42 != i; ++v42)
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(*v42, v11);
    v44 = *(_QWORD *)(a1 + 928);
    v45 = *(_DWORD *)v187;
    *(_QWORD *)&__p = *(_QWORD *)v187;
    DWORD2(__p) = HIDWORD(v15);
    v47 = v44 + 32;
    v46 = *(_QWORD *)(v44 + 32);
    v48 = (_QWORD *)a4;
    if (*(int *)v187 < (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v47 + 8) - v46) >> 3)))
    {
      v49 = (_QWORD *)(v46 + 24 * *(int *)v187);
      v50 = v49 + 1;
      v51 = (_QWORD *)v49[1];
      if (v51)
      {
        do
        {
          v52 = *(_QWORD *)((char *)v51 + 28);
          v53 = *(_QWORD *)((char *)&__p + 4) < v52;
          if (*(uint64_t *)((char *)&__p + 4) >= v52)
            v54 = v51 + 1;
          else
            v54 = v51;
          if (v53)
            v50 = v51;
          v51 = (_QWORD *)*v54;
        }
        while (*v54);
      }
      if (v50 != (uint64_t *)*v49)
      {
        v55 = *v50;
        if (*v50)
        {
          do
          {
            v56 = v55;
            v55 = *(_QWORD *)(v55 + 8);
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = v50[2];
            v57 = *(_QWORD *)v56 == (_QWORD)v50;
            v50 = (uint64_t *)v56;
          }
          while (v57);
        }
        v58 = *(_DWORD *)(v56 + 36);
        if (v58 != -1)
        {
          v59 = *(_QWORD *)(a1 + 936);
          v60 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + (((unint64_t)v58 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v60 >> (v58 & 0x3F ^ 1u)) & 1) != 0)
          {
            v61 = (int **)operations_research::sat::IntegerTrail::InitializeConflict(a1, *(uint64_t *)v187, SHIDWORD(v15), a4, __src, a6, a7, a8);
            v62 = (void **)v61;
            v64 = v61[1];
            v63 = (unint64_t)v61[2];
            if ((unint64_t)v64 >= v63)
            {
              v133 = *v61;
              v134 = (char *)v64 - (char *)*v61;
              v135 = v134 >> 2;
              v136 = (v134 >> 2) + 1;
              if (v136 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v137 = v63 - (_QWORD)v133;
              if (v137 >> 1 > v136)
                v136 = v137 >> 1;
              if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
                v138 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v138 = v136;
              if (v138)
              {
                if (v138 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v139 = operator new(4 * v138);
              }
              else
              {
                v139 = 0;
              }
              v143 = (int *)&v139[4 * v135];
              v144 = &v139[4 * v138];
              *v143 = v58;
              v65 = v143 + 1;
              if (v64 != v133)
              {
                v145 = (char *)v64 - (char *)v133 - 4;
                if (v145 < 0x2C)
                  goto LABEL_234;
                if ((unint64_t)((char *)v64 - v139 - v134) < 0x20)
                  goto LABEL_234;
                v146 = (v145 >> 2) + 1;
                v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
                v148 = &v64[v147 / 0xFFFFFFFFFFFFFFFCLL];
                v143 = (int *)((char *)v143 - v147);
                v149 = &v139[4 * v135 - 16];
                v150 = v64 - 4;
                v151 = v146 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v152 = *(_OWORD *)v150;
                  *(v149 - 1) = *((_OWORD *)v150 - 1);
                  *v149 = v152;
                  v149 -= 2;
                  v150 -= 8;
                  v151 -= 8;
                }
                while (v151);
                v64 = v148;
                if (v146 != (v146 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_234:
                  do
                  {
                    v153 = *--v64;
                    *--v143 = v153;
                  }
                  while (v64 != v133);
                }
              }
              *v62 = v143;
              v62[1] = v65;
              v62[2] = v144;
              if (v133)
                operator delete(v133);
            }
            else
            {
              *v64 = v58;
              v65 = v64 + 1;
            }
            v62[1] = v65;
            operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, v62);
            return 0;
          }
          v117 = *(_QWORD *)(v56 + 28);
          *(_QWORD *)v186 = __PAIR64__(v117, *(unsigned int *)v187);
          *(_DWORD *)&v186[8] = HIDWORD(v117);
          *(_QWORD *)&__p = *(_QWORD *)v187;
          DWORD2(__p) = HIDWORD(v15);
          v118 = v60 >> (v58 & 0x3F);
          if (*(_QWORD *)&v186[4] == *(_QWORD *)((char *)&__p + 4))
          {
            if ((v118 & 1) == 0)
            {
              std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::function((uint64_t)v188, a4);
              operations_research::sat::IntegerTrail::EnqueueLiteralInternal(a1, v58, v188, __src, a6, (char *)a7, a8);
              v119 = v189;
              if (v189 == v188)
              {
                v120 = 4;
                v119 = v188;
                goto LABEL_220;
              }
              if (v189)
              {
                v120 = 5;
LABEL_220:
                (*(void (**)(void))(*v119 + 8 * v120))();
              }
            }
            return operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral((_QWORD *)a1, *(uint64_t *)v187, SHIDWORD(v15), v58);
          }
          if ((v118 & 1) == 0)
          {
            if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
            {
              operations_research::sat::Trail::EnqueueWithUnitReason(v59, v58);
            }
            else
            {
              v141 = *(int *)(v59 + 12);
              v142 = *(_QWORD *)(a1 + 824);
              if (v141 >= (*(_QWORD *)(a1 + 832) - v142) >> 2)
              {
                std::vector<int>::resize((std::vector<int> *)(a1 + 824), (int)v141 + 1);
                v142 = *(_QWORD *)(a1 + 824);
                v59 = *(_QWORD *)(a1 + 936);
              }
              *(_DWORD *)(v142 + 4 * v141) = a9;
              operations_research::sat::Trail::Enqueue(v59, v58, *(_DWORD *)(a1 + 32));
            }
            v48 = (_QWORD *)a4;
          }
        }
      }
    }
    if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
    {
      ++*(_QWORD *)(a1 + 864);
      v158 = *(_QWORD *)(a1 + 40);
      v159 = 12 * v45;
      *(_QWORD *)(v158 + v159) = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 20 * v45) = v15;
      v160 = *(_QWORD **)(a1 + 936);
      v160[18] = 0;
      v160[13] = v160[12];
      operations_research::Domain::Domain(v185, *(_QWORD *)(v158 + v159), -*(_QWORD *)(v158 + 12 * (v45 ^ 1)));
      updated = operations_research::sat::IntegerTrail::UpdateInitialDomain(a1, v45, (operations_research::Domain *)v185);
      if (((uint64_t)v185[0] & 1) != 0)
        operator delete(v185[1]);
      return updated;
    }
    v154 = (_QWORD *)v48[3];
    if (!v154)
    {
      v161 = *(_QWORD *)(a1 + 144);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 152) - v161) >> 2) <= a9)
      {
        v165 = *(_QWORD *)(a1 + 240);
        v166 = *(_QWORD *)(a1 + 248);
        LODWORD(__p) = (*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 2;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 240, &__p);
        if (a6)
          std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 288), *(void **)(a1 + 296), __src, &__src[4 * a6], (4 * a6) >> 2);
        LODWORD(__p) = -1431655765 * ((*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 264, &__p);
        v162 = (unint64_t)(v166 - v165) >> 2;
        if (a8)
          std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(a1 + 312, *(_QWORD *)(a1 + 320), (char *)a7, (char *)a7 + 12 * a8, 0xAAAAAAAAAAAAAAABLL * ((12 * a8) >> 2));
      }
      else
      {
        LODWORD(v162) = *(_DWORD *)(v161 + 20 * a9 + 16);
      }
      goto LABEL_199;
    }
    v155 = *(_QWORD *)(a1 + 168);
    v156 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2);
    if (v156 < (*(_QWORD *)(a1 + 176) - v155) >> 5)
    {
      v157 = (_QWORD *)(v155 - 0x6666666666666660 * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
      goto LABEL_189;
    }
    v192 = 0;
    std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::resize(a1 + 168, v156 + 1, (uint64_t)&__p);
    p_p = v192;
    if (v192 == &__p)
    {
      v164 = 4;
      p_p = &__p;
    }
    else
    {
      if (!v192)
        goto LABEL_188;
      v164 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)p_p + 8 * v164))(p_p);
LABEL_188:
    v154 = (_QWORD *)v48[3];
    v157 = (_QWORD *)(*(_QWORD *)(a1 + 168)
                    - 0x6666666666666660 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
    if (!v154)
    {
      v192 = 0;
      goto LABEL_193;
    }
LABEL_189:
    if (v154 == v48)
    {
      v192 = &__p;
      (*(void (**)(_QWORD *, __int128 *))(*v48 + 24))(v48, &__p);
    }
    else
    {
      v192 = (__int128 *)(*(uint64_t (**)(_QWORD *))(*v154 + 16))(v154);
    }
LABEL_193:
    std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](&__p, v157);
    v167 = v192;
    if (v192 == &__p)
    {
      v168 = 4;
      v167 = &__p;
    }
    else
    {
      if (!v192)
      {
LABEL_198:
        v45 = *(_DWORD *)v187;
        LODWORD(v162) = -1;
        v15 = *(_QWORD *)&v187[4];
LABEL_199:
        v169 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 12 * v45 + 8);
        v171 = *(_DWORD **)(a1 + 152);
        v170 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v171 >= v170)
        {
          v173 = *(_DWORD **)(a1 + 144);
          v174 = 0xCCCCCCCCCCCCCCCDLL * (v171 - v173) + 1;
          if (v174 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v175 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v170 - (_QWORD)v173) >> 2);
          if (2 * v175 > v174)
            v174 = 2 * v175;
          if (v175 >= 0x666666666666666)
            v176 = 0xCCCCCCCCCCCCCCCLL;
          else
            v176 = v174;
          if (v176)
          {
            if (v176 > 0xCCCCCCCCCCCCCCCLL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v177 = (char *)operator new(20 * v176);
          }
          else
          {
            v177 = 0;
          }
          v178 = &v177[4 * (v171 - v173)];
          *(_QWORD *)v178 = v15;
          *((_DWORD *)v178 + 2) = v45;
          *((_DWORD *)v178 + 3) = v169;
          *((_DWORD *)v178 + 4) = v162;
          v172 = v178 + 20;
          if (v171 != v173)
          {
            do
            {
              v179 = *(_OWORD *)(v171 - 5);
              *((_DWORD *)v178 - 1) = *(v171 - 1);
              *(_OWORD *)(v178 - 20) = v179;
              v178 -= 20;
              v171 -= 5;
            }
            while (v171 != v173);
            v171 = *(_DWORD **)(a1 + 144);
          }
          *(_QWORD *)(a1 + 144) = v178;
          *(_QWORD *)(a1 + 152) = v172;
          *(_QWORD *)(a1 + 160) = &v177[20 * v176];
          if (v171)
            operator delete(v171);
        }
        else
        {
          *(_QWORD *)v171 = v15;
          v171[2] = v45;
          v171[3] = v169;
          v172 = v171 + 5;
          v171[4] = v162;
        }
        *(_QWORD *)(a1 + 152) = v172;
        v180 = *(_QWORD *)(a1 + 40) + 12 * v45;
        *(_QWORD *)v180 = v15;
        *(_DWORD *)(v180 + 8) = -858993459 * (((unint64_t)v172 - *(_QWORD *)(a1 + 144)) >> 2) - 1;
        return 1;
      }
      v168 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v167 + 8 * v168))(v167);
    goto LABEL_198;
  }
  v31 = 1 - v15;
  if (v15 < (uint64_t)0x8000000000000003)
    v31 = 0x7FFFFFFFFFFFFFFFLL;
  LODWORD(__p) = v11 ^ 1;
  *(_QWORD *)((char *)&__p + 4) = v31;
  v32 = __p;
  v33 = HIDWORD(v31);
  *(_QWORD *)v186 = __p;
  *(_DWORD *)&v186[8] = HIDWORD(v31);
  v34 = *(_DWORD *)(*(_QWORD *)(a1 + 408) + 4 * v11);
  if (v34 == -1
    || (v35 = *(_QWORD *)(a1 + 936),
        ((*(_QWORD *)(*(_QWORD *)(v35 + 24) + (((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v34 & 0x3F ^ 1u)) & 1) != 0))
  {
    v36 = (char **)operations_research::sat::IntegerTrail::InitializeConflict(a1, *(uint64_t *)v187, SHIDWORD(v15), a4, __src, a6, a7, a8);
    v37 = (void **)v36;
    v38 = *(_DWORD *)(*(_QWORD *)(a1 + 408) + 4 * v14);
    if (v38 != -1)
    {
      v40 = v36[1];
      v39 = (unint64_t)v36[2];
      if ((unint64_t)v40 >= v39)
      {
        v66 = *v36;
        v67 = v40 - *v36;
        v68 = v67 >> 2;
        v69 = (v67 >> 2) + 1;
        if (v69 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v70 = v39 - (_QWORD)v66;
        if (v70 >> 1 > v69)
          v69 = v70 >> 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
          v71 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          if (v71 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v72 = operator new(4 * v71);
        }
        else
        {
          v72 = 0;
        }
        v89 = &v72[4 * v68];
        v90 = &v72[4 * v71];
        *v89 = v38;
        v41 = v89 + 1;
        if (v40 != v66)
        {
          v91 = v40 - v66 - 4;
          if (v91 < 0x2C)
            goto LABEL_235;
          if ((unint64_t)(v40 - &v72[v67]) < 0x20)
            goto LABEL_235;
          v92 = (v91 >> 2) + 1;
          v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
          v94 = &v40[-v93];
          v89 = (_DWORD *)((char *)v89 - v93);
          v95 = &v72[4 * v68 - 16];
          v96 = v40 - 16;
          v97 = v92 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v98 = *(_OWORD *)v96;
            *(v95 - 1) = *((_OWORD *)v96 - 1);
            *v95 = v98;
            v95 -= 2;
            v96 -= 32;
            v97 -= 8;
          }
          while (v97);
          v40 = v94;
          if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_235:
            do
            {
              v99 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--v89 = v99;
            }
            while (v40 != v66);
          }
        }
        *v37 = v89;
        v37[1] = v41;
        v37[2] = v90;
        if (v66)
          operator delete(v66);
      }
      else
      {
        *(_DWORD *)v40 = v38;
        v41 = v40 + 4;
      }
      v37[1] = v41;
      v32 = *(_QWORD *)v186;
    }
    *(_QWORD *)&__p = v32;
    DWORD2(__p) = v33;
    v100 = *(_QWORD *)((char *)&__p + 4);
    v101 = *(_QWORD *)(a1 + 144);
    v102 = *(_QWORD *)(a1 + 40);
    if (*(uint64_t *)((char *)&__p + 4) <= *(_QWORD *)(v101 + 20 * (int)v32))
    {
      v103 = -1;
    }
    else
    {
      v103 = *(_DWORD *)(v102 + 12 * (int)v32 + 8);
      v104 = *(_QWORD *)(a1 + 72);
      v105 = *(_DWORD *)(v104 + 4 * (int)v32);
      if (v105 < v103
        && *(_DWORD *)(v101 + 20 * v105 + 8) == (_DWORD)v32
        && *(_QWORD *)(v101 + 20 * v105) >= *(uint64_t *)((char *)&__p + 4))
      {
        v103 = *(_DWORD *)(v104 + 4 * (int)v32);
      }
      v106 = v103;
      if (v103 >= *(_DWORD *)(a1 + 64))
LABEL_103:
        *(_DWORD *)(v104 + 4 * (int)v32) = v106;
      while (1)
      {
        v107 = *(_QWORD *)(v101 + 20 * v106);
        if (v107 == v100)
          break;
        if (v107 < v100)
          goto LABEL_107;
        v103 = v106;
        v106 = *(_DWORD *)(v101 + 20 * v106 + 12);
        if (v106 >= *(_DWORD *)(a1 + 64))
          goto LABEL_103;
      }
      v103 = v106;
    }
LABEL_107:
    if (v103 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 48) - v102) >> 2)))
    {
      v108 = *(signed int **)(a1 + 552);
      v109 = *(_QWORD *)(a1 + 560);
      if ((unint64_t)v108 >= v109)
      {
        v111 = *(signed int **)(a1 + 544);
        v112 = v108 - v111;
        v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v114 = v109 - (_QWORD)v111;
        if (v114 >> 1 > v113)
          v113 = v114 >> 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        if (v115)
        {
          if (v115 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v116 = operator new(4 * v115);
        }
        else
        {
          v116 = 0;
        }
        v121 = (signed int *)&v116[4 * v112];
        v122 = &v116[4 * v115];
        *v121 = v103;
        v110 = v121 + 1;
        if (v108 != v111)
        {
          v123 = (char *)v108 - (char *)v111 - 4;
          if (v123 < 0x2C)
            goto LABEL_236;
          if ((unint64_t)((char *)v111 - v116) < 0x20)
            goto LABEL_236;
          v124 = (v123 >> 2) + 1;
          v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
          v126 = &v108[v125 / 0xFFFFFFFFFFFFFFFCLL];
          v121 = (signed int *)((char *)v121 - v125);
          v127 = &v116[4 * v112 - 16];
          v128 = v108 - 4;
          v129 = v124 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v130 = *(_OWORD *)v128;
            *(v127 - 1) = *((_OWORD *)v128 - 1);
            *v127 = v130;
            v127 -= 2;
            v128 -= 8;
            v129 -= 8;
          }
          while (v129);
          v108 = v126;
          if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_236:
            do
            {
              v131 = *--v108;
              *--v121 = v131;
            }
            while (v108 != v111);
          }
        }
        *(_QWORD *)(a1 + 544) = v121;
        *(_QWORD *)(a1 + 552) = v110;
        *(_QWORD *)(a1 + 560) = v122;
        if (v111)
          operator delete(v111);
      }
      else
      {
        *v108 = v103;
        v110 = v108 + 1;
      }
      *(_QWORD *)(a1 + 552) = v110;
    }
    operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, v37);
    return 0;
  }
  if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
  {
    operations_research::sat::Trail::EnqueueWithUnitReason(v35, v34);
    return 1;
  }
  if (!*(_QWORD *)(a4 + 24))
  {
    operations_research::sat::IntegerTrail::EnqueueLiteral(a1, v34, __src, a6, (char *)a7, a8);
    goto LABEL_157;
  }
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(a4, *(uint64_t *)v187, SHIDWORD(v15), -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2), a1 + 360, a1 + 384);
  __p = 0uLL;
  v191 = 0;
  v73 = *(int **)(a1 + 384);
  v74 = *(int **)(a1 + 392);
  if (v73 == v74)
  {
    v75 = 0;
    v140 = 0;
    goto LABEL_155;
  }
  v75 = 0;
  do
  {
    while (1)
    {
      v76 = *(_QWORD *)(a1 + 144) + 20 * *v73;
      v77 = *(_DWORD *)(v76 + 8);
      v78 = *(_QWORD *)v76;
      if (v75 >= v191)
        break;
      *(_DWORD *)v75 = v77;
      *(_QWORD *)(v75 + 4) = v78;
      v75 += 12;
      *((_QWORD *)&__p + 1) = v75;
      if (++v73 == v74)
        goto LABEL_147;
    }
    v79 = (char *)__p;
    v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v75[-__p] >> 2);
    v81 = v80 + 1;
    if (v80 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)&v191[-__p] >> 2) > v81)
      v81 = 0x5555555555555556 * ((uint64_t)&v191[-__p] >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v191[-__p] >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v82 = 0x1555555555555555;
    else
      v82 = v81;
    if (v82)
    {
      if (v82 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v83 = (char *)operator new(12 * v82);
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[12 * v80];
    *(_DWORD *)v84 = v77;
    *(_QWORD *)(v84 + 4) = v78;
    if (v75 == v79)
    {
      v88 = v75;
      v75 = v84 + 12;
      *(_QWORD *)&__p = &v83[12 * v80];
      *((_QWORD *)&__p + 1) = v84 + 12;
      v191 = &v83[12 * v82];
      if (v88)
        goto LABEL_78;
    }
    else
    {
      v85 = &v83[12 * v80];
      do
      {
        v86 = *(_QWORD *)(v75 - 12);
        v75 -= 12;
        v87 = *((_DWORD *)v75 + 2);
        *(_QWORD *)(v85 - 12) = v86;
        v85 -= 12;
        *((_DWORD *)v85 + 2) = v87;
      }
      while (v75 != v79);
      v88 = (char *)__p;
      v75 = v84 + 12;
      *(_QWORD *)&__p = v85;
      *((_QWORD *)&__p + 1) = v84 + 12;
      v191 = &v83[12 * v82];
      if (v88)
LABEL_78:
        operator delete(v88);
    }
    *((_QWORD *)&__p + 1) = v75;
    ++v73;
  }
  while (v73 != v74);
LABEL_147:
  v140 = (char *)__p;
LABEL_155:
  operations_research::sat::IntegerTrail::EnqueueLiteral(a1, v34, *(char **)(a1 + 360), (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 2, v140, 0xAAAAAAAAAAAAAAABLL * ((v75 - v140) >> 2));
  if (v140)
    operator delete(v140);
LABEL_157:
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100]((void **)(a1 + 312), (uint64_t *)v186);
  return 1;
}

void sub_22DB65674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  if (a22 == v26)
  {
    (*(void (**)(void))(a19 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a22)
  {
    (*(void (**)(void))(*(_QWORD *)a22 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, char *__src, uint64_t a5, uint64_t *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v8 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v12, __src, a5, a6, a7, a8);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_22DB657E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v12);
    }
    else
    {
      v13 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v13 = 0;
  }
  v8 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v12, 0, 0, 0, 0, -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_10;
  }
  if (v13)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_22DB65944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::function(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    return a1;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    return a1;
  }
}

_QWORD *operations_research::sat::IntegerTrail::EnqueueLiteral(uint64_t a1, int a2, char *__src, uint64_t a4, char *a5, uint64_t a6)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  operations_research::sat::IntegerTrail::EnqueueLiteralInternal(a1, a2, v8, __src, a4, a5, a6);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_22DB65AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerTrail::EnqueueLiteralInternal(uint64_t a1, int a2, _QWORD *a3, char *__src, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  char *__srca;
  uint64_t v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 936);
  if (*(_QWORD *)(a1 + 192) != *(_QWORD *)(a1 + 200))
  {
    v15 = *(int *)(v8 + 12);
    v16 = *(_QWORD *)(a1 + 824);
    v17 = (*(_QWORD *)(a1 + 832) - v16) >> 2;
    if (v17 <= v15)
    {
      v18 = (int)v15 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17)
          *(_QWORD *)(a1 + 832) = v16 + 4 * v18;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 824), v18 - v17);
        v16 = *(_QWORD *)(a1 + 824);
      }
    }
    v20 = (void **)(a1 + 144);
    v21 = (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2;
    v22 = 0xCCCCCCCCCCCCCCCDLL * v21;
    *(_DWORD *)(v16 + 4 * v15) = -858993459 * v21;
    v23 = (_QWORD *)a3[3];
    if (v23)
    {
      v25 = *(_QWORD *)(a1 + 168);
      v24 = *(_QWORD *)(a1 + 176);
      v26 = (v24 - v25) >> 5;
      if (v22 < v26)
      {
        v27 = (_QWORD *)(v25 + 32 * v22);
        goto LABEL_88;
      }
      v35 = v22 + 1;
      v103 = 0;
      if (v35 > v26)
      {
        std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append((void **)(a1 + 168), v35 - v26, (uint64_t)v102);
        v36 = v103;
        if (v103 == v102)
        {
          v37 = 4;
          v36 = v102;
        }
        else
        {
          if (!v103)
            goto LABEL_87;
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_87:
        v23 = (_QWORD *)a3[3];
        v27 = (_QWORD *)(*(_QWORD *)(a1 + 168)
                       - 0x6666666666666660 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
        if (!v23)
        {
          v103 = 0;
          goto LABEL_92;
        }
LABEL_88:
        if (v23 == a3)
        {
          v103 = v102;
          (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v102);
        }
        else
        {
          v103 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
        }
LABEL_92:
        std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](v102, v27);
        v95 = v103;
        if (v103 == v102)
        {
          v96 = 4;
          v95 = v102;
        }
        else
        {
          if (!v103)
            goto LABEL_97;
          v96 = 5;
        }
        (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_97:
        LODWORD(v83) = -1;
        v85 = *(char **)(a1 + 152);
        v84 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v85 < v84)
          goto LABEL_98;
        goto LABEL_67;
      }
      if (v35 >= v26)
        goto LABEL_87;
      v46 = v25 + 32 * v35;
      if (v24 == v46)
      {
LABEL_29:
        *(_QWORD *)(a1 + 176) = v46;
        goto LABEL_87;
      }
      while (1)
      {
        v49 = v24 - 32;
        v47 = *(_QWORD **)(v24 - 8);
        if ((_QWORD *)(v24 - 32) == v47)
        {
          v47 = (_QWORD *)(v24 - 32);
          v48 = 4;
        }
        else
        {
          if (!v47)
            goto LABEL_32;
          v48 = 5;
        }
        (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_32:
        v24 = v49;
        if (v49 == v46)
          goto LABEL_29;
      }
    }
    v99 = a7;
    __srca = a6;
    v28 = *(char **)(a1 + 240);
    v29 = *(char **)(a1 + 248);
    v30 = v29 - v28;
    v31 = *(void **)(a1 + 296);
    v32 = ((unint64_t)v31 - *(_QWORD *)(a1 + 288)) >> 2;
    v33 = *(_QWORD *)(a1 + 256);
    v101 = v29 - v28;
    if ((unint64_t)v29 < v33)
    {
      *(_DWORD *)v29 = v32;
      v34 = (uint64_t)(v29 + 4);
      goto LABEL_46;
    }
    v38 = v30 >> 2;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 62)
      goto LABEL_102;
    v40 = v33 - (_QWORD)v28;
    if (v40 >> 1 > v39)
      v39 = v40 >> 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
      v41 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v98 = *(void **)(a1 + 296);
      if (v41 >> 62)
        goto LABEL_104;
      v42 = operator new(4 * v41);
      v31 = v98;
      v43 = &v42[4 * v38];
      v44 = &v42[4 * v41];
      *v43 = v32;
      v34 = (uint64_t)(v43 + 1);
      v45 = v29 - v28;
      if (v29 == v28)
        goto LABEL_43;
    }
    else
    {
      v42 = 0;
      v43 = (_DWORD *)(4 * v38);
      v44 = 0;
      *(_DWORD *)(4 * v38) = v32;
      v34 = 4 * v38 + 4;
      v45 = v29 - v28;
      if (v29 == v28)
      {
LABEL_43:
        *(_QWORD *)(a1 + 240) = v43;
        *(_QWORD *)(a1 + 248) = v34;
        *(_QWORD *)(a1 + 256) = v44;
        if (v28)
        {
          operator delete(v28);
          v31 = *(void **)(a1 + 296);
        }
        v30 = v101;
LABEL_46:
        *(_QWORD *)(a1 + 248) = v34;
        std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 288), v31, __src, &__src[4 * a5], (4 * a5) >> 2);
        v59 = *(_QWORD *)(a1 + 320);
        v60 = -1431655765 * ((unint64_t)(v59 - *(_QWORD *)(a1 + 312)) >> 2);
        v62 = *(char **)(a1 + 272);
        v61 = *(_QWORD *)(a1 + 280);
        if ((unint64_t)v62 < v61)
        {
          *(_DWORD *)v62 = v60;
          v63 = (uint64_t)(v62 + 4);
          v64 = __srca;
          goto LABEL_66;
        }
        v65 = *(char **)(a1 + 264);
        v66 = (v62 - v65) >> 2;
        v67 = v66 + 1;
        if (!((unint64_t)(v66 + 1) >> 62))
        {
          v68 = v61 - (_QWORD)v65;
          if (v68 >> 1 > v67)
            v67 = v68 >> 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (!v69)
          {
            v70 = 0;
            v71 = (_DWORD *)(4 * v66);
            v72 = 0;
            *(_DWORD *)(4 * v66) = v60;
            v63 = 4 * v66 + 4;
            v73 = v62 - v65;
            if (v62 != v65)
              goto LABEL_57;
            goto LABEL_83;
          }
          if (!(v69 >> 62))
          {
            v70 = operator new(4 * v69);
            v71 = &v70[4 * v66];
            v72 = &v70[4 * v69];
            *v71 = v60;
            v63 = (uint64_t)(v71 + 1);
            v73 = v62 - v65;
            if (v62 != v65)
            {
LABEL_57:
              v74 = v73 - 4;
              v64 = __srca;
              if (v74 < 0x2C)
                goto LABEL_107;
              if ((unint64_t)(v65 - v70) < 0x20)
                goto LABEL_107;
              v75 = (v74 >> 2) + 1;
              v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
              v77 = &v62[-v76];
              v71 = (_DWORD *)((char *)v71 - v76);
              v78 = &v70[4 * v66 - 16];
              v79 = v62 - 16;
              v80 = v75 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v81 = *(_OWORD *)v79;
                *(v78 - 1) = *((_OWORD *)v79 - 1);
                *v78 = v81;
                v78 -= 2;
                v79 -= 32;
                v80 -= 8;
              }
              while (v80);
              v62 = v77;
              if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_107:
                do
                {
                  v82 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--v71 = v82;
                }
                while (v62 != v65);
              }
              *(_QWORD *)(a1 + 264) = v71;
              *(_QWORD *)(a1 + 272) = v63;
              *(_QWORD *)(a1 + 280) = v72;
              if (!v65)
                goto LABEL_65;
LABEL_64:
              operator delete(v65);
              v59 = *(_QWORD *)(a1 + 320);
LABEL_65:
              v30 = v101;
LABEL_66:
              v83 = (unint64_t)v30 >> 2;
              *(_QWORD *)(a1 + 272) = v63;
              std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(a1 + 312, v59, v64, &v64[12 * v99], 0xAAAAAAAAAAAAAAABLL * ((12 * v99) >> 2));
              v85 = *(char **)(a1 + 152);
              v84 = *(_QWORD *)(a1 + 160);
              if ((unint64_t)v85 < v84)
              {
LABEL_98:
                *(_QWORD *)v85 = 0;
                *((_QWORD *)v85 + 1) = -1;
                *((_DWORD *)v85 + 4) = v83;
                v93 = v85 + 20;
LABEL_99:
                *(_QWORD *)(a1 + 152) = v93;
                v8 = *(_QWORD *)(a1 + 936);
                v97 = *(_DWORD *)(a1 + 32);
                *(_DWORD *)(*(_QWORD *)(v8 + 72) + 4 * *(int *)(v8 + 12)) = a2;
                v19 = (*(_DWORD *)(v8 + 8) & 0xFFFFFFE | a2 & 1 | (v97 << 28)) ^ 1;
                goto LABEL_100;
              }
LABEL_67:
              v86 = (char *)*v20;
              v87 = 0xCCCCCCCCCCCCCCCDLL * ((v85 - (_BYTE *)*v20) >> 2);
              v88 = v87 + 1;
              if (v87 + 1 > 0xCCCCCCCCCCCCCCCLL)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v84 - (_QWORD)v86) >> 2);
              if (2 * v89 > v88)
                v88 = 2 * v89;
              if (v89 >= 0x666666666666666)
                v90 = 0xCCCCCCCCCCCCCCCLL;
              else
                v90 = v88;
              if (v90)
              {
                if (v90 > 0xCCCCCCCCCCCCCCCLL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v91 = (char *)operator new(20 * v90);
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[20 * v87];
              *(_QWORD *)v92 = 0;
              *((_QWORD *)v92 + 1) = -1;
              *((_DWORD *)v92 + 4) = v83;
              v93 = v92 + 20;
              if (v85 != v86)
              {
                do
                {
                  v94 = *(_OWORD *)(v85 - 20);
                  *((_DWORD *)v92 - 1) = *((_DWORD *)v85 - 1);
                  *(_OWORD *)(v92 - 20) = v94;
                  v92 -= 20;
                  v85 -= 20;
                }
                while (v85 != v86);
                v85 = (char *)*v20;
              }
              *(_QWORD *)(a1 + 144) = v92;
              *(_QWORD *)(a1 + 152) = v93;
              *(_QWORD *)(a1 + 160) = &v91[20 * v90];
              if (v85)
                operator delete(v85);
              goto LABEL_99;
            }
LABEL_83:
            v64 = __srca;
            *(_QWORD *)(a1 + 264) = v71;
            *(_QWORD *)(a1 + 272) = v63;
            *(_QWORD *)(a1 + 280) = v72;
            if (!v65)
              goto LABEL_65;
            goto LABEL_64;
          }
LABEL_104:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
LABEL_102:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    v50 = v45 - 4;
    if (v50 < 0x2C)
      goto LABEL_108;
    if (v29 - v42 - (v101 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_108;
    v51 = (v50 >> 2) + 1;
    v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    v53 = &v29[-v52];
    v43 = (_DWORD *)((char *)v43 - v52);
    v54 = &v42[4 * v38 - 16];
    v55 = v29 - 16;
    v56 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 8;
    }
    while (v56);
    v29 = v53;
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_108:
      do
      {
        v58 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *--v43 = v58;
      }
      while (v29 != v28);
    }
    goto LABEL_43;
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 72) + 4 * *(int *)(v8 + 12)) = a2;
  v19 = (*(_DWORD *)(v8 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
LABEL_100:
  *(_DWORD *)(v8 + 8) = v19;
  *(_QWORD *)(*(_QWORD *)(v8 + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(*(_QWORD *)(v8 + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(v8 + 12);
}

