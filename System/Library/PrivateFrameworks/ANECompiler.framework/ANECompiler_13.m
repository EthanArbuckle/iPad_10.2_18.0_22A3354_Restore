uint64_t *std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<ZinIrOpLayer const*,double>,std::__tree_node<std::__value_type<ZinIrOpLayer const*,double>,void *> *,long>>>(uint64_t *result, ZinIrOpLayer **a2, ZinIrOpLayer ***a3)
{
  ZinIrOpLayer **v4;
  uint64_t **v5;
  uint64_t *v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer ***v8;
  BOOL v9;

  if (a2 != (ZinIrOpLayer **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_hint_unique_key_args<ZinIrOpLayer const*,std::pair<ZinIrOpLayer const* const,double> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (ZinIrOpLayer ***)v7;
          v7 = *(ZinIrOpLayer **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (ZinIrOpLayer ***)v4[2];
          v9 = *v8 == v4;
          v4 = (ZinIrOpLayer **)v8;
        }
        while (!v9);
      }
      v4 = (ZinIrOpLayer **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_hint_unique_key_args<ZinIrOpLayer const*,std::pair<ZinIrOpLayer const* const,double> const&>(uint64_t **a1, uint64_t *a2, ZinIrOpLayer **a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t std::unordered_map<ZinIrOpLayer const*,BOOL>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_206F43BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SubgraphSplitInfo>,SubgraphSplitInfo const*,SubgraphSplitInfo const*,SubgraphSplitInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)(a4 + v7), (const SubgraphSplitInfo *)(a2 + v7));
      v7 += 456;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206F43C2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 456;
    do
    {
      SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)(v4 + v2));
      v2 -= 456;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<SubgraphSplitInfo>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x823EE08FB823EE09 * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x8FB823EE08FB82)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0x823EE08FB823EE09 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x47DC11F7047DC1)
      v13 = 0x8FB823EE08FB82;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SubgraphSplitInfo>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[456 * v10];
    v18 = &v14[456 * v13];
    SubgraphSplitInfo::SubgraphSplitInfo((uint64_t)v16, a2);
    v17 = v16 + 456;
    std::vector<SubgraphSplitInfo>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<SubgraphSplitInfo>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = SubgraphSplitInfo::SubgraphSplitInfo(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 456;
    a1[1] = v7 + 456;
  }
  a1[1] = v9;
  return result;
}

void sub_206F43D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SubgraphSplitInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<SubgraphSplitInfo>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)(v3 - 456));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::deque<ZinConcatLayer const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinConcatLayer const*>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinConcatLayer const*>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206F44130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::__move_assign(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (v4)
  {
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(uint64_t **a1, ZinIrOpLayer **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_BYTE *)v13 + 24) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_206F44490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL CheckBroadcastSupport<ProducerConsumerChain>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v3 = *(_QWORD *)(a2 + 8);
  result = 1;
  if (v3 == *(_QWORD *)(a2 + 16) || *(_QWORD *)(*(_QWORD *)v3 + 8) != a1[1])
  {
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 656))(a1))
    {
      v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 696))(a1) + 64);
      if (ZinIrBroadcastInfo::HasDimension(v4, 4)
        || ZinIrBroadcastInfo::HasDimension(v4, 3)
        || ZinIrBroadcastInfo::HasDimension(v4, 1))
      {
        return 0;
      }
    }
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 664))(a1))
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 832))(a1);
      if (ZinIrBroadcastInfo::HasDimension(v5, 4)
        || ZinIrBroadcastInfo::HasDimension(v5, 3)
        || ZinIrBroadcastInfo::HasDimension(v5, 1))
      {
        return 0;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,LayerTilingHelper>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0xD8uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  std::pair<ZinIrOpLayer * const,LayerTilingHelper>::pair[abi:ne180100]<ZinIrOpLayer *,LayerTilingHelper,0>((uint64_t)(v15 + 2), a3);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v12 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v12;
}

void sub_206F4480C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::pair<ZinIrOpLayer * const,LayerTilingHelper>::pair[abi:ne180100]<ZinIrOpLayer *,LayerTilingHelper,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = *(_OWORD *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v3;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  result = *(__n128 *)(a2 + 176);
  *(__n128 *)(a1 + 176) = result;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<ZinIrOpLayer * const,LayerTilingHelper>,0>(v2 + 2);
    operator delete(v2);
  }
}

uint64_t std::unordered_set<SpatialDimension>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_206F4497C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<SpatialDimension,std::hash<SpatialDimension>,std::equal_to<SpatialDimension>,std::allocator<SpatialDimension>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<SpatialDimension,void *> *>>(_QWORD *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != (unsigned int *)a3)
    {
      v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = *(unsigned int **)a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != (unsigned int *)a3)
    {
      std::__hash_table<SpatialDimension,std::hash<SpatialDimension>,std::equal_to<SpatialDimension>,std::allocator<SpatialDimension>>::__emplace_multi<SpatialDimension const&>(a1, a2 + 4);
      a2 = *(unsigned int **)a2;
    }
  }
}

void sub_206F44A64(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_206F44A84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *std::__hash_table<SpatialDimension,std::hash<SpatialDimension>,std::equal_to<SpatialDimension>,std::allocator<SpatialDimension>>::__emplace_multi<SpatialDimension const&>(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[4] = v5;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_206F44AF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](uint64_t a1, ZinIrOpLayer **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_hint_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_206F44B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001450;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  **(_QWORD **)(a1 + 8) += *(_QWORD *)(ZinIrTarget::GetHal(*a2) + 16);
  return 0;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0014A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0014A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t Hal;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrOpLayerGraph *v12;
  ZinIrHalH13g *v13;
  const Subgraph *v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrOpLayerGraph *v17;
  const Subgraph *v18;
  const Subgraph *i;
  Subgraph *v20;
  Subgraph *v21;
  const SubgraphSplitInfo *v22;
  const SubgraphSplitInfo *j;
  ZinIrOpLayerGraph *v24;
  const SubgraphSplitInfo *v25;
  Subgraph *v26;
  uint64_t **v27;
  uint64_t *v28;
  int64x2_t v30;
  uint64_t v31;
  __int128 v32;
  Subgraph *v33;
  uint64_t v34[48];
  void *v35;
  char v36;
  char v37[8];
  _QWORD *v38;
  _QWORD *v39[3];
  uint64_t v40[3];
  _QWORD *v41[3];
  uint64_t v42;
  _QWORD *v43[4];
  void *__p;
  char v45;
  Subgraph *v46[2];
  Subgraph *v47;
  const SubgraphSplitInfo **v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[2];
  uint64_t v53[3];
  _QWORD *v54;
  _QWORD v55[2];
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD v59[2];
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  int v68;
  int64x2_t v69;
  int64x2_t v70;
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD v73[3];
  _QWORD v74[3];
  _QWORD v75[3];
  _QWORD v76[2];
  __int128 v77;
  __int128 v78;
  int v79;
  int64x2_t v80;
  __int128 v81;
  const SubgraphSplitInfo *v82;
  const SubgraphSplitInfo *v83;
  uint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  ZinIrTarget *v90;
  uint64_t *v91[3];

  v90 = *a2;
  v5 = a1 + 8;
  v3 = *(uint64_t ***)(a1 + 8);
  v4 = *(_QWORD *)(v5 + 8);
  v49 = 0;
  v48 = 0;
  v50 = 0;
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,ZinIrBasicBlock *&,std::vector<std::pair<Subgraph,SplitInfo>>>(v3, (unint64_t *)&v90, &v90, (uint64_t)&v48);
  *(_QWORD *)&v32 = &v48;
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v6 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD))(v4 + 176);
  Hal = ZinIrTarget::GetHal(v90);
  v8 = (**v6)(v6, Hal, &v87, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(&v85, "[Initial Subgraphs]");
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v4 + 200));
  if (v86 < 0)
    operator delete(v85);
  if (v8 == 3)
  {
    v9 = 3;
  }
  else
  {
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v81 = 0u;
    memset(&v80, 0, 32);
    v10 = v87;
    v31 = v88;
    if (v87 != v88)
    {
      v30 = vdupq_n_s64(1uLL);
      do
      {
        v49 = 0;
        v50 = 0;
        v52[0] = 0;
        v52[1] = 0;
        v48 = (const SubgraphSplitInfo **)&v49;
        v51 = v52;
        v53[0] = (uint64_t)v53;
        v53[1] = (uint64_t)v53;
        v55[0] = 0;
        v55[1] = 0;
        v53[2] = 0;
        v54 = v55;
        v57 = 0;
        v56 = 0uLL;
        v59[0] = 0;
        v59[1] = 0;
        v58 = v59;
        v60 = 0;
        v64 = 0;
        v62 = 0u;
        v63 = 0u;
        v61 = 0u;
        v66 = 0u;
        v67 = 0u;
        v65 = 1065353216;
        v68 = 1065353216;
        v69 = v30;
        v70 = v30;
        v72[0] = 0;
        v72[1] = 0;
        v73[0] = 0;
        v73[1] = 0;
        v71 = v72;
        v72[2] = v73;
        v74[0] = 0;
        v74[1] = 0;
        v75[0] = 0;
        v75[1] = 0;
        v73[2] = v74;
        v74[2] = v75;
        v76[0] = 0;
        v76[1] = 0;
        v75[2] = v76;
        v77 = 0u;
        v78 = 0u;
        v79 = 1065353216;
        std::__tree<ZinSpaceRange>::__move_assign((uint64_t)&v48, (_QWORD *)v10);
        std::__tree<ZinSpaceRange>::__move_assign((uint64_t)&v51, (_QWORD *)(v10 + 24));
        std::list<ZinIrOpLayer *>::__move_assign(v53, (_QWORD *)(v10 + 48));
        std::__tree<ZinSpaceRange>::__move_assign((uint64_t)&v54, (_QWORD *)(v10 + 72));
        std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v56);
        v56 = *(_OWORD *)(v10 + 96);
        v57 = *(_QWORD *)(v10 + 112);
        *(_QWORD *)(v10 + 96) = 0;
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)(v10 + 112) = 0;
        v11 = v10 + 120;
        std::__tree<ZinSpaceRange>::__move_assign((uint64_t)&v58, (_QWORD *)(v10 + 120));
        v60 = *(_BYTE *)(v10 + 144);
        v12 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v90);
        if (ZinMirSpatialSplitter::DetermineSubgraphSplitInfo((ZinMirSpatialSplitter *)v4, v12, (SubgraphSplitInfo *)&v48))
        {
          SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&v48);
          v9 = 3;
          goto LABEL_35;
        }
        std::deque<SubgraphSplitInfo>::push_back(&v80, (SubgraphSplitInfo *)&v48);
        SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&v48);
        v10 += 152;
      }
      while (v11 + 32 != v31);
      v13 = (ZinIrHalH13g *)(v4 + 200);
      while (*((_QWORD *)&v81 + 1))
      {
        v14 = (const Subgraph *)(*(_QWORD *)(v80.i64[1] + (((unint64_t)v81 >> 1) & 0x7FFFFFFFFFFFFFF8))
                               + 456 * (v81 & 0xF));
        v49 = 0;
        v48 = 0;
        v50 = 0;
        v32 = 0uLL;
        v33 = 0;
        PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster((_QWORD *)v14 + 9);
        v15 = *(_QWORD *)(v4 + 176);
        v16 = ZinIrTarget::GetHal(v90);
        v46[1] = 0;
        v47 = 0;
        v46[0] = (Subgraph *)&v46[1];
        (*(void (**)(uint64_t, uint64_t, const Subgraph *, Subgraph **, const SubgraphSplitInfo ***))(*(_QWORD *)v15 + 8))(v15, v16, v14, v46, &v48);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v46, (_QWORD *)v46[1]);
        v17 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v90);
        ZinMirSpatialSplitter::ConstructSplitInfoOfRefinedClusters((ZinMirSpatialSplitter *)v4, v17, (const Subgraph **)&v48, (uint64_t *)v46);
        std::vector<SubgraphSplitInfo>::__vdeallocate((void **)&v32);
        v32 = *(_OWORD *)v46;
        v33 = v47;
        v47 = 0;
        v46[1] = 0;
        v46[0] = 0;
        v91[0] = (uint64_t *)v46;
        std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
        std::string::basic_string[abi:ne180100]<0>(&__p, "[Visited Subgraph]");
        Subgraph::Subgraph((Subgraph *)v37, v14);
        ZinIrHalH13g::~ZinIrHalH13g(v13);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v43, v43[1]);
        v46[0] = (Subgraph *)&v42;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v41, v41[1]);
        std::__list_imp<ZinIrSection *>::clear(v40);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v39, v39[1]);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v37, v38);
        if (v45 < 0)
          operator delete(__p);
        if (*(_BYTE *)(v4 + 29)
          || ZinMirSpatialSplitter::IsCurrentGraphMinLatency(v4, (uint64_t)v14, &v32))
        {
          std::vector<SubgraphSplitInfo>::push_back[abi:ne180100]((uint64_t *)&v82, (uint64_t)v14);
        }
        else
        {
          v46[1] = 0;
          v46[0] = 0;
          v47 = 0;
          v18 = (const Subgraph *)*((_QWORD *)&v32 + 1);
          for (i = (const Subgraph *)v32; i != v18; i = (const Subgraph *)((char *)i + 456))
          {
            v20 = v46[1];
            if (v46[1] >= v47)
            {
              v21 = (Subgraph *)std::vector<Subgraph>::__push_back_slow_path<Subgraph const&>((uint64_t *)v46, i);
            }
            else
            {
              Subgraph::Subgraph(v46[1], i);
              v21 = (Subgraph *)((char *)v20 + 152);
            }
            v46[1] = v21;
            std::deque<SubgraphSplitInfo>::push_back(&v80, (uint64_t)i);
          }
          std::string::basic_string[abi:ne180100]<0>(&v35, "[Refined Subgraphs]");
          v13 = (ZinIrHalH13g *)(v4 + 200);
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v4 + 200));
          if (v36 < 0)
            operator delete(v35);
          v91[0] = (uint64_t *)v46;
          std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
        }
        std::deque<SubgraphSplitInfo>::pop_front(&v80);
        v46[0] = (Subgraph *)&v32;
        std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
        *(_QWORD *)&v32 = &v48;
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      }
    }
    v22 = v82;
    for (j = v83; v22 != j; v22 = (const SubgraphSplitInfo *)((char *)v22 + 456))
    {
      SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)&v48, v22);
      v24 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v90);
      ZinMirSpatialSplitter::RefineSplitInfoByKernelOverhead((ZinMirSpatialSplitter *)v4, v24, (const SubgraphSplitInfo *)&v48, (char **)v46);
      v25 = v46[0];
      v26 = v46[1];
      while (v25 != v26)
      {
        SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)&v32, v25);
        PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(v34);
        if (ZinMirSpatialSplitter::IsWorthCompileTimeIncrease(v4, &v32, **(_QWORD **)(a1 + 24)))
        {
          v27 = *(uint64_t ***)(a1 + 8);
          v91[0] = (uint64_t *)&v90;
          v28 = std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::less<ZinIrOpLayer const*>,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(v27, (unint64_t *)&v90, (uint64_t)&std::piecewise_construct, v91);
          std::vector<SubgraphSplitInfo>::push_back[abi:ne180100](v28 + 5, (uint64_t)&v32);
        }
        SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&v32);
        v25 = (const SubgraphSplitInfo *)((char *)v25 + 456);
      }
      *(_QWORD *)&v32 = v46;
      std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&v48);
    }
    v9 = 0;
LABEL_35:
    std::deque<SubgraphSplitInfo>::~deque[abi:ne180100](&v80);
    v48 = &v82;
    std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  }
  v48 = (const SubgraphSplitInfo **)&v87;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  return v9;
}

void sub_206F453D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  *(_QWORD *)(v27 - 104) = &STACK[0x320];
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 104));
  STACK[0x320] = (unint64_t)&a27;
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  a27 = (uint64_t)&STACK[0x338];
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  std::deque<SubgraphSplitInfo>::~deque[abi:ne180100]((_QWORD *)(v27 - 240));
  STACK[0x338] = v27 - 192;
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x338]);
  STACK[0x338] = v27 - 144;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x338]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::deque<SubgraphSplitInfo>::push_back(_QWORD *a1, SubgraphSplitInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  SubgraphSplitInfo *v8;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SubgraphSplitInfo>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (SubgraphSplitInfo *)(*(_QWORD *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 456 * (v7 & 0xF));
  }
  SubgraphSplitInfo::SubgraphSplitInfo(v8, a2);
  ++a1[5];
}

void std::deque<SubgraphSplitInfo>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1C80uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1C80uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1C80uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206F45904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<SubgraphSplitInfo>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SubgraphSplitInfo>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 456 * (v7 & 0xF);
  }
  result = SubgraphSplitInfo::SubgraphSplitInfo(v8, a2);
  ++a1[5];
  return result;
}

uint64_t std::deque<SubgraphSplitInfo>::pop_front(int64x2_t *a1)
{
  SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)(*(_QWORD *)(a1->i64[1]
                                                                        + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))
                                                            + 456 * (a1[2].i64[0] & 0xF)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_207A8C990);
  return std::deque<SubgraphSplitInfo>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<SubgraphSplitInfo>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x10)
    a2 = 1;
  if (v2 < 0x20)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<SubgraphSplitInfo>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  SubgraphSplitInfo *v7;
  uint64_t v8;
  uint64_t v9;
  SubgraphSplitInfo *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (SubgraphSplitInfo *)((char *)*v6 + 456 * (v5 & 0xF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 456 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (SubgraphSplitInfo *)v8)
    {
      do
      {
        SubgraphSplitInfo::~SubgraphSplitInfo(v7);
        v7 = (SubgraphSplitInfo *)(v9 + 456);
        if (v7 - (SubgraphSplitInfo *)*v6 == 7296)
        {
          v10 = (SubgraphSplitInfo *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (SubgraphSplitInfo *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 8;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 16;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C001500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001500;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  ZinIrOpLayer ***v7;
  uint64_t v8;
  _QWORD **v10;
  _QWORD *v11[2];
  ZinIrTarget *v12;

  v12 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v12);
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    v7 = (ZinIrOpLayer ***)(v5 + 80);
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t *)&v10, *(ZinIrOpLayer ***)(v5 + 72), v7);
      v5 += 456;
      v7 += 57;
    }
    while (v5 != v6);
  }
  v8 = ZinMirBatchOrChannelSplitter::AnalysisPerBasicBlock(*(ZinMirGraphSplitterBase **)(v3 + 192), v12, *(unsigned int (****)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(v3 + 184), *(uint64_t ***)(a1 + 24), (uint64_t)&v10, 1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v10, v11[0]);
  return v8;
}

void sub_206F45CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_2>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24BFF4DD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24BFF4DD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  ZinIrOpLayerGraph *Hal;
  const SplitInfo *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[8];
  _QWORD *v16;
  _QWORD *v17[3];
  _QWORD v18[3];
  _QWORD *v19[3];
  uint64_t v20;
  _QWORD *v21[4];
  void *__p;
  char v23;
  void **v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrTarget *v28;
  void **v29;

  v28 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v28);
  v5 = *v4;
  if (v4[1] != *v4)
  {
    v6 = v4;
    v7 = 0;
    v8 = 152;
    do
    {
      ZinMirSpatialSplitter::AdjustTiledRegionsForConcats((ZinMirSpatialSplitter *)v3, (const Subgraph *)(v5 + v8 - 152), (SplitInfo *)(v5 + v8));
      v9 = **(uint64_t ***)(a1 + 24);
      if (v9)
      {
        std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100]<std::list<ZinIrOpLayer *>&,SplitInfo&,0>((uint64_t)v24, *v6 + v8 - 104, *v6 + v8);
        std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::push_back[abi:ne180100](v9, (uint64_t)v24);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v27);
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v26);
        v29 = (void **)&v25;
        std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v29);
        std::__list_imp<ZinIrSection *>::clear(v24);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "[Finalized Subgraph]");
      Subgraph::Subgraph((Subgraph *)v15, (const Subgraph *)(*v6 + v8 - 152));
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v3 + 200));
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v21, v21[1]);
      v24[0] = (void **)&v20;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v24);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v19, v19[1]);
      std::__list_imp<ZinIrSection *>::clear(v18);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v17, v17[1]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v15, v16);
      if (v23 < 0)
        operator delete(__p);
      Hal = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v28);
      v11 = (const SplitInfo *)(*v6 + v8);
      v12 = *(_QWORD **)(a1 + 32);
      v13 = (*v12)++;
      ZinMirGraphSplitterBase::SplitSubgraph((ZinMirGraphSplitterBase *)v3, Hal, (const SplitInfo *)((char *)v11 - 152), v11, (unsigned __int16)v13, **(_BYTE **)(a1 + 40));
      ++v7;
      v5 = *v6;
      v8 += 456;
    }
    while (v7 < 0x823EE08FB823EE09 * ((v6[1] - *v6) >> 3));
  }
  return 0;
}

void sub_206F45FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40)
{
  uint64_t v40;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a11);
  *(_QWORD *)(v40 - 96) = a12;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 96));
  std::__list_imp<ZinIrSection *>::clear(&a40);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_3>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x186186186186186)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0xC30C30C30C30C3)
      v13 = 0x186186186186186;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[168 * v10];
    v18 = &v14[168 * v13];
    std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 168;
    std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 168;
    a1[1] = v7 + 168;
  }
  a1[1] = v9;
  return result;
}

void sub_206F461F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  std::list<ZinIrOpLayer *>::splice(a1, (uint64_t *)a1, (_QWORD *)a2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 88, (uint64_t *)(a2 + 88));
  v4 = *(_OWORD *)(a2 + 128);
  v5 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v4;
  *(_OWORD *)(a1 + 144) = v5;
  return a1;
}

uint64_t std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 168;
    result = std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100](result - 168, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    std::__destroy_at[abi:ne180100]<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>,0>((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100]<std::list<ZinIrOpLayer *>&,SplitInfo&,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;

  v5 = std::list<ZinIrOpLayer *>::list((_QWORD *)a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v5 + 3, *(uint64_t **)a3, *(uint64_t **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map(a1 + 48, a3 + 24);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set(a1 + 88, a3 + 64);
  v6 = *(_OWORD *)(a3 + 104);
  v7 = *(_OWORD *)(a3 + 120);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  return a1;
}

void sub_206F463EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(v3);
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__list_imp<ZinIrSection *>::clear(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24BFF4E28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF4E28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  return ZinMirBatchOrChannelSplitter::UpdatePerBasicBlock(*(ZinMirGraphSplitterBase **)(*(_QWORD *)(a1 + 8) + 192), *a2, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24));
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4,std::allocator<ZinMirSpatialSplitter::TileWithGlobalRefinement(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_4>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C001608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001608;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (***v5)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t Hal;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  ZinIrOpLayerGraph *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  ZinIrHalH13g *v31;
  int64x2_t v33;
  void **v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37[3];
  _QWORD v38[3];
  _QWORD *v39[2];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[8];
  _QWORD *v47;
  _QWORD *v48[3];
  _QWORD v49[3];
  _QWORD *v50[3];
  uint64_t v51;
  _QWORD *v52[4];
  void *v53;
  char v54;
  void *v55;
  char v56;
  _BYTE v57[8];
  _QWORD *v58;
  _QWORD *v59[3];
  _QWORD v60[3];
  _QWORD *v61[3];
  uint64_t v62;
  _QWORD *v63[4];
  void *__p;
  char v65;
  _QWORD **v66;
  _QWORD *v67[2];
  void ***v68;
  _QWORD *v69[2];
  _QWORD **v70;
  _QWORD *v71[2];
  _QWORD **v72;
  _QWORD *v73[2];
  _QWORD **v74;
  _QWORD *v75[2];
  _QWORD **v76;
  _QWORD *v77[2];
  _BYTE v78[32];
  int v79;
  _OWORD v80[3];
  uint64_t v81;
  int v82;
  _BYTE v83[32];
  int v84;
  int64x2_t v85;
  int64x2_t v86;
  _BYTE v87[8];
  _QWORD *v88;
  _QWORD *v89[3];
  _QWORD v90[3];
  unint64_t v91[3];
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94[3];
  char v95;
  void *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  ZinIrTarget *v101;
  ZinIrTarget **v102;
  _DWORD *v103[3];

  v101 = *a2;
  v4 = a1 + 8;
  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(_QWORD *)(v4 + 8);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,ZinIrBasicBlock *&,std::vector<std::pair<Subgraph,SplitInfo>>>(v2, (unint64_t *)&v101, &v101, (uint64_t)&v34);
  v68 = &v34;
  std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v5 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD))(v3 + 176);
  Hal = ZinIrTarget::GetHal(v101);
  v7 = (**v5)(v5, Hal, &v98, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(&v96, "[Initial Subgraphs]");
  v31 = (ZinIrHalH13g *)(v3 + 200);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v3 + 200));
  if (v97 < 0)
    operator delete(v96);
  v8 = 3;
  if (v7 != 3)
  {
    v9 = 0;
    v33 = vdupq_n_s64(1uLL);
    v10 = &std::piecewise_construct;
    while (0x86BCA1AF286BCA1BLL * ((v99 - v98) >> 3) > (unsigned __int16)v9)
    {
      v11 = v9;
      Subgraph::Subgraph((Subgraph *)v87, (const Subgraph *)(v98 + 152 * (unsigned __int16)v9));
      v81 = 0;
      memset(v80, 0, sizeof(v80));
      memset(v83, 0, sizeof(v83));
      v82 = 1065353216;
      v84 = 1065353216;
      v85 = v33;
      v86 = v33;
      v69[0] = 0;
      v69[1] = 0;
      v71[0] = 0;
      v71[1] = 0;
      v68 = (void ***)v69;
      v70 = v71;
      v73[0] = 0;
      v73[1] = 0;
      v75[0] = 0;
      v75[1] = 0;
      v72 = v73;
      v74 = v75;
      v77[0] = 0;
      v77[1] = 0;
      v76 = v77;
      memset(v78, 0, sizeof(v78));
      v79 = 1065353216;
      LODWORD(v34) = 3;
      v103[0] = &v34;
      v12 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v93 - 24), (int *)&v34, (uint64_t)v10, v103)[5];
      LODWORD(v102) = 4;
      v103[0] = &v102;
      v13 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v93 - 24), (int *)&v102, (uint64_t)v10, v103)[5];
      v85.i64[0] = (uint64_t)v12;
      v85.i64[1] = (uint64_t)v13;
      LODWORD(v34) = 0;
      v103[0] = &v34;
      v86.i64[0] = (uint64_t)std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v93 - 24), (int *)&v34, (uint64_t)v10, v103)[5];
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize((uint64_t *)v80, v85.i64[0] * v86.i64[0] * v85.i64[1]);
      SplitInfo::ReserveBranch((uint64_t **)v80, v91[2]);
      v14 = v10;
      SplitInfo::ReserveTiledLayerTensorRegions((uint64_t)v80, v91, v85.i64[1] * v85.i64[0] * v86.i64[0]);
      v67[0] = 0;
      v67[1] = 0;
      v66 = v67;
      v15 = PressureBasedSubgraphIdentification::EstimateSizeOfKernelReads((uint64_t)v87, (uint64_t)&v66, **(_QWORD **)(v3 + 16), 1);
      v16 = *(_QWORD *)(**(_QWORD **)(v3 + 16) + 480);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v66, v67[0]);
      if (v15 > v16)
        v95 = 1;
      v17 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v101);
      v10 = v14;
      v18 = ZinMirGraphSplitterBase::TileSubgraph((ZinMirGraphSplitterBase *)v3, v17, (Subgraph *)v87, (SplitInfo *)v80, (LatencyInfo *)&v68, 1);
      if (!v18)
      {
        v19 = **(uint64_t ***)(a1 + 24);
        if (v19)
        {
          std::pair<std::list<ZinIrOpLayer *>,SplitInfo>::pair[abi:ne180100]<std::list<ZinIrOpLayer *>&,SplitInfo&,0>((uint64_t)&v34, (uint64_t)v90, (uint64_t)v80);
          std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::push_back[abi:ne180100](v19, (uint64_t)&v34);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v40);
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v38);
          v103[0] = v37;
          std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
          std::__list_imp<ZinIrSection *>::clear(&v34);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "[Visited Subgraph]");
        v20 = (uint64_t)v14;
        Subgraph::Subgraph((Subgraph *)v57, (const Subgraph *)v87);
        ZinIrHalH13g::~ZinIrHalH13g(v31);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v63, v63[1]);
        v34 = (void **)&v62;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v34);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v61, v61[1]);
        std::__list_imp<ZinIrSection *>::clear(v60);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v59, v59[1]);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v57, v58);
        if (v65 < 0)
          operator delete(__p);
        if ((*(unsigned int (**)(_QWORD, _BYTE *, _OWORD *))(**(_QWORD **)(v3 + 176) + 16))(*(_QWORD *)(v3 + 176), v87, v80))
        {
          v85 = vdupq_n_s64(1uLL);
          v86.i64[0] = 1;
          v21 = v98;
          v22 = v99;
          v23 = *(_QWORD *)(v3 + 176);
          v24 = ZinIrTarget::GetHal(v101);
          v35 = 0;
          v36 = 0;
          v34 = (void **)&v35;
          (*(void (**)(uint64_t, uint64_t, _BYTE *, void ***, uint64_t *))(*(_QWORD *)v23 + 8))(v23, v24, v87, &v34, &v98);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35);
          v34 = 0;
          v35 = 0;
          v36 = 0;
          std::vector<Subgraph>::__init_with_size[abi:ne180100]<std::__wrap_iter<Subgraph const*>,std::__wrap_iter<Subgraph const*>>(&v34, v98 + 8 * ((v22 - v21) >> 3), v99, 0x86BCA1AF286BCA1BLL * ((v99 - v98 - (v22 - v21)) >> 3));
          std::string::basic_string[abi:ne180100]<0>(&v55, "[Refined Subgraphs]");
          v20 = (uint64_t)v14;
          ZinIrHalH13g::~ZinIrHalH13g(v31);
          if (v56 < 0)
            operator delete(v55);
          v103[0] = &v34;
          std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v53, "[Finalized Subgraph]");
          Subgraph::Subgraph((Subgraph *)v46, (const Subgraph *)v87);
          ZinIrHalH13g::~ZinIrHalH13g(v31);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v52, v52[1]);
          v34 = (void **)&v51;
          std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v34);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v50, v50[1]);
          std::__list_imp<ZinIrSection *>::clear(v49);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v48, v48[1]);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v46, v47);
          if (v54 < 0)
            operator delete(v53);
        }
        std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]<Subgraph,SplitInfo,0>((uint64_t)&v34, (uint64_t)v87, (uint64_t)v80);
        v25 = *(uint64_t ***)(a1 + 8);
        v102 = &v101;
        v26 = std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>,std::less<ZinIrOpLayer const*>,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::unordered_map<ZinIrDimension,unsigned long>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(v25, (unint64_t *)&v101, v20, (uint64_t **)&v102);
        v27 = v26;
        v28 = v26[6];
        if (v28 >= v26[7])
        {
          v29 = std::vector<std::pair<Subgraph,SplitInfo>>::__push_back_slow_path<std::pair<Subgraph,SplitInfo> const&>(v26 + 5, (uint64_t)&v34);
        }
        else
        {
          std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](v26[6], (uint64_t)&v34);
          v29 = v28 + 296;
          v27[6] = v28 + 296;
        }
        v27[6] = v29;
        v11 = (v11 + 1);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v45);
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v44);
        v103[0] = &v43;
        std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v42, v42[1]);
        v103[0] = &v41;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v39, v39[1]);
        std::__list_imp<ZinIrSection *>::clear(v38);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v37, v37[1]);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35);
        v10 = v14;
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v78);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v76, v77[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v74, v75[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v72, v73[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v70, v71[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v68, v69[0]);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v83);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v80[1] + 8);
      v34 = (void **)v80;
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v34);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v94, v94[1]);
      v34 = (void **)&v92;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v34);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v91, (_QWORD *)v91[1]);
      std::__list_imp<ZinIrSection *>::clear(v90);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v89, v89[1]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v87, v88);
      v9 = v11;
      if (v18)
      {
        v8 = 3;
        goto LABEL_26;
      }
    }
    v8 = 0;
  }
LABEL_26:
  v34 = (void **)&v98;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v34);
  return v8;
}

void sub_206F46DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 153) < 0)
    operator delete(*(void **)(v50 - 176));
  a50 = v50 - 152;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

_QWORD *std::vector<Subgraph>::__init_with_size[abi:ne180100]<std::__wrap_iter<Subgraph const*>,std::__wrap_iter<Subgraph const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Subgraph>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph const*,Subgraph const*,Subgraph*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206F47180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<Subgraph,SplitInfo>>::__push_back_slow_path<std::pair<Subgraph,SplitInfo> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xDD67C8A60DD67CLL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6EB3E45306EB3ELL)
    v9 = 0xDD67C8A60DD67CLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[296 * v4];
  v16 = &v10[296 * v9];
  std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 296;
  std::vector<std::pair<Subgraph,SplitInfo>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F472A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_206F4734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Subgraph *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(v3);
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  Subgraph::~Subgraph(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C001660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001660;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinMirSpatialSplitter *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const SplitInfo *v9;
  const Subgraph *v10;
  ZinIrOpLayerGraph *Hal;
  _QWORD *v12;
  ZinIrTarget *v14;

  v14 = *a2;
  v3 = *(ZinMirSpatialSplitter **)(a1 + 16);
  v4 = std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v14);
  if (v4[1] != *v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v14);
      v8 = (_QWORD *)(*std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v14) + v5);
      if (v8[33] * v8[32] * v8[34] >= 2uLL)
      {
        v9 = (const SplitInfo *)(v8 + 19);
        v10 = (const Subgraph *)(v7 + v5);
        ZinMirSpatialSplitter::AdjustTiledRegionsForConcats(v3, v10, (SplitInfo *)(v8 + 19));
        Hal = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v14);
        ZinMirGraphSplitterBase::SplitSubgraph(v3, Hal, v10, v9, (unsigned __int16)v6, **(_BYTE **)(a1 + 24));
      }
      ++v6;
      v12 = std::map<ZinIrTensor const*,SpatialAmount>::at(*(_QWORD *)(a1 + 8), (unint64_t *)&v14);
      v5 += 296;
    }
    while (v6 < 0x14C1BACF914C1BADLL * ((uint64_t)(v12[1] - *v12) >> 3));
  }
  return 0;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1,std::allocator<ZinMirSpatialSplitter::Tile(std::shared_ptr<std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>>,std::set<ZinANELayer *> const&,BOOL)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0xD8uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_206F47818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001558;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  **(_QWORD **)(a1 + 8) += *(_QWORD *)(ZinIrTarget::GetHal(*a2) + 16);
  return 0;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_0,std::allocator<ZinMirSpatialSplitter::Run(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0015B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0015B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinIrTarget *v3;
  ZinIrOpLayer **v4;
  _QWORD *Hal;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  ZinIrOpLayerGraph *v10;
  uint64_t v11;
  uint64_t **v12;
  _BYTE v14[240];
  char v15;
  ZinIrOpLayer *v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v3 = *a2;
  v4 = *(ZinIrOpLayer ***)(a1 + 8);
  v18 = (uint64_t)&v18;
  v19 = &v18;
  v20 = 0;
  Hal = (_QWORD *)ZinIrTarget::GetHal(v3);
  if ((ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSortImpl<std::list<ZinIrOpLayer *>>(Hal, &v18) & 1) == 0)ZinAssertImpl("Couldn't do Topological Sort");
  v17 = 0;
  while (1)
  {
    do
    {
      v6 = v20;
      if (!v20
        || (v7 = v19,
            v16 = (ZinIrOpLayer *)v19[2],
            v8 = (_QWORD *)*v19,
            v8[1] = v19[1],
            *(_QWORD *)v7[1] = v8,
            v20 = v6 - 1,
            operator delete(v7),
            *(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0)+ 164)))
      {
        v11 = 0;
        goto LABEL_13;
      }
      v9 = ZinIrTarget::GetHal(v3);
    }
    while (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v9, (uint64_t *)&v16));
    v14[0] = 0;
    v15 = 0;
    v10 = (ZinIrOpLayerGraph *)ZinIrTarget::GetHal(v3);
    v11 = ZinMirSpatialSplitter::DeterminePlanStartingAt((uint64_t)v4, v10, **(_DWORD **)(a1 + 16), v16, (uint64_t)v14);
    if ((_DWORD)v11)
      break;
    if (v15)
    {
      v12 = (uint64_t **)ZinIrTarget::GetHal(v3);
      if (!v15)
        std::__throw_bad_optional_access[abi:ne180100]();
      v11 = ZinMirSpatialSplitter::Split(v4, v12, (const ZinMirSpatialSplitter::SplitPlan *)v14, (LayerTilingHelper *)&v17, 0);
      if ((_DWORD)v11)
        break;
    }
    std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v14);
  }
  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v14);
LABEL_13:
  std::__list_imp<ZinIrSection *>::clear(&v18);
  return v11;
}

void sub_206F47AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<ZinMirSpatialSplitter::Run(void)::$_1,std::allocator<ZinMirSpatialSplitter::Run(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void LayerTilingHelper::CreateLayer(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "unsupported opcode: %d", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void LayerTilingHelper::ComputeInputRequirement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "expected more input", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void SplitInfo::Construct(int a1, int a2, char *a3, uint8_t *buf)
{
  char *v5;

  if (a3[23] >= 0)
    v5 = a3;
  else
    v5 = *(char **)a3;
  *(_DWORD *)buf = 67109634;
  *((_DWORD *)buf + 1) = a2;
  *((_WORD *)buf + 4) = 1024;
  *(_DWORD *)(buf + 10) = a1;
  *((_WORD *)buf + 7) = 2080;
  *((_QWORD *)buf + 2) = v5;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "expected to split (th=%d, tw=%d): %s", buf, 0x18u);
  if (a3[23] < 0)
    operator delete(*(void **)a3);
}

void SplitInfo::TryToConstruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "illegal tile height factor", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Illegal tile width factor", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "input tile width is not aligned.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "output tile width is not aligned.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::DetermineTiling(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "kernel accesses accounting bug", buf, 2u);
}

void ZinMirSpatialSplitter::GatherLatencyInfoOnLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: ZinMirSpatialSplitter::ComputeLayerCostSplitLayer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: ZinMirSpatialSplitter::ComputeLayerCostOrgLayer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::ReEvaluateTiledLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error when calling ZinMirSpatialSplitter::GatherLatencyInfoOnLayer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::TileWithGlobalRefinement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: MirOpt::MergeConvolutions in spatial splitter", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: MirOpt::MergeFanoutConvolutions in spatial splitter", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::DetermineInputLayersForCurrentSplitLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "kernel tensor cannot be the intermediate tensor in the chain.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::DetermineOutputLayersForCurrentSplitLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to update graph in CreateViewWithPosTrimmed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirSpatialSplitter::Run(ZinIrCompilerParameters *a1)
{
  void **v1;
  void *__p[2];
  char v3;
  uint8_t buf[4];
  void **v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  ZinIrCompilerParameters::getSpatialSplitMode(a1, __p);
  if (v3 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v5 = v1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "unexpected split mode: %s", buf, 0xCu);
  if (v3 < 0)
    operator delete(__p[0]);
}

uint64_t ZinIrDimensionGetTypeno(int a1)
{
  if ((a1 - 1) > 4)
    return 1;
  else
    return dword_207AAB8B0[a1 - 1];
}

uint64_t ZinIrDimensionGetWithTypeno(int a1)
{
  if ((a1 - 1) >= 5)
    return 5;
  else
    return (a1 - 1);
}

uint64_t MinDMABufferMapKey::operator<(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  unsigned int v7;
  unsigned int v8;
  char v10;

  v4 = ScheduleComparator::operator()((int)&v10, *(ZinIrOpLayer **)a1, *(ZinIrOpLayer **)a2);
  v5 = ScheduleComparator::operator()((int)&v10, *(ZinIrOpLayer **)a2, *(ZinIrOpLayer **)a1);
  if (v4 && !v5)
    return 1;
  if (v5 && !v4)
    return 0;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a2 + 8);
  if (v7 == v8)
    return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
  else
    return v7 < v8;
}

void PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(ZinMirSpatialSplitLatencyCostModel **this)
{
  *this = (ZinMirSpatialSplitLatencyCostModel *)off_24C025DB0;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 31));
  std::unique_ptr<ZinMirSpatialSplitLatencyCostModel>::reset[abi:ne180100](this + 30, 0);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)(this + 20));
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)(this + 16), this[17]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(this + 10), this[11]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 3));
}

void ZinIrMemoryPressureAnalyzer::~ZinIrMemoryPressureAnalyzer(ZinIrMemoryPressureAnalyzer *this)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)this + 32);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t PressureBasedSubgraphIdentification::PressureBasedSubgraphIdentification(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  ZinMirSpatialSplitLatencyCostModel **v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinMirSpatialSplitLatencyCostModel *v16;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_24C025DB0;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = a4;
  *(_DWORD *)(a1 + 120) = 1065017672;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  v10 = (ZinMirSpatialSplitLatencyCostModel **)(a1 + 240);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = a8;
  *(_OWORD *)(a1 + 208) = xmmword_207AAB8D0;
  *(_QWORD *)(a1 + 224) = a6;
  *(_QWORD *)(a1 + 232) = a7;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  if (*(_BYTE *)(a5 + 2))
  {
    v11 = *(_QWORD *)(a3[1] + 392);
    if ((v11 & 0x8000000000000000) != 0)
      v11 = *(_QWORD *)(*a3 + 624);
    v12 = (float)v11;
  }
  else
  {
    v12 = (float)*(unint64_t *)(*a3 + 408) * 0.98;
  }
  *(_QWORD *)(a1 + 104) = (unint64_t)v12;
  if (*(_QWORD *)(a2 + 360) == *(_QWORD *)(a2 + 352))
    ZinAssertImpl("Must run scheduler first");
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(a2 + 352), v9);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = (ZinMirSpatialSplitLatencyCostModel *)operator new();
  ZinMirSpatialSplitLatencyCostModel::ZinMirSpatialSplitLatencyCostModel(v16, *(_QWORD *)(a1 + 8), v13, v14, v9, v15, 0);
  std::unique_ptr<ZinMirSpatialSplitLatencyCostModel>::reset[abi:ne180100](v10, v16);
  PressureBasedSubgraphIdentification::ConstructMemoryPressureMap((PressureBasedSubgraphIdentification *)a1);
  return a1;
}

void sub_206F482F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  ZinIrMemoryPressureAnalyzer *v4;
  ZinMirSpatialSplitLatencyCostModel **v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v6;
  MEMORY[0x20BD002F8](v7, 0x10E1C40079E0771);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 + 248);
  std::unique_ptr<ZinMirSpatialSplitLatencyCostModel>::reset[abi:ne180100](v5, 0);
  ZinIrMemoryPressureAnalyzer::~ZinIrMemoryPressureAnalyzer(v4);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3, *(_QWORD **)(v1 + 88));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(PressureBasedSubgraphIdentification *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 IsChain;
  _BYTE *v13;
  _BOOL4 v14;
  uint64_t ChainBufferSize;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD **v19;
  BOOL v20;
  __int128 v21;
  ZinIrTensor *v22;
  unint64_t v23;
  _OWORD v24[2];
  int v25;
  _QWORD **v26;
  _QWORD *v27[2];
  ZinIrTensor **v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v27[0] = 0;
  v27[1] = 0;
  v26 = v27;
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  v23 = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v30 = 0;
  v3 = operator new(0x28uLL);
  *v3 = &off_24C001BE0;
  v3[1] = &v26;
  v3[2] = v24;
  v3[3] = this;
  v3[4] = &v23;
  v30 = v3;
  ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v29, 1);
  v4 = v30;
  if (v30 == v29)
  {
    v5 = 4;
    v4 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (*(_BYTE *)(*((_QWORD *)this + 8) + 2))
  {
    v6 = *((_QWORD *)this + 13);
    v7 = v6 >= v23;
    v8 = v6 - v23;
    if (!v7)
      v8 = 0;
    *((_QWORD *)this + 13) = (unint64_t)((double)*(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 208)
                                              / 100.0
                                              * (double)v8);
  }
  v9 = v26;
  if (v26 != v27)
  {
    while (1)
    {
      v22 = (ZinIrTensor *)v9[4];
      v10 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 14), &v22);
      v11 = v10;
      if (v10
        && ((IsChain = CpAllocUtils::IsChain(*((_DWORD *)v10 + 6)),
             LODWORD(v11) = CpAllocUtils::IsL2Inplace(*((_DWORD *)v11 + 6)),
             v13 = (_BYTE *)*((_QWORD *)this + 8),
             !v13[2])
          ? (v14 = IsChain)
          : (v14 = 0),
            v14))
      {
        if (*v13)
          ZinAssertImpl("The chaining should be disabled in spatial split analysis with L2-circular buffer. This is because we can't enable chaining in L2-circular buffer.");
        ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(*((const ZinIrTensor ***)this + 28), (ZinIrRegAllocUtil **)v22);
      }
      else
      {
        PressureBasedSubgraphIdentification::GetTensorSize(this, v22);
      }
      v16 = ChainBufferSize;
      v28 = &v22;
      v21 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 24, &v22, (uint64_t)&std::piecewise_construct, &v28)+ 3);
      if (*(_BYTE *)(*((_QWORD *)this + 8) + 2))
        v17 = 0;
      else
        v17 = (int)v11;
      if (v17 == 1)
        --*((_QWORD *)&v21 + 1);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v24, &v22))goto LABEL_27;
      if (!*(_BYTE *)(*((_QWORD *)this + 8) + 2))
        break;
LABEL_28:
      v18 = v9[1];
      if (v18)
      {
        do
        {
          v19 = (_QWORD **)v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD **)v9[2];
          v20 = *v19 == v9;
          v9 = v19;
        }
        while (!v20);
      }
      v9 = v19;
      if (v19 == v27)
        goto LABEL_34;
    }
    v16 = 0;
LABEL_27:
    ZinIrMemoryPressureAnalyzer::AddTensorAllocation((PressureBasedSubgraphIdentification *)((char *)this + 128), v16, (const ZinLiveRange *)&v21, v22);
    goto LABEL_28;
  }
LABEL_34:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v24);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27[0]);
}

void sub_206F48614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(PressureBasedSubgraphIdentification *this, BOOL *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v7[0] = &off_24C001C38;
  v7[1] = this;
  v7[2] = a2;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206F4871C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(PressureBasedSubgraphIdentification *this, BOOL *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v7[0] = &off_24C001C90;
  v7[1] = this;
  v7[2] = a2;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206F487F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::GetTensorSize(PressureBasedSubgraphIdentification *this, const ZinIrTensor *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  void *__p[26];

  v3 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v3 + 2))
  {
    v4 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 529) == 0;
    DimensionOrderHint::DimensionOrderHint(__p, 0);
    ZinIrTensor::GetTensorSizeInBytesFromResidency(a2, 2, (uint64_t)__p, v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else if (*(_BYTE *)(v3 + 6))
  {
    ZinIrTensor::InferDescriptorForMACITensor(a2, (uint64_t)__p);
    ZinIrTensor::GetTensorSizeInBytesForMACILayout((uint64_t)a2, __p);
  }
  else
  {
    ZinL2FootprintCalculator::GetResidentBufferSize(*((ZinL2FootprintCalculator **)this + 28), a2);
  }
}

void sub_206F488EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL PressureBasedSubgraphIdentification::HasWorkUnitUtilizationLossAfterSplit(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  _BYTE *v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 result;
  uint64_t v13;

  v5 = *(_BYTE **)(a1 + 64);
  if (v5[5])
    return 0;
  if (v5[2])
    return 0;
  if (v5[3])
    return 0;
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(v9 + 72);
  v13 = 0;
  ZinTensorFormatGetSize(*(_DWORD *)(v9 + 88), &v13);
  if (v11 / a5 * (v10 / a4) * v13 >= *(_QWORD *)(**(_QWORD **)(a1 + 16) + 592)
    || *(_BYTE *)(*(_QWORD *)(a1 + 64) + 10))
  {
    return 0;
  }
  if (a4 > 1)
    return v10 != 1;
  result = 0;
  if (a4 == 1 && a5 == 1)
    return v10 != 1;
  return result;
}

uint64_t PressureBasedSubgraphIdentification::IdentifySubgraphs(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t PeakPressure;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  _OWORD *k;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _BYTE *v26;
  ZinIrRegAllocUtil *v27;
  const ZinIrHalParameters *v28;
  uint64_t v29;
  ZinIrTensor *v30;
  ZinIrTensor *RootTensor;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v58;
  ZinIrMemoryPressureAnalyzer *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  _QWORD v65[2];
  void *__p;
  uint64_t v67;
  _OWORD *v68;
  unint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  void **v73;
  _BYTE buf[32];
  uint64_t v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(const void **)(v6 + 352);
  v8 = *(_QWORD *)(v6 + 360);
  if ((const void *)v8 == v7)
    ZinAssertImpl("Must run scheduler first");
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v70, v7, v8, (v8 - (uint64_t)v7) >> 3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 97) & 1) != 0
    && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO:: (SpatialSplit) --mem pressure--\n", buf, 2u);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
    v10 = a5 == 0;
  else
    v10 = 1;
  if (!v10)
    ZinAssertImpl("DRAM Legalizer Error");
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)v70 + 48);
  v12 = *(_QWORD *)(*((_QWORD *)v71 - 1) + 48);
  buf[0] = 0;
  PeakPressure = (uint64_t)std::vector<BOOL>::vector(&__p, (v71 - (_BYTE *)v70) >> 3, buf);
  if (v11 <= v12)
  {
    v59 = (ZinIrMemoryPressureAnalyzer *)(a1 + 128);
    v19 = -1;
    v20 = -1;
    v58 = v12;
    do
    {
      v65[0] = v11;
      v65[1] = v11;
      PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v59, (const ZinLiveRange *)v65);
      v22 = PeakPressure;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 97) & 1) != 0)
      {
        PeakPressure = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
        if ((_DWORD)PeakPressure)
        {
          v23 = *((_QWORD *)v70 + v11);
          v24 = (_QWORD *)(v23 + 24);
          if (*(char *)(v23 + 47) < 0)
            v24 = (_QWORD *)*v24;
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v11;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v22;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v24;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%zd, %llu, %s\n", buf, 0x20u);
        }
      }
      v25 = *(_QWORD *)(a1 + 104);
      v26 = *(_BYTE **)(a1 + 64);
      if (*v26 || v26[1] || v26[3] && !v26[2])
      {
        v27 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v70 + v11) + 32))(*((_QWORD *)v70 + v11), 0, 0);
        PeakPressure = ZinIrRegAllocUtil::IsChainable(v27, **(const ZinIrTensor ***)(a1 + 16), v28);
        if ((_DWORD)PeakPressure)
        {
          v29 = **(_QWORD **)(*((_QWORD *)v70 + v11) + 112);
          v30 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
          RootTensor = ZinIrTensor::GetRootTensor(v30);
          ZinIrTensor::GetTensorSizeInBytes(v27);
          v33 = v32;
          ZinIrTensor::GetTensorSizeInBytes(RootTensor);
          v34 = v33 >= PeakPressure;
        }
        else
        {
          v34 = 0;
        }
        v12 = v58;
        if (v22 > v25 || v34)
        {
LABEL_57:
          if (v19 != -1)
            goto LABEL_68;
          v46 = *((_QWORD *)v70 + v11);
          v47 = *(_QWORD *)(v46 + 88);
          v48 = *(_QWORD *)(v46 + 96);
          if (v47 == v48)
            goto LABEL_66;
          v19 = v11 - 1;
          while (1)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 64) + 8) - 28) >= 3)
            {
              v49 = *(_QWORD *)(*(_QWORD *)v47 + 48);
              v50 = *((_QWORD *)__p + (v49 >> 6));
              if ((v50 & (1 << v49)) == 0 && v49 == v19)
                break;
            }
            v47 += 8;
            if (v47 == v48)
              goto LABEL_66;
          }
          *((_QWORD *)__p + (v49 >> 6)) = v50 | (1 << v49);
          goto LABEL_67;
        }
      }
      else if (v22 > v25)
      {
        goto LABEL_57;
      }
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 352);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 360) == v35)
        ZinAssertImpl("Must run scheduler first");
      v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8 * v11) + 64) + 8);
      v37 = v36 > 0x24;
      v38 = (1 << v36) & 0x1870000080;
      if (v37 || v38 == 0)
      {
        v40 = *((_QWORD *)v70 + v11);
        v41 = *(_QWORD *)(v40 + 112);
        v42 = *(_QWORD *)(v40 + 120);
        while (1)
        {
          if (v41 == v42)
          {
            if (v19 != -1)
              v20 = v11;
            v12 = v58;
            goto LABEL_67;
          }
          v43 = *(_QWORD **)v41;
          v44 = v11 + ((uint64_t)(*(_QWORD *)(*(_QWORD *)v41 + 96) - *(_QWORD *)(*(_QWORD *)v41 + 88)) >> 3);
          if (*(_QWORD *)(*(_QWORD *)v41 + 48) <= v44)
          {
            *(_QWORD *)buf = v11
                           + ((uint64_t)(*(_QWORD *)(*(_QWORD *)v41 + 96) - *(_QWORD *)(*(_QWORD *)v41 + 88)) >> 3);
            *(_QWORD *)&buf[8] = v44;
            PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v59, (const ZinLiveRange *)buf);
            if (*(_DWORD *)(v43[8] + 8) == 7)
            {
              for (i = v43[11]; i != v43[12]; i += 8)
              {
                if (*(_QWORD *)(*(_QWORD *)i + 48) < v19)
                  goto LABEL_88;
              }
            }
            if ((unint64_t)PeakPressure >= *(_QWORD *)(a1 + 104))
              break;
          }
          v41 += 8;
        }
LABEL_88:
        if (v19 != -1)
        {
          v12 = v58;
          goto LABEL_68;
        }
        v12 = v58;
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
        {
          PeakPressure = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *((_QWORD *)v70 + v11));
          if ((PeakPressure & 1) != 0)
            goto LABEL_80;
        }
LABEL_66:
        v19 = v11;
      }
LABEL_67:
      if (v19 != -1)
      {
LABEL_68:
        *(_QWORD *)((char *)__p + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        v52 = *(_QWORD *)(a1 + 64);
        if (!*(_BYTE *)(v52 + 10) && !*(_BYTE *)(v52 + 5))
        {
          PeakPressure = PressureBasedSubgraphIdentification::HasWorkUnitUtilizationLossAfterSplit(a1, *((_QWORD *)v70 + v11), v21, 1uLL, 1uLL);
          if ((_DWORD)PeakPressure)
            v20 = v11;
        }
        if (v20 == -1)
          goto LABEL_81;
        *(_QWORD *)&v64 = v19;
        *((_QWORD *)&v64 + 1) = v20;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        if (*(_BYTE *)(a1 + 73) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v19;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v20;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Extracting cluster at High Pressure Region [%zu,%zu]", buf, 0x16u);
        }
        PressureBasedSubgraphIdentification::ExtractSubgraphsInHighPressureRegion(a1, a2, (uint64_t *)&v64, a4, a5, (uint64_t)&v60);
        *(_OWORD *)buf = v64;
        *(_QWORD *)&buf[24] = 0;
        v75 = 0;
        *(_QWORD *)&buf[16] = 0;
        std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>(&buf[16], v60, v61, 0x86BCA1AF286BCA1BLL * ((v61 - v60) >> 3));
        v76 = v63;
        v53 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v54 = std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__push_back_slow_path<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>(&v67, (uint64_t)buf);
        }
        else
        {
          *v68 = *(_OWORD *)buf;
          *((_QWORD *)v53 + 3) = 0;
          *((_QWORD *)v53 + 4) = 0;
          *((_QWORD *)v53 + 2) = 0;
          v53[1] = *(_OWORD *)&buf[16];
          *((_QWORD *)v53 + 4) = v75;
          *(_QWORD *)&buf[16] = 0;
          *(_QWORD *)&buf[24] = 0;
          v75 = 0;
          *((_DWORD *)v53 + 10) = v76;
          v54 = (uint64_t)(v53 + 3);
        }
        v68 = (_OWORD *)v54;
        v73 = (void **)&buf[16];
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v73);
        *(_QWORD *)buf = &v60;
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v20 = -1;
LABEL_80:
        v19 = -1;
      }
LABEL_81:
      v10 = v11++ == v12;
    }
    while (!v10);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
  {
    v14 = *a3;
    for (j = a3[1]; j != v14; std::__destroy_at[abi:ne180100]<Subgraph,0>(j))
      j -= 152;
    a3[1] = v14;
    *(_DWORD *)buf = 0;
    PressureBasedSubgraphIdentification::MergeContiguousHighPressureRegions(PeakPressure, &v67);
    PressureBasedSubgraphIdentification::TryExpandHighPressureRegions(a1, a2, &v67, buf);
    if (*(_DWORD *)buf)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        PressureBasedSubgraphIdentification::IdentifySubgraphs();
    }
  }
  v16 = v67;
  for (k = v68; (_OWORD *)v16 != k; v16 += 48)
    std::vector<Subgraph>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Subgraph*>,std::__wrap_iter<Subgraph*>>(a3, a3[1], *(const Subgraph **)(v16 + 16), *(_QWORD *)(v16 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v16 + 24) - *(_QWORD *)(v16 + 16)) >> 3));
  if (__p)
    operator delete(__p);
  *(_QWORD *)buf = &v67;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v70)
  {
    v71 = (char *)v70;
    operator delete(v70);
  }
  return 0;
}

void sub_206F49120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v34 - 160) = &a30;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ExtractSubgraphsInHighPressureRegion(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  ZinIrOpLayer ***v17[3];
  ZinIrOpLayer ***v18[3];
  __int128 v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t buf[16];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19 = 0uLL;
  v20 = 0;
  PressureBasedSubgraphIdentification::ClusterLayersInHighPressureRegion((SplitPatternHandlerMgr **)a1, a3, (uint64_t *)&v19);
  if (*(_BYTE *)(a1 + 73) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v19 + 1) - v19) >> 3);
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "  Initial number of clusters : %zu", buf, 0xCu);
  }
  v10 = *((_QWORD *)&v19 + 1);
  v9 = v19;
  do
  {
    v11 = 0;
    for (i = v10 - v9; v9 != v10; v9 += 24)
      v11 += *(_QWORD *)(v9 + 16);
    PressureBasedSubgraphIdentification::CutClustersAtConcatWithPartialInputs(a1, (uint64_t)&v19);
    memset(v18, 0, sizeof(v18));
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t *)v18, (ZinIrOpLayer ***)v19, *((ZinIrOpLayer ****)&v19 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v19 + 1) - v19) >> 3));
    PressureBasedSubgraphIdentification::CutClustersAtPartialOutputs(a1, v18, (uint64_t)&v19);
    *(_QWORD *)buf = v18;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfClusters((_QWORD *)a1, (ZinIrOpLayer ****)&v19, (uint64_t *)buf);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v19);
    v19 = *(_OWORD *)buf;
    v20 = v23;
    v21 = buf;
    v23 = 0;
    memset(buf, 0, sizeof(buf));
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    PressureBasedSubgraphIdentification::CutClustersForRingBufferWriters(a1, (ZinIrOpLayer ****)&v19, (uint64_t *)buf);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v19);
    v19 = *(_OWORD *)buf;
    v20 = v23;
    v21 = buf;
    v23 = 0;
    memset(buf, 0, sizeof(buf));
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    v10 = *((_QWORD *)&v19 + 1);
    v9 = v19;
    if ((_QWORD)v19 == *((_QWORD *)&v19 + 1))
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = v19;
      do
      {
        v13 += *(_QWORD *)(v14 + 16);
        v14 += 24;
      }
      while (v14 != *((_QWORD *)&v19 + 1));
    }
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v19 + 1) - v19) >> 3);
  }
  while (0xAAAAAAAAAAAAAAABLL * (i >> 3) < v15 || v13 < v11);
  memset(v17, 0, sizeof(v17));
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t *)v17, (ZinIrOpLayer ***)v19, *((ZinIrOpLayer ****)&v19 + 1), v15);
  PressureBasedSubgraphIdentification::RemoveClusterOnlyHasChainPair(a1, v17, (ZinIrOpLayer ****)&v19);
  *(_QWORD *)buf = v17;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  PressureBasedSubgraphIdentification::ConstructSubGraphs(a1, a2, (uint64_t *)&v19, (uint64_t *)a6, (_DWORD *)(a6 + 24));
  *(_QWORD *)buf = &v19;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_206F4944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void **v19;

  a19 = v19;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)&a15;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::MergeContiguousHighPressureRegions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__init_with_size[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>(&v15, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    do
    {
      v5 = v3 - 48;
      v18 = (void **)(v3 - 32);
      std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v18);
      v3 = v5;
    }
    while (v5 != v4);
  }
  a2[1] = v4;
  if (v16 != v15)
  {
    if (v4 >= a2[2])
    {
      v6 = std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__push_back_slow_path<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>(a2, v15);
    }
    else
    {
      std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__construct_one_at_end[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>((uint64_t)a2, v15);
      v6 = v4 + 48;
    }
    a2[1] = v6;
    v7 = v15;
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4) >= 2)
    {
      v8 = 1;
      do
      {
        v9 = (_QWORD *)(v7 + 48 * v8);
        if (*v9 == *(v9 - 5) + 1)
        {
          v10 = a2[1];
          *(_QWORD *)(v10 - 40) = v9[1];
          *(_DWORD *)(v10 - 8) = 1;
          v12 = *(_QWORD *)(v10 - 32);
          for (i = *(_QWORD *)(v10 - 24); i != v12; std::__destroy_at[abi:ne180100]<Subgraph,0>(i))
            i -= 152;
          *(_QWORD *)(v10 - 24) = v12;
        }
        else
        {
          v13 = a2[1];
          if (v13 >= a2[2])
          {
            v14 = std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__push_back_slow_path<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>(a2, (uint64_t)v9);
          }
          else
          {
            std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__construct_one_at_end[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>((uint64_t)a2, (uint64_t)v9);
            v14 = v13 + 48;
          }
          a2[1] = v14;
        }
        ++v8;
        v7 = v15;
      }
      while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 4));
    }
  }
  v18 = (void **)&v15;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_206F49634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::TryExpandHighPressureRegions(uint64_t a1, uint64_t **a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  int v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  void **v44;

  std::list<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::list<std::__wrap_iter<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>(&v41, *a3, a3[1]);
  v31 = a4;
  *a4 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 352);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 360);
  if (v7 == v8)
    ZinAssertImpl("Must run scheduler first");
  v9 = (uint64_t)v42;
  if (v42 == &v41)
    goto LABEL_34;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 48);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 48);
  while (!*(_DWORD *)(v9 + 56))
  {
    v9 = *(_QWORD *)(v9 + 8);
LABEL_31:
    if ((uint64_t *)v9 == &v41)
      goto LABEL_34;
  }
  v12 = v10;
  if ((uint64_t *)v9 != v42)
    v12 = *(_QWORD *)(*(_QWORD *)v9 + 24) + 1;
  v13 = v11;
  if (v9 != v41)
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16) - 1;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v36 = *(_OWORD *)(v9 + 16);
  PressureBasedSubgraphIdentification::TryExpandHighPressureRegion(a1, a2, &v36, v12, v13, (uint64_t)&v37);
  if (!v40)
  {
    v32 = v36;
    v34 = 0;
    v33 = 0uLL;
    std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>(&v33, v37, v38, 0x86BCA1AF286BCA1BLL * ((v38 - v37) >> 3));
    v35 = v40;
    *(_OWORD *)(v9 + 16) = v32;
    std::vector<Subgraph>::__vdeallocate((void **)(v9 + 32));
    *(_OWORD *)(v9 + 32) = v33;
    *(_QWORD *)(v9 + 48) = v34;
    v33 = 0uLL;
    v34 = 0;
    *(_DWORD *)(v9 + 56) = v35;
    v44 = (void **)&v33;
    std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v44);
    v27 = (uint64_t *)(v9 + 8);
LABEL_30:
    v9 = *v27;
    *(_QWORD *)&v32 = &v37;
    std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
    goto LABEL_31;
  }
  v14 = v9;
  while (1)
  {
    v15 = v42;
    if ((uint64_t *)v9 == v42 && v14 == v41)
      break;
    v17 = v37;
    v18 = v38;
    if (v38 != v37)
    {
      do
      {
        v18 -= 152;
        std::__destroy_at[abi:ne180100]<Subgraph,0>(v18);
      }
      while (v18 != v17);
      v15 = v42;
    }
    v38 = v17;
    v40 = 1;
    if ((uint64_t *)v9 != v15)
      v9 = *(_QWORD *)v9;
    if (v14 != v41)
      v14 = *(_QWORD *)(v14 + 8);
    v19 = *(_QWORD *)(v14 + 24);
    v20 = v10;
    if ((uint64_t *)v9 != v15)
      v20 = *(_QWORD *)(*(_QWORD *)v9 + 24);
    v21 = v11;
    if (v14 != v41)
      v21 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 16);
    *(_QWORD *)&v36 = *(_QWORD *)(v9 + 16);
    *((_QWORD *)&v36 + 1) = v19;
    PressureBasedSubgraphIdentification::TryExpandHighPressureRegion(a1, a2, &v36, v20 + 1, v21 - 1, (uint64_t)&v37);
    if (!v40)
    {
      v22 = std::list<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::erase((uint64_t)&v41, (void **)v9, *(void ***)(v14 + 8));
      v32 = v36;
      v34 = 0;
      v33 = 0uLL;
      std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>(&v33, v37, v38, 0x86BCA1AF286BCA1BLL * ((v38 - v37) >> 3));
      v23 = v40;
      v35 = v40;
      v24 = (char *)operator new(0x40uLL);
      v25 = v33;
      *((_OWORD *)v24 + 1) = v32;
      *((_OWORD *)v24 + 2) = v25;
      *((_QWORD *)v24 + 6) = v34;
      v34 = 0;
      v33 = 0uLL;
      v26 = *v22;
      v26[1] = v24;
      *((_QWORD *)v24 + 1) = v22;
      v27 = (uint64_t *)(v24 + 8);
      *((_DWORD *)v24 + 14) = v23;
      *(_QWORD *)v24 = v26;
      *v22 = v24;
      ++v43;
      v44 = (void **)&v33;
      std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v44);
      goto LABEL_30;
    }
  }
  *v31 = 1;
  *(_QWORD *)&v32 = &v37;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
LABEL_34:
  if (!*v31)
  {
    std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::resize(a3, v43);
    v28 = v42;
    if (v42 != &v41)
    {
      v29 = *a3;
      do
      {
        std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>::operator=[abi:ne180100](v29, (uint64_t)(v28 + 2));
        v28 = (uint64_t *)v28[1];
        v29 += 48;
      }
      while (v28 != &v41);
    }
  }
  std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear((char *)&v41);
}

void sub_206F499F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear(va);
  _Unwind_Resume(a1);
}

double PressureBasedSubgraphIdentification::TryExpandHighPressureRegion(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t j;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  __int128 v26;

  v9 = a3[1];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 3))
    v10 = a4;
  else
    v10 = *a3 - 1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 3))
    v11 = a5;
  else
    v11 = v9 + 1;
  if (v10 < a4 || v10 < 1)
  {
LABEL_12:
    if (v11 > a5)
    {
LABEL_13:
      *(_DWORD *)(a6 + 24) = 1;
      return result;
    }
    v19 = 0;
    v20 = 1;
    while (1)
    {
      *(_QWORD *)&v26 = a4;
      *((_QWORD *)&v26 + 1) = v11;
      PressureBasedSubgraphIdentification::ExtractSubgraphsInHighPressureRegion(a1, a2, (uint64_t *)&v26, 0, 0, a6);
      if (!*(_DWORD *)(a6 + 24))
        break;
      v21 = *(_QWORD *)a6;
      for (i = *(_QWORD *)(a6 + 8); i != v21; std::__destroy_at[abi:ne180100]<Subgraph,0>(i))
        i -= 152;
      *(_QWORD *)(a6 + 8) = v21;
      *(_DWORD *)(a6 + 24) = 1;
      v11 += v20;
      if (v11 <= a5)
      {
        v20 *= 2;
        v18 = v19++ >= 4;
        if (!v18)
          continue;
      }
      goto LABEL_13;
    }
  }
  else
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      *(_QWORD *)&v26 = v10;
      *((_QWORD *)&v26 + 1) = v9;
      PressureBasedSubgraphIdentification::ExtractSubgraphsInHighPressureRegion(a1, a2, (uint64_t *)&v26, 0, 0, a6);
      if (!*(_DWORD *)(a6 + 24))
        break;
      v16 = *(_QWORD *)a6;
      for (j = *(_QWORD *)(a6 + 8); j != v16; std::__destroy_at[abi:ne180100]<Subgraph,0>(j))
        j -= 152;
      *(_QWORD *)(a6 + 8) = v16;
      *(_DWORD *)(a6 + 24) = 1;
      v10 -= v14;
      if (v10 >= a4 && v10 >= 1)
      {
        v14 *= 2;
        v18 = v13++ >= 4;
        if (!v18)
          continue;
      }
      goto LABEL_12;
    }
  }
  result = *(double *)&v26;
  *(_OWORD *)a3 = v26;
  return result;
}

void **std::list<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::erase(uint64_t a1, void **a2, void **a3)
{
  void **v4;
  _QWORD **v6;
  _QWORD *v7;
  void **v8;
  void **v10;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = (_QWORD **)*a3;
    v7 = *a2;
    v7[1] = *((_QWORD *)*a3 + 1);
    *v6[1] = v7;
    do
    {
      v8 = (void **)v4[1];
      --*(_QWORD *)(a1 + 16);
      v10 = v4 + 4;
      std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v10);
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 48;
        v9 = (void **)(v3 - 32);
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v9);
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t PressureBasedSubgraphIdentification::ClusterLayersInHighPressureRegion(SplitPatternHandlerMgr **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  SplitPatternHandlerMgr *v7;
  uint64_t v8;
  uint64_t v9;
  ZinIrOpLayer *v10;
  uint64_t v11;
  _BOOL4 IsSplittable;
  void **v13;
  void **v14;
  uint64_t *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  char v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  ZinIrOpLayer **v33;
  ZinIrOpLayer **v34;
  ZinIrOpLayer **v35;
  ZinIrOpLayer **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  PressureBasedSubgraphIdentification *v45;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  ZinIrOpLayer **v52;
  ZinIrOpLayer **v53;
  ZinIrOpLayer **v54;
  ZinIrOpLayer **v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  ZinIrOpLayer *v65;
  _QWORD v66[2];
  uint64_t v67;
  void *__p[3];
  ZinIrOpLayer *v69;
  uint64_t *v70;
  _QWORD *v71[2];
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76[2];
  _QWORD **v77;
  _QWORD *v78[2];
  _QWORD **v79;
  _QWORD *v80[2];
  _QWORD v81[3];
  _QWORD **v82;
  _QWORD *v83[2];
  _BYTE v84[24];
  _QWORD **v85;
  _QWORD *v86[2];
  char v87;
  _OWORD v88[2];
  int v89;

  v3 = a3;
  if (*((_BYTE *)a1[8] + 8))
    return (*((uint64_t (**)(SplitPatternHandlerMgr **, uint64_t *, uint64_t *))*a1 + 9))(a1, a2, a3);
  v7 = a1[1];
  if (*((_QWORD *)v7 + 45) == *((_QWORD *)v7 + 44))
    ZinAssertImpl("Must run scheduler first");
  memset(v88, 0, sizeof(v88));
  v89 = 1065353216;
  v9 = *a2;
  v8 = a2[1];
  if (*a2 >= v8)
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v88);
  do
  {
    v78[0] = 0;
    v78[1] = 0;
    v80[0] = 0;
    v80[1] = 0;
    v77 = v78;
    v79 = v80;
    v81[0] = v81;
    v81[1] = v81;
    v83[0] = 0;
    v83[1] = 0;
    v81[2] = 0;
    v82 = v83;
    memset(v84, 0, sizeof(v84));
    v86[0] = 0;
    v86[1] = 0;
    v85 = v86;
    v87 = 0;
    v76[0] = 0;
    v76[1] = 0;
    v75 = (uint64_t *)v76;
    v73 = 0;
    v74 = 0;
    v72 = (uint64_t *)&v73;
    v71[0] = 0;
    v71[1] = 0;
    v70 = (uint64_t *)v71;
    if (v9 > v8)
      goto LABEL_94;
    v61 = v9;
    while (2)
    {
      v69 = 0;
      v10 = *(ZinIrOpLayer **)(*((_QWORD *)v7 + 44) + 8 * v9);
      v69 = v10;
      if (*(_DWORD *)(*((_QWORD *)v10 + 8) + 8) != 7)
        goto LABEL_19;
      v11 = *(_QWORD *)a1[8];
      if ((v11 & 0x1000000) != 0)
      {
        if (!ZinConcatLayer::IsSplittable((uint64_t)v10, 0))
          goto LABEL_93;
        if ((v11 & 0x10000) != 0)
          goto LABEL_19;
      }
      else
      {
        IsSplittable = ZinConcatLayer::IsSplittable((uint64_t)v10, 3);
        if ((v11 & 0x10000) != 0)
        {
          if (((IsSplittable | ZinConcatLayer::IsSplittable((uint64_t)v10, 4)) & 1) == 0)
          {
LABEL_93:
            ++v9;
            break;
          }
          goto LABEL_19;
        }
        if (!IsSplittable)
          goto LABEL_93;
      }
      v14 = (void **)*((_QWORD *)v10 + 11);
      v13 = (void **)*((_QWORD *)v10 + 12);
      while (v14 != v13)
      {
        __p[0] = *v14;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v75, (ZinIrOpLayer **)__p))goto LABEL_93;
        ++v14;
      }
LABEL_19:
      if ((*(_DWORD *)(*((_QWORD *)v69 + 8) + 8) & 0xFFFFFFFC) == 0x1C
        || ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v69 + 112))(v69) & 1) != 0)
      {
        goto LABEL_90;
      }
      v15 = v3;
      memset(__p, 0, sizeof(__p));
      (*((void (**)(_QWORD *__return_ptr, SplitPatternHandlerMgr **, ZinIrOpLayer *, uint64_t, _QWORD, void **, _QWORD ***))*a1
       + 14))(v66, a1, v69, 1, 0, __p, &v77);
      v63 = v67;
      v16 = v67 != 0;
      v17 = (_QWORD *)*((_QWORD *)v69 + 11);
      v18 = (_QWORD *)*((_QWORD *)v69 + 12);
      while (v17 != v18)
      {
        *(_QWORD *)&v64 = *v17;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v75, (ZinIrOpLayer **)&v64))
        {
          goto LABEL_26;
        }
        ++v17;
      }
      if (!v63)
      {
        v40 = 0;
        v3 = v15;
        goto LABEL_87;
      }
LABEL_26:
      if (*((_BYTE *)a1[8] + 2))
        v62 = 0;
      else
        v62 = (*((uint64_t (**)(SplitPatternHandlerMgr **, ZinIrOpLayer *))*a1 + 13))(a1, v69);
      v19 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v88, &v69);
      v20 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0, 0)+ 104);
      if (v20)
        LODWORD(v20) = *(_DWORD *)(v20 + 96);
      v21 = v20;
      LOBYTE(v59) = v16;
      v22 = (*((uint64_t (**)(SplitPatternHandlerMgr **, uint64_t **, uint64_t, uint64_t, _QWORD, BOOL, ZinIrOpLayer *, uint64_t, int, _QWORD ***))*a1
             + 12))(a1, &v75, v61, v9, v62, (_DWORD)v20 == 1, v69, 1, v59, &v77);
      v23 = (unint64_t *)*((_QWORD *)v69 + 11);
      v24 = (unint64_t *)*((_QWORD *)v69 + 12);
      if (v23 == v24)
      {
LABEL_39:
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v88, &v69))
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v75, &v69, (uint64_t *)&v69);
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v88, &v69, &v69);
          if (v63)
            std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v70, (unint64_t *)&v69, (uint64_t *)&v69);
        }
        if (v22)
        {
          v28 = 0;
          v65 = 0;
          v29 = v62;
          if (!v63)
            v29 = 1;
          if ((v29 & 1) != 0 || v19)
          {
            v3 = a3;
          }
          else
          {
            v30 = v21 == 1;
            v3 = a3;
            if (!v30)
            {
              if (((*((uint64_t (**)(SplitPatternHandlerMgr **, ZinIrOpLayer *))*a1 + 3))(a1, v69) & 1) != 0)
                v28 = 0;
              else
                v28 = !(*((unsigned int (**)(SplitPatternHandlerMgr **, ZinIrOpLayer *, ZinIrOpLayer **))*a1
                        + 5))(a1, v69, &v65)|| (v45 = (PressureBasedSubgraphIdentification *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v75, &v65), v76 != (_QWORD **)v45)|| PressureBasedSubgraphIdentification::NeedKernelSplitting(v45, v65);
            }
          }
          *(_QWORD *)&v64 = v69;
          BYTE8(v64) = v28;
          std::__tree<std::__value_type<ZinConcatLayer *,ZinConcatLayer *>,std::__map_value_compare<ZinConcatLayer *,std::__value_type<ZinConcatLayer *,ZinConcatLayer *>,std::less<ZinConcatLayer *>,true>,std::allocator<std::__value_type<ZinConcatLayer *,ZinConcatLayer *>>>::__emplace_unique_key_args<ZinConcatLayer *,std::pair<ZinConcatLayer * const,ZinConcatLayer *>>(&v72, (unint64_t *)&v64, &v64);
          v40 = 0;
        }
        else
        {
          v40 = 0;
          v3 = a3;
        }
        goto LABEL_87;
      }
      while (!v73)
      {
LABEL_38:
        if (++v23 == v24)
          goto LABEL_39;
      }
      v25 = *v23;
      v26 = v73;
      while (1)
      {
        v27 = v26[4];
        if (v27 <= v25)
          break;
LABEL_37:
        v26 = (_QWORD *)*v26;
        if (!v26)
          goto LABEL_38;
      }
      if (v27 < v25)
      {
        ++v26;
        goto LABEL_37;
      }
      v31 = v72;
      if (v72 == (uint64_t *)&v73)
      {
        v32 = 0;
        v3 = a3;
      }
      else
      {
        v32 = 0;
        v3 = a3;
        do
        {
          v33 = (ZinIrOpLayer **)(v31 + 4);
          v34 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
          v35 = (ZinIrOpLayer **)*((_QWORD *)v7 + 45);
          if (v34 == v35)
          {
            v36 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
          }
          else
          {
            v36 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
            while (*v36 != *v33)
            {
              if (++v36 == v35)
              {
                v36 = (ZinIrOpLayer **)*((_QWORD *)v7 + 45);
                break;
              }
            }
          }
          v37 = v36 - v34;
          if (v32 <= v37)
            v32 = v37;
          if (!*((_BYTE *)v31 + 40))
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(&v75, v33);
            std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v88, &v69);
          }
          v38 = (uint64_t *)v31[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (uint64_t *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (uint64_t *)v31[2];
              v30 = *v39 == (_QWORD)v31;
              v31 = v39;
            }
            while (!v30);
          }
          v31 = v39;
        }
        while (v39 != (uint64_t *)&v73);
      }
      v9 = v32 + 1;
      v41 = v75;
      if (v75 != (uint64_t *)v76)
      {
        do
        {
          v42 = *(_QWORD *)(v41[4] + 48);
          if (v42 > v32)
            v9 = v42 + 1;
          v43 = (uint64_t *)v41[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (uint64_t *)v41[2];
              v30 = *v44 == (_QWORD)v41;
              v41 = v44;
            }
            while (!v30);
          }
          v41 = v44;
        }
        while (v44 != (uint64_t *)v76);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v72, v73);
      v73 = 0;
      v74 = 0;
      v40 = 1;
      v72 = (uint64_t *)&v73;
LABEL_87:
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v66, (_QWORD *)v66[1]);
      if (__p[0])
        operator delete(__p[0]);
      if ((v40 & 1) == 0)
      {
LABEL_90:
        if (v9++ >= a2[1])
          break;
        continue;
      }
      break;
    }
LABEL_94:
    v47 = v70;
    if (v70 != (uint64_t *)v71)
    {
      do
      {
        PressureBasedSubgraphIdentification::IncludeConsumersOfL2TensorInCluster((uint64_t)a1, (uint64_t)a2, v47[4], v88, (ZinIrOpLayer ***)&v75, a1[25]);
        v48 = (uint64_t *)v47[1];
        if (v48)
        {
          do
          {
            v49 = v48;
            v48 = (uint64_t *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            v49 = (uint64_t *)v47[2];
            v30 = *v49 == (_QWORD)v47;
            v47 = v49;
          }
          while (!v30);
        }
        v47 = v49;
      }
      while (v49 != (uint64_t *)v71);
    }
    if (v74)
    {
      v50 = v72;
      if (v72 == (uint64_t *)&v73)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        do
        {
          v52 = (ZinIrOpLayer **)(v50 + 4);
          v53 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
          v54 = (ZinIrOpLayer **)*((_QWORD *)v7 + 45);
          if (v53 == v54)
          {
            v55 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
          }
          else
          {
            v55 = (ZinIrOpLayer **)*((_QWORD *)v7 + 44);
            while (*v55 != *v52)
            {
              if (++v55 == v54)
              {
                v55 = (ZinIrOpLayer **)*((_QWORD *)v7 + 45);
                break;
              }
            }
          }
          v56 = v55 - v53;
          if (v51 <= v56)
            v51 = v56;
          if (!*((_BYTE *)v50 + 40))
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(&v75, v52);
          v57 = (uint64_t *)v50[1];
          if (v57)
          {
            do
            {
              v58 = v57;
              v57 = (uint64_t *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v58 = (uint64_t *)v50[2];
              v30 = *v58 == (_QWORD)v50;
              v50 = v58;
            }
            while (!v30);
          }
          v50 = v58;
        }
        while (v58 != (uint64_t *)&v73);
      }
      v9 = v51 + 1;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v72, v73);
      v73 = 0;
      v74 = 0;
      v72 = (uint64_t *)&v73;
    }
    IdentifyConnectedComponents(&v75, v3);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v70, v71[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v72, v73);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v75, v76[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v85, v86[0]);
    v75 = (uint64_t *)v84;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v82, v83[0]);
    std::__list_imp<ZinIrSection *>::clear(v81);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v79, v80[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v77, v78[0]);
    v8 = a2[1];
  }
  while (v9 < v8);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v88);
}

void sub_206F4A514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,char a35,_QWORD *a36,uint64_t a37,char a38,_QWORD *a39,uint64_t a40,char a41,_QWORD *a42,uint64_t a43,char a44)
{
  uint64_t v44;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a28, a29);
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a35, a36);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a38, a39);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a41, a42);
  Subgraph::~Subgraph((Subgraph *)&a44);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v44 - 128);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutClustersAtConcatWithPartialInputs(uint64_t a1, uint64_t a2)
{
  ZinIrOpLayer ***v3;
  ZinIrOpLayer ***v4;
  ZinIrOpLayer ***v6;
  ZinIrOpLayer ***v7;
  uint64_t v8;
  void **v9[3];
  ZinIrOpLayer ***v10;
  uint64_t **v11;
  uint64_t v12;
  ZinIrOpLayer ****v13;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v3 = *(ZinIrOpLayer ****)a2;
    v4 = *(ZinIrOpLayer ****)(a2 + 8);
    if (*(ZinIrOpLayer ****)a2 != v4)
    {
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v9, v3);
        v6 = 0;
        v7 = 0;
        v8 = 0;
        PressureBasedSubgraphIdentification::CutClusterAtConcatWithPartialInputs(a1, v9, (uint64_t)&v6);
        std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)&v10, v11, v6, v7, 0xAAAAAAAAAAAAAAABLL * (v7 - v6));
        v13 = &v6;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v9, v9[1]);
        v3 += 3;
      }
      while (v3 != v4);
    }
    if (&v10 != (ZinIrOpLayer ****)a2)
      std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__assign_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(a2, v10, (ZinIrOpLayer ***)v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 3));
    v9[0] = (void **)&v10;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v9);
  }
}

void sub_206F4A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  a12 = (void **)&a15;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutClustersAtPartialOutputs(uint64_t a1, ZinIrOpLayer ****a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrOpLayer ***v9;
  ZinIrOpLayer ***i;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  ZinIrOpLayer **v15[3];
  void **v16;

  v7 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 != *(_QWORD *)a3)
  {
    do
    {
      v8 = v6 - 24;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v6 - 24, *(_QWORD **)(v6 - 16));
      v6 = v8;
    }
    while (v8 != v7);
  }
  *(_QWORD *)(a3 + 8) = v7;
  v9 = *a2;
  for (i = a2[1]; v9 != i; v9 += 3)
  {
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v15, v9);
    v13 = 0uLL;
    v14 = 0;
    PressureBasedSubgraphIdentification::CutClusterAtPartialOutputs(a1, v15, (uint64_t)&v13);
    PressureBasedSubgraphIdentification::CutDisconnectedClusters((ZinIrOpLayer ****)&v13, (uint64_t)&v11);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v13);
    v13 = v11;
    v14 = v12;
    v12 = 0;
    v11 = 0uLL;
    v16 = (void **)&v11;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v16);
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a3, *(uint64_t ***)(a3 + 8), (ZinIrOpLayer ***)v13, *((ZinIrOpLayer ****)&v13 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v13 + 1) - v13) >> 3));
    *(_QWORD *)&v11 = &v13;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v15, v15[1]);
  }
}

void sub_206F4A81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  a9 = (void **)&a13;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfClusters(_QWORD *a1@<X0>, ZinIrOpLayer ****a2@<X1>, uint64_t *a3@<X8>)
{
  ZinIrOpLayer ***v3;
  ZinIrOpLayer ***v4;
  _QWORD *v7[3];
  ZinIrOpLayer **v8[3];
  void **v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v8, v3);
      PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfCluster(a1, v8, (uint64_t *)v7);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>,0>(v7[0], v7[1], a3);
      v9 = (void **)v7;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v8, v8[1]);
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_206F4A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, _QWORD *a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutClustersForRingBufferWriters(uint64_t a1@<X0>, ZinIrOpLayer ****a2@<X1>, uint64_t *a3@<X8>)
{
  ZinIrOpLayer ***v3;
  ZinIrOpLayer ***v4;
  _QWORD *v7[3];
  uint64_t v8[3];
  void **v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v8, v3);
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(v7, a1, v8);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>,0>(v7[0], v7[1], a3);
      v9 = (void **)v7;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v8, (_QWORD *)v8[1]);
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_206F4A9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, _QWORD *a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::RemoveClusterOnlyHasChainPair(uint64_t a1, ZinIrOpLayer ****a2, ZinIrOpLayer ****a3)
{
  ZinIrOpLayer ***v3;
  ZinIrOpLayer ***v4;
  ZinIrOpLayer **v6;
  BOOL v7;
  char v8;
  unint64_t v9;
  ZinIrOpLayer *v10;
  ZinIrTensor *v11;
  void **v12;
  void **v13;
  char v14;
  ZinIrRegAllocUtil *v15;
  const ZinIrHalParameters *v16;
  uint64_t v17;
  uint64_t ChainBufferSize;
  ZinIrOpLayer *v19;
  ZinIrOpLayer ***v20;
  uint64_t *v21;
  uint64_t *v22;
  ZinIrOpLayer ***v24;
  ZinIrOpLayer ***v25;
  void *__p[4];
  ZinIrOpLayer **v27;
  _QWORD *v28[2];
  ZinIrOpLayer ***v29;
  uint64_t *v30;
  unint64_t v31;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v24 = a2[1];
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v27, v3);
        v6 = v27;
        v7 = v28[1] > (_QWORD *)3 || v27 == (ZinIrOpLayer **)v28;
        if (v7)
          goto LABEL_25;
        v25 = v3;
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = v6[4];
          v11 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
          v12 = (void **)*((_QWORD *)v10 + 14);
          v13 = (void **)*((_QWORD *)v10 + 15);
          if (v12 == v13)
            goto LABEL_13;
          v14 = 1;
          do
          {
            __p[0] = 0;
            __p[0] = *v12;
            v14 &= std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v27, (ZinIrOpLayer **)__p) != 0;
            ++v12;
          }
          while (v12 != v13);
          if ((v14 & 1) != 0)
          {
LABEL_13:
            v15 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
            if (v8 & 1 | ((ZinIrRegAllocUtil::IsChainable(v15, **(const ZinIrTensor ***)(a1 + 16), v16) & 1) == 0))
            {
              DimensionOrderHint::DimensionOrderHint(__p, 0);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v11, 1, (uint64_t)__p, 0);
              ChainBufferSize = v17;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(*(const ZinIrTensor ***)(a1 + 224), (ZinIrRegAllocUtil **)v11);
              v8 = 1;
            }
            v9 += ChainBufferSize;
          }
          v19 = v6[1];
          if (v19)
          {
            do
            {
              v20 = (ZinIrOpLayer ***)v19;
              v19 = *(ZinIrOpLayer **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (ZinIrOpLayer ***)v6[2];
              v7 = *v20 == v6;
              v6 = (ZinIrOpLayer **)v20;
            }
            while (!v7);
          }
          v6 = (ZinIrOpLayer **)v20;
        }
        while (v20 != v28);
        v4 = v24;
        v3 = v25;
        if (((v9 <= *(_QWORD *)(**(_QWORD **)(a1 + 16) + 408)) & v8) == 0)
        {
LABEL_25:
          v21 = v30;
          if ((unint64_t)v30 >= v31)
          {
            v22 = (uint64_t *)std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>((uint64_t *)&v29, &v27);
          }
          else
          {
            std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v30, &v27);
            v22 = v21 + 3;
          }
          v30 = v22;
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28[0]);
        v3 += 3;
      }
      while (v3 != v4);
    }
    if (&v29 != a3)
      std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__assign_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t)a3, v29, (ZinIrOpLayer ***)v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
    __p[0] = &v29;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_206F4AC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  __p = &a20;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ConstructSubGraphs(uint64_t result, uint64_t **a2, uint64_t *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *a5 = 0;
  v5 = *a3;
  if (a3[1] != *a3)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      result = PressureBasedSubgraphIdentification::ConstructValidSubgraphsFromCluster(v10, a2, (_QWORD *)(v5 + v11), a4, 0);
      if ((_DWORD)result)
        break;
      ++v12;
      v5 = *a3;
      v11 += 24;
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
        return result;
    }
    *a5 = 1;
  }
  return result;
}

BOOL PressureBasedSubgraphIdentification::IsHighPressureLongLiverangeNode(PressureBasedSubgraphIdentification *this, uint64_t **a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  _BOOL4 v22;
  ZinIrTensor *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;
  ZinIrTensor *RootTensor;
  void *__p[2];
  unsigned __int8 v35;

  result = ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)a2);
  if (!result)
    return result;
  v5 = a2[11];
  v6 = (char *)a2[12] - (char *)v5;
  if ((unint64_t)v6 < 9)
  {
    v13 = 0;
  }
  else
  {
    v7 = v6 >> 3;
    v10 = *v5;
    v8 = v5 + 1;
    v9 = v10;
    if (v7 <= 2)
      v7 = 2;
    v11 = v7 - 2;
    do
    {
      v12 = *v8++;
      v13 = v9 != v12;
    }
    while (v9 == v12 && v11-- != 0);
  }
  ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(*((_QWORD *)this + 2) + 8), __p);
  v15 = v35;
  if ((v35 & 0x80u) != 0)
    v15 = (unint64_t)__p[1];
  if (v15 != 15
    || ((v35 & 0x80u) == 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
        (v17 = *v16, v18 = *(uint64_t *)((char *)v16 + 7), v17 == (void *)0x2D636972656E6567)
      ? (v19 = v18 == 0x7078652D6761642DLL)
      : (v19 = 0),
        !v19))
  {
    if ((char)v35 < 0)
      operator delete(__p[0]);
LABEL_28:
    v21 = (_BYTE *)*((_QWORD *)this + 8);
    if (*v21 || v21[1])
      return 0;
    if (v13)
    {
      v22 = 1;
    }
    else
    {
      v29 = a2[11];
      v30 = a2[12];
      if (v29 == v30)
      {
        v22 = 0;
      }
      else
      {
        v31 = v29 + 1;
        do
        {
          v22 = *(_DWORD *)(*(_QWORD *)(*(v31 - 1) + 64) + 8) == 7;
          v32 = *(_DWORD *)(*(_QWORD *)(*(v31 - 1) + 64) + 8) == 7 || v31 == v30;
          ++v31;
        }
        while (!v32);
      }
    }
    return (unint64_t)((char *)a2[15] - (char *)a2[14]) > 8 && v22;
  }
  v20 = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 8);
  if ((char)v35 < 0)
    operator delete(__p[0]);
  if (v20)
    goto LABEL_28;
  v23 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v23);
  __p[0] = &RootTensor;
  v24 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 24, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
  v25 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v25 + 360) == *(_QWORD *)(v25 + 352))
    ZinAssertImpl("Must run scheduler first");
  v26 = v24;
  v27 = a2[6];
  if ((uint64_t)v27 >= v24[4])
  {
    v28 = 0;
  }
  else
  {
    LODWORD(v28) = 0;
    do
    {
      v28 = (v28 + ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*(_QWORD *)(v25 + 352) + 8 * (_QWORD)v27)));
      v27 = (uint64_t *)((char *)v27 + 1);
    }
    while ((uint64_t)v27 < v26[4]);
  }
  return *((_QWORD *)this + 26) < v28;
}

uint64_t PressureBasedSubgraphIdentification::IsStillHighPressureAfterRemovingDRAMSIP(PressureBasedSubgraphIdentification *this, unint64_t a2, unint64_t a3)
{
  unint64_t PeakPressure;
  _QWORD *v7;
  ZinIrTensor **v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  BOOL v15;
  char v16;
  char v18;
  ZinIrTensor *v19;
  _QWORD **v20;
  _QWORD *v21[2];
  char v22;
  unint64_t v23[2];
  ZinIrTensor **v24;

  v23[0] = a3;
  v23[1] = a3;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v20 = v21;
  PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)this + 128, v23, (uint64_t)&v20);
  v7 = v20;
  if (v20 == v21)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v8 = (ZinIrTensor **)v7[4];
      if (!(*((unsigned int (**)(ZinIrTensor **))*v8 + 3))(v8))
      {
        v19 = v8[4];
        v24 = &v19;
        if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 24, &v19, (uint64_t)&std::piecewise_construct, &v24)[3] < a2)
        {
          v9 = *((_QWORD *)v19 + 12);
          if ((*(_QWORD *)(v9 + 48) > a3 || *(_DWORD *)(*(_QWORD *)(v9 + 64) + 8) != 7)
            && ZinMirSpatialSplitUtils::IsNonResident(v19, *((_QWORD **)this + 14)))
          {
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 64) + 8) & 0xFFFFFFFC) == 0x1C)
              v10 = 0;
            else
              PressureBasedSubgraphIdentification::GetTensorSize(this, v19);
            PeakPressure -= v10;
            v18 = 1;
          }
        }
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD **)v7[2];
          v13 = *v12 == v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v21);
  }
  v15 = a3 == a2 || PeakPressure > *((_QWORD *)this + 13);
  v16 = v15 | ~v18;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  return v16 & 1;
}

void sub_206F4B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

BOOL PressureBasedSubgraphIdentification::NeedKernelSplitting(PressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2)
{
  unsigned int v3;
  int v4;
  _BOOL8 v5;
  _BOOL4 v6;
  BOOL v7;
  _QWORD v9[5];
  _BYTE v10[56];
  __int16 v11;
  char v12;
  void *__p;
  void *v14;
  uint64_t v15;
  __int16 v16;
  _QWORD **v17;
  _QWORD *v18[2];
  uint64_t v19;
  _QWORD v20[3];

  if (!ZinIrOpLayer::IsNELayer(a2))
    return 0;
  v19 = *((_QWORD *)a2 + 2);
  v20[0] = v20;
  v20[1] = v20;
  v20[2] = 0;
  v10[40] = 0;
  v10[48] = 0;
  v11 = 0;
  v12 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v14 = 0;
  v15 = 0;
  __p = 0;
  v16 = 0;
  v17 = v18;
  v3 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
  (*(void (**)(_QWORD *__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a2 + 392))(v9, a2);
  v4 = ZinMirKernelSizeSplitterEngine::Analyze((ZinMirKernelSizeSplitterEngine *)&v19, (uint64_t)a2, v3, (uint64_t)v9, (uint64_t)v10);
  v5 = v4 == 0;
  if (v4)
  {
    v6 = 0;
  }
  else
  {
    v7 = v12 || HIBYTE(v11) == 0;
    v6 = v7;
  }
  std::__tree<std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>,std::__map_value_compare<std::shared_ptr<ZinIrConstData>,std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>,std::less<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinIrConstData>,std::vector<unsigned long>>>>::destroy((uint64_t)&v17, v18[0]);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  std::__list_imp<ZinIrSection *>::clear(v20);
  if (v6)
    return 0;
  return v5;
}

void sub_206F4B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  va_list va;

  va_start(va, a7);
  ZinMirKernelSizeSplitterEngine::Analysis::~Analysis((ZinMirKernelSizeSplitterEngine::Analysis *)va);
  std::__list_imp<ZinIrSection *>::clear(v7);
  _Unwind_Resume(a1);
}

BOOL PressureBasedSubgraphIdentification::IsKernelDominant(PressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2)
{
  _BOOL8 IsNELayer;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SerializedWeightElementCount;
  double v19;
  double v20;
  double v21;
  ZinIrKernel *v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v26;
  unint64_t v27[5];
  uint64_t v28;
  uint64_t v29;
  ZinIrKernel *v30;

  IsNELayer = ZinIrOpLayer::IsNELayer(a2);
  if (!IsNELayer)
    return 0;
  if (!PressureBasedSubgraphIdentification::NeedKernelSplitting((PressureBasedSubgraphIdentification *)IsNELayer, a2))
    return 0;
  (*(void (**)(ZinIrKernel **__return_ptr, const ZinIrOpLayer *, uint64_t))(*(_QWORD *)a2 + 568))(&v30, a2, 1);
  if (!v30)
    return 0;
  v4 = (*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v29 = 0;
  ZinTensorFormatGetSize(*(_DWORD *)(v4 + 88), &v29);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_QWORD *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 56);
  v9 = *(_QWORD *)(v4 + 64);
  v10 = v29;
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
  v26 = v8;
  v28 = 0;
  ZinTensorFormatGetSize(*(_DWORD *)(v11 + 88), &v28);
  v13 = *(_QWORD *)(v11 + 72);
  v12 = *(_QWORD *)(v11 + 80);
  v14 = *(_QWORD *)(v11 + 48);
  v15 = *(_QWORD *)(v11 + 56);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = v28;
  LODWORD(v11) = ZinIrKernel::GetWeightFormat(v30);
  ZinIrKernel::GetWeightDimensions(v30, (uint64_t)v27);
  SerializedWeightElementCount = GetSerializedWeightElementCount(v11, v27, *((_QWORD *)v30 + 52));
  v19 = (double)(v6 * v26 * v7 * v9 * v5) * (double)v10;
  v20 = (double)(v12 * v14 * v15 * v16 * v13) * (double)v17;
  v21 = ZinIrKernel::GetWeightElementSizeInBytes(v30) * (double)SerializedWeightElementCount;
  v22 = v30;
  v23 = *((_QWORD *)v30 + 73);
  if (!v23)
  {
    v24 = v21 >= (v19 + v20) * 0.5;
    v30 = 0;
LABEL_12:
    ZinIrKernel::~ZinIrKernel(v22);
    MEMORY[0x20BD002F8]();
    return v24;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v23 + 136) + 184))(*(_QWORD *)(v23 + 136)))
    v21 = v21 * (1.0 - ZinIrKernel::CalculateSparsityFromWeightScan(v30, 0.14286));
  v22 = v30;
  v24 = v21 >= (v19 + v20) * 0.5;
  v30 = 0;
  if (v22)
    goto LABEL_12;
  return v24;
}

void sub_206F4B4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IncludeConsumersOfL2TensorInClusterHelper(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3, _QWORD *a4, uint64_t **a5, SplitPatternHandlerMgr *a6)
{
  _QWORD *v12;
  ZinIrTensor *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  _QWORD *v21;
  _QWORD **v22;
  BOOL v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  int v28;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40[2];
  void *__p[3];
  ZinIrTensor *RootTensor;
  _QWORD *v43[2];
  _QWORD **v44;
  _QWORD *v45[2];
  _QWORD v46[3];
  _QWORD **v47;
  _QWORD *v48[2];
  _QWORD v49[3];
  _QWORD **v50;
  _QWORD *v51[2];
  char v52;
  ZinIrOpLayer *v53;

  v53 = a3;
  v12 = (_QWORD *)(a1 + 24);
  v13 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v13);
  v14 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v12, &RootTensor);
  if (v14)
    v15 = v14[4] - v14[3] + 1;
  else
    v15 = 0;
  v16 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0)
                  + 104);
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 + 96) == 1;
  v17 = 0;
  RootTensor = (ZinIrTensor *)v43;
  v43[0] = 0;
  v45[0] = 0;
  v45[1] = 0;
  v43[1] = 0;
  v44 = v45;
  v46[2] = 0;
  v47 = v48;
  v50 = v51;
  v46[0] = v46;
  v46[1] = v46;
  v48[0] = 0;
  v48[1] = 0;
  memset(v49, 0, sizeof(v49));
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  if ((_DWORD)v16 && v15 <= 0x1F3)
  {
    v38 = a4;
    v18 = (ZinIrOpLayer **)*((_QWORD *)a3 + 14);
    v19 = (ZinIrOpLayer **)*((_QWORD *)a3 + 15);
    if (v18 == v19)
    {
LABEL_52:
      v17 = 0;
    }
    else
    {
      do
      {
        v20 = *v18;
        memset(__p, 0, sizeof(__p));
        IsLayerSplittable<Subgraph>(v20, **(_QWORD **)(a1 + 16), 1, 1, 1, 0, (uint64_t)__p, (uint64_t)&RootTensor, &v39, a6);
        if (!v40[0])
          goto LABEL_14;
        v21 = v40[0];
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
        if (v22 == v40 || *((_DWORD *)v22 + 7))
LABEL_14:
          v22 = v40;
        v23 = v22 != v40;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 9))
        {
          if (!v40[0])
            goto LABEL_26;
          v24 = v40;
          v25 = v40[0];
          do
          {
            v26 = v25;
            v27 = v24;
            v28 = *((_DWORD *)v25 + 7);
            if (v28)
              v24 = (_QWORD **)v25;
            else
              ++v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
          if (v24 == v40)
            goto LABEL_26;
          if (!v28)
            v26 = v27;
          if (*((_DWORD *)v26 + 7) >= 2u)
LABEL_26:
            v24 = v40;
          v23 = v22 != v40 || v24 != v40;
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v39, v40[0]);
        if (__p[0])
          operator delete(__p[0]);
        if (!v23)
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a5, &v53);
          v35 = (void **)*((_QWORD *)v53 + 14);
          v36 = (void **)*((_QWORD *)v53 + 15);
          while (v35 != v36)
          {
            __p[0] = *v35;
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a5, (ZinIrOpLayer **)__p);
            ++v35;
          }
          goto LABEL_52;
        }
        ++v18;
      }
      while (v18 != v19);
      v30 = (void **)*((_QWORD *)a3 + 14);
      v31 = (void **)*((_QWORD *)a3 + 15);
      if (v30 == v31)
        goto LABEL_52;
      v17 = 0;
      do
      {
        __p[0] = *v30;
        if (*((_QWORD *)__p[0] + 6) <= *(_QWORD *)(a2 + 8)
          && !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v38, __p))
        {
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v38, __p, __p);
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a5, (ZinIrOpLayer **)__p, (uint64_t *)__p);
          v32 = *((_QWORD *)__p[0] + 6);
          v33 = PressureBasedSubgraphIdentification::IncludeConsumersOfL2TensorInClusterHelper(a1, a2);
          if (v17 <= v32)
            v34 = v32;
          else
            v34 = v17;
          if (v34 <= v33)
            v17 = v33;
          else
            v17 = v34;
        }
        ++v30;
      }
      while (v30 != v31);
    }
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
  __p[0] = v49;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48[0]);
  std::__list_imp<ZinIrSection *>::clear(v46);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v44, v45[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&RootTensor, v43[0]);
  return v17;
}

void sub_206F4B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  Subgraph::~Subgraph((Subgraph *)&a18);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsReachable(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3)
{
  uint64_t i;
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  uint64_t v8;
  ZinIrOpLayer *v10;
  ZinIrOpLayer *v11;
  uint64_t *v12;
  _QWORD *v13[2];
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;

  v16 = a2;
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  v13[0] = 0;
  v13[1] = 0;
  v12 = (uint64_t *)v13;
  std::deque<ZinIrOpLayer *>::push_back(v14, &v16);
  for (i = *((_QWORD *)&v15 + 1); *((_QWORD *)&v15 + 1); i = *((_QWORD *)&v15 + 1))
  {
    v11 = 0;
    v11 = *(ZinIrOpLayer **)(*(_QWORD *)(*((_QWORD *)&v14[0] + 1) + (((unint64_t)v15 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v15 & 0x1FF));
    *(_QWORD *)&v15 = v15 + 1;
    *((_QWORD *)&v15 + 1) = i - 1;
    if ((unint64_t)v15 >= 0x400)
    {
      operator delete(**((void ***)&v14[0] + 1));
      *((_QWORD *)&v14[0] + 1) += 8;
      *(_QWORD *)&v15 = v15 - 512;
    }
    if (v13 == (_QWORD **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v12, &v11))
    {
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v12, &v11, (uint64_t *)&v11);
      if (v11 == a3)
      {
        v8 = 1;
        goto LABEL_14;
      }
      v6 = (ZinIrOpLayer **)*((_QWORD *)v11 + 14);
      v7 = (ZinIrOpLayer **)*((_QWORD *)v11 + 15);
      while (v6 != v7)
      {
        v10 = 0;
        v10 = *v6;
        if (a1 + 8 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a1, &v10))std::deque<ZinIrOpLayer *>::push_back(v14, &v10);
        ++v6;
      }
    }
  }
  v8 = 0;
LABEL_14:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v12, v13[0]);
  std::deque<unsigned long>::~deque[abi:ne180100](v14);
  return v8;
}

void sub_206F4BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v7);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::IncludeConsumersOfL2TensorInCluster(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, ZinIrOpLayer ***a5, SplitPatternHandlerMgr *a6)
{
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer ***v16;
  ZinIrOpLayer **v17;
  uint64_t v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer **v21;
  uint64_t v22;
  ZinIrOpLayer *v24;
  ZinIrOpLayer ***v25;
  BOOL v26;
  uint64_t *v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *ReacheableToCluster;
  uint64_t v30;
  uint64_t v31;
  ZinIrOpLayer **v32;
  ZinIrOpLayer **v33;
  ZinIrOpLayer **v34;
  ZinIrOpLayer **v35;
  uint64_t v36;
  uint64_t v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer **v39;
  uint64_t *v40;
  uint64_t *v41;
  ZinIrOpLayer *v42;
  ZinIrOpLayer *v43;
  uint64_t *v44;
  _QWORD *v45[2];
  uint64_t v46;
  _QWORD *v47;
  void *__p;
  uint64_t **v49;
  uint64_t v50;

  __p = 0;
  v49 = 0;
  v50 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a3 + 112), *(_QWORD *)(a3 + 120), (uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 3);
  v12 = (uint64_t **)__p;
  v13 = v49;
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](&v46, a5);
  if (v12 == v13)
  {
LABEL_4:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46, v47);
  }
  else
  {
    while (1)
    {
      v44 = *v12;
      if (&v47 == (_QWORD **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v46, (ZinIrOpLayer **)&v44))break;
      if (++v12 == v13)
        goto LABEL_4;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46, v47);
    v14 = PressureBasedSubgraphIdentification::IncludeConsumersOfL2TensorInClusterHelper(a1, a2, (ZinIrOpLayer *)a3, a4, (uint64_t **)a5, a6);
    v15 = *(_QWORD *)(a3 + 48);
    v45[0] = 0;
    v45[1] = 0;
    v44 = (uint64_t *)v45;
    v16 = a5 + 1;
    v17 = *a5;
    if (*a5 != (ZinIrOpLayer **)(a5 + 1))
    {
      v18 = v14;
      do
      {
        v19 = v17[4];
        v20 = (ZinIrOpLayer **)*((_QWORD *)v19 + 14);
        v21 = (ZinIrOpLayer **)*((_QWORD *)v19 + 15);
        while (v20 != v21)
        {
          v43 = 0;
          v43 = *v20;
          if (v16 == (ZinIrOpLayer ***)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a5, &v43))
          {
            v22 = *((_QWORD *)v43 + 6);
            if (v15 < v22 && v22 < v18)
              std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v44, (unint64_t *)&v43, (uint64_t *)&v43);
          }
          ++v20;
        }
        v24 = v17[1];
        if (v24)
        {
          do
          {
            v25 = (ZinIrOpLayer ***)v24;
            v24 = *(ZinIrOpLayer **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (ZinIrOpLayer ***)v17[2];
            v26 = *v25 == v17;
            v17 = (ZinIrOpLayer **)v25;
          }
          while (!v26);
        }
        v17 = (ZinIrOpLayer **)v25;
      }
      while (v25 != v16);
      v27 = v44;
      if (v44 != (uint64_t *)v45)
      {
        do
        {
          v28 = (ZinIrOpLayer *)v27[4];
          ReacheableToCluster = FindReacheableToCluster(v28, (uint64_t)a5, v18);
          if (ReacheableToCluster)
          {
            v30 = *((_QWORD *)ReacheableToCluster + 11);
            v31 = *((_QWORD *)ReacheableToCluster + 12);
            while (v30 != v31)
            {
              v32 = *(ZinIrOpLayer ***)(*(_QWORD *)v30 + 112);
              v33 = *(ZinIrOpLayer ***)(*(_QWORD *)v30 + 120);
              while (v32 != v33)
              {
                v43 = 0;
                v43 = *v32;
                std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)a5, &v43);
                ++v32;
              }
              v30 += 8;
            }
            v35 = (ZinIrOpLayer **)*((_QWORD *)v28 + 11);
            v34 = (ZinIrOpLayer **)*((_QWORD *)v28 + 12);
            while (v35 != v34)
            {
              v43 = 0;
              v43 = *v35;
              if (v16 != (ZinIrOpLayer ***)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a5, &v43))
              {
                v36 = *((_QWORD *)v43 + 11);
                v37 = *((_QWORD *)v43 + 12);
                while (v36 != v37)
                {
                  v39 = *(ZinIrOpLayer ***)(*(_QWORD *)v36 + 112);
                  v38 = *(ZinIrOpLayer ***)(*(_QWORD *)v36 + 120);
                  while (v39 != v38)
                  {
                    v42 = 0;
                    v42 = *v39;
                    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)a5, &v42);
                    ++v39;
                  }
                  v36 += 8;
                }
              }
              ++v35;
            }
          }
          v40 = (uint64_t *)v27[1];
          if (v40)
          {
            do
            {
              v41 = v40;
              v40 = (uint64_t *)*v40;
            }
            while (v40);
          }
          else
          {
            do
            {
              v41 = (uint64_t *)v27[2];
              v26 = *v41 == (_QWORD)v27;
              v27 = v41;
            }
            while (!v26);
          }
          v27 = v41;
        }
        while (v41 != (uint64_t *)v45);
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v44, v45[0]);
  }
  if (__p)
  {
    v49 = (uint64_t **)__p;
    operator delete(__p);
  }
}

void sub_206F4BD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *FindReacheableToCluster(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3)
{
  ZinIrOpLayer *result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  ZinIrOpLayer *v9;

  v9 = a1;
  if (*((_QWORD *)a1 + 6) > a3)
    return 0;
  v6 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, &v9);
  result = v9;
  if (a2 + 8 == v6)
  {
    v7 = (_QWORD *)*((_QWORD *)v9 + 14);
    v8 = (_QWORD *)*((_QWORD *)v9 + 15);
    while (v7 != v8)
    {
      result = (ZinIrOpLayer *)FindReacheableToCluster(*v7, a2, a3);
      if (result)
        return result;
      ++v7;
    }
    return 0;
  }
  return result;
}

uint64_t IdentifyConnectedComponents(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  ZinIrOpLayer *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer *v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;
  uint64_t v22;
  ZinIrOpLayer **v23;
  ZinIrOpLayer **v24;
  ZinIrOpLayer *v25;
  ZinIrOpLayer *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  ZinIrOpLayer *v32;
  ZinIrOpLayer *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  ZinIrOpLayer *v42;
  char *v43;
  ZinIrOpLayer *v44;
  uint64_t v45;
  ZinIrOpLayer *v46;
  ZinIrOpLayer *v47;
  ZinIrOpLayer *v48;
  char *v49;
  ZinIrOpLayer *v50;
  _OWORD v51[2];
  int v52;
  _OWORD v53[2];
  int v54;

  memset(v53, 0, sizeof(v53));
  v54 = 1065353216;
  memset(v51, 0, sizeof(v51));
  v52 = 1065353216;
  v3 = a1 + 1;
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    v39 = a1 + 1;
    do
    {
      v50 = (ZinIrOpLayer *)v2[4];
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v53, &v50))
      {
        v40 = v2;
        v7 = v50;
        v8 = (char *)operator new(8uLL);
        *(_QWORD *)v8 = v7;
        v47 = v7;
        v48 = (ZinIrOpLayer *)v6;
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,unsigned long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,unsigned long>>((uint64_t)v53, &v47, &v47);
        IdentifyConnectedComponents(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &)::$_0::operator()(v6, v50, a2);
        v9 = v8 + 8;
        v43 = v8 + 8;
        do
        {
          v41 = v9;
          v42 = (ZinIrOpLayer *)v8;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v10 = *(_QWORD *)v8;
            v11 = *(ZinIrOpLayer ***)(*(_QWORD *)v8 + 88);
            v12 = *(ZinIrOpLayer ***)(*(_QWORD *)v8 + 96);
            while (v11 != v12)
            {
              v46 = 0;
              v46 = *v11;
              if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v46)&& !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v53, &v46))
              {
                v13 = v48;
                if (v48 >= (ZinIrOpLayer *)v49)
                {
                  v15 = (v48 - v47) >> 3;
                  if ((unint64_t)(v15 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v16 = (v49 - (char *)v47) >> 2;
                  if (v16 <= v15 + 1)
                    v16 = v15 + 1;
                  if ((unint64_t)(v49 - (char *)v47) >= 0x7FFFFFFFFFFFFFF8)
                    v17 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v17 = v16;
                  if (v17)
                    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v49, v17);
                  else
                    v18 = 0;
                  v19 = &v18[8 * v15];
                  *(_QWORD *)v19 = v46;
                  v14 = (ZinIrOpLayer *)(v19 + 8);
                  v21 = v47;
                  v20 = v48;
                  if (v48 != v47)
                  {
                    do
                    {
                      v22 = *((_QWORD *)v20 - 1);
                      v20 = (ZinIrOpLayer *)((char *)v20 - 8);
                      *((_QWORD *)v19 - 1) = v22;
                      v19 -= 8;
                    }
                    while (v20 != v21);
                    v20 = v47;
                  }
                  v47 = (ZinIrOpLayer *)v19;
                  v48 = v14;
                  v49 = &v18[8 * v17];
                  if (v20)
                    operator delete(v20);
                }
                else
                {
                  *(_QWORD *)v48 = v46;
                  v14 = (ZinIrOpLayer *)((char *)v13 + 8);
                }
                v48 = v14;
                v44 = v46;
                v45 = v6;
                std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,unsigned long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,unsigned long>>((uint64_t)v53, &v44, &v44);
                IdentifyConnectedComponents(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &)::$_0::operator()(v6, v46, a2);
              }
              ++v11;
            }
            v23 = *(ZinIrOpLayer ***)(v10 + 112);
            v24 = *(ZinIrOpLayer ***)(v10 + 120);
            while (v23 != v24)
            {
              v46 = 0;
              v46 = *v23;
              if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v46)&& !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v53, &v46))
              {
                v25 = v48;
                if (v48 >= (ZinIrOpLayer *)v49)
                {
                  v27 = (v48 - v47) >> 3;
                  if ((unint64_t)(v27 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v28 = (v49 - (char *)v47) >> 2;
                  if (v28 <= v27 + 1)
                    v28 = v27 + 1;
                  if ((unint64_t)(v49 - (char *)v47) >= 0x7FFFFFFFFFFFFFF8)
                    v29 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v29 = v28;
                  if (v29)
                    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v49, v29);
                  else
                    v30 = 0;
                  v31 = &v30[8 * v27];
                  *(_QWORD *)v31 = v46;
                  v26 = (ZinIrOpLayer *)(v31 + 8);
                  v33 = v47;
                  v32 = v48;
                  if (v48 != v47)
                  {
                    do
                    {
                      v34 = *((_QWORD *)v32 - 1);
                      v32 = (ZinIrOpLayer *)((char *)v32 - 8);
                      *((_QWORD *)v31 - 1) = v34;
                      v31 -= 8;
                    }
                    while (v32 != v33);
                    v32 = v47;
                  }
                  v47 = (ZinIrOpLayer *)v31;
                  v48 = v26;
                  v49 = &v30[8 * v29];
                  if (v32)
                    operator delete(v32);
                }
                else
                {
                  *(_QWORD *)v48 = v46;
                  v26 = (ZinIrOpLayer *)((char *)v25 + 8);
                }
                v48 = v26;
                v44 = v46;
                v45 = v6;
                std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,unsigned long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,unsigned long>>((uint64_t)v53, &v44, &v44);
                IdentifyConnectedComponents(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &)::$_0::operator()(v6, v46, a2);
              }
              ++v23;
            }
            v8 += 8;
          }
          while (v8 != v43);
          v8 = (char *)v47;
          v43 = (char *)v48;
          v9 = v49;
          v47 = v42;
          v49 = v41;
          if (v42)
          {
            v48 = v42;
            operator delete(v42);
          }
        }
        while (v43 != v8);
        ++v6;
        if (v8)
          operator delete(v8);
        v3 = v39;
        v2 = v40;
      }
      v35 = (_QWORD *)v2[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v2[2];
          v37 = *v36 == (_QWORD)v2;
          v2 = v36;
        }
        while (!v37);
      }
      v2 = v36;
    }
    while (v36 != v3);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v51);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v53);
}

void sub_206F4C204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  uint64_t v22;

  operator delete(v21);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v22 - 128);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ClusterLayersInHighPressureRegionWithBoundaries(_QWORD *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  ZinIrOpLayer *v9;
  void *v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t InputTensor;
  void *v20[3];
  void *__p;
  unint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25[2];
  _QWORD **v26;
  _QWORD *v27[2];
  _QWORD v28[3];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _QWORD **v32;
  _QWORD *v33[2];
  char v34;
  ZinIrOpLayer *v35;
  uint64_t *v36;
  _QWORD *v37[2];
  uint64_t *v38;
  _QWORD *v39[3];

  v39[0] = 0;
  v39[1] = 0;
  v37[1] = 0;
  v38 = (uint64_t *)v39;
  v36 = (uint64_t *)v37;
  v37[0] = 0;
  v5 = a1[1];
  if (*(_QWORD *)(v5 + 360) == *(_QWORD *)(v5 + 352))
    ZinAssertImpl("Must run scheduler first");
  v7 = *a2;
  if (*a2 <= a2[1])
  {
    v17 = a5;
    do
    {
      v35 = 0;
      v8 = *(_QWORD *)(v5 + 352);
      if (v7 >= (*(_QWORD *)(v5 + 360) - v8) >> 3)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v9 = *(ZinIrOpLayer **)(v8 + 8 * v7);
      v35 = v9;
      v25[0] = 0;
      v25[1] = 0;
      v27[0] = 0;
      v27[1] = 0;
      v24 = v25;
      v26 = v27;
      v28[0] = v28;
      v28[1] = v28;
      v30[0] = 0;
      v30[1] = 0;
      v28[2] = 0;
      v29 = v30;
      memset(v31, 0, sizeof(v31));
      v33[0] = 0;
      v33[1] = 0;
      v32 = v33;
      v34 = 0;
      if ((*(_DWORD *)(*((_QWORD *)v9 + 8) + 8) & 0xFFFFFFFC) != 0x1C
        && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 112))(v9) & 1) == 0)
      {
        __p = 0;
        v22 = 0;
        v23 = 0;
        (*(void (**)(void **__return_ptr, _QWORD *, ZinIrOpLayer *, uint64_t, uint64_t, void **, _QWORD ***))(*a1 + 112))(v20, a1, v35, 1, 1, &__p, &v24);
        v10 = v20[2];
        if ((!v17
           || a4 + 8 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a4, &v35))&& v10)
        {
          v11 = v35;
          v13 = *((_QWORD *)v35 + 11);
          v12 = *((_QWORD *)v35 + 12);
          if (v22 != (v12 - v13) >> 3)
            ZinAssertImpl("Invalid boundary constraint in Spatial Splitting");
          if (v12 != v13)
          {
            v14 = 0;
            do
            {
              if (v22 <= v14)
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              if (((*(_QWORD *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
              {
                InputTensor = ZinIrOpLayer::GetInputTensor(v11, v14);
                std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v36, &InputTensor, &InputTensor);
                v11 = v35;
              }
              ++v14;
            }
            while (v14 < (uint64_t)(*((_QWORD *)v11 + 12) - *((_QWORD *)v11 + 11)) >> 3);
          }
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v38, &v35, (uint64_t *)&v35);
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, (_QWORD *)v20[1]);
        if (__p)
          operator delete(__p);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33[0]);
      __p = v31;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30[0]);
      std::__list_imp<ZinIrSection *>::clear(v28);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24, v25[0]);
      ++v7;
    }
    while (v7 <= a2[1]);
  }
  PressureBasedSubgraphIdentification::FindConnectedAcyclicClusters(a1, (ZinIrOpLayer ***)&v38, &v36, a3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v36, v37[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v38, v39[0]);
}

void sub_206F4C56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v26 - 136, *(_QWORD **)(v26 - 128));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v26 - 112, *(_QWORD **)(v26 - 104));
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::FindConnectedAcyclicClusters(_BYTE *a1, ZinIrOpLayer ***a2, uint64_t **a3, uint64_t *a4)
{
  ZinIrOpLayer ***v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  ZinIrOpLayer ***v12;
  void **v13;
  void **v14;
  ZinIrOpLayer ***v15;
  void **v16;
  uint64_t *v17;
  void **v18[3];
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  void **v25;
  uint64_t *v26;
  uint64_t v27;
  ZinIrOpLayer **v28;

  v28 = (ZinIrOpLayer **)*MEMORY[0x24BDAC8D0];
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v25, a2);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = (void **)&v22;
  LOBYTE(v20) = 0;
  v22 = (uint64_t *)operator new(0x18uLL);
  v23 = v22;
  v24 = v22 + 3;
  v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t)&v24, (ZinIrOpLayer ***)&v25, &v28, v22);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v25, v26);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v7 = (ZinIrOpLayer ***)v22;
  v8 = v23;
  if (v22 == v23)
  {
    v17 = 0;
    v16 = 0;
  }
  else
  {
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v18, v7);
        PressureBasedSubgraphIdentification::IdentifyConnectedClusters((uint64_t)a1, v18, (uint64_t)a3, (uint64_t *)&v19);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v18, v18[1]);
        v7 += 3;
      }
      while (v7 != (ZinIrOpLayer ***)v8);
      v10 = v22;
      v9 = v23;
      if (v23 != v22)
      {
        do
        {
          v11 = v9 - 3;
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v9 - 3), (_QWORD *)*(v9 - 2));
          v9 = v11;
        }
        while (v11 != v10);
      }
      v23 = v10;
      v12 = (ZinIrOpLayer ***)v19;
      v13 = v20;
      if (v19 != v20)
      {
        do
        {
          if (PressureBasedSubgraphIdentification::AddBoundaryTensorsForAcyclicCluster(a1, v12, a3))
            std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>((uint64_t *)&v22, v23, v12);
          else
            std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>((uint64_t *)&v25, v26, v12);
          v12 += 3;
        }
        while (v12 != (ZinIrOpLayer ***)v13);
        v12 = (ZinIrOpLayer ***)v19;
        v14 = v20;
        if (v20 != v19)
        {
          do
          {
            v15 = (ZinIrOpLayer ***)(v14 - 3);
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v14 - 3), *(v14 - 2));
            v14 = (void **)v15;
          }
          while (v15 != v12);
        }
      }
      v20 = (void **)v12;
      v18[0] = (void **)&v19;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
      v7 = (ZinIrOpLayer ***)v22;
      v8 = v23;
    }
    while (v22 != v23);
    v16 = v25;
    v17 = v26;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>,0>(v16, v17, a4);
  v19 = (void **)&v25;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v25 = (void **)&v22;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_206F4C7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a13 = &a19;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a19 = (void **)&a16;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IdentifyConnectedClusters(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  ZinIrOpLayer *v31;
  uint64_t v32;
  _OWORD v33[2];
  int v34;
  _BYTE v35[22];
  _QWORD buf[4];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  if (*(_BYTE *)(a1 + 73))
  {
    v8 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
    v10 = v9;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134218240;
      *(_QWORD *)((char *)buf + 4) = v8;
      WORD2(buf[1]) = 2048;
      *(_QWORD *)((char *)&buf[1] + 6) = v10;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "IdentifyConnectedCluster [%zu:%zu]", (uint8_t *)buf, 0x16u);
    }
  }
  v11 = a2 + 1;
  v12 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v13 = (_QWORD *)(a3 + 8);
    do
    {
      v32 = v12[4];
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v33, &v32))
      {
        std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>(a4);
        if (*(_BYTE *)(a1 + 74) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "    Initializing cluster", (uint8_t *)buf, 2u);
        }
        v37 = 0u;
        memset(buf, 0, sizeof(buf));
        *(_QWORD *)v35 = v32;
        *(_QWORD *)&v35[8] = 0;
        std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::push_back(buf, (__n128 *)v35);
        while (*((_QWORD *)&v37 + 1))
        {
          v14 = *(_QWORD *)(buf[1] + (((unint64_t)v37 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v37;
          v15 = *(_QWORD *)(v14 + 8);
          v31 = *(ZinIrOpLayer **)v14;
          *(_QWORD *)&v37 = v37 + 1;
          --*((_QWORD *)&v37 + 1);
          if ((unint64_t)v37 >= 0x200)
          {
            operator delete(*(void **)buf[1]);
            buf[1] += 8;
            *(_QWORD *)&v37 = v37 - 256;
          }
          if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v33, &v31))
          {
            std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v33, &v31, &v31);
            if (v11 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, &v31))
            {
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)(a4[1] - 24), &v31, (uint64_t *)&v31);
              if (*(_BYTE *)(a1 + 74))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
                {
                  v17 = (_QWORD *)((char *)v31 + 24);
                  if (*((char *)v31 + 47) < 0)
                    v17 = (_QWORD *)*v17;
                  v18 = *((_QWORD *)v31 + 6);
                  *(_DWORD *)v35 = 136315394;
                  *(_QWORD *)&v35[4] = v17;
                  *(_WORD *)&v35[12] = 2048;
                  *(_QWORD *)&v35[14] = v18;
                  _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tAdding %s : %zu to connected cluster", v35, 0x16u);
                }
                if (v15 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
                {
                  v19 = (_QWORD *)(v15 + 24);
                  if (*(char *)(v15 + 47) < 0)
                    v19 = (_QWORD *)*v19;
                  v20 = *(_QWORD *)(v15 + 48);
                  *(_DWORD *)v35 = 136315394;
                  *(_QWORD *)&v35[4] = v19;
                  *(_WORD *)&v35[12] = 2048;
                  *(_QWORD *)&v35[14] = v20;
                  _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\t    Connection from %s : %zu", v35, 0x16u);
                }
              }
              v21 = v31;
              v23 = (_QWORD *)*((_QWORD *)v31 + 11);
              v22 = (_QWORD *)*((_QWORD *)v31 + 12);
              if (v23 != v22)
              {
                do
                {
                  v24 = *v23;
                  *(_QWORD *)v35 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v23 + 32))(*v23, 0, 0);
                  if (v13 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3, (uint64_t *)v35))
                  {
                    *(_QWORD *)v35 = v24;
                    *(_QWORD *)&v35[8] = v31;
                    v16 = std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::push_back(buf, (__n128 *)v35);
                  }
                  ++v23;
                }
                while (v23 != v22);
                v21 = v31;
              }
              *(_QWORD *)v35 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v21 + 32))(v21, 0, 0, v16);
              if (v13 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3, (uint64_t *)v35))
              {
                v25 = (_QWORD *)*((_QWORD *)v31 + 14);
                v26 = (_QWORD *)*((_QWORD *)v31 + 15);
                while (v25 != v26)
                {
                  *(_QWORD *)v35 = *v25;
                  *(_QWORD *)&v35[8] = v31;
                  std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::push_back(buf, (__n128 *)v35);
                  ++v25;
                }
              }
            }
          }
        }
        std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::~deque[abi:ne180100](buf);
      }
      v27 = (_QWORD *)v12[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v12[2];
          v29 = *v28 == (_QWORD)v12;
          v12 = v28;
        }
        while (!v29);
      }
      v12 = v28;
    }
    while (v28 != v11);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
}

void sub_206F4CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::~deque[abi:ne180100]((uint64_t *)va1);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = a1 + 1;
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 0x7FFFFFFFFFFFFFFFLL;
  v3 = 0x8000000000000000;
  result = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v5 = *(_QWORD *)(v2[4] + 48);
    if (v5 < result)
      result = *(_QWORD *)(v2[4] + 48);
    if (v3 <= v5)
      v3 = *(_QWORD *)(v2[4] + 48);
    v6 = (_QWORD *)v2[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v2[2];
        v8 = *v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v2 = v7;
  }
  while (v7 != v1);
  return result;
}

_QWORD *std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[24 * v10];
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 1) = 0;
    *(_QWORD *)v12 = v12 + 8;
    v14[2] = v12 + 24;
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(a1, v14);
    v6 = (_QWORD *)a1[1];
    std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_206F4CE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *PressureBasedSubgraphIdentification::ComputeInputAndOutputNodes(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BOOL4 v15;
  ZinIrOpLayer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  ZinIrOpLayer *v30;
  uint64_t v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v9 = result;
    v10 = (_QWORD *)(a3 + 8);
    do
    {
      v30 = (ZinIrOpLayer *)v5[4];
      v11 = *((_QWORD *)v30 + 11);
      v12 = *((_QWORD *)v30 + 12);
      if (v11 == v12)
      {
        v15 = 0;
      }
      else
      {
        v13 = v11 + 8;
        while (1)
        {
          *(_QWORD *)buf = *(_QWORD *)(v13 - 8);
          if (v6 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)buf))break;
          v31 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf, 0, 0);
          v14 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3, &v31);
          v15 = v10 != v14;
          if (v10 == v14)
          {
            v22 = v13 == v12;
            v13 += 8;
            if (!v22)
              continue;
          }
          goto LABEL_12;
        }
        v15 = 1;
      }
LABEL_12:
      v16 = v30;
      v17 = *((_QWORD *)v30 + 14);
      v18 = *((_QWORD *)v30 + 15);
      if (v17 == v18)
      {
        v21 = 0;
      }
      else
      {
        v19 = v17 + 8;
        do
        {
          *(_QWORD *)buf = *(_QWORD *)(v19 - 8);
          v20 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)buf);
          v21 = v6 == (_QWORD *)v20;
          v22 = v6 == (_QWORD *)v20 || v19 == v18;
          v19 += 8;
        }
        while (!v22);
        v16 = v30;
      }
      *(_QWORD *)buf = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
      result = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3, (uint64_t *)buf);
      v23 = v10 != result || v21;
      if (v15)
      {
        if (*((_BYTE *)v9 + 74) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          v24 = (_QWORD *)((char *)v30 + 24);
          if (*((char *)v30 + 47) < 0)
            v24 = (_QWORD *)*v24;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v24;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tInput node : %s", buf, 0xCu);
        }
        result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a4, &v30, (uint64_t *)&v30);
      }
      if (v23)
      {
        if (*((_BYTE *)v9 + 74) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          v25 = (_QWORD *)((char *)v30 + 24);
          if (*((char *)v30 + 47) < 0)
            v25 = (_QWORD *)*v25;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v25;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tOutput node : %s", buf, 0xCu);
        }
        result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a5, &v30, (uint64_t *)&v30);
      }
      v26 = (_QWORD *)v5[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v5[2];
          v22 = *v27 == (_QWORD)v5;
          v5 = v27;
        }
        while (!v22);
      }
      v5 = v27;
    }
    while (v27 != v6);
  }
  return result;
}

void PressureBasedSubgraphIdentification::BuildIdMaps(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v7 = a2[2];
  v16 = 0;
  std::vector<ZinIrOpLayer *>::vector(&v17, v7, &v16);
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v8;
    operator delete(v8);
  }
  *(_OWORD *)a4 = v17;
  *(_QWORD *)(a4 + 16) = v18;
  v11 = (_QWORD *)*a2;
  v9 = a2 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    v12 = 0;
    do
    {
      v16 = v10[4];
      *(_QWORD *)&v17 = &v16;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(a3, &v16, (uint64_t)&std::piecewise_construct, (_QWORD **)&v17)[3] = v12;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v16;
      v13 = (_QWORD *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v10[2];
          v15 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      ++v12;
      v10 = v14;
    }
    while (v14 != v9);
  }
}

void PressureBasedSubgraphIdentification::ComputeReachabilityMaps(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  int v49;
  _QWORD **v50;
  _QWORD *v51[2];
  _QWORD **v52;
  _QWORD *v53[2];
  void **v54;

  v53[0] = 0;
  v53[1] = 0;
  v51[1] = 0;
  v52 = v53;
  v50 = v51;
  v51[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD ***, _QWORD ***))(*(_QWORD *)a1 + 200))(a1, a2, a3, &v52, &v50);
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  std::vector<std::vector<BOOL>>::vector(&v46, a2[2]);
  std::vector<std::vector<BOOL>>::__vdeallocate(a6);
  *(_OWORD *)a6 = v46;
  a6[2] = v47;
  v47 = 0;
  v46 = 0uLL;
  v54 = (void **)&v46;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v54);
  std::vector<std::vector<BOOL>>::vector(&v46, a2[2]);
  std::vector<std::vector<BOOL>>::__vdeallocate(a7);
  *(_OWORD *)a7 = v46;
  a7[2] = v47;
  v47 = 0;
  v46 = 0uLL;
  v54 = (void **)&v46;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v54);
  v13 = v50;
  if (v50 != v51)
  {
    do
    {
      PressureBasedSubgraphIdentification::ComputeReachableMap(a1, (uint64_t)a2, a3, (uint64_t)&v50, (ZinIrOpLayer *)v13[4], v48, a4, a6);
      v14 = v13[1];
      if (v14)
      {
        do
        {
          v15 = (_QWORD **)v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD **)v13[2];
          v16 = *v15 == v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != v51);
  }
  v17 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v54 = (void **)v17[4];
      v18 = a2[2];
      v45 = 0;
      std::vector<BOOL>::vector(&v46, v18, &v45);
      v19 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v54);
      if (!v19)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v20 = v19[3];
      v21 = *a7;
      v22 = *a7 + 24 * v20;
      if (*(_QWORD *)v22)
      {
        operator delete(*(void **)v22);
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
      }
      *(_QWORD *)v22 = v46;
      v23 = v21 + 24 * v20;
      *(_QWORD *)(v23 + 8) = *((_QWORD *)&v46 + 1);
      *(_QWORD *)(v23 + 16) = v47;
      v24 = (_QWORD *)v17[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v17[2];
          v16 = *v25 == (_QWORD)v17;
          v17 = v25;
        }
        while (!v16);
      }
      v17 = v25;
    }
    while (v25 != a2 + 1);
  }
  v26 = *a6;
  v27 = a6[1];
  v28 = v27 - *a6;
  if (v27 != *a6)
  {
    v29 = 0;
    v30 = v28 / 24;
    v31 = *a7;
    if (v30 <= 1)
      v30 = 1;
    do
    {
      v32 = v26 + 24 * v29;
      v34 = *(_QWORD *)(v32 + 8);
      v33 = (unint64_t *)(v32 + 8);
      if (v34)
      {
        v35 = 0;
        v36 = *(_QWORD *)(v26 + 24 * v29);
        v37 = v29 >> 6;
        v38 = (uint64_t *)v31;
        do
        {
          v40 = *v38;
          v38 += 3;
          v39 = v40;
          v41 = *(_QWORD *)(v40 + 8 * v37);
          v42 = v41 | (1 << v29);
          v43 = v41 & ~(1 << v29);
          if (((*(_QWORD *)(v36 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
            v44 = v42;
          else
            v44 = v43;
          *(_QWORD *)(v39 + 8 * v37) = v44;
          ++v35;
        }
        while (v35 < *v33);
      }
      ++v29;
    }
    while (v29 != v30);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v48);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v52, v53[0]);
}

void sub_206F4D54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,char a23,_QWORD *a24)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a20, a21);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ComputeReachableMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrOpLayer *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *i;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *j;
  uint64_t v51;
  ZinIrOpLayer *v52;
  __int128 buf;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v52 = a5;
  v12 = (_QWORD *)*((_QWORD *)a5 + 14);
  v13 = (_QWORD *)*((_QWORD *)a5 + 15);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = a2 + 8;
    do
    {
      *(_QWORD *)&buf = *v12;
      if (v15 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)&buf))++v14;
      ++v12;
    }
    while (v12 != v13);
  }
  v16 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a4, &v52)+ v14;
  *(_QWORD *)&buf = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0, 0);
  if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, (uint64_t *)&buf))
  {
    v16 = 1;
  }
  *(_QWORD *)&buf = &v52;
  v17 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a6, &v52, (uint64_t)&std::piecewise_construct, (_QWORD **)&buf);
  ++v17[3];
  v18 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a6, &v52);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v18[3] >= v16)
  {
    v19 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a6, &v52);
    if (!v19)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v19[3] > v16)
      ZinAssertImpl("Invalid visiting of cluster");
    v20 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a7, &v52);
    if (!v20)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v21 = v20[3];
    v22 = *(_QWORD *)(a2 + 16);
    LOBYTE(v51) = 0;
    std::vector<BOOL>::vector(&buf, v22, (unsigned __int8 *)&v51);
    v23 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a7, &v52);
    if (!v23)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v24 = v23[3];
    v25 = *a8;
    v26 = *a8 + 24 * v24;
    if (*(_QWORD *)v26)
    {
      operator delete(*(void **)v26);
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 16) = 0;
    }
    *(_QWORD *)v26 = buf;
    v27 = v25 + 24 * v24;
    *(_QWORD *)(v27 + 8) = *((_QWORD *)&buf + 1);
    *(_QWORD *)(v27 + 16) = v54;
    v28 = (_QWORD *)*((_QWORD *)v52 + 14);
    for (i = (_QWORD *)*((_QWORD *)v52 + 15); v28 != i; ++v28)
    {
      *(_QWORD *)&buf = *v28;
      v51 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0, 0);
      if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, &v51))
      {
        break;
      }
      if (a2 + 8 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)&buf))
      {
        v30 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a7, &buf);
        if (!v30)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v31 = v30[3];
        v32 = *a8;
        if (0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3) <= v31)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v33 = (_QWORD *)(v32 + 24 * v31);
        if (v33[1])
        {
          v34 = 0;
          v35 = *(_QWORD *)(v32 + 24 * v21);
          do
          {
            v36 = v34 >> 6;
            v37 = 1 << v34;
            v38 = *(_QWORD *)(v35 + 8 * (v34 >> 6));
            if ((v38 & (1 << v34)) != 0 || (*(_QWORD *)(*v33 + 8 * v36) & v37) != 0)
              v39 = v38 | v37;
            else
              v39 = v38 & ~v37;
            *(_QWORD *)(v35 + 8 * v36) = v39;
            ++v34;
          }
          while (v34 < v33[1]);
        }
      }
    }
    v40 = *a8;
    v41 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a7, &v52);
    if (!v41)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *(_QWORD *)(*(_QWORD *)(v40 + 24 * v21) + ((v41[3] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41[3];
    v42 = *a8;
    v43 = a8[1];
    if (*a8 == v43)
      goto LABEL_58;
    v44 = 0;
    v45 = *a8;
    do
    {
      if (*(_QWORD *)(v45 + 8))
        ++v44;
      v45 += 24;
    }
    while (v45 != v43);
    if (__ROR8__(0x8F5C28F5C28F5C29 * v44, 2) <= 0x28F5C28F5C28F5CuLL)
    {
LABEL_58:
      if (*(_BYTE *)(a1 + 74) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Forward Reachable map size %zu", (uint8_t *)&buf, 0xCu);
      }
    }
    v46 = (_QWORD *)*((_QWORD *)v52 + 11);
    for (j = (_QWORD *)*((_QWORD *)v52 + 12); v46 != j; ++v46)
    {
      *(_QWORD *)&buf = *v46;
      if (a2 + 8 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)&buf))
      {
        v51 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)buf + 32))(buf, 0, 0);
        if ((_QWORD *)(a3 + 8) == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3, &v51))PressureBasedSubgraphIdentification::ComputeReachableMap(a1, a2, a3, a4, buf, a6, a7, a8);
      }
    }
  }
}

void sub_206F4DAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::FindCyclicPaths(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, void **a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  ZinIrOpLayer *v15;
  ZinIrOpLayer **v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  ZinIrOpLayer **v27;
  ZinIrOpLayer *v28;
  char *v29;
  char *v30;
  ZinIrOpLayer **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  ZinIrOpLayer *v35;
  _OWORD v36[2];
  int v37;
  _OWORD v38[2];
  __int128 v39;
  ZinIrOpLayer *v40;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = (_QWORD *)(a2 + 8);
  v8 = *(_QWORD **)(a2 + 8);
  if (v8)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      v9 = (_QWORD *)v7[2];
      v10 = *v9 == (_QWORD)v7;
      v7 = v9;
    }
    while (v10);
  }
  v11 = a3 + 1;
  v12 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v13 = *(_QWORD *)(v9[4] + 48);
    v14 = a1 + 8;
    do
    {
      v40 = (ZinIrOpLayer *)v12[4];
      v39 = 0u;
      memset(v38, 0, sizeof(v38));
      std::deque<ZinIrOpLayer *>::push_back(v38, &v40);
      memset(v36, 0, sizeof(v36));
      v37 = 1065353216;
      while (*((_QWORD *)&v39 + 1))
      {
        v35 = 0;
        v35 = *(ZinIrOpLayer **)(*(_QWORD *)(*((_QWORD *)&v38[0] + 1)
                                           + (((unint64_t)v39 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (v39 & 0x1FF));
        *(_QWORD *)&v39 = v39 + 1;
        --*((_QWORD *)&v39 + 1);
        if ((unint64_t)v39 >= 0x400)
        {
          operator delete(**((void ***)&v38[0] + 1));
          *((_QWORD *)&v38[0] + 1) += 8;
          *(_QWORD *)&v39 = v39 - 512;
        }
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v36, &v35))
        {
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v36, &v35, &v35);
          if (*((_QWORD *)v35 + 6) <= v13)
          {
            if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, &v35)|| (v15 = v35, v35 == v40))
            {
              if (v14 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a1, &v35)|| v35 == v40)
              {
                v20 = (uint64_t *)*((_QWORD *)v35 + 14);
                v19 = (uint64_t *)*((_QWORD *)v35 + 15);
                while (v20 != v19)
                {
                  v34 = 0;
                  v34 = *v20;
                  std::deque<ZinIrOpLayer *>::push_back(v38, &v34);
                  ++v20;
                }
              }
            }
            else
            {
              v16 = (ZinIrOpLayer **)a4[1];
              v17 = (unint64_t)a4[2];
              if ((unint64_t)v16 >= v17)
              {
                v21 = ((char *)v16 - (_BYTE *)*a4) >> 4;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v23 = v17 - (_QWORD)*a4;
                if (v23 >> 3 > v22)
                  v22 = v23 >> 3;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                  v24 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v24 = v22;
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a4 + 2), v24);
                v27 = (ZinIrOpLayer **)&v25[16 * v21];
                v28 = v35;
                *v27 = v40;
                v27[1] = v28;
                v30 = (char *)*a4;
                v29 = (char *)a4[1];
                v31 = v27;
                if (v29 != *a4)
                {
                  do
                  {
                    *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
                    v31 -= 2;
                    v29 -= 16;
                  }
                  while (v29 != v30);
                  v29 = (char *)*a4;
                }
                v18 = v27 + 2;
                *a4 = v31;
                a4[1] = v27 + 2;
                a4[2] = &v25[16 * v26];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *v16 = v40;
                v16[1] = v15;
                v18 = v16 + 2;
              }
              a4[1] = v18;
            }
          }
        }
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
      std::deque<unsigned long>::~deque[abi:ne180100](v38);
      v32 = (_QWORD *)v12[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v12[2];
          v10 = *v33 == (_QWORD)v12;
          v12 = v33;
        }
        while (!v10);
      }
      v12 = v33;
    }
    while (v33 != v11);
  }
}

void sub_206F4DDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va1);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::FindForkJoinPairForCyclicPath(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t i;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  NSObject *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  _BYTE buf[12];
  __int16 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, a2);
  if (!v12)
    goto LABEL_93;
  v13 = v12[3];
  v14 = *a6;
  if (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3) <= v13)
LABEL_95:
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v15 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, a2 + 1);
  if (!v15)
LABEL_93:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = v15[3];
  if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) <= v16)
LABEL_94:
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v81 = v14;
  v82 = v13;
  v84 = (_QWORD *)(v14 + 24 * v13);
  v79 = *a5;
  v80 = v15[3];
  v86 = (_QWORD *)(*a5 + 24 * v16);
  v78 = a1;
  if (*(_BYTE *)(a1 + 74))
  {
    v17 = v14 + 24 * v13;
    v20 = *(_QWORD *)(v17 + 8);
    v19 = (unint64_t *)(v17 + 8);
    v18 = v20;
    if (v20)
    {
      v21 = 0;
      v22 = MEMORY[0x24BDACB70];
      do
      {
        if (((*(_QWORD *)(*v84 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        {
          v23 = *a4;
          if (v21 >= (a4[1] - *a4) >> 3)
LABEL_96:
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            v24 = *(_QWORD *)(v23 + 8 * v21);
            v25 = (_QWORD *)(v24 + 24);
            if (*(char *)(v24 + 47) < 0)
              v25 = (_QWORD *)*v25;
            v26 = *(_QWORD *)(v24 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v25;
            v89 = 2048;
            v90 = v26;
            _os_log_impl(&dword_2069AB000, v22, OS_LOG_TYPE_INFO, "    Can Reach Output %s : %zu", buf, 0x16u);
            v18 = *v19;
          }
        }
        ++v21;
      }
      while (v21 < v18);
    }
    v27 = v79 + 24 * v80;
    v30 = *(_QWORD *)(v27 + 8);
    v29 = (unint64_t *)(v27 + 8);
    v28 = v30;
    if (v30)
    {
      v31 = 0;
      v32 = MEMORY[0x24BDACB70];
      do
      {
        if (((*(_QWORD *)(*v86 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
        {
          v33 = *a4;
          if (v31 >= (a4[1] - *a4) >> 3)
            goto LABEL_96;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            v34 = *(_QWORD *)(v33 + 8 * v31);
            v35 = (_QWORD *)(v34 + 24);
            if (*(char *)(v34 + 47) < 0)
              v35 = (_QWORD *)*v35;
            v36 = *(_QWORD *)(v34 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v35;
            v89 = 2048;
            v90 = v36;
            _os_log_impl(&dword_2069AB000, v32, OS_LOG_TYPE_INFO, "    Input Can Reach %s : %zu", buf, 0x16u);
            v28 = *v29;
          }
        }
        ++v31;
      }
      while (v31 < v28);
    }
  }
  v83 = (unint64_t *)(v81 + 24 * v82 + 8);
  v37 = *v83 - 1;
  if (v37 >= 0)
  {
    v38 = (unint64_t *)(v79 + 24 * v80 + 8);
    do
    {
      if (*v83 <= v37)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      if (((*(_QWORD *)(*v84 + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
      {
        *(_QWORD *)buf = 0;
        if (v37 >= (unint64_t)((a4[1] - *a4) >> 3))
          goto LABEL_96;
        *(_QWORD *)buf = *(_QWORD *)(*a4 + 8 * v37);
        v39 = *v38;
        if (*v38)
        {
          for (i = 0; v39 > i; ++i)
          {
            if ((*(_QWORD *)(*v86 + 8 * (i >> 6)) & (1 << i)) != 0)
            {
              if (i >= (a4[1] - *a4) >> 3)
                goto LABEL_96;
              v41 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, buf);
              if (!v41)
                goto LABEL_93;
              v42 = v41[3];
              if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) <= v42)
                goto LABEL_94;
              v43 = (_QWORD *)(*a5 + 24 * v42);
              if (v43[1] <= i)
LABEL_97:
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              if ((*(_QWORD *)(*v43 + 8 * (i >> 6)) & (1 << i)) != 0)
                return *(_QWORD *)buf;
              v39 = *v38;
            }
          }
        }
      }
    }
    while (v37-- >= 1);
  }
  if (*(_BYTE *)(v78 + 74))
  {
    v45 = *v83;
    if (*v83)
    {
      v46 = 0;
      v47 = MEMORY[0x24BDACB70];
      do
      {
        if (((*(_QWORD *)(*v84 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
        {
          v87 = 0;
          if (v46 >= (a4[1] - *a4) >> 3)
            goto LABEL_96;
          v48 = *(_QWORD *)(*a4 + 8 * v46);
          v87 = v48;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            v49 = (_QWORD *)(v48 + 24);
            if (*(char *)(v48 + 47) < 0)
              v49 = (_QWORD *)*v49;
            v50 = *(_QWORD *)(v48 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v49;
            v89 = 2048;
            v90 = v50;
            _os_log_impl(&dword_2069AB000, v47, OS_LOG_TYPE_INFO, "\tNode that can reach output %s : %zu", buf, 0x16u);
          }
          v51 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
          if (!v51)
            goto LABEL_93;
          v52 = 0;
          while (1)
          {
            v53 = v51[3];
            if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) <= v53)
              goto LABEL_94;
            if (v52 >= *(_QWORD *)(*a5 + 24 * v53 + 8))
              break;
            v54 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
            if (!v54)
              goto LABEL_93;
            v55 = v54[3];
            if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) <= v55)
              goto LABEL_94;
            if (((*(_QWORD *)(*(_QWORD *)(*a5 + 24 * v55) + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
            {
              v56 = *a4;
              if (v52 >= (a4[1] - *a4) >> 3)
                goto LABEL_96;
              if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
              {
                v57 = *(_QWORD *)(v56 + 8 * v52);
                v58 = (_QWORD *)(v57 + 24);
                if (*(char *)(v57 + 47) < 0)
                  v58 = (_QWORD *)*v58;
                v59 = *(_QWORD *)(v57 + 48);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v58;
                v89 = 2048;
                v90 = v59;
                _os_log_impl(&dword_2069AB000, v47, OS_LOG_TYPE_INFO, "\t    Can be reached %s : %zu", buf, 0x16u);
              }
            }
            ++v52;
            v51 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
            if (!v51)
              goto LABEL_93;
          }
          v45 = *v83;
        }
        ++v46;
      }
      while (v46 < v45);
    }
    v60 = v79 + 24 * v80;
    v61 = *(_QWORD *)(v60 + 8);
    v85 = (unint64_t *)(v60 + 8);
    if (v61)
    {
      v62 = 0;
      v63 = MEMORY[0x24BDACB70];
      do
      {
        if (((*(_QWORD *)(*v86 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
        {
          v87 = 0;
          if (v62 >= (a4[1] - *a4) >> 3)
            goto LABEL_96;
          v64 = *(_QWORD *)(*a4 + 8 * v62);
          v87 = v64;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
          {
            v65 = (_QWORD *)(v64 + 24);
            if (*(char *)(v64 + 47) < 0)
              v65 = (_QWORD *)*v65;
            v66 = *(_QWORD *)(v64 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v65;
            v89 = 2048;
            v90 = v66;
            _os_log_impl(&dword_2069AB000, v63, OS_LOG_TYPE_INFO, "\tNode reachable from input %s : %zu", buf, 0x16u);
          }
          v67 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
          if (!v67)
            goto LABEL_93;
          v68 = 0;
          while (1)
          {
            v69 = v67[3];
            if (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3) <= v69)
              goto LABEL_95;
            if (v68 >= *(_QWORD *)(*a6 + 24 * v69 + 8))
              break;
            v70 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
            if (!v70)
              goto LABEL_93;
            v71 = v70[3];
            if (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3) <= v71)
              goto LABEL_95;
            v72 = (_QWORD *)(*a6 + 24 * v71);
            if (v72[1] <= v68)
              goto LABEL_97;
            if (((*(_QWORD *)(*v72 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v68) & 1) != 0)
            {
              v73 = *a4;
              if (v68 >= (a4[1] - *a4) >> 3)
                goto LABEL_96;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
              {
                v74 = *(_QWORD *)(v73 + 8 * v68);
                v75 = (_QWORD *)(v74 + 24);
                if (*(char *)(v74 + 47) < 0)
                  v75 = (_QWORD *)*v75;
                v76 = *(_QWORD *)(v74 + 48);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v75;
                v89 = 2048;
                v90 = v76;
                _os_log_impl(&dword_2069AB000, v63, OS_LOG_TYPE_INFO, "\t    Can reach %s : %zu", buf, 0x16u);
              }
            }
            ++v68;
            v67 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v87);
            if (!v67)
              goto LABEL_93;
          }
          v61 = *v85;
        }
        ++v62;
      }
      while (v62 < v61);
    }
  }
  return 0;
}

uint64_t PressureBasedSubgraphIdentification::AddBoundaryTensorsByForkJoinPairs(_BYTE *a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7)
{
  __int128 *v7;
  __int128 *v8;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  _BYTE buf[12];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  _QWORD *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v8 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    return 1;
  v13 = MEMORY[0x24BDACB70];
  do
  {
    v48 = *v8;
    if (a1[73] && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = (_QWORD *)(v48 + 24);
      if (*(char *)(v48 + 47) < 0)
        v14 = (_QWORD *)*v14;
      v15 = (_QWORD *)(*((_QWORD *)&v48 + 1) + 24);
      if (*(char *)(*((_QWORD *)&v48 + 1) + 47) < 0)
        v15 = (_QWORD *)*v15;
      v16 = *(_QWORD *)(v48 + 48);
      v17 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 48);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v14;
      v53 = 2048;
      v54 = v16;
      v55 = 2080;
      v56 = v15;
      v57 = 2048;
      v58 = v17;
      _os_log_impl(&dword_2069AB000, v13, OS_LOG_TYPE_INFO, "  Cyclic Path [%s %zu] [%s %zu]", buf, 0x2Au);
    }
    v18 = (*(uint64_t (**)(_BYTE *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, &v48, a3, a4, a5, a6);
    v20 = v18;
    v21 = v19;
    v22 = v50;
    if (v50 >= v51)
    {
      v24 = ((char *)v50 - (char *)v49) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v26 = (char *)v51 - (char *)v49;
      if (v51 - v49 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v51, v27);
      else
        v28 = 0;
      v29 = (uint64_t *)&v28[16 * v24];
      *v29 = v20;
      v29[1] = v21;
      v31 = v49;
      v30 = v50;
      v32 = v29;
      if (v50 != v49)
      {
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
          v32 -= 2;
          v30 -= 2;
        }
        while (v30 != v31);
        v30 = v49;
      }
      v23 = v29 + 2;
      v49 = v32;
      v50 = v29 + 2;
      v51 = (uint64_t *)&v28[16 * v27];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v50 = v18;
      v22[1] = v19;
      v23 = v22 + 2;
    }
    v50 = v23;
    if (a1[73])
    {
      v33 = *(v23 - 2);
      if (v33)
      {
        if (*(v23 - 1))
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v34 = (_QWORD *)(v33 + 24);
            if (*(char *)(v33 + 47) < 0)
              v34 = (_QWORD *)*v34;
            v35 = *(_QWORD *)(v33 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v34;
            v53 = 2048;
            v54 = v35;
            _os_log_impl(&dword_2069AB000, v13, OS_LOG_TYPE_INFO, "    Fork Point %s %zu", buf, 0x16u);
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v36 = *(v50 - 1);
            v37 = (_QWORD *)(v36 + 24);
            if (*(char *)(v36 + 47) < 0)
              v37 = (_QWORD *)*v37;
            v38 = *(_QWORD *)(v36 + 48);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v37;
            v53 = 2048;
            v54 = v38;
            _os_log_impl(&dword_2069AB000, v13, OS_LOG_TYPE_INFO, "    Join Point %s %zu", buf, 0x16u);
          }
        }
      }
    }
    ++v8;
  }
  while (v8 != v7);
  v40 = v49;
  v39 = v50;
  if (v49 == v50)
    goto LABEL_55;
  v41 = v49;
  while (!*v41 || v41[1] == 0)
  {
    v41 += 2;
    if (v41 == v50)
    {
      v43 = 0;
      v39 = v49;
      goto LABEL_56;
    }
  }
  if (v49 == v50)
  {
LABEL_55:
    v43 = 1;
  }
  else
  {
    do
    {
      v44 = v40[1];
      if (*v40)
      {
        if (!v44)
          goto LABEL_60;
        *(_QWORD *)buf = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v40 + 32))(*v40, 0, 0);
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(a7, (uint64_t *)buf, (uint64_t *)buf);
      }
      else if (v44)
      {
LABEL_60:
        ZinAssertImpl("Both fork and join point must be found");
      }
      v40 += 2;
    }
    while (v40 != v39);
    v43 = 1;
    v39 = v49;
  }
LABEL_56:
  if (v39)
  {
    v50 = v39;
    operator delete(v39);
  }
  return v43;
}

void sub_206F4EA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PressureBasedSubgraphIdentification::AddBoundaryTensorBySchedule(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  ZinIrOpLayer **v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36[2];
  ZinIrOpLayer *v37;

  v7 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
  v9 = v7 + v8;
  if (v7 + v8 < 0 != __OFADD__(v7, v8))
    ++v9;
  v36[0] = 0;
  v36[1] = 0;
  v35 = (uint64_t *)v36;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 == v11)
    goto LABEL_46;
  v12 = v9 >> 1;
  do
  {
    v32 = v10;
    v13 = std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(&v35, (ZinIrOpLayer **)v10, (uint64_t)&std::piecewise_construct, &v32);
    ++v13[5];
    v14 = v10 + 1;
    v32 = v14;
    v15 = std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(&v35, (ZinIrOpLayer **)v14, (uint64_t)&std::piecewise_construct, &v32);
    ++v15[5];
    v10 = v14 + 1;
  }
  while (v10 != v11);
  v16 = v35;
  if (v35 == (uint64_t *)v36)
    goto LABEL_46;
  v17 = 0;
  do
  {
    if (v16[5])
    {
      v17 = v16[4];
    }
    else
    {
      if (!v17)
        ZinAssertImpl("Boundary Tensor Internal Error");
      v18 = *(_DWORD *)(v17 + 48) - v12;
      if (v18 < 0)
        v18 = v12 - *(_DWORD *)(v17 + 48);
      v19 = *(_DWORD *)(v16[4] + 48) - v12;
      if (v19 < 0)
        v19 = v12 - *(_DWORD *)(v16[4] + 48);
      if (v19 < v18)
        v17 = v16[4];
    }
    v20 = (uint64_t *)v16[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (uint64_t *)v16[2];
        v22 = *v21 == (_QWORD)v16;
        v16 = v21;
      }
      while (!v22);
    }
    v16 = v21;
  }
  while (v21 != (uint64_t *)v36);
  if (!v17)
LABEL_46:
    ZinAssertImpl("Could not find cut-point");
  v23 = a2 + 1;
  v24 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_47;
  v25 = 0;
  do
  {
    v26 = (_QWORD *)v24[4];
    if (v26[6] <= *(_QWORD *)(v17 + 48))
    {
      v32 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*v26 + 32))(v24[4], 0, 0);
      if ((_QWORD *)(a4 + 8) == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a4, (uint64_t *)&v32))
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v32, (const void *)v26[14], v26[15], (uint64_t)(v26[15] - v26[14]) >> 3);
        v27 = (ZinIrOpLayer **)v32;
        v28 = v33;
        if (v32 != v33)
        {
          while (1)
          {
            v37 = *v27;
            if (v23 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, &v37)&& *((_QWORD *)v37 + 6) > *(_QWORD *)(v17 + 48))
            {
              break;
            }
            if (++v27 == (ZinIrOpLayer **)v28)
              goto LABEL_34;
          }
          v37 = (ZinIrOpLayer *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v26 + 32))(v26, 0, 0);
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a4, (uint64_t *)&v37, (uint64_t *)&v37);
          v25 = 1;
LABEL_34:
          v27 = (ZinIrOpLayer **)v32;
        }
        if (v27)
        {
          v33 = (uint64_t *)v27;
          operator delete(v27);
        }
      }
    }
    v29 = (_QWORD *)v24[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (_QWORD *)v24[2];
        v22 = *v30 == (_QWORD)v24;
        v24 = v30;
      }
      while (!v22);
    }
    v24 = v30;
  }
  while (v30 != v23);
  if ((v25 & 1) == 0)
LABEL_47:
    ZinAssertImpl("Cluster subdividing algorithm failure");
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v35, v36[0]);
  return 1;
}

void sub_206F4ED34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

BOOL PressureBasedSubgraphIdentification::AddBoundaryTensorsForAcyclicCluster(_BYTE *a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  void ***v22;
  __int128 v24;
  void *__p;
  void *v26;
  void *v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD **v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  uint64_t v35;
  uint8_t buf[32];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (!a2[2])
    return 0;
  if (a1[73])
  {
    v6 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AddBoundaryTensorForLegalSchedule [%zu:%zu]", buf, 0x16u);
    }
    if (a1[74])
    {
      v10 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 != a2 + 1)
      {
        v11 = MEMORY[0x24BDACB70];
        *(_QWORD *)&v9 = 136315394;
        v24 = v9;
        do
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v12 = v10[4];
            v13 = (_QWORD *)(v12 + 24);
            if (*(char *)(v12 + 47) < 0)
              v13 = (_QWORD *)*v13;
            v14 = *(_QWORD *)(v12 + 48);
            *(_DWORD *)buf = v24;
            *(_QWORD *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v14;
            _os_log_impl(&dword_2069AB000, v11, OS_LOG_TYPE_INFO, "    Layer %s : %zu", buf, 0x16u);
          }
          v15 = (_QWORD *)v10[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v10[2];
              v17 = *v16 == (_QWORD)v10;
              v10 = v16;
            }
            while (!v17);
          }
          v10 = v16;
        }
        while (v16 != a2 + 1);
      }
    }
  }
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = &v34;
  v30 = &v31;
  v31 = 0;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t **, _QWORD ***, _QWORD ***))(*(_QWORD *)a1 + 200))(a1, a2, a3, &v33, &v30);
  if (!v35 || !v32)
    ZinAssertImpl("Cannot have a cluster without input nodes and output nodes", v24);
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  memset(buf, 0, sizeof(buf));
  v37 = 1065353216;
  v18 = a2[2];
  __p = 0;
  std::vector<ZinIrOpLayer *>::vector(v27, v18, &__p);
  (*(void (**)(_BYTE *, _QWORD *, uint8_t *, void **))(*(_QWORD *)a1 + 208))(a1, a2, buf, v27);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t **, uint8_t *, void **, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 216))(a1, a2, a3, buf, v27, v29, v28);
  (*(void (**)(void **__return_ptr, _BYTE *, _QWORD *, _QWORD ***, _QWORD ***))(*(_QWORD *)a1 + 224))(&__p, a1, a2, &v33, &v30);
  v19 = __p;
  v20 = __p != v26;
  if (__p != v26)
  {
    v21 = PressureBasedSubgraphIdentification::AddBoundaryTensorsByForkJoinPairs(a1, (__int128 **)&__p, (uint64_t)buf, (uint64_t)v27, (uint64_t)v29, (uint64_t)v28, a3);
    if ((v21 & 1) == 0)
      PressureBasedSubgraphIdentification::AddBoundaryTensorBySchedule(v21, a2, (uint64_t **)&__p, (uint64_t)a3);
    v19 = __p;
  }
  if (v19)
  {
    v26 = v19;
    operator delete(v19);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  v22 = (void ***)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  *(_QWORD *)buf = v28;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](v22);
  *(_QWORD *)buf = v29;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v30, v31);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v33, v34);
  return v20;
}

void sub_206F4F0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char a26,_QWORD *a27)
{
  uint64_t v27;
  void ***v29;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v29 = (void ***)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v27 - 144);
  *(_QWORD *)(v27 - 144) = &a17;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](v29);
  *(_QWORD *)(v27 - 144) = &a20;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a23, a24);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>(uint64_t *a1, uint64_t *a2, ZinIrOpLayer ***a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;

  v4 = (uint64_t)a2;
  v6 = (uint64_t *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v13 = *a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v25 = v7;
    if (v18)
      v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v18);
    else
      v19 = 0;
    v21 = v19;
    v22 = &v19[3 * v15];
    v23 = v22;
    v24 = (char *)&v19[3 * v18];
    std::__split_buffer<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>(&v21, a3);
    v4 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(a1, &v21, v4);
    std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)&v21);
  }
  else if (a2 == v6)
  {
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](a2, a3);
    a1[1] = v4 + 24;
  }
  else
  {
    v24 = (char *)v7;
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v21, a3);
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__move_range((uint64_t)a1, (_QWORD *)v4, a1[1], v4 + 24);
    v10 = v4 + 8;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v4, *(_QWORD **)(v4 + 8));
    *(_QWORD *)v4 = v21;
    v11 = v22;
    *(_QWORD *)(v4 + 8) = v22;
    v12 = v23;
    *(_QWORD *)(v4 + 16) = v23;
    if (v12)
    {
      v11[2] = v10;
      v21 = &v22;
      v22 = 0;
      v23 = 0;
      v11 = 0;
    }
    else
    {
      *(_QWORD *)v4 = v10;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v21, v11);
  }
  return v4;
}

void sub_206F4F308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfCluster@<X0>(_QWORD *a1@<X0>, ZinIrOpLayer ***a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  _QWORD **v7;
  char IsNoOp;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  _QWORD **v12;
  int v13;
  _QWORD *v14;
  _QWORD **v15;
  ZinIrOpLayer ***v16;
  ZinIrOpLayer ***v17;
  unint64_t v18;
  uint64_t v19;
  ZinIrOpLayer ***v20;
  ZinIrOpLayer ***v21;
  ZinIrOpLayer ***v22;
  void *__p;
  ZinIrOpLayer ***v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _QWORD **v31;
  _QWORD *v32[2];
  uint64_t *v33[3];
  int64x2_t v34;
  __int128 v35;
  void **v36[3];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v35 = 0u;
  memset(&v34, 0, 32);
  std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::push_back(&v34, a2);
  while (*((_QWORD *)&v35 + 1))
  {
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v33, (ZinIrOpLayer ***)(*(_QWORD *)(v34.i64[1] + 8 * ((unint64_t)v35 / 0xAA))+ 24 * ((unint64_t)v35 % 0xAA)));
    v6 = v33[2];
    std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::pop_front(&v34);
    v32[0] = 0;
    v32[1] = 0;
    v31 = v32;
    v30[0] = 0;
    v30[1] = 0;
    v29 = v30;
    v28[0] = 0;
    v28[1] = 0;
    v27 = v28;
    (*(void (**)(_QWORD *, uint64_t **, _QWORD ***, _QWORD ***, _QWORD ***))(*a1 + 200))(a1, v33, &v31, &v29, &v27);
    v7 = v29;
    if (v29 != v30)
    {
      do
      {
        v36[0] = (void **)v7[4];
        __p = 0;
        v25 = 0;
        v26 = 0;
        IsNoOp = ZinIrOpLayer::IsNoOp((ZinIrOpLayer *)v36[0], (uint64_t *)&__p);
        if (__p)
        {
          v25 = (ZinIrOpLayer ***)__p;
          operator delete(__p);
        }
        if ((IsNoOp & 1) != 0
          && (*(_BYTE *)(a1[8] + 8) || *((_DWORD *)v36[0][8] + 2) != 35)
          && (PressureBasedSubgraphIdentification::IsPartialInput((uint64_t)a2, (uint64_t)v36[0]) & 1) == 0)
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(v33, (ZinIrOpLayer **)v36);
        }
        v9 = v7[1];
        if (v9)
        {
          do
          {
            v10 = (_QWORD **)v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD **)v7[2];
            v11 = *v10 == v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
      }
      while (v10 != v30);
    }
    v12 = v27;
    if (v27 != v28)
    {
      do
      {
        v36[0] = (void **)v12[4];
        __p = 0;
        v25 = 0;
        v26 = 0;
        v13 = ZinIrOpLayer::IsNoOp((ZinIrOpLayer *)v36[0], (uint64_t *)&__p);
        if (__p)
        {
          v25 = (ZinIrOpLayer ***)__p;
          operator delete(__p);
        }
        if (v13)
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(v33, (ZinIrOpLayer **)v36);
        v14 = v12[1];
        if (v14)
        {
          do
          {
            v15 = (_QWORD **)v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD **)v12[2];
            v11 = *v15 == v12;
            v12 = v15;
          }
          while (!v11);
        }
        v12 = v15;
      }
      while (v15 != v28);
    }
    __p = 0;
    v25 = 0;
    v26 = 0;
    PressureBasedSubgraphIdentification::IdentifyConnectedClusters((uint64_t)a1, v33, (uint64_t)&v31, (uint64_t *)&__p);
    v16 = (ZinIrOpLayer ***)__p;
    v17 = v25;
    if ((char *)v25 - (_BYTE *)__p == 24 && *((uint64_t **)__p + 2) == v6)
    {
      v18 = a3[1];
      if (v18 >= a3[2])
      {
        v19 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>(a3, (ZinIrOpLayer ***)v33);
      }
      else
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)a3[1], (ZinIrOpLayer ***)v33);
        v19 = v18 + 24;
        a3[1] = v18 + 24;
      }
      a3[1] = v19;
    }
    else
    {
      while (v16 != v17)
      {
        std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::push_back(&v34, v16);
        v16 += 3;
      }
    }
    v21 = (ZinIrOpLayer ***)__p;
    v20 = v25;
    if (v25 != __p)
    {
      do
      {
        v22 = v20 - 3;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v20 - 3), *(v20 - 2));
        v20 = v22;
      }
      while (v22 != v21);
    }
    v25 = v21;
    v36[0] = &__p;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v36);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v33, v33[1]);
  }
  return std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::~deque[abi:ne180100](&v34);
}

void sub_206F4F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::~deque[abi:ne180100](&a25);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsPartialInput(uint64_t a1, uint64_t a2)
{
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  char v5;
  char v6;
  ZinIrOpLayer *v7;
  uint64_t v8;
  char v9;
  ZinIrOpLayer *v11;

  v2 = *(ZinIrOpLayer ***)(a2 + 88);
  v3 = *(ZinIrOpLayer ***)(a2 + 96);
  if (v2 == v3)
  {
    v9 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *v2++;
      v11 = v7;
      v8 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a1, &v11);
      v6 |= v8 == 0;
      v5 |= v8 != 0;
    }
    while (v2 != v3);
    v9 = v5 & v6;
  }
  return v9 & 1;
}

void PressureBasedSubgraphIdentification::CutClusterForRingBufferWriter(_QWORD *a1@<X0>, ZinIrOpLayer ****a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  ZinIrTensor *v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  ZinIrOpLayer **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  ZinIrTensor *v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  ZinIrOpLayer **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  ZinIrOpLayer **v50;
  uint64_t *v51;
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v55;
  _QWORD **v56;
  _QWORD *v57[2];
  _QWORD **v58;
  _QWORD *v59[2];
  _QWORD **v60;
  _QWORD *v61[2];
  uint64_t *v62;
  _QWORD *v63[2];
  uint64_t *v64;
  _QWORD *v65[2];
  uint64_t *v66;
  _QWORD *v67[2];
  uint64_t *v68;
  _QWORD *v69[2];
  ZinIrOpLayer *v70;
  char v71;
  ZinIrTensor **p_RootTensor;
  std::__shared_weak_count *v73;
  ZinIrOpLayer **v74;

  v74 = (ZinIrOpLayer **)*MEMORY[0x24BDAC8D0];
  v69[0] = 0;
  v69[1] = 0;
  v68 = (uint64_t *)v69;
  v67[0] = 0;
  v67[1] = 0;
  v65[1] = 0;
  v66 = (uint64_t *)v67;
  v64 = (uint64_t *)v65;
  v65[0] = 0;
  v63[0] = 0;
  v63[1] = 0;
  v61[1] = 0;
  v62 = (uint64_t *)v63;
  v60 = v61;
  v61[0] = 0;
  v59[0] = 0;
  v59[1] = 0;
  v57[1] = 0;
  v58 = v59;
  v56 = v57;
  v57[0] = 0;
  (*(void (**)(_QWORD *, ZinIrOpLayer ****, _QWORD ***, _QWORD ***, _QWORD ***))(*a1 + 200))(a1, a2, &v60, &v58, &v56);
  v4 = v58;
  if (v58 != v59)
  {
    do
    {
      v70 = (ZinIrOpLayer *)v4[4];
      v5 = (_QWORD *)*((_QWORD *)v70 + 11);
      v6 = (_QWORD *)*((_QWORD *)v70 + 12);
      while (v5 != v6)
      {
        v7 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0);
        if (v7)
        {
          while (*(_DWORD *)(*(_QWORD *)(v7[12] + 64) + 8) != 75)
          {
            ZinIrTensor::GetParentTensor((ZinIrTensor *)v7, &p_RootTensor);
            v7 = (uint64_t *)p_RootTensor;
            v8 = v73;
            if (v73)
            {
              p_shared_owners = (unint64_t *)&v73->__shared_owners_;
              do
                v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            if (v7)
            {
              p_RootTensor = (ZinIrTensor **)v7[12];
              if (a2 + 1 == (ZinIrOpLayer ****)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)&p_RootTensor))continue;
            }
            goto LABEL_15;
          }
          v55 = (ZinIrOpLayer *)v7[12];
          p_RootTensor = &v55;
          v11 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v66, &v55, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v11 + 5, &v70, (uint64_t *)&v70);
          RootTensor = 0;
          RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v7);
          p_RootTensor = &RootTensor;
          v12 = std::__tree<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,ZinIrIdComparator<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(&v62, (uint64_t *)&RootTensor, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v12 + 5, &v55, (uint64_t *)&v55);
        }
LABEL_15:
        ++v5;
      }
      v13 = (_QWORD *)v4[1];
      if (v13)
      {
        do
        {
          v14 = (_QWORD **)v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD **)v4[2];
          v15 = *v14 == v4;
          v4 = v14;
        }
        while (!v15);
      }
      v4 = v14;
    }
    while (v14 != v59);
  }
  v16 = v56;
  if (v56 != v57)
  {
    do
    {
      v70 = (ZinIrOpLayer *)v16[4];
      v17 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0);
      if (v17)
      {
        while (*(_DWORD *)(*(_QWORD *)(v17[12] + 64) + 8) != 75)
        {
          ZinIrTensor::GetParentTensor((ZinIrTensor *)v17, &p_RootTensor);
          v17 = (uint64_t *)p_RootTensor;
          v18 = v73;
          if (!v73)
            goto LABEL_29;
          v19 = (unint64_t *)&v73->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            if (!v17)
              goto LABEL_34;
          }
          else
          {
LABEL_29:
            if (!v17)
              goto LABEL_34;
          }
        }
        v55 = (ZinIrOpLayer *)v17[12];
        p_RootTensor = &v55;
        v21 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v68, &v55, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v21 + 5, &v70, (uint64_t *)&v70);
        RootTensor = 0;
        RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v17);
        p_RootTensor = &RootTensor;
        v22 = std::__tree<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,ZinIrIdComparator<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(&v64, (uint64_t *)&RootTensor, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v22 + 5, &v55, (uint64_t *)&v55);
      }
LABEL_34:
      v23 = (_QWORD *)v16[1];
      if (v23)
      {
        do
        {
          v24 = (_QWORD **)v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD **)v16[2];
          v15 = *v24 == v16;
          v16 = v24;
        }
        while (!v15);
      }
      v16 = v24;
    }
    while (v24 != v57);
  }
  v25 = v62;
  if (v62 == (uint64_t *)v63)
    goto LABEL_56;
  while ((unint64_t)v25[7] <= 1)
  {
    v26 = (uint64_t *)v25[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (uint64_t *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (uint64_t *)v25[2];
        v15 = *v27 == (_QWORD)v25;
        v25 = v27;
      }
      while (!v15);
    }
    v25 = v27;
    if (v27 == (uint64_t *)v63)
      goto LABEL_56;
  }
  if (v25 == (uint64_t *)v63)
  {
LABEL_56:
    v34 = v64;
    if (v64 != (uint64_t *)v65)
    {
      v35 = v64;
      while ((unint64_t)v35[7] <= 1)
      {
        v36 = (uint64_t *)v35[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (uint64_t *)v35[2];
            v15 = *v37 == (_QWORD)v35;
            v35 = v37;
          }
          while (!v15);
        }
        v35 = v37;
        if (v37 == (uint64_t *)v65)
          goto LABEL_74;
      }
      if (v35 != (uint64_t *)v65)
      {
        std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>::set[abi:ne180100]((uint64_t *)&p_RootTensor, (ZinIrOpLayer ***)v35 + 5);
        v38 = (uint64_t *)p_RootTensor;
        v70 = p_RootTensor[4];
        v39 = p_RootTensor[1];
        if (v39)
        {
          do
          {
            v40 = (uint64_t *)v39;
            v39 = *(ZinIrTensor **)v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (uint64_t *)v38[2];
            v15 = *v40 == (_QWORD)v38;
            v38 = v40;
          }
          while (!v15);
        }
        v55 = (ZinIrOpLayer *)v40[4];
        v41 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v68, &v70);
        v42 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v68, &v55);
        v43 = (ZinIrOpLayer **)PressureBasedSubgraphIdentification::CutClusterForRingBufferWriter(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&)const::$_3::operator()(v41, v42);
        PressureBasedSubgraphIdentification::CutClusterAtLayer(a1, a2, v43, a3);
        goto LABEL_73;
      }
LABEL_74:
      if (v64 != (uint64_t *)v65)
      {
        while (v63 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v62, v34 + 4))
        {
          v44 = (uint64_t *)v34[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (uint64_t *)v34[2];
              v15 = *v45 == (_QWORD)v34;
              v34 = v45;
            }
            while (!v15);
          }
          v34 = v45;
          if (v45 == (uint64_t *)v65)
            goto LABEL_85;
        }
        if (v34 != (uint64_t *)v65)
        {
          p_RootTensor = (ZinIrTensor **)v34[4];
          v46 = std::map<ZinIrOpLayer *,long,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,long>>>::at((uint64_t)&v64, (uint64_t *)&p_RootTensor);
          v47 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v68, (ZinIrOpLayer **)(*(_QWORD *)v46 + 32));
          v48 = std::map<ZinIrOpLayer *,long,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,long>>>::at((uint64_t)&v62, (uint64_t *)&p_RootTensor);
          v49 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v66, (ZinIrOpLayer **)(*(_QWORD *)v48 + 32));
          v50 = (ZinIrOpLayer **)PressureBasedSubgraphIdentification::CutClusterForRingBufferWriter(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&)const::$_3::operator()(v47, v49);
          PressureBasedSubgraphIdentification::CutClusterAtLayer(a1, a2, v50, a3);
          goto LABEL_86;
        }
      }
    }
LABEL_85:
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&p_RootTensor, (ZinIrOpLayer ***)a2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v70 = (ZinIrOpLayer *)a3;
    v71 = 0;
    v51 = (uint64_t *)operator new(0x18uLL);
    *a3 = (uint64_t)v51;
    a3[1] = (uint64_t)v51;
    a3[2] = (uint64_t)(v51 + 3);
    a3[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t)(a3 + 2), &p_RootTensor, &v74, v51);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&p_RootTensor, v73);
  }
  else
  {
    std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>::set[abi:ne180100]((uint64_t *)&p_RootTensor, (ZinIrOpLayer ***)v25 + 5);
    v28 = (uint64_t *)p_RootTensor;
    v70 = p_RootTensor[4];
    v29 = p_RootTensor[1];
    if (v29)
    {
      do
      {
        v30 = (uint64_t *)v29;
        v29 = *(ZinIrTensor **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (uint64_t *)v28[2];
        v15 = *v30 == (_QWORD)v28;
        v28 = v30;
      }
      while (!v15);
    }
    v55 = (ZinIrOpLayer *)v30[4];
    v31 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v66, &v70);
    v32 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v66, &v55);
    v33 = (ZinIrOpLayer **)PressureBasedSubgraphIdentification::CutClusterForRingBufferWriter(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&)const::$_3::operator()(v31, v32);
    PressureBasedSubgraphIdentification::CutClusterAtLayer(a1, a2, v33, a3);
LABEL_73:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&p_RootTensor, v73);
  }
LABEL_86:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v56, v57[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v58, v59[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v60, v61[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v62, v63[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v64, v65[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v66, v67[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v68, v69[0]);
}

void sub_206F4FEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a27, a28);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a30, a31);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a33, a34);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy(v34 - 168, *(_QWORD **)(v34 - 160));
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutClusterAtLayer(_QWORD *a1@<X0>, ZinIrOpLayer ****a2@<X1>, ZinIrOpLayer **a3@<X2>, uint64_t *a4@<X8>)
{
  ZinIrOpLayer ****v6;
  ZinIrOpLayer ***v7;
  char v9;
  ZinIrOpLayer ***v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer ****v12;
  BOOL v13;
  uint64_t i;
  ZinIrOpLayer ***v15;
  uint64_t *v16;
  ZinIrOpLayer ***v17;
  ZinIrOpLayer **v18;
  _QWORD *v19[2];
  ZinIrOpLayer **v20;
  _QWORD *v21[2];
  ZinIrOpLayer ****v22;
  char v23;
  ZinIrOpLayer **v24[3];
  uint64_t v25[3];
  ZinIrOpLayer **v26;

  v26 = (ZinIrOpLayer **)*MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19[1] = 0;
    v20 = (ZinIrOpLayer **)v21;
    v18 = (ZinIrOpLayer **)v19;
    v19[0] = 0;
    v6 = a2 + 1;
    v7 = *a2;
    if (*a2 != (ZinIrOpLayer ***)(a2 + 1))
    {
      v9 = 1;
      do
      {
        v24[0] = v7[4];
        if ((v9 & 1) != 0)
          v10 = &v20;
        else
          v10 = &v18;
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v10, (ZinIrOpLayer **)v24, (uint64_t *)v24);
        v11 = v7[1];
        if (v11)
        {
          do
          {
            v12 = (ZinIrOpLayer ****)v11;
            v11 = (ZinIrOpLayer **)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (ZinIrOpLayer ****)v7[2];
            v13 = *v12 == v7;
            v7 = (ZinIrOpLayer ***)v12;
          }
          while (!v13);
        }
        v9 &= v24[0] != a3;
        v7 = (ZinIrOpLayer ***)v12;
      }
      while (v12 != v6);
    }
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v24, &v20);
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v25, &v18);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v22 = &v15;
    v23 = 0;
    v15 = (ZinIrOpLayer ***)operator new(0x30uLL);
    v16 = (uint64_t *)v15;
    v17 = v15 + 6;
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t)&v17, v24, &v26, (uint64_t *)v15);
    PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfClusters(a1, &v15, a4);
    v22 = &v15;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    for (i = 0; i != -6; i -= 3)
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24[i + 3], (_QWORD *)v25[i + 1]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v18, v19[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_206F501AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  uint64_t i;

  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a18);
  for (i = 0; i != -48; i -= 24)
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(&a20 + i + 24), *(_QWORD **)(&a20 + i + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::CutClusterForRingBufferWriter(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&)const::$_3::operator()(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  ZinIrOpLayer *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;

  if (a1[2])
    v2 = a2[2] == 0;
  else
    v2 = 1;
  if (v2
    || (!ScheduleComparator::operator()((int)&v17, *(ZinIrOpLayer **)(*a1 + 32), *(ZinIrOpLayer **)(*a2 + 32))
      ? (v5 = a2)
      : (v5 = a1),
        v6 = v5 + 1,
        v5 + 1 == (_QWORD *)*v5))
  {
LABEL_22:
    ZinAssertImpl("Internal Pressure Analysis Error");
  }
  while (1)
  {
    v7 = (_QWORD *)*v6;
    v8 = v6;
    if (*v6)
    {
      do
      {
        v9 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v8[2];
        v2 = *v9 == (_QWORD)v8;
        v8 = v9;
      }
      while (v2);
    }
    v10 = (ZinIrOpLayer *)v9[4];
    v11 = v5 == a1 ? a2 : a1;
    v12 = ScheduleComparator::operator()((int)&v17, v10, *(ZinIrOpLayer **)(*v11 + 32));
    v13 = (_QWORD *)*v6;
    if (v12)
      break;
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)v13[1];
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v6[2];
        v2 = *v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (v2);
    }
    v6 = v14;
    if (v14 == (_QWORD *)*v5)
      goto LABEL_22;
  }
  if (v13)
  {
    do
    {
      v15 = v13;
      v13 = (_QWORD *)v13[1];
    }
    while (v13);
  }
  else
  {
    do
    {
      v15 = (_QWORD *)v6[2];
      v2 = *v15 == (_QWORD)v6;
      v6 = v15;
    }
    while (v2);
  }
  return v15[4];
}

void PressureBasedSubgraphIdentification::CutClusterAtConcatWithPartialInputs(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  ZinIrOpLayer ***v22;
  ZinIrOpLayer ***v23;
  ZinIrOpLayer ***v24;
  ZinIrOpLayer *v25;
  ZinIrOpLayer ****v26;
  _QWORD *v27;
  uint64_t v28;
  ZinIrOpLayer ***v29;
  ZinIrOpLayer ***v30;
  uint64_t v31;
  uint8_t v32[4];
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  _BYTE buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v27 = 0;
  v28 = 0;
  v26 = (ZinIrOpLayer ****)&v27;
  v7 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v10 = (_BYTE *)(a1 + 73);
  }
  else
  {
    do
    {
      *(_QWORD *)buf = v6[4];
      if (PressureBasedSubgraphIdentification::IsPartialInput((uint64_t)a2, *(uint64_t *)buf)
        && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)buf + 64) + 8) == 7)
      {
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)&v26, (uint64_t *)buf, (uint64_t *)buf);
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v12 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v12);
      }
      v6 = v9;
    }
    while (v9 != v7);
    v11 = *(unsigned __int8 *)(a1 + 73);
    v10 = (_BYTE *)(a1 + 73);
    if (v11)
      v12 = v28 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
      v15 = v14;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tCutting Cluster [%zu,%zu] at Concat With Partial Input", buf, 0x16u);
      }
    }
  }
  *(_OWORD *)&buf[8] = 0uLL;
  *(_QWORD *)buf = &buf[8];
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>((uint64_t *)&v29);
  v16 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v7)
  {
    v17 = MEMORY[0x24BDACB70];
    do
    {
      v25 = (ZinIrOpLayer *)v16[4];
      if (&v27 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v26, (uint64_t *)&v25))
      {
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v30 - 3, &v25, (uint64_t *)&v25);
      }
      else
      {
        if (*v10 && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = (_QWORD *)((char *)v25 + 24);
          if (*((char *)v25 + 47) < 0)
            v18 = (_QWORD *)*v18;
          v19 = *((_QWORD *)v25 + 6);
          *(_DWORD *)v32 = 136315394;
          v33 = v18;
          v34 = 2048;
          v35 = v19;
          _os_log_impl(&dword_2069AB000, v17, OS_LOG_TYPE_INFO, "\t\tCutting Cluster at Partial Input %s : %zu", v32, 0x16u);
        }
        std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>((uint64_t *)&v29);
      }
      v20 = (_QWORD *)v16[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v16[2];
          v12 = *v21 == (_QWORD)v16;
          v16 = v21;
        }
        while (!v12);
      }
      v16 = v21;
    }
    while (v21 != v7);
  }
  v22 = v30;
  if (v29 == v30)
  {
LABEL_39:
    v24 = v30;
  }
  else
  {
    v23 = v29 + 3;
    while (*(v23 - 1))
    {
      v12 = v23 == v30;
      v23 += 3;
      if (v12)
        goto LABEL_39;
    }
    v24 = v23 - 3;
    if (v23 - 3 != v30 && v23 != v30)
    {
      do
      {
        if (v23[2])
        {
          std::__tree<ZinSpaceRange>::__move_assign((uint64_t)v24, v23);
          v24 += 3;
        }
        v23 += 3;
      }
      while (v23 != v22);
      v22 = v30;
    }
  }
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::erase((uint64_t)&v29, (uint64_t)v24, v22);
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a3, *(uint64_t ***)(a3 + 8), v29, v30, 0xAAAAAAAAAAAAAAABLL * (v30 - v29));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27);
  v26 = &v29;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_206F506E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, _QWORD *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a23, a24);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  a13 = (void **)&a16;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutClusterAtPartialOutputs(uint64_t a1, ZinIrOpLayer ***a2, uint64_t a3)
{
  ZinIrOpLayer **v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer ***v8;
  _BYTE *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  ZinIrOpLayer **v16;
  ZinIrOpLayer **v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer ***v23;
  uint64_t v24;
  ZinIrOpLayer ***v25;
  ZinIrOpLayer ***v26;
  uint64_t v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer ****v29;
  _QWORD *v30;
  uint64_t v31;
  ZinIrOpLayer ***v32;
  ZinIrOpLayer ***v33;
  uint64_t v34;
  uint64_t v35[3];
  uint8_t v36[4];
  _QWORD *v37;
  __int16 v38;
  uint64_t v39;
  _BYTE buf[22];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v35, a2);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v30 = 0;
  v31 = 0;
  v29 = (ZinIrOpLayer ****)&v30;
  v6 = *a2;
  if (*a2 == (ZinIrOpLayer **)(a2 + 1))
  {
    v9 = (_BYTE *)(a1 + 73);
  }
  else
  {
    do
    {
      *(_QWORD *)buf = v6[4];
      if (PressureBasedSubgraphIdentification::IsPartialOutput((uint64_t)a2, *(uint64_t *)buf))
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)&v29, (ZinIrOpLayer **)buf, (uint64_t *)buf);
      v7 = v6[1];
      if (v7)
      {
        do
        {
          v8 = (ZinIrOpLayer ***)v7;
          v7 = *(ZinIrOpLayer **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (ZinIrOpLayer ***)v6[2];
          v11 = *v8 == v6;
          v6 = (ZinIrOpLayer **)v8;
        }
        while (!v11);
      }
      v6 = (ZinIrOpLayer **)v8;
    }
    while (v8 != a2 + 1);
    v10 = *(unsigned __int8 *)(a1 + 73);
    v9 = (_BYTE *)(a1 + 73);
    if (v10)
      v11 = v31 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
      v14 = v13;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tCutting Cluster [%zu,%zu] at Partial Outputs", buf, 0x16u);
      }
    }
  }
  ZinMirSpatialSplitUtils::GetSortedCluster((uint64_t)a2, 1, (ZinIrOpLayer ***)buf);
  v15 = (_QWORD **)std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>((uint64_t *)&v32);
  v16 = *(ZinIrOpLayer ***)buf;
  v17 = *(ZinIrOpLayer ***)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v18 = MEMORY[0x24BDACB70];
    do
    {
      v28 = *v16;
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v33 - 3, &v28, (uint64_t *)&v28);
      v15 = (_QWORD **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v29, &v28);
      if (&v30 != v15)
      {
        if (*v9 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = (_QWORD *)((char *)v28 + 24);
          if (*((char *)v28 + 47) < 0)
            v19 = (_QWORD *)*v19;
          v20 = *((_QWORD *)v28 + 6);
          *(_DWORD *)v36 = 136315394;
          v37 = v19;
          v38 = 2048;
          v39 = v20;
          _os_log_impl(&dword_2069AB000, v18, OS_LOG_TYPE_INFO, "\t\tCutting Cluster at Partial Output %s : %zu", v36, 0x16u);
        }
        v15 = (_QWORD **)std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<>((uint64_t *)&v32);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  v21 = 0;
  v22 = -1;
  while (1)
  {
    v23 = v33;
    if (++v22 >= (unint64_t)(-1 - 0x5555555555555555 * (v33 - v32)))
      break;
    v24 = v21 + 24;
    v15 = (_QWORD **)PressureBasedSubgraphIdentification::MinimizeNewPartialOutputs((uint64_t)v15, (uint64_t **)((char *)v32 + v21), (uint64_t **)((char *)v32 + v21 + 24), (uint64_t)&v29);
    v21 = v24;
  }
  if (v32 == v33)
  {
LABEL_35:
    v26 = v33;
  }
  else
  {
    v25 = v32 + 3;
    while (*(v25 - 1))
    {
      v11 = v25 == v33;
      v25 += 3;
      if (v11)
        goto LABEL_35;
    }
    v27 = (uint64_t)(v25 - 3);
    if (v25 - 3 == v33 || v25 == v33)
    {
      v26 = v33;
    }
    else
    {
      do
      {
        if (v25[2])
        {
          std::__tree<ZinSpaceRange>::__move_assign(v27, v25);
          v27 += 24;
        }
        v25 += 3;
      }
      while (v25 != v23);
      v26 = v33;
    }
    v23 = (ZinIrOpLayer ***)v27;
  }
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::erase((uint64_t)&v32, (uint64_t)v23, v26);
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a3, *(uint64_t ***)(a3 + 8), v32, v33, 0xAAAAAAAAAAAAAAABLL * (v33 - v32));
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30);
  v29 = &v32;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
}

void sub_206F50ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 112);
  if (v21)
  {
    *(_QWORD *)(v19 - 104) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  a12 = (void **)&a15;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::CutDisconnectedClusters@<X0>(ZinIrOpLayer ****a1@<X1>, uint64_t a2@<X8>)
{
  ZinIrOpLayer ***v3;
  ZinIrOpLayer ***v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *i;
  ZinIrOpLayer ***v10;
  ZinIrOpLayer ***v11;
  uint64_t v12;
  uint64_t v13[3];
  ZinIrOpLayer ****v14;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v13, v3);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      IdentifyConnectedComponents(v13, (uint64_t *)&v10);
      std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a2, *(uint64_t ***)(a2 + 8), v10, v11, 0xAAAAAAAAAAAAAAABLL * (v11 - v10));
      v14 = &v10;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
      v3 += 3;
    }
    while (v3 != v4);
    v6 = *(_QWORD *)a2;
    v5 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v5)
    {
      v5 = *(_QWORD **)a2;
    }
    else
    {
      for (i = (_QWORD *)(v6 + 24); *(i - 1); i += 3)
      {
        if (i == v5)
        {
          v6 = *(_QWORD *)(a2 + 8);
          return std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::erase(a2, v6, v5);
        }
      }
      v6 = (uint64_t)(i - 3);
      if (i - 3 != v5 && i != v5)
      {
        do
        {
          if (i[2])
          {
            std::__tree<ZinSpaceRange>::__move_assign(v6, i);
            v6 += 24;
          }
          i += 3;
        }
        while (i != v5);
        v5 = *(_QWORD **)(a2 + 8);
      }
    }
  }
  return std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::erase(a2, v6, v5);
}

void sub_206F50C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t PressureBasedSubgraphIdentification::CountOverComputedSpaceForLayer(uint64_t a1, uint64_t a2, ZinIrOpLayer *this, unint64_t a4, uint64_t a5)
{
  ZinMirSpatialSplitUtils *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BOOL4 IsCircularBufferConsumerCandidate;
  uint64_t v17;
  ZinMirSpatialSplitUtils *v18;
  unint64_t v19;
  unint64_t v20;
  ZinIrKernel *v21;
  unint64_t v23;
  ZinMirSpatialSplitUtils *v24;
  ZinIrKernel *v25;

  if (ZinIrOpLayer::IsNELayer(this))
  {
    (*(void (**)(ZinIrKernel **__return_ptr, ZinIrOpLayer *, uint64_t))(*(_QWORD *)this + 568))(&v25, this, 1);
    if (v25)
    {
      v10 = (ZinMirSpatialSplitUtils *)*((_QWORD *)v25 + 33);
      v23 = *((int *)v25 + 82);
      v24 = (ZinMirSpatialSplitUtils *)*((_QWORD *)v25 + 34);
      v11 = *((int *)v25 + 83);
      v12 = *((int *)v25 + 85);
      v13 = *((int *)v25 + 86);
      v14 = *((int *)v25 + 90);
      v15 = *(_BYTE **)(a1 + 64);
      if (*v15)
        IsCircularBufferConsumerCandidate = ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(a2, (uint64_t)v15, this);
      else
        IsCircularBufferConsumerCandidate = 0;
      a4 = ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(v10, v11, v13, a4, v14, IsCircularBufferConsumerCandidate);
      ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(v24, v23, v12, a5, 0, 0);
      v21 = v25;
      v25 = 0;
      if (v21)
      {
        ZinIrKernel::~ZinIrKernel(v21);
        MEMORY[0x20BD002F8]();
      }
    }
  }
  else if (ZinIrOpLayer::IsPELayer(this) && *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 83)
  {
    v17 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
    v18 = *(ZinMirSpatialSplitUtils **)(v17 + 16);
    v19 = *(int *)(v17 + 40);
    v20 = *(int *)(v17 + 52);
    a4 = ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(*(ZinMirSpatialSplitUtils **)(v17 + 24), *(int *)(v17 + 44), *(int *)(v17 + 56), a4, 0, 0);
    ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(v18, v19, v20, a5, 0, 0);
  }
  return a4;
}

void sub_206F50E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ComputeOverComputation(uint64_t result, ZinIrOpLayer *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  ZinIrOpLayer *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  const ZinIrOpLayer *v17;
  unsigned int IsDeConv;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  ZinMirSpatialSplitUtils *v28;
  ZinIrOpLayer *v29;
  uint64_t *v30;

  v25 = result;
  v29 = a2;
  v5 = *((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14);
  if ((unint64_t)v5 < 9
    || (result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3 + 24, &v29), a3 + 32 != result))
  {
LABEL_3:
    v6 = *((_QWORD *)v29 + 11);
    if (*((_QWORD *)v29 + 12) != v6)
    {
      v7 = 0;
      v8 = (uint64_t **)(v25 + 80);
      do
      {
        v28 = 0;
        v28 = *(ZinMirSpatialSplitUtils **)(v6 + 8 * v7);
        result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3 + 72, &v28);
        if (a3 + 80 != result)
        {
          v9 = v29;
          v30 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
          v10 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v8, (unint64_t *)&v30);
          v11 = PressureBasedSubgraphIdentification::CountOverComputedSpaceForLayer(v25, a3, v9, *v10, v10[1]);
          v13 = v12;
          v27 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
          v30 = &v27;
          v14 = std::__tree<std::__value_type<ZinIrTensor const*,SpatialAmount>,std::__map_value_compare<ZinIrTensor const*,std::__value_type<ZinIrTensor const*,SpatialAmount>,std::less<ZinIrTensor const*>,true>,std::allocator<std::__value_type<ZinIrTensor const*,SpatialAmount>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const*&&>,std::tuple<>>(v8, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, &v30);
          v15 = v14[5];
          v16 = v14[6];
          IsDeConv = ZinMirSpatialSplitUtils::IsDeConv(v28, v17);
          if (v15 <= v11)
            v19 = v11;
          else
            v19 = v15;
          if (v16 <= v13)
            v20 = v13;
          else
            v20 = v16;
          v21 = v19 + IsDeConv;
          v22 = v20 + IsDeConv;
          v27 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
          v30 = &v27;
          v23 = std::__tree<std::__value_type<ZinIrTensor const*,SpatialAmount>,std::__map_value_compare<ZinIrTensor const*,std::__value_type<ZinIrTensor const*,SpatialAmount>,std::less<ZinIrTensor const*>,true>,std::allocator<std::__value_type<ZinIrTensor const*,SpatialAmount>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const*&&>,std::tuple<>>(v8, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, &v30);
          v23[5] = v21;
          v23[6] = v22;
          result = PressureBasedSubgraphIdentification::ComputeOverComputation(v25, v28, a3, a4);
        }
        ++v7;
        v6 = *((_QWORD *)v29 + 11);
      }
      while (v7 < (*((_QWORD *)v29 + 12) - v6) >> 3);
    }
    return result;
  }
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v29))
  {
    v30 = (uint64_t *)&v29;
    result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a4, &v29, (uint64_t)&std::piecewise_construct, &v30);
    *(_QWORD *)(result + 24) = 1;
    return result;
  }
  v30 = (uint64_t *)&v29;
  v24 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a4, &v29, (uint64_t)&std::piecewise_construct, &v30);
  ++v24[3];
  v30 = (uint64_t *)&v29;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a4, &v29, (uint64_t)&std::piecewise_construct, &v30);
  if (*(_QWORD *)(result + 24) == v5 >> 3)
  {
    result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(a4, &v29);
    goto LABEL_3;
  }
  return result;
}

uint64_t PressureBasedSubgraphIdentification::GetMinDMABufferSize(PressureBasedSubgraphIdentification *this, const ZinANELayer *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  const ZinANELayer *v8;
  char v9;
  uint64_t v10;

  if (*(_BYTE *)(*((_QWORD *)this + 8) + 2))
    return 0;
  if (!a4)
    a3 = -1;
  v8 = a2;
  v9 = a4;
  v10 = a3;
  v7 = *((_QWORD *)this + 29);
  if ((_QWORD *)(v7 + 8) == std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::find<MinDMABufferMapKey>(v7, (uint64_t)&v8))ZinAssertImpl("Spatial Splitting DMA Buffer error");
  return *(_QWORD *)std::map<MinDMABufferMapKey,long>::at(*((_QWORD *)this + 29), (uint64_t)&v8);
}

uint64_t std::map<MinDMABufferMapKey,long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__find_equal<MinDMABufferMapKey>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

uint64_t PressureBasedSubgraphIdentification::IsIndirectlyReachable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  ZinIrOpLayer *v13;
  _OWORD v14[2];
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v19 = 0u;
  v20 = 0u;
  v21 = 1065353216;
  v3 = *(_QWORD **)(a1 + 112);
  v4 = *(_QWORD **)(a1 + 120);
  if (v3 == v4)
  {
    v10 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 1065353216;
  }
  else
  {
    do
    {
      *(_QWORD *)&v16 = *v3;
      if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, (ZinIrOpLayer **)&v16)&& (_QWORD)v16 != a2)
      {
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&v19, &v16, &v16);
      }
      ++v3;
    }
    while (v3 != v4);
    v16 = 0u;
    v17 = 0u;
    v18 = 1065353216;
    if (*((_QWORD *)&v20 + 1))
    {
      do
      {
        memset(v14, 0, sizeof(v14));
        v15 = 1065353216;
        for (i = (_QWORD *)v20; i; i = (_QWORD *)*i)
        {
          v13 = (ZinIrOpLayer *)i[2];
          if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v16, &v13)&& std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, &v13))
          {
            v8 = (uint64_t *)*((_QWORD *)v13 + 14);
            v9 = (uint64_t *)*((_QWORD *)v13 + 15);
            while (v8 != v9)
            {
              v12 = 0;
              v12 = *v8;
              if (v12 == a2)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v14);
                v10 = 1;
                goto LABEL_21;
              }
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v14, &v12, &v12);
              ++v8;
            }
          }
        }
        std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::swap((uint64_t)&v19, (uint64_t)v14);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v14);
        v10 = 0;
      }
      while (*((_QWORD *)&v20 + 1));
    }
    else
    {
      v10 = 0;
    }
  }
LABEL_21:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v19);
  return v10;
}

void sub_206F51348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va1);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3 - 96);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::OldCopyPressureForConcatMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t **v14;
  int64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int64_t v21;
  int64_t v22;
  ZinIrOpLayer *v23;
  unint64_t *v24;

  v3 = a2 + 72;
  v4 = *(_QWORD **)(a2 + 72);
  v5 = (_QWORD *)(a2 + 80);
  if (v4 != (_QWORD *)(a2 + 80))
  {
    v20 = (_QWORD *)(a2 + 80);
    while (1)
    {
      v7 = (_QWORD *)v4[4];
      if (*(_DWORD *)(v7[8] + 8) == 7)
        break;
LABEL_18:
      v17 = (_QWORD *)v4[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v4[2];
          v19 = *v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v19);
      }
      v4 = v18;
      if (v18 == v5)
        return;
    }
    v9 = (ZinIrOpLayer **)v7[11];
    v8 = (ZinIrOpLayer **)v7[12];
    while (1)
    {
      if (v9 == v8)
        goto LABEL_18;
      v23 = 0;
      v23 = *v9;
      if (v5 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v3, &v23))
      {
        if (PressureBasedSubgraphIdentification::IsIndirectlyReachable((uint64_t)v23, (uint64_t)v7, v3))
          break;
      }
LABEL_17:
      ++v9;
    }
    v10 = *((_QWORD *)v23 + 6);
    v22 = v10;
    v11 = *((_QWORD *)v23 + 14);
    v12 = *((_QWORD *)v23 + 15);
    v13 = v10;
    if (v11 == v12)
    {
      v21 = v10;
      v13 = v10;
    }
    else
    {
      do
      {
        if (*(_QWORD **)v11 != v7)
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 48);
        v11 += 8;
      }
      while (v11 != v12);
      v21 = v10;
      if (v10 > v13)
        goto LABEL_16;
    }
    do
    {
      v24 = (unint64_t *)&v21;
      v14 = (uint64_t **)(std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a3, (unint64_t *)&v21, (uint64_t)&std::piecewise_construct, (uint64_t **)&v24)+ 3);
      v24 = (unint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v14, (uint64_t *)&v24, (uint64_t *)&v24);
      v15 = v21++;
    }
    while (v15 < v13);
LABEL_16:
    v24 = (unint64_t *)&v22;
    v16 = (uint64_t **)(std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a3, (unint64_t *)&v22, (uint64_t)&std::piecewise_construct, (uint64_t **)&v24)+ 6);
    v24 = (unint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v7 + 32))(v7, 0, 0);
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v16, (uint64_t *)&v24, (uint64_t *)&v24);
    v5 = v20;
    goto LABEL_17;
  }
}

uint64_t PressureBasedSubgraphIdentification::DoesDeconvRequireCopy(uint64_t a1, ZinMirSpatialSplitUtils *this, Subgraph *a3, uint64_t a4)
{
  LayerTilingHelper *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[3];
  unsigned __int8 v62;
  uint64_t v63;
  void *__p;
  char *v65;
  _DWORD *v66;
  _BYTE v67[16];
  void *v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[48];
  __int128 v74;
  __int128 v75;
  __int128 v76;

  if (!ZinMirSpatialSplitUtils::IsRootOutputOrOutsideSubgraph(this, a3, a3))
    return 0;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  memset(v73, 0, sizeof(v73));
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  *(_OWORD *)v68 = 0u;
  LayerTilingHelper::CreateHelper(a3, *(const ZinIrOpLayer **)(a1 + 200), (const SplitPatternHandlerMgr *)v67, v7);
  v8 = (char *)operator new(4uLL);
  *(_DWORD *)v8 = 0;
  v9 = v8 + 4;
  v65 = v8 + 4;
  v66 = v8 + 4;
  __p = v8;
  if (*(_DWORD *)(a4 + 24) != 4)
  {
    v18 = *(_QWORD *)(a4 + 8);
    v17 = a4 + 8;
    v16 = v18;
    if (!v18)
      goto LABEL_22;
    v19 = v17;
    do
    {
      v20 = *(_DWORD *)(v16 + 32);
      v21 = v20 < 4;
      if (v20 >= 4)
        v22 = (uint64_t *)v16;
      else
        v22 = (uint64_t *)(v16 + 8);
      if (!v21)
        v19 = v16;
      v16 = *v22;
    }
    while (*v22);
    if (v19 == v17 || *(int *)(v19 + 32) > 4 || *(_QWORD *)(v19 + 40) < 2uLL)
      goto LABEL_22;
  }
  v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v66, 2uLL);
  v12 = (char *)__p;
  v13 = v65;
  v11[1] = 1;
  v8 = (char *)(v11 + 1);
  v9 = (char *)(v11 + 2);
  while (v13 != v12)
  {
    v14 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v8 - 1) = v14;
    v8 -= 4;
  }
  __p = v8;
  v65 = (char *)(v11 + 2);
  v66 = &v11[v10];
  if (v12)
  {
    operator delete(v12);
    v8 = (char *)__p;
  }
  v65 = v9;
  if (v8 == v9)
  {
LABEL_10:
    v15 = 0;
  }
  else
  {
LABEL_22:
    v52 = v9;
    while (1)
    {
      v23 = *(_DWORD *)v8;
      v24 = v73;
      if (*(_DWORD *)v8)
        v24 = &v73[8];
      if (*(_QWORD *)v24 != 1)
        break;
LABEL_48:
      v8 += 4;
      if (v8 == v9)
        goto LABEL_10;
    }
    if (v23)
      v25 = 168;
    else
      v25 = 144;
    if (v23)
      v26 = 176;
    else
      v26 = 152;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v67[v26] - *(_QWORD *)&v67[v25]) >> 3)) <= 1)
      ZinAssertImpl("Splitting a layer with a dimension size of 1");
    v27 = 0;
    v28 = -2;
    while (1)
    {
      v29 = *(_QWORD *)&v67[v25];
      v30 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&v67[v26] - v29) >> 3);
      if (v28 + 3 >= v30)
        break;
      v28 += 2;
      if (v30 <= v28)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v31 = (__int128 *)(v29 + v27);
      v32 = *v31;
      v33 = v31[1];
      v34 = v31[2];
      v60 = *((_QWORD *)v31 + 6);
      v58 = v33;
      v59 = v34;
      v57 = v32;
      v35 = *(__int128 *)((char *)v31 + 56);
      v36 = *(__int128 *)((char *)v31 + 72);
      v37 = *(__int128 *)((char *)v31 + 88);
      v56 = *((_QWORD *)v31 + 13);
      v54 = v36;
      v55 = v37;
      v53 = v35;
      if (LayerTilingHelper::Requirement::GetExtendedTo((LayerTilingHelper::Requirement *)&v57, (const LayerTilingHelper::Requirement *)&v53, (LayerTilingHelper::Requirement *)v61))ZinAssertImpl("Invalid deconv in spatial split");
      if (LayerTilingHelper::GetOutputCount((uint64_t)v67, (LayerTilingHelper::Requirement *)v61, v23) != 2)
        goto LABEL_50;
      v27 += 112;
      if (!(v61[0] + v62))
      {
        v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v67[v26] - *(_QWORD *)&v67[v25]) >> 3);
        break;
      }
    }
    v38 = 2 - (v30 & 0xFFFFFFFFFFFFFFFELL);
    v39 = (v30 & 0xFFFFFFFFFFFFFFFELL) - 2;
    v40 = 112 * (v30 >> 1) - 112;
    while (1)
    {
      v41 = v39;
      v42 = *(_QWORD *)&v67[v25];
      v43 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&v67[v26] - v42) >> 3);
      if (v43 <= v41)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_OWORD *)(v42 + v40);
      v45 = *(_OWORD *)(v42 + v40 + 16);
      v46 = *(_OWORD *)(v42 + v40 + 32);
      v60 = *(_QWORD *)(v42 + v40 + 48);
      v58 = v45;
      v59 = v46;
      v57 = v44;
      if (v43 <= v30 - 1)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v47 = (__int128 *)(v42 + 56 * (v30 - 1));
      v48 = *v47;
      v49 = v47[1];
      v50 = v47[2];
      v56 = *((_QWORD *)v47 + 6);
      v54 = v49;
      v55 = v50;
      v53 = v48;
      if (LayerTilingHelper::Requirement::GetExtendedTo((LayerTilingHelper::Requirement *)&v57, (const LayerTilingHelper::Requirement *)&v53, (LayerTilingHelper::Requirement *)v61))ZinAssertImpl("Invalid deconv in spatial split");
      if (v30 + v38 != LayerTilingHelper::GetOutputCount((uint64_t)v67, (LayerTilingHelper::Requirement *)v61, v23))
        break;
      if (v38)
      {
        v38 += 2;
        v39 = v41 - 2;
        v40 -= 112;
        v30 = v41;
        if (v63)
          continue;
      }
      v9 = v52;
      goto LABEL_48;
    }
LABEL_50:
    v15 = 1;
  }
  if (__p)
  {
    v65 = (char *)__p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v75 + 1))
  {
    *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
    operator delete(*((void **)&v75 + 1));
  }
  if ((_QWORD)v74)
  {
    *((_QWORD *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  if (*((_QWORD *)&v69 + 1))
    operator delete(*((void **)&v69 + 1));
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  return v15;
}

void sub_206F51A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38)
{
  if (__p)
    operator delete(__p);
  LayerTilingHelper::~LayerTilingHelper((LayerTilingHelper *)&a38);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsMultiFanoutCBCandidate(PressureBasedSubgraphIdentification *this, const Subgraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  ZinIrOpLayer *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;

  v6 = *((_QWORD *)this + 8);
  if (!*(_BYTE *)(v6 + 5) && !*(_BYTE *)(v6 + 8))
    return 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v25, *((const void **)a3 + 14), *((_QWORD *)a3 + 15), (uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3);
  __p = 0;
  v23 = 0;
  v24 = 0;
  if (ZinIrOpLayer::IsNoOp(a3, (uint64_t *)&__p))
  {
    v7 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 8);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    if (v7 != 7)
      goto LABEL_21;
  }
  else if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v8 = (char *)v25;
  v9 = v26;
  if ((unint64_t)(v26 - (_BYTE *)v25) < 9)
  {
LABEL_38:
    v13 = 0;
    if (!v8)
      return v13;
LABEL_39:
    v26 = v8;
    operator delete(v8);
    return v13;
  }
  if (v25 != v26)
  {
    v10 = (char *)v25 + 8;
    do
    {
      v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v10 - 1) + 64) + 8);
      v12 = v11 == 7 || v10 == v26;
      v10 += 8;
    }
    while (!v12);
    while (1)
    {
      __p = *(void **)v8;
      if ((const Subgraph *)((char *)a2 + 80) == (const Subgraph *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2 + 72, (ZinIrOpLayer **)&__p))break;
      v8 += 8;
      if (v8 == v9)
      {
        if (v11 == 7)
          break;
        v8 = (char *)v25;
        v14 = v26;
        if (v25 != v26)
        {
          v15 = (char *)v25 + 8;
          v16 = -1;
          do
          {
            v17 = (ZinIrOpLayer *)*((_QWORD *)v15 - 1);
            __p = (void *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
            v18 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)this + 80, (unint64_t *)&__p);
            v19 = PressureBasedSubgraphIdentification::CountOverComputedSpaceForLayer((uint64_t)this, (uint64_t)a2, v17, *v18, v18[1]);
            v20 = v16 == -1 || v19 == v16;
            v13 = !v20;
            if (!v20)
              break;
            v16 = v19;
            v12 = v15 == v14;
            v15 += 8;
          }
          while (!v12);
          goto LABEL_22;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_21:
  v13 = 0;
LABEL_22:
  v8 = (char *)v25;
  if (v25)
    goto LABEL_39;
  return v13;
}

void sub_206F51C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t **a4)
{
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  ZinIrOpLayer *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t i;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD **v30;
  BOOL v31;
  unint64_t v32;
  uint64_t **j;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  ZinIrTensor *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *__p;
  char *v53;
  uint64_t v54;
  char v55;
  ZinIrOpLayer *v56;
  uint64_t v57;
  ZinIrOpLayer *v58;
  uint64_t **v59;
  unint64_t v60;
  ZinIrOpLayer *v61;
  uint64_t *v62;
  _QWORD *v63[2];
  _QWORD **v64;
  _QWORD *v65[2];
  char v66;
  _BYTE v67[32];
  int v68;
  _QWORD **v69;
  _QWORD *v70[3];
  unint64_t v71;
  int64_t v72;
  uint64_t *v73[2];

  v48 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2);
  v49 = v6;
  v71 = v48;
  v72 = v6;
  ZinIrMemoryPressureAnalyzer::GetTimeConflictAllocations((_QWORD *)(a1 + 128), (const ZinLiveRange *)&v71, (uint64_t)&v69);
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v63[1] = 0;
  v64 = v65;
  memset(v67, 0, sizeof(v67));
  v68 = 1065353216;
  v62 = (uint64_t *)v63;
  v63[0] = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v7 + 360) == *(_QWORD *)(v7 + 352))
    ZinAssertImpl("Must run scheduler first");
  v8 = v69;
  if (v69 != v70)
  {
    v50 = a2 + 1;
    do
    {
      v9 = (_QWORD *)v8[4];
      v10 = ZinLiveRange::Contains(&v71, v9 + 2);
      v47 = (ZinIrTensor *)v9[4];
      v61 = (ZinIrOpLayer *)*((_QWORD *)v47 + 12);
      v11 = *(_DWORD *)(*((_QWORD *)v61 + 8) + 8);
      if (v10)
      {
        if (v11 == 7)
          goto LABEL_8;
        ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v64, v9[1], (const ZinLiveRange *)(v9 + 2), v47);
      }
      else if (v11 == 7)
      {
LABEL_8:
        if (v50 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, &v61))
        {
          v53 = 0;
          v54 = 0;
          __p = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *((const void **)v61 + 11), *((_QWORD *)v61 + 12), (uint64_t)(*((_QWORD *)v61 + 12) - *((_QWORD *)v61 + 11)) >> 3);
          v12 = 126 - 2 * __clz((v53 - (_BYTE *)__p) >> 3);
          if (v53 == __p)
            v13 = 0;
          else
            v13 = v12;
          std::__introsort<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,false>((uint64_t)__p, (ZinIrOpLayer **)v53, v13, 1);
          v14 = __p;
          v15 = v9[3];
          v59 = *(uint64_t ***)(*((_QWORD *)v53 - 1) + 48);
          v60 = v15;
          if (v53 - (_BYTE *)__p != 8)
          {
            v16 = 0;
            v17 = (v53 - (_BYTE *)__p) >> 3;
            do
            {
              v58 = 0;
              if (v17 <= v16)
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              v18 = (ZinIrOpLayer *)v14[v16];
              v57 = 0;
              v58 = v18;
              v57 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0, 0);
              if (v50 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, &v58))
              {
                for (i = v48; i < (unint64_t)v59; ++i)
                {
                  v56 = 0;
                  v24 = *(_QWORD *)(v7 + 352);
                  if (i >= (*(_QWORD *)(v7 + 360) - v24) >> 3)
                    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
                  v56 = *(ZinIrOpLayer **)(v24 + 8 * i);
                  v73[0] = (uint64_t *)&v56;
                  v25 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v62, &v56, (uint64_t)&std::piecewise_construct, v73);
                  std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v25 + 5, &v57, &v57);
                }
                v26 = v60;
                if (v60 <= v49)
                {
                  do
                  {
                    v56 = 0;
                    v27 = *(_QWORD *)(v7 + 352);
                    if (v26 >= (*(_QWORD *)(v7 + 360) - v27) >> 3)
                      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
                    v56 = *(ZinIrOpLayer **)(v27 + 8 * v26);
                    v73[0] = (uint64_t *)&v56;
                    v28 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v62, &v56, (uint64_t)&std::piecewise_construct, v73);
                    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v28 + 5, &v57, &v57);
                    ++v26;
                  }
                  while (v49 + 1 != v26);
                }
              }
              else
              {
                v19 = (uint64_t *)v59;
                v20 = *((_QWORD *)v58 + 6);
                if (v20 <= (unint64_t)v59 - 1)
                {
                  do
                  {
                    v56 = 0;
                    v21 = *(_QWORD *)(v7 + 352);
                    if (v20 >= (*(_QWORD *)(v7 + 360) - v21) >> 3)
                      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
                    v56 = *(ZinIrOpLayer **)(v21 + 8 * v20);
                    v73[0] = (uint64_t *)&v56;
                    v22 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v62, &v56, (uint64_t)&std::piecewise_construct, v73);
                    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v22 + 5, &v57, &v57);
                    ++v20;
                  }
                  while (v19 != (uint64_t *)v20);
                }
              }
              ++v16;
              v14 = __p;
              v17 = (v53 - (_BYTE *)__p) >> 3;
            }
            while (v16 < v17 - 1);
          }
          ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v64, v9[1], (const ZinLiveRange *)&v59, v47);
          if (__p)
          {
            v53 = (char *)__p;
            operator delete(__p);
          }
        }
      }
      v29 = (_QWORD *)v8[1];
      if (v29)
      {
        do
        {
          v30 = (_QWORD **)v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD **)v8[2];
          v31 = *v30 == v8;
          v8 = v30;
        }
        while (!v31);
      }
      v8 = v30;
    }
    while (v30 != v70);
  }
  v32 = v71;
  for (j = a3; (uint64_t)v32 < v72; ++v32)
  {
    v73[0] = 0;
    v34 = *(_QWORD *)(v7 + 352);
    if (v32 >= (*(_QWORD *)(v7 + 360) - v34) >> 3)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    v73[0] = *(uint64_t **)(v34 + 8 * v32);
    if (a2 + 1 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)v73))
    {
      v53 = 0;
      v54 = 0;
      __p = &v53;
      std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>(j, (ZinIrOpLayer **)v73, v73, (uint64_t *)&__p);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v53);
      v53 = 0;
      v54 = 0;
      __p = &v53;
      std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>(a4, (ZinIrOpLayer **)v73, v73, (uint64_t *)&__p);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v53);
      v53 = 0;
      v54 = 0;
      v55 = 0;
      __p = &v53;
      v59 = (uint64_t **)v32;
      v60 = v32;
      ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)&v64, (unint64_t *)&v59, (uint64_t)&__p);
      v35 = (char *)__p;
      if (__p != &v53)
      {
        do
        {
          v36 = *((_QWORD *)v35 + 4);
          if (*(_QWORD *)(v36 + 24) != v32)
          {
            v59 = v73;
            v37 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(j, (ZinIrOpLayer **)v73, (uint64_t)&std::piecewise_construct, (uint64_t **)&v59);
            std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v37 + 5, (uint64_t *)(v36 + 32), (uint64_t *)(v36 + 32));
          }
          v38 = (char *)*((_QWORD *)v35 + 1);
          if (v38)
          {
            do
            {
              v39 = (char **)v38;
              v38 = *(char **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (char **)*((_QWORD *)v35 + 2);
              v31 = *v39 == v35;
              v35 = (char *)v39;
            }
            while (!v31);
          }
          v35 = (char *)v39;
        }
        while (v39 != &v53);
      }
      v59 = v73;
      v40 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v62, (ZinIrOpLayer **)v73, (uint64_t)&std::piecewise_construct, (uint64_t **)&v59);
      v41 = (uint64_t *)v40[5];
      v42 = v40 + 6;
      if (v41 != v40 + 6)
      {
        do
        {
          v61 = (ZinIrOpLayer *)v41[4];
          v59 = v73;
          v43 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(a4, (ZinIrOpLayer **)v73, (uint64_t)&std::piecewise_construct, (uint64_t **)&v59);
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v43 + 5, (uint64_t *)&v61, (uint64_t *)&v61);
          v44 = (uint64_t *)v41[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (uint64_t *)v41[2];
              v31 = *v45 == (_QWORD)v41;
              v41 = v45;
            }
            while (!v31);
          }
          v41 = v45;
        }
        while (v45 != v42);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v53);
      j = a3;
    }
  }
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v62, v63[0]);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v67);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v64, v65[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v69, v70[0]);
}

void sub_206F522BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31,_QWORD *a32)
{
  uint64_t v32;

  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a28, a29);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table(a10);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&a31, a32);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v32 - 152, *(_QWORD **)(v32 - 144));
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::TensorToProducersAndConsumers(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t **a4)
{
  _QWORD *v4;
  _QWORD *v5;
  ZinIrOpLayer *v8;
  ZinIrTensor *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  ZinIrTensor *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  ZinIrTensor *v19;
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v21;
  ZinIrTensor **p_RootTensor;

  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v8 = (ZinIrOpLayer *)v5[4];
      if (ZinIrOpLayer::IsANELayer(v8))
      {
        RootTensor = 0;
        v21 = v8;
        v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
        RootTensor = ZinIrTensor::GetRootTensor(v9);
        p_RootTensor = &RootTensor;
        v10 = std::__tree<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,ZinIrIdComparator<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(a3, (uint64_t *)&RootTensor, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v10 + 5, &v21, (uint64_t *)&v21);
        v12 = (uint64_t *)*((_QWORD *)v8 + 11);
        v11 = (uint64_t *)*((_QWORD *)v8 + 12);
        while (v12 != v11)
        {
          v13 = *v12++;
          v19 = 0;
          v14 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
          v19 = ZinIrTensor::GetRootTensor(v14);
          p_RootTensor = &v19;
          v15 = std::__tree<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,ZinIrIdComparator<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(a4, (uint64_t *)&v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_RootTensor);
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v15 + 5, &v21, (uint64_t *)&v21);
        }
      }
      v16 = (_QWORD *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v5[2];
          v18 = *v17 == (_QWORD)v5;
          v5 = v17;
        }
        while (!v18);
      }
      v5 = v17;
    }
    while (v17 != v4);
  }
}

uint64_t PressureBasedSubgraphIdentification::DeterminePreResetCostModelParameters(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  ZinIrTensor *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  _QWORD *v18;
  NSObject *v19;
  char *v20;
  _QWORD *v21;
  ZinIrTensor *v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  ZinIrOpLayer *v28;
  ZinIrTensor **v29;
  ZinIrTensor **v30;
  ZinIrTensor *v31;
  ZinIrTensor *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  ZinIrTensor *v49;
  _QWORD *v50;
  _QWORD *v51;
  ZinIrTensor *v54;
  std::__shared_weak_count *v55;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v57;
  ZinIrOpLayer *v58;
  uint64_t *v59;
  _QWORD *v60[2];
  _QWORD **v61;
  _QWORD *v62[2];
  _QWORD v63[3];
  _QWORD **v64;
  _QWORD *v65[2];
  _QWORD v66[3];
  _QWORD **v67;
  _QWORD *v68[2];
  char v69;
  _QWORD v70[4];
  int v71;
  _QWORD v72[4];
  int v73;
  __int128 buf;
  char *v75;
  __int16 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  memset(v72, 0, sizeof(v72));
  v73 = 1065353216;
  memset(v70, 0, sizeof(v70));
  v71 = 1065353216;
  v59 = (uint64_t *)v60;
  v60[0] = 0;
  v62[0] = 0;
  v62[1] = 0;
  v60[1] = 0;
  v61 = v62;
  v63[0] = v63;
  v63[1] = v63;
  v65[0] = 0;
  v65[1] = 0;
  v63[2] = 0;
  v64 = v65;
  memset(v66, 0, sizeof(v66));
  v68[0] = 0;
  v68[1] = 0;
  v67 = v68;
  v69 = 0;
  PressureBasedSubgraphIdentification::IdentifyInputOutputNodes(a1, a2, &v59);
  v5 = v59;
  if (v59 != (uint64_t *)v60)
  {
    v6 = a2 + 1;
    v7 = MEMORY[0x24BDACB70];
    do
    {
      v8 = v5[4];
      if (*(_DWORD *)(*(_QWORD *)(v8 + 64) + 8) == 7)
      {
        v10 = *(_QWORD **)(v8 + 88);
        v9 = *(_QWORD **)(v8 + 96);
        while (1)
        {
          if (v10 == v9)
            ZinAssertImpl("A concat cannot be a full input to a subgraph");
          *(_QWORD *)&buf = *v10;
          if (v6 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)&buf))break;
          ++v10;
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + 73) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v11 = (_QWORD *)(v8 + 24);
          if (*(char *)(v8 + 47) < 0)
            v11 = (_QWORD *)*v11;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v11;
          _os_log_impl(&dword_2069AB000, v7, OS_LOG_TYPE_INFO, "\tInput Node : %s", (uint8_t *)&buf, 0xCu);
        }
        v13 = *(_QWORD **)(v8 + 88);
        v12 = *(_QWORD **)(v8 + 96);
        while (v13 != v12)
        {
          *(_QWORD *)&buf = 0;
          *(_QWORD *)&buf = *v13;
          if (v6 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)&buf))
          {
            v14 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)buf + 32))(buf, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v14);
            std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v72, &RootTensor, &RootTensor);
          }
          ++v13;
        }
      }
      v15 = (uint64_t *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != (uint64_t *)v60);
  }
  v18 = v61;
  if (v61 != v62)
  {
    v19 = MEMORY[0x24BDACB70];
    do
    {
      v20 = (char *)v18[4];
      if (*(_BYTE *)(a1 + 73) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v21 = v20 + 24;
        if (v20[47] < 0)
          v21 = (_QWORD *)*v21;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_2069AB000, v19, OS_LOG_TYPE_INFO, "\tOutput Node : %s", (uint8_t *)&buf, 0xCu);
      }
      v22 = (ZinIrTensor *)(*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0, 0);
      *(_QWORD *)&buf = ZinIrTensor::GetRootTensor(v22);
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v70, &buf, &buf);
      v23 = (_QWORD *)v18[1];
      if (v23)
      {
        do
        {
          v24 = (_QWORD **)v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD **)v18[2];
          v17 = *v24 == v18;
          v18 = v24;
        }
        while (!v17);
      }
      v18 = v24;
    }
    while (v24 != v62);
  }
  v27 = (_QWORD *)*a2;
  v25 = a2 + 1;
  v26 = v27;
  if (v27 != v25)
  {
    do
    {
      v28 = (ZinIrOpLayer *)v26[4];
      if (ZinIrOpLayer::IsANELayer(v28))
      {
        v58 = v28;
        buf = 0uLL;
        v76 = 0;
        v75 = 0;
        (*(void (**)(ZinIrTensor **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v28 + 512))(&RootTensor, v28);
        v29 = (ZinIrTensor **)RootTensor;
        v30 = (ZinIrTensor **)v57;
        if (RootTensor != v57)
        {
          do
          {
            v31 = *v29;
            if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v58 + 120))(v58))
              goto LABEL_47;
            (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)v58 + 128))(&v54);
            v32 = v54;
            v33 = v55;
            if (v55)
            {
              p_shared_owners = (unint64_t *)&v55->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            if (v31 != v32)
            {
LABEL_47:
              v54 = ZinIrTensor::GetRootTensor(v31);
              v36 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v72, &v54);
              v37 = v36;
              v38 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1) >= (unint64_t)v75)
              {
                v40 = *((_QWORD *)&buf + 1) - buf;
                if ((uint64_t)(*((_QWORD *)&buf + 1) - buf) <= -3)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v41 = v40 >> 1;
                if ((unint64_t)&v75[-buf] <= (v40 >> 1) + 1)
                  v42 = v41 + 1;
                else
                  v42 = (uint64_t)&v75[-buf];
                if ((unint64_t)&v75[-buf] >= 0x7FFFFFFFFFFFFFFELL)
                  v43 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v43 = v42;
                if (v43)
                  v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v75, v43);
                else
                  v44 = 0;
                v45 = &v44[2 * v41];
                *(_WORD *)v45 = (v37 == 0) | 0x100;
                v39 = v45 + 2;
                v46 = (char *)*((_QWORD *)&buf + 1);
                v47 = (char *)buf;
                if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
                {
                  do
                  {
                    v48 = *((_WORD *)v46 - 1);
                    v46 -= 2;
                    *((_WORD *)v45 - 1) = v48;
                    v45 -= 2;
                  }
                  while (v46 != v47);
                  v46 = (char *)buf;
                }
                *(_QWORD *)&buf = v45;
                *((_QWORD *)&buf + 1) = v39;
                v75 = &v44[2 * v43];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                **((_WORD **)&buf + 1) = (v36 == 0) | 0x100;
                v39 = (_WORD *)(v38 + 2);
              }
              *((_QWORD *)&buf + 1) = v39;
            }
            ++v29;
          }
          while (v29 != v30);
          v29 = (ZinIrTensor **)RootTensor;
        }
        if (v29)
        {
          v57 = (ZinIrTensor *)v29;
          operator delete(v29);
        }
        v49 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0, 0);
        RootTensor = ZinIrTensor::GetRootTensor(v49);
        v76 = (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v70, &RootTensor) == 0) | 0x100;
        std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,ZinANELayer *&,CostModelParameters&>(a3, &v58, &v58, (uint64_t)&buf);
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
      }
      v50 = (_QWORD *)v26[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (_QWORD *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (_QWORD *)v26[2];
          v17 = *v51 == (_QWORD)v26;
          v26 = v51;
        }
        while (!v17);
      }
      v26 = v51;
    }
    while (v51 != v25);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v67, v68[0]);
  *(_QWORD *)&buf = v66;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v64, v65[0]);
  std::__list_imp<ZinIrSection *>::clear(v63);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v61, v62[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, v60[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v70);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v72);
}

void sub_206F52AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  Subgraph::~Subgraph((Subgraph *)&a20);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v39 - 192);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::IdentifyInputOutputNodes(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  ZinIrOpLayer *v15;
  ZinIrOpLayer *v16;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = a3 + 3;
    do
    {
      v16 = (ZinIrOpLayer *)v4[4];
      v8 = (ZinIrOpLayer **)*((_QWORD *)v16 + 11);
      v9 = (ZinIrOpLayer **)*((_QWORD *)v16 + 12);
      while (v8 != v9)
      {
        v15 = 0;
        v15 = *v8;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v15))
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a3, &v16, (uint64_t *)&v16);
          break;
        }
        ++v8;
      }
      v10 = (ZinIrOpLayer **)*((_QWORD *)v16 + 14);
      v11 = (ZinIrOpLayer **)*((_QWORD *)v16 + 15);
      while (v10 != v11)
      {
        v15 = 0;
        v15 = *v10;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v15))
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v7, &v16, (uint64_t *)&v16);
          break;
        }
        ++v10;
      }
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v14 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != v3);
  }
}

void PressureBasedSubgraphIdentification::DeterminePostResetCostModelParameters(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8)
{
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  ZinIrOpLayer **v28;
  std::__shared_weak_count *v29;
  ZinIrOpLayer **v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  ZinIrTensor *v33;
  ZinIrOpLayer *RootTensor;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v54;
  ZinIrOpLayer **v55;
  std::__shared_weak_count *v56;
  void *__p;
  _BYTE *v58;
  uint64_t v59;
  __int16 v60;
  ZinIrOpLayer *v61;
  ZinIrOpLayer *v62;

  v9 = (_QWORD *)*a3;
  v50 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v10 = a8 + 1;
    v48 = (_QWORD *)(a6 + 8);
    v49 = (_QWORD *)(a5 + 8);
    while (1)
    {
      v62 = (ZinIrOpLayer *)v9[4];
      if (v49 != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a5, (uint64_t *)&v62))
      {
        v11 = (_QWORD *)std::map<ZinIrOpLayer *,long,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,long>>>::at(a5, (uint64_t *)&v62);
        v13 = v11 + 1;
        v12 = (_QWORD *)*v11;
        if ((_QWORD *)*v11 != v11 + 1)
        {
          do
          {
            v61 = (ZinIrOpLayer *)v12[4];
            __p = 0;
            v58 = 0;
            v60 = 0;
            v59 = 0;
            if (v10 == (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a8, &v61))v14 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(a7, &v61);
            else
              v14 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a8, &v61);
            if (&__p != (void **)v14)
              std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>((char *)&__p, *(char **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 1);
            v60 = 256;
            v55 = &v61;
            v15 = std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,std::piecewise_construct_t const&,std::tuple<ZinANELayer * const&>,std::tuple<>>(a8, &v61, (uint64_t)&std::piecewise_construct, &v55);
            if (v15 + 40 != (char *)&__p)
              std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>(v15 + 40, (char *)__p, (uint64_t)v58, (v58 - (_BYTE *)__p) >> 1);
            *((_WORD *)v15 + 32) = v60;
            if (__p)
            {
              v58 = __p;
              operator delete(__p);
            }
            v16 = (_QWORD *)v12[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v12[2];
                v18 = *v17 == (_QWORD)v12;
                v12 = v17;
              }
              while (!v18);
            }
            v12 = v17;
          }
          while (v17 != v13);
        }
      }
      if (v48 != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a6, (uint64_t *)&v62))
      {
        v19 = (_QWORD *)std::map<ZinIrOpLayer *,long,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,long>>>::at(a6, (uint64_t *)&v62);
        v20 = (_QWORD *)*v19;
        v54 = v19 + 1;
        if ((_QWORD *)*v19 != v19 + 1)
          break;
      }
LABEL_51:
      v38 = (_QWORD *)v9[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v9[2];
          v18 = *v39 == (_QWORD)v9;
          v9 = v39;
        }
        while (!v18);
      }
      v9 = v39;
      if (v39 == v50)
        goto LABEL_57;
    }
    while (1)
    {
      v61 = (ZinIrOpLayer *)v20[4];
      __p = 0;
      v58 = 0;
      v60 = 0;
      v59 = 0;
      if (v10 == (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a8, &v61))
      {
        v21 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(a7, &v61);
        v22 = v21;
        if (&__p != (void **)v21)
LABEL_26:
          std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>((char *)&__p, *(char **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 1);
      }
      else
      {
        v21 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a8, &v61);
        v22 = v21;
        if (&__p != (void **)v21)
          goto LABEL_26;
      }
      v60 = *(_WORD *)(v22 + 24);
      v23 = v61;
      v24 = *((_QWORD *)v61 + 11);
      if (*((_QWORD *)v61 + 12) != v24)
      {
        v25 = 0;
        v26 = 0;
        do
        {
          v27 = *(_QWORD *)(v24 + 8 * v25);
          if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v23 + 120))(v23))
            goto LABEL_36;
          v28 = *(ZinIrOpLayer ***)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 40))(v27, 0, 0);
          (*(void (**)(ZinIrOpLayer ***__return_ptr))(*(_QWORD *)v61 + 128))(&v55);
          v30 = v55;
          v29 = v56;
          if (v56)
          {
            p_shared_owners = (unint64_t *)&v56->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v28 == v30)
          {
            --v26;
          }
          else
          {
LABEL_36:
            v33 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v33);
            if (RootTensor == v62)
            {
              if (v26 >= (v58 - (_BYTE *)__p) >> 1)
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              *((_WORD *)__p + v26) = 256;
            }
          }
          ++v25;
          ++v26;
          v23 = v61;
          v24 = *((_QWORD *)v61 + 11);
        }
        while (v25 < (*((_QWORD *)v61 + 12) - v24) >> 3);
      }
      v55 = &v61;
      v35 = std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,std::piecewise_construct_t const&,std::tuple<ZinANELayer * const&>,std::tuple<>>(a8, &v61, (uint64_t)&std::piecewise_construct, &v55);
      if (v35 + 40 != (char *)&__p)
        std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>(v35 + 40, (char *)__p, (uint64_t)v58, (v58 - (_BYTE *)__p) >> 1);
      *((_WORD *)v35 + 32) = v60;
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      v36 = (_QWORD *)v20[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v20[2];
          v18 = *v37 == (_QWORD)v20;
          v20 = v37;
        }
        while (!v18);
      }
      v20 = v37;
      if (v37 == v54)
        goto LABEL_51;
    }
  }
LABEL_57:
  v40 = a2;
  v41 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    do
    {
      v62 = *(ZinIrOpLayer **)(v41[4] + 96);
      if (a2 + 8 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v40, &v62)&& ZinIrOpLayer::IsANELayer(v62))
      {
        v61 = v62;
        __p = 0;
        v58 = 0;
        v60 = 0;
        v59 = 0;
        if (a8 + 1 == (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a8, &v61))v42 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(a7, &v61);
        else
          v42 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a8, &v61);
        if (&__p != (void **)v42)
          std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>((char *)&__p, *(char **)v42, *(_QWORD *)(v42 + 8), (uint64_t)(*(_QWORD *)(v42 + 8) - *(_QWORD *)v42) >> 1);
        v60 = 256;
        v55 = &v61;
        v43 = std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,std::piecewise_construct_t const&,std::tuple<ZinANELayer * const&>,std::tuple<>>(a8, &v61, (uint64_t)&std::piecewise_construct, &v55);
        if (v43 + 40 != (char *)&__p)
          std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>(v43 + 40, (char *)__p, (uint64_t)v58, (v58 - (_BYTE *)__p) >> 1);
        *((_WORD *)v43 + 32) = v60;
        if (__p)
        {
          v58 = __p;
          operator delete(__p);
        }
        v40 = a2;
      }
      v44 = (_QWORD *)v41[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v41[2];
          v18 = *v45 == (_QWORD)v41;
          v41 = v45;
        }
        while (!v18);
      }
      v41 = v45;
    }
    while (v45 != a4 + 1);
  }
}

void sub_206F53210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double PressureBasedSubgraphIdentification::CalculateInputCopyCost(PressureBasedSubgraphIdentification *this, uint64_t **a2, const ZinIrTensor *a3)
{
  _QWORD *v5;
  double *v6;
  double v7;
  const ZinIrTensor *v8;
  ZinIrOpLayer *v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer *v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  ZinIrOpLayer *v28;
  _QWORD *v29;
  char inserted;
  _WORD *v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  char *size;
  std::string::size_type v36;
  __int16 v37;
  void (***v38)(_QWORD, ZinIrOpLayer *, std::string *, void **);
  unint64_t IndexOfMatchedIncomingLayer;
  unint64_t IndexOfMatchedOutgoingLayer;
  std::string::size_type v41;
  void *v43;
  void *v44;
  uint64_t v45;
  __int16 v46;
  std::string v47;
  __int16 v48;
  void *__p[2];
  void *v50;
  _BYTE v51[172];
  _QWORD *v52;
  _QWORD *v53[2];
  unsigned __int8 v54;
  _QWORD v55[3];
  char v56;
  const ZinIrTensor *v57;
  std::string v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v57 = a3;
  v5 = (_QWORD *)((char *)this + 248);
  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 31, &v57))
  {
    v6 = (double *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v5, &v57);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v6[3];
  }
  else
  {
    v8 = v57;
    v9 = (ZinIrOpLayer *)*((_QWORD *)v57 + 12);
    v10 = (ZinIrOpLayer **)*((_QWORD *)v9 + 14);
    v11 = (ZinIrOpLayer **)*((_QWORD *)v9 + 15);
    if (v10 != v11)
    {
      while (*(_DWORD *)(*((_QWORD *)*v10 + 8) + 8) != 7)
      {
        if (++v10 == v11)
          goto LABEL_7;
      }
    }
    if (v10 == v11)
LABEL_7:
      ZinAssertImpl("Invalid and unnecessary copy analyzed");
    v12 = *v10;
    if (*((char *)v57 + 47) >= 0)
      v13 = *((unsigned __int8 *)v57 + 47);
    else
      v13 = *((_QWORD *)v57 + 4);
    v14 = &v58;
    std::string::basic_string[abi:ne180100]((uint64_t)&v58, v13 + 1);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if (v13)
    {
      v17 = (char *)*((_QWORD *)v8 + 3);
      v16 = (char *)v8 + 24;
      v15 = v17;
      if (v16[23] >= 0)
        v18 = v16;
      else
        v18 = v15;
      memmove(v14, v18, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 95;
    (*(void (**)(_QWORD **__return_ptr, PressureBasedSubgraphIdentification *))(*(_QWORD *)this + 120))(v53, this);
    if ((v54 & 0x80u) == 0)
      v19 = (const std::string::value_type *)v53;
    else
      v19 = (const std::string::value_type *)v53[0];
    if ((v54 & 0x80u) == 0)
      v20 = v54;
    else
      v20 = (std::string::size_type)v53[1];
    v21 = std::string::append(&v58, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v47, "bypass_for_cm", 0xDuLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50 = (void *)v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v55, __p);
    if (SHIBYTE(v50) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if ((char)v54 < 0)
      operator delete(v53[0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v25 = *((_QWORD *)v9 + 2);
    v26 = *((_QWORD *)v57 + 12);
    v27 = *((_DWORD *)v57 + 22);
    v52 = 0;
    v51[0] = 0;
    v51[168] = 0;
    v28 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v25, (uint64_t)v55, v26, v27, &v52, 0, (uint64_t)v51, 1.0);
    v29 = v52;
    v52 = 0;
    if (v29)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v52, v29);
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    v47.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v47);
    inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, v28, v9, v12, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v50 = __p[1];
      operator delete(__p[1]);
    }
    if ((inserted & 1) == 0)
      ZinAssertImpl("Graph With an Illegal Insert");
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
    ZinMirSetActiveNE(v28, (CFArrayRef *)__p);
    memset(&v47, 0, sizeof(v47));
    v48 = 0;
    v31 = std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v47.__r_.__value_.__r.__words[2], 1);
    v33 = (std::string::size_type)&v31[v32];
    *v31 = 256;
    v34 = (std::string::size_type)(v31 + 1);
    size = (char *)v47.__r_.__value_.__l.__size_;
    v36 = v47.__r_.__value_.__r.__words[0];
    if (v47.__r_.__value_.__l.__size_ != v47.__r_.__value_.__r.__words[0])
    {
      do
      {
        v37 = *((_WORD *)size - 1);
        size -= 2;
        *--v31 = v37;
      }
      while (size != (char *)v36);
      size = (char *)v47.__r_.__value_.__r.__words[0];
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    v47.__r_.__value_.__l.__size_ = v34;
    v47.__r_.__value_.__r.__words[2] = v33;
    if (size)
    {
      operator delete(size);
      v31 = (_WORD *)v47.__r_.__value_.__r.__words[0];
    }
    v47.__r_.__value_.__l.__size_ = v34;
    v48 = 257;
    memset(&v58, 0, sizeof(v58));
    v59 = 0;
    v38 = (void (***)(_QWORD, ZinIrOpLayer *, std::string *, void **))*((_QWORD *)this + 30);
    v44 = 0;
    v45 = 0;
    v43 = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v43, v31, v34, (uint64_t)(v34 - (_QWORD)v31) >> 1);
    v46 = v48;
    (**v38)(v38, v28, &v58, &v43);
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)a2, v12, v28);
    IndexOfMatchedOutgoingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedOutgoingLayer((ZinIrOpLayerGraph *)a2, v9, v28, 0xFFFFFFFFFFFFFFFFLL);
    if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v28, 0)
      || (ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v9, (uint64_t)v12, IndexOfMatchedOutgoingLayer, IndexOfMatchedIncomingLayer, 0) & 1) == 0)
    {
      ZinAssertImpl("Graph with an Illegal Removal");
    }
    v41 = v58.__r_.__value_.__r.__words[0];
    v53[0] = &v57;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v5, &v57, (uint64_t)&std::piecewise_construct, v53)[3] = v41;
    v7 = *(double *)&v58.__r_.__value_.__l.__data_;
    if (v47.__r_.__value_.__r.__words[0])
    {
      v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
    v55[0] = off_24C01FBB0;
    if (v56 < 0)
      operator delete((void *)v55[1]);
  }
  return v7;
}

void sub_206F536F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a20);
  *(_QWORD *)(v22 - 192) = off_24C01FBB0;
  if (*(char *)(v22 - 161) < 0)
    operator delete(*(void **)(v22 - 184));
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::FindMinimumCostDescriptor(uint64_t *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD **v16;
  _BOOL4 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *i;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  _BYTE *v36;
  char *__p;
  char *v40;
  char *v41;
  char v42;

  __p = 0;
  v40 = 0;
  v41 = 0;
  v5 = *a1;
  if (a1[1] == *a1)
    goto LABEL_43;
  v36 = a4;
  v7 = 0;
  do
  {
    v8 = v5 + 16 * v7;
    v9 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(a3, (ZinIrOpLayer **)(v8 + 8));
    v11 = *a1;
    v10 = a1[1];
    if (v10 != *a1)
    {
      v12 = (_QWORD **)v9;
      v13 = 0;
      v14 = 0;
      v15 = (_QWORD *)(v9 + 8);
      do
      {
        if (v7 != v14 && *(double *)v8 == *(double *)(v11 + v13))
        {
          v16 = (_QWORD **)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(a3, (ZinIrOpLayer **)(v11 + v13 + 8));
          v17 = std::__includes[abi:ne180100]<std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,ZinIrIdComparator<ZinIrTensor const*> &,std::__identity,std::__identity>(*v16, v16 + 1, *v12, v15);
          if (std::__includes[abi:ne180100]<std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,ZinIrIdComparator<ZinIrTensor const*> &,std::__identity,std::__identity>(*v12, v15, *v16, v16 + 1)&& !v17)
          {
            goto LABEL_27;
          }
          v11 = *a1;
          v10 = a1[1];
        }
        ++v14;
        v13 += 16;
      }
      while (v14 < (v10 - v11) >> 4);
    }
    if (v40 >= v41)
    {
      v19 = (v40 - __p) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v21 = v41 - __p;
      if ((v41 - __p) >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v41, v22);
      else
        v23 = 0;
      v24 = &v23[16 * v19];
      *(_OWORD *)v24 = *(_OWORD *)v8;
      v25 = v40;
      v26 = v24;
      if (v40 != __p)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
          v26 -= 16;
          v25 -= 16;
        }
        while (v25 != __p);
        v25 = __p;
      }
      v18 = v24 + 16;
      __p = v26;
      v41 = &v23[16 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)v8;
      v18 = v40 + 16;
    }
    v40 = v18;
LABEL_27:
    ++v7;
    v5 = *a1;
  }
  while (v7 < (a1[1] - *a1) >> 4);
  v27 = __p;
  a4 = v36;
  if (__p == v40)
    goto LABEL_43;
  for (i = __p + 16; i != v40; i += 16)
  {
    v29 = (uint64_t *)*((_QWORD *)i + 1);
    if (v29)
    {
      v30 = (uint64_t *)*((_QWORD *)v27 + 1);
      if (!v30
        || *(double *)i < *(double *)v27
        || *(double *)v27 >= *(double *)i
        && ((v31 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a2),
             v33 = ((double)v31 + (double)v32) * 0.5,
             v34 = vabdd_f64((double)v29[6], v33),
             v35 = vabdd_f64((double)v30[6], v33),
             v34 < v35)
         || v35 >= v34 && ScheduleComparator::operator()((int)&v42, (ZinIrOpLayer *)v29, (ZinIrOpLayer *)v30)))
      {
        v27 = i;
      }
    }
  }
  if (v27 == v40)
  {
LABEL_43:
    *a4 = 0;
    a4[16] = 0;
  }
  else
  {
    *(_OWORD *)v36 = *(_OWORD *)v27;
    v36[16] = 1;
  }
  if (__p)
    operator delete(__p);
}

void sub_206F53B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer **PressureBasedSubgraphIdentification::DetermineBestLayerFromCostModel(_BYTE *a1, uint64_t **a2, _QWORD *a3, _QWORD *a4)
{
  ZinIrOpLayer **v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD **v16;
  void (***v17)(_QWORD, _QWORD *, uint8_t *, void **);
  void (***v18)(_QWORD, char *, void **, void **);
  char *v19;
  uint64_t v20;
  double v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  double v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  ZinIrOpLayer **v40;
  ZinIrOpLayer *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  ZinIrOpLayer *v52;
  ZinIrOpLayer **v53;
  _BYTE *v54;
  ZinIrOpLayer *v55;
  double *v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  double *v63;
  char *v64;
  char *v65;
  double *v66;
  ZinIrOpLayer *v67;
  ZinIrOpLayer ***v68;
  ZinIrOpLayer **BestResetLayer;
  ZinIrOpLayer **v70;
  _QWORD *v71;
  ZinIrOpLayer *v72;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  ZinIrOpLayer **v80;
  void *v81;
  void *v82;
  uint64_t v83;
  __int16 v84;
  void *__p;
  void *v86;
  uint64_t v87;
  __int16 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD **v93;
  _QWORD *v94[2];
  void *v95;
  double *v96;
  double *v97;
  _QWORD **v98;
  _QWORD *v99[2];
  _QWORD **v100;
  _QWORD *v101[2];
  _QWORD **v102;
  _QWORD *v103[2];
  _QWORD **v104;
  _QWORD *v105[2];
  ZinIrOpLayer **v106;
  _QWORD *v107[2];
  _BYTE v108[12];
  __int16 v109;
  double v110;
  char v111;
  uint8_t v112[4];
  _BYTE *v113;
  uint8_t buf[24];
  _QWORD v115[10];
  char v116;
  _QWORD v117[22];

  v117[19] = *MEMORY[0x24BDAC8D0];
  if (a1[73] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tDetermineBestLayerFromCostModel", buf, 2u);
  }
  v107[0] = 0;
  v107[1] = 0;
  v105[1] = 0;
  v106 = (ZinIrOpLayer **)v107;
  v104 = v105;
  v105[0] = 0;
  (*(void (**)(_BYTE *, _QWORD *, ZinIrOpLayer ***, _QWORD ***))(*(_QWORD *)a1 + 168))(a1, a3, &v106, &v104);
  v103[0] = 0;
  v103[1] = 0;
  v101[1] = 0;
  v102 = v103;
  v100 = v101;
  v101[0] = 0;
  (*(void (**)(_BYTE *, _QWORD *, _QWORD ***, _QWORD ***))(*(_QWORD *)a1 + 184))(a1, a3, &v102, &v100);
  v99[0] = 0;
  v99[1] = 0;
  v98 = v99;
  (*(void (**)(_BYTE *, _QWORD *, _QWORD ***))(*(_QWORD *)a1 + 176))(a1, a3, &v98);
  v79 = a3;
  v74 = a4;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v8 = v106;
  if (v106 == (ZinIrOpLayer **)v107)
    goto LABEL_115;
  v78 = *MEMORY[0x24BEDB7F0];
  v76 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v77 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v9 = MEMORY[0x24BDACB70];
  v75 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v94[0] = 0;
    v94[1] = 0;
    v93 = v94;
    v80 = v8 + 4;
    if (v105 == (_QWORD **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v104, v8 + 4))ZinAssertImpl("Invalid cost model internal state");
    v10 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v104, v80);
    (*(void (**)(_BYTE *, _QWORD *, _QWORD **, uint64_t, _QWORD ***, _QWORD ***, _QWORD ***, _QWORD ***))(*(_QWORD *)a1 + 192))(a1, v79, (_QWORD **)v8 + 5, v10, &v102, &v100, &v98, &v93);
    if (a1[75] && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v11 = (_QWORD *)((char *)*v80 + 24);
      if (*((char *)*v80 + 47) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_2069AB000, v9, OS_LOG_TYPE_INFO, "\t\t\tChecking Potential Reset Layer %s", buf, 0xCu);
    }
    v12 = v93;
    v13 = 0.0;
    if (v93 != v94)
    {
      do
      {
        memset(buf, 0, sizeof(buf));
        LOBYTE(v115[0]) = 0;
        v15 = v12[4];
        v14 = v12[5];
        v16 = v12 + 4;
        *(double *)&v89 = 0.0;
        v90 = 0;
        v92 = 0;
        v91 = 0;
        v17 = (void (***)(_QWORD, _QWORD *, uint8_t *, void **))*((_QWORD *)a1 + 30);
        v86 = 0;
        v87 = 0;
        __p = 0;
        std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&__p, v14, (uint64_t)v12[6], ((char *)v12[6] - (char *)v14) >> 1);
        v88 = *((_WORD *)v12 + 32);
        (**v17)(v17, v15, buf, &__p);
        if (__p)
        {
          v86 = __p;
          operator delete(__p);
        }
        v18 = (void (***)(_QWORD, char *, void **, void **))*((_QWORD *)a1 + 30);
        v19 = (char *)*v16;
        v20 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v98, (ZinIrOpLayer **)v12 + 4);
        v81 = 0;
        v82 = 0;
        v83 = 0;
        std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v81, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 1);
        v84 = *(_WORD *)(v20 + 24);
        (**v18)(v18, v19, &v89, &v81);
        if (v81)
        {
          v82 = v81;
          operator delete(v81);
        }
        v21 = *(double *)buf;
        v22 = v89;
        if (*(double *)buf < *(double *)&v89)
          ZinAssertImpl("Incorrect DRAM cost");
        if (a1[75] && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          v23 = *v16 + 3;
          if (*((char *)*v16 + 47) < 0)
            v23 = (_QWORD *)*v23;
          *(_DWORD *)v108 = 136315394;
          *(_QWORD *)&v108[4] = v23;
          v109 = 2048;
          v110 = v21 - *(double *)&v22;
          _os_log_impl(&dword_2069AB000, v9, OS_LOG_TYPE_INFO, "\t\t\t\t Engine Layer %s, Cost %f", v108, 0x16u);
        }
        v24 = v12[1];
        if (v24)
        {
          do
          {
            v25 = (_QWORD **)v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD **)v12[2];
            v26 = *v25 == v12;
            v12 = v25;
          }
          while (!v26);
        }
        v13 = v13 + v21 - *(double *)&v22;
        v12 = v25;
      }
      while (v25 != v94);
    }
    v27 = (_QWORD *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)&v104, v80);
    v29 = v27 + 1;
    v28 = (_QWORD *)*v27;
    if ((_QWORD *)*v27 != v27 + 1)
    {
      do
      {
        v30 = (char *)v28[4];
        v31 = PressureBasedSubgraphIdentification::CalculateInputCopyCost((PressureBasedSubgraphIdentification *)a1, a2, (const ZinIrTensor *)v30);
        if (a1[75] && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          v32 = v30 + 24;
          if (v30[47] < 0)
            v32 = (_QWORD *)*v32;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v31;
          _os_log_impl(&dword_2069AB000, v9, OS_LOG_TYPE_INFO, "\t\t\t\t Copy Tensor %s, Cost %f", buf, 0x16u);
        }
        v33 = (_QWORD *)v28[1];
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v28[2];
            v26 = *v34 == (_QWORD)v28;
            v28 = v34;
          }
          while (!v26);
        }
        v13 = v13 + v31;
        v28 = v34;
      }
      while (v34 != v29);
    }
    if (a1[73])
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"\t\tReset Layer : ", 16);
      v36 = *((char *)*v80 + 47);
      if (v36 >= 0)
        v37 = (uint64_t)*v80 + 24;
      else
        v37 = *((_QWORD *)*v80 + 3);
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)*v80 + 47);
      else
        v38 = *((_QWORD *)*v80 + 4);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" { ", 3);
      std::string::basic_string[abi:ne180100]<0>(&v89, &byte_207AF6795);
      v40 = (ZinIrOpLayer **)v8[5];
      if (v40 != v8 + 6)
      {
        do
        {
          v41 = v40[4];
          if (v91 >= 0)
            v42 = &v89;
          else
            v42 = v89;
          if (v91 >= 0)
            v43 = HIBYTE(v91);
          else
            v43 = v90;
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v42, v43);
          v47 = *((_QWORD *)v41 + 3);
          v46 = (uint64_t)v41 + 24;
          v45 = v47;
          v48 = *(char *)(v46 + 23);
          if (v48 >= 0)
            v49 = v46;
          else
            v49 = v45;
          if (v48 >= 0)
            v50 = *(unsigned __int8 *)(v46 + 23);
          else
            v50 = *(_QWORD *)(v46 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v49, v50);
          if (SHIBYTE(v91) < 0)
          {
            v90 = 2;
            v51 = (char *)v89;
          }
          else
          {
            HIBYTE(v91) = 2;
            v51 = (char *)&v89;
          }
          strcpy(v51, ", ");
          v52 = v40[1];
          if (v52)
          {
            do
            {
              v53 = (ZinIrOpLayer **)v52;
              v52 = *(ZinIrOpLayer **)v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              v53 = (ZinIrOpLayer **)v40[2];
              v26 = *v53 == (ZinIrOpLayer *)v40;
              v40 = v53;
            }
            while (!v26);
          }
          v40 = v53;
        }
        while (v53 != v8 + 6);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" } Cost : ", 10);
      std::ostream::operator<<();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v115, v108);
        v54 = v108;
        if (v111 < 0)
          v54 = *(_BYTE **)v108;
        *(_DWORD *)v112 = 136315138;
        v113 = v54;
        _os_log_impl(&dword_2069AB000, v9, OS_LOG_TYPE_INFO, "%s", v112, 0xCu);
        if (v111 < 0)
          operator delete(*(void **)v108);
      }
      if (SHIBYTE(v91) < 0)
        operator delete(v89);
      *(_QWORD *)buf = v78;
      *(_QWORD *)&buf[*(_QWORD *)(v78 - 24)] = v77;
      *(_QWORD *)&buf[16] = v76;
      v115[0] = v75;
      if (v116 < 0)
        operator delete((void *)v115[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD0022C](v117);
    }
    v55 = *v80;
    v56 = v96;
    if (v96 >= v97)
    {
      v58 = ((char *)v96 - (_BYTE *)v95) >> 4;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v60 = (char *)v97 - (_BYTE *)v95;
      if (((char *)v97 - (_BYTE *)v95) >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v97, v61);
      else
        v62 = 0;
      v63 = (double *)&v62[16 * v58];
      *v63 = v13;
      *((_QWORD *)v63 + 1) = v55;
      v65 = (char *)v95;
      v64 = (char *)v96;
      v66 = v63;
      if (v96 != v95)
      {
        do
        {
          *((_OWORD *)v66 - 1) = *((_OWORD *)v64 - 1);
          v66 -= 2;
          v64 -= 16;
        }
        while (v64 != v65);
        v64 = (char *)v95;
      }
      v57 = v63 + 2;
      v95 = v66;
      v96 = v63 + 2;
      v97 = (double *)&v62[16 * v61];
      if (v64)
        operator delete(v64);
    }
    else
    {
      *v96 = v13;
      *((_QWORD *)v56 + 1) = v55;
      v57 = v56 + 2;
    }
    v96 = v57;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v93, v94[0]);
    v67 = v8[1];
    if (v67)
    {
      do
      {
        v68 = (ZinIrOpLayer ***)v67;
        v67 = *(ZinIrOpLayer **)v67;
      }
      while (v67);
    }
    else
    {
      do
      {
        v68 = (ZinIrOpLayer ***)v8[2];
        v26 = *v68 == v8;
        v8 = (ZinIrOpLayer **)v68;
      }
      while (!v26);
    }
    v8 = (ZinIrOpLayer **)v68;
  }
  while (v68 != v107);
  if (v95 == v96)
LABEL_115:
    ZinAssertImpl("Internal error: empty reset layer candidates in SS cost model");
  BestResetLayer = PressureBasedSubgraphIdentification::FindBestResetLayer((uint64_t)a1, v79, (uint64_t *)&v95, (uint64_t)a2, v74, (uint64_t)&v106);
  v70 = BestResetLayer;
  if (a1[73] && BestResetLayer && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v71 = v70 + 3;
    if (*((char *)v70 + 47) < 0)
      v71 = (_QWORD *)*v71;
    v72 = v70[6];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v71;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v72;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tBest Reset Layer %s : %zu", buf, 0x16u);
  }
  if (v95)
  {
    v96 = (double *)v95;
    operator delete(v95);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v98, v99[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v100, v101[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v102, v103[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v104, v105[0]);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v106, v107[0]);
  return v70;
}

void sub_206F54520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a45, (_QWORD *)a46);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a48, (_QWORD *)a49);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a51, (_QWORD *)a52);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a54, (_QWORD *)a55);
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&a57, (_QWORD *)a58);
  _Unwind_Resume(a1);
}

ZinIrOpLayer **PressureBasedSubgraphIdentification::FindBestResetLayer(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v10;
  ZinIrOpLayer **v12;
  uint64_t v13;
  ZinIrOpLayer ***v14;
  ZinIrOpLayer ***v15;
  unint64_t v16;
  _QWORD *v17;
  double v18;
  _QWORD *v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t InputTensor;
  char v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56[4];
  ZinIrOpLayer ***v57[3];
  ZinIrOpLayer ***v58;
  ZinIrOpLayer ***v59;
  __int128 v60;
  char v61;

  v10 = a2;
  PressureBasedSubgraphIdentification::FindMinimumCostDescriptor(a3, a2, a6, &v60);
  if (!v61)
    return 0;
  v12 = (ZinIrOpLayer **)*((_QWORD *)&v60 + 1);
  if (**(_BYTE **)(a1 + 64))
  {
    v45 = a6;
    v46 = a3;
    v47 = a5;
    v43 = a4;
    v44 = v10;
    do
    {
      v13 = a5[1];
      if (*a5 == v13)
        break;
      LODWORD(v50) = 3;
      if ((unint64_t)*std::map<ZinIrDimension,unsigned long>::at(v13 - 24, (int *)&v50) < 3)
        break;
      PressureBasedSubgraphIdentification::CutClusterAtLayer((_QWORD *)a1, (ZinIrOpLayer ****)v10, v12, (uint64_t *)&v58);
      v14 = v58;
      v15 = v59;
      do
      {
        v16 = v10[2];
        memset(v57, 0, sizeof(v57));
        std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t *)v57, v14, v15, 0xAAAAAAAAAAAAAAABLL * (v15 - v14));
        PressureBasedSubgraphIdentification::CutClustersAtPartialOutputs(a1, v57, (uint64_t)&v58);
        *(_QWORD *)&v50 = v57;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        v14 = v58;
        v15 = v59;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * (v59 - v58));
      v53 = 0;
      v54 = 0;
      v55 = 0;
      PressureBasedSubgraphIdentification::ConstructSubGraphs(a1, a4, &v58, &v53, v56);
      v17 = v53;
      v48 = v54;
      if (v53 == v54)
        goto LABEL_39;
      v18 = 1.79769313e308;
      do
      {
        v19 = (_QWORD *)v17[9];
        if (v19 != v17 + 10)
        {
          do
          {
            if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v19[4]))
            {
              v20 = (ZinIrOpLayer *)v19[4];
              (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v20 + 384))(&v50, v20);
              v21 = v51;
              v22 = v17[13] - 24;
              v49 = 3;
              v23 = *std::map<ZinIrDimension,unsigned long>::at(v22, &v49);
              v24 = **(_QWORD **)(a1 + 16);
              v25 = v52;
              InputTensor = ZinIrOpLayer::GetInputTensor(v20, 0);
              v27 = IsFloatFormat(*(_DWORD *)(InputTensor + 88));
              v28 = (v21 + v23 - 1) / v23;
              v29 = *(_QWORD *)(*((_QWORD *)v20 + 33) + 136);
              v30 = (double)((v28 + v29 - 1)
                           / v29
                           * v29
                           * ((*(_QWORD *)(v24 + 592) / v29) >> v27)
                           * ((v25 + ((*(_QWORD *)(v24 + 592) / v29) >> v27) - 1)
                            / ((*(_QWORD *)(v24 + 592) / v29) >> v27)));
              if (v18 >= (double)(v25 * v28) / v30)
                v18 = (double)(v25 * v28) / v30;
            }
            v31 = (_QWORD *)v19[1];
            if (v31)
            {
              do
              {
                v32 = v31;
                v31 = (_QWORD *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (_QWORD *)v19[2];
                v33 = *v32 == (_QWORD)v19;
                v19 = v32;
              }
              while (!v33);
            }
            v19 = v32;
          }
          while (v32 != v17 + 10);
        }
        v17 += 19;
      }
      while (v17 != v48);
      if (v18 > 0.65)
        goto LABEL_39;
      v34 = v53;
      v35 = v54;
      if (v53 == v54)
        goto LABEL_39;
      while (1)
      {
        v36 = v34[13] - 24;
        LODWORD(v50) = 3;
        v37 = *std::map<ZinIrDimension,unsigned long>::at(v36, (int *)&v50);
        v38 = v47[1] - 24;
        v49 = 3;
        if (v37 == *std::map<ZinIrDimension,unsigned long>::at(v38, &v49))
          break;
        v34 += 19;
        if (v34 == v35)
          goto LABEL_39;
      }
      v40 = *v46;
      v39 = v46[1];
      if (*v46 == v39)
      {
        v12 = 0;
LABEL_39:
        *(_QWORD *)&v50 = &v53;
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        *(_QWORD *)&v50 = &v58;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        return v12;
      }
      while (*(double *)v40 != *(double *)&v60 || *(ZinIrOpLayer ***)(v40 + 8) != v12)
      {
        v40 += 16;
        if (v40 == v39)
        {
          v40 = v46[1];
          break;
        }
      }
      if (v40 == v39)
        ZinAssertImpl("Pressure Analysis Internal Error");
      v41 = v39 - (v40 + 16);
      if (v39 != v40 + 16)
        memmove((void *)v40, (const void *)(v40 + 16), v39 - (v40 + 16));
      v46[1] = v40 + v41;
      v10 = v44;
      PressureBasedSubgraphIdentification::FindMinimumCostDescriptor(v46, v44, v45, &v50);
      v61 = v51;
      v60 = v50;
      a5 = v47;
      a4 = v43;
      if (!(_BYTE)v51)
      {
        *(_QWORD *)&v50 = &v53;
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        *(_QWORD *)&v50 = &v58;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        return 0;
      }
      v12 = (ZinIrOpLayer **)*((_QWORD *)&v60 + 1);
      *(_QWORD *)&v50 = &v53;
      std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      *(_QWORD *)&v50 = &v58;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    }
    while (**(_BYTE **)(a1 + 64));
  }
  return v12;
}

void sub_206F54A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  a18 = (void **)&a23;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&a18);
  a18 = (void **)&a30;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ComputeCircularBufferPressure(uint64_t *a1, const Subgraph *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _BYTE *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  int *v20;
  ZinIrTensor *v21;
  char IsCircularBufferProducerCandidate;
  int IsMultiFanoutCBCandidate;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  unint64_t v32;
  __int128 v33;
  int *v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::string::size_type *v40;
  std::string::size_type *v41;
  ZinIrOpLayer *v42;
  ZinIrOpLayer *v43;
  int v44;
  std::string::size_type *v45;
  std::string::size_type *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  ZinIrKernel *v55;
  ZinIrTensor *v56;
  size_t v57;
  std::string *v58;
  const void *v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  unint64_t v64;
  std::string *v65;
  std::string::size_type size;
  std::string *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  ZinIrTensor::MirInfo *v74;
  ZinIrTensor *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD **v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  const Subgraph *v88;
  int *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t *v92;
  std::string __p;
  uint64_t v94;
  int v95;
  ZinIrTensor::MirInfo *v96;
  std::string v97;
  std::string v98;
  ZinIrOpLayer *v99[2];
  std::string::size_type v100;
  _OWORD v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD **v106;
  _QWORD *v107[2];
  char v108;
  unint64_t v109[2];
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v111;
  int v112[3];

  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear(a4);
  *a5 = 0;
  *a6 = 0;
  v12 = (_BYTE *)a1[8];
  if (!v12[1])
  {
    if (*v12)
    {
      v13 = *(_DWORD *)(a3 + 24);
      if (v13 || *(_QWORD *)(a3 + 16))
      {
        v91 = a5;
        v112[0] = 0;
        v14 = ZinIrDimensionToSpatialDimension(v13, v112);
        if (!(v14 | v112[0]))
        {
          v16 = (uint64_t)a2 + 72;
          v15 = (_QWORD *)*((_QWORD *)a2 + 9);
          v17 = (_QWORD *)((char *)a2 + 80);
          if (v15 != (_QWORD *)((char *)a2 + 80))
          {
            v18 = (int *)(a3 + 8);
            v19 = (uint64_t)a2 + 24;
            v92 = a1 + 11;
            v90 = a6;
            v20 = v18;
            v89 = v18;
            v87 = (_QWORD *)((char *)a2 + 24);
            v88 = a2;
            do
            {
              v111 = (ZinIrOpLayer *)v15[4];
              if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v19, &v111))
              {
                RootTensor = 0;
                v21 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0, 0);
                RootTensor = ZinIrTensor::GetRootTensor(v21);
                IsCircularBufferProducerCandidate = ZinIrCircularBufferUtil::IsCircularBufferProducerCandidate((uint64_t)a2, a1[8], v111);
                IsMultiFanoutCBCandidate = PressureBasedSubgraphIdentification::IsMultiFanoutCBCandidate((PressureBasedSubgraphIdentification *)a1, a2, v111);
                if ((IsCircularBufferProducerCandidate & 1) != 0 || IsMultiFanoutCBCandidate)
                {
                  v109[0] = *((_QWORD *)v111 + 6);
                  v109[1] = v109[0];
                  v107[0] = 0;
                  v107[1] = 0;
                  v108 = 0;
                  v106 = v107;
                  ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)(a1 + 16), v109, (uint64_t)&v106);
                  v24 = v106;
                  if (v106 != v107)
                  {
                    do
                    {
                      v25 = v24[4];
                      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
                      {
                        *(_QWORD *)&v101[0] = *((_QWORD *)RootTensor + 12);
                        if (v17 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v16, (ZinIrOpLayer **)v101))ZinAssertImpl("Adding over-compute on a tensornot in the subgraph");
                        if (*(ZinIrTensor **)(v25 + 32) == RootTensor)
                        {
                          *(_QWORD *)&v101[0] = v25;
                          if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, v101))
                          {
                            *(_QWORD *)&v101[0] = v25;
                            std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)a4, v101, v101);
                            v26 = *(_QWORD *)v20;
                            if (!*(_QWORD *)v20)
                              goto LABEL_27;
                            v27 = v20;
                            v28 = *(_QWORD *)v20;
                            do
                            {
                              v29 = *(_DWORD *)(v28 + 32);
                              v30 = v29 < 0;
                              if (v29 >= 0)
                                v31 = (uint64_t *)v28;
                              else
                                v31 = (uint64_t *)(v28 + 8);
                              if (!v30)
                                v27 = (int *)v28;
                              v28 = *v31;
                            }
                            while (*v31);
                            if (v27 != v20 && v27[8] <= 0)
                              v32 = *((_QWORD *)v27 + 5);
                            else
LABEL_27:
                              v32 = 1;
                            *v91 += *(_QWORD *)(v25 + 8) / v32;
                            v33 = *((_OWORD *)RootTensor + 4);
                            v103 = *((_OWORD *)RootTensor + 3);
                            v104 = v33;
                            v105 = *((_QWORD *)RootTensor + 10);
                            if (!v26)
                              goto LABEL_38;
                            v34 = v20;
                            do
                            {
                              v35 = *(_DWORD *)(v26 + 32);
                              v36 = v35 < 0;
                              if (v35 >= 0)
                                v37 = (uint64_t *)v26;
                              else
                                v37 = (uint64_t *)(v26 + 8);
                              if (!v36)
                                v34 = (int *)v26;
                              v26 = *v37;
                            }
                            while (*v37);
                            if (v34 != v20 && v34[8] <= 0)
                              v38 = *((_QWORD *)v34 + 5);
                            else
LABEL_38:
                              v38 = 1;
                            *(_QWORD *)&v103 = (unint64_t)v103 / v38;
                            *(_QWORD *)&v104 = 0;
                            v102 = 0u;
                            memset(v101, 0, sizeof(v101));
                            v39 = *((_QWORD *)RootTensor + 12);
                            v40 = *(std::string::size_type **)(v39 + 112);
                            v41 = *(std::string::size_type **)(v39 + 120);
                            if (v40 != v41)
                            {
                              do
                              {
                                __p.__r_.__value_.__r.__words[0] = 0;
                                __p.__r_.__value_.__r.__words[0] = *v40;
                                std::deque<ZinIrOpLayer *>::push_back(v101, &__p);
                                ++v40;
                              }
                              while (v40 != v41);
                              while (*((_QWORD *)&v102 + 1))
                              {
                                v99[0] = 0;
                                v42 = *(ZinIrOpLayer **)(*(_QWORD *)(*((_QWORD *)&v101[0] + 1)
                                                                   + (((unint64_t)v102 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                       + 8 * (v102 & 0x1FF));
                                v99[0] = v42;
                                *(_QWORD *)&v102 = v102 + 1;
                                --*((_QWORD *)&v102 + 1);
                                if ((unint64_t)v102 >= 0x400)
                                {
                                  operator delete(**((void ***)&v101[0] + 1));
                                  *((_QWORD *)&v101[0] + 1) += 8;
                                  *(_QWORD *)&v102 = v102 - 512;
                                  v42 = v99[0];
                                }
                                memset(&__p, 0, sizeof(__p));
                                if (ZinIrOpLayer::IsNoOp(v42, (uint64_t *)&__p))
                                {
                                  v43 = v99[0];
                                  v44 = *(_DWORD *)(*((_QWORD *)v99[0] + 8) + 8);
                                  if (__p.__r_.__value_.__r.__words[0])
                                  {
                                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                    v43 = v99[0];
                                  }
                                  if (v44 != 7)
                                  {
                                    v45 = (std::string::size_type *)*((_QWORD *)v43 + 14);
                                    v46 = (std::string::size_type *)*((_QWORD *)v43 + 15);
                                    while (v45 != v46)
                                    {
                                      __p.__r_.__value_.__r.__words[0] = 0;
                                      __p.__r_.__value_.__r.__words[0] = *v45;
                                      std::deque<ZinIrOpLayer *>::push_back(v101, &__p);
                                      ++v45;
                                    }
                                    continue;
                                  }
                                }
                                else
                                {
                                  if (__p.__r_.__value_.__r.__words[0])
                                  {
                                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                  }
                                  v43 = v99[0];
                                }
                                if (ZinIrOpLayer::IsNELayer(v43)
                                  && v17 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v16, v99))
                                {
                                  (*(void (**)(std::string *__return_ptr, ZinIrOpLayer *, uint64_t))(*(_QWORD *)v99[0] + 568))(&__p, v99[0], 1);
                                  if (__p.__r_.__value_.__r.__words[0])
                                  {
                                    v47 = ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(*(ZinMirSpatialSplitUtils **)(__p.__r_.__value_.__r.__words[0] + 264), *(int *)(__p.__r_.__value_.__r.__words[0] + 332), *(int *)(__p.__r_.__value_.__r.__words[0] + 344), 0, 0, 0);
                                    v48 = (_QWORD *)*v92;
                                    if (!*v92)
                                      goto LABEL_141;
                                    v49 = v47;
                                    v50 = a1 + 11;
                                    do
                                    {
                                      v51 = v48[4];
                                      v52 = v51 >= (unint64_t)RootTensor;
                                      if (v51 >= (unint64_t)RootTensor)
                                        v53 = v48;
                                      else
                                        v53 = v48 + 1;
                                      if (v52)
                                        v50 = v48;
                                      v48 = (_QWORD *)*v53;
                                    }
                                    while (*v53);
                                    if (v50 == v92 || (unint64_t)RootTensor < v50[4])
LABEL_141:
                                      ZinAssertImpl("Spatial Split Internal Error");
                                    v54 = *std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)(a1 + 10), (unint64_t *)&RootTensor);
                                    if (v49 > v54)
                                      v54 = v49;
                                    if ((uint64_t)v104 > v54)
                                      v54 = v104;
                                    *(_QWORD *)&v104 = v54;
                                    v55 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
                                    __p.__r_.__value_.__r.__words[0] = 0;
                                    if (v55)
                                    {
                                      ZinIrKernel::~ZinIrKernel(v55);
                                      MEMORY[0x20BD002F8]();
                                    }
                                  }
                                }
                              }
                            }
                            v56 = RootTensor;
                            if (*((char *)RootTensor + 47) >= 0)
                              v57 = *((unsigned __int8 *)RootTensor + 47);
                            else
                              v57 = *((_QWORD *)RootTensor + 4);
                            std::string::basic_string[abi:ne180100]((uint64_t)&v98, v57 + 19);
                            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v58 = &v98;
                            else
                              v58 = (std::string *)v98.__r_.__value_.__r.__words[0];
                            if (v57)
                            {
                              if (*((char *)v56 + 47) >= 0)
                                v59 = (char *)v56 + 24;
                              else
                                v59 = (const void *)*((_QWORD *)v56 + 3);
                              memmove(v58, v59, v57);
                            }
                            strcpy((char *)v58 + v57, "__GetPeakPressure__");
                            if (*(_BYTE *)(a1[8] + 2))
                              v60 = "DRAM_Legalizer_";
                            else
                              v60 = "SpatialSplit_";
                            if (*(_BYTE *)(a1[8] + 2))
                              v61 = 15;
                            else
                              v61 = 13;
                            v62 = std::string::append(&v98, v60, v61);
                            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                            __p.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v63;
                            v62->__r_.__value_.__l.__size_ = 0;
                            v62->__r_.__value_.__r.__words[2] = 0;
                            v62->__r_.__value_.__r.__words[0] = 0;
                            v64 = a1[27];
                            a1[27] = v64 + 1;
                            std::to_string(&v97, v64);
                            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v65 = &v97;
                            else
                              v65 = (std::string *)v97.__r_.__value_.__r.__words[0];
                            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
                            else
                              size = v97.__r_.__value_.__l.__size_;
                            v67 = std::string::append(&__p, (const std::string::value_type *)v65, size);
                            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
                            v100 = v67->__r_.__value_.__r.__words[2];
                            *(_OWORD *)v99 = v68;
                            v67->__r_.__value_.__l.__size_ = 0;
                            v67->__r_.__value_.__r.__words[2] = 0;
                            v67->__r_.__value_.__r.__words[0] = 0;
                            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v97.__r_.__value_.__l.__data_);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v98.__r_.__value_.__l.__data_);
                            v69 = *(_QWORD *)(*((_QWORD *)RootTensor + 12) + 16);
                            v70 = *((_DWORD *)RootTensor + 22);
                            ZinIrTensor::CopyTensorMirInfo(RootTensor, &v96);
                            *(_OWORD *)&v98.__r_.__value_.__l.__data_ = 0uLL;
                            LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                            v94 = 0;
                            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                            v95 = 0;
                            ZinIrTensor::CreateTensor(v69, v70, &v103, (__int128 *)v99, &v96, (uint64_t *)&v98, (unsigned int *)&__p, (uint64_t *)&v97);
                            v71 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
                            if (v98.__r_.__value_.__l.__size_)
                            {
                              v72 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
                              do
                                v73 = __ldaxr(v72);
                              while (__stlxr(v73 - 1, v72));
                              if (!v73)
                              {
                                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                                std::__shared_weak_count::__release_weak(v71);
                              }
                            }
                            v74 = v96;
                            v96 = 0;
                            if (v74)
                              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v96, v74);
                            v75 = (ZinIrTensor *)v97.__r_.__value_.__r.__words[0];
                            v76 = operator new(0x14uLL);
                            v98.__r_.__value_.__l.__size_ = (std::string::size_type)(v76 + 5);
                            v98.__r_.__value_.__r.__words[2] = (std::string::size_type)(v76 + 5);
                            v76[4] = 4;
                            *(_OWORD *)v76 = xmmword_207AAB900;
                            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                            DimensionOrderHint::DimensionOrderHint(&__p, &v98);
                            ZinIrTensor::GetTensorSizeInBytesFromResidency(v75, 1, (uint64_t)&__p, 0);
                            v78 = v77;
                            if (__p.__r_.__value_.__r.__words[0])
                            {
                              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (v98.__r_.__value_.__r.__words[0])
                            {
                              v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
                              operator delete(v98.__r_.__value_.__l.__data_);
                            }
                            *v90 += v78;
                            v79 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
                            v20 = v89;
                            if (v97.__r_.__value_.__l.__size_)
                            {
                              v80 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
                              do
                                v81 = __ldaxr(v80);
                              while (__stlxr(v81 - 1, v80));
                              if (!v81)
                              {
                                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                                std::__shared_weak_count::__release_weak(v79);
                              }
                            }
                            if (SHIBYTE(v100) < 0)
                              operator delete(v99[0]);
                            std::deque<unsigned long>::~deque[abi:ne180100](v101);
                          }
                        }
                      }
                      v82 = (_QWORD *)v24[1];
                      if (v82)
                      {
                        do
                        {
                          v83 = (_QWORD **)v82;
                          v82 = (_QWORD *)*v82;
                        }
                        while (v82);
                      }
                      else
                      {
                        do
                        {
                          v83 = (_QWORD **)v24[2];
                          v84 = *v83 == v24;
                          v24 = v83;
                        }
                        while (!v84);
                      }
                      v24 = v83;
                    }
                    while (v83 != v107);
                  }
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v106, v107[0]);
                  v19 = (uint64_t)v87;
                  a2 = v88;
                }
              }
              v85 = (_QWORD *)v15[1];
              if (v85)
              {
                do
                {
                  v86 = v85;
                  v85 = (_QWORD *)*v85;
                }
                while (v85);
              }
              else
              {
                do
                {
                  v86 = (_QWORD *)v15[2];
                  v84 = *v86 == (_QWORD)v15;
                  v15 = v86;
                }
                while (!v84);
              }
              v15 = v86;
            }
            while (v86 != v17);
          }
        }
      }
    }
  }
}

void sub_206F55324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47)
{
  uint64_t v47;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v47 - 160, *(_QWORD **)(v47 - 152));
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::GetPeakPressure(PressureBasedSubgraphIdentification *a1, const ZinIrOpLayer *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL HasKernelSupportOnHeight;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int64_t v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _BOOL4 v31;
  int v32;
  BOOL v33;
  _BOOL4 v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  size_t v51;
  std::string *v52;
  const void *v53;
  unint64_t v54;
  std::string *v55;
  std::string::size_type size;
  std::string *v57;
  __int128 v58;
  void **v59;
  std::string::size_type v60;
  uint64_t v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  ZinIrTensor::MirInfo *v66;
  ZinIrTensor *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int v84;
  BOOL v85;
  uint64_t *v86;
  unint64_t v87;
  ZinIrTensor *v88;
  ZinIrTensor *RootTensor;
  unsigned int v90;
  ZinIrTensor *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  const ZinANELayer **v102;
  const ZinANELayer **v103;
  const ZinANELayer *v104;
  uint64_t v105;
  ZinIrOpLayer *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  _BYTE *v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  int *v114;
  int v115;
  BOOL v116;
  uint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  int v121;
  BOOL v122;
  BOOL v123;
  int v124;
  BOOL v125;
  const ZinIrOpLayer *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  ZinMirSpatialSplitUtils **v131;
  ZinMirSpatialSplitUtils **v132;
  __int128 v133;
  uint64_t v134;
  int *v135;
  int v136;
  BOOL v137;
  uint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  uint64_t *v143;
  uint64_t *v144;
  ZinIrTensor *v145;
  size_t v146;
  std::string *v147;
  const void *v148;
  unint64_t v149;
  std::string *v150;
  std::string::size_type v151;
  std::string *v152;
  __int128 v153;
  void **v154;
  std::string::size_type v155;
  uint64_t v156;
  int v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  ZinIrTensor::MirInfo *v161;
  ZinIrTensor *v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  __int128 v184;
  int64_t v185;
  uint64_t v187;
  uint64_t v188;
  char v189;
  unint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const Subgraph *v197;
  uint64_t ChainBufferSize;
  _QWORD *v201;
  uint64_t *v202;
  ZinIrTensor::MirInfo *v203;
  int v204;
  ZinIrOpLayer *v205;
  ZinIrTensor *v206;
  void *v207[2];
  char *v208;
  uint64_t v209;
  int v210;
  ZinIrTensor::MirInfo *v211;
  std::string v212;
  std::string v213;
  std::string v214;
  _QWORD *v215;
  void *__p[2];
  __int128 v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220[2];
  char v221;
  unint64_t v222[2];
  _QWORD **v223;
  _QWORD *v224[2];
  int64_t v225;
  _OWORD v226[2];
  int v227;
  _OWORD v228[2];
  int v229;
  uint64_t v230;
  uint64_t v231;

  v5 = a5;
  v7 = *(_QWORD **)(a3 + 72);
  v196 = a3 + 72;
  v8 = (_QWORD *)(a3 + 80);
  if (v7 == (_QWORD *)(a3 + 80))
  {
    v189 = 0;
  }
  else
  {
    v189 = 0;
    while (1)
    {
      HasKernelSupportOnHeight = ZinMirSpatialSplitUtils::HasKernelSupportOnHeight((ZinMirSpatialSplitUtils *)v7[4], a2, a3, a4, a5);
      if (HasKernelSupportOnHeight)
        break;
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v33 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v33);
      }
      v189 |= HasKernelSupportOnHeight;
      v7 = v12;
      if (v12 == v8)
        goto LABEL_13;
    }
    v189 = 1;
  }
LABEL_13:
  v230 = 0;
  v231 = 0;
  memset(v228, 0, sizeof(v228));
  v229 = 1065353216;
  (*(void (**)(PressureBasedSubgraphIdentification *, uint64_t, uint64_t, _OWORD *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 160))(a1, a3, a4, v228, &v231, &v230);
  memset(v226, 0, sizeof(v226));
  v227 = 1065353216;
  v197 = (const Subgraph *)a3;
  (*(void (**)(PressureBasedSubgraphIdentification *, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 152))(a1, a3, a4, v226);
  v14 = *((_QWORD *)a2 + 1);
  v225 = *(_QWORD *)a2;
  v13 = v225;
  if (v225 > v14)
    goto LABEL_348;
  v15 = (int *)(a4 + 8);
  v201 = (_QWORD *)((char *)a1 + 88);
  v188 = (uint64_t)a1 + 80;
  v190 = v5;
  v191 = a3 + 24;
  v187 = (uint64_t)(v5 + 2);
  v202 = (uint64_t *)(a4 + 8);
  do
  {
    v224[0] = 0;
    v224[1] = 0;
    v222[1] = v13;
    v223 = v224;
    v222[0] = v13;
    v220[0] = 0;
    v220[1] = 0;
    v221 = 0;
    v219 = (uint64_t *)v220;
    ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)a1 + 128, v222, (uint64_t)&v219);
    if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v226, (unint64_t *)&v225))
    {
      v16 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(v226, (unint64_t *)&v225);
      if (!v16)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v17 = (_QWORD *)v16[3];
      v18 = v16 + 4;
      if (v17 == v16 + 4)
      {
        v19 = 0;
        v192 = 0;
      }
      else
      {
        v192 = 0;
        v19 = 0;
        do
        {
          v20 = v17[4];
          v21 = operator new(0x14uLL);
          v207[1] = v21 + 5;
          v208 = (char *)(v21 + 5);
          v21[4] = 4;
          *(_OWORD *)v21 = xmmword_207AAB900;
          v207[0] = v21;
          DimensionOrderHint::DimensionOrderHint(__p, v207);
          ZinIrTensor::GetTensorSizeInBytesFromResidency((ZinIrTensor *)v20, 1, (uint64_t)__p, 0);
          v23 = v22;
          v24 = a4 + 8;
          v25 = *v202;
          if (!*v202)
            goto LABEL_28;
          do
          {
            v26 = *(_DWORD *)(v25 + 32);
            v27 = v26 < 0;
            if (v26 >= 0)
              v28 = (uint64_t *)v25;
            else
              v28 = (uint64_t *)(v25 + 8);
            if (!v27)
              v24 = v25;
            v25 = *v28;
          }
          while (*v28);
          if ((uint64_t *)v24 != v202 && *(int *)(v24 + 32) <= 0)
            v29 = *(_QWORD *)(v24 + 40);
          else
LABEL_28:
            v29 = 1;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v207[0])
          {
            v207[1] = v207[0];
            operator delete(v207[0]);
          }
          v30 = (unsigned __int8 *)*((_QWORD *)a1 + 8);
          v31 = v30[10] || v30[5] || v30[2] || *v30 != 0;
          v32 = *(_DWORD *)(a4 + 24);
          if (v32)
            v33 = 0;
          else
            v33 = *(_QWORD *)(a4 + 16) == 0;
          v34 = !v33 && v31;
          v35 = (_QWORD *)*v201;
          if (*v201)
          {
            v36 = (_QWORD *)*v201;
            do
            {
              v37 = v36[4];
              if (v20 >= v37)
              {
                if (v37 >= v20)
                {
                  if (v34)
                  {
                    v38 = *(_OWORD *)(v20 + 64);
                    *(_OWORD *)__p = *(_OWORD *)(v20 + 48);
                    v217 = v38;
                    v218 = *(_QWORD *)(v20 + 80);
                    v39 = a4 + 8;
                    v40 = *v202;
                    if (!*v202)
                      goto LABEL_60;
                    do
                    {
                      v41 = *(_DWORD *)(v40 + 32);
                      v42 = v41 < 0;
                      if (v41 >= 0)
                        v43 = (uint64_t *)v40;
                      else
                        v43 = (uint64_t *)(v40 + 8);
                      if (!v42)
                        v39 = v40;
                      v40 = *v43;
                    }
                    while (*v43);
                    if ((uint64_t *)v39 != v202 && *(int *)(v39 + 32) <= 0)
                      v44 = *(_QWORD *)(v39 + 40);
                    else
LABEL_60:
                      v44 = 1;
                    v215 = (_QWORD *)v20;
                    __p[0] = (void *)((unint64_t)__p[0] / v44);
                    v45 = (_QWORD *)((char *)a1 + 88);
                    do
                    {
                      v46 = v35[4];
                      v47 = v46 >= v20;
                      if (v46 >= v20)
                        v48 = v35;
                      else
                        v48 = v35 + 1;
                      if (v47)
                        v45 = v35;
                      v35 = (_QWORD *)*v48;
                    }
                    while (*v48);
                    if (v45 != v201 && v20 >= v45[4])
                    {
                      LODWORD(v206) = 0;
                      if (ZinIrDimensionToSpatialDimension(v32, (int *)&v206))
                        ZinAssertImpl("Over-Compute on spatial dimensions only");
                      v49 = std::map<ZinIrTensor const*,SpatialAmount>::at(v188, (unint64_t *)&v215);
                      if ((_DWORD)v206)
                        v50 = v49 + 1;
                      else
                        v50 = v49;
                      if (*v50)
                      {
                        if (SetValueAtDimension<ZinTensorDimensions>(__p, *(_DWORD *)(a4 + 24), *v50))
                          ZinAssertImpl("Invalid Tile Calculation");
                        if (*(char *)(v20 + 47) >= 0)
                          v51 = *(unsigned __int8 *)(v20 + 47);
                        else
                          v51 = *(_QWORD *)(v20 + 32);
                        std::string::basic_string[abi:ne180100]((uint64_t)&v214, v51 + 19);
                        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v52 = &v214;
                        else
                          v52 = (std::string *)v214.__r_.__value_.__r.__words[0];
                        if (v51)
                        {
                          if (*(char *)(v20 + 47) >= 0)
                            v53 = (const void *)(v20 + 24);
                          else
                            v53 = *(const void **)(v20 + 24);
                          memmove(v52, v53, v51);
                        }
                        strcpy((char *)v52 + v51, "__GetPeakPressure__");
                        (*(void (**)(std::string *__return_ptr, PressureBasedSubgraphIdentification *))(*(_QWORD *)a1 + 120))(&v213, a1);
                        v54 = *((_QWORD *)a1 + 27);
                        *((_QWORD *)a1 + 27) = v54 + 1;
                        std::to_string(&v212, v54);
                        if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v55 = &v212;
                        else
                          v55 = (std::string *)v212.__r_.__value_.__r.__words[0];
                        if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          size = HIBYTE(v212.__r_.__value_.__r.__words[2]);
                        else
                          size = v212.__r_.__value_.__l.__size_;
                        v57 = std::string::append(&v213, (const std::string::value_type *)v55, size);
                        v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                        v208 = (char *)v57->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v207 = v58;
                        v57->__r_.__value_.__l.__size_ = 0;
                        v57->__r_.__value_.__r.__words[2] = 0;
                        v57->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v208) >= 0)
                          v59 = v207;
                        else
                          v59 = (void **)v207[0];
                        if (SHIBYTE(v208) >= 0)
                          v60 = HIBYTE(v208);
                        else
                          v60 = (std::string::size_type)v207[1];
                        std::string::append(&v214, (const std::string::value_type *)v59, v60);
                        if (SHIBYTE(v208) < 0)
                          operator delete(v207[0]);
                        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v212.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v213.__r_.__value_.__l.__data_);
                        v61 = *(_QWORD *)(*(_QWORD *)(v20 + 96) + 16);
                        v62 = *(_DWORD *)(v20 + 88);
                        ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v20, &v211);
                        *(_OWORD *)&v213.__r_.__value_.__l.__data_ = 0uLL;
                        LODWORD(v207[0]) = 0;
                        v208 = 0;
                        v209 = 0;
                        v207[1] = 0;
                        v210 = 0;
                        ZinIrTensor::CreateTensor(v61, v62, (__int128 *)__p, (__int128 *)&v214, &v211, (uint64_t *)&v213, (unsigned int *)v207, (uint64_t *)&v212);
                        v63 = (std::__shared_weak_count *)v213.__r_.__value_.__l.__size_;
                        v5 = v190;
                        if (v213.__r_.__value_.__l.__size_)
                        {
                          v64 = (unint64_t *)(v213.__r_.__value_.__l.__size_ + 8);
                          do
                            v65 = __ldaxr(v64);
                          while (__stlxr(v65 - 1, v64));
                          if (!v65)
                          {
                            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                            std::__shared_weak_count::__release_weak(v63);
                          }
                        }
                        v66 = v211;
                        v211 = 0;
                        if (v66)
                          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v211, v66);
                        v67 = (ZinIrTensor *)v212.__r_.__value_.__r.__words[0];
                        v68 = operator new(0x14uLL);
                        v213.__r_.__value_.__l.__size_ = (std::string::size_type)(v68 + 5);
                        v213.__r_.__value_.__r.__words[2] = (std::string::size_type)(v68 + 5);
                        v68[4] = 4;
                        *(_OWORD *)v68 = xmmword_207AAB900;
                        v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
                        DimensionOrderHint::DimensionOrderHint(v207, &v213);
                        ZinIrTensor::GetTensorSizeInBytesFromResidency(v67, 1, (uint64_t)v207, 0);
                        v70 = v69;
                        if (v207[0])
                        {
                          v207[1] = v207[0];
                          operator delete(v207[0]);
                        }
                        if (v213.__r_.__value_.__r.__words[0])
                        {
                          v213.__r_.__value_.__l.__size_ = v213.__r_.__value_.__r.__words[0];
                          operator delete(v213.__r_.__value_.__l.__data_);
                        }
                        v71 = (std::__shared_weak_count *)v212.__r_.__value_.__l.__size_;
                        if (v212.__r_.__value_.__l.__size_)
                        {
                          v72 = (unint64_t *)(v212.__r_.__value_.__l.__size_ + 8);
                          do
                            v73 = __ldaxr(v72);
                          while (__stlxr(v73 - 1, v72));
                          if (!v73)
                          {
                            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                            std::__shared_weak_count::__release_weak(v71);
                          }
                        }
                        if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v214.__r_.__value_.__l.__data_);
                        v192 += v70;
                      }
                    }
                  }
                  break;
                }
                ++v36;
              }
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          v15 = (int *)(a4 + 8);
          v74 = (_QWORD *)v17[1];
          if (v74)
          {
            do
            {
              v75 = v74;
              v74 = (_QWORD *)*v74;
            }
            while (v74);
          }
          else
          {
            do
            {
              v75 = (_QWORD *)v17[2];
              v33 = *v75 == (_QWORD)v17;
              v17 = v75;
            }
            while (!v33);
          }
          v19 += v23 / v29;
          v17 = v75;
        }
        while (v75 != v18);
      }
      v76 = v219;
      if (v219 != (uint64_t *)v220)
      {
        do
        {
          __p[0] = *(void **)(v76[4] + 32);
          v77 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(v226, (unint64_t *)&v225);
          if (!v77)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(v77 + 6), (uint64_t *)__p))
          {
            v78 = std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v219, v76);
            operator delete(v76);
          }
          else
          {
            v79 = (uint64_t *)v76[1];
            if (v79)
            {
              do
              {
                v78 = v79;
                v79 = (uint64_t *)*v79;
              }
              while (v79);
            }
            else
            {
              do
              {
                v78 = (uint64_t *)v76[2];
                v33 = *v78 == (_QWORD)v76;
                v76 = v78;
              }
              while (!v33);
            }
          }
          v76 = v78;
          v33 = v78 == (uint64_t *)v220;
          v15 = (int *)(a4 + 8);
        }
        while (!v33);
      }
    }
    else
    {
      v19 = 0;
      v192 = 0;
    }
    v80 = v219;
    if (v219 == (uint64_t *)v220)
    {
      v81 = 0;
      ChainBufferSize = 0;
      goto LABEL_325;
    }
    ChainBufferSize = 0;
    v81 = 0;
    do
    {
      v215 = (_QWORD *)v80[4];
      if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v228, &v215))
      {
        goto LABEL_197;
      }
      v82 = *(_QWORD *)v15;
      if (!*(_QWORD *)v15)
        goto LABEL_161;
      v83 = v15;
      do
      {
        v84 = *(_DWORD *)(v82 + 32);
        v85 = v84 < 0;
        if (v84 >= 0)
          v86 = (uint64_t *)v82;
        else
          v86 = (uint64_t *)(v82 + 8);
        if (!v85)
          v83 = (int *)v82;
        v82 = *v86;
      }
      while (*v86);
      if (v83 != v15 && v83[8] <= 0)
        v87 = *((_QWORD *)v83 + 5);
      else
LABEL_161:
        v87 = 1;
      v19 += v215[1] / v87;
      if ((*(unsigned int (**)(_QWORD *))(*v215 + 24))(v215))
        goto LABEL_197;
      v88 = (ZinIrTensor *)v215[4];
      v205 = (ZinIrOpLayer *)*((_QWORD *)v88 + 12);
      v206 = v88;
      RootTensor = ZinIrTensor::GetRootTensor(v88);
      v90 = ZinMirSpatialSplitUtils::IsChained((uint64_t)RootTensor, *((_QWORD **)a1 + 14));
      if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v196, &v205)|| std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v191, &v205))
      {
        goto LABEL_165;
      }
      v110 = (_BYTE *)*((_QWORD *)a1 + 8);
      if (v110[2])
        v111 = 0;
      else
        v111 = v90;
      if (v111 == 1)
      {
        ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(*((const ZinIrTensor ***)a1 + 28), (ZinIrRegAllocUtil **)v206);
        v19 -= ChainBufferSize;
        if ((v189 & 1) == 0)
        {
          PressureBasedSubgraphIdentification::GetTensorSize(a1, v206);
          v113 = *(_QWORD *)v15;
          if (!*(_QWORD *)v15)
            goto LABEL_219;
          v114 = v15;
          do
          {
            v115 = *(_DWORD *)(v113 + 32);
            v116 = v115 < 0;
            if (v115 >= 0)
              v117 = (uint64_t *)v113;
            else
              v117 = (uint64_t *)(v113 + 8);
            if (!v116)
              v114 = (int *)v113;
            v113 = *v117;
          }
          while (*v117);
          if (v114 != v15 && v114[8] <= 0)
            v118 = *((_QWORD *)v114 + 5);
          else
LABEL_219:
            v118 = 1;
          ChainBufferSize = 0;
          v19 += v112 / v118;
        }
        goto LABEL_165;
      }
      v119 = (_QWORD *)*v201;
      if (!*v201)
      {
LABEL_238:
        v124 = 0;
        goto LABEL_239;
      }
      while (1)
      {
        v120 = v119[4];
        if ((unint64_t)v206 >= v120)
          break;
LABEL_225:
        v119 = (_QWORD *)*v119;
        if (!v119)
          goto LABEL_238;
      }
      if (v120 < (unint64_t)v206)
      {
        ++v119;
        goto LABEL_225;
      }
      v121 = *(_DWORD *)(a4 + 24);
      if (*v110)
        v122 = v121 == 3;
      else
        v122 = 0;
      if (v122)
        goto LABEL_238;
      if (v121)
        v123 = 0;
      else
        v123 = *(_QWORD *)(a4 + 16) == 0;
      v124 = !v123;
LABEL_239:
      if (*(_DWORD *)(a4 + 24))
        v125 = 0;
      else
        v125 = *(_QWORD *)(a4 + 16) == 0;
      if (v125
        || !*v110
        || std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v226, (unint64_t *)&v225)|| *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v206) + 12) + 64) + 8) != 7)
      {
        if (v124)
        {
LABEL_252:
          v133 = *((_OWORD *)v206 + 4);
          *(_OWORD *)__p = *((_OWORD *)v206 + 3);
          v217 = v133;
          v218 = *((_QWORD *)v206 + 10);
          v134 = *(_QWORD *)v15;
          if (!*(_QWORD *)v15)
            goto LABEL_262;
          v135 = v15;
          do
          {
            v136 = *(_DWORD *)(v134 + 32);
            v137 = v136 < 0;
            if (v136 >= 0)
              v138 = (uint64_t *)v134;
            else
              v138 = (uint64_t *)(v134 + 8);
            if (!v137)
              v135 = (int *)v134;
            v134 = *v138;
          }
          while (*v138);
          if (v135 != v15 && v135[8] <= 0)
            v139 = *((_QWORD *)v135 + 5);
          else
LABEL_262:
            v139 = 1;
          __p[0] = (void *)((unint64_t)__p[0] / v139);
          v204 = 0;
          if (ZinIrDimensionToSpatialDimension(*(_DWORD *)(a4 + 24), &v204))
            ZinAssertImpl("Over-Compute on spatial dimensions only");
          v140 = std::map<ZinIrTensor const*,SpatialAmount>::at(v188, (unint64_t *)&v206);
          if (v204)
            v141 = v140 + 1;
          else
            v141 = v140;
          if (*v141)
          {
            v142 = *(_DWORD *)(a4 + 24);
            v143 = std::map<ZinIrTensor const*,SpatialAmount>::at(v188, (unint64_t *)&v206);
            if (v204)
              v144 = v143 + 1;
            else
              v144 = v143;
            if (SetValueAtDimension<ZinTensorDimensions>(__p, v142, *v144))
              ZinAssertImpl("Invalid Tile Calculation");
            v145 = v206;
            if (*((char *)v206 + 47) >= 0)
              v146 = *((unsigned __int8 *)v206 + 47);
            else
              v146 = *((_QWORD *)v206 + 4);
            std::string::basic_string[abi:ne180100]((uint64_t)&v214, v146 + 19);
            if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v147 = &v214;
            else
              v147 = (std::string *)v214.__r_.__value_.__r.__words[0];
            if (v146)
            {
              if (*((char *)v145 + 47) >= 0)
                v148 = (char *)v145 + 24;
              else
                v148 = (const void *)*((_QWORD *)v145 + 3);
              memmove(v147, v148, v146);
            }
            strcpy((char *)v147 + v146, "__GetPeakPressure__");
            (*(void (**)(std::string *__return_ptr, PressureBasedSubgraphIdentification *))(*(_QWORD *)a1 + 120))(&v213, a1);
            v149 = *((_QWORD *)a1 + 27);
            *((_QWORD *)a1 + 27) = v149 + 1;
            std::to_string(&v212, v149);
            if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v150 = &v212;
            else
              v150 = (std::string *)v212.__r_.__value_.__r.__words[0];
            if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v151 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
            else
              v151 = v212.__r_.__value_.__l.__size_;
            v152 = std::string::append(&v213, (const std::string::value_type *)v150, v151);
            v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
            v208 = (char *)v152->__r_.__value_.__r.__words[2];
            *(_OWORD *)v207 = v153;
            v152->__r_.__value_.__l.__size_ = 0;
            v152->__r_.__value_.__r.__words[2] = 0;
            v152->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v208) >= 0)
              v154 = v207;
            else
              v154 = (void **)v207[0];
            if (SHIBYTE(v208) >= 0)
              v155 = HIBYTE(v208);
            else
              v155 = (std::string::size_type)v207[1];
            std::string::append(&v214, (const std::string::value_type *)v154, v155);
            if (SHIBYTE(v208) < 0)
              operator delete(v207[0]);
            if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v212.__r_.__value_.__l.__data_);
            if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v213.__r_.__value_.__l.__data_);
            v156 = *(_QWORD *)(*((_QWORD *)v206 + 12) + 16);
            v157 = *((_DWORD *)v206 + 22);
            ZinIrTensor::CopyTensorMirInfo(v206, &v203);
            *(_OWORD *)&v213.__r_.__value_.__l.__data_ = 0uLL;
            LODWORD(v207[0]) = 0;
            v208 = 0;
            v209 = 0;
            v207[1] = 0;
            v210 = 0;
            ZinIrTensor::CreateTensor(v156, v157, (__int128 *)__p, (__int128 *)&v214, &v203, (uint64_t *)&v213, (unsigned int *)v207, (uint64_t *)&v212);
            v158 = (std::__shared_weak_count *)v213.__r_.__value_.__l.__size_;
            if (v213.__r_.__value_.__l.__size_)
            {
              v159 = (unint64_t *)(v213.__r_.__value_.__l.__size_ + 8);
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            v161 = v203;
            v203 = 0;
            if (v161)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v203, v161);
            v162 = (ZinIrTensor *)v212.__r_.__value_.__r.__words[0];
            v163 = operator new(0x14uLL);
            v213.__r_.__value_.__l.__size_ = (std::string::size_type)(v163 + 5);
            v213.__r_.__value_.__r.__words[2] = (std::string::size_type)(v163 + 5);
            v163[4] = 4;
            *(_OWORD *)v163 = xmmword_207AAB900;
            v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
            DimensionOrderHint::DimensionOrderHint(v207, &v213);
            ZinIrTensor::GetTensorSizeInBytesFromResidency(v162, 1, (uint64_t)v207, 0);
            v165 = v164;
            if (v207[0])
            {
              v207[1] = v207[0];
              operator delete(v207[0]);
            }
            if (v213.__r_.__value_.__r.__words[0])
            {
              v213.__r_.__value_.__l.__size_ = v213.__r_.__value_.__r.__words[0];
              operator delete(v213.__r_.__value_.__l.__data_);
            }
            v166 = (std::__shared_weak_count *)v212.__r_.__value_.__l.__size_;
            if (v212.__r_.__value_.__l.__size_)
            {
              v167 = (unint64_t *)(v212.__r_.__value_.__l.__size_ + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
            if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v214.__r_.__value_.__l.__data_);
            v192 += v165;
          }
        }
      }
      else
      {
        v130 = *((_QWORD *)v206 + 12);
        v131 = *(ZinMirSpatialSplitUtils ***)(v130 + 112);
        v132 = *(ZinMirSpatialSplitUtils ***)(v130 + 120);
        while (v131 != v132)
        {
          if (ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(*v131, v126, v127, v128, v129))
            LOBYTE(v124) = 1;
          ++v131;
        }
        if ((v124 & 1) != 0)
          goto LABEL_252;
      }
LABEL_165:
      v91 = ZinIrTensor::GetRootTensor(v206);
      if (PressureBasedSubgraphIdentification::IsSIPContributor(a1, a2, v197, v91))
      {
        v92 = a4 + 8;
        v93 = *v202;
        if (!*v202)
          goto LABEL_175;
        do
        {
          v94 = *(_DWORD *)(v93 + 32);
          v95 = v94 < 0;
          if (v94 >= 0)
            v96 = (uint64_t *)v93;
          else
            v96 = (uint64_t *)(v93 + 8);
          if (!v95)
            v92 = v93;
          v93 = *v96;
        }
        while (*v96);
        if ((uint64_t *)v92 != v202 && *(int *)(v92 + 32) <= 0)
          v97 = *(_QWORD *)(v92 + 40);
        else
LABEL_175:
          v97 = 1;
        v193 = v97;
        v194 = v215[1];
        v195 = v19;
        ZinIrTensor::GetTensorFamily(v91, (uint64_t)__p);
        v98 = (char *)__p[0];
        v99 = (char *)__p[1];
        while (v98 != v99)
        {
          v100 = *(_QWORD *)v98;
          v101 = *(_QWORD *)(*(_QWORD *)v98 + 96);
          v103 = *(const ZinANELayer ***)(v101 + 112);
          v102 = *(const ZinANELayer ***)(v101 + 120);
          while (v103 != v102)
          {
            v104 = *v103;
            if (*((_QWORD *)*v103 + 6) == v225
              && ZinMirSpatialSplitUtils::IsNonResident(v91, *((_QWORD **)a1 + 14))
              && ZinIrOpLayer::IsANELayer(v104))
            {
              v105 = (*(uint64_t (**)(const ZinANELayer *, uint64_t))(*(_QWORD *)v104 + 152))(v104, v100);
              if (v105 == -1)
              {
                if (!*((_QWORD *)v104 + 25))
                  ZinAssertImpl("DMA Buffer pressure incorrectly modeled");
              }
              else
              {
                v81 += PressureBasedSubgraphIdentification::GetMinDMABufferSize(a1, v104, v105, 1);
              }
            }
            ++v103;
          }
          v98 += 8;
        }
        v106 = (ZinIrOpLayer *)*((_QWORD *)v206 + 12);
        if (*((_QWORD *)v106 + 6) == v225)
        {
          v5 = v190;
          v15 = (int *)(a4 + 8);
          v107 = v195;
          if (ZinIrOpLayer::IsANELayer(v106))
            v81 += PressureBasedSubgraphIdentification::GetMinDMABufferSize(a1, *((const ZinANELayer **)v206 + 12), 0, 0);
        }
        else
        {
          v5 = v190;
          v15 = (int *)(a4 + 8);
          v107 = v195;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v19 = v107 - v194 / v193;
      }
      else
      {
        v15 = (int *)(a4 + 8);
      }
LABEL_197:
      v108 = (uint64_t *)v80[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        do
        {
          v109 = (uint64_t *)v80[2];
          v33 = *v109 == (_QWORD)v80;
          v80 = v109;
        }
        while (!v33);
      }
      v80 = v109;
    }
    while (v109 != (uint64_t *)v220);
LABEL_325:
    v169 = v231 + (v19 & ~(v19 >> 63));
    v170 = v230 + v192;
    if (*(_BYTE *)(*((_QWORD *)a1 + 8) + 2))
      v171 = 0;
    else
      v171 = v81;
    if (*(_BYTE *)(*((_QWORD *)a1 + 8) + 2))
      v172 = 0;
    else
      v172 = ChainBufferSize;
    v174 = (_QWORD *)v5[1];
    v173 = v5[2];
    if ((unint64_t)v174 >= v173)
    {
      v176 = (_QWORD *)*v5;
      v177 = (uint64_t)((uint64_t)v174 - *v5) >> 5;
      v178 = v177 + 1;
      if ((unint64_t)(v177 + 1) >> 59)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v179 = v173 - (_QWORD)v176;
      if (v179 >> 4 > v178)
        v178 = v179 >> 4;
      if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFE0)
        v180 = 0x7FFFFFFFFFFFFFFLL;
      else
        v180 = v178;
      if (v180)
      {
        v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(v187, v180);
        v176 = (_QWORD *)*v5;
        v174 = (_QWORD *)v5[1];
      }
      else
      {
        v181 = 0;
      }
      v182 = &v181[32 * v177];
      *(_QWORD *)v182 = v169;
      *((_QWORD *)v182 + 1) = v170;
      *((_QWORD *)v182 + 2) = v172;
      *((_QWORD *)v182 + 3) = v171;
      v183 = v182;
      if (v174 != v176)
      {
        do
        {
          v184 = *((_OWORD *)v174 - 1);
          *((_OWORD *)v183 - 2) = *((_OWORD *)v174 - 2);
          *((_OWORD *)v183 - 1) = v184;
          v183 -= 32;
          v174 -= 4;
        }
        while (v174 != v176);
        v176 = (_QWORD *)*v5;
      }
      v175 = v182 + 32;
      *v5 = (unint64_t)v183;
      v5[1] = (unint64_t)(v182 + 32);
      v5[2] = (unint64_t)&v181[32 * v180];
      if (v176)
        operator delete(v176);
    }
    else
    {
      *v174 = v169;
      v174[1] = v170;
      v175 = v174 + 4;
      v174[2] = v172;
      v174[3] = v171;
    }
    v5[1] = (unint64_t)v175;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v219, v220[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v223, v224[0]);
    v185 = v225;
    v13 = ++v225;
  }
  while (v185 < *((_QWORD *)a2 + 1));
LABEL_348:
  std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::~__hash_table((uint64_t)v226);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v228);
}

void sub_206F56598(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::~__hash_table(v1 - 192);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 - 144);
  _Unwind_Resume(a1);
}

BOOL PressureBasedSubgraphIdentification::IsSIPContributor(PressureBasedSubgraphIdentification *this, const ZinLiveRange *a2, const Subgraph *a3, const ZinIrTensor *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  ZinIrOpLayer *v10;
  uint64_t i;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  BOOL v18;
  ZinIrTensor ***v19;
  ZinIrTensor ***v20;
  ZinIrOpLayer *v23;
  ZinIrTensor *RootTensor;
  ZinIrTensor **p_RootTensor;

  RootTensor = ZinIrTensor::GetRootTensor(a4);
  p_RootTensor = &RootTensor;
  v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 24, &RootTensor, (uint64_t)&std::piecewise_construct, &p_RootTensor);
  v8 = v7[3];
  v9 = v7[4];
  v10 = (ZinIrOpLayer *)*((_QWORD *)RootTensor + 12);
  v23 = v10;
  for (i = *((_QWORD *)v10 + 14); i != *((_QWORD *)v10 + 15); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 31)
      return 0;
  }
  if (*(_DWORD *)(*((_QWORD *)v10 + 8) + 8) == 7)
  {
    v12 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, &v23) == 0;
    v10 = v23;
  }
  else
  {
    v12 = 1;
  }
  v13 = *((_QWORD *)v10 + 11);
  v14 = *((_QWORD *)v10 + 12);
  if (v13 == v14)
  {
    v17 = 1;
  }
  else
  {
    v15 = v13 + 8;
    do
    {
      p_RootTensor = *(ZinIrTensor ***)(v15 - 8);
      v16 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, (ZinIrOpLayer **)&p_RootTensor);
      v17 = v16 == 0;
      if (v16)
        break;
      v18 = v15 == v14;
      v15 += 8;
    }
    while (!v18);
    v10 = v23;
  }
  v19 = (ZinIrTensor ***)*((_QWORD *)v10 + 14);
  v20 = (ZinIrTensor ***)*((_QWORD *)v10 + 15);
  if (v19 == v20)
  {
LABEL_18:
    if (!v12 && !v17)
      return 0;
  }
  else
  {
    while (1)
    {
      p_RootTensor = *v19;
      if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, (ZinIrOpLayer **)&p_RootTensor))break;
      if (++v19 == v20)
        goto LABEL_18;
    }
  }
  return v8 < *(_QWORD *)a2
      || v9 > *((_QWORD *)a2 + 1)
      || std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, &v23) == 0;
}

uint64_t PressureBasedSubgraphIdentification::ComputeSplitInvariantPressure(const ZinIrTensor ***this, const ZinLiveRange *a2, const Subgraph *a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  ZinIrTensor **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  const ZinIrTensor *v18;
  int v19;
  unint64_t ChainBufferSize;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD **v28;
  char *v30;
  int64_t v31;
  char *v34;
  uint64_t v36;
  ZinIrOpLayer *v37;
  uint64_t *v38;
  _QWORD *v39[2];
  ZinIrTensor *RootTensor;
  _QWORD **v41;
  _QWORD *v42[2];
  char v43;
  unint64_t v44[2];
  _OWORD v45[2];
  int v46;
  _OWORD v47[2];
  int v48;

  memset(v47, 0, sizeof(v47));
  v48 = 1065353216;
  memset(v45, 0, sizeof(v45));
  v46 = 1065353216;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 <= *((_QWORD *)a2 + 1))
  {
    v7 = 0;
    v5 = 0;
    v30 = (char *)(this + 16);
    v34 = (char *)a3 + 72;
    do
    {
      v44[0] = v4;
      v44[1] = v4;
      v31 = v4;
      v42[0] = 0;
      v42[1] = 0;
      v43 = 0;
      v41 = v42;
      ZinIrMemoryPressureAnalyzer::GetPeakPressure((uint64_t)v30, v44, (uint64_t)&v41);
      v8 = v41;
      if (v41 != v42)
      {
        do
        {
          v9 = (ZinIrTensor **)v8[4];
          if (!(*((unsigned int (**)(ZinIrTensor **))*v9 + 3))(v9))
          {
            RootTensor = 0;
            RootTensor = ZinIrTensor::GetRootTensor(v9[4]);
            if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v45, &RootTensor))
            {
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v45, &RootTensor, &RootTensor);
              v39[0] = 0;
              v39[1] = 0;
              v38 = (uint64_t *)v39;
              if (PressureBasedSubgraphIdentification::IsSIPContributor((PressureBasedSubgraphIdentification *)this, a2, a3, RootTensor))
              {
                std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v38, (unint64_t *)&RootTensor, (uint64_t *)&RootTensor);
              }
              else
              {
                v37 = (ZinIrOpLayer *)*((_QWORD *)RootTensor + 12);
                if (*(_DWORD *)(*((_QWORD *)v37 + 8) + 8) == 7
                  && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v34, &v37)&& PressureBasedSubgraphIdentification::IsPartialInput((uint64_t)v34, (uint64_t)v37))
                {
                  v11 = (ZinIrOpLayer **)*((_QWORD *)v37 + 11);
                  v10 = (ZinIrOpLayer **)*((_QWORD *)v37 + 12);
                  while (v11 != v10)
                  {
                    if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v34, v11))
                    {
                      v36 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v11 + 32))(*v11, 0, 0);
                      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v38, (unint64_t *)&v36, &v36);
                    }
                    ++v11;
                  }
                }
              }
              v12 = v38;
              if (v38 != (uint64_t *)v39)
              {
                do
                {
                  v13 = v12 + 4;
                  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v47, v12 + 4))
                  {
                    v14 = ZinMirSpatialSplitUtils::IsChained(*v13, this[14]);
                    v15 = v14;
                    v16 = *((_QWORD *)RootTensor + 13);
                    if (v16)
                      LODWORD(v16) = *(_DWORD *)(v16 + 96);
                    if ((_DWORD)v16 == 1)
                      v17 = 1;
                    else
                      v17 = v14;
                    v18 = (const ZinIrTensor *)*v13;
                    if (*((_BYTE *)this[8] + 2)
                      || (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 12) + 64) + 8) & 0xFFFFFFFC) != 0x1C)
                    {
                      PressureBasedSubgraphIdentification::GetTensorSize((PressureBasedSubgraphIdentification *)this, v18);
                      ChainBufferSize = v21;
                      v19 = *((unsigned __int8 *)this[8] + 2);
                    }
                    else
                    {
                      v19 = 0;
                      ChainBufferSize = 0;
                    }
                    if (v19)
                      v22 = 0;
                    else
                      v22 = v15;
                    if (v22 == 1)
                      ChainBufferSize = ZinL2FootprintCalculator::GetChainBufferSize(this[28], (ZinIrRegAllocUtil **)*v13);
                    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v47, v12 + 4, v12 + 4);
                    if (((ChainBufferSize < a4) & v17) != 0)
                      v23 = ChainBufferSize;
                    else
                      v23 = 0;
                    v7 += v23;
                    v5 += ChainBufferSize;
                  }
                  v24 = (uint64_t *)v12[1];
                  if (v24)
                  {
                    do
                    {
                      v25 = v24;
                      v24 = (uint64_t *)*v24;
                    }
                    while (v24);
                  }
                  else
                  {
                    do
                    {
                      v25 = (uint64_t *)v12[2];
                      v26 = *v25 == (_QWORD)v12;
                      v12 = v25;
                    }
                    while (!v26);
                  }
                  v12 = v25;
                }
                while (v25 != (uint64_t *)v39);
              }
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v38, v39[0]);
            }
          }
          v27 = (_QWORD *)v8[1];
          if (v27)
          {
            do
            {
              v28 = (_QWORD **)v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = (_QWORD **)v8[2];
              v26 = *v28 == v8;
              v8 = v28;
            }
            while (!v26);
          }
          v8 = v28;
        }
        while (v28 != v42);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v41, v42[0]);
      v4 = v31 + 1;
    }
    while (v31 < *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v47);
  return v5;
}

void sub_206F56CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a23, a24);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v29 - 128);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ComputeTileSize(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, void **a5, _QWORD *a6)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  unint64_t *v33;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  unint64_t v41;
  uint8_t buf[16];
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD v47[2];

  v9 = a2;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a4);
  v38 = (uint64_t)(v9 + 9);
  v11 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(v9 + 9);
  v47[0] = v11;
  v47[1] = v12;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  PressureBasedSubgraphIdentification::GetPeakPressure((PressureBasedSubgraphIdentification *)a1, (const ZinIrOpLayer *)v47, (uint64_t)v9, a4, (unint64_t *)&v44);
  v13 = PressureBasedSubgraphIdentification::ComputeSplitInvariantPressure((const ZinIrTensor ***)a1, (const ZinLiveRange *)v47, (const Subgraph *)v9, a3);
  v43 = 1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
    v15 = v13 - v14;
  else
    v15 = v14;
  v41 = a3 - v15;
  if (a3 < v15)
  {
    if (*(_BYTE *)(a1 + 73))
    {
      v16 = 1;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO:: (SpatialSplit) Can't tile subgraph b/c SIP > budget\n", buf, 2u);
      }
    }
    else
    {
      v16 = 1;
    }
    goto LABEL_32;
  }
  v37 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v37 + 360) == *(_QWORD *)(v37 + 352))
    ZinAssertImpl("Must run scheduler first");
  v35 = v9;
  v36 = a6;
  v17 = v44;
  v18 = v45;
  if (v44 != v45)
  {
    v40 = v9 + 3;
    v19 = v9 + 4;
    v20 = 1;
    while (1)
    {
      v21 = v17[2] + v17[1] + v17[3];
      v22 = v41 >= v21;
      v23 = v41 - v21;
      if (v23 == 0 || !v22)
        goto LABEL_12;
      if (*v17)
        break;
LABEL_26:
      v17 += 4;
      if (v17 == v18)
        goto LABEL_31;
    }
    v24 = (_QWORD *)*v40;
    if ((_QWORD *)*v40 != v19)
    {
      v25 = (float)*v17 / (float)v23;
      while (1)
      {
        v26 = v24[4];
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 128))(a1, v26, a4, v25);
        if (!v27)
          break;
        v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0, 0);
        v29 = (float)((float)((float)v27
                            + (float)(unint64_t)GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v28 + 48), *(_DWORD *)(a4 + 24)))+ -1.0)/ (float)v27;
        if (v20 <= (unint64_t)v29)
          v20 = (unint64_t)v29;
        v30 = (_QWORD *)v24[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v24[2];
            v32 = *v31 == (_QWORD)v24;
            v24 = v31;
          }
          while (!v32);
        }
        v24 = v31;
        if (v31 == v19)
          goto LABEL_25;
      }
LABEL_12:
      ResetLayerCausingTooMuchPressure(*(ZinIrOpLayer **)(*(_QWORD *)(v37 + 352) + 8 * v11), v38, (uint64_t)v40, a5);
    }
LABEL_25:
    ++v11;
    goto LABEL_26;
  }
  v20 = 1;
LABEL_31:
  v16 = 0;
  v43 = v20;
  v9 = v35;
  a6 = v36;
LABEL_32:
  PressureBasedSubgraphIdentification::UpdateTileCountToMinimizeUtilizationLoss(a1, (uint64_t)v9, a4, &v43);
  v33 = v44;
  *a6 = v43;
  if (v33)
  {
    v45 = v33;
    operator delete(v33);
  }
  return v16;
}

void sub_206F56FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetLayerCausingTooMuchPressure(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer **i;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  ZinIrOpLayer *v34;
  ZinIrOpLayer *v35;

  v35 = a1;
  if (ZinIrOpLayer::IsANELayer(a1)
    && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, &v35))
  {
    v7 = (unint64_t)a4[2];
    v8 = a4[1];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
LABEL_41:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)*a4;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v35;
      v9 = v15 + 8;
      v18 = (char *)*a4;
      v17 = (char *)a4[1];
      if (v17 != *a4)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)*a4;
      }
      *a4 = v15;
      a4[1] = v9;
      a4[2] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v8 = v35;
      v9 = v8 + 1;
    }
    a4[1] = v9;
    if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, &v35))
    {
      v20 = (ZinIrOpLayer **)*((_QWORD *)v35 + 11);
      for (i = (ZinIrOpLayer **)*((_QWORD *)v35 + 12); v20 != i; ++v20)
      {
        v34 = *v20;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, &v34))
        {
          v23 = a4[1];
          v22 = (unint64_t)a4[2];
          if ((unint64_t)v23 >= v22)
          {
            v25 = ((char *)v23 - (_BYTE *)*a4) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              goto LABEL_41;
            v26 = v22 - (_QWORD)*a4;
            v27 = v26 >> 2;
            if (v26 >> 2 <= (unint64_t)(v25 + 1))
              v27 = v25 + 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v28);
            else
              v29 = 0;
            v30 = &v29[8 * v25];
            *(_QWORD *)v30 = v34;
            v24 = v30 + 8;
            v32 = (char *)*a4;
            v31 = (char *)a4[1];
            if (v31 != *a4)
            {
              do
              {
                v33 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v30 - 1) = v33;
                v30 -= 8;
              }
              while (v31 != v32);
              v31 = (char *)*a4;
            }
            *a4 = v30;
            a4[1] = v24;
            a4[2] = &v29[8 * v28];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v23 = v34;
            v24 = v23 + 1;
          }
          a4[1] = v24;
        }
      }
    }
  }
}

void PressureBasedSubgraphIdentification::UpdateTileCountToMinimizeUtilizationLoss(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  ZinIrOpLayer *v8;
  ZinIrOpLayer **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrOpLayer **v20;
  unint64_t v21;
  unint64_t v22;
  ZinIrOpLayer *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  ZinIrOpLayer **v33;
  char *v34;

  if (*(_DWORD *)(a3 + 24) == 4)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v4 = *(_QWORD **)(a2 + 72);
    v5 = (_QWORD *)(a2 + 80);
    if (v4 != (_QWORD *)(a2 + 80))
    {
      do
      {
        v8 = (ZinIrOpLayer *)v4[4];
        if (*(_DWORD *)(*((_QWORD *)v8 + 8) + 8) == 85
          && *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v4[4], 0, 0) + 64) == 1)
        {
          if (v33 >= (ZinIrOpLayer **)v34)
          {
            v10 = ((char *)v33 - v32) >> 3;
            if ((unint64_t)(v10 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v11 = (v34 - v32) >> 2;
            if (v11 <= v10 + 1)
              v11 = v10 + 1;
            if ((unint64_t)(v34 - v32) >= 0x7FFFFFFFFFFFFFF8)
              v12 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v12 = v11;
            if (v12)
              v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v34, v12);
            else
              v13 = 0;
            v14 = &v13[8 * v10];
            *(_QWORD *)v14 = v8;
            v9 = (ZinIrOpLayer **)(v14 + 8);
            v15 = (char *)v33;
            if (v33 != (ZinIrOpLayer **)v32)
            {
              do
              {
                v16 = *((_QWORD *)v15 - 1);
                v15 -= 8;
                *((_QWORD *)v14 - 1) = v16;
                v14 -= 8;
              }
              while (v15 != v32);
              v15 = v32;
            }
            v32 = v14;
            v34 = &v13[8 * v12];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v33 = v8;
            v9 = v33 + 1;
          }
          v33 = v9;
        }
        v17 = (_QWORD *)v4[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v4[2];
            v19 = *v18 == (_QWORD)v4;
            v4 = v18;
          }
          while (!v19);
        }
        v4 = v18;
      }
      while (v18 != v5);
      v20 = (ZinIrOpLayer **)v32;
      if (v33 == (ZinIrOpLayer **)v32)
        goto LABEL_43;
      v21 = *a4;
      v22 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 784);
      do
      {
        v23 = *v20;
        v24 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v20 + 32))(*v20, 0, 0);
        v25 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 592) >> (*(_DWORD *)(ZinIrOpLayer::GetInputTensor(v23, 0) + 88) == 3);
        v26 = *(_QWORD *)(v24 + 72);
        while (v26 / v21 % v25 && v26 / v21 % v22)
        {
          if (++v21 > v26)
            goto LABEL_42;
        }
        ++v20;
      }
      while (v20 != v33);
      for (i = (ZinIrOpLayer **)v32; i != v33; ++i)
      {
        v28 = *i;
        v29 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*i + 32))(*i, 0, 0);
        v30 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 592) >> (*(_DWORD *)(ZinIrOpLayer::GetInputTensor(v28, 0) + 88) == 3);
        v31 = *(_QWORD *)(v29 + 72) / v21;
        if (v31 % v30 && v31 % v22)
          goto LABEL_42;
      }
      *a4 = v21;
    }
LABEL_42:
    v20 = (ZinIrOpLayer **)v32;
LABEL_43:
    if (v20)
      operator delete(v20);
  }
}

void sub_206F57508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::RemoveIllegalInternalNodes(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  ZinIrOpLayer **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer **v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  ZinIrOpLayer *v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer **v39[2];
  uint64_t *v40;
  _QWORD *v41[2];
  uint64_t *v42;
  _QWORD *v43[2];
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v43[1] = 0;
  v44 = (uint64_t *)&v45;
  v42 = (uint64_t *)v43;
  v43[0] = 0;
  v41[0] = 0;
  v41[1] = 0;
  v39[1] = 0;
  v40 = (uint64_t *)v41;
  v38 = (ZinIrOpLayer **)v39;
  v39[0] = 0;
  PressureBasedSubgraphIdentification::FindOutputNoOps(a1, a2, (uint64_t **)&v38);
  PressureBasedSubgraphIdentification::FindUnsupportedConcats(v3, a2, (uint64_t **)&v38);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t *)&v40, v38, v39);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t *)&v44, v38, v39);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t *)&v42, v38, v39);
  v4 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      v34 = (uint64_t *)v4[4];
      v5 = (ZinIrOpLayer **)v34[14];
      v6 = v34[15];
      while (v5 != (ZinIrOpLayer **)v6)
      {
        v37 = 0;
        v37 = *v5;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v37))
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v40, (ZinIrOpLayer **)&v34, (uint64_t *)&v34);
          break;
        }
        ++v5;
      }
      v7 = (uint64_t *)v4[1];
      if (v7)
      {
        do
        {
          v8 = (uint64_t **)v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)v4[2];
          v9 = *v8 == v4;
          v4 = (uint64_t *)v8;
        }
        while (!v9);
      }
      v4 = (uint64_t *)v8;
    }
    while (v8 != a2 + 1);
  }
  v10 = v40;
  if (v40 != (uint64_t *)v41)
  {
    do
    {
      v11 = v10[4];
      v12 = *(uint64_t ***)(v11 + 112);
      v13 = *(uint64_t ***)(v11 + 120);
      while (v12 != v13)
      {
        v34 = 0;
        v34 = *v12;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v44, (ZinIrOpLayer **)&v34))
        {
          if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)&v34))
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v44, (ZinIrOpLayer **)&v34, (uint64_t *)&v34);
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v42, (ZinIrOpLayer **)&v34, (uint64_t *)&v34);
          }
        }
        ++v12;
      }
      v14 = (uint64_t *)v10[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v10[2];
          v9 = *v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v9);
      }
      v10 = v15;
    }
    while (v15 != (uint64_t *)v41);
  }
  v35 = 0;
  v36 = 0;
  v34 = (uint64_t *)&v35;
  for (i = v46; v46; i = v46)
  {
    v17 = v44;
    if (v44 == (uint64_t *)&v45)
    {
      v26 = 0;
      v23 = 0;
      v24 = (uint64_t *)&v35;
      v25 = (uint64_t *)&v45;
    }
    else
    {
      do
      {
        v18 = v17[4];
        v19 = *(ZinIrOpLayer ***)(v18 + 112);
        v20 = *(ZinIrOpLayer ***)(v18 + 120);
        while (v19 != v20)
        {
          v37 = 0;
          v37 = *v19;
          if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v34, &v37)&& std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v37))
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v34, &v37, (uint64_t *)&v37);
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v42, &v37, (uint64_t *)&v37);
          }
          ++v19;
        }
        v21 = (uint64_t *)v17[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (uint64_t *)v17[2];
            v9 = *v22 == (_QWORD)v17;
            v17 = v22;
          }
          while (!v9);
        }
        v17 = v22;
      }
      while (v22 != (uint64_t *)&v45);
      v24 = v34;
      v23 = v35;
      v25 = v44;
      i = v46;
      v26 = v36;
    }
    v27 = v45;
    v44 = v24;
    v45 = v23;
    v34 = v25;
    v35 = v27;
    v46 = v26;
    v36 = i;
    v28 = (uint64_t **)(v23 + 2);
    if (!v26)
      v28 = &v44;
    *v28 = (uint64_t *)&v45;
    if (i)
      v29 = (uint64_t **)(v27 + 2);
    else
      v29 = &v34;
    *v29 = (uint64_t *)&v35;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v27);
    v35 = 0;
    v36 = 0;
    v34 = (uint64_t *)&v35;
  }
  v30 = v42;
  if (v42 == (uint64_t *)v43)
  {
    v33 = 0;
  }
  else
  {
    do
    {
      v37 = (ZinIrOpLayer *)v30[4];
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a2, &v37);
      v31 = (uint64_t *)v30[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (uint64_t *)v30[2];
          v9 = *v32 == (_QWORD)v30;
          v30 = v32;
        }
        while (!v9);
      }
      v30 = v32;
    }
    while (v32 != (uint64_t *)v43);
    v33 = v35;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v33);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v38, v39[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v40, v41[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v42, v43[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v44, v45);
}

void sub_206F57904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a16, a17);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::FindOutputNoOps(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  ZinIrOpLayer *v7;
  int v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p;
  void *v15;
  uint64_t v16;
  ZinIrOpLayer *v17;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v7 = (ZinIrOpLayer *)v4[4];
      v16 = 0;
      v17 = v7;
      __p = 0;
      v15 = 0;
      if (ZinIrOpLayer::IsNoOp(v7, (uint64_t *)&__p))
      {
        v8 = *(_DWORD *)(*((_QWORD *)v17 + 8) + 8);
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
        if (v8 != 7)
        {
          v9 = (void **)*((_QWORD *)v17 + 14);
          v10 = (void **)*((_QWORD *)v17 + 15);
          while (v9 != v10)
          {
            __p = 0;
            __p = *v9;
            if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, (ZinIrOpLayer **)&__p))
            {
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a3, &v17, (uint64_t *)&v17);
              break;
            }
            ++v9;
          }
        }
      }
      else if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_206F57A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::FindUnsupportedConcats(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  int v10;
  int v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  ZinIrOpLayer *v17;
  ZinIrOpLayer *v18;
  _OWORD v19[2];
  __int128 v20;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v7 = (_QWORD *)v4[4];
      if (*(_DWORD *)(v7[8] + 8) == 7)
      {
        v20 = 0u;
        memset(v19, 0, sizeof(v19));
        v8 = (ZinIrOpLayer **)v7[14];
        v9 = (ZinIrOpLayer **)v7[15];
        if (v8 != v9)
        {
          v10 = 0;
          v11 = 0;
          do
          {
            v18 = 0;
            v18 = *v8;
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v18))
            {
              std::deque<ZinIrOpLayer *>::push_back(v19, &v18);
              v11 = 1;
            }
            else
            {
              v10 = 1;
            }
            ++v8;
          }
          while (v8 != v9);
          if ((v11 & v10 & 1) != 0)
          {
            while (*((_QWORD *)&v20 + 1))
            {
              v18 = 0;
              v18 = *(ZinIrOpLayer **)(*(_QWORD *)(*((_QWORD *)&v19[0] + 1)
                                                 + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * (v20 & 0x1FF));
              *(_QWORD *)&v20 = v20 + 1;
              --*((_QWORD *)&v20 + 1);
              if ((unint64_t)v20 >= 0x400)
              {
                operator delete(**((void ***)&v19[0] + 1));
                *((_QWORD *)&v19[0] + 1) += 8;
                *(_QWORD *)&v20 = v20 - 512;
              }
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a3, &v18, (uint64_t *)&v18);
              v12 = (ZinIrOpLayer **)*((_QWORD *)v18 + 14);
              v13 = (ZinIrOpLayer **)*((_QWORD *)v18 + 15);
              while (v12 != v13)
              {
                v17 = 0;
                v17 = *v12;
                if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v17))
                {
                  std::deque<ZinIrOpLayer *>::push_back(v19, &v17);
                }
                ++v12;
              }
            }
          }
        }
        std::deque<unsigned long>::~deque[abi:ne180100](v19);
      }
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != v3);
  }
}

void sub_206F57C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsPartialOutput(uint64_t a1, uint64_t a2)
{
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  char v5;
  char v6;
  ZinIrOpLayer *v7;
  uint64_t v8;
  char v9;
  ZinIrOpLayer *v11;

  v2 = *(ZinIrOpLayer ***)(a2 + 112);
  v3 = *(ZinIrOpLayer ***)(a2 + 120);
  if (v2 == v3)
  {
    v9 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *v2++;
      v11 = v7;
      v8 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a1, &v11);
      v6 |= v8 == 0;
      v5 |= v8 != 0;
    }
    while (v2 != v3);
    v9 = v5 & v6;
  }
  return v9 & 1;
}

uint64_t PressureBasedSubgraphIdentification::MinimizeNewPartialOutputs(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t i;
  uint64_t v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer **v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  ZinIrOpLayer *v21;
  uint64_t *v22;
  _QWORD *v23[2];
  _OWORD v24[2];
  __int128 v25;

  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      v22 = (uint64_t *)v5[4];
      if (PressureBasedSubgraphIdentification::IsPartialOutput((uint64_t)a2, (uint64_t)v22)
        && !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a4, (ZinIrOpLayer **)&v22))
      {
        std::deque<ZinIrOpLayer *>::push_back(v24, &v22);
      }
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != (uint64_t *)v4);
    for (i = *((_QWORD *)&v25 + 1); *((_QWORD *)&v25 + 1); i = *((_QWORD *)&v25 + 1))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v24[0] + 1) + (((unint64_t)v25 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v25 & 0x1FF));
      *(_QWORD *)&v25 = v25 + 1;
      *((_QWORD *)&v25 + 1) = i - 1;
      if ((unint64_t)v25 >= 0x400)
      {
        operator delete(**((void ***)&v24[0] + 1));
        *((_QWORD *)&v24[0] + 1) += 8;
        *(_QWORD *)&v25 = v25 - 512;
      }
      v23[0] = 0;
      v23[1] = 0;
      v22 = (uint64_t *)v23;
      v14 = *(ZinIrOpLayer ***)(v13 + 112);
      v15 = *(ZinIrOpLayer ***)(v13 + 120);
      if (v14 != v15)
      {
        v16 = 1;
        do
        {
          v21 = 0;
          v21 = *v14;
          if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, &v21))
          {
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, &v21)&& *((_QWORD *)v21 + 12) - *((_QWORD *)v21 + 11) == 8)
            {
              std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v22, (unint64_t *)&v21, (uint64_t *)&v21);
            }
            else
            {
              v16 = 0;
            }
          }
          ++v14;
        }
        while (v14 != v15);
        v17 = v22;
        if ((v16 & (v22 != (uint64_t *)v23)) == 1)
        {
          do
          {
            v21 = (ZinIrOpLayer *)v17[4];
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a2, &v21, (uint64_t *)&v21);
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a3, &v21);
            if (PressureBasedSubgraphIdentification::IsPartialOutput((uint64_t)a2, (uint64_t)v21)
              && !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a4, &v21))
            {
              std::deque<ZinIrOpLayer *>::push_back(v24, &v21);
            }
            v18 = (uint64_t *)v17[1];
            if (v18)
            {
              do
              {
                v19 = v18;
                v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v19 = (uint64_t *)v17[2];
                v11 = *v19 == (_QWORD)v17;
                v17 = v19;
              }
              while (!v11);
            }
            v17 = v19;
          }
          while (v19 != (uint64_t *)v23);
        }
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23[0]);
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v24);
}

void sub_206F57F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::RemoveInputNodeDrivingBothExternalAndInternalNodes(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t **v3;
  uint64_t *v4;
  ZinIrOpLayer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  int v15;
  char v16;
  uint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  uint64_t *v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD v30[3];
  ZinIrOpLayer *v31[3];
  ZinIrOpLayer *v32;
  ZinIrOpLayer ***v33;
  uint64_t *v34;
  _QWORD *v35[2];
  ZinIrOpLayer *v36;
  ZinIrOpLayer *v37[2];

  v37[1] = *(ZinIrOpLayer **)MEMORY[0x24BDAC8D0];
  v35[0] = 0;
  v35[1] = 0;
  v34 = (uint64_t *)v35;
  v3 = a3 + 1;
  v4 = *a3;
  if (*a3 != (uint64_t *)(a3 + 1))
  {
    do
    {
      v7 = (ZinIrOpLayer *)v4[4];
      v33 = (ZinIrOpLayer ***)v7;
      v8 = *((_QWORD *)v7 + 11);
      v9 = *((_QWORD *)v7 + 12);
      if (v8 == v9)
      {
        v12 = 0;
      }
      else
      {
        v10 = v8 + 8;
        do
        {
          v31[0] = 0;
          v31[0] = *(ZinIrOpLayer **)(v10 - 8);
          v11 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, v31);
          v12 = v11 != 0;
          if (v11)
            break;
          v21 = v10 == v9;
          v10 += 8;
        }
        while (!v21);
        v7 = (ZinIrOpLayer *)v33;
      }
      v13 = (ZinIrOpLayer **)*((_QWORD *)v7 + 14);
      v14 = (ZinIrOpLayer **)*((_QWORD *)v7 + 15);
      if (v13 != v14)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v31[0] = 0;
          v31[0] = *v13;
          v17 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, v31);
          v16 |= v17 != 0;
          v15 |= v17 == 0;
          ++v13;
        }
        while (v13 != v14);
        if (!v12 && (v16 & 1) != 0 && ((v15 ^ 1) & 1) == 0)
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v34, (ZinIrOpLayer **)&v33, (uint64_t *)&v33);
          v18 = v33[14];
          v19 = v33[15];
          while (v18 != v19)
          {
            v32 = 0;
            v32 = *v18;
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, &v32))
            {
              v20 = *a3;
              v21 = *(_DWORD *)(*((_QWORD *)v32 + 8) + 8) != 7 || v20 == (uint64_t *)v3;
              if (!v21)
              {
                do
                {
                  v37[0] = (ZinIrOpLayer *)v20[4];
                  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t)v31, v37, 1);
                  v36 = v32;
                  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t)v30, &v36, 1);
                  v22 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsDominanceRelationship<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>(a2, v31, v30);
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v30, (_QWORD *)v30[1]);
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v31, (_QWORD *)v31[1]);
                  if (v22)
                    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v34, (ZinIrOpLayer **)&v33, (uint64_t *)&v33);
                  v23 = (uint64_t *)v20[1];
                  if (v23)
                  {
                    do
                    {
                      v24 = v23;
                      v23 = (uint64_t *)*v23;
                    }
                    while (v23);
                  }
                  else
                  {
                    do
                    {
                      v24 = (uint64_t *)v20[2];
                      v21 = *v24 == (_QWORD)v20;
                      v20 = v24;
                    }
                    while (!v21);
                  }
                  v20 = v24;
                }
                while (v24 != (uint64_t *)v3);
              }
            }
            ++v18;
          }
        }
      }
      v25 = (uint64_t *)v4[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)v4[2];
          v21 = *v26 == (_QWORD)v4;
          v4 = v26;
        }
        while (!v21);
      }
      v4 = v26;
    }
    while (v26 != (uint64_t *)v3);
    v27 = v34;
    if (v34 != (uint64_t *)v35)
    {
      do
      {
        v31[0] = (ZinIrOpLayer *)v27[4];
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a3, v31);
        v28 = (uint64_t *)v27[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v27[2];
            v21 = *v29 == (_QWORD)v27;
            v27 = v29;
          }
          while (!v21);
        }
        v27 = v29;
      }
      while (v29 != (uint64_t *)v35);
    }
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35[0]);
}

void sub_206F58278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

BOOL ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsDominanceRelationship<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t ***v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t **v33;
  _BOOL8 v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  _OWORD v45[2];
  int v46;
  uint64_t *v47;

  memset(v45, 0, sizeof(v45));
  v46 = 1065353216;
  v43 = 0;
  v44 = 0;
  v42 = (uint64_t *)&v43;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v39 = v5 + 4;
      std::__tree<std::reference_wrapper<ZinIrOpLayer * const>,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const>>(&v42, &v39, (uint64_t *)&v39);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
    if (v44)
    {
      v10 = (_QWORD *)(a1 + 24);
      v11 = (_QWORD *)(a1 + 104);
      do
      {
        v40 = 0;
        v41 = 0;
        v39 = (uint64_t *)&v40;
        v12 = v42;
        if (v42 != (uint64_t *)&v43)
        {
          while (1)
          {
            v38 = (unint64_t *)v12[4];
            if (!std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v45, &v38))
            {
              if (a3 + 1 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a3, (ZinIrOpLayer **)v38))
              {
                v47 = (uint64_t *)v38;
                v15 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v10, (unint64_t **)&v47);
                v16 = v15 + 3;
                if (!v15)
                  v16 = v11;
                if (v16[1] == *v16)
                {
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v39, v40);
                  v34 = 0;
                  goto LABEL_48;
                }
                v47 = (uint64_t *)v38;
                v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v10, (unint64_t **)&v47);
                v18 = (uint64_t ***)(v17 + 3);
                if (!v17)
                  v18 = (uint64_t ***)v11;
                v20 = *v18;
                v19 = v18[1];
                while (v20 != v19)
                {
                  v47 = *v20;
                  if (!std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v45, (unint64_t **)&v47))std::__tree<std::reference_wrapper<ZinIrOpLayer * const>,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const>>(&v39, &v47, (uint64_t *)&v47);
                  ++v20;
                }
              }
              std::__hash_table<std::reference_wrapper<ZinIrOpLayer * const>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const> const&>((uint64_t)v45, &v38, &v38);
            }
            v13 = (uint64_t *)v12[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (uint64_t *)v12[2];
                v9 = *v14 == (_QWORD)v12;
                v12 = v14;
              }
              while (!v9);
            }
            v12 = v14;
            if (v14 == (uint64_t *)&v43)
            {
              v21 = v41;
              v22 = v42;
              v24 = v39;
              v23 = v40;
              goto LABEL_32;
            }
          }
        }
        v21 = 0;
        v23 = 0;
        v24 = (uint64_t *)&v40;
        v22 = (uint64_t *)&v43;
LABEL_32:
        v25 = v43;
        v26 = v44;
        v42 = v24;
        v43 = v23;
        v39 = v22;
        v40 = v25;
        v44 = v21;
        v41 = v26;
        v27 = (uint64_t **)(v23 + 2);
        v9 = v21 == 0;
        v28 = &v42;
        if (!v9)
          v28 = v27;
        *v28 = (uint64_t *)&v43;
        v29 = (uint64_t **)(v25 + 2);
        if (!v26)
          v29 = &v39;
        *v29 = (uint64_t *)&v40;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v39, v25);
      }
      while (v44);
    }
  }
  v32 = (_QWORD *)*a3;
  v30 = a3 + 1;
  v31 = v32;
  if (v32 == v30)
  {
    v34 = 1;
  }
  else
  {
    do
    {
      v39 = v31 + 4;
      v33 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::find<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(v45, (unint64_t **)&v39);
      v34 = v33 != 0;
      if (!v33)
        break;
      v35 = (_QWORD *)v31[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v31[2];
          v9 = *v36 == (_QWORD)v31;
          v31 = v36;
        }
        while (!v9);
      }
      v31 = v36;
    }
    while (v36 != v30);
  }
LABEL_48:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v42, v43);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
  return v34;
}

void sub_206F585C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  _QWORD *v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD *);
  v11 = va_arg(va2, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v6);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va1, v10);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::RemovePureInOutNodes(PressureBasedSubgraphIdentification *this, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v5;
  uint64_t **v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  ZinIrOpLayer ****v18;
  char *v19;
  char *v20;
  ZinIrOpLayer ***v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  ZinIrOpLayer **v25;
  ZinIrOpLayer **v26;
  ZinIrOpLayer *v27;
  ZinIrOpLayer ***v28;
  char *v29;
  char *v30;
  char *v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v2 = (uint64_t *)(a2 + 1);
  v3 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    v5 = a2 + 3;
    v6 = a2 + 9;
    do
    {
      v28 = (ZinIrOpLayer ***)v3[4];
      if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v5, (ZinIrOpLayer **)&v28))
      {
        v7 = (ZinIrOpLayer *)v28;
        v8 = v28[14];
        v9 = v28[15];
        if (v8 == v9)
        {
LABEL_8:
          v10 = (ZinIrOpLayer **)*((_QWORD *)v7 + 11);
          v11 = (ZinIrOpLayer **)*((_QWORD *)v7 + 12);
          while (v10 != v11)
          {
            v27 = 0;
            v27 = *v10;
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v6, &v27))
            {
              goto LABEL_29;
            }
            ++v10;
          }
          v12 = v30;
          if (v30 >= v31)
          {
            v14 = (v30 - v29) >> 3;
            if ((unint64_t)(v14 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v15 = (v31 - v29) >> 2;
            if (v15 <= v14 + 1)
              v15 = v14 + 1;
            if ((unint64_t)(v31 - v29) >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v31, v16);
            else
              v17 = 0;
            v18 = (ZinIrOpLayer ****)&v17[8 * v14];
            *v18 = v28;
            v13 = (char *)(v18 + 1);
            v20 = v29;
            v19 = v30;
            if (v30 != v29)
            {
              do
              {
                v21 = (ZinIrOpLayer ***)*((_QWORD *)v19 - 1);
                v19 -= 8;
                *--v18 = v21;
              }
              while (v19 != v20);
              v19 = v29;
            }
            v29 = (char *)v18;
            v30 = v13;
            v31 = &v17[8 * v16];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_QWORD *)v30 = v28;
            v13 = v12 + 8;
          }
          v30 = v13;
        }
        else
        {
          while (1)
          {
            v27 = 0;
            v27 = *v8;
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v6, &v27))
            {
              break;
            }
            if (++v8 == v9)
            {
              v7 = (ZinIrOpLayer *)v28;
              goto LABEL_8;
            }
          }
        }
      }
LABEL_29:
      v22 = (uint64_t *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)v3[2];
          v24 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v24);
      }
      v3 = v23;
    }
    while (v23 != v2);
    v26 = (ZinIrOpLayer **)v29;
    v25 = (ZinIrOpLayer **)v30;
    if (v29 != v30)
    {
      do
      {
        v28 = (ZinIrOpLayer ***)*v26;
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(v6, (ZinIrOpLayer **)&v28);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)&v28);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(v5, (ZinIrOpLayer **)&v28);
        ++v26;
      }
      while (v26 != v25);
      v25 = (ZinIrOpLayer **)v29;
    }
    if (v25)
    {
      v30 = (char *)v25;
      operator delete(v25);
    }
  }
}

void sub_206F5883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::DropPureInputConcats(PressureBasedSubgraphIdentification *this, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v5;
  char *v6;
  uint64_t v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer **v15;
  uint64_t *v16;
  uint64_t *v17;
  void *__p;
  ZinIrOpLayer **v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  uint64_t *v22;
  _QWORD *v23[2];
  ZinIrOpLayer *v24;

  v23[0] = 0;
  v23[1] = 0;
  v22 = (uint64_t *)v23;
  v2 = (uint64_t *)(a2 + 1);
  v3 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    v5 = a2 + 9;
    v6 = (char *)(a2 + 10);
    do
    {
      v7 = v3[4];
      v21 = (ZinIrOpLayer *)v7;
      if (*(_DWORD *)(*(_QWORD *)(v7 + 64) + 8) == 7)
      {
        __p = 0;
        v19 = 0;
        v20 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v7 + 88), *(_QWORD *)(v7 + 96), (uint64_t)(*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 3);
        v8 = (ZinIrOpLayer **)__p;
        v9 = v19;
        while (v8 != v9)
        {
          v24 = *v8;
          if (v6 != (char *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)v5, &v24))goto LABEL_9;
          ++v8;
        }
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v22, &v21, (uint64_t *)&v21);
LABEL_9:
        if (__p)
        {
          v19 = (ZinIrOpLayer **)__p;
          operator delete(__p);
        }
      }
      v10 = (uint64_t *)v3[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v3[2];
          v12 = *v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v2);
    v13 = v22;
    if (v22 != (uint64_t *)v23)
    {
      do
      {
        __p = (void *)v13[4];
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)&__p);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(v5, (ZinIrOpLayer **)&__p);
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(a2 + 3, (ZinIrOpLayer **)&__p);
        v14 = (ZinIrOpLayer **)*((_QWORD *)__p + 14);
        v15 = (ZinIrOpLayer **)*((_QWORD *)__p + 15);
        while (v14 != v15)
        {
          v24 = 0;
          v24 = *v14;
          if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v5, &v24))
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a2, &v24, (uint64_t *)&v24);
          }
          ++v14;
        }
        v16 = (uint64_t *)v13[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (uint64_t *)v13[2];
            v12 = *v17 == (_QWORD)v13;
            v13 = v17;
          }
          while (!v12);
        }
        v13 = v17;
      }
      while (v17 != (uint64_t *)v23);
    }
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23[0]);
}

void sub_206F58A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::ConstructSubGraph(SubgraphIdentification *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v8;
  BOOL v9;
  PressureBasedSubgraphIdentification *Subgraph;
  PressureBasedSubgraphIdentification *v11;

  v8 = *(_QWORD *)(a3 + 16);
  do
  {
    PressureBasedSubgraphIdentification::RemoveInputNodeDrivingBothExternalAndInternalNodes((uint64_t)a1, a2, (uint64_t **)a3);
    PressureBasedSubgraphIdentification::RemoveIllegalInternalNodes((uint64_t)a1, (uint64_t **)a3);
    v9 = *(_QWORD *)(a3 + 16) == v8;
    v8 = *(_QWORD *)(a3 + 16);
  }
  while (!v9);
  PressureBasedSubgraphIdentification::IdentifyInputOutputNodes((uint64_t)a1, (_QWORD *)a3, a4);
  Subgraph = (PressureBasedSubgraphIdentification *)SubgraphIdentification::ExtractSubgraph(a1, (Subgraph *)a4);
  PressureBasedSubgraphIdentification::DropPureInputConcats(Subgraph, a4);
  PressureBasedSubgraphIdentification::RemovePureInOutNodes(v11, a4);
}

uint64_t PressureBasedSubgraphIdentification::EstimateKernelReadsPerNE(PressureBasedSubgraphIdentification *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  const ZinKernelDescriptor *v5;
  ZinIrKernel *v6;
  unint64_t v7;
  ZinEngineLayerMirInfo *v8;
  MirInfoChannelAssignment *ChannelAssignment;
  unint64_t OCGSize;
  MirInfoChannelAssignment *v11;
  unint64_t NumNeededNEs;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  ZinIrKernel *v19;
  _BYTE v21[32];
  uint64_t v22;
  __int128 v23;
  ZinIrKernel *v24;

  (*(void (**)(ZinIrKernel **__return_ptr, PressureBasedSubgraphIdentification *, uint64_t, const ZinIrHalParameters *))(*(_QWORD *)this + 568))(&v24, this, 1, a3);
  v6 = v24;
  if (!v24)
    return 0;
  v7 = ZinKernelSizeEstimateUtil::EstimateKMEMFootprintPerCoutElement((ZinIrKernel *)((char *)v24 + 176), v5);
  v8 = (ZinEngineLayerMirInfo *)*((_QWORD *)this + 33);
  if (v8)
  {
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v8);
    OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
    v11 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)this + 33));
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(v11);
    if (ZinKernelFormatIsPalette(*((_DWORD *)v6 + 44)))
    {
      v13 = *((_QWORD *)v6 + 52);
      if (OCGSize % v13)
        ZinAssertImpl("OCG size must be a multiple of palette_vector_size.");
    }
    else
    {
      v13 = 1;
    }
    v15 = (*(uint64_t (**)(PressureBasedSubgraphIdentification *, uint64_t))(*(_QWORD *)this + 368))(this, 2);
    ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v21, NumNeededNEs, OCGSize, v15, 1uLL);
    if (v23 == 0)
      v16 = v22;
    else
      v16 = v22 + 1;
    v17 = *((_QWORD *)this + 49);
    if (v17)
      v18 = *(_DWORD *)(v17 + 192) > 1u;
    else
      v18 = 0;
    v14 = ZinKernelGetLUTSize((uint64_t)a2, v18) + OCGSize / v13 * v7 * v16;
  }
  else
  {
    v14 = 0;
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    ZinIrKernel::~ZinIrKernel(v19);
    MEMORY[0x20BD002F8]();
  }
  return v14;
}

void sub_206F58C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::EstimateSizeOfKernelReads(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  PressureBasedSubgraphIdentification *v10;
  const ZinIrHalParameters *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v20;
  int v21;

  v7 = *(_QWORD **)(a1 + 72);
  v8 = (_QWORD *)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 80))
  {
    v9 = 0;
    if ((a4 & 1) != 0)
      return v9;
    goto LABEL_14;
  }
  v9 = 0;
  do
  {
    v10 = (PressureBasedSubgraphIdentification *)v7[4];
    if (ZinIrOpLayer::IsNELayer(v10))
      v9 += PressureBasedSubgraphIdentification::EstimateKernelReadsPerNE(v10, (const ZinNELayer *)a3, v11);
    v12 = (_QWORD *)v7[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v7[2];
        v14 = *v13 == (_QWORD)v7;
        v7 = v13;
      }
      while (!v14);
    }
    v7 = v13;
  }
  while (v13 != v8);
  if ((a4 & 1) == 0)
  {
LABEL_14:
    v15 = *(_QWORD *)(a3 + 480);
    v16 = v9 * *(int *)(a3 + 8);
    v17 = v9 >= v15;
    v9 = v16;
    if (v17)
    {
      v21 = 3;
      v18 = v16 * *std::map<ZinIrDimension,unsigned long>::at(a2, &v21);
      v20 = 4;
      return v18 * *std::map<ZinIrDimension,unsigned long>::at(a2, &v20);
    }
  }
  return v9;
}

BOOL PressureBasedSubgraphIdentification::IsMemoryFootprintReduced(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrTensor *v12;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v14;
  unint64_t v15;
  unint64_t v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer **v18;
  ZinIrTensor *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v31;
  char v32[8];
  _QWORD *v33;
  uint64_t v34[3];
  ZinIrOpLayer *v35;
  ZinIrOpLayer *v36;
  ZinIrTensor *v37;
  _OWORD v38[2];
  int v39;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = a3;
  v5 = a1;
  v45 = *MEMORY[0x24BDAC8D0];
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  v7 = a2 + 72;
  v6 = *(_QWORD **)(a2 + 72);
  v8 = (_QWORD *)(a2 + 80);
  if (v6 == (_QWORD *)(a2 + 80))
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = a2 + 32;
    v28 = a2 + 8;
    do
    {
      v11 = v6[4];
      v37 = 0;
      v12 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v12);
      v36 = (ZinIrOpLayer *)*((_QWORD *)RootTensor + 12);
      v37 = RootTensor;
      if (v8 != (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v7, &v36)&& v10 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2 + 24, &v36)&& !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v38, &v37)&& ZinMirSpatialSplitUtils::IsNonResident(v37, *(_QWORD **)(v5 + 112)))
      {
        v14 = v37;
        DimensionOrderHint::DimensionOrderHint(__p, 0);
        ZinIrTensor::GetTensorSizeInBytesFromResidency(v14, 2, (uint64_t)__p, 0);
        v16 = v15;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v31 = v9;
        if (*(_DWORD *)(*((_QWORD *)v36 + 8) + 8) == 7
          && v28 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, &v36))
        {
          v18 = (ZinIrOpLayer **)*((_QWORD *)v36 + 11);
          v17 = (ZinIrOpLayer **)*((_QWORD *)v36 + 12);
          while (v18 != v17)
          {
            v35 = 0;
            v35 = *v18;
            if (v8 == (_QWORD *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v7, &v35))
            {
              v19 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0, 0);
              DimensionOrderHint::DimensionOrderHint(__p, 0);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v19, 2, (uint64_t)__p, 0);
              v21 = v20;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v16 >= v21)
                v16 -= v21;
              else
                v16 = 0;
            }
            ++v18;
          }
        }
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v38, &v37, &v37);
        v5 = a1;
        v3 = a3;
        v9 = v31 + 2 * v16;
      }
      v22 = (_QWORD *)v6[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v6[2];
          v24 = *v23 == (_QWORD)v6;
          v6 = v23;
        }
        while (!v24);
      }
      v6 = v23;
    }
    while (v23 != v8);
  }
  std::map<ZinIrDimension,unsigned long>::map[abi:ne180100](v34, v3);
  v25 = PressureBasedSubgraphIdentification::EstimateSizeOfKernelReads(a2, (uint64_t)v34, **(_QWORD **)(v5 + 16), 0);
  v41 = unk_207AAB928;
  v42 = xmmword_207AAB938;
  v43 = unk_207AAB948;
  v44 = xmmword_207AAB958;
  *(_OWORD *)__p = xmmword_207AAB918;
  std::map<ZinIrDimension,unsigned long>::map[abi:ne180100]((uint64_t)v32, (int *)__p, 5);
  v26 = v25
      - PressureBasedSubgraphIdentification::EstimateSizeOfKernelReads(a2, (uint64_t)v32, **(_QWORD **)(v5 + 16), 0);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v32, v33);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v34, (_QWORD *)v34[1]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
  return v26 < v9;
}

void sub_206F590E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ConstructValidSubgraphsFromCluster(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t *a4, char a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 IsANELayer;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD **v25;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  _BOOL4 v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 IsMemoryFootprintReduced;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  char v43;
  uint64_t v44[3];
  unint64_t v45;
  void *__p;
  _QWORD *v47;
  uint64_t v48;
  uint8_t v49[8];
  _QWORD *v50[2];
  int v51;
  _BYTE v52[12];
  __int16 v53;
  uint64_t v54;
  _BYTE buf[24];
  _QWORD **v56;
  _QWORD *v57[2];
  _QWORD v58[3];
  _QWORD **v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62[3];
  uint64_t *v63;
  _QWORD *v64[2];
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v10 = a3 + 1;
  v11 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
    goto LABEL_77;
  v12 = 0;
  do
  {
    IsANELayer = ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v11[4]);
    v14 = (_QWORD *)v11[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v11[2];
        v16 = *v15 == (_QWORD)v11;
        v11 = v15;
      }
      while (!v16);
    }
    v12 += IsANELayer;
    v11 = v15;
  }
  while (v15 != v10);
  if (v12 != 1)
  {
LABEL_77:
    if (*(_BYTE *)(a1 + 73))
    {
      v18 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a3);
      v20 = v19;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tConstructing Subgraph for Cluster [%zu,%zu]", buf, 0x16u);
      }
    }
    *(_QWORD *)buf = &buf[8];
    *(_OWORD *)&buf[8] = 0uLL;
    v57[0] = 0;
    v57[1] = 0;
    v56 = v57;
    v58[0] = v58;
    v58[1] = v58;
    v60 = 0;
    v61 = 0;
    v58[2] = 0;
    v59 = &v60;
    memset(v62, 0, sizeof(v62));
    v64[0] = 0;
    v64[1] = 0;
    v63 = (uint64_t *)v64;
    v65 = 0;
    PressureBasedSubgraphIdentification::ConstructSubGraph((SubgraphIdentification *)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t **)buf);
    if (v61 <= 1)
    {
      if (!*(_BYTE *)(a1 + 73) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        goto LABEL_35;
      *(_WORD *)v49 = 0;
      v21 = MEMORY[0x24BDACB70];
      v22 = "\t\tToo small of subgraph found";
      goto LABEL_34;
    }
    if (!ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsDominanceRelationship<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>((uint64_t)a2, buf, &v56))
    {
      if (!*(_BYTE *)(a1 + 73) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        goto LABEL_35;
      *(_WORD *)v49 = 0;
      v21 = MEMORY[0x24BDACB70];
      v22 = "\t\tIllegal Dominance Relationship";
LABEL_34:
      _os_log_impl(&dword_2069AB000, v21, OS_LOG_TYPE_INFO, v22, v49, 2u);
      goto LABEL_35;
    }
    v23 = v59;
    if (v59 != &v60)
    {
      while (!*(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v23[4] + 32))(v23[4], 0, 0) + 144))
      {
        v24 = v23[1];
        if (v24)
        {
          do
          {
            v25 = (_QWORD **)v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD **)v23[2];
            v16 = *v25 == v23;
            v23 = v25;
          }
          while (!v16);
        }
        v23 = v25;
        if (v25 == &v60)
          goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_27:
    if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 64))(a1, buf))
    {
LABEL_35:
      v17 = 0;
LABEL_36:
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v63, v64[0]);
      *(_QWORD *)v49 = v62;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, v60);
      std::__list_imp<ZinIrSection *>::clear(v58);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v56, v57[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
      return v17;
    }
    v50[0] = 0;
    v50[1] = 0;
    v48 = 0;
    *(_QWORD *)v49 = v50;
    v51 = 5;
    __p = 0;
    v47 = 0;
    v45 = 0;
    if (((*(uint64_t (**)(uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)a1 + 240))(a1, buf, v49) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\t\tLegalizing Cluster Due to no legal split dimension found", v52, 2u);
      }
      v27 = PressureBasedSubgraphIdentification::LegalizeCluster((_QWORD *)a1, a2, (uint64_t)&v59, (uint64_t)a4);
      goto LABEL_41;
    }
    if (((*(uint64_t (**)(uint64_t, _BYTE *, uint8_t *, uint64_t *))(*(_QWORD *)a1 + 56))(a1, buf, v49, a4) & 1) != 0)
    {
LABEL_30:
      v17 = 0;
      goto LABEL_44;
    }
    if (PressureBasedSubgraphIdentification::ComputeTileSize(a1, buf, *(_QWORD *)(a1 + 104), (uint64_t)v49, &__p, &v45))
    {
      v17 = 1;
LABEL_44:
      v28 = __p;
      if (!__p)
      {
LABEL_46:
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v49, v50[0]);
        goto LABEL_36;
      }
LABEL_45:
      v47 = v28;
      operator delete(v28);
      goto LABEL_46;
    }
    v29 = v45;
    if (v45 <= 1 && __p == v47)
    {
      if (*(_BYTE *)(a1 + 73) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\t\tUnnecessary to tile subgraph", v52, 2u);
      }
      goto LABEL_30;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 2))
    {
      v28 = __p;
      if (__p != v47)
      {
        v17 = 1;
        if (!__p)
          goto LABEL_46;
        goto LABEL_45;
      }
    }
    (*(void (**)(uint64_t, _BYTE *, unint64_t, uint8_t *))(*(_QWORD *)a1 + 136))(a1, buf, v45, v49);
    v30 = *(_BYTE **)(a1 + 64);
    v31 = *v30 || v30[1] || v30[5] != 0;
    v42 = v31;
    v43 = (*(uint64_t (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)a1 + 144))(a1, buf, v29);
    v32 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 64))(a1, buf);
    v34 = __p;
    v33 = v47;
    if (((__p == v47) & ~(v43 & a5) & v32) == 0 && v42)
    {
      if (*(_BYTE *)(a1 + 73))
      {
        v35 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a3);
        v37 = v36;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v52 = 134218240;
          *(_QWORD *)&v52[4] = v35;
          v53 = 2048;
          v54 = v37;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tLegalizing Cluster [%zu,%zu] due to high pressure", v52, 0x16u);
        }
      }
      goto LABEL_70;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 5))
    {
      std::map<ZinIrDimension,unsigned long>::map[abi:ne180100](v44, v62[0]);
      IsMemoryFootprintReduced = PressureBasedSubgraphIdentification::IsMemoryFootprintReduced(a1, (uint64_t)buf, (uint64_t)v44);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v44, (_QWORD *)v44[1]);
      if (!IsMemoryFootprintReduced)
      {
LABEL_70:
        v27 = PressureBasedSubgraphIdentification::LegalizeCluster((_QWORD *)a1, a2, (uint64_t)&v59, (uint64_t)a4);
LABEL_41:
        v17 = v27;
        goto LABEL_44;
      }
      v34 = __p;
      v33 = v47;
    }
    while (v34 != v33)
    {
      *(_QWORD *)v52 = *v34;
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v63, (ZinIrOpLayer **)v52, (uint64_t *)v52);
      ++v34;
    }
    if (*(_BYTE *)(a1 + 73))
    {
      v39 = PressureBasedSubgraphIdentification::ComputeTimeSpanOfCluster(a3);
      v41 = v40;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v52 = 134218240;
        *(_QWORD *)&v52[4] = v39;
        v53 = 2048;
        v54 = v41;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\tTile Count Found for Cluster [%zu,%zu]", v52, 0x16u);
      }
    }
    std::__list_imp<ZinIrSection *>::clear(v58);
    std::vector<Subgraph>::push_back[abi:ne180100](a4, (const Subgraph *)buf);
    goto LABEL_30;
  }
  return 0;
}

void sub_206F59828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a19, a20);
  Subgraph::~Subgraph((Subgraph *)&a27);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::LegalizeCluster(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  ZinIrOpLayer ***v9;
  ZinIrOpLayer ***v10;
  ZinIrOpLayer ***v11;
  ZinIrOpLayer ***v12;
  unint64_t v13;
  uint64_t v14;
  ZinIrOpLayer ***v15;
  ZinIrOpLayer ***v16;
  unint64_t v17;
  int valid;
  ZinIrOpLayer ***v21[3];
  void **v22[3];
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void ***v27;

  if (*(_QWORD *)(a3 + 16) == 1)
    return 0;
  v25 = 0uLL;
  v26 = 0;
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 248))(a1, a3))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*a1 + 256))(&v23, a1, a3);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v25);
    v25 = v23;
    v26 = v24;
    v24 = 0;
    v23 = 0uLL;
    v22[0] = (void **)&v23;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v22);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
    PressureBasedSubgraphIdentification::SplitClusterViaCostModel(a1, a2, a3, v22, (uint64_t *)&v23);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v25);
    v25 = v23;
    v26 = v24;
    v24 = 0;
    v23 = 0uLL;
    v27 = (void ***)&v23;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    v27 = v22;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  }
  v9 = (ZinIrOpLayer ***)*((_QWORD *)&v25 + 1);
  v10 = (ZinIrOpLayer ***)v25;
  if (*((_QWORD *)&v25 + 1) == (_QWORD)v25)
    goto LABEL_27;
  do
  {
    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v23, v10);
    if (v24 >= *(_QWORD *)(a3 + 16))
      ZinAssertImpl("Splitted cluster must be smaller than the original cluster.");
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, *((_QWORD **)&v23 + 1));
    v10 += 3;
  }
  while (v10 != v9);
  v12 = (ZinIrOpLayer ***)*((_QWORD *)&v25 + 1);
  v11 = (ZinIrOpLayer ***)v25;
  do
  {
    v13 = 0;
    v14 = (char *)v12 - (char *)v11;
    if (v12 == v11)
    {
      v15 = v11;
    }
    else
    {
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v23, v11);
        v13 += v24;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, *((_QWORD **)&v23 + 1));
        v11 += 3;
      }
      while (v11 != v12);
      v11 = (ZinIrOpLayer ***)*((_QWORD *)&v25 + 1);
      v15 = (ZinIrOpLayer ***)v25;
    }
    memset(v21, 0, sizeof(v21));
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t *)v21, v15, v11, 0xAAAAAAAAAAAAAAABLL * (v11 - v15));
    PressureBasedSubgraphIdentification::CutClustersAtPartialOutputs((uint64_t)a1, v21, (uint64_t)&v25);
    *(_QWORD *)&v23 = v21;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfClusters(a1, (ZinIrOpLayer ****)&v25, (uint64_t *)&v23);
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v25);
    v25 = v23;
    v26 = v24;
    v24 = 0;
    v23 = 0uLL;
    v22[0] = (void **)&v23;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v22);
    v16 = (ZinIrOpLayer ***)*((_QWORD *)&v25 + 1);
    v11 = (ZinIrOpLayer ***)v25;
    if ((_QWORD)v25 == *((_QWORD *)&v25 + 1))
    {
      v17 = 0;
      v12 = (ZinIrOpLayer ***)v25;
    }
    else
    {
      v17 = 0;
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v23, v11);
        v17 += v24;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, *((_QWORD **)&v23 + 1));
        v11 += 3;
      }
      while (v11 != v16);
      v12 = (ZinIrOpLayer ***)*((_QWORD *)&v25 + 1);
      v11 = (ZinIrOpLayer ***)v25;
    }
  }
  while (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) < 0xAAAAAAAAAAAAAAABLL * (v12 - v11) || v17 < v13);
  if (v11 == v12)
  {
LABEL_27:
    v4 = 0;
  }
  else
  {
    while (1)
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v23, v11);
      valid = PressureBasedSubgraphIdentification::ConstructValidSubgraphsFromCluster(a1, a2, &v23, a4, 1);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, *((_QWORD **)&v23 + 1));
      if (valid)
        break;
      v11 += 3;
      if (v11 == v12)
        goto LABEL_27;
    }
    v4 = 1;
  }
  *(_QWORD *)&v23 = &v25;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v4;
}

void sub_206F59BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v22 - 88) = v21;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  a17 = (void **)&a21;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::SplitClusterByConcatWithCopyCost(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD **v6;
  uint64_t v7;
  const ZinIrOpLayer *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  int HaveSameOrigin;
  uint64_t v13;
  ZinMirSpatialSplitUtils **v14;
  ZinMirSpatialSplitUtils **v15;
  uint64_t v16;
  ZinIrTensor *v17;
  uint64_t *v18;
  uint64_t *v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  ZinIrOpLayer *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  _OWORD v30[2];
  int v31;
  void *__p;
  _QWORD **v33;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(v4 + 5) || *(_BYTE *)(v4 + 2))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  ZinMirSpatialSplitUtils::GetSortedCluster(a2, 1, (ZinIrOpLayer ***)&__p);
  v6 = v33;
  if (v33 == __p)
    goto LABEL_35;
  v7 = 0;
  v6 = (_QWORD **)__p;
  while (1)
  {
    HaveSameOrigin = PressureBasedSubgraphIdentification::ConcatTensorsHaveSameOrigin((uint64_t)v6, a2, v6[v7]);
    v6 = (_QWORD **)__p;
    if (HaveSameOrigin)
    {
      v13 = *((_QWORD *)__p + v7);
      v14 = *(ZinMirSpatialSplitUtils ***)(v13 + 88);
      v15 = *(ZinMirSpatialSplitUtils ***)(v13 + 96);
      if (v14 != v15)
        break;
    }
LABEL_12:
    if (++v7 >= (unint64_t)(v33 - v6))
      goto LABEL_35;
  }
  while (!ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(*v14, v8, v9, v10, v11))
  {
    if (++v14 == v15)
    {
      v6 = (_QWORD **)__p;
      goto LABEL_12;
    }
  }
  v6 = (_QWORD **)__p;
  v16 = *((_QWORD *)__p + v7);
  if (!v16)
  {
LABEL_35:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v6)
    {
LABEL_40:
      v33 = v6;
      operator delete(v6);
    }
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v17 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
    ZinIrTensor::GetTensorFamily(v17, (uint64_t)&v27);
    v18 = (uint64_t *)v27;
    v19 = v28;
    if (v27 != (uint64_t **)v28)
    {
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v18 + 96) + 64) + 8) == 7)
        {
          v26 = *(ZinIrOpLayer **)(*v18 + 96);
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v30, &v26, &v26);
        }
        ++v18;
      }
      while (v18 != v19);
      v18 = (uint64_t *)v27;
    }
    if (v18)
    {
      v28 = v18;
      operator delete(v18);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v28 = 0;
    v29 = 0;
    v27 = &v28;
    v20 = (ZinIrOpLayer **)__p;
    v21 = (ZinIrOpLayer **)v33;
    if (__p != v33)
    {
      do
      {
        v26 = *v20;
        if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v30, &v26))
        {
          if (v29)
          {
            v22 = a3[1];
            if (v22 >= a3[2])
            {
              v23 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>(a3, (ZinIrOpLayer ***)&v27);
            }
            else
            {
              std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)a3[1], (ZinIrOpLayer ***)&v27);
              v23 = v22 + 24;
              a3[1] = v22 + 24;
            }
            a3[1] = v23;
          }
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
          v28 = 0;
          v29 = 0;
          v27 = &v28;
        }
        else
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)&v27, &v26, (uint64_t *)&v26);
        }
        ++v20;
      }
      while (v20 != v21);
      if (v29)
      {
        v24 = a3[1];
        if (v24 >= a3[2])
        {
          v25 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>(a3, (ZinIrOpLayer ***)&v27);
        }
        else
        {
          std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)a3[1], (ZinIrOpLayer ***)&v27);
          v25 = v24 + 24;
          a3[1] = v24 + 24;
        }
        a3[1] = v25;
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
    v6 = (_QWORD **)__p;
    if (__p)
      goto LABEL_40;
  }
}

void sub_206F59EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _QWORD *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::ConcatTensorsHaveSameOrigin(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  ZinIrOpLayer **v22;
  ZinIrOpLayer **v23;
  char *v24;
  void *v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  BOOL v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  ZinIrOpLayer *v42;
  void *__p[2];
  char *v44;
  _OWORD v45[2];
  int v46;
  __int128 v47;
  char *v48;

  if (*(_DWORD *)(a3[8] + 8) != 7)
    return 0;
  v4 = a3[11];
  v3 = a3[12];
  if (v4 == v3)
    return 0;
  v38 = a3[12];
  while (1)
  {
    v7 = *(char **)(*(_QWORD *)v4 + 112);
    v6 = *(char **)(*(_QWORD *)v4 + 120);
    if ((unint64_t)(v6 - v7) >= 9)
    {
      v47 = 0uLL;
      v48 = 0;
      while (v7 != v6)
      {
        *(_QWORD *)&v45[0] = 0;
        *(_QWORD *)&v45[0] = *(_QWORD *)v7;
        if (*(_QWORD **)&v45[0] != a3
          && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, (ZinIrOpLayer **)v45))
        {
          v8 = *((_QWORD *)&v47 + 1);
          if (*((_QWORD *)&v47 + 1) >= (unint64_t)v48)
          {
            v10 = (uint64_t)(*((_QWORD *)&v47 + 1) - v47) >> 3;
            if ((unint64_t)(v10 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v11 = (uint64_t)&v48[-v47] >> 2;
            if (v11 <= v10 + 1)
              v11 = v10 + 1;
            if ((unint64_t)&v48[-v47] >= 0x7FFFFFFFFFFFFFF8)
              v12 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v12 = v11;
            if (v12)
              v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v48, v12);
            else
              v13 = 0;
            v14 = &v13[8 * v10];
            *(_QWORD *)v14 = *(_QWORD *)&v45[0];
            v9 = v14 + 8;
            v15 = (char *)*((_QWORD *)&v47 + 1);
            v16 = (char *)v47;
            if (*((_QWORD *)&v47 + 1) != (_QWORD)v47)
            {
              do
              {
                v17 = *((_QWORD *)v15 - 1);
                v15 -= 8;
                *((_QWORD *)v14 - 1) = v17;
                v14 -= 8;
              }
              while (v15 != v16);
              v15 = (char *)v47;
            }
            *(_QWORD *)&v47 = v14;
            *((_QWORD *)&v47 + 1) = v9;
            v48 = &v13[8 * v12];
            if (v15)
              operator delete(v15);
          }
          else
          {
            **((_QWORD **)&v47 + 1) = *(_QWORD *)&v45[0];
            v9 = (_QWORD *)(v8 + 8);
          }
          *((_QWORD *)&v47 + 1) = v9;
        }
        v7 += 8;
      }
      v39 = v4;
      memset(v45, 0, sizeof(v45));
      v46 = 1065353216;
      v18 = a3;
      do
      {
        v19 = (_QWORD *)*((_QWORD *)&v47 + 1);
        v20 = (_QWORD *)v47;
        if ((_QWORD)v47 == *((_QWORD *)&v47 + 1))
          break;
        __p[0] = 0;
        __p[1] = 0;
        v40 = (_QWORD *)v47;
        v44 = 0;
        while (1)
        {
          v21 = (_QWORD *)*v20;
          if ((_QWORD *)*v20 == v18)
            break;
          v23 = (ZinIrOpLayer **)v21[14];
          v22 = (ZinIrOpLayer **)v21[15];
          while (v23 != v22)
          {
            v42 = 0;
            v42 = *v23;
            if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v45, &v42)&& std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, &v42))
            {
              v24 = (char *)__p[1];
              if (__p[1] >= v44)
              {
                v26 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                if ((unint64_t)(v26 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v27 = (v44 - (char *)__p[0]) >> 2;
                if (v27 <= v26 + 1)
                  v27 = v26 + 1;
                if ((unint64_t)(v44 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
                  v28 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v28);
                else
                  v29 = 0;
                v30 = &v29[8 * v26];
                *(_QWORD *)v30 = v42;
                v25 = v30 + 8;
                v32 = (char *)__p[0];
                v31 = (char *)__p[1];
                if (__p[1] != __p[0])
                {
                  do
                  {
                    v33 = *((_QWORD *)v31 - 1);
                    v31 -= 8;
                    *((_QWORD *)v30 - 1) = v33;
                    v30 -= 8;
                  }
                  while (v31 != v32);
                  v31 = (char *)__p[0];
                }
                __p[0] = v30;
                __p[1] = v25;
                v44 = &v29[8 * v28];
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *(_QWORD *)__p[1] = v42;
                v25 = v24 + 8;
              }
              __p[1] = v25;
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v45, &v42, &v42);
            }
            ++v23;
          }
          ++v20;
          v18 = a3;
          if (v20 == v19)
          {
            v34 = (void *)v47;
            v35 = v48;
            v47 = *(_OWORD *)__p;
            v48 = v44;
            __p[0] = v34;
            v44 = v35;
            goto LABEL_56;
          }
        }
        v34 = __p[0];
LABEL_56:
        v20 = v40;
        if (v34)
        {
          __p[1] = v34;
          operator delete(v34);
        }
      }
      while (v21 != v18);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
      if ((_QWORD)v47)
      {
        *((_QWORD *)&v47 + 1) = v47;
        operator delete((void *)v47);
      }
      v36 = v20 == v19;
      v3 = v38;
      v4 = v39;
      if (!v36)
        return 1;
    }
    v4 += 8;
    if (v4 == v3)
      return 0;
  }
}

void sub_206F5A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 112);
  if (v21)
  {
    *(_QWORD *)(v19 - 104) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void PressureBasedSubgraphIdentification::SplitClusterViaGuidance(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  ZinIrOpLayer ***v13;
  ZinIrOpLayer ***v14;
  ZinIrOpLayer *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  ZinIrOpLayer ****v19;

  v5 = a2[2];
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (v5 >= 2)
  {
    v17 = 0;
    v18 = 0;
    v16 = (uint64_t *)&v17;
    v6 = a2 + 1;
    v7 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      do
      {
        v15 = (ZinIrOpLayer *)v7[4];
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3, &v15))
        {
          if (v18)
          {
            PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfCluster(a1, (ZinIrOpLayer ***)&v16, (uint64_t *)&v13);
            std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a4, *(uint64_t ***)(a4 + 8), v13, v14, 0xAAAAAAAAAAAAAAABLL * (v14 - v13));
            v19 = &v13;
            std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
          }
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17);
          v17 = 0;
          v18 = 0;
          v16 = (uint64_t *)&v17;
        }
        else
        {
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v16, &v15, (uint64_t *)&v15);
        }
        v10 = (_QWORD *)v7[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v7[2];
            v12 = *v11 == (_QWORD)v7;
            v7 = v11;
          }
          while (!v12);
        }
        v7 = v11;
      }
      while (v11 != v6);
      if (v18)
      {
        PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfCluster(a1, (ZinIrOpLayer ***)&v16, (uint64_t *)&v13);
        std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t *)a4, *(uint64_t ***)(a4 + 8), v13, v14, 0xAAAAAAAAAAAAAAABLL * (v14 - v13));
        v19 = &v13;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17);
  }
}

void sub_206F5A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, _QWORD *a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::SplitClusterViaCostModel(_QWORD *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  void **v12;
  ZinIrOpLayer **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void ***v20;

  PressureBasedSubgraphIdentification::RemoveInputAndOutputNoopsOfCluster(a1, (ZinIrOpLayer ***)a3, &v17);
  v10 = v18;
  if (v18 - v17 == 24 && (v11 = *(_QWORD *)(v17 + 16), v11 == *(_QWORD *)(a3 + 16)))
  {
    if (v11 > 1)
    {
      PressureBasedSubgraphIdentification::SplitClusterByConcatWithCopyCost((uint64_t)a1, a3, (uint64_t *)&v14);
      v12 = v15;
      if (v15 == v14)
      {
        v13 = PressureBasedSubgraphIdentification::DetermineBestLayerFromCostModel(a1, a2, (_QWORD *)a3, a4);
        PressureBasedSubgraphIdentification::CutClusterAtLayer(a1, (ZinIrOpLayer ****)a3, v13, a5);
      }
      else
      {
        *a5 = (uint64_t)v14;
        a5[1] = (uint64_t)v12;
        a5[2] = v16;
        v15 = 0;
        v16 = 0;
        v14 = 0;
      }
      v20 = &v14;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
  }
  else
  {
    *a5 = v17;
    a5[1] = v10;
    a5[2] = v19;
    v18 = 0;
    v19 = 0;
    v17 = 0;
  }
  v14 = (void **)&v17;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_206F5A5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = &a10;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = (void **)&a13;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t PressureBasedSubgraphIdentification::IsReClusteringNecessary(PressureBasedSubgraphIdentification *this, const Subgraph *a2, const SplitInfo *a3)
{
  if (!*((_QWORD *)a2 + 17) || Subgraph::AreAllResetLayersOutputNodes(a2))
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 97) & 1) != 0)
    SubgraphIdentification::PrintSubgraphInfo((uint64_t)this, a2);
  return 1;
}

uint64_t PressureBasedSubgraphIdentification::RefineSubgraph(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  ZinIrOpLayer ***v8;
  ZinIrOpLayer ***v9;
  unint64_t v10;
  unint64_t v11;
  ZinIrOpLayer ***v13[3];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void **v18;

  v16 = 0uLL;
  v17 = 0;
  if (*(_QWORD *)(a4 + 16))
  {
    PressureBasedSubgraphIdentification::SplitClusterViaGuidance(a1, (_QWORD *)(a3 + 72), a4, (uint64_t)&v14);
  }
  else
  {
    if (!*(_BYTE *)(a1[8] + 8))
    {
      PressureBasedSubgraphIdentification::CutSubgraphAtResetLayers(a1, a3, (uint64_t)&v16);
      goto LABEL_6;
    }
    PressureBasedSubgraphIdentification::SplitClusterViaCostModel(a1, a2, a3 + 72, (_QWORD *)(a3 + 96), (uint64_t *)&v14);
  }
  std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v16);
  v16 = v14;
  v17 = v15;
  v15 = 0;
  v14 = 0uLL;
  v18 = (void **)&v14;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_6:
  v9 = (ZinIrOpLayer ***)*((_QWORD *)&v16 + 1);
  v8 = (ZinIrOpLayer ***)v16;
  do
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 - v8);
    v11 = v10;
    if (!*(_BYTE *)(a1[8] + 8))
    {
      PressureBasedSubgraphIdentification::CutClustersAtConcatWithPartialInputs((uint64_t)a1, (uint64_t)&v16);
      v9 = (ZinIrOpLayer ***)*((_QWORD *)&v16 + 1);
      v8 = (ZinIrOpLayer ***)v16;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 3);
    }
    memset(v13, 0, sizeof(v13));
    std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t *)v13, v8, v9, v11);
    PressureBasedSubgraphIdentification::CutClustersAtPartialOutputs((uint64_t)a1, v13, (uint64_t)&v16);
    *(_QWORD *)&v14 = v13;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v9 = (ZinIrOpLayer ***)*((_QWORD *)&v16 + 1);
    v8 = (ZinIrOpLayer ***)v16;
  }
  while (v10 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 3));
  PressureBasedSubgraphIdentification::ConstructSubGraphs((uint64_t)a1, a2, (uint64_t *)&v16, a5, &v14);
  *(_QWORD *)&v14 = &v16;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return 0;
}

void sub_206F5A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void PressureBasedSubgraphIdentification::CutSubgraphAtResetLayers(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *p_buf;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  char v29;
  NSObject *v30;
  _QWORD *v31;
  ZinIrOpLayer *v34;
  ZinIrOpLayer **v35;
  ZinIrOpLayer **v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 buf;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v39 = 0;
  v37 = (uint64_t *)&v38;
  v4 = a2 + 72;
  ZinMirSpatialSplitUtils::GetSortedCluster(a2 + 72, 0, &v35);
  v6 = v35;
  v5 = v36;
  if ((unint64_t)((char *)v36 - (char *)v35) >= 9)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 97) & 1) != 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO:: (SpatialSplit) ---CutSubgraphAtResetLayers---\n", (uint8_t *)&buf, 2u);
      v6 = v35;
      v5 = v36;
    }
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = a2 + 120;
      while (1)
      {
        v34 = 0;
        v34 = v6[v8];
        *(_QWORD *)&buf = v34;
        v10 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v9, (ZinIrOpLayer **)&buf);
        if (v10)
          goto LABEL_8;
        if (*(_DWORD *)(*((_QWORD *)v34 + 8) + 8) == 7)
          break;
LABEL_14:
        v11 = 0;
LABEL_15:
        v14 = v34;
        if (*(_DWORD *)(*((_QWORD *)v34 + 8) + 8) == 7)
        {
          v10 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2, &v34);
          v15 = v10;
          v14 = v34;
          if (*(_DWORD *)(*((_QWORD *)v34 + 8) + 8) == 7)
          {
            v17 = (_QWORD *)*((_QWORD *)v34 + 11);
            v16 = (_QWORD *)*((_QWORD *)v34 + 12);
            while (v17 != v16)
            {
              *(_QWORD *)&buf = *v17;
              v10 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v9, (ZinIrOpLayer **)&buf);
              if (v10)
                goto LABEL_37;
              ++v17;
            }
            if (v15)
              goto LABEL_37;
            v14 = v34;
          }
          else if (v10)
          {
            goto LABEL_37;
          }
        }
        if (!PressureBasedSubgraphIdentification::ConcatTensorsHaveSameOrigin(v10, v4, v14))
          goto LABEL_41;
        ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a1[2] + 8), &buf);
        v18 = HIBYTE(v41);
        if (v41 < 0)
          v18 = *((_QWORD *)&buf + 1);
        if (v18 != 15)
          goto LABEL_35;
        p_buf = (__int128 *)buf;
        if (v41 >= 0)
          p_buf = &buf;
        v20 = *(_QWORD *)p_buf;
        v21 = *(_QWORD *)((char *)p_buf + 7);
        if (v20 == 0x2D636972656E6567 && v21 == 0x7078652D6761642DLL)
        {
          v23 = *(_BYTE *)(a1[8] + 8) != 0;
          if ((SHIBYTE(v41) & 0x80000000) == 0)
          {
LABEL_36:
            if (!v23)
              goto LABEL_41;
            goto LABEL_37;
          }
        }
        else
        {
LABEL_35:
          v23 = 1;
          if ((SHIBYTE(v41) & 0x80000000) == 0)
            goto LABEL_36;
        }
        operator delete((void *)buf);
        if (!v23)
        {
LABEL_41:
          if (v7 & 1 | !v11)
          {
            v24 = MEMORY[0x24BDACB70];
            if ((*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 97) & 1) != 0
              && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
            {
              v25 = (_QWORD *)((char *)v34 + 24);
              if (*((char *)v34 + 47) < 0)
                v25 = (_QWORD *)*v25;
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = v25;
              _os_log_impl(&dword_2069AB000, v24, OS_LOG_TYPE_INFO, "%s\n", (uint8_t *)&buf, 0xCu);
            }
            buf = 0uLL;
            v41 = 0;
            if (ZinIrOpLayer::IsNoOp(v34, (uint64_t *)&buf))
            {
              v26 = *(_DWORD *)(*((_QWORD *)v34 + 8) + 8);
              if ((_QWORD)buf)
              {
                *((_QWORD *)&buf + 1) = buf;
                operator delete((void *)buf);
              }
              if (v26 != 7)
              {
                v27 = (_QWORD *)*((_QWORD *)v34 + 14);
                v28 = (_QWORD *)*((_QWORD *)v34 + 15);
                while (v27 != v28)
                {
                  *(_QWORD *)&buf = 0;
                  *(_QWORD *)&buf = *v27;
                  if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v37, (ZinIrOpLayer **)&buf))goto LABEL_67;
                  ++v27;
                }
              }
            }
            else if ((_QWORD)buf)
            {
              *((_QWORD *)&buf + 1) = buf;
              operator delete((void *)buf);
            }
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v37, &v34, (uint64_t *)&v34);
LABEL_67:
            if (v8 == v36 - v35 - 1)
              PressureBasedSubgraphIdentification::CutClusterAtPartialOutputs((uint64_t)a1, (ZinIrOpLayer ***)&v37, a3);
          }
          else
          {
            PressureBasedSubgraphIdentification::CutClusterAtPartialOutputs((uint64_t)a1, (ZinIrOpLayer ***)&v37, a3);
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v37, v38);
            v38 = 0;
            v39 = 0;
            v37 = (uint64_t *)&v38;
            v29 = (*(uint64_t (**)(_QWORD *, ZinIrOpLayer *))(*a1 + 24))(a1, v34);
            if ((v29 & 1) == 0)
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v37, &v34, (uint64_t *)&v34);
            v7 = v29 ^ 1;
            if ((*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 97) & 1) != 0)
            {
              v30 = MEMORY[0x24BDACB70];
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
              {
                LOWORD(buf) = 0;
                _os_log_impl(&dword_2069AB000, v30, OS_LOG_TYPE_INFO, "----------------\n", (uint8_t *)&buf, 2u);
              }
              if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
              {
                v31 = (_QWORD *)((char *)v34 + 24);
                if (*((char *)v34 + 47) < 0)
                  v31 = (_QWORD *)*v31;
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v31;
                _os_log_impl(&dword_2069AB000, v30, OS_LOG_TYPE_INFO, "%s (reset)\n", (uint8_t *)&buf, 0xCu);
              }
            }
          }
          goto LABEL_69;
        }
LABEL_37:
        if (v39)
        {
          PressureBasedSubgraphIdentification::CutClusterAtPartialOutputs((uint64_t)a1, (ZinIrOpLayer ***)&v37, a3);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v37, v38);
          v38 = 0;
          v39 = 0;
          v37 = (uint64_t *)&v38;
        }
LABEL_69:
        ++v8;
        v6 = v35;
        if (v8 >= v36 - v35)
          goto LABEL_70;
      }
      v13 = (_QWORD *)*((_QWORD *)v34 + 11);
      v12 = (_QWORD *)*((_QWORD *)v34 + 12);
      while (v13 != v12)
      {
        *(_QWORD *)&buf = *v13;
        v10 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v9, (ZinIrOpLayer **)&buf);
        if (!v10)
          goto LABEL_14;
        ++v13;
      }
LABEL_8:
      v10 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a2 + 24, &v34);
      v11 = v10 == 0;
      goto LABEL_15;
    }
  }
LABEL_70:
  if (v6)
  {
    v36 = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v37, v38);
}

void sub_206F5AD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

_QWORD *PressureBasedSubgraphIdentification::IsChainedProducer(PressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2)
{
  ZinIrTensor *v3;
  ZinIrTensor *RootTensor;

  v3 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v3);
  return ZinMirSpatialSplitUtils::IsChained((uint64_t)RootTensor, *((_QWORD **)this + 14));
}

_QWORD *PressureBasedSubgraphIdentification::IsChainedConsumer(PressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer *v7;
  uint64_t v8;
  _QWORD *v9;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  v5 = v11;
  v6 = v12;
  if (v11 == v12)
  {
    v9 = 0;
    if (!v11)
      return v9;
    goto LABEL_9;
  }
  while (1)
  {
    v7 = *v5;
    v8 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0);
    v9 = ZinMirSpatialSplitUtils::IsChained(v8, *((_QWORD **)this + 14));
    if ((_DWORD)v9)
      break;
    if (++v5 == v6)
      goto LABEL_8;
  }
  *a3 = v7;
LABEL_8:
  v5 = v11;
  if (v11)
  {
LABEL_9:
    v12 = v5;
    operator delete(v5);
  }
  return v9;
}

void sub_206F5AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PressureBasedSubgraphIdentification::IsChainedConsumer(PressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2)
{
  uint64_t v3;

  v3 = 0;
  return (*(uint64_t (**)(PressureBasedSubgraphIdentification *, const ZinIrOpLayer *, uint64_t *))(*(_QWORD *)this + 40))(this, a2, &v3);
}

void std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy(a1, *a2);
    std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy(a1, a2[1]);
    v4 = a2[4];
    a2[4] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

uint64_t std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__push_back_slow_path<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>(v7, v9);
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  v15[2] = v11 + 48;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer(v15);
  return v13;
}

void sub_206F5B098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v13 + 1) - 48;
      *((_QWORD *)&v13 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::reverse_iterator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 16);
    std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 48;
  }
}

void **std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = (void **)(i - 32);
    std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

_QWORD *std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Subgraph>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph*,Subgraph*,Subgraph*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206F5B340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph*,Subgraph*,Subgraph*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      Subgraph::Subgraph((Subgraph *)(a4 + v7), (const Subgraph *)(a2 + v7));
      v7 += 152;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206F5B3BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 152;
    do
    {
      std::__destroy_at[abi:ne180100]<Subgraph,0>(v4 + v2);
      v2 -= 152;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Subgraph>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Subgraph*>,std::__wrap_iter<Subgraph*>>(uint64_t *a1, uint64_t a2, const Subgraph *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const Subgraph *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  Subgraph *v22;
  uint64_t v23;
  Subgraph *v24;
  _QWORD v26[2];
  Subgraph *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = (uint64_t)a3 + 152 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph*,Subgraph*,Subgraph*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<Subgraph>::__move_range((uint64_t)a1, v5, v12, v5 + 152 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>((uint64_t)v26, (uint64_t)v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x1AF286BCA1AF286)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0x86BCA1AF286BCA1BLL * ((a2 - v13) >> 3);
      v16 = 0x86BCA1AF286BCA1BLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0xD79435E50D7943)
        v18 = 0x1AF286BCA1AF286;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Subgraph>>(v9, v18);
      else
        v19 = 0;
      v22 = (Subgraph *)&v19[152 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[152 * v18];
      v23 = 152 * a5;
      v24 = (Subgraph *)((char *)v22 + 152 * a5);
      do
      {
        Subgraph::Subgraph(v22, v7);
        v22 = (Subgraph *)((char *)v22 + 152);
        v7 = (const Subgraph *)((char *)v7 + 152);
        v23 -= 152;
      }
      while (v23);
      v27 = v24;
      v5 = std::vector<Subgraph>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<Subgraph>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_206F5B5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Subgraph>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = v6;
    do
    {
      v11 = Subgraph::Subgraph(v8, v10);
      v10 += 152;
      v8 = v11 + 152;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::vector<Subgraph>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = *a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v9 -= 152;
      v8 = Subgraph::Subgraph(v8 - 152, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      Subgraph::Subgraph(v11, v3);
      v3 += 152;
      v11 += 152;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      std::__tree<ZinSpaceRange>::__move_assign(a4 + v7 - 152, (_QWORD *)(a3 + v7 - 152));
      std::__tree<ZinSpaceRange>::__move_assign(a4 + v7 - 128, (_QWORD *)(a3 + v7 - 128));
      std::list<ZinIrOpLayer *>::__move_assign((uint64_t *)(a4 + v7 - 104), (_QWORD *)(a3 + v7 - 104));
      std::__tree<ZinSpaceRange>::__move_assign(a4 + v7 - 80, (_QWORD *)(a3 + v7 - 80));
      std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      std::__tree<ZinSpaceRange>::__move_assign(a4 + v7 - 32, (_QWORD *)(a3 + v7 - 32));
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(a3 + v7 - 8);
      v7 -= 152;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    if (a2 != a4)
    {
      v9 = a2 + v7;
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t **)(a4 + v7), *(_QWORD **)(a2 + v7), (_QWORD *)(a2 + v7 + 8));
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t **)(v8 + 24), *(_QWORD **)(v9 + 24), (_QWORD *)(v9 + 32));
      std::list<ZinIrOpLayer *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ZinIrOpLayer *,void *>,std::__list_const_iterator<ZinIrOpLayer *,void *>>((uint64_t *)(v8 + 48), *(_QWORD *)(v9 + 56), v9 + 48);
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t **)(v8 + 72), *(_QWORD **)(v9 + 72), (_QWORD *)(v9 + 80));
      std::vector<std::map<ZinIrDimension,unsigned long>>::__assign_with_size[abi:ne180100]<std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*>(v8 + 96, *(_QWORD *)(v9 + 96), *(uint64_t ***)(v9 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3));
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t **)(v8 + 120), *(_QWORD **)(v9 + 120), (_QWORD *)(v9 + 128));
    }
    *(_BYTE *)(v8 + 144) = *(_BYTE *)(a2 + v7 + 144);
    v7 += 152;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t **std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          leaf_high = (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_leaf_high((uint64_t)v5, &v18, (ZinIrOpLayer **)v8 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v8);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_multi<ZinIrOpLayer * const&>(v5, a2 + 4);
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_206F5BA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_leaf_high(uint64_t a1, _QWORD *a2, ZinIrOpLayer **a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!ScheduleComparator::operator()(v7, *a3, *(ZinIrOpLayer **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_multi<ZinIrOpLayer * const&>(uint64_t **a1, _QWORD *a2)
{
  void *v4;
  uint64_t **leaf_high;
  uint64_t v7;

  v4 = operator new(0x28uLL);
  *((_QWORD *)v4 + 4) = *a2;
  leaf_high = (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_leaf_high((uint64_t)a1, &v7, (ZinIrOpLayer **)v4 + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v7, leaf_high, (uint64_t *)v4);
  return v4;
}

void sub_206F5BB68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::map<ZinIrDimension,unsigned long>>::__assign_with_size[abi:ne180100]<std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*>(v8, a2, (uint64_t)a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (uint64_t **)(a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,0>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*,std::map<ZinIrDimension,unsigned long>*>(v8, (uint64_t)v13, (uint64_t)a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 24;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v16 - 24, *(_QWORD **)(v16 - 16));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206F5BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F5BCE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,std::map<ZinIrDimension,unsigned long> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  _QWORD *v6;

  v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      if (v4 != a3)
        std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<ZinIrDimension,unsigned long>,std::__tree_node<std::__value_type<ZinIrDimension,unsigned long>,void *> *,long>>(a3, *v4, v6);
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<ZinIrDimension,unsigned long>,std::__tree_node<std::__value_type<ZinIrDimension,unsigned long>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::__map_value_compare<ZinIrSection::SectType,std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::less<ZinIrSection::SectType>,true>,std::allocator<std::__value_type<ZinIrSection::SectType,ZinIrSection*>>>::__emplace_multi<std::pair<ZinIrSection::SectType const,ZinIrSection*>>(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_206F5BEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        v7 = (void **)(v4 - 32);
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__init_with_size[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::deque<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206F5C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>((_QWORD *)(v4 + 16), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 3));
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 40);
      v4 = v11 + 48;
      v11 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206F5C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>,std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 48;
      v4 = (void **)(v1 - 32);
      std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v4);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

_QWORD *std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__construct_one_at_end[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>((_QWORD *)(v4 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_206F5C204(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__push_back_slow_path<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[48 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>((_QWORD *)v11 + 2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  *(_DWORD *)&v10[48 * v4 + 40] = *(_DWORD *)(a2 + 40);
  v15 += 48;
  std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer(v14);
  return v12;
}

void sub_206F5C338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<Subgraph>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 152;
        std::__destroy_at[abi:ne180100]<Subgraph,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void **std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      do
      {
        *(_QWORD *)v7 = -1;
        *(_QWORD *)(v7 + 8) = -1;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        v7 += 48;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[48 * v11];
    v15 = &v14[48 * a2];
    do
    {
      *(_QWORD *)v14 = -1;
      *((_QWORD *)v14 + 1) = -1;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      v14 += 48;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer(v16);
  }
  return result;
}

void sub_206F5C4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 != a2)
    std::vector<Subgraph>::__assign_with_size[abi:ne180100]<Subgraph*,Subgraph*>(a1 + 16, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

void std::vector<Subgraph>::__assign_with_size[abi:ne180100]<Subgraph*,Subgraph*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<Subgraph>::__vdeallocate((void **)a1);
    if (a4 > 0x1AF286BCA1AF286)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xD79435E50D79436 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xD79435E50D7943)
      v11 = 0x1AF286BCA1AF286;
    else
      v11 = v10;
    std::vector<Subgraph>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph*,Subgraph*,Subgraph*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph*,Subgraph*,Subgraph*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Subgraph *,Subgraph *,Subgraph *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 152;
      std::__destroy_at[abi:ne180100]<Subgraph,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206F5C6F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F5C6F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void **v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        v6 = (void **)(v3 + 32);
        std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v6);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__init_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(uint64_t *result, ZinIrOpLayer ***a2, ZinIrOpLayer ***a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_206F5C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(uint64_t a1, ZinIrOpLayer ***a2, ZinIrOpLayer ***a3, uint64_t *a4)
{
  uint64_t *v4;
  ZinIrOpLayer ***v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206F5C890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::map<ZinIrDimension,unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void IdentifyConnectedComponents(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &)::$_0::operator()(uint64_t a1, ZinIrOpLayer *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7[2];
  ZinIrOpLayer *v8;

  v8 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) >= a1 + 1)
  {
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)(*a3 + 24 * a1), &v8, (uint64_t *)&v8);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = (uint64_t *)v7;
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v6, &v8, (uint64_t *)&v8);
    v4 = a3[1];
    if (v4 >= a3[2])
    {
      v5 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>(a3, (ZinIrOpLayer ***)&v6);
    }
    else
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)a3[1], (ZinIrOpLayer ***)&v6);
      v5 = v4 + 24;
      a3[1] = v4 + 24;
    }
    a3[1] = v5;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
  }
}

void sub_206F5C9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,unsigned long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,unsigned long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,unsigned long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206F5CC04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::reverse_iterator<std::map<ZinIrDimension,unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::vector<std::vector<BOOL>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_206F5CEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void std::vector<std::vector<BOOL>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(uint64_t a1, ZinIrOpLayer ***a2, ZinIrOpLayer ***a3, uint64_t *a4)
{
  uint64_t *v4;
  ZinIrOpLayer ***v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206F5CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = 0;
    do
    {
      v10 = (uint64_t *)(v6 + v9 * 8);
      *v10 = v7[v9];
      v11 = &v7[v9 + 1];
      v12 = *v11;
      *(_QWORD *)(v6 + v9 * 8 + 8) = *v11;
      v13 = v6 + v9 * 8 + 8;
      v14 = v7[v9 + 2];
      v10[2] = v14;
      if (v14)
      {
        *(_QWORD *)(v12 + 16) = v13;
        v7[v9] = v11;
        *v11 = 0;
        v7[v9 + 2] = 0;
      }
      else
      {
        *v10 = v13;
      }
      v9 += 3;
    }
    while ((unint64_t)&v7[v9] < a3);
    v8 = v6 + v9 * 8;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(a2, v7, v6);
}

uint64_t *std::__split_buffer<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::emplace_back<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>(_QWORD *a1, ZinIrOpLayer ***a2)
{
  char *v4;
  _QWORD *v5;
  _BYTE *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t *result;
  _BYTE *v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v6 = (_BYTE *)*a1;
    v5 = (_QWORD *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v37 = a1[4];
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v37, v13);
      v16 = &v15[24 * v14];
      v18 = &v15[24 * v17];
      v19 = a1[1];
      v20 = a1[2];
      v21 = v20 - v19;
      if (v20 == v19)
      {
        v31 = vdupq_n_s64(v19);
        v24 = &v15[24 * v14];
      }
      else
      {
        v22 = 0;
        v23 = v21 / 24;
        v24 = &v16[24 * v23];
        v25 = 24 * v23;
        do
        {
          v26 = (uint64_t *)&v16[v22];
          *v26 = *(_QWORD *)(v19 + v22);
          v27 = (uint64_t *)(v19 + v22 + 8);
          v28 = *v27;
          *(_QWORD *)&v16[v22 + 8] = *v27;
          v29 = (uint64_t)&v16[v22 + 8];
          v30 = *(_QWORD *)(v19 + v22 + 16);
          v26[2] = v30;
          if (v30)
          {
            *(_QWORD *)(v28 + 16) = v29;
            *(_QWORD *)(v19 + v22) = v27;
            *v27 = 0;
            *(_QWORD *)(v19 + v22 + 16) = 0;
          }
          else
          {
            *v26 = v29;
          }
          v22 += 24;
        }
        while (v25 != v22);
        v31 = *(int64x2_t *)(a1 + 1);
      }
      v34 = (_BYTE *)*a1;
      *a1 = v15;
      a1[1] = v16;
      v35 = v31;
      v32 = a1[3];
      a1[2] = v24;
      a1[3] = v18;
      v36 = v32;
      std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)&v34);
      v4 = (char *)a1[2];
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -3 * (v8 >> 1);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(v5, v4, (uint64_t)&v5[-3 * (v8 >> 1)]);
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v4, a2);
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::reverse_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 24;
      std::__tree<ZinSpaceRange>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::__tree<ZinSpaceRange>::__move_assign(a3, v4);
      v4 += 3;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v15 = a4;
  v14 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a2 != a3)
  {
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(a4 + v5);
      *v6 = *(_QWORD *)(a2 + v5);
      v7 = (uint64_t *)(a2 + v5 + 8);
      v8 = *v7;
      *(_QWORD *)(a4 + v5 + 8) = *v7;
      v9 = a4 + v5 + 8;
      v10 = *(_QWORD *)(a2 + v5 + 16);
      v6[2] = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *(_QWORD *)(a2 + v5) = v7;
        *v7 = 0;
        *(_QWORD *)(a2 + v5 + 16) = 0;
      }
      else
      {
        *v6 = v9;
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
    v4 = a4 + v5;
    v15 = a4 + v5;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *>,std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 3;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>::operator=[abi:ne180100](uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = (_QWORD *)(*a1)[1];
  if ((unint64_t)v4 >= (*a1)[2])
  {
    v9 = std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>(*a1, a2);
  }
  else
  {
    *v4 = *a2;
    v5 = a2 + 1;
    v6 = a2[1];
    v4[1] = v6;
    v7 = v4 + 1;
    v8 = a2[2];
    v4[2] = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *a2 = v5;
      *v5 = 0;
      a2[2] = 0;
    }
    else
    {
      *v4 = v7;
    }
    v9 = (uint64_t)(v4 + 3);
  }
  v3[1] = v9;
  return a1;
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *a2;
  v12 = a2 + 1;
  v13 = a2[1];
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 8;
  v15 = a2[2];
  *((_QWORD *)v11 + 2) = v15;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    *a2 = v12;
    *v12 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)v11 = v14;
  }
  v18[2] = v11 + 24;
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v18);
  return v16;
}

void sub_206F5D62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__push_back_slow_path<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&>(uint64_t *a1, ZinIrOpLayer ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(&v13);
  return v11;
}

void sub_206F5D730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v7, *(_QWORD **)(v7 + 8));
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__assign_with_size[abi:ne180100]<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(uint64_t a1, ZinIrOpLayer ***a2, ZinIrOpLayer ***a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (uint64_t **)&a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>((uint64_t)a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(v8, (ZinIrOpLayer ***)v13, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>((uint64_t)a2, (uint64_t **)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 24;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v16 - 24, *(_QWORD **)(v16 - 16));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206F5D9E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F5D9EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  _QWORD *v6;

  v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      if (v4 != a3)
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>(a3, *v4, v6);
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>,std::__wrap_iter<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>>(uint64_t *a1, uint64_t **a2, ZinIrOpLayer ***a3, ZinIrOpLayer ***a4, uint64_t a5)
{
  uint64_t **v5;
  ZinIrOpLayer ***v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  ZinIrOpLayer ***v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[3 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>*>(v9, v21, a4, *(uint64_t **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>((uint64_t)v7, (uint64_t **)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[24 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[24 * v18];
      v23 = 3 * a5;
      v24 = &v22[24 * a5];
      v25 = 8 * v23;
      do
      {
        std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)v22, v7);
        v22 += 24;
        v7 += 3;
        v25 -= 24;
      }
      while (v25);
      v28 = v24;
      v5 = (uint64_t **)std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__swap_out_circular_buffer(a1, v27, (uint64_t)v5);
      std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_206F5DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,false>(uint64_t result, ZinIrOpLayer **a2, uint64_t a3, char a4)
{
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;
  ZinIrOpLayer **v22;
  ZinIrOpLayer **v23;
  ZinIrOpLayer *v24;
  ZinIrOpLayer *v25;
  ZinIrOpLayer *v26;
  ZinIrOpLayer **v27;
  BOOL v28;
  BOOL v29;
  ZinIrOpLayer *v30;
  ZinIrOpLayer *v31;
  ZinIrOpLayer **v32;
  ZinIrOpLayer **v33;
  ZinIrOpLayer *v34;
  ZinIrOpLayer *v35;
  ZinIrOpLayer *v36;
  ZinIrOpLayer *v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer *v39;
  ZinIrOpLayer **v40;
  BOOL v42;
  uint64_t v43;
  ZinIrOpLayer **v44;
  ZinIrOpLayer *v45;
  ZinIrOpLayer *v46;
  ZinIrOpLayer *v47;
  uint64_t v48;
  ZinIrOpLayer **v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  ZinIrOpLayer **v53;
  ZinIrOpLayer **v54;
  ZinIrOpLayer *v55;
  ZinIrOpLayer **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  ZinIrOpLayer **v60;
  uint64_t v61;
  ZinIrOpLayer *v62;
  ZinIrOpLayer **v63;
  ZinIrOpLayer **v64;
  uint64_t v65;
  uint64_t v66;
  ZinIrOpLayer **v67;
  ZinIrOpLayer **v68;
  uint64_t v69;
  unint64_t v70;
  ZinIrOpLayer **v71;
  ZinIrOpLayer *v72;
  ZinIrOpLayer **v73;
  BOOL v74;
  ZinIrOpLayer *v75;
  ZinIrOpLayer *v76;
  ZinIrOpLayer *v77;
  ZinIrOpLayer **v78;
  ZinIrOpLayer **v79;
  ZinIrOpLayer *v80;
  ZinIrOpLayer **v81;
  ZinIrOpLayer **v82;
  ZinIrOpLayer **v83;
  int64_t v84;
  char v85;

  v7 = (ZinIrOpLayer **)result;
LABEL_2:
  v8 = a2 - 1;
  v82 = a2 - 3;
  v83 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ScheduleComparator::operator()((int)&v85, *(a2 - 1), *v7);
        if ((_DWORD)result)
        {
          v39 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7, v7 + 1, v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,0>(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v40 = v7 + 1;
          v42 = v7 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v7;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = ScheduleComparator::operator()((int)&v85, v45, v46);
                if ((_DWORD)result)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(ZinIrOpLayer **)((char *)v7 + v48 + 8) = *(ZinIrOpLayer **)((char *)v7 + v48);
                    if (!v48)
                      break;
                    result = ScheduleComparator::operator()((int)&v85, v47, *(ZinIrOpLayer **)((char *)v7 + v48 - 8));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (ZinIrOpLayer **)((char *)v7 + v48 + 8);
                      goto LABEL_74;
                    }
                  }
                  v49 = v7;
LABEL_74:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v76 = *v7;
              v75 = v7[1];
              v7 = v40;
              result = ScheduleComparator::operator()((int)&v85, v75, v76);
              if ((_DWORD)result)
              {
                v77 = *v7;
                v78 = v7;
                do
                {
                  v79 = v78;
                  v80 = *--v78;
                  *v79 = v80;
                  result = ScheduleComparator::operator()((int)&v85, v77, *(v79 - 2));
                }
                while ((result & 1) != 0);
                *v78 = v77;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v50 = (unint64_t)(v11 - 2) >> 1;
            v84 = v50;
            v81 = a2;
            do
            {
              v51 = v50;
              if (v84 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v7[v52];
                if (2 * v50 + 2 < v11 && ScheduleComparator::operator()((int)&v85, *v53, v53[1]))
                {
                  ++v53;
                  v52 = 2 * v51 + 2;
                }
                v54 = &v7[v51];
                result = ScheduleComparator::operator()((int)&v85, *v53, *v54);
                if ((result & 1) == 0)
                {
                  v55 = *v54;
                  do
                  {
                    v56 = v53;
                    *v54 = *v53;
                    if (v84 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = &v7[v57];
                    v58 = 2 * v52 + 2;
                    if (v58 < v11 && ScheduleComparator::operator()((int)&v85, *v53, v53[1]))
                    {
                      ++v53;
                      v57 = v58;
                    }
                    result = ScheduleComparator::operator()((int)&v85, *v53, v55);
                    v54 = v56;
                    v52 = v57;
                  }
                  while (!(_DWORD)result);
                  *v56 = v55;
                  a2 = v81;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v59 = (unint64_t)v10 >> 3;
            do
            {
              v60 = a2;
              v61 = 0;
              v62 = *v7;
              v63 = v7;
              do
              {
                v64 = &v63[v61 + 1];
                v65 = (2 * v61) | 1;
                v66 = 2 * v61 + 2;
                if (v66 < v59)
                {
                  result = ScheduleComparator::operator()((int)&v85, *v64, v63[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v64;
                    v65 = v66;
                  }
                }
                *v63 = *v64;
                v63 = v64;
                v61 = v65;
              }
              while (v65 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
              v67 = v60 - 1;
              if (v64 == v67)
              {
                v68 = v67;
                *v64 = v62;
              }
              else
              {
                *v64 = *v67;
                v68 = v67;
                *v67 = v62;
                v69 = (char *)v64 - (char *)v7 + 8;
                if (v69 >= 9)
                {
                  v70 = (((unint64_t)v69 >> 3) - 2) >> 1;
                  v71 = &v7[v70];
                  result = ScheduleComparator::operator()((int)&v85, *v71, *v64);
                  if ((_DWORD)result)
                  {
                    v72 = *v64;
                    do
                    {
                      v73 = v71;
                      *v64 = *v71;
                      if (!v70)
                        break;
                      v70 = (v70 - 1) >> 1;
                      v71 = &v7[v70];
                      result = ScheduleComparator::operator()((int)&v85, *v71, v72);
                      v64 = v73;
                    }
                    while ((result & 1) != 0);
                    *v73 = v72;
                  }
                }
              }
              v74 = v59-- <= 2;
              a2 = v68;
            }
            while (!v74);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v13, v7, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7, v13, v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7 + 1, v13 - 1, v83);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7 + 2, &v7[v12 + 1], v82);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0 && !ScheduleComparator::operator()((int)&v85, *(v7 - 1), *v7))
        {
          v30 = *v7;
          result = ScheduleComparator::operator()((int)&v85, *v7, *v8);
          if ((result & 1) != 0)
          {
            v9 = v7;
            do
            {
              v31 = v9[1];
              ++v9;
              result = ScheduleComparator::operator()((int)&v85, v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v32 = v7 + 1;
            do
            {
              v9 = v32;
              if (v32 >= a2)
                break;
              ++v32;
              result = ScheduleComparator::operator()((int)&v85, v30, *v9);
            }
            while (!(_DWORD)result);
          }
          v33 = a2;
          if (v9 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *--v33;
              result = ScheduleComparator::operator()((int)&v85, v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v33)
          {
            v35 = *v9;
            *v9 = *v33;
            *v33 = v35;
            do
            {
              v36 = v9[1];
              ++v9;
            }
            while (!ScheduleComparator::operator()((int)&v85, v30, v36));
            do
            {
              v37 = *--v33;
              result = ScheduleComparator::operator()((int)&v85, v30, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v38;
          a4 = 0;
          *v38 = v30;
          continue;
        }
        v15 = 0;
        v16 = *v7;
        while (ScheduleComparator::operator()((int)&v85, v7[++v15], v16))
          ;
        v18 = &v7[v15];
        v19 = a2;
        if (v15 == 1)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *--a2;
          }
          while (!ScheduleComparator::operator()((int)&v85, v21, v16));
        }
        else
        {
          do
            v20 = *--a2;
          while (!ScheduleComparator::operator()((int)&v85, v20, v16));
        }
        if (v18 >= a2)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = &v7[v15];
          v23 = a2;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (ScheduleComparator::operator()((int)&v85, v25, v16));
            do
              v26 = *--v23;
            while (!ScheduleComparator::operator()((int)&v85, v26, v16));
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v16;
        v28 = v18 >= a2;
        a2 = v19;
        if (!v28)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v9 = v27 + 1;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v7, v27);
        v9 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(v27 + 1, v19);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,0>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4, ZinIrOpLayer **a5)
{
  _BOOL8 result;
  ZinIrOpLayer *v11;
  ZinIrOpLayer *v12;
  ZinIrOpLayer *v13;
  ZinIrOpLayer *v14;
  char v15;
  char v16;
  char v17;
  char v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(a1, a2, a3, a4);
  result = ScheduleComparator::operator()((int)&v15, *a5, *a4);
  if (result)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    result = ScheduleComparator::operator()((int)&v16, *a4, *a3);
    if (result)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = ScheduleComparator::operator()((int)&v17, *a3, *a2);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        result = ScheduleComparator::operator()((int)&v18, *a2, *a1);
        if (result)
        {
          v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3)
{
  BOOL v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;
  _BOOL8 result;
  ZinIrOpLayer *v10;
  ZinIrOpLayer *v11;
  ZinIrOpLayer *v12;
  ZinIrOpLayer *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v6 = ScheduleComparator::operator()((int)&v14, *a2, *a1);
  v7 = *a3;
  v8 = *a2;
  if (v6)
  {
    result = ScheduleComparator::operator()((int)&v17, v7, v8);
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = ScheduleComparator::operator()((int)&v18, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else
  {
    result = ScheduleComparator::operator()((int)&v15, v7, v8);
    if (result)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      result = ScheduleComparator::operator()((int)&v16, *a2, *a1);
      if (result)
      {
        v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2)
{
  uint64_t v4;
  _BOOL8 result;
  ZinIrOpLayer *v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  uint64_t v9;
  int v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  char v15;
  char v16;
  char v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ScheduleComparator::operator()((int)&v15, *(a2 - 1), *a1))
      {
        v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (ScheduleComparator::operator()((int)&v16, *v8, *v7))
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        v13 = (ZinIrOpLayer **)((char *)a1 + v12);
        *(ZinIrOpLayer **)((char *)a1 + v12 + 24) = *(ZinIrOpLayer **)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if (!ScheduleComparator::operator()((int)&v17, v11, v13[1]))
        {
          v14 = (ZinIrOpLayer **)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4)
{
  _BOOL8 result;
  ZinIrOpLayer *v9;
  ZinIrOpLayer *v10;
  ZinIrOpLayer *v11;
  char v12;
  char v13;
  char v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PressureBasedSubgraphIdentification::ExternalTensorSetPerResetLayer(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &,std::map<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer * const,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>> &)::$_0 &,ZinIrOpLayer **>(a1, a2, a3);
  result = ScheduleComparator::operator()((int)&v12, *a4, *a3);
  if (result)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = ScheduleComparator::operator()((int)&v13, *a3, *a2);
    if (result)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = ScheduleComparator::operator()((int)&v14, *a2, *a1);
      if (result)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__includes[abi:ne180100]<std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,std::__tree_const_iterator<ZinIrTensor const*,std::__tree_node<ZinIrTensor const*,void *> *,long>,ZinIrIdComparator<ZinIrTensor const*> &,std::__identity,std::__identity>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      v5 = a3[4];
      v6 = a1[4];
      if (v5)
        v7 = v6 == 0;
      else
        v7 = 1;
      if (v7)
      {
        if (v5)
          v8 = v6 == 0;
        else
          v8 = 0;
        if (v8)
          return 0;
      }
      else if (*(_QWORD *)(v5 + 8) < *(_QWORD *)(v6 + 8))
      {
        return 0;
      }
      if (v5)
        v9 = v6 == 0;
      else
        v9 = 1;
      if (v9)
      {
        if (!v5 && v6)
        {
LABEL_22:
          v10 = a3;
          goto LABEL_29;
        }
      }
      else if (*(_QWORD *)(v6 + 8) < *(_QWORD *)(v5 + 8))
      {
        goto LABEL_22;
      }
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v10 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)a3[2];
          v7 = *v10 == (_QWORD)a3;
          a3 = v10;
        }
        while (!v7);
      }
LABEL_29:
      v12 = (_QWORD *)a1[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a1[2];
          v7 = *v13 == (_QWORD)a1;
          a1 = v13;
        }
        while (!v7);
      }
      v4 = v10 == a4;
      if (v10 != a4)
      {
        a1 = v13;
        a3 = v10;
        if (v13 != a2)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t std::vector<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::erase(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> *,0>(a3, *(_QWORD **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 24;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v7 - 24, *(_QWORD **)(v7 - 16));
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__erase_unique<ZinIrOpLayer *>(uint64_t **a1, ZinIrOpLayer **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

ZinMirSpatialSplitLatencyCostModel *std::unique_ptr<ZinMirSpatialSplitLatencyCostModel>::reset[abi:ne180100](ZinMirSpatialSplitLatencyCostModel **a1, ZinMirSpatialSplitLatencyCostModel *a2)
{
  ZinMirSpatialSplitLatencyCostModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinMirSpatialSplitLatencyCostModel::~ZinMirSpatialSplitLatencyCostModel(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001C38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001C38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  _QWORD *v2;
  uint64_t **Hal;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *p_p;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  __n128 v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  ZinIrOpLayer *v37;
  _QWORD *v38;
  ZinIrOpLayer *v39;
  ZinIrOpLayer *v40;
  char inserted;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v55[21];
  char v56;
  _QWORD *v57;
  __int128 __p;
  int64_t v59;
  char v60;
  __int128 v61;
  int64_t v62;
  uint64_t *v63;
  _QWORD *v64[2];
  char v65[8];
  _QWORD *v66;
  std::string v67;
  _QWORD *v68;
  ZinIrOpLayer *v69;
  uint8_t buf[8];
  _BYTE v71[10];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 8);
  Hal = (uint64_t **)ZinIrTarget::GetHal(*a2);
  v4 = v2[1];
  v6 = *(_QWORD *)(v4 + 352);
  v5 = *(_QWORD *)(v4 + 360);
  if (v5 == v6)
    ZinAssertImpl("Must run scheduler first");
  v7 = Hal;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 48);
  v9 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 48);
  ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::GetTopologicalOrderMap(Hal, (uint64_t)v65);
  v64[0] = 0;
  v64[1] = 0;
  v63 = (uint64_t *)v64;
  if (v8 > v9)
    goto LABEL_83;
  do
  {
    *(_QWORD *)&__p = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 352) + 8 * v8);
    *(_QWORD *)&__p = v10;
    if ((*(_DWORD *)(*(_QWORD *)(v10 + 64) + 8) - 28) >= 3)
    {
      v13 = v10 + 112;
      v12 = *(uint64_t **)(v10 + 112);
      v11 = *(uint64_t **)(v13 + 8);
      if ((unint64_t)((char *)v11 - (char *)v12) >= 9)
      {
        *(_QWORD *)&v61 = 0;
        while (v12 != v11)
        {
          v14 = *v12;
          if (*(_DWORD *)(*(_QWORD *)(*v12 + 64) + 8) == 7)
          {
            *(_QWORD *)&v61 = *v12;
            v15 = *(_QWORD *)(v14 + 48);
            v67.__r_.__value_.__r.__words[0] = v8 + 1;
            v67.__r_.__value_.__l.__size_ = v15;
            if (ZinIrMemoryPressureAnalyzer::GetPeakPressure((ZinIrMemoryPressureAnalyzer *)(v2 + 16), (const ZinLiveRange *)&v67) >= v2[13])
            {
              v18 = *(uint64_t **)(__p + 112);
              v17 = *(uint64_t **)(__p + 120);
              while (v18 != v17)
              {
                if (*v18 != (_QWORD)v61
                  && ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::FindPath((uint64_t)v7, v18, (uint64_t *)&v61, (uint64_t)v65))
                {
                  v55[0] = (uint64_t *)&__p;
                  v19 = std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v63, (ZinIrOpLayer **)&__p, (uint64_t)&std::piecewise_construct, v55);
                  std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v19 + 5, (ZinIrOpLayer **)&v61, (uint64_t *)&v61);
                }
                ++v18;
              }
            }
            break;
          }
          ++v12;
        }
      }
    }
    v16 = v8++ == v9;
  }
  while (!v16);
  v20 = v63;
  if (v63 == (uint64_t *)v64)
  {
LABEL_83:
    v52 = 0;
  }
  else
  {
    while (1)
    {
      v21 = (uint64_t *)v20[5];
      if (v21 != v20 + 6)
        break;
LABEL_76:
      v50 = (uint64_t *)v20[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (uint64_t *)v20[2];
          v16 = *v51 == (_QWORD)v20;
          v20 = v51;
        }
        while (!v16);
      }
      v52 = 0;
      v20 = v51;
      if (v51 == (uint64_t *)v64)
        goto LABEL_85;
    }
    while (1)
    {
      v22 = v20[4];
      if (*(char *)(v22 + 47) >= 0)
        v23 = *(unsigned __int8 *)(v22 + 47);
      else
        v23 = *(_QWORD *)(v22 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v67, v23 + 1);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v67;
      else
        v24 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if (*(char *)(v22 + 47) >= 0)
          v25 = (const void *)(v22 + 24);
        else
          v25 = *(const void **)(v22 + 24);
        memmove(v24, v25, v23);
      }
      *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 95;
      v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "split_live_range");
      v27 = std::string::append(v26, "_xfm", 4uLL);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v59 = v27->__r_.__value_.__r.__words[2];
      __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (v59 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v59 >= 0)
        v30 = HIBYTE(v59);
      else
        v30 = *((_QWORD *)&__p + 1);
      v31 = std::string::append(&v67, p_p, v30);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v62 = v31->__r_.__value_.__r.__words[2];
      v61 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59) < 0)
        operator delete((void *)__p);
      if (v72 < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v33 = ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v61);
      v34 = (_QWORD *)v20[4];
      v35 = v34[2];
      v36 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, __n128))(*v34 + 32))(v34, 0, 0, v33)
                      + 88);
      v57 = 0;
      LOBYTE(v55[0]) = 0;
      v56 = 0;
      v37 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v35, (uint64_t)&__p, (uint64_t)v34, v36, &v57, 0, (uint64_t)v55, 1.0);
      v38 = v57;
      v57 = 0;
      if (v38)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v57, v38);
      v40 = (ZinIrOpLayer *)v21[4];
      v69 = (ZinIrOpLayer *)v20[4];
      v39 = v69;
      *(_QWORD *)buf = &v69;
      *(_QWORD *)v71 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v67, buf);
      inserted = ZinIrOpLayerGraph::InsertNodeBetween(v7, v37, v39, v40, (ZinIrOpLayer ***)&v67);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v67.__r_.__value_.__l.__size_)
      {
        v67.__r_.__value_.__r.__words[2] = v67.__r_.__value_.__l.__size_;
        operator delete((void *)v67.__r_.__value_.__l.__size_);
      }
      if ((inserted & 1) != 0)
      {
        ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)&v67);
        if (ZinMirSetActiveNE(v37, (CFArrayRef *)&v67))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = 193;
            *(_WORD *)v71 = 2080;
            *(_QWORD *)&v71[2] = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinMirPrepare"
                                 "/src/ZinMirPressureBasedSubgraphIdentification.cpp";
            _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: failed set active ne, line: %d, file: %s", buf, 0x12u);
          }
          v42 = 1;
        }
        else
        {
          v42 = 0;
          **(_BYTE **)(a1 + 16) = 1;
        }
        ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&v67);
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v45 = &v61;
          if (v62 < 0)
            v45 = (__int128 *)v61;
          v46 = v20[4];
          v47 = (_QWORD *)(v46 + 24);
          if (*(char *)(v46 + 47) < 0)
            v47 = (_QWORD *)*v47;
          v48 = v21[4];
          v49 = (_QWORD *)(v48 + 24);
          if (*(char *)(v48 + 47) < 0)
            v49 = (_QWORD *)*v49;
          LODWORD(v67.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
          WORD2(v67.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v47;
          HIWORD(v67.__r_.__value_.__r.__words[2]) = 2080;
          v68 = v49;
          _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ERROR: Failed insert %s between %s and %s", (uint8_t *)&v67, 0x20u);
        }
        v42 = 1;
      }
      *(_QWORD *)&__p = off_24C01FBB0;
      if (v60 < 0)
        operator delete(*((void **)&__p + 1));
      if (SHIBYTE(v62) < 0)
        operator delete((void *)v61);
      if (v42)
        break;
      v43 = (uint64_t *)v21[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v21[2];
          v16 = *v44 == (_QWORD)v21;
          v21 = v44;
        }
        while (!v16);
      }
      v21 = v44;
      if (v44 == v20 + 6)
        goto LABEL_76;
    }
    v52 = 3;
  }
LABEL_85:
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)&v63, v64[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v65, v66);
  return v52;
}

void sub_206F5EFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::FindPath(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t Path;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  Path = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::FindPath(a1, a2, a3, a4, &__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return Path;
}

void sub_206F5F144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(uint64_t **a1, ZinIrOpLayer **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>((uint64_t)a1, &v11, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = **a4;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v9;
    v7[5] = (uint64_t)(v7 + 6);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001C90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001C90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  uint64_t v2;
  uint64_t Hal;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  void **v10;
  const void *v11;
  __n128 v12;
  uint64_t v13;
  int v14;
  ZinIrOpLayer *v15;
  _QWORD *v16;
  char inserted;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void **v22;
  _QWORD *v23;
  uint64_t **v26;
  _BYTE v27[172];
  _QWORD *v28;
  _QWORD v29[3];
  char v30;
  void *v31[2];
  char v32;
  _QWORD v33[2];
  uint64_t v34;
  _QWORD v35[3];
  _BYTE buf[24];
  _QWORD *v37;
  _QWORD v38[4];

  v38[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  Hal = ZinIrTarget::GetHal(*a2);
  v4 = *(_QWORD **)(Hal + 440);
  v26 = (uint64_t **)Hal;
  v5 = (_QWORD *)(Hal + 448);
  if (v4 == (_QWORD *)(Hal + 448))
    return 0;
  while (1)
  {
    v6 = (char *)v4[4];
    v7 = **((_QWORD **)v6 + 11);
    if (*(_QWORD *)(v7 + 120) - *(_QWORD *)(v7 + 112) >= 9uLL)
    {
      v33[0] = *(_QWORD *)(v7 + 48);
      v33[1] = v33[0];
      if (ZinIrMemoryPressureAnalyzer::GetPeakPressure((ZinIrMemoryPressureAnalyzer *)(v2 + 128), (const ZinLiveRange *)v33) >= *(_QWORD *)(v2 + 104))
      {
        if (v6[47] >= 0)
          v8 = v6[47];
        else
          v8 = *((_QWORD *)v6 + 4);
        std::string::basic_string[abi:ne180100]((uint64_t)v31, v8 + 30);
        v9 = v6 + 24;
        if (v32 >= 0)
          v10 = v31;
        else
          v10 = (void **)v31[0];
        if (v8)
        {
          if (v6[47] >= 0)
            v11 = v6 + 24;
          else
            v11 = (const void *)*((_QWORD *)v6 + 3);
          memmove(v10, v11, v8);
        }
        strcpy((char *)v10 + v8, "_LiveOutCopy_MultiFanOutParent");
        v12 = ZinObjectNameFactory::ZinObjectNameFactory(v29, v31);
        v13 = *(_QWORD *)(v7 + 16);
        v14 = *(_DWORD *)((*(uint64_t (**)(char *, _QWORD, _QWORD, __n128))(*(_QWORD *)v6 + 32))(v6, 0, 0, v12)+ 88);
        v28 = 0;
        v27[0] = 0;
        v27[168] = 0;
        v15 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v13, (uint64_t)v29, v7, v14, &v28, 0, (uint64_t)v27, 1.0);
        v16 = v28;
        v28 = 0;
        if (v16)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v28, v16);
        v38[0] = v7;
        v34 = (uint64_t)v38;
        v35[0] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(buf, &v34);
        inserted = ZinIrOpLayerGraph::InsertNodeBetween(v26, v15, (ZinIrOpLayer *)v7, (ZinIrOpLayer *)v6, (ZinIrOpLayer ***)buf);
        *(_QWORD *)buf = &unk_24C02BB18;
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if ((inserted & 1) != 0)
        {
          ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)buf);
          if (ZinMirSetActiveNE(v15, (CFArrayRef *)buf))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              v34 = 0x12904000202;
              LOWORD(v35[0]) = 2080;
              *(_QWORD *)((char *)v35 + 2) = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/Z"
                                             "inMirPrepare/src/ZinMirPressureBasedSubgraphIdentification.cpp";
              _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: failed set active ne, line: %d, file: %s", (uint8_t *)&v34, 0x12u);
            }
            v18 = 1;
          }
          else
          {
            v18 = 0;
            **(_BYTE **)(a1 + 16) = 1;
          }
          ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)buf);
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            v22 = (void **)v31[0];
            if (v32 >= 0)
              v22 = v31;
            v23 = (_QWORD *)(v7 + 24);
            if (*(char *)(v7 + 47) < 0)
              v23 = (_QWORD *)*v23;
            if (v6[47] < 0)
              v9 = (_QWORD *)*v9;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v22;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2080;
            v37 = v9;
            _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ERROR: Failed insert %s between %s and %s", buf, 0x20u);
          }
          v18 = 1;
        }
        v29[0] = off_24C01FBB0;
        if (v30 < 0)
          operator delete((void *)v29[1]);
        if (v32 < 0)
          operator delete(v31[0]);
        if (v18)
          break;
      }
    }
    v19 = (_QWORD *)v4[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v4[2];
        v21 = *v20 == (_QWORD)v4;
        v4 = v20;
      }
      while (!v21);
    }
    v4 = v20;
    if (v20 == v5)
      return 0;
  }
  return 3;
}

void sub_206F5F660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a61);
  *(_QWORD *)(v61 + 8) = off_24C01FBB0;
  if (a47 < 0)
    operator delete(*(void **)(v61 + 16));
  if (a54 < 0)
    operator delete(*(void **)(v61 + 48));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0,std::allocator<PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent(BOOL &)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C001BE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001BE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  ZinIrTensor *v6;
  int v7;
  ZinIrTensor *v8;
  uint64_t v9;
  uint64_t v11;
  void *__p[4];
  ZinIrTensor *RootTensor;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v6);
  std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(*(uint64_t ***)(a1 + 8), (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 16), &RootTensor))
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 64) + 8);
    if ((v7 & 0xFFFFFFFC) == 0x1C
      || !*(_BYTE *)(*(_QWORD *)(v5 + 64) + 2)
      && (v11 = *((_QWORD *)RootTensor + 13)) != 0
      && *(_DWORD *)(v11 + 96) == 2)
    {
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>(*(_QWORD *)(a1 + 16), &RootTensor, &RootTensor);
      v7 = *(_DWORD *)(*(_QWORD *)(v4 + 64) + 8);
    }
    if ((v7 & 0xFFFFFFFC) == 0x1C)
    {
      v8 = RootTensor;
      DimensionOrderHint::DimensionOrderHint(__p, 0);
      ZinIrTensor::GetTensorSizeInBytesFromResidency(v8, 2, (uint64_t)__p, 0);
      **(_QWORD **)(a1 + 32) += v9;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_206F5F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0,std::allocator<PressureBasedSubgraphIdentification::ConstructMemoryPressureMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t *std::list<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::list<std::__wrap_iter<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>*>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__create_node[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>&>((uint64_t)a1, 0, 0, v5);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 48;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_206F5F9D0(_Unwind_Exception *a1)
{
  char *v1;

  std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>>::__create_node[abi:ne180100]<std::pair<ZinLiveRange,SubgraphIdentification::SubgraphIdentificationResult>&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x40uLL);
  *v7 = a2;
  v7[1] = a3;
  *((_OWORD *)v7 + 1) = *(_OWORD *)a4;
  v7[5] = 0;
  v7[6] = 0;
  v7[4] = 0;
  std::vector<Subgraph>::__init_with_size[abi:ne180100]<Subgraph*,Subgraph*>(v7 + 4, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 3));
  *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 40);
  return v7;
}

void sub_206F5FA60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206F5FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::push_back(_QWORD *a1, ZinIrOpLayer ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (uint64_t *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  result = std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100](v8, a2);
  ++a1[5];
  return result;
}

void std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206F60184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::pop_front(int64x2_t *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_207A8C990);
  return std::deque<std::string>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t *std::__tree<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,std::__map_value_compare<ZinIrTensor *,std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>,ZinIrIdComparator<ZinIrTensor *>,true>,std::allocator<std::__value_type<ZinIrTensor *,std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__find_equal<ZinIrTensor const*>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = **a4;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v9;
    v7[5] = (uint64_t)(v7 + 6);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::set<ZinRingBufferWriterLayer *,ScheduleComparator,std::allocator<ZinRingBufferWriterLayer *>>::set[abi:ne180100](uint64_t *a1, ZinIrOpLayer ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_206F60308(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::find<MinDMABufferMapKey>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = MinDMABufferMapKey::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || MinDMABufferMapKey::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

void std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>(uint64_t **a1, ZinIrOpLayer **a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>>::__construct_node<ZinIrOpLayer *&,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer *,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>>>::__construct_node<ZinIrOpLayer *&,std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v7 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  v9 = *a3;
  v10 = a3 + 1;
  v11 = a3[1];
  result[4] = *a2;
  result[5] = v9;
  result[6] = v11;
  v12 = result + 6;
  v13 = a3[2];
  result[7] = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *a3 = (uint64_t)v10;
    *v10 = 0;
    a3[2] = 0;
  }
  else
  {
    result[5] = v12;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,ZinANELayer *&,CostModelParameters&>(uint64_t **a1, ZinIrOpLayer **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__construct_node<ZinANELayer *&,CostModelParameters&>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__construct_node<ZinANELayer *&,CostModelParameters&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8[4] = *a2;
  v8[6] = 0;
  v8[7] = 0;
  v8[5] = 0;
  result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(v8 + 5, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  *((_WORD *)v8 + 32) = *(_WORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206F606B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<ZinANELayer *,CostModelParameters>,std::__map_value_compare<ZinANELayer *,std::__value_type<ZinANELayer *,CostModelParameters>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinANELayer *,CostModelParameters>>>::__emplace_unique_key_args<ZinANELayer *,std::piecewise_construct_t const&,std::tuple<ZinANELayer * const&>,std::tuple<>>(uint64_t **a1, ZinIrOpLayer **a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>((uint64_t)a1, &v10, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x48uLL);
    *((_QWORD *)v7 + 4) = **a4;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::__unordered_map_hasher<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,PressureBasedSubgraphIdentification::CopyPressure>>>::__deallocate_node(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v2 + 6), v2[7]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

void PressureBasedSubgraphIdentification::IdentifySubgraphs()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_debug_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "DEBUG: DRAM legalizer failed. Memory allocation may fail later.\n", v0, 2u);
}

uint64_t ZinParseLinearUnit(const __CFDictionary *a1, ZinIrLinearUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;
  CFTypeID v10;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    *((_DWORD *)a2 + 60) = 5;
    v8 = CFDictionaryGetValue(v6, CFSTR("GroupDimension"));
    if (!v8)
      return ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>(v6, (uint64_t)a2, a3);
    v9 = v8;
    v10 = CFGetTypeID(v8);
    if (v10 != CFStringGetTypeID() || CFStringToZinIrDimension(v9, (char *)a2 + 240))
      return ZinParseKernelAndFileInfo<ZinIrConvUnitInfo>(v6, (uint64_t)a2, a3);
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
  }
  return 3;
}

uint64_t ZinMirOptFullyConnectedLayer(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::__shared_weak_count *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(*(_QWORD *)a2 + 1880))
    return 0;
  v9[1] = 0;
  v10 = 0;
  v9[0] = a2;
  v11[0] = &off_24BFFF198;
  v11[1] = v9;
  v12 = v11;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v11, 1);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
    goto LABEL_7;
  }
  if (v12)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v2;
}

void sub_206F60A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF198;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF198;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, const void ***a3)
{
  const void **v4;
  char *v5;
  uint64_t **v6;
  size_t v7;
  void **v8;
  const void **v9;
  const void *v10;
  uint64_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inserted;
  ZinNEConvLayer **v29;
  int v30;
  ZinNEConvLayer *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  ZinNEConvLayer **v38;
  char *v39;
  char *v40;
  ZinNEConvLayer *v41;
  _QWORD *v42;
  __int128 *p_src;
  int v44;
  uint64_t **v45;
  _QWORD **v46;
  uint64_t v47;
  ZinIrTensor *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t **v70;
  ZinIrOpLayer *v71;
  _BOOL4 IsANELayer;
  ZinIrTensor *v73;
  uint64_t v75;
  int v76;
  ZinIrOpLayer *v77;
  _QWORD *v78;
  _BOOL4 v79;
  int v80;
  uint64_t v81;
  _QWORD v82[3];
  char v83;
  _OWORD v84[2];
  int v85;
  void *__p[2];
  char v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void *v97[4];
  int v98;
  char *v99;
  char *v100;
  char *v101;
  _BYTE buf[24];
  uint64_t v103;
  int v104;
  __int128 v105;
  char v106;
  __int128 __src;
  __int128 __src_16;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v5 = (char *)*a3 + 47;
  v6 = *a2;
  if (*v5 >= 0)
    v7 = *((unsigned __int8 *)*a3 + 47);
  else
    v7 = (size_t)(*a3)[4];
  v8 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 15);
  v9 = v4 + 3;
  if (v87 < 0)
    v8 = (void **)__p[0];
  if (v7)
  {
    if (*v5 >= 0)
      v10 = v4 + 3;
    else
      v10 = *v9;
    memmove(v8, v10, v7);
  }
  strcpy((char *)v8 + v7, "fc_optimization");
  ZinObjectNameFactory::ZinObjectNameFactory(v82, __p);
  if (v87 < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)v4[8] + 2) != 85)
  {
    inserted = 0;
    goto LABEL_100;
  }
  v11 = *(uint64_t **)(a1 + 8);
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v98 = 0;
  if (!v4[54])
    goto LABEL_94;
  buf[0] = 0;
  if (IsInefficientFullyConnectedLayer((ZinNEConvLayer *)v4, v11, (uint64_t)v82, &v98, buf))
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
LABEL_17:
      std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_18:
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v20, v21, v22, v23, v24, v25, v26, v27);
    inserted = 3;
    goto LABEL_95;
  }
  if (!buf[0])
  {
LABEL_94:
    inserted = 0;
    goto LABEL_95;
  }
  *(_QWORD *)&__src = v4;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v99, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
  v29 = *(ZinNEConvLayer ***)(*((_QWORD *)v100 - 1) + 112);
  if (*(_QWORD *)(*((_QWORD *)v100 - 1) + 120) - (_QWORD)v29 == 8)
  {
    v30 = v98;
    while (1)
    {
      v31 = *v29;
      if (*(_DWORD *)(*((_QWORD *)*v29 + 8) + 8) != 85)
        goto LABEL_46;
      LODWORD(__src) = 0;
      if (IsInefficientFullyConnectedLayer(v31, v11, (uint64_t)v82, (int *)&__src, buf))
        break;
      if (buf[0] && v30 == (_DWORD)__src)
      {
        v32 = v100;
        if (v100 >= v101)
        {
          v34 = (v100 - v99) >> 3;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v35 = (v101 - v99) >> 2;
          if (v35 <= v34 + 1)
            v35 = v34 + 1;
          if ((unint64_t)(v101 - v99) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v101, v36);
          else
            v37 = 0;
          v38 = (ZinNEConvLayer **)&v37[8 * v34];
          *v38 = v31;
          v33 = (char *)(v38 + 1);
          v40 = v99;
          v39 = v100;
          if (v100 != v99)
          {
            do
            {
              v41 = (ZinNEConvLayer *)*((_QWORD *)v39 - 1);
              v39 -= 8;
              *--v38 = v41;
            }
            while (v39 != v40);
            v39 = v99;
          }
          v99 = (char *)v38;
          v100 = v33;
          v101 = &v37[8 * v36];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v100 = v31;
          v33 = v32 + 8;
        }
        v100 = v33;
        v29 = *(ZinNEConvLayer ***)(*((_QWORD *)v33 - 1) + 112);
        if (*(_QWORD *)(*((_QWORD *)v33 - 1) + 120) - (_QWORD)v29 == 8)
          continue;
      }
      goto LABEL_46;
    }
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      goto LABEL_17;
    goto LABEL_18;
  }
LABEL_46:
  if (*(_DWORD *)(*(_QWORD *)(*v11 + 8) + 96) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v42 = (_QWORD *)(*(_QWORD *)v99 + 24);
    if (*(char *)(*(_QWORD *)v99 + 47) < 0)
      v42 = (_QWORD *)*v42;
    std::to_string((std::string *)&__src, (v100 - v99) >> 3);
    if ((SBYTE7(__src_16) & 0x80u) == 0)
      p_src = &__src;
    else
      p_src = (__int128 *)__src;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v42;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_src;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Batched FC layer chain is optimized: <Seed layer = %s, Chain length= %s> \n", buf, 0x16u);
    if (SBYTE7(__src_16) < 0)
      operator delete((void *)__src);
  }
  v44 = v98;
  v45 = *(uint64_t ***)v99;
  CreatePreTransposeMap(v98, &__src);
  inserted = InsertTransposes((uint64_t *)&__src, v6, v45, 1, (uint64_t)v82);
  *(_QWORD *)buf = &__src;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((_DWORD)inserted)
    goto LABEL_95;
  v46 = (_QWORD **)*((_QWORD *)v100 - 1);
  v47 = *v46[14];
  v48 = (ZinIrTensor *)((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*v46)[4])(v46, 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v48, (uint64_t)v97);
  v50 = v99;
  v49 = v100;
  if (v99 == v100)
    goto LABEL_89;
  v81 = v47;
  do
  {
    v51 = *(_QWORD *)v50;
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v50 + 32))(*(_QWORD *)v50, 0, 0);
    v53 = *(_QWORD *)(v52 + 80);
    v54 = *(_OWORD *)(v52 + 48);
    v55 = *(_OWORD *)(v52 + 64);
    __src = v54;
    __src_16 = v55;
    v109 = v53;
    switch(v98)
    {
      case 3:
        *(_QWORD *)&__src_16 = 1;
        v53 = v55;
        goto LABEL_64;
      case 1:
        v109 = 1;
        goto LABEL_64;
      case 0:
        *(_QWORD *)&__src = 1;
        v53 = v54;
LABEL_64:
        *((_QWORD *)&__src_16 + 1) = v53;
        break;
    }
    v56 = *(_QWORD *)(v52 + 16);
    v57 = *(_DWORD *)(v52 + 88);
    (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD))(v82[0] + 16))(&v105, v82, 0);
    v93 = 0;
    v94 = 0;
    v92 = 0;
    *(_DWORD *)buf = 0;
    *(_QWORD *)&buf[16] = 0;
    v103 = 0;
    *(_QWORD *)&buf[8] = 0;
    v104 = 0;
    ZinIrTensor::CreateTensor(v56, v57, &__src, &v105, &v94, &v92, (unsigned int *)buf, &v95);
    v58 = v93;
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v94;
    v94 = 0;
    if (v61)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v94, v61);
    if (v106 < 0)
      operator delete((void *)v105);
    v90 = v95;
    v91 = v96;
    if (v96)
    {
      v62 = (unint64_t *)&v96->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v51 + 24))(v51, &v90);
    v64 = v91;
    if (v91)
    {
      v65 = (unint64_t *)&v91->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v96;
    if (v96)
    {
      v68 = (unint64_t *)&v96->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v50 += 8;
  }
  while (v50 != v49);
  v44 = v98;
  v50 = v100;
  v47 = v81;
LABEL_89:
  v70 = (uint64_t **)*((_QWORD *)v50 - 1);
  CreatePostTransposeMap(v44, &__src);
  inserted = InsertTransposes((uint64_t *)&__src, v6, v70, 0, (uint64_t)v82);
  *(_QWORD *)buf = &__src;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!(_DWORD)inserted)
  {
    v71 = **(ZinIrOpLayer ***)(v47 + 88);
    IsANELayer = ZinIrOpLayer::IsANELayer(v71);
    if (!DimensionOrderHint::IsSet((DimensionOrderHint *)v97))
      goto LABEL_110;
    if (IsANELayer)
    {
      v73 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0, 0);
      if (ZinMirTensorTransform::FixDimensionOrder(v73, v6, (DimensionOrderHint *)v97, 0))
        goto LABEL_93;
LABEL_110:
      inserted = 0;
    }
    else
    {
      v75 = *((_QWORD *)v71 + 2);
      v76 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0, 0)+ 88);
      v89 = 0;
      LOBYTE(__p[0]) = 0;
      v88 = 0;
      v77 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v75, (uint64_t)v82, (uint64_t)v71, v76, &v89, 0, (uint64_t)__p, 1.0);
      v78 = v89;
      v89 = 0;
      if (v78)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v89, v78);
      *(_QWORD *)&v105 = *((_QWORD *)v100 - 1);
      *(_QWORD *)buf = &v105;
      *(_QWORD *)&buf[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__src, buf);
      v79 = ZinIrOpLayerGraph::AddNode(v6, v77, (ZinIrOpLayer ***)&__src);
      *(_QWORD *)&__src = &unk_24C02BB18;
      if (*((_QWORD *)&__src + 1))
      {
        *(_QWORD *)&__src_16 = *((_QWORD *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
      memset(v84, 0, sizeof(v84));
      v85 = 1065353216;
      v80 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v6, (uint64_t **)v71, v77, v84);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v84);
      if ((v79 & v80 & ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)v71, (uint64_t)v77, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) != 0)goto LABEL_110;
LABEL_93:
      inserted = 3;
    }
  }
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
LABEL_95:
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if ((_DWORD)inserted && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v5, v9);
LABEL_100:
  v82[0] = off_24C01FBB0;
  if (v83 < 0)
    operator delete((void *)v82[1]);
  return inserted;
}

void sub_206F61314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60)
{
  uint64_t v60;
  void *v62;

  if (__p)
    operator delete(__p);
  v62 = *(void **)(v60 - 232);
  if (v62)
  {
    *(_QWORD *)(v60 - 224) = v62;
    operator delete(v62);
  }
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t IsInefficientFullyConnectedLayer(ZinNEConvLayer *a1, uint64_t *a2, uint64_t a3, int *a4, BOOL *a5)
{
  double v5;
  BOOL *v6;
  uint64_t i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint16x4_t v29;
  int v30;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v39;
  BOOL v40;
  _BOOL4 v41;
  _BOOL4 v42;
  int v43;
  int v44;
  uint64_t v45;
  ZinNEConvLayer *v46;
  uint64_t KernelDescriptor;
  uint64_t *v48;
  char *v49;
  BOOL v50;
  uint64_t result;
  uint64_t InputTensor;
  uint64_t v53;
  ZinIrHalParameters *v54;
  _QWORD *v55;
  int v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  int64x2_t v64;
  std::string::size_type v65;
  std::string::size_type v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::string::size_type v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type v83;
  uint64_t *v84;
  BOOL *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  size_t v89;
  std::string *v90;
  const void *v91;
  std::string *v92;
  __int128 v93;
  void **v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  ZinIrHalParameters *v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t *v107;
  unint64_t v108;
  ZinANELayer *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string::size_type v119;
  std::string::size_type v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  std::string::size_type v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::string::size_type v132;
  ZinANELayer *v133;
  uint64_t *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  size_t v138;
  std::string *v139;
  const void *v140;
  std::string *v141;
  __int128 v142;
  void **v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  BOOL v172;
  uint64_t v173;
  ZinANELayer *v174;
  int v175;
  __int128 v176;
  BOOL v177;
  _QWORD v179[3];
  int32x4_t v180;
  int v181;
  int v182;
  void *v183[2];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  std::string v208;
  void *v209[2];
  int64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  _QWORD *v215;
  std::string v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE v225[32];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  _QWORD *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  __int128 v254;
  int64x2_t v255;
  uint64_t v256;
  __int128 v257[2];
  uint64_t v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  _QWORD *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int64x2_t v269;
  int64x2_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  uint64_t v274;
  int64x2_t v275;
  int64x2_t v276;
  uint64_t v277;
  __int128 v278;
  int64x2_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  int64x2_t v284;
  uint64_t v285;
  void *v286[2];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  void *__p;
  void *v300;
  _QWORD *v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  void *__src[2];
  std::string::size_type v311;
  uint64_t v312;
  int v313;
  std::string v314;
  int64x2_t v315;
  uint64_t v316;
  char v317;
  int v318;
  char v319;
  __int16 v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  char v328;
  char v329;
  char v330;
  char v331;
  char v332;
  char v333;
  char v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  char v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  char v349;
  __int16 v350;
  __int128 v351;
  uint64_t v352;
  __int16 v353;
  char v354;
  char v355;
  __int16 v356;
  char v357;
  char v358;
  __int16 v359;
  char v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  char v371;
  char v372;
  char v373;
  __int16 v374;
  char v375;
  char v376;
  int v377;

  v6 = a5;
  for (i = *((_QWORD *)a1 + 14); i != *((_QWORD *)a1 + 15); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 33)
    {
      result = 0;
      *a5 = 0;
      return result;
    }
  }
  (*(void (**)(_QWORD *__return_ptr, ZinNEConvLayer *))(*(_QWORD *)a1 + 136))(v179, a1);
  v11 = *(_QWORD *)(*(_QWORD *)*a2 + 352);
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
  v13 = v12[6];
  v14 = v12[7];
  v15 = v12[8];
  v16 = v12[9];
  v17 = v12[10];
  v18 = (_QWORD *)(*(uint64_t (**)(ZinNEConvLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v19 = v18[7];
  v22 = v14 >= 2 && v19 >= 2 && v14 <= v11 && v19 <= v11 && v16 == 1 && v18[9] == 1;
  v25 = v18[6];
  v26 = v18[8];
  v27 = v18[10];
  v28.i64[0] = 0x100000001;
  v28.i64[1] = 0x100000001;
  v29 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v180, v28)));
  v29.i16[0] = vmaxv_u16(v29);
  v30 = (v181 == 1) & ~v29.i32[0];
  if (v179[0] != 1)
    v30 = 0;
  if (v179[1] != 1)
    v30 = 0;
  v177 = v30 == 1 && v179[2] == 1 && v182 == 1;
  v33 = v13 > 1 && v13 == v25;
  v34 = v17 == 1;
  if (v17 != 1)
    v33 = 0;
  if (v27 != 1)
    v33 = 0;
  if (v15 != 1)
    v33 = 0;
  if (v26 != 1)
    v33 = 0;
  if (v33)
  {
    v35 = 0;
    v34 = 0;
    *a4 = 0;
  }
  else
  {
    v39 = v17 > 1 && v17 == v27 && v15 == 1 && v26 == 1;
    v40 = v13 == 1 && v25 == 1;
    v35 = v40 && v39;
    if (!v40)
      v34 = 0;
  }
  v41 = v27 == 1 && v34;
  v42 = v15 == v26 && v41;
  if (v15 <= 1)
    v42 = 0;
  if (v35 || v42)
  {
    if (v42)
      v43 = 3;
    else
      v43 = 1;
    *a4 = v43;
  }
  if (!v35 && !v33 && !v42)
  {
    v50 = 0;
LABEL_300:
    result = 0;
    *v6 = v50;
    return result;
  }
  v44 = *a4;
  v45 = *a2;
  v314.__r_.__value_.__s.__data_[8] = 0;
  v325 = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v329 = 0;
  v330 = 0;
  v331 = 0;
  v332 = 0;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  v336 = 0;
  v337 = 0;
  v338 = 0;
  v339 = 0;
  v340 = 0;
  v341 = 0;
  v342 = 0;
  v343 = 0;
  v344 = 0;
  v345 = 0;
  LOBYTE(v346) = 0;
  v347 = 0;
  LOBYTE(v348) = 0;
  v349 = 0;
  v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C01F198;
  v350 = 0;
  v354 = 0;
  v355 = 0;
  v356 = 256;
  v351 = 0u;
  v352 = 0;
  v353 = 0;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v362 = 0;
  v363 = 0;
  v364 = 0;
  v365 = 0;
  v366 = 0;
  v367 = 0;
  v368 = 0;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v374 = 0;
  v375 = 0;
  v376 = 0;
  v377 = 0;
  v46 = (ZinNEConvLayer *)*((_QWORD *)a1 + 54);
  if (!v46)
    v46 = a1;
  if (*((_QWORD *)v46 + 17) && *(_QWORD *)(ZinNEConvLayer::GetKernelDescriptor(a1) + 224) >= 2uLL)
  {
    KernelDescriptor = ZinNEConvLayer::GetKernelDescriptor(a1);
    v48 = &v346;
    v348 = *(_QWORD *)(KernelDescriptor + 224);
    v349 = 1;
    if (v347)
      goto LABEL_97;
    v49 = &v347;
    goto LABEL_96;
  }
  InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
  v48 = &v348;
  v53 = *(_QWORD *)(InputTensor + 48);
  if (!v347)
    v347 = 1;
  v346 = v53;
  if (!v349)
  {
    v49 = &v349;
LABEL_96:
    *v49 = 1;
  }
LABEL_97:
  *v48 = 1;
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)v45, *(double *)(*(_QWORD *)(v45 + 8) + 104), *(_DWORD *)(*(_QWORD *)(v45 + 8) + 112), *(_DWORD *)(*(_QWORD *)(v45 + 8) + 116), (uint64_t)v225);
  v54 = *(ZinIrHalParameters **)v45;
  LOWORD(v286[0]) = 257;
  BYTE2(v286[0]) = 1;
  *(_DWORD *)((char *)v286 + 3) = 0;
  *(_DWORD *)((char *)v286 + 6) = 0;
  BYTE2(v286[1]) = 1;
  *(_DWORD *)((char *)&v286[1] + 3) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)__src, (uint64_t)v54, (__int128 *)v225, (uint64_t *)v286);
  v298 = 0;
  v297 = 0u;
  v296 = 0u;
  v295 = 0u;
  v294 = 0u;
  v293 = 0u;
  v292 = 0u;
  v291 = 0u;
  v290 = 0u;
  v289 = 0u;
  v288 = 0u;
  v287 = 0u;
  *(_OWORD *)v286 = 0u;
  v55 = operator new(8uLL);
  __p = v55;
  *v55 = 0;
  v301 = v55 + 1;
  v300 = v55 + 1;
  v302 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v303 = _Q0;
  v304 = _Q0;
  v305 = _Q0;
  v176 = _Q0;
  v306 = _Q0;
  v307 = 0;
  v308 = 0;
  v309 = 0;
  v60 = ZinANELayer::CalculatePerf(a1, (ZinIrPerf *)__src, (const ZinCustomPerfInfo *)&v314, (ZinPerfDescriptor *)v286);
  if (v60)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      IsInefficientFullyConnectedLayer();
    if (__p)
    {
      v300 = __p;
      operator delete(__p);
    }
    v61 = 3;
  }
  else
  {
    v61 = 0;
    v5 = *((double *)&v288 + 1);
    v171 = __p;
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__src);
  v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C01F198;
  if ((_QWORD)v351)
  {
    *((_QWORD *)&v351 + 1) = v351;
    operator delete((void *)v351);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v314);
  if (v60)
  {
    v62 = 0;
  }
  else
  {
    v63 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
    v64 = *(int64x2_t *)(v63 + 64);
    v283 = *(_OWORD *)(v63 + 48);
    v284 = v64;
    v285 = *(_QWORD *)(v63 + 80);
    v169 = *(_QWORD *)((*(uint64_t (**)(ZinNEConvLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0)+ 56);
    v170 = v45;
    v172 = v22;
    v175 = *(_DWORD *)((*(uint64_t (**)(ZinNEConvLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0)+ 88);
    v173 = *((_QWORD *)a1 + 2);
    v168 = v44;
    CreatePreTransposeMap(v44, &v281);
    v278 = v283;
    v279 = v284;
    v280 = v285;
    v65 = 1;
    v275 = vdupq_n_s64(1uLL);
    v276 = v275;
    v277 = 1;
    v273 = 0;
    v272 = 0;
    v274 = 0;
    v66 = 1;
    v67 = v281;
    v68 = v282;
    v69 = 1;
    v70 = 1;
    v71 = 1;
    if (v281 != v282)
    {
      v71 = 1;
      v70 = 1;
      v69 = 1;
      v66 = 1;
      v65 = 1;
      do
      {
        __src[1] = 0;
        __src[0] = 0;
        v311 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(__src, *(const void **)v67, *(_QWORD *)(v67 + 8), (uint64_t)(*(_QWORD *)(v67 + 8) - *(_QWORD *)v67) >> 3);
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v278, (uint64_t)__src, &v275);
        if (ZinIrTransposeUnit::IsCWTranspose((int **)__src))
        {
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v272, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 3);
          v66 = *((_QWORD *)&v278 + 1);
          v65 = v278;
          v70 = v279.i64[1];
          v69 = v279.i64[0];
          v71 = v280;
        }
        v278 = (__int128)v275;
        v279 = v276;
        v280 = v277;
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
        v67 += 24;
      }
      while (v67 != v68);
    }
    v269 = v275;
    v270 = v276;
    v271 = v277;
    *(_QWORD *)&v265 = v65;
    *((_QWORD *)&v265 + 1) = v66;
    v266 = v69;
    v267 = v70;
    v268 = v71;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v314, a3, 1);
    v262 = 0;
    v286[1] = 0;
    v286[0] = 0;
    LODWORD(__src[0]) = 0;
    v312 = 0;
    __src[1] = 0;
    v311 = 0;
    v313 = 0;
    ZinIrTensor::CreateTensor(v173, v175, &v265, (__int128 *)&v314, &v262, (uint64_t *)v286, (unsigned int *)__src, &v263);
    v72 = (std::__shared_weak_count *)v286[1];
    if (v286[1])
    {
      v73 = (unint64_t *)((char *)v286[1] + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v262;
    v262 = 0;
    if (v75)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v262, v75);
    if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v314.__r_.__value_.__l.__data_);
    v76 = operator new();
    v77 = operator new();
    ZinIrTransposeInfo::ZinIrTransposeInfo(v77, (uint64_t)&v272);
    v314.__r_.__value_.__r.__words[0] = v77;
    v260 = v263;
    v261 = v264;
    if (v264)
    {
      p_shared_owners = (unint64_t *)&v264->__shared_owners_;
      do
        v79 = __ldxr(p_shared_owners);
      while (__stxr(v79 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(__src, a3, 1);
    ZinTransposeLayer::ZinTransposeLayer(v76, &v314, &v260, __src);
    if (SHIBYTE(v311) < 0)
      operator delete(__src[0]);
    v80 = v261;
    if (v261)
    {
      v81 = (unint64_t *)&v261->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v314.__r_.__value_.__r.__words[0];
    v314.__r_.__value_.__r.__words[0] = 0;
    if (v83)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v83 + 8))(v83);
    v174 = (ZinANELayer *)operator new();
    v84 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v76 + 40))(v76, 0, 0);
    v85 = v6;
    v86 = (std::__shared_weak_count *)v84[1];
    v258 = *v84;
    v259 = v86;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    if (*(char *)(v76 + 47) >= 0)
      v89 = *(unsigned __int8 *)(v76 + 47);
    else
      v89 = *(_QWORD *)(v76 + 32);
    v90 = &v314;
    std::string::basic_string[abi:ne180100]((uint64_t)&v314, v89 + 1);
    if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v90 = (std::string *)v314.__r_.__value_.__r.__words[0];
    if (v89)
    {
      if (*(char *)(v76 + 47) >= 0)
        v91 = (const void *)(v76 + 24);
      else
        v91 = *(const void **)(v76 + 24);
      memmove(v90, v91, v89);
    }
    *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v89) = 95;
    std::string::basic_string[abi:ne180100]<0>(v225, "bypass_precw");
    v92 = std::string::append((std::string *)v225, "_xfm", 4uLL);
    v6 = v85;
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    *(_QWORD *)&v287 = *((_QWORD *)&v92->__r_.__value_.__l + 2);
    *(_OWORD *)v286 = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v287) & 0x80u) == 0)
      v94 = v286;
    else
      v94 = (void **)v286[0];
    if ((SBYTE7(v287) & 0x80u) == 0)
      v95 = BYTE7(v287);
    else
      v95 = (std::string::size_type)v286[1];
    v96 = std::string::append(&v314, (const std::string::value_type *)v94, v95);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v311 = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)__src = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    ZinNEBypassLayer::ZinNEBypassLayer(v174, &v258, __src, 0, v76);
    if (SHIBYTE(v311) < 0)
      operator delete(__src[0]);
    if (SBYTE7(v287) < 0)
      operator delete(v286[0]);
    if ((v225[23] & 0x80000000) != 0)
      operator delete(*(void **)v225);
    if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v314.__r_.__value_.__l.__data_);
    v98 = v259;
    if (v259)
    {
      v99 = (unint64_t *)&v259->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)v170, *(double *)(*(_QWORD *)(v170 + 8) + 104), *(_DWORD *)(*(_QWORD *)(v170 + 8) + 112), *(_DWORD *)(*(_QWORD *)(v170 + 8) + 116), (uint64_t)v257);
    v101 = *(ZinIrHalParameters **)v170;
    LOWORD(v314.__r_.__value_.__l.__data_) = 257;
    v314.__r_.__value_.__s.__data_[2] = 1;
    *(_DWORD *)((char *)v314.__r_.__value_.__r.__words + 3) = 0;
    *(_DWORD *)((char *)v314.__r_.__value_.__r.__words + 6) = 0;
    v314.__r_.__value_.__s.__data_[10] = 1;
    *(_DWORD *)((char *)&v314.__r_.__value_.__r.__words[1] + 3) = 0;
    ZinIrPerf::ZinIrPerf((uint64_t)__src, (uint64_t)v101, v257, (uint64_t *)&v314);
    v298 = 0;
    v297 = 0u;
    v296 = 0u;
    v295 = 0u;
    v294 = 0u;
    v293 = 0u;
    v292 = 0u;
    v291 = 0u;
    v290 = 0u;
    v289 = 0u;
    v288 = 0u;
    v287 = 0u;
    *(_OWORD *)v286 = 0u;
    v102 = operator new(8uLL);
    __p = v102;
    *v102 = 0;
    v301 = v102 + 1;
    v300 = v102 + 1;
    v302 = 0u;
    v303 = v176;
    v304 = v176;
    v305 = v176;
    v306 = v176;
    v307 = 0;
    v308 = 0;
    v309 = 0;
    v326 = 0;
    v327 = 0;
    v328 = 0;
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v332 = 0;
    v333 = 0;
    v334 = 0;
    v335 = 0;
    v336 = 0;
    v337 = 0;
    v338 = 0;
    v339 = 0;
    v340 = 0;
    v341 = 0;
    v342 = 0;
    v343 = 0;
    v344 = 0;
    v345 = 0;
    LOBYTE(v346) = 0;
    v347 = 0;
    LOBYTE(v348) = 0;
    v349 = 0;
    v350 = 0;
    v354 = 0;
    v355 = 0;
    v351 = 0u;
    v356 = 256;
    v352 = 0;
    v353 = 0;
    v357 = 0;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0;
    v363 = 0;
    v364 = 0;
    v365 = 0;
    v366 = 0;
    v367 = 0;
    v368 = 0;
    v369 = 0;
    v370 = 0;
    v371 = 0;
    v372 = 0;
    v373 = 0;
    v374 = 0;
    v375 = 0;
    v376 = 0;
    v377 = 0;
    v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C01F198;
    v314.__r_.__value_.__l.__size_ = v65;
    v314.__r_.__value_.__r.__words[2] = v66;
    v315.i64[0] = v69;
    v315.i64[1] = v70;
    v316 = v71;
    v317 = 1;
    v318 = v175;
    v319 = 1;
    v320 = 256;
    v321 = 0;
    v322 = 0;
    v325 = 1;
    v323 = 0;
    v324 = 0;
    v22 = v172;
    if (ZinANELayer::CalculatePerf(v174, (ZinIrPerf *)__src, (const ZinCustomPerfInfo *)&v314, (ZinPerfDescriptor *)v286))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        IsInefficientFullyConnectedLayer();
      v62 = 0;
      v61 = 3;
    }
    else
    {
      *(_QWORD *)&v254 = v269.i64[0];
      v255 = v270;
      v256 = v271;
      *((_QWORD *)&v254 + 1) = v169;
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(v183, a3, 0);
      v251 = 0;
      v219 = 0uLL;
      *(_DWORD *)v225 = 0;
      memset(&v225[8], 0, 24);
      LODWORD(v226) = 0;
      ZinIrTensor::CreateTensor(v173, v175, &v254, (__int128 *)v183, &v251, (uint64_t *)&v219, (unsigned int *)v225, &v252);
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
      if (*((_QWORD *)&v219 + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = v251;
      v251 = 0;
      if (v106)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v251, v106);
      if (SBYTE7(v184) < 0)
        operator delete(v183[0]);
      v249 = v252;
      v250 = v253;
      if (v253)
      {
        v107 = (unint64_t *)&v253->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v225, a3, 1);
      v109 = (ZinANELayer *)(*(uint64_t (**)(ZinNEConvLayer *, uint64_t *, _BYTE *))(*(_QWORD *)a1 + 176))(a1, &v249, v225);
      if ((v225[23] & 0x80000000) != 0)
        operator delete(*(void **)v225);
      v110 = v250;
      if (v250)
      {
        v111 = (unint64_t *)&v250->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v236 = 0;
      v234 = 0u;
      v235 = 0u;
      v232 = 0u;
      v233 = 0u;
      v230 = 0u;
      v231 = 0u;
      v228 = 0u;
      v229 = 0u;
      v226 = 0u;
      v227 = 0u;
      memset(v225, 0, sizeof(v225));
      v113 = operator new(8uLL);
      v237 = v113;
      *v113 = 0;
      v239 = v113 + 1;
      v238 = v113 + 1;
      v241 = 0;
      v240 = 0;
      v242 = v176;
      v243 = v176;
      v244 = v176;
      v245 = v176;
      v246 = 0;
      v247 = 0;
      v248 = 0;
      *(int64x2_t *)&v314.__r_.__value_.__r.__words[1] = v269;
      v315 = v270;
      v316 = v271;
      v317 = 1;
      v318 = v175;
      v319 = 1;
      v320 = 256;
      v321 = 0;
      if (!v325)
        v325 = 1;
      v322 = 0;
      v323 = 0;
      v324 = 0;
      if (ZinANELayer::CalculatePerf(v109, (ZinIrPerf *)__src, (const ZinCustomPerfInfo *)&v314, (ZinPerfDescriptor *)v225))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          IsInefficientFullyConnectedLayer();
        v62 = 0;
        v61 = 3;
      }
      else
      {
        CreatePostTransposeMap(v168, &v223);
        v278 = v254;
        v279 = v255;
        v280 = v256;
        v114 = v223;
        v115 = v224;
        if (v223 == v224)
        {
          v120 = 1;
          v119 = 1;
          v118 = 1;
          v117 = 1;
          v116 = 1;
        }
        else
        {
          v116 = 1;
          v117 = 1;
          v118 = 1;
          v119 = 1;
          v120 = 1;
          do
          {
            v183[0] = 0;
            v183[1] = 0;
            *(_QWORD *)&v184 = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v183, *(const void **)v114, *(_QWORD *)(v114 + 8), (uint64_t)(*(_QWORD *)(v114 + 8) - *(_QWORD *)v114) >> 3);
            ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v278, (uint64_t)v183, &v275);
            if (ZinIrTransposeUnit::IsCWTranspose((int **)v183))
            {
              v119 = *((_QWORD *)&v278 + 1);
              v120 = v278;
              v117 = v279.i64[1];
              v118 = v279.i64[0];
              v116 = v280;
            }
            v278 = (__int128)v275;
            v279 = v276;
            v280 = v277;
            if (v183[0])
            {
              v183[1] = v183[0];
              operator delete(v183[0]);
            }
            v114 += 24;
          }
          while (v114 != v115);
        }
        *(_QWORD *)&v219 = v120;
        *((_QWORD *)&v219 + 1) = v119;
        v220 = v118;
        v221 = v117;
        v222 = v116;
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v216, a3, 1);
        v215 = 0;
        v209[1] = 0;
        v209[0] = 0;
        LODWORD(v183[0]) = 0;
        v184 = 0uLL;
        v183[1] = 0;
        LODWORD(v185) = 0;
        ZinIrTensor::CreateTensor(v173, v175, &v219, (__int128 *)&v216, &v215, (uint64_t *)v209, (unsigned int *)v183, &v217);
        v121 = (std::__shared_weak_count *)v209[1];
        if (v209[1])
        {
          v122 = (unint64_t *)((char *)v209[1] + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = v215;
        v215 = 0;
        if (v124)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v215, v124);
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v216.__r_.__value_.__l.__data_);
        v125 = operator new();
        v126 = operator new();
        ZinIrTransposeInfo::ZinIrTransposeInfo(v126, (uint64_t)&v272);
        v216.__r_.__value_.__r.__words[0] = v126;
        v213 = v217;
        v214 = v218;
        if (v218)
        {
          v127 = (unint64_t *)&v218->__shared_owners_;
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v183, a3, 1);
        ZinTransposeLayer::ZinTransposeLayer(v125, &v216, &v213, v183);
        if (SBYTE7(v184) < 0)
          operator delete(v183[0]);
        v129 = v214;
        if (v214)
        {
          v130 = (unint64_t *)&v214->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v132 = v216.__r_.__value_.__r.__words[0];
        v216.__r_.__value_.__r.__words[0] = 0;
        if (v132)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v132 + 8))(v132);
        v133 = (ZinANELayer *)operator new();
        v134 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v125 + 40))(v125, 0, 0);
        v135 = (std::__shared_weak_count *)v134[1];
        v211 = *v134;
        v212 = v135;
        if (v135)
        {
          v136 = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldxr(v136);
          while (__stxr(v137 + 1, v136));
        }
        if (*(char *)(v125 + 47) >= 0)
          v138 = *(unsigned __int8 *)(v125 + 47);
        else
          v138 = *(_QWORD *)(v125 + 32);
        v139 = &v216;
        std::string::basic_string[abi:ne180100]((uint64_t)&v216, v138 + 1);
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v139 = (std::string *)v216.__r_.__value_.__r.__words[0];
        if (v138)
        {
          if (*(char *)(v125 + 47) >= 0)
            v140 = (const void *)(v125 + 24);
          else
            v140 = *(const void **)(v125 + 24);
          memmove(v139, v140, v138);
        }
        *(_WORD *)((char *)&v139->__r_.__value_.__l.__data_ + v138) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v208, "bypass_postcw");
        v141 = std::string::append(&v208, "_xfm", 4uLL);
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v210 = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)v209 = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        if (v210 >= 0)
          v143 = v209;
        else
          v143 = (void **)v209[0];
        if (v210 >= 0)
          v144 = HIBYTE(v210);
        else
          v144 = (std::string::size_type)v209[1];
        v145 = std::string::append(&v216, (const std::string::value_type *)v143, v144);
        v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        *(_QWORD *)&v184 = *((_QWORD *)&v145->__r_.__value_.__l + 2);
        *(_OWORD *)v183 = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        ZinNEBypassLayer::ZinNEBypassLayer(v133, &v211, v183, 0, v125);
        if (SBYTE7(v184) < 0)
          operator delete(v183[0]);
        if (SHIBYTE(v210) < 0)
          operator delete(v209[0]);
        if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v208.__r_.__value_.__l.__data_);
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v216.__r_.__value_.__l.__data_);
        v147 = v212;
        if (v212)
        {
          v148 = (unint64_t *)&v212->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v195 = 0;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v185 = 0u;
        v186 = 0u;
        *(_OWORD *)v183 = 0u;
        v184 = 0u;
        v150 = operator new(8uLL);
        v196 = v150;
        *v150 = 0;
        v197 = v150 + 1;
        v198 = v150 + 1;
        v199 = 0;
        v200 = 0;
        v201 = v176;
        v202 = v176;
        v203 = v176;
        v204 = v176;
        v205 = 0;
        v206 = 0;
        v207 = 0;
        v314.__r_.__value_.__l.__size_ = v120;
        v314.__r_.__value_.__r.__words[2] = v119;
        v315.i64[0] = v118;
        v315.i64[1] = v117;
        v316 = v116;
        v317 = 1;
        v318 = v175;
        v319 = 1;
        v320 = 256;
        v321 = 0;
        v322 = 0;
        if (!v325)
          v325 = 1;
        v323 = 0;
        v324 = 0;
        v22 = v172;
        if (ZinANELayer::CalculatePerf(v133, (ZinIrPerf *)__src, (const ZinCustomPerfInfo *)&v314, (ZinPerfDescriptor *)v183))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            IsInefficientFullyConnectedLayer();
          v62 = 0;
          v61 = 3;
        }
        else
        {
          v61 = 0;
          v62 = v5 > *((double *)&v288 + 1) + *((double *)&v226 + 1) + *((double *)&v185 + 1);
        }
        if (v196)
        {
          v197 = v196;
          operator delete(v196);
        }
        v151 = v218;
        if (v218)
        {
          v152 = (unint64_t *)&v218->__shared_owners_;
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 - 1, v152));
          if (!v153)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        v183[0] = &v223;
        std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v183);
      }
      if (v237)
      {
        v238 = v237;
        operator delete(v237);
      }
      v154 = v253;
      if (v253)
      {
        v155 = (unint64_t *)&v253->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
    }
    v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C01F198;
    if ((_QWORD)v351)
    {
      *((_QWORD *)&v351 + 1) = v351;
      operator delete((void *)v351);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v314);
    if (__p)
    {
      v300 = __p;
      operator delete(__p);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__src);
    v157 = v264;
    if (v264)
    {
      v158 = (unint64_t *)&v264->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    if (v272)
    {
      v273 = v272;
      operator delete(v272);
    }
    __src[0] = &v281;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (v171)
      operator delete(v171);
  }
  if (!v61)
  {
    v50 = v22 && v177;
    if (!v62)
      v50 = 0;
    goto LABEL_300;
  }
  v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v160)
    IsInefficientFullyConnectedLayer(v160, v161, v162, v163, v164, v165, v166, v167);
  return 3;
}

void sub_206F62AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,void *a59)
{
  void *v60;
  void *v61;
  void *v62;

  if (__p)
  {
    a59 = __p;
    operator delete(__p);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  a33 = &STACK[0x2B8];
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  v60 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v60;
    operator delete(v60);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0xA88]);
  v61 = (void *)STACK[0x698];
  if (STACK[0x698])
  {
    STACK[0x6A0] = (unint64_t)v61;
    operator delete(v61);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x720]);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4B8]);
  v62 = (void *)STACK[0x518];
  if (STACK[0x518])
  {
    STACK[0x520] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x720] = (unint64_t)&STACK[0x588];
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x720]);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void CreatePreTransposeMap(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[12];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x10uLL);
  *(_DWORD *)v4 = a1;
  *(_QWORD *)(v4 + 4) = 0x300000003;
  *((_DWORD *)v4 + 3) = a1;
  v11[0] = v4;
  v11[1] = v4 + 16;
  v11[2] = v4 + 16;
  v5 = operator new(0x10uLL);
  v11[3] = v5;
  *v5 = xmmword_207A7E760;
  v11[4] = v5 + 1;
  v11[5] = v5 + 1;
  v6 = operator new(0x10uLL);
  v11[6] = v6;
  *v6 = xmmword_207A8A860;
  v11[7] = v6 + 1;
  v11[8] = v6 + 1;
  v7 = operator new(0x10uLL);
  v11[9] = v7;
  *v7 = xmmword_207A7E760;
  v11[10] = v7 + 1;
  v11[11] = v7 + 1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v8 = operator new(0x60uLL);
  *a2 = v8;
  a2[1] = v8;
  a2[2] = v8 + 12;
  v9 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DimensionMapping>>,std::vector<DimensionMapping> const*,std::vector<DimensionMapping> const*,std::vector<DimensionMapping>*>((uint64_t)(a2 + 2), (uint64_t)v11, (uint64_t)&v12, v8);
  do
  {
    v10 = (void *)v11[v9 + 9];
    if (v10)
    {
      v11[v9 + 10] = v10;
      operator delete(v10);
    }
    v9 -= 3;
  }
  while (v9 != -12);
}

void sub_206F630A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v18 = 0;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 + 72);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 + 80) = v19;
      operator delete(v19);
    }
    v18 -= 24;
    if (v18 == -96)
      _Unwind_Resume(a1);
  }
}

void CreatePostTransposeMap(int a1@<W0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[12];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x10uLL);
  v11[0] = v4;
  *v4 = xmmword_207A7E760;
  v11[1] = v4 + 1;
  v11[2] = v4 + 1;
  v5 = operator new(0x10uLL);
  v11[3] = v5;
  *v5 = xmmword_207A8A860;
  v11[4] = v5 + 1;
  v11[5] = v5 + 1;
  v6 = operator new(0x10uLL);
  v11[6] = v6;
  *v6 = xmmword_207A7E760;
  v11[7] = v6 + 1;
  v11[8] = v6 + 1;
  v7 = (char *)operator new(0x10uLL);
  v11[10] = v7 + 16;
  v11[11] = v7 + 16;
  *(_DWORD *)v7 = a1;
  *(_QWORD *)(v7 + 4) = 0x300000003;
  *((_DWORD *)v7 + 3) = a1;
  v11[9] = v7;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v8 = operator new(0x60uLL);
  *a2 = v8;
  a2[1] = v8;
  a2[2] = v8 + 12;
  v9 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DimensionMapping>>,std::vector<DimensionMapping> const*,std::vector<DimensionMapping> const*,std::vector<DimensionMapping>*>((uint64_t)(a2 + 2), (uint64_t)v11, (uint64_t)&v12, v8);
  do
  {
    v10 = (void *)v11[v9 + 9];
    if (v10)
    {
      v11[v9 + 10] = v10;
      operator delete(v10);
    }
    v9 -= 3;
  }
  while (v9 != -12);
}

void sub_206F6328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v18 = 0;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 + 72);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 + 80) = v19;
      operator delete(v19);
    }
    v18 -= 24;
    if (v18 == -96)
      _Unwind_Resume(a1);
  }
}

uint64_t InsertTransposes(uint64_t *a1, uint64_t **a2, uint64_t **a3, int a4, uint64_t a5)
{
  uint64_t **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  ZinIrOpLayer *Transpose;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  ZinIrOpLayer **v23;
  char *v24;
  char *v25;
  ZinIrOpLayer *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  ZinIrOpLayer *v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ZinIrOpLayerGraph *v45;
  _QWORD v46[5];
  _QWORD *v47;
  void *v48;
  char *v49;
  char *v50;
  void *__p;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  if (a4)
    v9 = (uint64_t **)*a3[11];
  v45 = (ZinIrOpLayerGraph *)v9;
  v10 = *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v9)[4])(v9, 0, 0) + 88);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v12 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    Transpose = v45;
    do
    {
      v14 = (uint64_t)Transpose;
      v15 = *((_QWORD *)Transpose + 2);
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0);
      Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v15, a5, v16 + 48, v10, v12);
      v53 = a3;
      __p = &v53;
      v52 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v54, &__p);
      ZinIrOpLayerGraph::AddNode(a2, Transpose, (ZinIrOpLayer ***)&v54);
      *(_QWORD *)&v54 = &unk_24C02BB18;
      if (*((_QWORD *)&v54 + 1))
      {
        *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
        operator delete(*((void **)&v54 + 1));
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v14, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v17 = v49;
      if (v49 >= v50)
      {
        v19 = (v49 - (_BYTE *)v48) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v20 = (v50 - (_BYTE *)v48) >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)(v50 - (_BYTE *)v48) >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v50, v21);
        else
          v22 = 0;
        v23 = (ZinIrOpLayer **)&v22[8 * v19];
        *v23 = Transpose;
        v18 = (char *)(v23 + 1);
        v25 = (char *)v48;
        v24 = v49;
        if (v49 != v48)
        {
          do
          {
            v26 = (ZinIrOpLayer *)*((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = (char *)v48;
        }
        v48 = v23;
        v49 = v18;
        v50 = &v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v49 = Transpose;
        v18 = v17 + 8;
      }
      v49 = v18;
      v12 += 24;
    }
    while (v12 != v11);
  }
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0, 0)+ 104))
  {
    v27 = operator new();
    DimensionOrderHint::DimensionOrderHint(&__p, 0);
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    ZinIrTensor::MirInfo::MirInfo(v27, 0, 0, 0, &__p, &v54);
    v53 = (_QWORD *)v27;
    if (__p)
    {
      v52 = (uint64_t)__p;
      operator delete(__p);
    }
    v28 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v49 - 1) + 32))(*((_QWORD *)v49 - 1), 0, 0);
    v29 = v53;
    v53 = 0;
    v47 = v29;
    ZinIrTensor::SetTensorMirInfo(v28, &v47);
    v30 = v47;
    v47 = 0;
    if (v30)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v47, v30);
    v31 = v53;
    v53 = 0;
    if (v31)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v53, v31);
  }
  v32 = (ZinIrOpLayer *)*((_QWORD *)v49 - 1);
  if (a4)
  {
    ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v45, v32, (uint64_t)a3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
LABEL_34:
    v34 = 0;
    goto LABEL_38;
  }
  *(_QWORD *)&v54 = *(_QWORD *)v48;
  std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v46, &v54, 1);
  v33 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, a3, v32, v46);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
  if ((v33 & 1) != 0)
    goto LABEL_34;
  v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v35)
    std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v35, v36, v37, v38, v39, v40, v41, v42);
  v34 = 3;
LABEL_38:
  if (v48)
  {
    v49 = (char *)v48;
    operator delete(v48);
  }
  return v34;
}

void sub_206F636D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(char *a1, _QWORD *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*a1 < 0)
    a2 = (_QWORD *)*a2;
  v2 = 136315138;
  v3 = a2;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: ZinMirOptFullyConnectedLayer fails in %s.", (uint8_t *)&v2, 0xCu);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirOptFullyConnectedLayer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "A function HasQualifiedFullyConnectedLayerChain failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "IsInefficientFullyConnectedLayer run failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void IsInefficientFullyConnectedLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "FC optimization evaluation failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void IsInefficientFullyConnectedLayer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Perf model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinPerfUtil::GetTaskExecutionTimeEstimate(ZinIrOpLayer ***a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  ZinIrHalParameters *v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer *v13;
  BOOL IsANELayer;
  _QWORD *v15;
  ZinIrOpLayer *v16;
  int v17;
  _DWORD *v18;
  int HasChainRead;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  double *v24;
  double v25;
  uint64_t v26;
  ZinMirL2Config *v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  _BYTE *v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void **v72[109];
  __int128 v73[2];
  __int128 v74;
  unint64_t v75;
  uint8_t buf[24];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v74 = 0uLL;
  v75 = 0;
  v5 = *(ZinIrHalParameters **)a2;
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)a2, *(double *)(*(_QWORD *)(a2 + 8) + 104), *(_DWORD *)(*(_QWORD *)(a2 + 8) + 112), *(_DWORD *)(*(_QWORD *)(a2 + 8) + 116), (uint64_t)v73);
  *(_DWORD *)buf = 16843009;
  *(_QWORD *)&buf[4] = 0x101010001010000;
  *(_WORD *)&buf[12] = 0;
  buf[14] = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v72, (uint64_t)v5, v73, (uint64_t *)buf);
  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v47 = _Q0;
    do
    {
      v13 = *v7;
      memset(buf, 0, sizeof(buf));
      if ((ZinIrOpLayer::IsNoOp(v13, (uint64_t *)buf) & 1) != 0)
      {
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        goto LABEL_43;
      }
      IsANELayer = ZinIrOpLayer::IsANELayer(*v7);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (!IsANELayer)
        goto LABEL_43;
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v15 = operator new(8uLL);
      v62 = v15;
      *v15 = 0;
      v63 = v15 + 1;
      v64 = v15 + 1;
      v65 = 0uLL;
      v66 = v47;
      v67 = v47;
      v68 = v47;
      v69 = v47;
      *(_QWORD *)&v70 = 0;
      BYTE8(v70) = 0;
      v71 = 0;
      v16 = *v7;
      v17 = ZinANELayer::CalculatePerf(*v7, (ZinIrPerf *)v72, (ZinPerfDescriptor *)&v49);
      if (v17)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = 124;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinPerfModel/s"
                                "rc/ZinIrANEPerfModel.cpp";
          _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Perf model isn't successful, line: %d, file: %s", buf, 0x12u);
        }
        *a3 = 3;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        goto LABEL_40;
      }
      v48 = 0;
      v18 = (_DWORD *)*((_QWORD *)v16 + 33);
      if (v18)
      {
        HasChainRead = ZinEngineLayerMirInfo::HasChainRead(v18, &v48);
        v20 = *((_QWORD *)&v74 + 1);
        if ((_QWORD)v74 == *((_QWORD *)&v74 + 1))
          goto LABEL_24;
        if (HasChainRead)
          goto LABEL_25;
      }
      else
      {
        v20 = *((_QWORD *)&v74 + 1);
        if ((_QWORD)v74 == *((_QWORD *)&v74 + 1))
        {
LABEL_24:
          v25 = 0.0;
          goto LABEL_28;
        }
      }
      if (!(_QWORD)v58)
      {
        v24 = (double *)(v20 - 344);
        goto LABEL_27;
      }
      v21 = *(_QWORD *)(v20 - 184);
      v22 = ZinANELayer::IsChainedConsumer(*(ZinANELayer **)(v20 - 336));
      if (v21)
        v23 = 1;
      else
        v23 = v22;
      v20 = *((_QWORD *)&v74 + 1);
      if ((v23 & 1) == 0)
      {
LABEL_25:
        v24 = (double *)(v20 - 352);
        goto LABEL_27;
      }
      v24 = (double *)(*((_QWORD *)&v74 + 1) - 696);
LABEL_27:
      v25 = *v24;
LABEL_28:
      if (*((_QWORD *)v16 + 45)
        && ((v26 = *((_QWORD *)v16 + 33), *(_BYTE *)(v26 + 344))
         || (v27 = (ZinMirL2Config *)(v26 + 120), *(_DWORD *)ZinMirL2Config::GetL2SrcDep(v26 + 120, 0))
         || *(_DWORD *)ZinMirL2Config::GetL2SrcDep((uint64_t)v27, 1)
         || ZinMirL2Config::HasAlias(v27)))
      {
        v28 = v25 + *((double *)&v51 + 1);
        if (*(double *)(*((_QWORD *)&v74 + 1) - 344) >= v25 + *((double *)&v51 + 1))
          v28 = *(double *)(*((_QWORD *)&v74 + 1) - 344);
      }
      else
      {
        v28 = v25 + *((double *)&v51 + 1);
      }
      *(double *)buf = v25;
      *(double *)&buf[8] = v28;
      *(_QWORD *)&buf[16] = v16;
      v87 = v59;
      v88 = v60;
      v89 = v61;
      v83 = v55;
      v84 = v56;
      v85 = v57;
      v86 = v58;
      v79 = v51;
      v80 = v52;
      v81 = v53;
      v82 = v54;
      v77 = v49;
      v78 = v50;
      v90 = 0uLL;
      v91 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v90, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 3);
      v96 = v69;
      v97 = v70;
      v98 = v71;
      v92 = v65;
      v93 = v66;
      v94 = v67;
      v95 = v68;
      v29 = *((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1) >= v75)
      {
        *((_QWORD *)&v74 + 1) = std::vector<ZinPerfUtil::TaskStats>::__push_back_slow_path<ZinPerfUtil::TaskStats>((uint64_t *)&v74, (__int128 *)buf);
        if ((_QWORD)v90)
        {
          *((_QWORD *)&v90 + 1) = v90;
          operator delete((void *)v90);
        }
      }
      else
      {
        v30 = *(_OWORD *)buf;
        *(_QWORD *)(*((_QWORD *)&v74 + 1) + 16) = *(_QWORD *)&buf[16];
        *(_OWORD *)v29 = v30;
        v31 = v80;
        v32 = v81;
        v33 = v79;
        *(_OWORD *)(v29 + 40) = v78;
        *(_OWORD *)(v29 + 88) = v32;
        *(_OWORD *)(v29 + 72) = v31;
        *(_OWORD *)(v29 + 56) = v33;
        v34 = v84;
        v35 = v85;
        v36 = v83;
        *(_OWORD *)(v29 + 104) = v82;
        *(_OWORD *)(v29 + 152) = v35;
        *(_OWORD *)(v29 + 136) = v34;
        *(_OWORD *)(v29 + 120) = v36;
        v38 = v87;
        v37 = v88;
        v39 = v89;
        *(_OWORD *)(v29 + 168) = v86;
        *(_OWORD *)(v29 + 200) = v37;
        *(_OWORD *)(v29 + 184) = v38;
        *(_QWORD *)(v29 + 216) = v39;
        *(_QWORD *)(v29 + 224) = 0;
        *(_OWORD *)(v29 + 24) = v77;
        *(_QWORD *)(v29 + 232) = 0;
        *(_QWORD *)(v29 + 240) = 0;
        *(_OWORD *)(v29 + 224) = v90;
        *(_QWORD *)(v29 + 240) = v91;
        v90 = 0uLL;
        v91 = 0;
        v41 = v93;
        v40 = v94;
        *(_OWORD *)(v29 + 248) = v92;
        *(_OWORD *)(v29 + 264) = v41;
        *(_OWORD *)(v29 + 280) = v40;
        v43 = v96;
        v42 = v97;
        v44 = v95;
        *(_QWORD *)(v29 + 344) = v98;
        *(_OWORD *)(v29 + 312) = v43;
        *(_OWORD *)(v29 + 328) = v42;
        *(_OWORD *)(v29 + 296) = v44;
        *((_QWORD *)&v74 + 1) = v29 + 352;
      }
LABEL_40:
      if (v62)
      {
        v63 = v62;
        operator delete(v62);
      }
      if (v17)
        goto LABEL_45;
LABEL_43:
      ++v7;
    }
    while (v7 != v6);
  }
  *a3 = 0;
  *(_OWORD *)a4 = v74;
  a4[2] = v75;
  v74 = 0uLL;
  v75 = 0;
LABEL_45:
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v72);
  v72[0] = (void **)&v74;
  std::vector<ZinPerfUtil::TaskStats>::__destroy_vector::operator()[abi:ne180100](v72);
}

void sub_206F63FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  _QWORD *v61;
  void *v63;

  v63 = (void *)v61[25];
  if (v63)
  {
    v61[26] = v63;
    operator delete(v63);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a61);
  v61[42] = &STACK[0x530];
  std::vector<ZinPerfUtil::TaskStats>::__destroy_vector::operator()[abi:ne180100](&a61);
  _Unwind_Resume(a1);
}

uint64_t ZinPerfUtil::GetThreadPerformanceStats(ZinIrOpLayer ***a1, ZinIrHalParameters *this, unsigned int a3, unsigned int a4, uint64_t a5, double a6)
{
  __int128 v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  unint64_t v12;
  double v13;
  NSObject *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  ZinIrOpLayer *v25;
  BOOL IsANELayer;
  _QWORD *v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  __int128 v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _BYTE v67[872];
  __int128 v68[2];
  uint64_t v69;
  uint8_t buf[4];
  int v71;
  __int16 v72;
  const char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  ZinIrHalParameters::GetOperationCondition(this, a6, a3, a4, (uint64_t)v68);
  __p[0] = (void *)0x101000001010101;
  LOWORD(__p[1]) = 256;
  BYTE2(__p[1]) = 1;
  *(_DWORD *)((char *)&__p[1] + 3) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v67, (uint64_t)this, v68, (uint64_t *)__p);
  v9 = v68[1];
  *(_OWORD *)a5 = v68[0];
  *(_OWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 32) = v69;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    v12 = 0;
    v13 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v41 = _Q0;
    v19 = MEMORY[0x24BDACB70];
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    while (1)
    {
      v25 = *v10;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v43 = 0;
      if ((ZinIrOpLayer::IsNoOp(v25, (uint64_t *)__p) & 1) != 0)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        IsANELayer = ZinIrOpLayer::IsANELayer(*v10);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (IsANELayer)
        {
          v54 = 0;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          *(_OWORD *)__p = 0u;
          v43 = 0u;
          v27 = operator new(8uLL);
          v55 = v27;
          *v27 = 0;
          v56 = v27 + 1;
          v57 = v27 + 1;
          v58 = 0;
          v59 = 0;
          v60 = v41;
          v61 = v41;
          v62 = v41;
          v63 = v41;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v28 = ZinANELayer::CalculatePerf(*v10, (ZinIrPerf *)v67, (ZinPerfDescriptor *)__p);
          if (v28)
          {
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109378;
              v71 = 196;
              v72 = 2080;
              v73 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinPerfModel/src/ZinIrANEPerfModel.cpp";
              _os_log_error_impl(&dword_2069AB000, v19, OS_LOG_TYPE_ERROR, "Perf model isn't successful, line: %d, file: %s", buf, 0x12u);
            }
          }
          else
          {
            v23 = v23 + *(double *)&v43;
            v24 = v24 + *((double *)&v43 + 1);
            v13 = v13 + *(double *)&v44;
            v20 = v20 + *((double *)&v44 + 1);
            v12 += *((_QWORD *)&v48 + 1) + v49 + v50;
            v29 = v13 * 0.899999976;
            if (v23 >= v24)
              v30 = v23;
            else
              v30 = v24;
            v31 = v29 - v30;
            v32 = v30 - v29;
            v33 = v29 <= v30;
            v34 = -0.0;
            if (v33)
              v35 = v32;
            else
              v35 = -0.0;
            v22 = v22 + v35;
            if (!v33)
              v34 = v31;
            v21 = v21 + v34;
          }
          if (v55)
          {
            v56 = v55;
            operator delete(v55);
          }
          if (v28)
          {
            v36 = 3;
            goto LABEL_28;
          }
        }
      }
      if (++v10 == v11)
        goto LABEL_27;
    }
  }
  v12 = 0;
  v24 = 0.0;
  v23 = 0.0;
  v22 = 0.0;
  v21 = 0.0;
  v20 = 0.0;
  v13 = 0.0;
LABEL_27:
  v36 = 0;
  *(_QWORD *)(a5 + 40) = (unint64_t)(v23 * 1000.0);
  *(_QWORD *)(a5 + 48) = (unint64_t)(v24 * 1000.0);
  *(_QWORD *)(a5 + 56) = (unint64_t)(v13 * 1000.0);
  *(_QWORD *)(a5 + 64) = (unint64_t)(v20 * 1000.0);
  *(_QWORD *)(a5 + 72) = (unint64_t)(v21 * 1000.0);
  *(_QWORD *)(a5 + 80) = (unint64_t)(v22 * 1000.0);
  *(_DWORD *)(a5 + 100) = 1063675494;
  v37 = v21 / v20;
  v38 = v22 / v20;
  *(float *)(a5 + 104) = v37;
  *(float *)(a5 + 108) = v38;
  *(_QWORD *)(a5 + 88) = v12;
  v39 = (double)v12 / (v20 * 1000.0);
  *(float *)(a5 + 96) = v39;
LABEL_28:
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v67);
  return v36;
}

void sub_206F643EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Unwind_Resume(exception_object);
}

uint64_t ZinPerfUtil::ZinDebugPrintPerfEstimateParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  std::ios_base *v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string v30;
  std::string v31;
  void *v32[2];
  std::string::size_type v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  _QWORD *v39[2];
  std::string v40;
  std::string v41;
  void **v42;
  void *__p;
  void *v44;
  uint64_t v45;
  _QWORD v46[20];

  v46[19] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v4 + 72), *(_QWORD *)(v4 + 80));
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v41 = *(std::string *)(v4 + 72);
  }
  if (*(char *)(v4 + 47) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
  else
    v40 = *(std::string *)(v4 + 24);
  if (!*(_QWORD *)(a1 + 344))
    ZinAssertImpl("Must run scheduler first");
  std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::map[abi:ne180100]((uint64_t *)&v38, a1 + 328);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v5 = v38;
  if (v38 == v39)
  {
LABEL_18:
    v11 = MEMORY[0x24BEDB840];
    v12 = MEMORY[0x24BEDB840] + 64;
    v13 = MEMORY[0x24BEDB7E8];
    v14 = *(void ***)(MEMORY[0x24BEDB7E8] + 8);
    v15 = *(void ***)(MEMORY[0x24BEDB7E8] + 16);
    v46[0] = MEMORY[0x24BEDB840] + 64;
    v42 = v14;
    *(void ***)((char *)&v42 + (_QWORD)*(v14 - 3)) = v15;
    v16 = (std::ios_base *)((char *)&v42 + (_QWORD)*(v42 - 3));
    std::ios_base::init(v16, &__p);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v42 = (void **)(v11 + 24);
    v46[0] = v12;
    MEMORY[0x20BCFFEA8](&__p);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      size = v40.__r_.__value_.__l.__size_;
    v18 = &v30;
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, size + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v40;
      else
        v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
      memmove(v18, v19, size);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + size) = 46;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v41;
    else
      v20 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      v21 = v41.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v30, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v31, "_perf_all.csv", 0xDuLL);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)v32 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::ofstream::open();
    if (SHIBYTE(v33) < 0)
      operator delete(v32[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    ZinPerfUtil::WritePerfCsvHeader(&v42);
    v26 = v36;
    if (v35 != v36)
    {
      v27 = v35 + 24;
      do
      {
        ZinPerfUtil::WritePerfCsvBody();
        v28 = v27 + 328;
        v27 += 352;
      }
      while (v28 != v26);
    }
    ZinPerfUtil::WritePerfCsvFooter(&v42);
    v42 = *(void ***)v13;
    *(void ***)((char *)&v42 + (_QWORD)*(v42 - 3)) = *(void ***)(v13 + 24);
    MEMORY[0x20BCFFEB4](&__p);
    std::ostream::~ostream();
    MEMORY[0x20BD0022C](v46);
    v7 = 0;
  }
  else
  {
    while (1)
    {
      v6 = v5[5];
      v42 = (void **)v5[4];
      v44 = 0;
      v45 = 0;
      __p = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v6, (uint64_t)v5[6], v5[6] - v6);
      ZinPerfUtil::GetTaskExecutionTimeEstimate((ZinIrOpLayer ***)&__p, a2, &v34, v32);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinPerfUtil::TaskStats *>,std::__wrap_iter<ZinPerfUtil::TaskStats *>,std::back_insert_iterator<std::vector<ZinPerfUtil::TaskStats>>,0>((__int128 *)v32[0], (__int128 *)v32[1], &v35);
      v7 = v34;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      std::vector<ZinPerfUtil::TaskStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      if ((_DWORD)v7)
        break;
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v5[2];
          v10 = *v9 == v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == v39)
        goto LABEL_18;
    }
  }
  v42 = (void **)&v35;
  std::vector<ZinPerfUtil::TaskStats>::__destroy_vector::operator()[abi:ne180100](&v42);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v38, v39[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return v7;
}

void sub_206F64830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinPerfUtil::WritePerfCsvHeader(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  std::locale v35;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"is_chained", 10);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"NumWU", 5);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"mac_cycles_per_WU", 17);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"post_cycles_per_WU", 18);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ne_cycle_single_buffering", 25);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ne_cycle_double_buffering", 25);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"pe_cycle", 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"l2_bcast", 8);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"lw_writeback", 12);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"kdma", 4);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"rdma", 4);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)",", 1);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"wdma", 4);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)",", 1);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"core_cycle_count", 16);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"l2_cycle_count", 14);
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"power(W)", 8);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)",", 1);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"estimated_time(ms)", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_206F64B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t ZinPerfUtil::WritePerfCsvBody()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  std::locale v19;

  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)",", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)",", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_206F64D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t ZinPerfUtil::WritePerfCsvFooter(_QWORD *a1)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", , , , , , , , , , , , , , , ,", 31);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_206F64E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPerfUtil::TaskStats>::__push_back_slow_path<ZinPerfUtil::TaskStats>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v29[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xBA2E8BA2E8BA2ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5D1745D1745D17)
    v9 = 0xBA2E8BA2E8BA2ELL;
  else
    v9 = v5;
  v29[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPerfUtil::TaskStats>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[352 * v4];
  v29[0] = v10;
  v29[1] = v11;
  v29[3] = &v10[352 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  v13 = *(__int128 *)((char *)a2 + 40);
  v14 = *(__int128 *)((char *)a2 + 56);
  v15 = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(v11 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v11 + 72) = v15;
  *(_OWORD *)(v11 + 56) = v14;
  *(_OWORD *)(v11 + 40) = v13;
  v16 = *(__int128 *)((char *)a2 + 104);
  v17 = *(__int128 *)((char *)a2 + 120);
  v18 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(v11 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(v11 + 136) = v18;
  *(_OWORD *)(v11 + 120) = v17;
  *(_OWORD *)(v11 + 104) = v16;
  v19 = *(__int128 *)((char *)a2 + 168);
  v20 = *(__int128 *)((char *)a2 + 184);
  v21 = *(__int128 *)((char *)a2 + 200);
  *((_QWORD *)v11 + 27) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(v11 + 200) = v21;
  *(_OWORD *)(v11 + 184) = v20;
  *(_OWORD *)(v11 + 168) = v19;
  *(_OWORD *)(v11 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)v11 + 29) = 0;
  *((_QWORD *)v11 + 30) = 0;
  *((_QWORD *)v11 + 28) = 0;
  *((_OWORD *)v11 + 14) = a2[14];
  *((_QWORD *)v11 + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 28) = 0;
  v22 = *(__int128 *)((char *)a2 + 248);
  v23 = *(__int128 *)((char *)a2 + 280);
  *(_OWORD *)(v11 + 264) = *(__int128 *)((char *)a2 + 264);
  *(_OWORD *)(v11 + 248) = v22;
  v25 = *(__int128 *)((char *)a2 + 312);
  v24 = *(__int128 *)((char *)a2 + 328);
  v26 = *(__int128 *)((char *)a2 + 296);
  *((_QWORD *)v11 + 43) = *((_QWORD *)a2 + 43);
  *(_OWORD *)(v11 + 312) = v25;
  *(_OWORD *)(v11 + 328) = v24;
  *(_OWORD *)(v11 + 280) = v23;
  *(_OWORD *)(v11 + 296) = v26;
  v29[2] = v11 + 352;
  std::vector<ZinPerfUtil::TaskStats>::__swap_out_circular_buffer(a1, v29);
  v27 = a1[1];
  std::__split_buffer<ZinPerfUtil::TaskStats>::~__split_buffer((uint64_t)v29);
  return v27;
}

void sub_206F64FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinPerfUtil::TaskStats>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinPerfUtil::TaskStats *>,std::__wrap_iter<ZinPerfUtil::TaskStats *>,std::back_insert_iterator<std::vector<ZinPerfUtil::TaskStats>>,0>(__int128 *a1, __int128 *a2, uint64_t *a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<ZinPerfUtil::TaskStats>>::operator=[abi:ne180100](&v6, v3);
    v3 += 22;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<ZinPerfUtil::TaskStats>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<ZinPerfUtil::TaskStats>::__push_back_slow_path<ZinPerfUtil::TaskStats const&>(v6, a2);
  }
  else
  {
    std::vector<ZinPerfUtil::TaskStats>::__construct_one_at_end[abi:ne180100]<ZinPerfUtil::TaskStats const&>((uint64_t)v6, a2);
    v7 = v5 + 352;
  }
  v3[1] = v7;
  return a1;
}

__n128 std::vector<ZinPerfUtil::TaskStats>::__construct_one_at_end[abi:ne180100]<ZinPerfUtil::TaskStats const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  v6 = *(__int128 *)((char *)a2 + 40);
  v7 = *(__int128 *)((char *)a2 + 56);
  v8 = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(v4 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  *(_OWORD *)(v4 + 40) = v6;
  v9 = *(__int128 *)((char *)a2 + 104);
  v10 = *(__int128 *)((char *)a2 + 120);
  v11 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(v4 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(v4 + 136) = v11;
  *(_OWORD *)(v4 + 120) = v10;
  *(_OWORD *)(v4 + 104) = v9;
  v12 = *(__int128 *)((char *)a2 + 168);
  v13 = *(__int128 *)((char *)a2 + 184);
  v14 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(v4 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(v4 + 200) = v14;
  *(_OWORD *)(v4 + 184) = v13;
  *(_OWORD *)(v4 + 168) = v12;
  *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(v4 + 224), *((const void **)a2 + 28), *((_QWORD *)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 3);
  v15 = *(__int128 *)((char *)a2 + 248);
  v16 = *(__int128 *)((char *)a2 + 280);
  *(_OWORD *)(v4 + 264) = *(__int128 *)((char *)a2 + 264);
  *(_OWORD *)(v4 + 280) = v16;
  *(_OWORD *)(v4 + 248) = v15;
  result = *(__n128 *)((char *)a2 + 296);
  v18 = *(__int128 *)((char *)a2 + 312);
  v19 = *(__int128 *)((char *)a2 + 328);
  *(_QWORD *)(v4 + 344) = *((_QWORD *)a2 + 43);
  *(_OWORD *)(v4 + 312) = v18;
  *(_OWORD *)(v4 + 328) = v19;
  *(__n128 *)(v4 + 296) = result;
  *(_QWORD *)(a1 + 8) = v4 + 352;
  return result;
}

void sub_206F651B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPerfUtil::TaskStats>::__push_back_slow_path<ZinPerfUtil::TaskStats const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  uint64_t *v37;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xBA2E8BA2E8BA2ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5D1745D1745D17)
    v9 = 0xBA2E8BA2E8BA2ELL;
  else
    v9 = v5;
  v37 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPerfUtil::TaskStats>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[352 * v4];
  v34[0] = v10;
  v34[1] = v11;
  v35 = v11;
  v36 = &v10[352 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  v13 = *(__int128 *)((char *)a2 + 24);
  v14 = *(__int128 *)((char *)a2 + 168);
  v15 = *(__int128 *)((char *)a2 + 184);
  v16 = *(__int128 *)((char *)a2 + 200);
  v17 = *((_QWORD *)a2 + 27);
  v18 = *(__int128 *)((char *)a2 + 104);
  v19 = *(__int128 *)((char *)a2 + 120);
  v20 = *(__int128 *)((char *)a2 + 136);
  v21 = *(__int128 *)((char *)a2 + 152);
  v22 = *(__int128 *)((char *)a2 + 40);
  v23 = *(__int128 *)((char *)a2 + 56);
  v24 = *(__int128 *)((char *)a2 + 72);
  v25 = *(__int128 *)((char *)a2 + 88);
  *((_QWORD *)v11 + 28) = 0;
  v11 += 224;
  *(_OWORD *)(v11 - 136) = v25;
  *(_OWORD *)(v11 - 152) = v24;
  *(_OWORD *)(v11 - 168) = v23;
  *(_OWORD *)(v11 - 184) = v22;
  *(_OWORD *)(v11 - 72) = v21;
  *(_OWORD *)(v11 - 88) = v20;
  *(_OWORD *)(v11 - 104) = v19;
  *(_OWORD *)(v11 - 120) = v18;
  *((_QWORD *)v11 - 1) = v17;
  *(_OWORD *)(v11 - 24) = v16;
  *(_OWORD *)(v11 - 40) = v15;
  *(_OWORD *)(v11 - 56) = v14;
  *(_OWORD *)(v11 - 200) = v13;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v11, *((const void **)a2 + 28), *((_QWORD *)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 3);
  v26 = &v10[352 * v4];
  v28 = *(__int128 *)((char *)a2 + 264);
  v27 = *(__int128 *)((char *)a2 + 280);
  *(_OWORD *)(v26 + 248) = *(__int128 *)((char *)a2 + 248);
  *(_OWORD *)(v26 + 264) = v28;
  v29 = *(__int128 *)((char *)a2 + 296);
  v30 = *(__int128 *)((char *)a2 + 312);
  v31 = *(__int128 *)((char *)a2 + 328);
  *((_QWORD *)v26 + 43) = *((_QWORD *)a2 + 43);
  *(_OWORD *)(v26 + 312) = v30;
  *(_OWORD *)(v26 + 328) = v31;
  *(_OWORD *)(v26 + 280) = v27;
  *(_OWORD *)(v26 + 296) = v29;
  v35 += 352;
  std::vector<ZinPerfUtil::TaskStats>::__swap_out_circular_buffer(a1, v34);
  v32 = a1[1];
  std::__split_buffer<ZinPerfUtil::TaskStats>::~__split_buffer((uint64_t)v34);
  return v32;
}

void sub_206F65380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinPerfUtil::TaskStats>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinReductionLayerUtils::PEReductionWithDimensionBalancer(unsigned __int8 *a1, int8x16_t *a2, uint64_t a3, int a4, uint64_t a5, int16x8_t a6)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int8x16_t v21;
  int *v22;
  int *v23;
  int v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  int *v32;
  uint64_t i;
  uint64_t v34;
  int64x2_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int8x16_t v46;
  int64x2_t v47;
  uint64_t v48;
  uint64_t v49[6];
  _QWORD v50[7];
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  _QWORD v57[5];
  unsigned __int32 v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int64x2_t v64;
  int64x2_t v65;
  uint64_t v66;
  uint64_t v67;

  v8 = 0;
  v67 = *MEMORY[0x24BDAC8D0];
  v63 = a4;
  v60 = (uint64_t)&v60;
  v61 = &v60;
  v62 = 0;
  v9 = a1[24];
  *(int16x4_t *)a6.i8 = vdup_n_s16(v9);
  a6.i32[0] &= 0xFF00FFu;
  a6.i16[2] = a6.u8[4];
  a6.i16[3] = a6.u8[6];
  *(uint16x4_t *)a6.i8 = vshl_u16(*(uint16x4_t *)a6.i8, (uint16x4_t)0xFFFFFFFEFFFDFFFCLL);
  a6.i32[0] &= 0xFF01FF01;
  a6.i16[2] &= 0xFF01u;
  a6.i16[3] &= 0xFF01u;
  v58 = vmovn_s16(a6).u32[0];
  v59 = v9 & 1;
  v10 = *(_QWORD *)(a3 + 336);
  v57[0] = *(_QWORD *)(a3 + 320);
  v57[1] = v10;
  v11 = *(_QWORD *)(a3 + 352);
  v57[2] = *(_QWORD *)(a3 + 368);
  v57[3] = v11;
  v57[4] = *(_QWORD *)(a3 + 384);
  v56 = 0;
  v55 = 16777473;
  v51 = vextq_s8(a2[1], a2[1], 8uLL);
  v12 = a2[2].i64[0];
  v13 = a2->i64[0];
  v52 = a2->i64[1];
  v53 = v12;
  v54 = v13;
  v50[4] = v57;
  v50[5] = &v63;
  v50[0] = &v58;
  v50[1] = &v51;
  v50[2] = a5;
  v50[3] = &v60;
  v49[0] = (uint64_t)&v58;
  v49[1] = (uint64_t)&v51;
  v50[6] = &v55;
  v49[2] = a5;
  v49[3] = (uint64_t)&v60;
  v49[4] = (uint64_t)v57;
  v49[5] = (uint64_t)&v55;
  do
  {
    if (*((_BYTE *)&v58 + v8))
      v14 = *((_BYTE *)&v55 + v8) == 0;
    else
      v14 = 0;
    if (*((_BYTE *)&v55 + v8))
      v15 = *((unsigned __int8 *)&v58 + v8) == 0;
    else
      v15 = 0;
    if (!v8 && v51.i64[0] == 1)
      v15 = 0;
    v64.i8[0] = v14 || v15;
    ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_0::operator()((uint64_t)v50, v64.i8, v8, v14);
    ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_1::operator()(v49, (BOOL *)v64.i8, v8, v8 + 1, v14);
    ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_1::operator()(v49, (BOOL *)v64.i8, v8, v8 - 1, v14);
    if (v15)
      ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_0::operator()((uint64_t)v50, v64.i8, v8, !v14);
    v16 = v64.i8[0] == 0;
    if (v64.i8[0])
      break;
  }
  while (v8++ < 4);
  if (!v64.i8[0])
  {
    ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)&v46, (const ZinIrReductionInfo *)a1);
    v47.i64[1] = 26;
    v64.i32[0] = 20;
    ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)&v64.u64[1], (const ZinIrReductionInfo *)&v46);
    v18 = *(_QWORD *)(a5 + 8);
    if (v18 >= *(_QWORD *)(a5 + 16))
    {
      v19 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>((uint64_t *)a5, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v64);
    }
    else
    {
      ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(*(ZinReductionLayerUtils::ReductionDecomposedDesc **)(a5 + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v64);
      v19 = v18 + 344;
      *(_QWORD *)(a5 + 8) = v18 + 344;
    }
    *(_QWORD *)(a5 + 8) = v19;
    ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v64);
    v20 = v61;
    v64.i64[0] = a5;
    while (v20 != &v60)
    {
      std::back_insert_iterator<std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>>::operator=[abi:ne180100]((uint64_t **)&v64, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)(v20 + 2));
      v20 = (uint64_t *)v20[1];
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v46);
  }
  v21 = a2[1];
  v46 = *a2;
  v47 = (int64x2_t)v21;
  v48 = a2[2].i64[0];
  v22 = *(int **)(a5 + 8);
  if (*(int **)a5 != v22)
  {
    v23 = (int *)(*(_QWORD *)a5 + 312);
    v38 = vdupq_n_s64(1uLL);
    while (1)
    {
      v43 = v38;
      v44 = v38;
      v45 = 1;
      v24 = *(v23 - 78);
      if (v24 > 19)
      {
        switch(v24)
        {
          case 20:
            v43 = (int64x2_t)v46;
            v44 = v47;
            v45 = v48;
            ZinIrReductionInfo::ComputeOutputDimensions((uint64_t)(v23 - 76), (ZinTensorDimensions *)&v43);
            break;
          case 21:
            ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v46, (uint64_t)(v23 - 56), &v43);
            break;
          case 22:
            v25 = *((int64x2_t *)v23 - 14);
            v26 = *((int64x2_t *)v23 - 13);
            v45 = *((_QWORD *)v23 - 24);
            v43 = v25;
            v44 = v26;
            break;
        }
        goto LABEL_38;
      }
      if (v24 == 1)
        break;
      if (v24 == 2)
      {
        v41 = 0x100000001;
        v42 = 1;
        v27 = a2->i64[1];
        v39 = 0x100000001;
        v40 = 1;
        ZinGetOutputTensorDimension((uint64_t)a2, (_QWORD *)v23 - 27, (unsigned int *)v23 - 48, (unsigned int *)&v41, v23 - 45, v27, (int *)&v39, (uint64_t)&v64);
LABEL_37:
        v43 = v64;
        v44 = v65;
        v45 = v66;
      }
LABEL_38:
      v66 = 0;
      v64 = 0u;
      v65 = 0u;
      L2Allocate::CalculateDstDMABufferSize((L2Allocate *)&v46, (const ZinTensorDimensions *)(1 << *(_DWORD *)(a3 + 976)), 1, 1, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 416), 0, (unint64_t *)&v64);
      v41 = 0;
      ZinTensorFormatGetSize(3, &v41);
      v29 = v64;
      v30 = v65;
      v31 = v41;
      v66 = 0;
      v64 = 0u;
      v65 = 0u;
      L2Allocate::CalculateDstDMABufferSize((L2Allocate *)&v43, (const ZinTensorDimensions *)(1 << *(_DWORD *)(a3 + 976)), 1, 1, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 416), 0, (unint64_t *)&v64);
      v41 = 0;
      ZinTensorFormatGetSize(3, &v41);
      v16 = v16 & ((unint64_t)(v30.i64[0] * v29.i64[0] * v29.i64[1] * v30.i64[1] * v31
                                                     + v65.i64[0] * v64.i64[0] * v64.i64[1] * v65.i64[1] * v41) <= *(_QWORD *)(a3 + 408));
      v46 = (int8x16_t)v43;
      v47 = v44;
      v48 = v45;
      v32 = v23 + 8;
      v23 += 86;
      if (v32 == v22)
        goto LABEL_39;
    }
    v41 = 0x100000001;
    v42 = 1;
    v28 = *((_QWORD *)v23 - 29);
    v39 = 0x100000001;
    v40 = 1;
    ZinGetOutputTensorDimension((uint64_t)&v46, (_QWORD *)v23 - 6, (unsigned int *)v23 - 3, (unsigned int *)&v41, v23, v28, (int *)&v39, (uint64_t)&v64);
    goto LABEL_37;
  }
LABEL_39:
  if ((v16 & 1) == 0)
  {
    v34 = *(_QWORD *)a5;
    for (i = *(_QWORD *)(a5 + 8);
          i != v34;
    *(_QWORD *)(a5 + 8) = v34;
  }
  std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::clear(&v60);
  return v16;
}

void sub_206F6588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a59);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a23);
  std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::clear(&a55);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_0::operator()(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  _BOOL4 v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t i;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35[3];
  __int128 v36;
  int v37;

  if (*a2)
  {
    v6 = *(_QWORD *)a1;
    v5 = *(_QWORD **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unint64_t **)(a1 + 32);
    v37 = **(_DWORD **)(a1 + 40);
    v35[0] = (uint64_t)v5;
    v35[1] = v6;
    v35[2] = (uint64_t)&v37;
    v36 = *(_OWORD *)(a1 + 16);
    if (a3)
      goto LABEL_3;
    v30 = 0;
    v31 = 0;
    for (i = 1; i != 5; ++i)
    {
      v33 = v5[i];
      if (*v8 >= v33 && v8[i] >= *v5 && *(_BYTE *)(v6 + i) != 0 && v30 < (uint64_t)v33)
      {
        v31 = i;
        v30 = v5[i];
      }
    }
    if (!v31)
    {
LABEL_3:
      if (a3 > 3)
      {
LABEL_30:
        v29 = 1;
LABEL_43:
        *a2 = v29;
        return;
      }
      v9 = 0;
      v10 = a3;
      v11 = *(unsigned __int8 *)(v7 + a3);
      v12 = v8[a3];
      v13 = a3 + 1;
      v14 = v6 + v13;
      v15 = 8 * a3 + 8;
      v16 = (char *)v8 + v15;
      v17 = (char *)v5 + v15;
      v18 = v7 + v13;
      do
      {
        v19 = v11 != a4 && *(unsigned __int8 *)(v18 + v9) == a4 && *(unsigned __int8 *)(v14 + v9) != a4;
        if (v12 >= *(_QWORD *)&v17[8 * v9])
        {
          if (*(_QWORD *)&v16[8 * v9] < v5[a3])
            v19 = 0;
          if (v19)
          {
            v34 = a3 + v9 + 1;
            goto LABEL_42;
          }
        }
        v20 = a3 + v9++;
      }
      while (v20 != 3);
      v21 = v5 + 1;
      v22 = v8 + 1;
      v23 = v6 + 1;
      v24 = v7 + 1;
      v25 = a3;
      while (1)
      {
        if (!v11 || (*(_BYTE *)(v24 + v25) ? (v26 = *(_BYTE *)(v23 + v25) == 0) : (v26 = 1), v26))
        {
          v27 = v21[v25];
          v28 = v27 == 1 && v5[a3] != 1;
        }
        else
        {
          v27 = v21[v25];
          v28 = 1;
        }
        if (v12 >= v27 && *(unsigned __int8 *)(v24 + v25) == a4 && v28 && v22[v25] >= v5[a3])
          break;
        v26 = (_DWORD)v25++ == 3;
        if (v26)
          goto LABEL_30;
      }
      v31 = v25 + 1;
      v10 = a3;
    }
    else
    {
      v10 = 0;
    }
    v34 = v31;
LABEL_42:
    ZinReductionLayerUtils::TryTranspose(BOOL,unsigned int,std::array<BOOL,5ul> &,std::array<long,5ul> &,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &,std::list<ZinReductionLayerUtils::ReductionDecomposedDesc> &,std::array<BOOL,5ul> const&,std::array<unsigned long,5ul> const&,ZinTensorFormat)::$_0::operator()(v35, v10, v34);
    v29 = 0;
    goto LABEL_43;
  }
}

void ZinReductionLayerUtils::PEReductionWithDimensionBalancer(ZinIrReductionInfo const&,ZinTensorDimensions const&,ZinIrHalParameters const&,ZinTensorFormat,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &)::$_1::operator()(uint64_t *a1, BOOL *a2, unsigned int a3, unsigned int a4, int a5)
{
  BOOL v6;
  uint64_t *v8;
  uint64_t LowestFactorGreaterThan;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25[15];
  void *__p;
  void *v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[344];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v6 = 0;
    if (a3 != a4)
    {
      v8 = (uint64_t *)a1[1];
      LowestFactorGreaterThan = v8[a3];
      if (LowestFactorGreaterThan != 1)
      {
        if (a4 <= 4)
        {
          v10 = a1[5];
          v11 = a3;
          if (*(unsigned __int8 *)(v10 + a4) == a5)
          {
            v12 = *a1;
            v14 = (uint64_t *)a1[2];
            v13 = a1[3];
            v15 = a1[4];
            v16 = a4;
            v17 = v8[a4];
            if ((unint64_t)(v17 * LowestFactorGreaterThan) < *(_QWORD *)(v15 + 8 * a4)
              || (LowestFactorGreaterThan = FindLowestFactorGreaterThan(LowestFactorGreaterThan, vcvtps_s32_f32((float)((float)LowestFactorGreaterThan * (float)v17)/ (float)*(unint64_t *)(v15 + 8 * a3))), LowestFactorGreaterThan != v17))
            {
              v18 = 0;
              v19 = *((_OWORD *)v8 + 1);
              *(_OWORD *)v28 = *(_OWORD *)v8;
              *(_OWORD *)&v28[16] = v19;
              v29 = v8[4];
              do
              {
                if (*(_BYTE *)(v12 + v18))
                  *(_QWORD *)&v28[8 * v18] = 1;
                ++v18;
              }
              while (v18 != 5);
              v8[v11] /= LowestFactorGreaterThan;
              v8[v16] *= LowestFactorGreaterThan;
              *(_BYTE *)(v12 + v16) = *(_BYTE *)(v10 + v16);
              *(_BYTE *)(v12 + v11) = 0;
              v30 = v8[4];
              v31 = vextq_s8(*(int8x16_t *)(v8 + 1), *(int8x16_t *)(v8 + 1), 8uLL);
              v32 = *v8;
              v33 = v8[3];
              ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v25, (uint64_t)&v30);
              ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v34, (ZinIrReshapeUnitInfo *)v25);
              v20 = v14[1];
              if (v20 >= v14[2])
              {
                v21 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(v14, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
              }
              else
              {
                ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v14[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
                v21 = v20 + 344;
                v14[1] = v20 + 344;
              }
              v14[1] = v21;
              ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
              v25[0] = off_24C01FAB8;
              if (__p)
              {
                v27 = __p;
                operator delete(__p);
              }
              ZinIrUnitInfo::~ZinIrUnitInfo(v25);
              v31 = vextq_s8(*(int8x16_t *)&v28[8], *(int8x16_t *)&v28[8], 8uLL);
              v30 = v29;
              v32 = *(_QWORD *)v28;
              v33 = *(_QWORD *)&v28[24];
              ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v25, (uint64_t)&v30);
              ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v34, (ZinIrReshapeUnitInfo *)v25);
              v22 = std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::__create_node[abi:ne180100]<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(v13, 0, 0, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
              *v22 = v13;
              v23 = *(_QWORD **)(v13 + 8);
              v22[1] = v23;
              *v23 = v22;
              v24 = *(_QWORD *)(v13 + 16) + 1;
              *(_QWORD *)(v13 + 8) = v22;
              *(_QWORD *)(v13 + 16) = v24;
              ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
              v25[0] = off_24C01FAB8;
              if (__p)
              {
                v27 = __p;
                operator delete(__p);
              }
              ZinIrUnitInfo::~ZinIrUnitInfo(v25);
            }
          }
          v6 = v8[v11] != 1;
        }
        else
        {
          v6 = 1;
        }
      }
    }
    *a2 = v6;
  }
}

void sub_206F65D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(ZinIrReshapeUnitInfo *__hidden this), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a37);
  a9 = off_24C01FAB8;
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinReductionLayerUtils::PEReductionWithoutDimensionBalancer(const ZinIrReductionInfo *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v6 = 1;
  switch(*((_QWORD *)a1 + 3))
  {
    case 2:
      v7 = a2[2];
      v8 = a2[3];
      if (v8 != 1 || v7 < 2)
        goto LABEL_32;
      v10 = a2[1];
      v30 = *a2;
      v31 = v10 * v7;
      v6 = 1;
      *(int64x2_t *)v32 = vdupq_n_s64(1uLL);
      v11 = a2[4];
      goto LABEL_56;
    case 4:
      if (a2[3] != 1)
        return 0;
      v12 = a2[2];
      v13 = a2[4];
      if (v12 >= 2 && v13 == 1 && (unint64_t)v12 < *(_QWORD *)(a4 + 960))
        goto LABEL_20;
      v6 = 0;
      if (v12 != 1 || a2[1] > *(_QWORD *)(a4 + 352) || v13 < 1)
        return v6;
      goto LABEL_50;
    case 8:
      v8 = a2[3];
      v7 = a2[4];
      if (v8 != 1 || v7 < 2)
        goto LABEL_32;
      v17 = a2[1];
      v30 = *a2;
      v31 = v17 * v7;
      *(_QWORD *)v32 = a2[2];
      v6 = 1;
      v18 = vdupq_n_s64(1uLL);
      goto LABEL_42;
    case 0xALL:
      v19 = a2[3];
      goto LABEL_45;
    case 0xELL:
      v8 = a2[3];
      v7 = a2[1];
      if (v8 == 1 && v7 >= 2)
      {
        v6 = 1;
        v30 = *a2;
        v31 = 1;
        *(_QWORD *)v32 = a2[2];
        *(_QWORD *)&v32[8] = 1;
        goto LABEL_55;
      }
LABEL_32:
      v21 = v8 == 1 && v7 == 1;
      goto LABEL_46;
    case 0x10:
      v22 = a2[2];
      v23 = a2[4];
      if (v22 > 1 || v23 >= 2)
      {
        v25 = a2[1];
        v30 = v23 * *a2;
        v31 = v25 * v22;
        v6 = 1;
        v26 = a2[3];
        *(_QWORD *)v32 = 1;
        *(_QWORD *)&v32[8] = v26;
        *(_QWORD *)&v32[16] = 1;
        ZinReductionLayerUtils::CreateReshapeReductionReshape(a1, (uint64_t)&v30, a3, a6);
        return v6;
      }
      v21 = v22 == 1 && v23 == 1;
      goto LABEL_46;
    case 0x12:
      v19 = a2[2];
      if (v19 < 2)
        goto LABEL_45;
      v27 = a2[1] * v19;
      v30 = *a2;
      v31 = v27;
      v6 = 1;
      *(_QWORD *)v32 = 1;
      v18 = *(int64x2_t *)(a2 + 3);
LABEL_42:
      *(int64x2_t *)&v32[8] = v18;
      goto LABEL_57;
    case 0x16:
LABEL_20:
      ZinReductionLayerUtils::CreateTransposeReductionTranspose(a1, 3u, a5, a6);
      goto LABEL_54;
    case 0x18:
      v19 = a2[4];
      if (v19 >= 2)
      {
        v28 = a2[1] * v19;
        v30 = *a2;
        v31 = v28;
        *(_OWORD *)v32 = *((_OWORD *)a2 + 1);
        v6 = 1;
        *(_QWORD *)&v32[16] = 1;
        goto LABEL_57;
      }
LABEL_45:
      v21 = v19 == 1;
LABEL_46:
      v6 = v21;
      break;
    case 0x1ALL:
      return v6;
    case 0x1CLL:
      if (a2[4] >= *(_QWORD *)(a4 + 960))
        return 0;
LABEL_50:
      v6 = 1;
      ZinReductionLayerUtils::CreateTransposeReductionTranspose(a1, 1u, a5, a6);
      return v6;
    case 0x1ELL:
      v7 = a2[1];
      if (v7 < 2)
      {
LABEL_54:
        v6 = 1;
      }
      else
      {
        v6 = 1;
        v30 = *a2;
        v31 = 1;
        *(_OWORD *)v32 = *((_OWORD *)a2 + 1);
LABEL_55:
        v11 = a2[4] * v7;
LABEL_56:
        *(_QWORD *)&v32[16] = v11;
LABEL_57:
        ZinReductionLayerUtils::CreateReshapeReductionReshape(a1, (uint64_t)&v30, a3, a6);
      }
      break;
    default:
      return 0;
  }
  return v6;
}

void ZinReductionLayerUtils::CreateReshapeReductionReshape(const ZinIrReductionInfo *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13[15];
  void *__p;
  void *v15;
  int v16;
  _QWORD v17[43];

  v17[42] = *MEMORY[0x24BDAC8D0];
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v13, a2);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)&v16, (ZinIrReshapeUnitInfo *)v13);
  v7 = a4[1];
  if (v7 >= a4[2])
  {
    v8 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
    v8 = v7 + 344;
    a4[1] = v7 + 344;
  }
  a4[1] = v8;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  v13[0] = off_24C01FAB8;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v13);
  v16 = 20;
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)v17, a1);
  v9 = a4[1];
  if (v9 >= a4[2])
  {
    v10 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
    v10 = v9 + 344;
    a4[1] = v9 + 344;
  }
  a4[1] = v10;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v13, a3);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)&v16, (ZinIrReshapeUnitInfo *)v13);
  v11 = a4[1];
  if (v11 >= a4[2])
  {
    v12 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
    v12 = v11 + 344;
    a4[1] = v11 + 344;
  }
  a4[1] = v12;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v16);
  v13[0] = off_24C01FAB8;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v13);
}

void sub_206F66230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a27);
  ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&a9);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::CreateTransposeReductionTranspose(const ZinIrReductionInfo *a1, unsigned int a2, int a3, uint64_t *a4)
{
  char v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  void (**v15)(ZinIrTransposeUnitInfo *__hidden);
  uint64_t v16;
  void *__p;
  void *v18;
  _BYTE v19[344];
  uint64_t v20;

  v5 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v15, 2u, a2, a3);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v19, (ZinIrTransposeUnitInfo *)&v15);
  v15 = off_24C021A98;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v15);
  v7 = a4[1];
  if (v7 >= a4[2])
  {
    v8 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
    v8 = v7 + 344;
    a4[1] = v7 + 344;
  }
  a4[1] = v8;
  v9 = *((_QWORD *)a1 + 3);
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)v14, a1);
  v14[3] = v9 & 0x1B | (1 << v5) & 0x1F;
  LODWORD(v15) = 20;
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)&v16, (const ZinIrReductionInfo *)v14);
  v10 = a4[1];
  if (v10 >= a4[2])
  {
    v11 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v15);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v15);
    v11 = v10 + 344;
    a4[1] = v10 + 344;
  }
  a4[1] = v11;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v15);
  v12 = a4[1];
  if (v12 >= a4[2])
  {
    v13 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
    v13 = v12 + 344;
    a4[1] = v12 + 344;
  }
  a4[1] = v13;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v14);
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
}

void sub_206F66440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a9);
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a59);
  _Unwind_Resume(a1);
}

void sub_206F664A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)va);
  JUMPOUT(0x206F66498);
}

void sub_206F664B0()
{
  JUMPOUT(0x206F66498);
}

uint64_t ZinReductionLayerUtils::CreateReductionByPeelingOffADimension(int8x8_t *a1, uint64_t a2, uint64_t *a3)
{
  int8x8_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[56];
  int8x8_t v17;
  _QWORD v18[43];

  v18[42] = *MEMORY[0x24BDAC8D0];
  v17 = a1[3];
  v14[0] = 1;
  if ((unint64_t)std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,16ul>,true,BOOL,std::__identity,0>(&v17, 0, (uint64_t)&v17, 5u, v14) <= 1)ZinAssertImpl("The reduction should be multi-dimension reduction");
  v5 = a1[3];
  if ((v5.i8[0] & 0x10) != 0)
  {
    v6 = 16;
  }
  else if ((v5.i8[0] & 4) != 0)
  {
    v6 = 4;
  }
  else
  {
    if ((v5.i8[0] & 1) != 0)
      v6 = 1;
    else
      v6 = 16;
    if ((v5.i8[0] & 5) == 0)
    {
      if ((v5.i8[0] & 8) != 0)
        v6 = 8;
      if ((v5.i8[0] & 0xD) == 0)
      {
        if ((v5.i8[0] & 2) != 0)
          v6 = 2;
        if ((v5.i8[0] & 0xF) == 0)
          ZinAssertImpl("Reduction peeling failed.");
      }
    }
  }
  v7 = a1[1].i32[1];
  v17 = (int8x8_t)v6;
  ZinIrReductionInfo::ZinIrReductionInfo((uint64_t)v16, v7, &v17, 0, 0, 0, 0, 1.0, 0.0);
  v17.i32[0] = 20;
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)v18, (const ZinIrReductionInfo *)v16);
  v8 = a3[1];
  if (v8 >= a3[2])
  {
    v9 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a3, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a3[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
    v9 = v8 + 344;
    a3[1] = v8 + 344;
  }
  a3[1] = v9;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
  v10 = a1[3];
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)v14, (const ZinIrReductionInfo *)a1);
  v15 = v10.i32[0] & (v6 ^ 0x1F);
  v17.i32[0] = 20;
  ZinIrReductionInfo::ZinIrReductionInfo((ZinIrReductionInfo *)v18, (const ZinIrReductionInfo *)v14);
  v11 = a3[1];
  if (v11 >= a3[2])
  {
    v12 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a3, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a3[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
    v12 = v11 + 344;
    a3[1] = v11 + 344;
  }
  a3[1] = v12;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v17);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v14);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v16);
  return 1;
}

void sub_206F666D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a23);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a9);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a16);
  _Unwind_Resume(a1);
}

BOOL ZinReductionLayerUtils::IsBetterToMapToNE(int8x8_t *this, const ZinIrReductionInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 1) != 0)
    return 0;
  v10 = v2;
  v11 = v3;
  v6 = this[1].i32[1] - 1;
  v9 = 2;
  v7 = ZinIrReductionInfo::CheckDimensionOnly(this, &v9);
  v8 = v6 < 2 && v7;
  return this[6].i8[1] || v8;
}

BOOL ZinIrReductionInfo::CheckDimensionOnly(int8x8_t *a1, _DWORD *a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  char v5;

  if (*a2 >= 5u)
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  v3 = a1[3];
  v2 = a1 + 3;
  if (((*(_QWORD *)&v3 >> *a2) & 1) == 0)
    return 0;
  v5 = 1;
  return std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,16ul>,true,BOOL,std::__identity,0>(v2, 0, (uint64_t)v2, 5u, &v5) == 1;
}

BOOL ZinReductionLayerUtils::IsValidPostScaleForPE(ZinReductionLayerUtils *this, const ZinIrHalParameters *a2, const ZinTensorDimensions *a3, const ZinIrReductionInfo *a4)
{
  float v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*((_BYTE *)this + 1138))
    return 1;
  v5 = *((float *)a3 + 8);
  if (*((_DWORD *)a3 + 3) == 3)
  {
    v7 = *((_OWORD *)a2 + 1);
    v8 = *(_OWORD *)a2;
    v9 = v7;
    v10 = *((_QWORD *)a2 + 4);
    ZinIrReductionInfo::ComputeOutputDimensions((uint64_t)a3, (ZinTensorDimensions *)&v8);
    v5 = v5
       / (float)(unint64_t)(*((_QWORD *)a2 + 3)
                                 / *((uint64_t *)&v9 + 1)
                                 * (*((_QWORD *)a2 + 2)
                                  / (uint64_t)v9)
                                 * (*((_QWORD *)a2 + 4)
                                  / v10)
                                 * (*((_QWORD *)a2 + 1)
                                  / *((uint64_t *)&v8 + 1))
                                 * (*(_QWORD *)a2
                                  / (uint64_t)v8));
  }
  return v5 != 0.0 && (LODWORD(v5) & 0x7F800000) != 0;
}

uint64_t ZinReductionLayerUtils::CreateReductionDecomposition(int8x8_t *this, int8x16_t *a2, uint64_t a3, uint64_t *a4, int a5, ZinIrReductionInfo *a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v13;
  int v14;
  const ZinIrReductionInfo *v16;
  BOOL v17;
  int v18;
  int16x8_t v19;
  int8x8_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t result;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35[4];
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *__p;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  int8x8_t v52[44];

  v52[43] = *(int8x8_t *)MEMORY[0x24BDAC8D0];
  v13 = *a4;
  *a8 = 0;
  if (*(_BYTE *)(v13 + 1113))
  {
    v14 = (int)a6;
    if (!ZinReductionLayerUtils::IsBetterToMapToNE(this, a6))
    {
      if (!v14
        || (*(_BYTE *)(v13 + 1124) ? (v17 = (this[1].i32[1] & 0xFFFFFFFE) == 4) : (v17 = 0),
            !v17 ? (v18 = 0) : (v18 = 1),
            (this[3].i8[0] & 0x10) != 0 || v18))
      {
        if (ZinReductionLayerUtils::IsValidPostScaleForPE((ZinReductionLayerUtils *)v13, (const ZinIrHalParameters *)a2, (const ZinTensorDimensions *)this, v16))
        {
          v20 = this[3];
          if (a2[2].i64[0] == 1)
            *(_QWORD *)&v20 |= 2uLL;
          if (a2[1].i64[0] == 1)
            *(_QWORD *)&v20 |= 8uLL;
          if (a2[1].i64[1] == 1)
            *(_QWORD *)&v20 |= 0x10uLL;
          if (*(_QWORD *)&v20 == 26
            || (ZinReductionLayerUtils::PEReductionWithDimensionBalancer((unsigned __int8 *)this, a2, v13, a5, a7, v19) & 1) != 0
            || (ZinReductionLayerUtils::PEReductionWithoutDimensionBalancer((const ZinIrReductionInfo *)this, a2, a3, v13, a5, (uint64_t *)a7) & 1) != 0)
          {
            return 1;
          }
        }
      }
    }
  }
  if ((this[1].i32[1] & 0xFFFFFFFE) == 4)
    ZinAssertImpl("Reduction with mode kSpatialArgMin and kSpatialArgMax should be mapped to PE but failed.");
  v52[0] = this[3];
  v34 = 1;
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,16ul>,true,BOOL,std::__identity,0>(v52, 0, (uint64_t)v52, 5u, &v34) != 1)
  {
    ZinReductionLayerUtils::CreateReductionByPeelingOffADimension(this, v21, (uint64_t *)a7);
    return 1;
  }
  v22 = this[3];
  if ((v22.i8[0] & 4) != 0)
  {
    ZinReductionLayerUtils::HandleChannelReduction(this[1].i32[1], a2->i64[1], (uint64_t *)a7, v13);
LABEL_55:
    result = 1;
    goto LABEL_56;
  }
  if ((v22.i8[0] & 8) != 0)
  {
    v24 = this[1].i32[1];
    if ((v24 - 1) > 1)
      goto LABEL_40;
    v25 = *(_DWORD **)(v13 + 1488);
    v26 = *(_DWORD **)(v13 + 1496);
    if (v25 != v26)
    {
      while ((*v25 & 0xFFFFFFFE) != 4)
      {
        if (++v25 == v26)
          goto LABEL_47;
      }
    }
    if (v25 == v26)
    {
LABEL_47:
      v30 = 1;
      if (v24 != 3)
      {
        if (v24 != 2)
          ZinAssertImpl("Error: can not be decomposed into a supported pooling layer type for the reduction layer.");
        v30 = 2;
      }
      v47 = 0;
      v46 = 0;
      v48 = 0;
      v32 = a2->i64[1];
      v31 = a2[1].i64[0];
      v36 = 0;
      v37 = 0u;
      v38 = 0u;
      v35[0] = &unk_24C01CC78;
      memset(&v35[1], 0, 24);
      LODWORD(__p) = v30;
      v41 = 1;
      v42 = v31;
      v43 = 1;
      v44 = 0x100000001;
      v45 = 1;
      v49 = 0;
      v50 = v30;
      v51 = 1065353216;
      v39 = v32;
      ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v52, (ZinIrPoolUnitInfo *)v35);
      ZinIrUnitInfo::~ZinIrUnitInfo(v35);
      v29 = *(_QWORD *)(a7 + 8);
      if (v29 >= *(_QWORD *)(a7 + 16))
      {
LABEL_53:
        v33 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>((uint64_t *)a7, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v52);
        goto LABEL_54;
      }
    }
    else
    {
LABEL_40:
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v35, 2u, 3u, a5);
      ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v52, (ZinIrTransposeUnitInfo *)v35);
      v35[0] = off_24C021A98;
      if (__p)
      {
        v41 = (uint64_t)__p;
        operator delete(__p);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v35);
      v27 = *(_QWORD *)(a7 + 8);
      if (v27 >= *(_QWORD *)(a7 + 16))
      {
        v28 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>((uint64_t *)a7, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v52);
      }
      else
      {
        ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(*(ZinReductionLayerUtils::ReductionDecomposedDesc **)(a7 + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v52);
        v28 = v27 + 344;
        *(_QWORD *)(a7 + 8) = v27 + 344;
      }
      *(_QWORD *)(a7 + 8) = v28;
      ZinReductionLayerUtils::HandleChannelReduction(v24, a2[1].i64[0], (uint64_t *)a7, v13);
      v29 = *(_QWORD *)(a7 + 8);
      if (v29 >= *(_QWORD *)(a7 + 16))
        goto LABEL_53;
    }
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(*(ZinReductionLayerUtils::ReductionDecomposedDesc **)(a7 + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v52);
    v33 = v29 + 344;
    *(_QWORD *)(a7 + 8) = v29 + 344;
LABEL_54:
    *(_QWORD *)(a7 + 8) = v33;
    ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v52);
    goto LABEL_55;
  }
  if ((v22.i8[0] & 2) != 0)
  {
    ZinReductionLayerUtils::HandleDepthReduction(this[1].i32[1], (uint64_t)a2, a5, (uint64_t *)a7, v13);
    goto LABEL_55;
  }
  if ((v22.i8[0] & 0x10) != 0)
  {
    ZinReductionLayerUtils::HandleWidthReduction(this[1].i32[1], (uint64_t)a2, a5, (uint64_t *)a7, v13);
    goto LABEL_55;
  }
  if ((v22.i8[0] & 1) != 0)
  {
    ZinReductionLayerUtils::HandleBatchReduction(this[1].i32[1], a2->i64, a5, (uint64_t *)a7, v13);
    goto LABEL_55;
  }
  result = 0;
LABEL_56:
  *a8 = 1;
  return result;
}

void sub_206F66D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a31);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::HandleChannelReduction(int a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  void (**v25)(ZinIrKernelUnitInfo *__hidden);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  __int128 v35;
  void *v36[4];
  __int128 __p;
  uint64_t v38;
  int v39;
  char v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[32];
  _BYTE v49[32];
  _BYTE v50[28];
  int v51;
  _QWORD v52[30];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a4 + 368);
  if (v5 < a2)
    ZinAssertImpl("Error: channel size exceeds limit [%zu vs. %zu]", a2, v5);
  if ((a1 - 1) > 1)
  {
    if (!a1)
    {
      v29 = 0;
      v27 = 0;
      v28 = 0;
      v30 = 0u;
      v31 = 0u;
      v34.i32[0] = -1;
      v34.i64[1] = -1;
      LODWORD(v35) = -1;
      *((_QWORD *)&v35 + 1) = -1;
      memset(v36, 0, sizeof(v36));
      __p = 0u;
      v38 = 0;
      v39 = 1;
      v40 = 0;
      v41 = 0;
      v42 = -1;
      v43 = -1;
      v44 = -1;
      v45 = -1;
      v46 = 0x3F80000000000006;
      v25 = off_24C01CAD8;
      v26 = 0;
      v48[4] = 0;
      *(_QWORD *)&v18 = 0x100000001;
      *((_QWORD *)&v18 + 1) = 0x100000001;
      *(_OWORD *)&v49[8] = v18;
      *(_QWORD *)&v49[24] = 0x100000001;
      memset(v50, 0, 24);
      *(_DWORD *)&v50[24] = 1;
      v47 = 0;
      *(_DWORD *)v48 = 1;
      v33 = 0x1E0000000FLL;
      *(int64x2_t *)&v48[8] = vdupq_n_s64(1uLL);
      *(_QWORD *)&v48[24] = 1;
      *(_QWORD *)v49 = 1;
      v32 = 1;
      v51 = 1;
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)v52, (const ZinIrKernelUnitInfo *)&v25);
      v19 = *(_OWORD *)v49;
      v20 = *(_OWORD *)v50;
      v21[18] = *(_OWORD *)&v49[16];
      v21[19] = v20;
      v54 = *(_OWORD *)&v50[12];
      v22 = *(_OWORD *)v48;
      v21[16] = *(_OWORD *)&v48[16];
      v21[17] = v19;
      v52[0] = off_24C01CAD8;
      v53 = v22;
      v23 = a3[1];
      if (v23 >= a3[2])
      {
        v24 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a3, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
      }
      else
      {
        ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a3[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
        v24 = v23 + 344;
        a3[1] = v23 + 344;
      }
      a3[1] = v24;
      ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
      v25 = off_24C01ED88;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v36[1])
      {
        v36[2] = v36[1];
        operator delete(v36[1]);
      }
      goto LABEL_26;
    }
    if (a1 != 3)
      return;
    v29 = 0;
    v27 = 0;
    v28 = 0;
    v30 = 0u;
    v31 = 0u;
    v34.i32[0] = -1;
    v34.i64[1] = -1;
    LODWORD(v35) = -1;
    *((_QWORD *)&v35 + 1) = -1;
    memset(v36, 0, sizeof(v36));
    __p = 0u;
    v38 = 0;
    v39 = 1;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v43 = -1;
    v44 = -1;
    v45 = -1;
    v46 = 0x3F80000000000006;
    v25 = off_24C01CAD8;
    v26 = 0;
    v48[4] = 0;
    *(_QWORD *)&v10 = 0x100000001;
    *((_QWORD *)&v10 + 1) = 0x100000001;
    *(_OWORD *)&v49[8] = v10;
    *(_QWORD *)&v49[24] = 0x100000001;
    memset(v50, 0, 24);
    *(_DWORD *)&v50[24] = 1;
    v47 = 0;
    *(_DWORD *)v48 = 1;
    v33 = 0x1E0000000FLL;
    *(_QWORD *)&v48[24] = 1;
    *(_QWORD *)v49 = 1;
    v32 = 1;
    v51 = 1;
    *(int64x2_t *)&v48[8] = vdupq_n_s64(1uLL);
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)v52, (const ZinIrKernelUnitInfo *)&v25);
    v11 = *(_OWORD *)v49;
    v12 = *(_OWORD *)v50;
    v13[18] = *(_OWORD *)&v49[16];
    v13[19] = v12;
    v54 = *(_OWORD *)&v50[12];
    v14 = *(_OWORD *)v48;
    v13[16] = *(_OWORD *)&v48[16];
    v13[17] = v11;
    v52[0] = off_24C01CAD8;
    v53 = v14;
    v15 = a3[1];
    if (v15 >= a3[2])
    {
      v16 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a3, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
    }
    else
    {
      ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a3[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
      v16 = v15 + 344;
      a3[1] = v15 + 344;
    }
    a3[1] = v16;
    ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
    v25 = off_24C01ED88;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v36[1])
    {
      v36[2] = v36[1];
      operator delete(v36[1]);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v25);
    v30 = 0u;
    v31 = 0u;
    *(_QWORD *)((char *)&v35 + 4) = -1;
    *(void **)((char *)&v36[1] + 4) = (void *)-1;
    v29 = 0;
    v27 = 0;
    v28 = 0;
    v32 = -1;
    v25 = (void (**)(ZinIrKernelUnitInfo *__hidden))&unk_24C01BA60;
    v26 = 0;
    LOBYTE(v35) = 0;
    v36[0] = (void *)-1;
    LOBYTE(v36[1]) = 0;
    v36[3] = (void *)-1;
    LOWORD(v33) = 1;
    *((float *)&v33 + 1) = 1.0 / (float)a2;
    v34.i32[0] = 4;
    v34.i16[2] = 1;
    v34.i64[1] = 0x400000000;
    ZinElementWiseLayerUtils::ElementWiseDecomposedDesc::ElementWiseDecomposedDesc((ZinElementWiseLayerUtils::ElementWiseDecomposedDesc *)&v51, (ZinIrGOCUnitInfo *)&v25);
    v9 = a3[1];
    if (v9 < a3[2])
      goto LABEL_24;
  }
  else
  {
    *(void **)((char *)&v36[1] + 4) = 0;
    *(void **)((char *)v36 + 4) = 0;
    if (a1 == 1)
      v7 = 4;
    else
      v7 = 2;
    *(void **)((char *)&v36[2] + 4) = 0;
    if (a1 == 1)
      v8 = 5;
    else
      v8 = 3;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0u;
    v31 = 0u;
    v25 = (void (**)(ZinIrKernelUnitInfo *__hidden))&unk_24C01CC78;
    v26 = 0;
    LODWORD(v33) = v8;
    v34 = vdupq_n_s64(1uLL);
    *(_QWORD *)&v35 = 1;
    *((_QWORD *)&v35 + 1) = 0x100000001;
    LODWORD(v36[0]) = 1;
    BYTE4(v36[3]) = 0;
    LODWORD(__p) = v7;
    *(_QWORD *)((char *)&__p + 4) = 1065353216;
    v32 = 1;
    ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)&v51, (ZinIrPoolUnitInfo *)&v25);
    v9 = a3[1];
    if (v9 < a3[2])
    {
LABEL_24:
      ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a3[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
      v17 = v9 + 344;
      a3[1] = v9 + 344;
      goto LABEL_25;
    }
  }
  v17 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a3, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
LABEL_25:
  a3[1] = v17;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&v51);
LABEL_26:
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v25);
}

void sub_206F67290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a53);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a11);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::HandleDepthReduction(int a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13[10];
  void *__p;
  void *v15;
  _BYTE v16[344];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v13, 2u, 1u, a3);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v16, (ZinIrTransposeUnitInfo *)v13);
  v13[0] = off_24C021A98;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v13);
  v9 = a4[1];
  if (v9 >= a4[2])
  {
    v10 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
    v10 = v9 + 344;
    a4[1] = v9 + 344;
  }
  a4[1] = v10;
  ZinReductionLayerUtils::HandleChannelReduction(a1, *(_QWORD *)(a2 + 32), a4, a5);
  v11 = a4[1];
  if (v11 >= a4[2])
  {
    v12 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
    v12 = v11 + 344;
    a4[1] = v11 + 344;
  }
  a4[1] = v12;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
}

void sub_206F6744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v15 + 8) = v16;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)va);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::HandleWidthReduction(int a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5)
{
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18[4];
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *__p;
  void *v24;
  int64x2_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  _BYTE v34[344];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a5 + 1880))
  {
    if ((a1 - 1) > 1)
      goto LABEL_8;
    v9 = *(_DWORD **)(a5 + 1488);
    v10 = *(_DWORD **)(a5 + 1496);
    if (v9 != v10)
    {
      while ((*v9 & 0xFFFFFFFE) != 4)
      {
        if (++v9 == v10)
          goto LABEL_12;
      }
    }
    if (v9 != v10)
    {
LABEL_8:
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v18, 2u, 4u, a3);
      ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v34, (ZinIrTransposeUnitInfo *)v18);
      v18[0] = off_24C021A98;
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v18);
      v11 = a4[1];
      if (v11 >= a4[2])
      {
        v12 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
      }
      else
      {
        ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
        v12 = v11 + 344;
        a4[1] = v11 + 344;
      }
      a4[1] = v12;
      ZinReductionLayerUtils::HandleChannelReduction(a1, *(_QWORD *)(a2 + 24), a4, a5);
      v16 = a4[1];
      if (v16 < a4[2])
        goto LABEL_19;
LABEL_20:
      v17 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
      goto LABEL_21;
    }
  }
LABEL_12:
  v13 = 1;
  if (a1 != 3)
  {
    if (a1 != 2)
      ZinAssertImpl("Error: can not be decomposed into a supported pooling layer type for the reduction layer.");
    v13 = 2;
  }
  v14 = *(void **)(a2 + 24);
  v29 = 0;
  v28 = 0;
  v30 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  v19 = 0;
  v20 = 0u;
  v21 = 0u;
  v18[0] = &unk_24C01CC78;
  memset(&v18[1], 0, 24);
  LODWORD(__p) = v13;
  v24 = v14;
  v25 = vdupq_n_s64(1uLL);
  v26 = 0x100000001;
  v27 = 1;
  v31 = 0;
  v32 = v13;
  v33 = 1065353216;
  v22 = v15;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v34, (ZinIrPoolUnitInfo *)v18);
  ZinIrUnitInfo::~ZinIrUnitInfo(v18);
  v16 = a4[1];
  if (v16 >= a4[2])
    goto LABEL_20;
LABEL_19:
  ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
  v17 = v16 + 344;
  a4[1] = v16 + 344;
LABEL_21:
  a4[1] = v17;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v34);
}

void sub_206F676E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v31 + 8) = v32;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)&a31);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::HandleBatchReduction(int a1, uint64_t *a2, int a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13[10];
  void *__p;
  void *v15;
  _BYTE v16[344];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v13, 2u, 0, a3);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v16, (ZinIrTransposeUnitInfo *)v13);
  v13[0] = off_24C021A98;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v13);
  v9 = a4[1];
  if (v9 >= a4[2])
  {
    v10 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
    v10 = v9 + 344;
    a4[1] = v9 + 344;
  }
  a4[1] = v10;
  ZinReductionLayerUtils::HandleChannelReduction(a1, *a2, a4, a5);
  v11 = a4[1];
  if (v11 >= a4[2])
  {
    v12 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(a4, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)a4[1], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
    v12 = v11 + 344;
    a4[1] = v11 + 344;
  }
  a4[1] = v12;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v16);
}

void sub_206F67878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v15 + 8) = v16;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)va);
  _Unwind_Resume(a1);
}

void ZinReductionLayerUtils::TryTranspose(BOOL,unsigned int,std::array<BOOL,5ul> &,std::array<long,5ul> &,std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc> &,std::list<ZinReductionLayerUtils::ReductionDecomposedDesc> &,std::array<BOOL,5ul> const&,std::array<unsigned long,5ul> const&,ZinTensorFormat)::$_0::operator()(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16[10];
  void *__p;
  void *v18;
  _BYTE v19[344];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8 * a2);
  *(_QWORD *)(*a1 + 8 * a2) = *(_QWORD *)(*a1 + 8 * a3);
  *(_QWORD *)(v4 + 8 * a3) = v5;
  v6 = a1[1];
  LOBYTE(v5) = *(_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a2) = *(_BYTE *)(v6 + a3);
  *(_BYTE *)(v6 + a3) = v5;
  if (a2 >= 5)
    v7 = 5;
  else
    v7 = 4 - a2;
  if (a3 >= 5)
    v8 = 5;
  else
    v8 = 4 - a3;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v16, v7, v8, *(_DWORD *)a1[2]);
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v19, (ZinIrTransposeUnitInfo *)v16);
  v16[0] = off_24C021A98;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v16);
  v9 = a1[3];
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 >= *(_QWORD *)(v9 + 16))
  {
    v11 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>((uint64_t *)a1[3], (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(*(ZinReductionLayerUtils::ReductionDecomposedDesc **)(v9 + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
    v11 = v10 + 344;
    *(_QWORD *)(v9 + 8) = v10 + 344;
  }
  *(_QWORD *)(v9 + 8) = v11;
  v12 = a1[4];
  v13 = std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::__create_node[abi:ne180100]<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(v12, 0, 0, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
  *v13 = v12;
  v14 = *(_QWORD **)(v12 + 8);
  v13[1] = v14;
  *v14 = v13;
  v15 = *(_QWORD *)(v12 + 16) + 1;
  *(_QWORD *)(v12 + 8) = v13;
  *(_QWORD *)(v12 + 16) = v15;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)v19);
}

void sub_206F67A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v15 + 8) = v16;
  ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(uint64_t *a1, const ZinReductionLayerUtils::ReductionDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinReductionLayerUtils::ReductionDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinReductionLayerUtils::ReductionDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinReductionLayerUtils::ReductionDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F67B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinReductionLayerUtils::ReductionDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

ZinReductionLayerUtils::ReductionDecomposedDesc *ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(ZinReductionLayerUtils::ReductionDecomposedDesc *this, const ZinReductionLayerUtils::ReductionDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 19)
  {
    switch(v4)
    {
      case 20:
        ZinIrReductionInfo::ZinIrReductionInfo((ZinReductionLayerUtils::ReductionDecomposedDesc *)((char *)this + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)((char *)a2 + 8));
        break;
      case 21:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v13 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v13;
        }
        v27 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v27;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        v28 = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 11) = 0;
        *(_OWORD *)((char *)this + 72) = v28;
        *((_QWORD *)this + 1) = off_24C021A98;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
        break;
      case 22:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v6 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v6;
        }
        v18 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v18;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 1) = off_24C01FAB8;
        v19 = *(_OWORD *)((char *)a2 + 88);
        v20 = *(_OWORD *)((char *)a2 + 104);
        v21 = *((_QWORD *)a2 + 15);
        *((_QWORD *)this + 16) = 0;
        *((_QWORD *)this + 15) = v21;
        *(_OWORD *)((char *)this + 104) = v20;
        *(_OWORD *)((char *)this + 88) = v19;
        *((_QWORD *)this + 17) = 0;
        *((_QWORD *)this + 18) = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)this + 16, *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 1:
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinReductionLayerUtils::ReductionDecomposedDesc *)((char *)this + 8), (const ZinReductionLayerUtils::ReductionDecomposedDesc *)((char *)a2 + 8));
        *((_QWORD *)this + 1) = off_24C01CAD8;
        v7 = *(_OWORD *)((char *)a2 + 248);
        v8[16] = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)this + 248) = v7;
        v9 = *(_OWORD *)((char *)a2 + 280);
        v10 = *(_OWORD *)((char *)a2 + 296);
        v11 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
        v8[18] = v10;
        v8[19] = v11;
        v8[17] = v9;
        break;
      case 2:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v12 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v12;
        }
        v22 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v22;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 1) = &unk_24C01CC78;
        v23 = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)((char *)this + 88) = v23;
        v24 = *(_OWORD *)((char *)a2 + 120);
        v25 = *(_OWORD *)((char *)a2 + 136);
        v26 = *(_OWORD *)((char *)a2 + 152);
        *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
        *(_OWORD *)((char *)this + 152) = v26;
        *(_OWORD *)((char *)this + 136) = v25;
        *(_OWORD *)((char *)this + 120) = v24;
        break;
      case 8:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v5 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v5;
        }
        v14 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v14;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 1) = &unk_24C01BA60;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
        v15 = *(_OWORD *)((char *)a2 + 104);
        v16 = *(_OWORD *)((char *)a2 + 120);
        v17 = *(_OWORD *)((char *)a2 + 136);
        *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
        *(_OWORD *)((char *)this + 136) = v17;
        *(_OWORD *)((char *)this + 120) = v16;
        *(_OWORD *)((char *)this + 104) = v15;
        break;
    }
  }
  return this;
}

void sub_206F67F14(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReductionLayerUtils::ReductionDecomposedDesc>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReductionLayerUtils::ReductionDecomposedDesc>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>,std::reverse_iterator<ZinReductionLayerUtils::ReductionDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinReductionLayerUtils::ReductionDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinReductionLayerUtils::ReductionDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc(v12, (const ZinReductionLayerUtils::ReductionDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinReductionLayerUtils::ReductionDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::__create_node[abi:ne180100]<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(uint64_t a1, uint64_t a2, uint64_t a3, const ZinReductionLayerUtils::ReductionDecomposedDesc *a4)
{
  _QWORD *v7;

  v7 = operator new(0x168uLL);
  *v7 = a2;
  v7[1] = a3;
  ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)(v7 + 2), a4);
  return v7;
}

void sub_206F680F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>>::operator=[abi:ne180100](uint64_t **a1, const ZinReductionLayerUtils::ReductionDecomposedDesc *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = std::vector<ZinReductionLayerUtils::ReductionDecomposedDesc>::__push_back_slow_path<ZinReductionLayerUtils::ReductionDecomposedDesc const&>(*a1, a2);
  }
  else
  {
    ZinReductionLayerUtils::ReductionDecomposedDesc::ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)(*a1)[1], a2);
    v5 = v4 + 344;
    v3[1] = v4 + 344;
  }
  v3[1] = v5;
  return a1;
}

void sub_206F68164(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__list_imp<ZinReductionLayerUtils::ReductionDecomposedDesc>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        ZinReductionLayerUtils::ReductionDecomposedDesc::~ReductionDecomposedDesc((ZinReductionLayerUtils::ReductionDecomposedDesc *)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void ZinAneLinker::ZinAneLinker(ZinAneLinker *this, int a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = a2;
  *((_QWORD *)this + 4) = 0;
}

void ZinAneLinker::~ZinAneLinker(ZinComputeMutableProgramWrapper **this)
{
  ZinComputeMutableProgramWrapper **v2;

  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 4, 0);
  v2 = this;
  std::vector<std::unique_ptr<ZinComputeMutableProgramWrapper>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

BOOL ZinAneLinker::AddObject(uint64_t a1, ZinComputeMutableProgramWrapper **a2)
{
  int v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int CpuSubType;
  unint64_t v15;
  ZinComputeMutableProgramWrapper **v16;
  ZinComputeMutableProgramWrapper *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  ZinComputeMutableProgramWrapper **v38;
  char *v39;
  ZinComputeMutableProgramWrapper *v40;
  ZinComputeMutableProgramWrapper **v41;
  ZinComputeMutableProgramWrapper **v42;
  ZinComputeMutableProgramWrapper *v43;
  int64x2_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ZinComputeMutableProgramWrapper *v54;
  int Flags;
  uint64_t v56;
  int64x2_t v57;
  char *v58;
  uint64_t v59;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    CpuSubType = ZinComputeMutableProgramWrapper::GetCpuSubType(*a2);
    if (CpuSubType >= 0xC && CpuSubType != 15)
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneLinker::AddObject(result, v26, v27, v28, v29, v30, v31, v32);
        return 0;
      }
      return result;
    }
  }
  else
  {
    v4 = ZinComputeMutableProgramWrapper::GetCpuSubType(**(ZinComputeMutableProgramWrapper ***)a1);
    if (v4 != ZinComputeMutableProgramWrapper::GetCpuSubType(*a2))
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneLinker::AddObject(result, v6, v7, v8, v9, v10, v11, v12);
        return 0;
      }
      return result;
    }
  }
  if (ZinComputeMutableProgramWrapper::GetFileType(*a2) == 1)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(ZinComputeMutableProgramWrapper ***)(a1 + 8);
    if ((unint64_t)v16 >= v15)
    {
      v33 = ((uint64_t)v16 - *(_QWORD *)a1) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v34 = v15 - *(_QWORD *)a1;
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v59 = a1 + 16;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v36);
      else
        v37 = 0;
      v38 = (ZinComputeMutableProgramWrapper **)&v37[8 * v33];
      v39 = &v37[8 * v36];
      v58 = v39;
      v40 = *a2;
      *a2 = 0;
      *v38 = v40;
      v18 = v38 + 1;
      v57.i64[1] = (uint64_t)(v38 + 1);
      v42 = *(ZinComputeMutableProgramWrapper ***)a1;
      v41 = *(ZinComputeMutableProgramWrapper ***)(a1 + 8);
      if (v41 == *(ZinComputeMutableProgramWrapper ***)a1)
      {
        v44 = vdupq_n_s64((unint64_t)v41);
      }
      else
      {
        do
        {
          v43 = *--v41;
          *v41 = 0;
          *--v38 = v43;
        }
        while (v41 != v42);
        v44 = *(int64x2_t *)a1;
        v18 = (_QWORD *)v57.i64[1];
        v39 = v58;
      }
      *(_QWORD *)a1 = v38;
      *(_QWORD *)(a1 + 8) = v18;
      v57 = v44;
      v45 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v39;
      v58 = v45;
      v56 = v44.i64[0];
      std::__split_buffer<std::unique_ptr<ZinComputeMutableProgramWrapper>>::~__split_buffer((uint64_t)&v56);
    }
    else
    {
      v17 = *a2;
      *a2 = 0;
      *v16 = v17;
      v18 = v16 + 1;
    }
    *(_QWORD *)(a1 + 8) = v18;
    if ((_QWORD *)((char *)v18 - *(_QWORD *)a1) == (_QWORD *)8)
    {
      v46 = ZinComputeMutableProgramWrapper::GetProgramRT(**(ZinComputeMutableProgramWrapper ***)a1) != 0;
      if (!ZinAneLinker::InitializeExecutableProgram((ZinAneLinker *)a1, v46))
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
        {
          ZinAneLinker::AddObject(result, v47, v48, v49, v50, v51, v52, v53);
          return 0;
        }
        return result;
      }
    }
    else
    {
      v54 = *(ZinComputeMutableProgramWrapper **)(a1 + 32);
      Flags = ZinComputeMutableProgramWrapper::GetFlags(v54);
      ZinComputeMutableProgramWrapper::SetFlags(v54, Flags & 0xFFFFFFDF);
    }
    return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneLinker::AddObject(result, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  return result;
}

BOOL ZinAneLinker::InitializeExecutableProgram(ZinAneLinker *this, char a2)
{
  int32_t CpuSubType;
  uint64_t *v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_header_64 v16;

  CpuSubType = ZinComputeMutableProgramWrapper::GetCpuSubType(**(ZinComputeMutableProgramWrapper ***)this);
  v16.magic = ZinComputeMutableProgramWrapper::GetMagicNumber(**(ZinComputeMutableProgramWrapper ***)this);
  v16.cputype = 128;
  v16.cpusubtype = CpuSubType;
  *(_OWORD *)&v16.filetype = xmmword_207AABDC0;
  v16.reserved = 0;
  v5 = (uint64_t *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v6 = ZinComputeMutableProgramWrapper::Make(v5, (uint64_t)&v16, a2);
  if (v6)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinAneLinker::InitializeExecutableProgram(v7, v8, v9, v10, v11, v12, v13, v14);
    ZinComputeMutableProgramWrapper::~ZinComputeMutableProgramWrapper((ZinComputeMutableProgramWrapper *)v5);
    MEMORY[0x20BD002F8]();
  }
  else
  {
    std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100]((ZinComputeMutableProgramWrapper **)this + 4, (ZinComputeMutableProgramWrapper *)v5);
  }
  return v6 == 0;
}

void sub_206F68544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100]((ZinComputeMutableProgramWrapper **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinAneLinker::CheckSymbol(ZinAneLinker *this)
{
  ZinComputeMutableProgramWrapper *v2;
  unint64_t v3;
  NSObject *v4;
  char v5;
  uint64_t Symbol;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (ZinComputeMutableProgramWrapper *)*((_QWORD *)this + 4);
  if (v2)
  {
    if (ZinComputeMutableProgramWrapper::GetSymbolCount(v2)
      && ZinComputeMutableProgramWrapper::GetSymbolCount(*((ZinComputeMutableProgramWrapper **)this + 4)))
    {
      v3 = 0;
      v4 = MEMORY[0x24BDACB70];
      v5 = 1;
      do
      {
        Symbol = ZinComputeMutableProgramWrapper::GetSymbol(*((ZinComputeMutableProgramWrapper **)this + 4), v3);
        if ((*(_BYTE *)(*(_QWORD *)Symbol + 4) & 0xEE) == 0)
        {
          v7 = Symbol;
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          {
            v8 = *(_QWORD *)(v7 + 8);
            *(_DWORD *)buf = 136315650;
            v11 = v8;
            v12 = 2080;
            v13 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinLinker/src/ZinLinker.cpp";
            v14 = 1024;
            v15 = 128;
            _os_log_error_impl(&dword_2069AB000, v4, OS_LOG_TYPE_ERROR, "error: undefined symbol %s, file %s, line %d\n", buf, 0x1Cu);
          }
          v5 = 0;
        }
        ++v3;
      }
      while (v3 < ZinComputeMutableProgramWrapper::GetSymbolCount(*((ZinComputeMutableProgramWrapper **)this + 4)));
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t ZinAneLinker::AssignVirtualAddress(ZinAneLinker *this)
{
  uint64_t i;
  unint64_t v3;
  uint64_t v4;
  _QWORD *Segment;
  int v6;
  size_t v7;
  void **v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t j;
  _QWORD *Symbol;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t v48;
  _BYTE v49[15];
  uint8_t v50;
  _BYTE v51[7];
  uint64_t *v52[3];
  void **v53;
  void *__p[2];
  unsigned __int8 v55;
  uint64_t v56;
  _QWORD v57[4];
  _QWORD v58[6];

  v58[4] = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 4))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "__PAGEZERO");
  v56 = 0;
  std::string::basic_string[abi:ne180100]<0>(v57, "__L2");
  v57[3] = 0x10000000;
  std::string::basic_string[abi:ne180100]<0>(v58, "__L3");
  v58[3] = 0x20000000;
  std::map<std::string,unsigned long long>::map[abi:ne180100]((uint64_t)v52, __p, 3);
  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v58[i + 2]) < 0)
      operator delete((void *)v58[i]);
  }
  v3 = 0;
  v4 = 805306368;
  while (v3 < ZinComputeMutableProgramWrapper::GetSegmentCount(*((ZinComputeMutableProgramWrapper **)this + 4)))
  {
    Segment = (_QWORD *)ZinComputeMutableProgramWrapper::GetSegment(*((ZinComputeMutableProgramWrapper **)this + 4), v3);
    std::string::basic_string[abi:ne180100]<0>(__p, "__PAGEZERO");
    v6 = (char)v55;
    if ((v55 & 0x80u) == 0)
      v7 = v55;
    else
      v7 = (size_t)__p[1];
    if (v7 == strlen((const char *)(*Segment + 8)))
    {
      if ((v55 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v9 = memcmp(v8, (const void *)(*Segment + 8), v7) == 0;
      if ((v6 & 0x80000000) == 0)
      {
LABEL_18:
        if (v9)
          goto LABEL_46;
        goto LABEL_21;
      }
    }
    else
    {
      v9 = 0;
      if (((char)v55 & 0x80000000) == 0)
        goto LABEL_18;
    }
    operator delete(__p[0]);
    if (v9)
      goto LABEL_46;
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)(*Segment + 8));
    v10 = v4;
    if (std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>((uint64_t)v52, __p))
    {
      v53 = __p;
      v10 = std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v53)[7];
    }
    v11 = *Segment;
    *(_QWORD *)(v11 + 24) = v10;
    if (*(_DWORD *)(v11 + 64))
    {
      if (*(_QWORD *)Segment[1])
      {
        v12 = 0;
        v13 = 0;
        while (1)
        {
          v14 = *(uint64_t **)(Segment[1] + 8 * v12);
          if (!v14)
            break;
          v15 = *v14;
          v16 = *(unsigned __int8 *)(*v14 + 64);
          v17 = v16 > 0x36;
          v18 = (1 << v16) & 0x40006000000000;
          v19 = v17 || v18 == 0;
          if (!v19 && !*(_QWORD *)(v15 + 40))
            *(_QWORD *)(v15 + 40) = *((unsigned int *)this + 6);
          v20 = ZinAlignPower2(v13, 1 << *(_DWORD *)(v15 + 52));
          v21 = *v14;
          *(_QWORD *)(v21 + 32) = v20 + v10;
          v13 = *(_QWORD *)(v21 + 40) + v20;
          if (++v12 >= (unint64_t)*(unsigned int *)(*Segment + 64))
          {
            if (v13 <= 1)
              v13 = 1;
            v22 = ZinAlignPower2(v13, *((unsigned int *)this + 6));
            v23 = 0;
            *(_QWORD *)(*Segment + 32) = v22;
            v4 += v22;
            goto LABEL_43;
          }
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinAneLinker::AssignVirtualAddress(&v48, v49, v26);
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinAneLinker::AssignVirtualAddress(&v50, v51, v25);
      }
      v23 = 1;
    }
    else
    {
      v24 = *((unsigned int *)this + 6);
      *(_QWORD *)(v11 + 32) = v24;
      v4 += v24;
      v23 = 4;
    }
LABEL_43:
    if ((char)v55 < 0)
      operator delete(__p[0]);
    if ((v23 | 4) != 4)
      goto LABEL_60;
LABEL_46:
    ++v3;
  }
  for (j = 0; ; ++j)
  {
    if (j >= ZinComputeMutableProgramWrapper::GetSymbolCount(*((ZinComputeMutableProgramWrapper **)this + 4)))
    {
      v30 = 1;
      goto LABEL_61;
    }
    Symbol = (_QWORD *)ZinComputeMutableProgramWrapper::GetSymbol(*((ZinComputeMutableProgramWrapper **)this + 4), j);
    if (!Symbol)
      break;
    if ((~*(unsigned __int8 *)(*Symbol + 4) & 0xE) == 0)
    {
      v29 = Symbol[4];
      if (!v29)
      {
        v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v39)
          ZinAneLinker::AssignVirtualAddress(v39, v40, v41, v42, v43, v44, v45, v46);
        goto LABEL_60;
      }
      *(_QWORD *)(*Symbol + 8) += *(_QWORD *)(*(_QWORD *)v29 + 32);
    }
  }
  v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v31)
    ZinAneLinker::AssignVirtualAddress(v31, v32, v33, v34, v35, v36, v37, v38);
LABEL_60:
  v30 = 0;
LABEL_61:
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)v52, (char *)v52[1]);
  return v30;
}

void sub_206F68AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v26;

  v26 = 0;
  while (1)
  {
    if (*(char *)(v24 + v26 + 87) < 0)
      operator delete(*(void **)(v24 + v26 + 64));
    v26 -= 32;
    if (v26 == -96)
      _Unwind_Resume(exception_object);
  }
}

void ZinAneLinker::Link(unsigned __int8 **this@<X0>, unsigned __int8 **a2@<X8>)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (ZinComputeMutableProgramWrapper::AddObjectsForCoalescing(this[4], (ZinComputeMutableProgramWrapper ***)this))
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinAneLinker::Link(v4, v5, v6, v7, v8, v9, v10, v11);
LABEL_15:
    v20 = 0;
    goto LABEL_16;
  }
  if (ZinComputeMutableProgramWrapper::Link((ZinComputeMutableProgramWrapper *)this[4]))
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinAneLinker::Link(v12, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_15;
  }
  if ((ZinAneLinker::CheckSymbol((ZinAneLinker *)this) & 1) == 0)
  {
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinAneLinker::Link(v21, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_15;
  }
  if ((ZinAneLinker::AssignVirtualAddress((ZinAneLinker *)this) & 1) == 0)
  {
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      ZinAneLinker::Link(v29, v30, v31, v32, v33, v34, v35, v36);
    goto LABEL_15;
  }
  v20 = this[4];
  if (!v20)
    ZinAssertImpl("Invalid compute program wrapper");
  this[4] = 0;
LABEL_16:
  *a2 = v20;
}

void ZinAneLinker::GetMutableProgramInUnlinkedForm(ZinAneLinker *this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinComputeMutableProgramWrapper *v13;

  if (ZinComputeMutableProgramWrapper::AddObjectsForCoalescing(*((unsigned __int8 **)this + 4), (ZinComputeMutableProgramWrapper ***)this))
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinAneLinker::Link(v4, v5, v6, v7, v8, v9, v10, v11);
    v12 = 0;
  }
  else
  {
    v13 = (ZinComputeMutableProgramWrapper *)*((_QWORD *)this + 4);
    if (!v13 || (ZinComputeMutableProgramWrapper::SetFileType(v13, 1), (v12 = *((_QWORD *)this + 4)) == 0))
      ZinAssertImpl("Invalid compute program wrapper");
    *((_QWORD *)this + 4) = 0;
  }
  *a2 = v12;
}

void std::vector<std::unique_ptr<ZinComputeMutableProgramWrapper>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  ZinComputeMutableProgramWrapper **v2;
  ZinComputeMutableProgramWrapper **v4;
  void *v5;

  v1 = *a1;
  v2 = (ZinComputeMutableProgramWrapper **)**a1;
  if (v2)
  {
    v4 = (ZinComputeMutableProgramWrapper **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<ZinComputeMutableProgramWrapper>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100]((ZinComputeMutableProgramWrapper **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string,unsigned long long>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ZinIrOpLayer *> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_206F68E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ZinAneLinker::AddObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to build a MachO header of a ComputeMutableProgram with MH_EXECUTE filetype\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect MH_OBJECT filetype from each object being added\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "error: Unsupported CPU subtype\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect consistent CPU subtype from each object being added\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneLinker::InitializeExecutableProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to call ZinComputeMutableProgramMake(.)\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneLinker::AssignVirtualAddress(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect has least 1 section inside a segment\n", a1);
}

{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect a valid section on an index in range\n", a1);
}

void ZinAneLinker::AssignVirtualAddress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect a valid symbol from symbol table\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Expect a valid owning section\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneLinker::Link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "error: Fail to call AssignVirtualAddress(.)\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "error: there are still undef symbol(s) in the coalesced symbol table\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "error: Fail to call ZinComputeMutableProgramLink(.)\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "error: Fail to call ZinComputeMutableProgramAddObjects(.)\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

__CFDictionary *ZinCreateCropResizeUnit(const ZinIrCropResizeUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *TextureCommonUnit;
  __CFArray *TextureUnitSamplingGridInfo;
  __CFString *v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;

  Unit = ZinCreateUnit(a1);
  TextureCommonUnit = ZinCreateTextureCommonUnit(a1);
  TextureUnitSamplingGridInfo = ZinCreateTextureUnitSamplingGridInfo((uint64_t)a1 + 160);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("SamplingGridInfo"), TextureUnitSamplingGridInfo);
  CFRelease(TextureUnitSamplingGridInfo);
  v5 = ZinIrCropResizeBoxModeToCFString(*((_DWORD *)a1 + 39));
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("CoordinateMode"), v5);
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if ((*((_DWORD *)a1 + 39) & 0xFFFFFFF4) != 0)
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)a1 + 192);
    CFDictionaryAddValue(TextureCommonUnit, CFSTR("CropWidth"), v7);
    CFRelease(v7);
    v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 196);
    CFDictionaryAddValue(TextureCommonUnit, CFSTR("CropHeight"), v8);
    CFRelease(v8);
  }
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 184);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputWidth"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a1 + 188);
  CFDictionaryAddValue(TextureCommonUnit, CFSTR("OutputHeight"), v10);
  CFRelease(v10);
  CFDictionaryAddValue(Unit, CFSTR("Params"), TextureCommonUnit);
  CFRelease(TextureCommonUnit);
  return Unit;
}

uint64_t ZinIrOpt::CollapseBroadcast(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char **v24;
  char v25;
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _QWORD v30[3];
  _QWORD v31[4];
  uint64_t v32;
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[40];
  _QWORD v37[23];
  _QWORD v38[4];

  v38[3] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v30, "bcast1");
  v31[0] = &off_24C002D58;
  v31[3] = v31;
  v18 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v32, &v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v33, "bcast");
  v34[0] = &off_24C002D58;
  v35 = v34;
  v17 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v36, &v17, 1);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v24 = &v19;
  v25 = 0;
  v19 = (char *)operator new(0xC0uLL);
  v20 = (uint64_t)v19;
  v21 = v19 + 192;
  v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v21, (uint64_t)v30, (uint64_t)v37, (uint64_t)v19);
  v29 = 0;
  ZinLinearPattern::ZinLinearPattern(v37, &v19, a2, 0, v28, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v37, &v22);
  v23 = v22;
  v22 = 0uLL;
  v37[0] = &off_24C01BCC8;
  v24 = (char **)v38;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  ZinPattern::~ZinPattern((ZinPattern *)v37);
  v4 = v29;
  if (v29 == v28)
  {
    v5 = 4;
    v4 = v28;
    goto LABEL_5;
  }
  if (v29)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v24 = &v19;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  for (i = 0; i != -24; i -= 12)
  {
    v7 = &v30[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v36[i * 8]);
    v8 = *(_QWORD **)&v36[i * 8 - 8];
    if (&v34[i] == v8)
    {
      v8 = v7 + 15;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    if (SHIBYTE(v33[i + 2]) < 0)
      operator delete((void *)v7[12]);
  }
  v26[0] = &off_24C002DB0;
  v26[1] = &v23;
  v27 = v26;
  v10 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v26, 1);
  v11 = v27;
  if (v27 == v26)
  {
    v12 = 4;
    v11 = v26;
LABEL_19:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v27)
  {
    v12 = 5;
    goto LABEL_19;
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v10;
}

void sub_206F69520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002D58;
  return result;
}

void std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002D58;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 18) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C002DB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C002DB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  uint64_t **v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  void **v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  char *v21;
  int *i;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t Broadcast;
  _BOOL4 v32;
  int v33;
  uint64_t **v34;
  ZinIrOpLayer **v35;
  ZinIrOpLayer **v36;
  void *v37[2];
  __int128 v38;
  int v39;
  std::string v40;
  void *v41[2];
  char *v42;
  _QWORD v43[3];
  char v44;
  void *v45;
  char *v46;
  void *v47;
  void *__dst;
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  result = (*(uint64_t (**)(_QWORD, uint64_t **, _QWORD))(***(_QWORD ***)(a1 + 8) + 8))(**(_QWORD **)(a1 + 8), *a2, *a3);
  if (!(_DWORD)result)
    return result;
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "bcast1");
  ZinPattern::GetMatch(v7, (unsigned __int8 *)__p, &v47);
  if (SBYTE7(v50) < 0)
    operator delete(__p[0]);
  v8 = *v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "bcast");
  ZinPattern::GetMatch(v8, (unsigned __int8 *)__p, &v45);
  if (SBYTE7(v50) < 0)
    operator delete(__p[0]);
  v9 = (char *)v45;
  if (v45 == v46)
  {
    LOBYTE(Broadcast) = 1;
    if (!v45)
      goto LABEL_48;
  }
  else
  {
    std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v47, (uint64_t)__dst, (char *)v45, v46, (v46 - (_BYTE *)v45) >> 3);
    v10 = *(_QWORD *)v47;
    if (*(char *)(*(_QWORD *)v47 + 47) >= 0)
      v11 = *(unsigned __int8 *)(*(_QWORD *)v47 + 47);
    else
      v11 = *(_QWORD *)(*(_QWORD *)v47 + 32);
    v12 = v37;
    std::string::basic_string[abi:ne180100]((uint64_t)v37, v11 + 1);
    if (SBYTE7(v38) < 0)
      v12 = (void **)v37[0];
    if (v11)
    {
      if (*(char *)(v10 + 47) >= 0)
        v13 = (const void *)(v10 + 24);
      else
        v13 = *(const void **)(v10 + 24);
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)v12 + v11) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v40, "clps_bcast");
    v14 = std::string::append(&v40, "_xfm", 4uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42 = (char *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42) >= 0)
      v16 = v41;
    else
      v16 = (void **)v41[0];
    if (SHIBYTE(v42) >= 0)
      v17 = HIBYTE(v42);
    else
      v17 = (std::string::size_type)v41[1];
    v18 = std::string::append((std::string *)v37, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)&v50 = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v43, __p);
    if (SBYTE7(v50) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v42) < 0)
      operator delete(v41[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SBYTE7(v38) < 0)
      operator delete(v37[0]);
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    v39 = 1065353216;
    v20 = (char *)v47;
    v21 = (char *)__dst;
    if (v47 != __dst)
    {
      do
      {
        for (i = *(int **)(*(_QWORD *)(*(_QWORD *)v20 + 64) + 32); i; i = *(int **)i)
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v37, i + 4, (_OWORD *)i + 1);
        v20 += 8;
      }
      while (v20 != v21);
      v20 = (char *)v47;
    }
    v23 = *(_QWORD *)v20;
    v24 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 80))(__p, v23, 0, 0);
    v25 = operator new(0x78uLL);
    v41[1] = v25 + 30;
    v42 = (char *)(v25 + 30);
    v25[28] = v56;
    v26 = v55;
    v27 = v53;
    *((_OWORD *)v25 + 5) = v54;
    *((_OWORD *)v25 + 6) = v26;
    v28 = v50;
    *(_OWORD *)v25 = *(_OWORD *)__p;
    *((_OWORD *)v25 + 1) = v28;
    v29 = v52;
    *((_OWORD *)v25 + 2) = v51;
    *((_OWORD *)v25 + 3) = v29;
    *((_OWORD *)v25 + 4) = v27;
    v41[0] = v25;
    v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)__dst - 1) + 32))(*((_QWORD *)__dst - 1), 0, 0);
    Broadcast = ZinBuilder::CreateBroadcast(v24, (uint64_t)v43, (uint64_t *)v41, (uint64_t)v37, *(_DWORD *)(v30 + 88));
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (Broadcast)
    {
      Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(__p, (uint64_t **)&v47);
      v32 = ZinIrOpLayerGraph::AddNode(v4, (ZinIrOpLayer *)Broadcast, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v50 = __p[1];
        operator delete(__p[1]);
      }
      v33 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)v4, *(ZinIrOpLayer **)v47, (ZinIrOpLayer *)Broadcast);
      v34 = (uint64_t **)*((_QWORD *)__dst - 1);
      *(_OWORD *)__p = 0u;
      v50 = 0u;
      LODWORD(v51) = 1065353216;
      LODWORD(Broadcast) = v32 & v33 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v4, v34, (ZinIrOpLayer *)Broadcast, __p);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
      v35 = (ZinIrOpLayer **)v47;
      v36 = (ZinIrOpLayer **)__dst;
      while (v35 != v36)
        LODWORD(Broadcast) = Broadcast & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v4, *v35++, 0);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
    v43[0] = off_24C01FBB0;
    if (v44 < 0)
      operator delete((void *)v43[1]);
    v9 = (char *)v45;
    if (!v45)
      goto LABEL_48;
  }
  v46 = v9;
  operator delete(v9);
LABEL_48:
  if (v47)
  {
    __dst = v47;
    operator delete(v47);
  }
  if ((Broadcast & 1) != 0)
    return 0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  return 3;
}

void sub_206F69BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void (**a29)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,void *a44,uint64_t a45)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a43);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  a29 = off_24C01FBB0;
  if (a35 < 0)
    operator delete(__p);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::CollapseBroadcast(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Unable to collpase broadcast layers.\n", v0, 2u);
}

void ZinConcatLayerUtils::CreateCopyForConcat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  ZinIrOpLayer *v15;
  int IsNoOp;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  ZinIrOpLayer *v23;
  _QWORD *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  void *__p;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v46, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v12 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  __p = 0;
  std::vector<ZinIrOpLayer *>::vector(a6, v12, &__p);
  v13 = v47;
  if (v47 == v46)
    goto LABEL_50;
  v14 = 0;
  v13 = v46;
  do
  {
    v15 = (ZinIrOpLayer *)v13[v14];
    __p = 0;
    v44 = 0;
    v45 = 0;
    IsNoOp = ZinIrOpLayer::IsNoOp(v15, (uint64_t *)&__p);
    if (__p)
    {
      v44 = __p;
      operator delete(__p);
    }
    if (IsNoOp)
    {
      v17 = (_QWORD *)v46[v14];
      v18 = *(_DWORD *)(v17[8] + 8);
      if (v18 == 29)
      {
        if (ZinIrBatchUtils::LayersHaveBatches(&v46)
          && *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v46[v14] + 32))(v46[v14], 0, 0)+ 48) == 1&& *(_DWORD *)(*(_QWORD *)(a4 + 64) + 12) != 5)
        {
          goto LABEL_36;
        }
LABEL_16:
        v21 = v46[v14];
        v22 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0, 0)
                        + 88);
        v42 = 0;
        v23 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(a1, v21, a2, v22, &v42);
        v24 = v42;
        v42 = 0;
        if (v24)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v42, v24);
        __p = 0;
        v44 = 0;
        v45 = 0;
        v25 = ZinIrOpLayer::IsNoOp(v23, (uint64_t *)&__p);
        if (a5 == 1)
          v26 = 1;
        else
          v26 = v25;
        if (__p)
        {
          v44 = __p;
          operator delete(__p);
        }
        if ((v26 & 1) != 0)
        {
          v27 = (uint64_t)v23;
        }
        else
        {
          v27 = operator new();
          v28 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, 0, 0);
          v29 = (std::__shared_weak_count *)v28[1];
          v40 = *v28;
          v41 = v29;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, 1);
          ZinNEBypassLayer::ZinNEBypassLayer(v27, &v40, &__p, 0, v23);
          if (SHIBYTE(v45) < 0)
            operator delete(__p);
          v32 = v41;
          if (v41)
          {
            v33 = (unint64_t *)&v41->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        *(_QWORD *)(*a6 + 8 * v14) = v27;
        v46[v14] = v27;
        goto LABEL_36;
      }
      if (v18 != 7)
        goto LABEL_16;
      v19 = v17[14];
      v20 = v17[15];
      while (v19 != v20)
      {
        if (*(_QWORD *)v19 != a4 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 64) + 8) == 7)
          goto LABEL_16;
        v19 += 8;
      }
    }
LABEL_36:
    ++v14;
    v13 = v46;
    v35 = v47;
  }
  while (v14 < v47 - v46);
  if (v46 != v47)
  {
    while (1)
    {
      v36 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v13 + 32))(*v13, 0, 0)
                      + 104);
      if (v36)
      {
        if (*(_DWORD *)(v36 + 96) == 2)
          break;
      }
      if (++v13 == v35)
      {
        v37 = 0;
        goto LABEL_43;
      }
    }
    v37 = 1;
LABEL_43:
    v38 = v46;
    v13 = v47;
    if (v46 != v47)
    {
      while (1)
      {
        v39 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v38 + 32))(*v38, 0, 0)
                        + 104);
        if (v39)
        {
          if (*(_DWORD *)(v39 + 96) == 1)
            break;
        }
        if (++v38 == v13)
          goto LABEL_49;
      }
      if (v37)
        ZinAssertImpl("ANEC Internal Error: Sources have incompatible allocation hint.");
LABEL_49:
      v13 = v46;
    }
  }
LABEL_50:
  if (v13)
  {
    v47 = v13;
    operator delete(v13);
  }
}

void sub_206F6A128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v22;
    operator delete(v22);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinConcatLayerUtils::ComputeConcatViewAndStep(int a1@<W0>, _QWORD **a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *i8;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  int64x2_t *v59;
  int64x2_t v60;
  char *v61;
  char *v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int64x2_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  int64x2_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int64x2_t v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int64x2_t v137;
  char *v138;
  char *v139;
  char *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  int64x2_t v144;
  uint64_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**a2 + 32))(**a2, 0, 0);
  v9 = *(_OWORD *)(v8 + 48);
  v10 = *(_OWORD *)(v8 + 64);
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v8 + 80);
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v10;
  v145 = a3;
  switch(a1)
  {
    case 1:
      v11 = (char *)a2[1] - (char *)*a2;
      v12 = v11 >> 3;
      if (v11)
      {
        v13 = 0;
        v14 = 0;
        v15 = a4 + 2;
        v146 = vdupq_n_s64(1uLL);
        do
        {
          if ((unint64_t)v13 >= *v15)
          {
            v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-*a4] >> 4);
            v17 = v16 + 1;
            if (v16 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(*v15 - *a4) >> 4) > v17)
              v17 = 0x999999999999999ALL * ((uint64_t)(*v15 - *a4) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15 - *a4) >> 4) >= 0x199999999999999)
              v18 = 0x333333333333333;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v18);
            else
              v19 = 0;
            v20 = &v19[80 * v16];
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 1) = v14;
            *((_QWORD *)v20 + 2) = 0;
            *((_QWORD *)v20 + 3) = 0;
            *((_QWORD *)v20 + 4) = 0;
            *((_QWORD *)v20 + 5) = 1;
            *((_QWORD *)v20 + 6) = v12;
            *(int64x2_t *)(v20 + 56) = vdupq_n_s64(1uLL);
            *((_QWORD *)v20 + 9) = 1;
            v22 = (char *)*a4;
            v21 = (char *)a4[1];
            v23 = v20;
            if (v21 != (char *)*a4)
            {
              do
              {
                *((_OWORD *)v23 - 5) = *((_OWORD *)v21 - 5);
                v24 = *((_OWORD *)v21 - 4);
                v25 = *((_OWORD *)v21 - 3);
                v26 = *((_OWORD *)v21 - 1);
                *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
                *((_OWORD *)v23 - 1) = v26;
                *((_OWORD *)v23 - 4) = v24;
                *((_OWORD *)v23 - 3) = v25;
                v23 -= 80;
                v21 -= 80;
              }
              while (v21 != v22);
              v21 = v22;
            }
            v13 = v20 + 80;
            *a4 = v23;
            a4[1] = v20 + 80;
            a4[2] = &v19[80 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = v14;
            *((_OWORD *)v13 + 1) = 0uLL;
            *((_QWORD *)v13 + 4) = 0;
            *((_QWORD *)v13 + 5) = 1;
            *((_QWORD *)v13 + 6) = v12;
            *(int64x2_t *)(v13 + 56) = v146;
            *((_QWORD *)v13 + 9) = 1;
            v13 += 80;
          }
          a4[1] = v13;
          ++v14;
          v12 = a2[1] - *a2;
        }
        while (v14 < v12);
      }
      *(_QWORD *)(v145 + 8) *= v12;
      break;
    case 2:
      v87 = (uint64_t)*a2;
      if (a2[1] == *a2)
      {
        v89 = 0;
      }
      else
      {
        v88 = 0;
        v89 = 0;
        v149 = vdupq_n_s64(1uLL);
        do
        {
          v90 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v87 + 8 * v88) + 32))(*(_QWORD *)(v87 + 8 * v88), 0, 0);
          v91 = a4[1];
          v92 = a4[2];
          if (v91 >= v92)
          {
            v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - *a4) >> 4);
            v95 = v94 + 1;
            if (v94 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v96 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - *a4) >> 4);
            if (2 * v96 > v95)
              v95 = 2 * v96;
            if (v96 >= 0x199999999999999)
              v97 = 0x333333333333333;
            else
              v97 = v95;
            if (v97)
              v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v97);
            else
              v98 = 0;
            v99 = &v98[80 * v94];
            *(_QWORD *)v99 = 0;
            *((_QWORD *)v99 + 1) = 0;
            *((_QWORD *)v99 + 3) = 0;
            *((_QWORD *)v99 + 4) = 0;
            *((_QWORD *)v99 + 2) = v89;
            v100 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v99 + 40) = v100;
            *(int64x2_t *)(v99 + 56) = v100;
            *((_QWORD *)v99 + 9) = 1;
            v102 = (char *)*a4;
            v101 = (char *)a4[1];
            v103 = v99;
            if (v101 != (char *)*a4)
            {
              do
              {
                *((_OWORD *)v103 - 5) = *((_OWORD *)v101 - 5);
                v104 = *((_OWORD *)v101 - 4);
                v105 = *((_OWORD *)v101 - 3);
                v106 = *((_OWORD *)v101 - 1);
                *((_OWORD *)v103 - 2) = *((_OWORD *)v101 - 2);
                *((_OWORD *)v103 - 1) = v106;
                *((_OWORD *)v103 - 4) = v104;
                *((_OWORD *)v103 - 3) = v105;
                v103 -= 80;
                v101 -= 80;
              }
              while (v101 != v102);
              v101 = v102;
            }
            v93 = v99 + 80;
            *a4 = v103;
            a4[1] = v99 + 80;
            a4[2] = &v98[80 * v97];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *(_QWORD *)v91 = 0;
            *(_QWORD *)(v91 + 8) = 0;
            *(_QWORD *)(v91 + 24) = 0;
            *(_QWORD *)(v91 + 32) = 0;
            *(_QWORD *)(v91 + 16) = v89;
            *(int64x2_t *)(v91 + 40) = v149;
            *(int64x2_t *)(v91 + 56) = v149;
            v93 = (char *)(v91 + 80);
            *(_QWORD *)(v91 + 72) = 1;
          }
          a4[1] = v93;
          v89 += *(_QWORD *)(v90 + 64);
          ++v88;
          v87 = (uint64_t)*a2;
        }
        while (v88 < a2[1] - *a2);
      }
      *(_QWORD *)(a3 + 16) = v89;
      break;
    case 3:
      v47 = (uint64_t)*a2;
      if (a2[1] == *a2)
      {
        v49 = 0;
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v144 = vdupq_n_s64(1uLL);
        do
        {
          v50 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v47 + 8 * v48) + 32))(*(_QWORD *)(v47 + 8 * v48), 0, 0);
          v51 = a4[1];
          v52 = a4[2];
          if (v51 >= v52)
          {
            v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *a4) >> 4);
            v55 = v54 + 1;
            if (v54 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - *a4) >> 4);
            if (2 * v56 > v55)
              v55 = 2 * v56;
            if (v56 >= 0x199999999999999)
              v57 = 0x333333333333333;
            else
              v57 = v55;
            if (v57)
              v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v57);
            else
              v58 = 0;
            v59 = (int64x2_t *)&v58[80 * v54];
            v59->i64[0] = 0;
            v59->i64[1] = 0;
            v59[1].i64[0] = 0;
            v59[1].i64[1] = v49;
            v60 = vdupq_n_s64(1uLL);
            v59[2] = (int64x2_t)xmmword_207A80930;
            v59[3] = v60;
            v59[4] = v60;
            v62 = (char *)*a4;
            v61 = (char *)a4[1];
            v63 = v59;
            if (v61 != (char *)*a4)
            {
              do
              {
                v63[-5] = *((int64x2_t *)v61 - 5);
                v64 = *((int64x2_t *)v61 - 4);
                v65 = *((int64x2_t *)v61 - 3);
                v66 = *((int64x2_t *)v61 - 1);
                v63[-2] = *((int64x2_t *)v61 - 2);
                v63[-1] = v66;
                v63[-4] = v64;
                v63[-3] = v65;
                v63 -= 5;
                v61 -= 80;
              }
              while (v61 != v62);
              v61 = v62;
            }
            i8 = v59[5].i8;
            *a4 = v63;
            a4[1] = v59 + 5;
            a4[2] = &v58[80 * v57];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_QWORD *)v51 = 0;
            *(_QWORD *)(v51 + 8) = 0;
            *(_QWORD *)(v51 + 16) = 0;
            *(_QWORD *)(v51 + 24) = v49;
            *(_OWORD *)(v51 + 32) = xmmword_207A80930;
            *(int64x2_t *)(v51 + 48) = v144;
            i8 = (char *)(v51 + 80);
            *(int64x2_t *)(v51 + 64) = v144;
          }
          a4[1] = i8;
          v49 += *(_QWORD *)(v50 + 72);
          ++v48;
          v47 = (uint64_t)*a2;
        }
        while (v48 < a2[1] - *a2);
      }
      *(_QWORD *)(a3 + 24) = v49;
      break;
    case 4:
      v67 = (uint64_t)*a2;
      if (a2[1] == *a2)
      {
        v69 = 0;
      }
      else
      {
        v68 = 0;
        v69 = 0;
        v148 = vdupq_n_s64(1uLL);
        do
        {
          v70 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v67 + 8 * v68) + 32))(*(_QWORD *)(v67 + 8 * v68), 0, 0);
          v72 = (char *)a4[1];
          v71 = a4[2];
          if ((unint64_t)v72 >= v71)
          {
            v74 = (char *)*a4;
            v75 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v72[-*a4] >> 4);
            v76 = v75 + 1;
            if (v75 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (_QWORD)v74) >> 4);
            if (2 * v77 > v76)
              v76 = 2 * v77;
            if (v77 >= 0x199999999999999)
              v78 = 0x333333333333333;
            else
              v78 = v76;
            if (v78)
            {
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v78);
              v74 = (char *)*a4;
              v72 = (char *)a4[1];
            }
            else
            {
              v79 = 0;
            }
            v80 = &v79[80 * v75];
            *(_OWORD *)v80 = 0u;
            *((_OWORD *)v80 + 1) = 0u;
            *((_QWORD *)v80 + 4) = v69;
            v81 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v80 + 40) = v81;
            *(int64x2_t *)(v80 + 56) = v81;
            *((_QWORD *)v80 + 9) = 1;
            if (v72 == v74)
            {
              v86 = &v79[80 * v75];
            }
            else
            {
              v82 = &v79[80 * v75];
              do
              {
                *((_OWORD *)v82 - 5) = *((_OWORD *)v72 - 5);
                v83 = *((_OWORD *)v72 - 4);
                v84 = *((_OWORD *)v72 - 3);
                v85 = *((_OWORD *)v72 - 1);
                v86 = v82 - 80;
                *((_OWORD *)v82 - 2) = *((_OWORD *)v72 - 2);
                *((_OWORD *)v82 - 1) = v85;
                *((_OWORD *)v82 - 4) = v83;
                *((_OWORD *)v82 - 3) = v84;
                v72 -= 80;
                v82 -= 80;
              }
              while (v72 != v74);
            }
            v73 = v80 + 80;
            *a4 = v86;
            a4[1] = v80 + 80;
            a4[2] = &v79[80 * v78];
            if (v74)
              operator delete(v74);
          }
          else
          {
            *(_OWORD *)v72 = 0u;
            *((_OWORD *)v72 + 1) = 0u;
            *((_QWORD *)v72 + 4) = v69;
            *(int64x2_t *)(v72 + 40) = v148;
            *(int64x2_t *)(v72 + 56) = v148;
            v73 = v72 + 80;
            *((_QWORD *)v72 + 9) = 1;
          }
          a4[1] = v73;
          v69 += *(_QWORD *)(v70 + 80);
          ++v68;
          v67 = (uint64_t)*a2;
        }
        while (v68 < a2[1] - *a2);
      }
      *(_QWORD *)(a3 + 32) = v69;
      break;
    case 5:
      v27 = (uint64_t)*a2;
      if (a2[1] == *a2)
      {
        v29 = 0;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v147 = vdupq_n_s64(1uLL);
        do
        {
          v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v27 + 8 * v28) + 32))(*(_QWORD *)(v27 + 8 * v28), 0, 0);
          v32 = (char *)a4[1];
          v31 = a4[2];
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*a4;
            v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v32[-*a4] >> 4);
            v36 = v35 + 1;
            if (v35 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31 - (_QWORD)v34) >> 4);
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x199999999999999)
              v38 = 0x333333333333333;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v38);
              v34 = (char *)*a4;
              v32 = (char *)a4[1];
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[80 * v35];
            *(_QWORD *)v40 = v29;
            *(_OWORD *)(v40 + 8) = 0u;
            *(_OWORD *)(v40 + 24) = 0u;
            v41 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v40 + 40) = v41;
            *(int64x2_t *)(v40 + 56) = v41;
            *((_QWORD *)v40 + 9) = 1;
            if (v32 == v34)
            {
              v46 = &v39[80 * v35];
            }
            else
            {
              v42 = &v39[80 * v35];
              do
              {
                *((_OWORD *)v42 - 5) = *((_OWORD *)v32 - 5);
                v43 = *((_OWORD *)v32 - 4);
                v44 = *((_OWORD *)v32 - 3);
                v45 = *((_OWORD *)v32 - 1);
                v46 = v42 - 80;
                *((_OWORD *)v42 - 2) = *((_OWORD *)v32 - 2);
                *((_OWORD *)v42 - 1) = v45;
                *((_OWORD *)v42 - 4) = v43;
                *((_OWORD *)v42 - 3) = v44;
                v32 -= 80;
                v42 -= 80;
              }
              while (v32 != v34);
            }
            v33 = v40 + 80;
            *a4 = v46;
            a4[1] = v40 + 80;
            a4[2] = &v39[80 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v29;
            *(_OWORD *)(v32 + 8) = 0u;
            *(_OWORD *)(v32 + 24) = 0u;
            *(int64x2_t *)(v32 + 40) = v147;
            *(int64x2_t *)(v32 + 56) = v147;
            v33 = v32 + 80;
            *((_QWORD *)v32 + 9) = 1;
          }
          a4[1] = v33;
          v29 += *(_QWORD *)(v30 + 48);
          ++v28;
          v27 = (uint64_t)*a2;
        }
        while (v28 < a2[1] - *a2);
      }
      *(_QWORD *)a3 = v29;
      break;
    case 6:
      v107 = (char *)a2[1] - (char *)*a2;
      v108 = v107 >> 3;
      if (v107)
      {
        v109 = 0;
        v110 = 0;
        v111 = a4 + 2;
        v150 = vdupq_n_s64(1uLL);
        do
        {
          if ((unint64_t)v109 >= *v111)
          {
            v112 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v109[-*a4] >> 4);
            v113 = v112 + 1;
            if (v112 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(*v111 - *a4) >> 4) > v113)
              v113 = 0x999999999999999ALL * ((uint64_t)(*v111 - *a4) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v111 - *a4) >> 4) >= 0x199999999999999)
              v114 = 0x333333333333333;
            else
              v114 = v113;
            if (v114)
              v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v114);
            else
              v115 = 0;
            v116 = &v115[80 * v112];
            *(_QWORD *)v116 = 0;
            *((_QWORD *)v116 + 1) = 0;
            *((_QWORD *)v116 + 3) = 0;
            *((_QWORD *)v116 + 4) = 0;
            *((_QWORD *)v116 + 2) = v110;
            v117 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v116 + 40) = v117;
            *((_QWORD *)v116 + 7) = v108;
            *((int64x2_t *)v116 + 4) = v117;
            v119 = (char *)*a4;
            v118 = (char *)a4[1];
            v120 = v116;
            if (v118 != (char *)*a4)
            {
              do
              {
                *((_OWORD *)v120 - 5) = *((_OWORD *)v118 - 5);
                v121 = *((_OWORD *)v118 - 4);
                v122 = *((_OWORD *)v118 - 3);
                v123 = *((_OWORD *)v118 - 1);
                *((_OWORD *)v120 - 2) = *((_OWORD *)v118 - 2);
                *((_OWORD *)v120 - 1) = v123;
                *((_OWORD *)v120 - 4) = v121;
                *((_OWORD *)v120 - 3) = v122;
                v120 -= 80;
                v118 -= 80;
              }
              while (v118 != v119);
              v118 = v119;
            }
            v109 = v116 + 80;
            *a4 = v120;
            a4[1] = v116 + 80;
            a4[2] = &v115[80 * v114];
            if (v118)
              operator delete(v118);
          }
          else
          {
            *(_QWORD *)v109 = 0;
            *((_QWORD *)v109 + 1) = 0;
            *((_QWORD *)v109 + 2) = v110;
            *(_OWORD *)(v109 + 24) = 0uLL;
            *(int64x2_t *)(v109 + 40) = v150;
            *((_QWORD *)v109 + 7) = v108;
            *((int64x2_t *)v109 + 4) = v150;
            v109 += 80;
          }
          a4[1] = v109;
          ++v110;
          v108 = a2[1] - *a2;
        }
        while (v110 < v108);
      }
      *(_QWORD *)(v145 + 16) *= v108;
      break;
    default:
      v124 = (uint64_t)*a2;
      if (a2[1] == *a2)
      {
        v126 = 0;
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v151 = vdupq_n_s64(1uLL);
        do
        {
          v127 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v124 + 8 * v125) + 32))(*(_QWORD *)(v124 + 8 * v125), 0, 0);
          v128 = a4[1];
          v129 = a4[2];
          if (v128 >= v129)
          {
            v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v128 - *a4) >> 4);
            v132 = v131 + 1;
            if (v131 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v129 - *a4) >> 4);
            if (2 * v133 > v132)
              v132 = 2 * v133;
            if (v133 >= 0x199999999999999)
              v134 = 0x333333333333333;
            else
              v134 = v132;
            if (v134)
              v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v134);
            else
              v135 = 0;
            v136 = &v135[80 * v131];
            *(_QWORD *)v136 = 0;
            *((_QWORD *)v136 + 1) = v126;
            *((_QWORD *)v136 + 3) = 0;
            *((_QWORD *)v136 + 4) = 0;
            *((_QWORD *)v136 + 2) = 0;
            v137 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v136 + 40) = v137;
            *(int64x2_t *)(v136 + 56) = v137;
            *((_QWORD *)v136 + 9) = 1;
            v139 = (char *)*a4;
            v138 = (char *)a4[1];
            v140 = v136;
            if (v138 != (char *)*a4)
            {
              do
              {
                *((_OWORD *)v140 - 5) = *((_OWORD *)v138 - 5);
                v141 = *((_OWORD *)v138 - 4);
                v142 = *((_OWORD *)v138 - 3);
                v143 = *((_OWORD *)v138 - 1);
                *((_OWORD *)v140 - 2) = *((_OWORD *)v138 - 2);
                *((_OWORD *)v140 - 1) = v143;
                *((_OWORD *)v140 - 4) = v141;
                *((_OWORD *)v140 - 3) = v142;
                v140 -= 80;
                v138 -= 80;
              }
              while (v138 != v139);
              v138 = v139;
            }
            v130 = v136 + 80;
            *a4 = v140;
            a4[1] = v136 + 80;
            a4[2] = &v135[80 * v134];
            if (v138)
              operator delete(v138);
          }
          else
          {
            *(_QWORD *)v128 = 0;
            *(_QWORD *)(v128 + 8) = v126;
            *(_QWORD *)(v128 + 24) = 0;
            *(_QWORD *)(v128 + 32) = 0;
            *(_QWORD *)(v128 + 16) = 0;
            *(int64x2_t *)(v128 + 40) = v151;
            *(int64x2_t *)(v128 + 56) = v151;
            v130 = (char *)(v128 + 80);
            *(_QWORD *)(v128 + 72) = 1;
          }
          a4[1] = v130;
          v126 += *(_QWORD *)(v127 + 56);
          ++v125;
          v124 = (uint64_t)*a2;
        }
        while (v125 < a2[1] - *a2);
      }
      *(_QWORD *)(a3 + 8) = v126;
      break;
  }
}

void sub_206F6ADD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinConcatLayerUtils::GetMode(unsigned int a1)
{
  if (a1 >= 5)
    ZinAssertImpl("Unknown concat axis.");
  return dword_207AABFCC[a1];
}

uint64_t ZinConcatLayerUtils::GetConcatAxis(unsigned int a1)
{
  if (a1 >= 7)
    ZinAssertImpl("Unknown concat axis.");
  return dword_207AABFE0[a1];
}

uint64_t ZinConcatLayerUtils::IsInterleavedConcat(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 >= 7)
    ZinAssertImpl("Unknown concat axis.", v1, v2);
  return (0x42u >> a1) & 1;
}

uint64_t ZinConcatLayerUtils::GetConcatMode(unsigned int a1)
{
  if (a1 < 5)
    return dword_207AABFFC[a1];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinConcatLayerUtils::GetConcatMode();
  return 7;
}

uint64_t std::vector<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>::__push_back_slow_path<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[120 * v4];
  v16 = &v10[120 * v9];
  std::construct_at[abi:ne180100]<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>((uint64_t)v14, a2);
  v15 = v14 + 120;
  std::vector<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F6AFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = off_24C021A98;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void sub_206F6B0EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit>,std::reverse_iterator<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>,std::reverse_iterator<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>,std::reverse_iterator<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 120;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 120;
    std::construct_at[abi:ne180100]<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit const&,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit const&,ZinConcatLayerUtils::DecomposedConcatUnits::TransposeUnit*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = off_24C021A98;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void sub_206F6B270(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

void ZinConcatLayerUtils::GetConcatMode()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid concat axis\n", v0, 2u);
}

_QWORD *ZinNEMatMulLayer::ZinNEMatMulLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v21 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v21, 88);
  v22 = a2[1];
  v30 = *a2;
  v31 = (std::__shared_weak_count *)v22;
  v32 = v21;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ZinNELayer::ZinNELayer((uint64_t)a1, &v32, &v30, a4, a5, a6, a9, a10, a11, a12, a3, a13);
  v25 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v32;
  v32 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  *a1 = &off_24C01C130;
  a1[54] = a7;
  a1[55] = a8;
  return a1;
}

{
  return ZinNEMatMulLayer::ZinNEMatMulLayer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_206F6B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t ZinNEMatMulLayer::LowerEngine(uint64_t a1, uint64_t **a2, ZinANELayer ***a3)
{
  uint64_t v5;
  size_t v6;
  void **v7;
  const void *v8;
  void *__p[2];
  char v11;
  _QWORD v12[3];
  char v13;

  v5 = ZinANELayer::LowerEngine(a1, a2, a3);
  if (!(_DWORD)v5)
  {
    if (*(char *)(a1 + 47) >= 0)
      v6 = *(unsigned __int8 *)(a1 + 47);
    else
      v6 = *(_QWORD *)(a1 + 32);
    v7 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if (v11 < 0)
      v7 = (void **)__p[0];
    if (v6)
    {
      if (*(char *)(a1 + 47) >= 0)
        v8 = (const void *)(a1 + 24);
      else
        v8 = *(const void **)(a1 + 24);
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 95;
    ZinObjectNameFactory::ZinObjectNameFactory(v12, __p);
    if (v11 < 0)
      operator delete(__p[0]);
    ZinMirMatMul::ZinMirMatMul(__p, (uint64_t)a2, a1, (uint64_t)v12);
    v5 = ZinMirMatMul::Transform((ZinMirMatMul *)__p);
    v12[0] = off_24C01FBB0;
    if (v13 < 0)
      operator delete((void *)v12[1]);
  }
  return v5;
}

void sub_206F6B584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEMatMulLayer::Clone(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int128 *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  __int128 *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  __int128 *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  __int128 *v24;
  const void *v25;
  uint64_t v26;
  size_t v27;
  __int128 *v28;
  const void *v29;
  uint64_t v30;
  size_t v31;
  __int128 *v32;
  const void *v33;
  uint64_t v34;
  size_t v35;
  __int128 *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  __int128 *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  size_t v62;
  __int128 *v63;
  const void *v64;
  unint64_t *v65;
  unint64_t v66;
  ZinEngineLayerMirInfo *v67;
  uint64_t *GroupId;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];
  std::string v77;
  void *__p[2];
  int64_t v79;
  std::string v80;
  __int128 v81;
  int64_t v82;

  v6 = *(_QWORD *)(*a2 + 16);
  v7 = a1[25];
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v8 + 8);
  if (v82 < 0)
    v9 = (__int128 *)v81;
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_texture");
  v11 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v7, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v12 = a1[46];
  if (*((char *)a3 + 23) >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = (size_t)a3[1];
  v14 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v13 + 11);
  if (v82 < 0)
    v14 = (__int128 *)v81;
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_ibroadcast");
  v16 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v12, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v17 = a1[47];
  if (*((char *)a3 + 23) >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v18 + 6);
  if (v82 < 0)
    v19 = (__int128 *)v81;
  if (v18)
  {
    if (*((char *)a3 + 23) >= 0)
      v20 = a3;
    else
      v20 = *a3;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_irelu");
  v21 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v17, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v22 = a1[54];
  if (*((char *)a3 + 23) >= 0)
    v23 = *((unsigned __int8 *)a3 + 23);
  else
    v23 = (size_t)a3[1];
  v24 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v23 + 7);
  if (v82 < 0)
    v24 = (__int128 *)v81;
  if (v23)
  {
    if (*((char *)a3 + 23) >= 0)
      v25 = a3;
    else
      v25 = *a3;
    memmove(v24, v25, v23);
  }
  strcpy((char *)v24 + v23, "_matmul");
  v75 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v22, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 576))(a1);
  if (*((char *)a3 + 23) >= 0)
    v27 = *((unsigned __int8 *)a3 + 23);
  else
    v27 = (size_t)a3[1];
  v28 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v27 + 6);
  if (v82 < 0)
    v28 = (__int128 *)v81;
  if (v27)
  {
    if (*((char *)a3 + 23) >= 0)
      v29 = a3;
    else
      v29 = *a3;
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "_round");
  v74 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v26, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v30 = a1[48];
  if (*((char *)a3 + 23) >= 0)
    v31 = *((unsigned __int8 *)a3 + 23);
  else
    v31 = (size_t)a3[1];
  v32 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v31 + 4);
  if (v82 < 0)
    v32 = (__int128 *)v81;
  if (v31)
  {
    if (*((char *)a3 + 23) >= 0)
      v33 = a3;
    else
      v33 = *a3;
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, "_goc");
  v73 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v30, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v34 = a1[49];
  if (*((char *)a3 + 23) >= 0)
    v35 = *((unsigned __int8 *)a3 + 23);
  else
    v35 = (size_t)a3[1];
  v36 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v35 + 11);
  if (v82 < 0)
    v36 = (__int128 *)v81;
  if (v35)
  {
    if (*((char *)a3 + 23) >= 0)
      v37 = a3;
    else
      v37 = *a3;
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, "_activation");
  v38 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v34, (const void **)&v81);
  v72 = v21;
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v39 = (*(uint64_t (**)(_QWORD *))(*a1 + 416))(a1);
  if (*((char *)a3 + 23) >= 0)
    v40 = *((unsigned __int8 *)a3 + 23);
  else
    v40 = (size_t)a3[1];
  v41 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v40 + 1);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if (v40)
  {
    if (*((char *)a3 + 23) >= 0)
      v42 = a3;
    else
      v42 = *a3;
    memmove(v41, v42, v40);
  }
  *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v77, "nematmul_transp");
  v43 = std::string::append(&v77, "_xfm", 4uLL);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v79 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (v79 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if (v79 >= 0)
    v46 = HIBYTE(v79);
  else
    v46 = (std::string::size_type)__p[1];
  v47 = std::string::append(&v80, (const std::string::value_type *)v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v82 = v47->__r_.__value_.__r.__words[2];
  v81 = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v71 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v39, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v49 = v38;
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
  v50 = v16;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v51 = v11;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v52 = a1[51];
  if (*((char *)a3 + 23) >= 0)
    v53 = *((unsigned __int8 *)a3 + 23);
  else
    v53 = (size_t)a3[1];
  v54 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v53 + 6);
  if (v82 < 0)
    v54 = (__int128 *)v81;
  if (v53)
  {
    if (*((char *)a3 + 23) >= 0)
      v55 = a3;
    else
      v55 = *a3;
    memmove(v54, v55, v53);
  }
  strcpy((char *)v54 + v53, "_quant");
  v56 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v52, (const void **)&v81);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  v57 = operator new();
  v58 = *a2;
  v59 = (std::__shared_weak_count *)a2[1];
  v76[0] = v58;
  v76[1] = (uint64_t)v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 23) >= 0)
    v62 = *((unsigned __int8 *)a3 + 23);
  else
    v62 = (size_t)a3[1];
  v63 = &v81;
  std::string::basic_string[abi:ne180100]((uint64_t)&v81, v62 + 9);
  if (v82 < 0)
    v63 = (__int128 *)v81;
  if (v62)
  {
    if (*((char *)a3 + 23) >= 0)
      v64 = a3;
    else
      v64 = *a3;
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, "_nematmul");
  ZinNEMatMulLayer::ZinNEMatMulLayer((_QWORD *)v57, v76, &v81, v51, v50, v72, v75, v74, v73, v49, v71, v56, 0);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if (v59)
  {
    v65 = (unint64_t *)&v59->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (a1[33])
  {
    ZinANELayer::CopyMirInfo((ZinANELayer *)a1, (ZinEngineLayerMirInfo **)&v81);
    ZinANELayer::SetMirInfo(v57, (int **)&v81);
    v67 = (ZinEngineLayerMirInfo *)v81;
    *(_QWORD *)&v81 = 0;
    if (v67)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v67);
      MEMORY[0x20BD002F8]();
    }
  }
  ZinANELayer::CopyDMALayers((_QWORD *)v57, (const ZinANELayer *)a1);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(v57, *GroupId);
  v69 = *(_QWORD *)((char *)a1 + 420);
  if ((v69 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v57 + 420) = v69;
    *(_BYTE *)(v57 + 424) = 1;
  }
  return v57;
}

void sub_206F6BE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v33 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t ZinNEMatMulLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F6BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 ZinNEMatMulLayer::ExecutionOrderSort@<Q0>(__n128 *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  v4 = this[12].n128_u64[1];
  v9 = this[23];
  v10 = this[24];
  v11 = this[27];
  v5 = (*(uint64_t (**)(void))(this->n128_u64[0] + 416))();
  v6 = this[25].n128_u64[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v7 = (char *)operator new(0x48uLL);
  a2[1] = v7 + 72;
  a2[2] = v7 + 72;
  *(_QWORD *)v7 = v4;
  *(__n128 *)(v7 + 8) = v9;
  *(__n128 *)(v7 + 24) = v11;
  result = v10;
  *(__n128 *)(v7 + 40) = v10;
  *((_QWORD *)v7 + 7) = v5;
  *((_QWORD *)v7 + 8) = v6;
  *a2 = v7;
  return result;
}

uint64_t ZinNEMatMulLayer::SpatialSplitCopy(ZinNEMatMulLayer *this, const TiledLayerTensorRegions *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinIrKernel *v13;
  ZinIrKernel *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v22);
  v20 = v22;
  v21 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &__p);
  v6 = (*(uint64_t (**)(ZinNEMatMulLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v20, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v21;
  if (v21)
  {
    v8 = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(v6 + 264);
  if (v10 && !*(_BYTE *)(v10 + 233))
  {
    *(_QWORD *)(v10 + 200) = 1;
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_WORD *)(v10 + 232) = 0;
  }
  v11 = *((_QWORD *)this + 54);
  if (v11)
  {
    v12 = *(_QWORD *)(v6 + 432);
    ZinANELayer::CreateSpatialSplitCopyKernel((uint64_t)this, (uint64_t *)(v11 + 136), a2, (ZinIrKernel **)&__p);
    v13 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v12 + 136), v13);
    v14 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
    {
      ZinIrKernel::~ZinIrKernel(v14);
      MEMORY[0x20BD002F8]();
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v6;
}

void sub_206F6C1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinNEMatMulLayer::HasValidOutputTranspose(ZinNEMatMulLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Hal;
  uint64_t v5;

  if (!(*(unsigned int (**)(ZinNEMatMulLayer *))(*(_QWORD *)this + 408))(this) || !*((_QWORD *)this + 33))
    return 0;
  v2 = (*(uint64_t (**)(ZinNEMatMulLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0) + 48;
  v3 = *(unsigned int *)((*(uint64_t (**)(ZinNEMatMulLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  return (*(uint64_t (**)(ZinNEMatMulLayer *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 600))(this, v2, v3, (char *)this + 264, v5, 0);
}

uint64_t ZinIrScaledEWInfo::ZinIrScaledEWInfo(uint64_t a1, int a2, char a3, char a4, float a5, float a6, float a7)
{
  uint64_t result;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 6);
  *(_QWORD *)result = &unk_24C01CE38;
  *(_DWORD *)(result + 12) = a2;
  *(float *)(result + 16) = a5;
  *(float *)(result + 20) = a6;
  *(float *)(result + 24) = a7;
  *(_BYTE *)(result + 28) = a3;
  *(_BYTE *)(result + 29) = a4;
  return result;
}

_QWORD *ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C023948;
  return a1;
}

void sub_206F6C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinScaledElementWiseLayer::Lower(ZinScaledElementWiseLayer *this, uint64_t **a2, const ZinTensorDimensions ***a3)
{
  size_t v6;
  __int128 *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  unint64_t *v15;
  uint64_t InputTensor;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  _OWORD *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  ZinIrTensor *v77;
  uint64_t v78;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  _BOOL4 v80;
  int v81;
  _QWORD v83[5];
  _OWORD v84[2];
  int v85;
  ZinScaledElementWiseLayer **v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  void (**v93)(ZinIrEWUnitInfo *__hidden);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  void *__p;
  void *v103;
  _OWORD *v104;
  char v105;
  ZinScaledElementWiseLayer *v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[48];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)**a3 + 1883) && ZinScaledElementWiseLayer::QualifiesAsEW(this))
  {
    if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) != 16)
      ZinAssertImpl("Scaled EW ops that qualify for EW must have only 2 bottoms");
    if (*((char *)this + 47) >= 0)
      v6 = *((unsigned __int8 *)this + 47);
    else
      v6 = *((_QWORD *)this + 4);
    v7 = &v107;
    std::string::basic_string[abi:ne180100]((uint64_t)&v107, v6 + 11);
    if (SBYTE7(v108) < 0)
      v7 = (__int128 *)v107;
    if (v6)
    {
      if (*((char *)this + 47) >= 0)
        v8 = (char *)this + 24;
      else
        v8 = (char *)*((_QWORD *)this + 3);
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "_SEW_to_EW_");
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v107);
    if (SBYTE7(v108) < 0)
      operator delete((void *)v107);
    v97 = 0;
    v95 = 0;
    v96 = 0;
    v98 = 0u;
    v99 = 0u;
    v100 = -1;
    v93 = off_24C01A728;
    v94 = 0;
    v101 = 0;
    v9 = *((_QWORD *)this + 8);
    v10 = ZinScaledEWModeToEWType((int *)(v9 + 12));
    v11 = v10;
    v101 = v10;
    if (!v10)
      ZinAssertImpl("Invalid EW type\n");
    v12 = *(unsigned __int8 *)(v9 + 28);
    v13 = *(unsigned __int8 *)(v9 + 29);
    v91 = 0;
    v92 = 0;
    if (v13 | v12)
    {
      if (v10 != 1)
        ZinAssertImpl("EW Op must be add when either of sources are negated\n");
      if (v12 || !v13)
      {
        if (!v12 || v13)
        {
          v22 = v12 == 0;
          v23 = v13 != 0;
          if (v22)
            v23 = 0;
          if (!v23)
            ZinAssertImpl("Invalid negate src attributes in SEW op\n");
          v14 = 0;
          v15 = &v91;
          v11 = 1;
          goto LABEL_35;
        }
        v14 = 1;
        v15 = &v92;
      }
      else
      {
        v14 = 1;
        v15 = &v91;
      }
      v11 = 4;
    }
    else
    {
      v14 = 1;
      v15 = &v91;
    }
LABEL_35:
    *v15 = 1;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v24 = v92;
    v25 = *((_QWORD *)this + 11);
    if (v92 >= (*((_QWORD *)this + 12) - v25) >> 3)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v25 + 8 * v92) + 80))(&v107, *(_QWORD *)(v25 + 8 * v92), 0, 0);
    v26 = 0xEEEEEEEEEEEEEEEFLL * ((v89 - (_BYTE *)v88) >> 3) + 1;
    if (v26 > 0x222222222222222)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    if (0xDDDDDDDDDDDDDDDELL * ((v90 - (_BYTE *)v88) >> 3) > v26)
      v26 = 0xDDDDDDDDDDDDDDDELL * ((v90 - (_BYTE *)v88) >> 3);
    if (0xEEEEEEEEEEEEEEEFLL * ((v90 - (_BYTE *)v88) >> 3) >= 0x111111111111111)
      v27 = 0x222222222222222;
    else
      v27 = v26;
    if (v27)
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v90, v27);
    else
      v28 = 0;
    v29 = &v28[8 * ((v89 - (_BYTE *)v88) >> 3)];
    v30 = v107;
    v31 = v108;
    v32 = *(_OWORD *)&v109[16];
    *((_OWORD *)v29 + 2) = *(_OWORD *)v109;
    *((_OWORD *)v29 + 3) = v32;
    *(_OWORD *)v29 = v30;
    *((_OWORD *)v29 + 1) = v31;
    v33 = *(_OWORD *)&v109[32];
    v34 = v110;
    v35 = v111;
    *((_QWORD *)v29 + 14) = v112;
    *((_OWORD *)v29 + 5) = v34;
    *((_OWORD *)v29 + 6) = v35;
    *((_OWORD *)v29 + 4) = v33;
    v88 = v29;
    v90 = &v28[120 * v27];
    v89 = v29 + 120;
    v36 = v91;
    v37 = *((_QWORD *)this + 11);
    if (v91 >= (*((_QWORD *)this + 12) - v37) >> 3)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v37 + 8 * v91) + 80))(&v107, *(_QWORD *)(v37 + 8 * v91), 0, 0);
    v38 = v89;
    if (v89 >= v90)
    {
      v46 = v88;
      v47 = 0xEEEEEEEEEEEEEEEFLL * ((v89 - (_BYTE *)v88) >> 3) + 1;
      if (v47 > 0x222222222222222)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0xDDDDDDDDDDDDDDDELL * ((v90 - (_BYTE *)v88) >> 3) > v47)
        v47 = 0xDDDDDDDDDDDDDDDELL * ((v90 - (_BYTE *)v88) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((v90 - (_BYTE *)v88) >> 3) >= 0x111111111111111)
        v48 = 0x222222222222222;
      else
        v48 = v47;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v90, v48);
        v46 = v88;
        v38 = v89;
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[8 * ((v89 - (_BYTE *)v88) >> 3)];
      v51 = v107;
      v52 = v108;
      v53 = *(_OWORD *)&v109[16];
      v54 = &v49[120 * v48];
      *((_OWORD *)v50 + 2) = *(_OWORD *)v109;
      *((_OWORD *)v50 + 3) = v53;
      *(_OWORD *)v50 = v51;
      *((_OWORD *)v50 + 1) = v52;
      v55 = *(_OWORD *)&v109[32];
      v56 = v110;
      v57 = v111;
      *((_QWORD *)v50 + 14) = v112;
      *((_OWORD *)v50 + 5) = v56;
      *((_OWORD *)v50 + 6) = v57;
      *((_OWORD *)v50 + 4) = v55;
      v45 = v50 + 120;
      if (v38 == v46)
      {
        v64 = v50;
      }
      else
      {
        do
        {
          v58 = *(_OWORD *)((char *)v38 - 120);
          v59 = *(_OWORD *)((char *)v38 - 104);
          v60 = *(_OWORD *)((char *)v38 - 88);
          *(_OWORD *)(v50 - 72) = *(_OWORD *)((char *)v38 - 72);
          *(_OWORD *)(v50 - 88) = v60;
          *(_OWORD *)(v50 - 104) = v59;
          *(_OWORD *)(v50 - 120) = v58;
          v61 = *(_OWORD *)((char *)v38 - 56);
          v62 = *(_OWORD *)((char *)v38 - 40);
          v63 = *(_OWORD *)((char *)v38 - 24);
          v64 = v50 - 120;
          *((_DWORD *)v50 - 2) = *((_DWORD *)v38 - 2);
          *(_OWORD *)(v50 - 24) = v63;
          *(_OWORD *)(v50 - 40) = v62;
          *(_OWORD *)(v50 - 56) = v61;
          v38 = (_OWORD *)((char *)v38 - 120);
          v50 -= 120;
        }
        while (v38 != v46);
      }
      v88 = v64;
      v89 = v45;
      v90 = v54;
      if (v46)
        operator delete(v46);
    }
    else
    {
      v39 = v107;
      v40 = v108;
      v41 = *(_OWORD *)&v109[16];
      *((_OWORD *)v89 + 2) = *(_OWORD *)v109;
      v38[3] = v41;
      *v38 = v39;
      v38[1] = v40;
      v42 = *(_OWORD *)&v109[32];
      v43 = v110;
      v44 = v111;
      *((_QWORD *)v38 + 14) = v112;
      v38[5] = v43;
      v38[6] = v44;
      v38[4] = v42;
      v45 = (char *)v38 + 120;
    }
    v89 = v45;
    v101 = v11;
    v65 = *((_QWORD *)this + 2);
    v66 = (*(uint64_t (**)(ZinScaledElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v67 = (*(uint64_t (**)(ZinScaledElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v65, (uint64_t)&__p, v11, (uint64_t)&v88, (__int128 *)(v66 + 48), *(_DWORD *)(v67 + 88));
    v106 = this;
    v86 = &v106;
    v87 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v107, &v86);
    v69 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)&v107);
    *(_QWORD *)&v107 = &unk_24C02BB18;
    if (*((_QWORD *)&v107 + 1))
    {
      *(_QWORD *)&v108 = *((_QWORD *)&v107 + 1);
      operator delete(*((void **)&v107 + 1));
    }
    v70 = *((_QWORD *)this + 11);
    if (v24 >= (*((_QWORD *)this + 12) - v70) >> 3
      || (v71 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)(v70 + 8 * v24), (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0), v72 = *((_QWORD *)this + 11), v36 >= (*((_QWORD *)this + 12) - v72) >> 3))
    {
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    }
    v73 = v71;
    v74 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)(v72 + 8 * v36), (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v84, 0, sizeof(v84));
    v85 = 1065353216;
    v75 = v69 & v73 & v74 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)this, ElementWiseLayer, v84);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v84);
    if ((v14 & 1) == 0)
    {
      v76 = *((_QWORD *)this + 2);
      v77 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ElementWiseLayer + 32))(ElementWiseLayer, 0, 0);
      v78 = (*(uint64_t (**)(ZinScaledElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v76, (uint64_t)&__p, v77, *(_DWORD *)(v78 + 88), 0, 0, 1, -1.0, 0.0);
      v106 = this;
      v86 = &v106;
      v87 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v107, &v86);
      v80 = ZinIrOpLayerGraph::AddNode(a2, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)&v107);
      *(_QWORD *)&v107 = &unk_24C02BB18;
      if (*((_QWORD *)&v107 + 1))
      {
        *(_QWORD *)&v108 = *((_QWORD *)&v107 + 1);
        operator delete(*((void **)&v107 + 1));
      }
      v81 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)ElementWiseLayer, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_QWORD *)&v107 = ConstScaleAndBiasGOC;
      std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v83, &v107, 1);
      v75 &= v80 & v81 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)ElementWiseLayer, ConstScaleAndBiasGOC, v83);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v83);
    }
    if ((v75 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, this, 0) & 1) == 0)
      ZinAssertImpl("Replace SEW with EW failed\n");
    if (v88)
    {
      v89 = (char *)v88;
      operator delete(v88);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v93);
    __p = off_24C01FBB0;
    if (v105 < 0)
      operator delete(v103);
    return 0;
  }
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) >= 9uLL)
  {
    v93 = 0;
    v94 = 0;
    v95 = 0;
    InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
    v17 = *(_OWORD *)(InputTensor + 64);
    v107 = *(_OWORD *)(InputTensor + 48);
    v108 = v17;
    *(_QWORD *)v109 = *(_QWORD *)(InputTensor + 80);
    v18 = ZinIrOpLayer::GetInputTensor(this, 1uLL);
    *(_OWORD *)&v109[8] = *(_OWORD *)(v18 + 48);
    *(_OWORD *)&v109[24] = *(_OWORD *)(v18 + 64);
    *(_QWORD *)&v109[40] = *(_QWORD *)(v18 + 80);
    v19 = operator new(0x50uLL);
    v103 = v19 + 5;
    v104 = v19 + 5;
    v20 = v108;
    v21 = *(_OWORD *)&v109[16];
    v19[2] = *(_OWORD *)v109;
    v19[3] = v21;
    v19[4] = *(_OWORD *)&v109[32];
    *v19 = v107;
    v19[1] = v20;
    __p = v19;
    ZinElementWiseLayerUtils::DecomposeElementWiseLayer((int64x2_t **)&__p, (uint64_t *)&v93, **a3, 0);
    if (__p)
    {
      v103 = __p;
      operator delete(__p);
    }
    ZinElementWiseLayerUtils::HandleInputDimensionsMismatch(a2, this, (uint64_t *)&v93);
    *(_QWORD *)&v107 = &v93;
    std::vector<ZinElementWiseLayerUtils::ElementWiseDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  }
  return 0;
}

void sub_206F6CDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void (**a39)(ZinObjectNameFactory *__hidden this),void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a10);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&a28);
  a39 = off_24C01FBB0;
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

uint64_t ZinScaledElementWiseLayer::QualifiesAsEW(ZinScaledElementWiseLayer *this)
{
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v11[4];
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v13 = 0u;
  v14 = 0u;
  v15 = -1;
  v11[0] = &unk_24C020AA8;
  memset(&v11[1], 0, 24);
  v16 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v17 = _D0;
  v18 = 0;
  v19 = 0;
  v12 = 5;
  v6 = *((_QWORD *)this + 8);
  v7 = *(float *)(v6 + 20) == 1.0 && *(float *)(v6 + 16) == 1.0 && *(float *)(v6 + 24) == 0.0;
  if (*(_DWORD *)(v6 + 12))
  {
    if (*(_BYTE *)(v6 + 28))
      v8 = 0;
    else
      v8 = *(unsigned __int8 *)(v6 + 29) == 0;
  }
  else
  {
    v8 = 1;
  }
  v9 = v7 & v8;
  ZinIrUnitInfo::~ZinIrUnitInfo(v11);
  return v9;
}

_QWORD *ZinScaledElementWiseLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  uint64_t v19;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C01CE38;
  v9 = *(_OWORD *)(v7 + 12);
  *(_WORD *)(v8 + 28) = *(_WORD *)(v7 + 28);
  *(_OWORD *)(v8 + 12) = v9;
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v18[0] = v10;
  v18[1] = (uint64_t)v11;
  v19 = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v6, &v19, v18, a3);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206F6D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

float ZinScaledElementWiseLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float result;
  char v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  const __CFString *v12;
  const char *v13;
  unsigned int v14;
  const __CFString *v15;
  const char *v16;
  unsigned int v17;
  const __CFString *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3) >= 3)
    ZinAssertImpl("Scaled Elementwise must have 1 or 2 input.");
  v6 = *((_QWORD *)a1 + 8);
  ZinElementWiseLayerUtils::CheckAllDimensionsBroadcastable((uint64_t **)a2);
  if (a3[1883])
    v8 = 1;
  else
    v8 = ZinScaledElementWiseLayer::QualifiesAsEW(a1);
  v9 = (int *)(v6 + 12);
  v10 = *(_DWORD *)(v6 + 12);
  if (v10 > 4)
    ZinAssertImpl("Unrecognized Scaled ElementWise operation type.");
  if (v10 == 2)
  {
    if (!a3[1883])
    {
      v17 = ZinScaledEWModeToScaledEWType(v9);
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v18 = ZinIrScaledEWTypeToCFString(v17);
      if ((ZinGetString(v18, (uint64_t)&v20) & 1) != 0)
      {
        v19 = (const char *)&v20;
        if (v22 < 0)
          v19 = v20;
        ZinAssertImpl("Scaled EW op %s can't be supported.", v19);
      }
      ZinAssertImpl("ANEC internal error: Failed to get string for Scaled EW type %d", v17);
    }
  }
  else
  {
    if ((v8 & 1) == 0)
    {
      v14 = ZinScaledEWModeToScaledEWType(v9);
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v15 = ZinIrScaledEWTypeToCFString(v14);
      if ((ZinGetString(v15, (uint64_t)&v20) & 1) != 0)
      {
        v16 = (const char *)&v20;
        if (v22 < 0)
          v16 = v20;
        ZinAssertImpl("Scaled EW op %s without default scales and bias can't be supported.", v16);
      }
      ZinAssertImpl("ANEC internal error: Failed to get string for Scaled EW type %d", v14);
    }
    if (v10 != 1)
    {
      result = *(float *)(v6 + 24);
      if (result != 0.0)
      {
        v11 = ZinScaledEWModeToScaledEWType(v9);
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v12 = ZinIrScaledEWTypeToCFString(v11);
        if ((ZinGetString(v12, (uint64_t)&v20) & 1) != 0)
        {
          v13 = (const char *)&v20;
          if (v22 < 0)
            v13 = v20;
          ZinAssertImpl("Scaled EW op %s can't support bias.", v13);
        }
        ZinAssertImpl("ANEC internal error: Failed to get string for Scaled EW type %d", v11);
      }
    }
  }
  return result;
}

void sub_206F6D338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinScaledElementWiseLayer::ComputeOutputDimensions(uint64_t a1, uint64_t *a2, int8x16_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10[2];
  uint64_t v11;

  v4 = *a2;
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v5 == 2)
  {
    ZinElementWiseLayerUtils::GetOutputTensorDims((int64x2_t *)v4, (int64x2_t *)(v4 + 40), v10);
    result = 0;
    v9 = v10[1];
    *a3 = v10[0];
    a3[1] = v9;
    a3[2].i64[0] = v11;
  }
  else if (v5 == 1)
  {
    result = 0;
    v7 = *(int64x2_t *)v4;
    v8 = *(int8x16_t *)(v4 + 16);
    a3[2].i64[0] = *(_QWORD *)(v4 + 32);
    *a3 = (int8x16_t)v7;
    a3[1] = v8;
  }
  else
  {
    *a3 = (int8x16_t)xmmword_207A80930;
    a3[1] = (int8x16_t)vdupq_n_s64(1uLL);
    a3[2].i64[0] = 1;
    return 3;
  }
  return result;
}

_QWORD *ZinScaledElementWiseLayer::OpCodeKindToString@<X0>(ZinScaledElementWiseLayer *this@<X0>, _QWORD *a2@<X8>)
{
  return ScaledElementWiseModeToString(*(_DWORD *)(*((_QWORD *)this + 8) + 12), a2);
}

uint64_t ZinScaledElementWiseLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F6D4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinScaledElementWiseLayer::CanBeUnquantized(ZinIrOpLayer *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;

  if (!ZinIrOpLayer::IsTensorFmtQuantized(a1))
    return 1;
  v4 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  result = ZinQuantizationUtils::TensorFormatCompatible(*(_DWORD *)(v4 + 88), a2);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)a1 + 8);
    if ((*(_DWORD *)(v6 + 12) - 3) > 1)
    {
      return 0;
    }
    else
    {
      v7 = *(float *)(v6 + 24) == 0.0 && *(float *)(v6 + 16) == 1.0 && *(float *)(v6 + 20) == 1.0;
      if (*(_BYTE *)(v6 + 28))
        v8 = 0;
      else
        v8 = *(unsigned __int8 *)(v6 + 29) == 0;
      return v8 & v7;
    }
  }
  return result;
}

uint64_t ZinScaledElementWiseLayer::IsRedundant(ZinScaledElementWiseLayer *this)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  _QWORD *v5;
  ZinIrTensor *v6;
  int v7;
  _QWORD *v8;
  ZinIrTensor *v9;
  int v10;
  _QWORD *v11;
  ZinIrTensor *v12;
  int IsZero;
  _QWORD *v14;
  ZinIrTensor *v15;
  unsigned int v16;
  _QWORD *v17;
  ZinIrTensor *v18;
  int v19;
  _QWORD *v20;
  ZinIrTensor *v21;

  v1 = *((_QWORD *)this + 8);
  if (*(float *)(v1 + 16) != 1.0 || *(float *)(v1 + 20) != 1.0 || *(float *)(v1 + 24) != 0.0)
    return 0;
  v4 = *(_DWORD *)(v1 + 12);
  if (v4 == 2)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 11);
    if (*(_DWORD *)(*(_QWORD *)(*v11 + 64) + 8) == 29)
    {
      v12 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v11 + 32))(*v11, 0, 0);
      IsZero = ZinIrTensor::IsZero(v12);
      v11 = (_QWORD *)*((_QWORD *)this + 11);
    }
    else
    {
      IsZero = 0;
    }
    if (*((_QWORD *)this + 12) - (_QWORD)v11 == 8)
    {
      v19 = 1;
    }
    else
    {
      v20 = (_QWORD *)v11[1];
      if (*(_DWORD *)(v20[8] + 8) == 29)
      {
        v21 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v20 + 32))(v20, 0, 0);
        v19 = ZinIrTensor::IsZero(v21);
      }
      else
      {
        v19 = 0;
      }
    }
    return IsZero & v19;
  }
  else if (v4 == 1)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 11);
    if (*(_DWORD *)(*(_QWORD *)(*v8 + 64) + 8) == 29)
    {
      v9 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v8 + 32))(*v8, 0, 0);
      v10 = ZinIrTensor::IsZero(v9);
      v8 = (_QWORD *)*((_QWORD *)this + 11);
    }
    else
    {
      v10 = 0;
    }
    v14 = (_QWORD *)v8[1];
    if (*(_DWORD *)(v14[8] + 8) == 29)
    {
      v15 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v14 + 32))(v14, 0, 0);
      v16 = ZinIrTensor::IsZero(v15);
    }
    else
    {
      v16 = 0;
    }
    return v10 | v16;
  }
  else
  {
    if (v4)
      return 0;
    v5 = (_QWORD *)*((_QWORD *)this + 11);
    if (*(_DWORD *)(*(_QWORD *)(*v5 + 64) + 8) == 29)
    {
      v6 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0);
      v7 = ZinIrTensor::IsZero(v6);
      v5 = (_QWORD *)*((_QWORD *)this + 11);
    }
    else
    {
      v7 = 0;
    }
    v17 = (_QWORD *)v5[1];
    if (*(_DWORD *)(v17[8] + 8) == 29)
    {
      v18 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v17 + 32))(v17, 0, 0);
      result = ZinIrTensor::IsZero(v18);
    }
    else
    {
      result = 0;
    }
    if (v7 && !*(_BYTE *)(v1 + 29))
      return 1;
    if ((_DWORD)result)
      return !*(_BYTE *)(v1 + 28);
  }
  return result;
}

void ZinIrScaledEWInfo::~ZinIrScaledEWInfo(ZinIrScaledEWInfo *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

__int128 *GetAddressDefaultValueMapping(int a1)
{
  unsigned __int8 v1;
  __int128 *result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  __int128 *v12;
  __guard *v13;
  unsigned int __dst[548];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 4:
      if ((v1 & 1) == 0)
      {
        v12 = &GetAddressDefaultValueMapping(int)::reg_value_map;
          goto LABEL_44;
        GetAddressDefaultValueMapping(int)::reg_value_map = 0u;
        unk_2545275B8 = 0u;
        dword_2545275C8 = 1065353216;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = &GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 5:
      {
        memcpy(__dst, &unk_207AAC060, 0x580uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 176);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 6:
      {
        memcpy(__dst, &unk_207AAC5E0, 0x6E0uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 220);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 7:
      {
        memcpy(__dst, &unk_207AACCC0, 0x7D8uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 251);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 8:
      {
        memcpy(__dst, &unk_207AAD498, 0x598uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 179);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 9:
      {
        memcpy(__dst, &unk_207AADA30, 0x878uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 271);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 10:
      {
        memcpy(__dst, &unk_207AAE2A8, sizeof(__dst));
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 274);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 11:
      {
        memcpy(__dst, &unk_207AAEB38, 0x888uLL);
        std::unordered_map<unsigned int,unsigned int>::unordered_map((uint64_t)&GetAddressDefaultValueMapping(int)::reg_value_map, __dst, 273);
        v12 = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = (__int128 *)&GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    case 15:
      if ((v10 & 1) == 0)
      {
        v12 = &GetAddressDefaultValueMapping(int)::reg_value_map;
          goto LABEL_44;
        GetAddressDefaultValueMapping(int)::reg_value_map = 0u;
        unk_254527558 = 0u;
        dword_254527568 = 1065353216;
        __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
        goto LABEL_43;
      }
      result = &GetAddressDefaultValueMapping(int)::reg_value_map;
      break;
    default:
      if ((v11 & 1) != 0)
      {
        result = &GetAddressDefaultValueMapping(int)::reg_value_map;
      }
      else
      {
        v12 = &GetAddressDefaultValueMapping(int)::reg_value_map;
        {
          GetAddressDefaultValueMapping(int)::reg_value_map = 0u;
          unk_254527618 = 0u;
          dword_254527628 = 1065353216;
          __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &GetAddressDefaultValueMapping(int)::reg_value_map, &dword_2069AB000);
LABEL_43:
          __cxa_guard_release(v13);
        }
LABEL_44:
        result = v12;
      }
      break;
  }
  return result;
}

void sub_206F6DCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,unsigned int>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_206F6DDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_206F6DFEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinIrLiveIOManager::ZinIrLiveIOManager(ZinIrLiveIOManager *this, const ZinIrHalParameters *a2)
{
  char *v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18[3];
  int v19;
  uint64_t v20[3];
  int v21;
  uint64_t v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = a2;
  v3 = (char *)this + 16;
  *((_QWORD *)this + 1) = 0;
  v15 = 0;
  v16 = 0;
  v14 = &v15;
  v17 = 0;
  std::map<std::string,ZinIrIOInfo>::map[abi:ne180100](v18, (uint64_t)&v14);
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v19 = 1;
  std::map<std::string,ZinIrIOInfo>::map[abi:ne180100](v20, (uint64_t)&v11);
  v9 = 0;
  v10 = 0;
  v8 = &v9;
  v21 = 2;
  std::map<std::string,ZinIrIOInfo>::map[abi:ne180100](v22, (uint64_t)&v8);
  std::map<IOType,std::map<std::string,ZinIrIOInfo>>::map[abi:ne180100]((uint64_t)v3, &v17, 3);
  for (i = 0; i != -12; i -= 4)
    std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&v22[i], (_QWORD *)v22[i + 1]);
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&v8, v9);
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&v11, v12);
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&v14, v15);
  v15 = 0;
  v16 = 0;
  v14 = &v15;
  v17 = 0;
  std::set<std::string>::set[abi:ne180100](v18, (uint64_t)&v14);
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v19 = 1;
  std::set<std::string>::set[abi:ne180100](v20, (uint64_t)&v11);
  v9 = 0;
  v10 = 0;
  v8 = &v9;
  v21 = 2;
  std::set<std::string>::set[abi:ne180100](v22, (uint64_t)&v8);
  std::map<IOType,std::set<std::string>>::map[abi:ne180100]((uint64_t)this + 40, &v17, 3);
  for (j = 0; j != -12; j -= 4)
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v22[j], (char *)v22[j + 1]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v8, v9);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v11, v12);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v14, v15);
  v15 = 0;
  v16 = 0;
  v14 = &v15;
  v17 = 0;
  std::set<std::string>::set[abi:ne180100](v18, (uint64_t)&v14);
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v19 = 1;
  std::set<std::string>::set[abi:ne180100](v20, (uint64_t)&v11);
  v9 = 0;
  v10 = 0;
  v8 = &v9;
  v21 = 2;
  std::set<std::string>::set[abi:ne180100](v22, (uint64_t)&v8);
  std::map<IOType,std::set<std::string>>::map[abi:ne180100]((uint64_t)this + 64, &v17, 3);
  for (k = 0; k != -12; k -= 4)
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v22[k], (char *)v22[k + 1]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v8, v9);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v11, v12);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v14, v15);
  v15 = 0;
  v16 = 0;
  v14 = &v15;
  v17 = 0;
  std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::set[abi:ne180100](v18, (uint64_t)&v14);
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v19 = 1;
  std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::set[abi:ne180100](v20, (uint64_t)&v11);
  v9 = 0;
  v10 = 0;
  v8 = &v9;
  v21 = 2;
  std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::set[abi:ne180100](v22, (uint64_t)&v8);
  std::map<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>::map[abi:ne180100]((uint64_t)this + 88, &v17, 3);
  for (m = 0; m != -12; m -= 4)
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v22[m], (_QWORD *)v22[m + 1]);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v8, v9);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v11, v12);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v14, v15);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 240;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
}

void sub_206F6E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17, _QWORD *a18)
{
  ZinIrBindings **v18;
  _QWORD **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;

  for (i = 0; i != -96; i -= 32)
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy(v23 + i + 72, *(_QWORD **)(v23 + i + 80));
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&a17, a18);
  std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::destroy(v22, v19[9]);
  std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::destroy(v21, v19[6]);
  std::__tree<std::__value_type<IOType,std::map<std::string,ZinIrIOInfo>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::map<std::string,ZinIrIOInfo>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::map<std::string,ZinIrIOInfo>>>>::destroy(v20, v19[3]);
  std::unique_ptr<ZinIrBindings>::reset[abi:ne180100](v18, 0);
  _Unwind_Resume(a1);
}

void sub_206F6E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17, _QWORD *a18)
{
  uint64_t v18;
  uint64_t i;

  for (i = 0; i != -96; i -= 32)
    std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy(v18 + i + 72, *(_QWORD **)(v18 + i + 80));
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::destroy((uint64_t)&a17, a18);
  JUMPOUT(0x206F6E650);
}

uint64_t ZinIrLiveIOManager::ParseLiveInputs(ZinIrLiveIOManager *this, CFDictionaryRef theDict, uint64_t **a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  CFIndex v8;
  __int128 v9;
  const __CFString *ValueAtIndex;
  const __CFString *v11;
  CFTypeID v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CFIndex Count;
  void *v27[2];
  void *v28[4];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _BYTE v35[40];
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Inputs"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFArrayGetTypeID()))
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    Count = CFArrayGetCount(v6);
    if (Count < 1)
    {
LABEL_17:
      v23 = ZinIrLiveIOManager::SetLiveIOs((uint64_t)this, 0, &v37);
    }
    else
    {
      v8 = 0;
      while (1)
      {
        LODWORD(v29[0]) = 0;
        memset(v28, 0, sizeof(v28));
        *(_OWORD *)v27 = 0u;
        *(_QWORD *)&v9 = -1;
        *((_QWORD *)&v9 + 1) = -1;
        *(_OWORD *)((char *)v29 + 8) = v9;
        *(_OWORD *)((char *)&v29[1] + 8) = v9;
        *((_QWORD *)&v29[2] + 1) = -1;
        LOBYTE(v30) = 0;
        BYTE8(v32) = 0;
        *(_QWORD *)v35 = -1;
        v33 = v9;
        v34[0] = v9;
        *(_OWORD *)((char *)v34 + 12) = v9;
        v35[8] = 0;
        memset(&v35[12], 0, 28);
        LODWORD(v36) = 5;
        *((_QWORD *)&v36 + 1) = -1;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v8);
        v11 = ValueAtIndex;
        if (!ValueAtIndex)
          break;
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFStringGetTypeID() || ZinParseInput(theDict, v11, (ZinIrIOInfo *)v27, a3))
          break;
        v13 = v38;
        if (v38 >= v39)
        {
          v38 = std::vector<ZinIrIOInfo>::__emplace_back_slow_path<ZinIrIOInfo>(&v37, (__int128 *)v27);
          if (*(_QWORD *)&v35[16])
          {
            *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
            operator delete(*(void **)&v35[16]);
          }
        }
        else
        {
          v14 = *(_OWORD *)v27;
          *(void **)(v38 + 16) = v28[0];
          *(_OWORD *)v13 = v14;
          v27[1] = 0;
          v28[0] = 0;
          v27[0] = 0;
          v15 = v28[3];
          *(_OWORD *)(v13 + 24) = *(_OWORD *)&v28[1];
          *(_QWORD *)(v13 + 40) = v15;
          memset(&v28[1], 0, 24);
          v16 = v29[1];
          *(_OWORD *)(v13 + 48) = v29[0];
          *(_OWORD *)(v13 + 64) = v16;
          v17 = v29[2];
          v18 = v30;
          v19 = v32;
          *(_OWORD *)(v13 + 112) = v31;
          *(_OWORD *)(v13 + 128) = v19;
          *(_OWORD *)(v13 + 80) = v17;
          *(_OWORD *)(v13 + 96) = v18;
          v20 = v33;
          v21 = v34[0];
          v22 = *(_OWORD *)v35;
          *(_OWORD *)(v13 + 176) = v34[1];
          *(_OWORD *)(v13 + 192) = v22;
          *(_OWORD *)(v13 + 144) = v20;
          *(_OWORD *)(v13 + 160) = v21;
          *(_QWORD *)(v13 + 208) = 0;
          *(_QWORD *)(v13 + 216) = 0;
          *(_QWORD *)(v13 + 224) = 0;
          *(_OWORD *)(v13 + 208) = *(_OWORD *)&v35[16];
          *(_QWORD *)(v13 + 224) = *(_QWORD *)&v35[32];
          memset(&v35[16], 0, 24);
          *(_OWORD *)(v13 + 232) = v36;
          v38 = v13 + 248;
        }
        if (SHIBYTE(v28[3]) < 0)
          operator delete(v28[1]);
        if (SHIBYTE(v28[0]) < 0)
          operator delete(v27[0]);
        if (Count == ++v8)
          goto LABEL_17;
      }
      ZinIrNetworkStatus::SetError((CFArrayRef *)a3, CFSTR("InvalidInputSyntax"));
      if (*(_QWORD *)&v35[16])
      {
        *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
        operator delete(*(void **)&v35[16]);
      }
      if (SHIBYTE(v28[3]) < 0)
        operator delete(v28[1]);
      if (SHIBYTE(v28[0]) < 0)
        operator delete(v27[0]);
      v23 = 0;
    }
    v27[0] = &v37;
    std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  }
  else
  {
    ZinIrNetworkStatus::SetError((CFArrayRef *)a3, CFSTR("InvalidInputSyntax"));
    return 0;
  }
  return v23;
}

void sub_206F6E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  ZinIrIOInfo::~ZinIrIOInfo((ZinIrIOInfo *)&a15);
  a15 = (void **)(v15 - 112);
  std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLiveIOManager::SetLiveIOs(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t **v19;
  uint64_t result;
  _BOOL4 v21;
  int v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v5 = std::map<ZinIrDimension,unsigned long>::at(a1 + 16, &v22);
  v6 = std::map<ZinIrDimension,unsigned long>::at(a1 + 40, &v22);
  v7 = std::map<ZinIrDimension,unsigned long>::at(a1 + 64, &v22);
  v8 = *a3;
  v9 = a3[1];
  if (*a3 == v9)
    return 1;
  v10 = v7;
  while (v5 + 1 == (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v5, (void **)v8))
  {
    *(_QWORD *)buf = v8;
    v11 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v5, (void **)v8, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    std::string::operator=((std::string *)(v11 + 7), (const std::string *)v8);
    std::string::operator=((std::string *)(v11 + 10), (const std::string *)(v8 + 24));
    v12 = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v11 + 13) = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(v11 + 15) = v12;
    v13 = *(_OWORD *)(v8 + 112);
    v14 = *(_OWORD *)(v8 + 128);
    v15 = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v11 + 17) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v11 + 23) = v14;
    *(_OWORD *)(v11 + 21) = v13;
    *(_OWORD *)(v11 + 19) = v15;
    v16 = *(_OWORD *)(v8 + 176);
    v17 = *(_OWORD *)(v8 + 192);
    v18 = *(_OWORD *)(v8 + 160);
    *(_OWORD *)(v11 + 25) = *(_OWORD *)(v8 + 144);
    *(_OWORD *)(v11 + 31) = v17;
    *(_OWORD *)(v11 + 29) = v16;
    *(_OWORD *)(v11 + 27) = v18;
    if ((uint64_t *)v8 != v11 + 7)
      std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)v11 + 264, *(char **)(v8 + 208), *(_QWORD *)(v8 + 216), (uint64_t)(*(_QWORD *)(v8 + 216) - *(_QWORD *)(v8 + 208)) >> 4);
    *((_OWORD *)v11 + 18) = *(_OWORD *)(v8 + 232);
    if (*(_BYTE *)(v8 + 200))
      v19 = (uint64_t **)v6;
    else
      v19 = (uint64_t **)v10;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v19, (void **)v8, v8);
    v8 += 248;
    if (v8 == v9)
      return 1;
  }
  v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v21)
  {
    if (*(char *)(v8 + 23) < 0)
      v8 = *(_QWORD *)v8;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Duplicate livein: %s\n", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ZinIrLiveIOManager::ParseLiveStates(ZinIrLiveIOManager *this, CFDictionaryRef theDict, uint64_t **a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  CFIndex v8;
  __int128 v9;
  const __CFString *ValueAtIndex;
  const __CFString *v11;
  CFTypeID v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CFIndex Count;
  void *v27[2];
  void *v28[4];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _BYTE v35[40];
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("States"));
  if (!Value)
    return 1;
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFArrayGetTypeID())
    return 1;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
LABEL_17:
    v23 = ZinIrLiveIOManager::SetLiveIOs((uint64_t)this, 2, &v37);
  }
  else
  {
    v8 = 0;
    while (1)
    {
      LODWORD(v29[0]) = 0;
      memset(v28, 0, sizeof(v28));
      *(_OWORD *)v27 = 0u;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      *(_OWORD *)((char *)v29 + 8) = v9;
      *(_OWORD *)((char *)&v29[1] + 8) = v9;
      *((_QWORD *)&v29[2] + 1) = -1;
      LOBYTE(v30) = 0;
      BYTE8(v32) = 0;
      *(_QWORD *)v35 = -1;
      v33 = v9;
      v34[0] = v9;
      *(_OWORD *)((char *)v34 + 12) = v9;
      v35[8] = 0;
      memset(&v35[12], 0, 28);
      LODWORD(v36) = 5;
      *((_QWORD *)&v36 + 1) = -1;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v8);
      v11 = ValueAtIndex;
      if (!ValueAtIndex)
        break;
      v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFStringGetTypeID() || ZinParseState(theDict, v11, (ZinIrIOInfo *)v27, a3))
        break;
      v13 = v38;
      if (v38 >= v39)
      {
        v38 = std::vector<ZinIrIOInfo>::__emplace_back_slow_path<ZinIrIOInfo>(&v37, (__int128 *)v27);
        if (*(_QWORD *)&v35[16])
        {
          *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
          operator delete(*(void **)&v35[16]);
        }
      }
      else
      {
        v14 = *(_OWORD *)v27;
        *(void **)(v38 + 16) = v28[0];
        *(_OWORD *)v13 = v14;
        v27[1] = 0;
        v28[0] = 0;
        v27[0] = 0;
        v15 = v28[3];
        *(_OWORD *)(v13 + 24) = *(_OWORD *)&v28[1];
        *(_QWORD *)(v13 + 40) = v15;
        memset(&v28[1], 0, 24);
        v16 = v29[1];
        *(_OWORD *)(v13 + 48) = v29[0];
        *(_OWORD *)(v13 + 64) = v16;
        v17 = v29[2];
        v18 = v30;
        v19 = v32;
        *(_OWORD *)(v13 + 112) = v31;
        *(_OWORD *)(v13 + 128) = v19;
        *(_OWORD *)(v13 + 80) = v17;
        *(_OWORD *)(v13 + 96) = v18;
        v20 = v33;
        v21 = v34[0];
        v22 = *(_OWORD *)v35;
        *(_OWORD *)(v13 + 176) = v34[1];
        *(_OWORD *)(v13 + 192) = v22;
        *(_OWORD *)(v13 + 144) = v20;
        *(_OWORD *)(v13 + 160) = v21;
        *(_QWORD *)(v13 + 208) = 0;
        *(_QWORD *)(v13 + 216) = 0;
        *(_QWORD *)(v13 + 224) = 0;
        *(_OWORD *)(v13 + 208) = *(_OWORD *)&v35[16];
        *(_QWORD *)(v13 + 224) = *(_QWORD *)&v35[32];
        memset(&v35[16], 0, 24);
        *(_OWORD *)(v13 + 232) = v36;
        v38 = v13 + 248;
      }
      if (SHIBYTE(v28[3]) < 0)
        operator delete(v28[1]);
      if (SHIBYTE(v28[0]) < 0)
        operator delete(v27[0]);
      if (Count == ++v8)
        goto LABEL_17;
    }
    ZinIrNetworkStatus::SetError((CFArrayRef *)a3, CFSTR("InvalidStateSyntax"));
    if (*(_QWORD *)&v35[16])
    {
      *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
      operator delete(*(void **)&v35[16]);
    }
    if (SHIBYTE(v28[3]) < 0)
      operator delete(v28[1]);
    if (SHIBYTE(v28[0]) < 0)
      operator delete(v27[0]);
    v23 = 0;
  }
  v27[0] = &v37;
  std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  return v23;
}

void sub_206F6EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  ZinIrIOInfo::~ZinIrIOInfo((ZinIrIOInfo *)&a15);
  a15 = (void **)(v15 - 112);
  std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLiveIOManager::ParseLiveOutputs(ZinIrLiveIOManager *this, CFDictionaryRef theDict, CFArrayRef *a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  CFIndex v8;
  __int128 v9;
  const __CFString *ValueAtIndex;
  const __CFString *v11;
  CFTypeID v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CFIndex Count;
  void *v27[2];
  void *v28[4];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _BYTE v35[40];
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Outputs"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFArrayGetTypeID()))
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    Count = CFArrayGetCount(v6);
    if (Count < 1)
    {
LABEL_17:
      v23 = ZinIrLiveIOManager::SetLiveIOs((uint64_t)this, 1, &v37);
    }
    else
    {
      v8 = 0;
      while (1)
      {
        LODWORD(v29[0]) = 0;
        memset(v28, 0, sizeof(v28));
        *(_OWORD *)v27 = 0u;
        *(_QWORD *)&v9 = -1;
        *((_QWORD *)&v9 + 1) = -1;
        *(_OWORD *)((char *)v29 + 8) = v9;
        *(_OWORD *)((char *)&v29[1] + 8) = v9;
        *((_QWORD *)&v29[2] + 1) = -1;
        LOBYTE(v30) = 0;
        BYTE8(v32) = 0;
        *(_QWORD *)v35 = -1;
        v33 = v9;
        v34[0] = v9;
        *(_OWORD *)((char *)v34 + 12) = v9;
        v35[8] = 0;
        memset(&v35[12], 0, 28);
        LODWORD(v36) = 5;
        *((_QWORD *)&v36 + 1) = -1;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v8);
        v11 = ValueAtIndex;
        if (!ValueAtIndex)
          break;
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFStringGetTypeID() || ZinParseOutput(theDict, v11, (ZinIrIOInfo *)v27, a3))
          break;
        v13 = v38;
        if (v38 >= v39)
        {
          v38 = std::vector<ZinIrIOInfo>::__emplace_back_slow_path<ZinIrIOInfo>(&v37, (__int128 *)v27);
          if (*(_QWORD *)&v35[16])
          {
            *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
            operator delete(*(void **)&v35[16]);
          }
        }
        else
        {
          v14 = *(_OWORD *)v27;
          *(void **)(v38 + 16) = v28[0];
          *(_OWORD *)v13 = v14;
          v27[1] = 0;
          v28[0] = 0;
          v27[0] = 0;
          v15 = v28[3];
          *(_OWORD *)(v13 + 24) = *(_OWORD *)&v28[1];
          *(_QWORD *)(v13 + 40) = v15;
          memset(&v28[1], 0, 24);
          v16 = v29[1];
          *(_OWORD *)(v13 + 48) = v29[0];
          *(_OWORD *)(v13 + 64) = v16;
          v17 = v29[2];
          v18 = v30;
          v19 = v32;
          *(_OWORD *)(v13 + 112) = v31;
          *(_OWORD *)(v13 + 128) = v19;
          *(_OWORD *)(v13 + 80) = v17;
          *(_OWORD *)(v13 + 96) = v18;
          v20 = v33;
          v21 = v34[0];
          v22 = *(_OWORD *)v35;
          *(_OWORD *)(v13 + 176) = v34[1];
          *(_OWORD *)(v13 + 192) = v22;
          *(_OWORD *)(v13 + 144) = v20;
          *(_OWORD *)(v13 + 160) = v21;
          *(_QWORD *)(v13 + 208) = 0;
          *(_QWORD *)(v13 + 216) = 0;
          *(_QWORD *)(v13 + 224) = 0;
          *(_OWORD *)(v13 + 208) = *(_OWORD *)&v35[16];
          *(_QWORD *)(v13 + 224) = *(_QWORD *)&v35[32];
          memset(&v35[16], 0, 24);
          *(_OWORD *)(v13 + 232) = v36;
          v38 = v13 + 248;
        }
        if (SHIBYTE(v28[3]) < 0)
          operator delete(v28[1]);
        if (SHIBYTE(v28[0]) < 0)
          operator delete(v27[0]);
        if (Count == ++v8)
          goto LABEL_17;
      }
      ZinIrNetworkStatus::SetError(a3, CFSTR("InvalidOutputSyntax"));
      if (*(_QWORD *)&v35[16])
      {
        *(_QWORD *)&v35[24] = *(_QWORD *)&v35[16];
        operator delete(*(void **)&v35[16]);
      }
      if (SHIBYTE(v28[3]) < 0)
        operator delete(v28[1]);
      if (SHIBYTE(v28[0]) < 0)
        operator delete(v27[0]);
      v23 = 0;
    }
    v27[0] = &v37;
    std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  }
  else
  {
    ZinIrNetworkStatus::SetError(a3, CFSTR("InvalidOutputSyntax"));
    return 0;
  }
  return v23;
}

void sub_206F6F1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  ZinIrIOInfo::~ZinIrIOInfo((ZinIrIOInfo *)&a15);
  a15 = (void **)(v15 - 112);
  std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLiveIOManager::ParseLiveInputParams(ZinIrLiveIOManager *this, CFDictionaryRef theDict, CFArrayRef *a3)
{
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t **v12;
  void **v13;
  NSObject *v14;
  const void *ValueAtIndex;
  uint64_t v16;
  CFTypeID v17;
  char v19;
  std::string *p_p;
  uint64_t *v21;
  std::string __p;
  int v24;
  _BYTE buf[24];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("InputParams"));
  if (Value)
  {
    v7 = Value;
    v8 = CFGetTypeID(Value);
    if (v8 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v7);
      v10 = Count - 1;
      if (Count >= 1)
      {
        v11 = 0;
        v12 = (uint64_t **)((char *)this + 160);
        v13 = (void **)((char *)this + 168);
        v14 = MEMORY[0x24BDACB70];
        while (1)
        {
          memset(&__p, 0, sizeof(__p));
          v24 = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(v7, v11);
          v16 = (uint64_t)ValueAtIndex;
          if (ValueAtIndex)
          {
            v17 = CFGetTypeID(ValueAtIndex);
            if (v17 != CFStringGetTypeID()
              || ZinParseInputParam(theDict, (CFStringRef)v16, (uint64_t)&__p, a3))
            {
              goto LABEL_8;
            }
            if (v13 == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v12, (void **)&__p.__r_.__value_.__l.__data_))
            {
              *(_QWORD *)buf = &__p;
              v21 = std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
              std::string::operator=((std::string *)(v21 + 7), &__p);
              *((_DWORD *)v21 + 20) = v24;
              v16 = 1;
              goto LABEL_9;
            }
            v16 = 0;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              break;
          }
LABEL_9:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v10 == v11++)
            v19 = 0;
          else
            v19 = v16;
          if ((v19 & 1) == 0)
            return v16;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = p_p;
        _os_log_impl(&dword_2069AB000, v14, OS_LOG_TYPE_DEFAULT, "Duplicate livein param: %s\n", buf, 0xCu);
LABEL_8:
        v16 = 0;
        goto LABEL_9;
      }
    }
  }
  return 1;
}

void sub_206F6F410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrLiveIOManager::ParseLiveIOUnits(ZinIrLiveIOManager *this, CFDictionaryRef theDict, ZinIrNetworkStatus *a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  BOOL v11;
  CFIndex v12;
  const __CFArray *v13;
  const __CFString *ValueAtIndex;
  const __CFString *v15;
  CFTypeID v16;
  CFMutableDictionaryRef *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  std::string *v24;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  void **v29;
  void **v30;
  uint64_t **v31;
  uint64_t **v32;
  void *v34;
  std::string v35;
  int v36;
  __int128 v37;
  _BYTE v38[24];
  uint64_t v39;
  int v40;
  _BYTE buf[12];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Units"));
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
      v8 = v6;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    v10 = Count;
    v11 = 0;
    v12 = 0;
    v40 = 0;
    v32 = (uint64_t **)((char *)this + 112);
    v31 = (uint64_t **)((char *)this + 184);
    v29 = (void **)((char *)this + 192);
    v30 = (void **)((char *)this + 120);
    while (1)
    {
      v13 = v8;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v12);
      v15 = ValueAtIndex;
      if (!ValueAtIndex)
        return v11;
      v16 = CFGetTypeID(ValueAtIndex);
      if (v16 != CFStringGetTypeID())
        return v11;
      v17 = ZinIrNetworkStatus::AddUnit(a3, v15);
      v18 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v15);
      v19 = v18;
      if (!v18)
        return v11;
      v20 = CFGetTypeID(v18);
      if (v20 != CFDictionaryGetTypeID() || ZinParseUnitType(v19, &v40, v17))
        return v11;
      v21 = v40;
      if (v40 == 48)
      {
        memset(&v35, 0, sizeof(v35));
        v36 = 0;
        v37 = 0u;
        *(_OWORD *)v38 = 0u;
        *(_QWORD *)&v38[16] = -1;
        v34 = &unk_24C022F60;
        HIDWORD(v39) = -1;
        if (ZinParseUnit(theDict, v15, (ZinIrUnitInfo *)&v34, v17)
          || ZinParsePlaneReaderUnit(v19, (ZinIrPlaneReaderUnitInfo *)&v34, v17))
        {
          goto LABEL_41;
        }
        if (v30 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v32, (void **)&v35.__r_.__value_.__l.__data_))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v35;
            else
              v24 = (std::string *)v35.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v24;
            v25 = MEMORY[0x24BDACB70];
            v26 = "Duplicate plane reader unit: %s\n";
LABEL_40:
            _os_log_impl(&dword_2069AB000, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 0xCu);
          }
LABEL_41:
          ZinIrUnitInfo::~ZinIrUnitInfo(&v34);
          return v11;
        }
        *(_QWORD *)buf = &v35;
        v22 = std::__tree<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
        std::string::operator=((std::string *)(v22 + 8), &v35);
        *((_DWORD *)v22 + 22) = v36;
        if (v22 + 7 != (uint64_t *)&v34)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v22 + 4, (std::string *)v37, *((__int128 **)&v37 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3));
        *(_OWORD *)(v22 + 15) = *(_OWORD *)&v38[8];
        v22[17] = v39;
        ZinIrUnitInfo::~ZinIrUnitInfo(&v34);
        v21 = v40;
      }
      if (v21 == 49)
      {
        memset(&v35, 0, sizeof(v35));
        v36 = 0;
        v37 = 0u;
        *(_OWORD *)v38 = 0u;
        *(_QWORD *)&v38[16] = -1;
        v34 = &unk_24C022F80;
        if (ZinParseUnit(theDict, v15, (ZinIrUnitInfo *)&v34, v17)
          || ZinParsePlaneWriterUnit(v19, (ZinIrPlaneWriterUnitInfo *)&v34, v17))
        {
          goto LABEL_41;
        }
        if (v29 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v31, (void **)&v35.__r_.__value_.__l.__data_))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &v35;
            else
              v27 = (std::string *)v35.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v27;
            v25 = MEMORY[0x24BDACB70];
            v26 = "Duplicate plane writer unit: %s\n";
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        *(_QWORD *)buf = &v35;
        v23 = std::__tree<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
        std::string::operator=((std::string *)(v23 + 8), &v35);
        *((_DWORD *)v23 + 22) = v36;
        if (v23 + 7 != (uint64_t *)&v34)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v23 + 4, (std::string *)v37, *((__int128 **)&v37 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3));
        *(_OWORD *)(v23 + 15) = *(_OWORD *)&v38[8];
        *((_DWORD *)v23 + 34) = v39;
        ZinIrUnitInfo::~ZinIrUnitInfo(&v34);
      }
      v11 = ++v12 >= v10;
      v8 = v13;
      if (v10 == v12)
        return v11;
    }
  }
  return 1;
}

void sub_206F6F8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLiveIOManager::ParseLiveIO(ZinIrLiveIOManager *this, const __CFDictionary *a2, ZinIrNetworkStatus *a3)
{
  const __CFString *v7;

  if (ZinIrLiveIOManager::ParseLiveInputs(this, a2, (uint64_t **)a3))
  {
    if (ZinIrLiveIOManager::ParseLiveStates(this, a2, (uint64_t **)a3))
    {
      if (ZinIrLiveIOManager::ParseLiveInputParams(this, a2, (CFArrayRef *)a3))
      {
        if (ZinIrLiveIOManager::ParseLiveOutputs(this, a2, (CFArrayRef *)a3))
        {
          if (ZinIrLiveIOManager::ParseLiveIOUnits(this, a2, a3))
            return 1;
          v7 = CFSTR("InvalidUnit");
        }
        else
        {
          v7 = CFSTR("InvalidOutput");
        }
      }
      else
      {
        v7 = CFSTR("InvalidInputParam");
      }
    }
    else
    {
      v7 = CFSTR("InvalidState");
    }
  }
  else
  {
    v7 = CFSTR("InvalidInput");
  }
  ZinIrNetworkStatus::SetError((CFArrayRef *)a3, v7);
  return 0;
}

uint64_t ZinIrLiveIOManager::SetLiveInputParams(uint64_t a1, std::string **a2)
{
  std::string *v2;
  uint64_t *v3;
  uint64_t **v4;
  void **v5;
  uint64_t *v6;
  uint64_t result;
  _BOOL4 v8;
  _BYTE buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = (uint64_t *)a2[1];
  if (*a2 == (std::string *)v3)
    return 1;
  v4 = (uint64_t **)(a1 + 160);
  v5 = (void **)(a1 + 168);
  while (v5 == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v4, (void **)&v2->__r_.__value_.__l.__data_))
  {
    *(_QWORD *)buf = v2;
    v6 = std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void **)&v2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    std::string::operator=((std::string *)(v6 + 7), v2);
    *((_DWORD *)v6 + 20) = v2[1].__r_.__value_.__l.__data_;
    v2 = (std::string *)((char *)v2 + 32);
    if (v2 == (std::string *)v3)
      return 1;
  }
  v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v8)
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Duplicate input param: %s\n", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ZinIrLiveIOManager::SetLiveIO(uint64_t a1, uint64_t a2, std::string **a3, CFArrayRef *this)
{
  uint64_t v5;
  int *v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  const __CFString *v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  int v30;
  int v31;

  v6 = (int *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_11;
  v10 = a2 + 8;
  v11 = *(_QWORD *)(a2 + 8);
  do
  {
    v12 = *(_DWORD *)(v11 + 32);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (!v13)
      v10 = v11;
    v11 = *v14;
  }
  while (*v14);
  if ((int *)v10 == v6 || *(int *)(v10 + 32) > 0)
    goto LABEL_11;
  v17 = a2 + 8;
  do
  {
    v18 = *(_DWORD *)(v5 + 32);
    v19 = v18 < 1;
    if (v18 >= 1)
      v20 = (uint64_t *)v5;
    else
      v20 = (uint64_t *)(v5 + 8);
    if (!v19)
      v17 = v5;
    v5 = *v20;
  }
  while (*v20);
  if ((int *)v17 == v6 || *(int *)(v17 + 32) >= 2)
    goto LABEL_23;
  v31 = 0;
  v21 = std::map<ZinIrDimension,unsigned long>::at(a2, &v31);
  if ((ZinIrLiveIOManager::SetLiveIOs(a1, 0, v21) & 1) == 0)
  {
LABEL_11:
    v15 = CFSTR("InvalidInput");
    goto LABEL_12;
  }
  v30 = 1;
  v22 = std::map<ZinIrDimension,unsigned long>::at(a2, &v30);
  if ((ZinIrLiveIOManager::SetLiveIOs(a1, 1, v22) & 1) == 0)
  {
LABEL_23:
    v15 = CFSTR("InvalidOutput");
    goto LABEL_12;
  }
  v23 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_37;
  v24 = v6;
  do
  {
    v25 = *(_DWORD *)(v23 + 32);
    v26 = v25 < 2;
    if (v25 >= 2)
      v27 = (uint64_t *)v23;
    else
      v27 = (uint64_t *)(v23 + 8);
    if (!v26)
      v24 = (int *)v23;
    v23 = *v27;
  }
  while (*v27);
  if (v24 == v6
    || v24[8] > 2
    || (v29 = 2,
        v28 = std::map<ZinIrDimension,unsigned long>::at(a2, &v29),
        (ZinIrLiveIOManager::SetLiveIOs(a1, 2, v28) & 1) != 0))
  {
LABEL_37:
    if ((ZinIrLiveIOManager::SetLiveInputParams(a1, a3) & 1) != 0)
      return 1;
    v15 = CFSTR("InvalidInputParam");
  }
  else
  {
    v15 = CFSTR("InvalidState");
  }
LABEL_12:
  ZinIrNetworkStatus::SetError(this, v15);
  return 0;
}

uint64_t ZinIrLiveIOManager::HasMultiplanarLiveIO(ZinIrLiveIOManager *this)
{
  uint64_t v1;
  ZinIrLiveIOManager *v3;

  v3 = this;
  v1 = 1;
  if ((ZinIrLiveIOManager::HasMultiplanarLiveIO(void)const::$_0::operator()((uint64_t *)&v3, 0) & 1) == 0
    && (ZinIrLiveIOManager::HasMultiplanarLiveIO(void)const::$_0::operator()((uint64_t *)&v3, 1) & 1) == 0)
  {
    return ZinIrLiveIOManager::HasMultiplanarLiveIO(void)const::$_0::operator()((uint64_t *)&v3, 2);
  }
  return v1;
}

uint64_t ZinIrLiveIOManager::HasMultiplanarLiveIO(void)const::$_0::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  unint64_t PlaneCount;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  _BYTE v16[16];
  void *__p;
  void *v18;
  int v19;

  v19 = a2;
  v2 = *a1;
  v3 = std::map<ZinIrDimension,unsigned long>::at(*a1 + 40, &v19);
  v4 = std::map<ZinIrDimension,unsigned long>::at(v2 + 16, &v19);
  v7 = *v3;
  v5 = v3 + 1;
  v6 = (void **)v7;
  if ((uint64_t *)v7 == v5)
    return 0;
  v8 = (uint64_t)v4;
  v9 = (void **)(v4 + 1);
  while (1)
  {
    v10 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v8, v6 + 4);
    if (v9 != v10)
    {
      ZinIr4CCInfo::ZinIr4CCInfo(v16, *((unsigned int *)v10 + 65));
      PlaneCount = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v16);
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      if (PlaneCount >= 2)
        break;
    }
    v12 = (uint64_t *)v6[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (uint64_t *)v6[2];
        v14 = *v13 == (_QWORD)v6;
        v6 = (void **)v13;
      }
      while (!v14);
    }
    v6 = (void **)v13;
    if (v13 == v5)
      return 0;
  }
  return 1;
}

void sub_206F6FDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *ZinIrLiveIOManager::GetLiveIOTensors(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return std::map<ZinIrDimension,unsigned long>::at(a1 + 88, &v3);
}

uint64_t *ZinIrLiveIOManager::GetLiveIOs(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return std::map<ZinIrDimension,unsigned long>::at(a1 + 16, &v3);
}

BOOL ZinIrLiveIOManager::PrepareLiveIn(uint64_t **this, CFArrayRef *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t *v8;
  std::vector<std::string>::size_type PlaneCount;
  std::vector<std::string> *v10;
  void **v11;
  void **v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v25;
  uint64_t v27;
  std::vector<std::string> v28;
  std::string __x;
  __int128 *v30[2];
  void *__p;
  void *v32;
  __int128 *v33;
  std::vector<std::string> *v34;

  LODWORD(v30[0]) = 0;
  v3 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(this + 5), (int *)v30);
  v25 = this;
  LODWORD(v30[0]) = 0;
  v4 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(this + 2), (int *)v30);
  v27 = (uint64_t)v3;
  v7 = (void **)*v3;
  v6 = (void **)(v3 + 1);
  v5 = v7;
  if (v7 != v6)
  {
    do
    {
      v30[0] = (__int128 *)(v5 + 4);
      v8 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v4, v5 + 4, (uint64_t)&std::piecewise_construct, v30);
      ZinIr4CCInfo::ZinIr4CCInfo(v30, *((unsigned int *)v8 + 65));
      PlaneCount = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v30);
      if (PlaneCount == 1)
      {
        if (*((char *)v5 + 55) < 0)
          std::string::__init_copy_ctor_external(&__x, (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
        else
          __x = *(std::string *)(v5 + 4);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__x, &byte_207AF6795);
      }
      std::vector<std::string>::vector(&v28, PlaneCount, &__x);
      v33 = (__int128 *)(v5 + 4);
      v10 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 17, v5 + 4, (uint64_t)&std::piecewise_construct, &v33)+ 7);
      if (v10 != &v28)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v10, v28.__begin_, (__int128 *)v28.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
      v34 = &v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      v11 = (void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (void **)v5[2];
          v13 = *v12 == v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != v6);
  }
  v14 = this[14];
  v15 = (uint64_t *)(this + 15);
  if (v14 == (uint64_t *)(v25 + 15))
    return 1;
  while (1)
  {
    v16 = (void **)v14[12];
    v17 = *((unsigned int *)v14 + 34);
    v18 = *((int *)v14 + 35);
    if (v6 == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v27, v16))break;
    v30[0] = (__int128 *)v16;
    if (*((_DWORD *)std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v4, v16, (uint64_t)&std::piecewise_construct, v30)+ 65) != (_DWORD)v17)break;
    ZinIr4CCInfo::ZinIr4CCInfo(v30, v17);
    v19 = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v30);
    v20 = v19 > v18;
    if (v19 > v18)
    {
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v21 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25 + 17, v16, (uint64_t)&std::piecewise_construct, (__int128 **)&__x);
      std::string::operator=((std::string *)(v21[7] + 24 * (int)v18), (const std::string *)(v14 + 4));
    }
    else
    {
      ZinIrNetworkStatus::SetError(a2, CFSTR("InvalidUnit"));
    }
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v19 > v18)
    {
      v22 = (uint64_t *)v14[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)v14[2];
          v13 = *v23 == (_QWORD)v14;
          v14 = v23;
        }
        while (!v13);
      }
      v14 = v23;
      if (v23 != v15)
        continue;
    }
    return v20;
  }
  ZinIrNetworkStatus::SetError(a2, CFSTR("InvalidUnit"));
  return 0;
}

void sub_206F70158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC(const ZinIrHalParameters **a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  const ZinIrHalParameters **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  uint64_t v12;
  uint64_t *v13;
  ZinIrInput *v14;
  int v15;
  _BOOL8 result;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  const ZinIrHalParameters **v42;
  __n128 __p;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  void *v54[4];
  ZinIrIO *v55;
  _OWORD v56[2];
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v58 = a2;
  if ((a2 & 0xFFFFFFFD) != 0)
    ZinAssertImpl("PrepareBindingsForLiveInsWithout4CC should not be called on live outputs");
  v7 = a1;
  v8 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(a1 + 8), &v58);
  v9 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(v7 + 2), &v58);
  v41 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(v7 + 11), &v58);
  v12 = *v8;
  v10 = v8 + 1;
  v11 = (void **)v12;
  if ((uint64_t *)v12 != v10)
  {
    v42 = v7;
    while (1)
    {
      v57 = 0;
      memset(v56, 0, sizeof(v56));
      __p.n128_u64[0] = (unint64_t)(v11 + 4);
      v13 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v9, v11 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v14 = (ZinIrInput *)operator new();
      ZinIrInput::ZinIrInput(v14, (const ZinIrIOInfo *)(v13 + 7));
      v55 = v14;
      if (!ZinIrInput::Validate(v14, a5, *v7)
        && !ZinIrIO::GetCustomStrides(v14, *v7, (ZinTensorDimensions *)v56))
      {
        break;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC();
      v15 = 1;
LABEL_9:
      (*(void (**)(ZinIrInput *))(*(_QWORD *)v14 + 8))(v14);
LABEL_10:
      result = v15 == 0;
      if (!v15)
      {
        v17 = (uint64_t *)v11[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v11[2];
            v19 = *v18 == (_QWORD)v11;
            v11 = (void **)v18;
          }
          while (!v19);
        }
        v11 = (void **)v18;
        if (v18 != v10)
          continue;
      }
      return result;
    }
    FindDimOrder(&v55, (uint64_t)v54);
    v20 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v20, 2, v13[25], 1, v54, v56);
    v21 = *((_DWORD *)v13 + 26);
    v53 = 0;
    v49 = 0;
    v50 = (_QWORD *)v20;
    v48 = 0;
    __p.n128_u32[0] = 0;
    v45 = 0;
    v46 = 0;
    __p.n128_u64[1] = 0;
    v47 = 0;
    ZinIrTensor::CreateTensor(a3, v21, (__int128 *)v13 + 7, (__int128 *)(v13 + 7), &v50, &v48, (unsigned int *)&__p, &v51);
    v22 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v10;
    v26 = v9;
    v27 = a5;
    v28 = v50;
    v50 = 0;
    if (v28)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v50, v28);
    v29 = a4;
    v30 = *a4;
    v31 = v58;
    v32 = v51;
    v33 = operator new(8uLL);
    __p.n128_u64[0] = (unint64_t)v33;
    *v33 = v32;
    __p.n128_u64[1] = (unint64_t)(v33 + 1);
    v45 = v33 + 1;
    ZinIrBindings::AddUncompressedMapping(v30, (__int128 *)(v13 + 7), v31, &__p);
    a4 = v29;
    a5 = v27;
    v9 = v26;
    v10 = v25;
    v7 = v42;
    if (v34)
    {
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
    }
    else
    {
      ZinIrBindings::AddIO(*a4, (__int128 *)(v13 + 7), v58, (uint64_t)(v13 + 7));
      v36 = v35;
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v36)
      {
        std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrTensor>,std::shared_ptr<ZinIrTensor> const&>((uint64_t **)v41, &v51, &v51);
        v15 = 0;
        goto LABEL_34;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC();
    v15 = 1;
LABEL_34:
    v37 = v52;
    if (v52)
    {
      v38 = (unint64_t *)&v52->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v53;
    v53 = 0;
    if (v40)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v53, v40);
    if (v54[0])
    {
      v54[1] = v54[0];
      operator delete(v54[0]);
    }
    v14 = v55;
    if (!v55)
      goto LABEL_10;
    goto LABEL_9;
  }
  return 1;
}

void sub_206F705BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,_QWORD *a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v31;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  v31 = a25;
  a25 = 0;
  if (v31)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a25, v31);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(a1);
}

void FindDimOrder(ZinIrIO **a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t *v4;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;

  DimensionOrderHint::DimensionOrderHint(a2, 0);
  if (ZinIrIO::HasCustomStrides(*a1))
  {
    v4 = (int8x16_t *)*a1;
    v5 = *((_QWORD *)*a1 + 22);
    v9 = *((_QWORD *)*a1 + 23);
    v10 = vextq_s8(v4[10], v4[10], 8uLL);
    v11 = 1;
    v12 = v5;
    FindDimensionOrderFromStrides((const ZinTensorDimensions *)&v9, (const ZinTensorDimensions *)&v4[4], v4[9].u64[1], 1, (uint64_t)&__p);
    if (&__p == (void **)a2)
      goto LABEL_6;
  }
  else
  {
    DimensionOrderHint::DimensionOrderHint(&__p, 2);
    if (&__p == (void **)a2)
      goto LABEL_6;
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
LABEL_6:
  *(_DWORD *)(a2 + 24) = v8;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F7078C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrLiveIOManager::PrepareBindingsForLiveInsWith4CC(const ZinIrHalParameters **a1, int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  const ZinIrHalParameters **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  uint64_t **v11;
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  void **v15;
  ZinIr4CCInfo *v16;
  unint64_t PlaneCount;
  ZinIrInput *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  signed int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;
  const ZinIrHalParameters **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  ZinIrIO *v48;
  uint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _BOOL8 result;
  void **v69;
  void **v70;
  BOOL v71;
  int v72;
  uint64_t **v74;
  int v75;
  uint64_t *v76;
  uint64_t *v78;
  int64x2_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int IsCompressed;
  uint64_t *v86;
  void *__p;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  __int128 v95;
  _QWORD *v96;
  void *v97[4];
  _QWORD *v98;
  __int128 v99;
  uint64_t v100;
  int64x2_t v101[2];
  uint64_t v102;
  __n128 v103;
  ZinIrIO *v104;
  _BYTE v105[16];
  void *v106;
  void *v107;
  int v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  float v112;
  _QWORD v113[7];

  *(_QWORD *)((char *)&v113[5] + 4) = *MEMORY[0x24BDAC8D0];
  v108 = a2;
  if ((a2 & 0xFFFFFFFD) != 0)
    ZinAssertImpl("PrepareBindingsForLiveInsWith4CC should not be called on live outputs");
  v6 = a1;
  v7 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(a1 + 5), &v108);
  v78 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(v6 + 2), &v108);
  v8 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)(v6 + 11), &v108);
  v9 = v7 + 1;
  v10 = (void **)*v7;
  v76 = v9;
  if (v10 != (void **)v9)
  {
    v11 = (uint64_t **)v8;
    v74 = (uint64_t **)(v6 + 17);
    v12 = (uint64_t)(v6 + 14);
    v13 = (void **)(v6 + 15);
    v79 = vdupq_n_s64(1uLL);
    while (1)
    {
      *(_QWORD *)&v109 = v10 + 4;
      v14 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v78, v10 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v109);
      v15 = (void **)*((unsigned int *)v14 + 65);
      v82 = v14[16];
      v83 = v14[17];
      v81 = v14[15];
      v16 = (ZinIr4CCInfo *)ZinIr4CCInfo::ZinIr4CCInfo(v105, v15);
      v86 = v14;
      IsCompressed = ZinIr4CCInfo::IsCompressed(v16);
      PlaneCount = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v105);
      v18 = (ZinIrInput *)operator new();
      v80 = (__int128 *)(v86 + 7);
      ZinIrInput::ZinIrInput(v18, (const ZinIrIOInfo *)(v86 + 7));
      v104 = v18;
      if (ZinIrInput::Validate(v18, a5, *v6))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          goto LABEL_85;
      }
      else
      {
        *(_QWORD *)&v109 = v10 + 4;
        v19 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v74, v10 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v109);
        if (0xAAAAAAAAAAAAAAABLL * ((v19[8] - v19[7]) >> 3) == PlaneCount)
        {
          *(_QWORD *)&v109 = 0;
          std::vector<ZinIrTensor *>::vector(&v103, PlaneCount, &v109);
          v20 = v19[7];
          v84 = v19[8];
          if (v20 != v84)
          {
            v75 = (int)v15;
            do
            {
              v21 = *(unsigned __int8 *)(v20 + 23);
              if ((v21 & 0x80u) != 0)
                v21 = *(_QWORD *)(v20 + 8);
              if (v21)
              {
                v22 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v12, (void **)v20);
                if (v13 == v22)
                  v23 = 0;
                else
                  v23 = *((_DWORD *)v22 + 35);
                v101[0] = v79;
                v101[1] = v79;
                v102 = 1;
                v100 = 0;
                if (!ZinIr4CCInfo::GetPlaneInfo((ZinIr4CCInfo *)v105, v23, v83, v82, v81, v101, (_DWORD *)&v100 + 1, &v100))goto LABEL_104;
                v99 = 0uLL;
                if (IsCompressed)
                {
                  v24 = *((_QWORD *)*v6 + 196);
                  if (!v24)
                    goto LABEL_29;
                  v25 = (uint64_t)*v6 + 1568;
                  do
                  {
                    v26 = *(_DWORD *)(v24 + 32);
                    v27 = v26 >= v15;
                    if (v26 >= v15)
                      v28 = (uint64_t *)v24;
                    else
                      v28 = (uint64_t *)(v24 + 8);
                    if (v27)
                      v25 = v24;
                    v24 = *v28;
                  }
                  while (*v28);
                  if ((const ZinIrHalParameters *)v25 == (const ZinIrHalParameters *)((char *)*v6 + 1568)
                    || v15 < *(_DWORD *)(v25 + 32))
                  {
LABEL_29:
                    v25 = (uint64_t)*v6 + 1568;
                  }
                  v15 = v13;
                  v29 = v12;
                  v30 = v11;
                  v31 = v6;
                  v32 = a3;
                  v33 = *(_QWORD *)(v25 + 40);
                  DimensionOrderHint::DimensionOrderHint(&__p, 2);
                  v34 = (void *)operator new();
                  v111 = 0;
                  v109 = 0u;
                  v110 = 0u;
                  ZinIrTensor::MirInfo::MirInfo(v34, 2, v100, 1, &__p, &v109);
                  v97[0] = v34;
                  if (__p)
                  {
                    v88 = (std::__shared_weak_count *)__p;
                    operator delete(__p);
                    v34 = v97[0];
                  }
                  v97[0] = 0;
                  v35 = (unsigned int *)(v33 + 40 * v23);
                  v98 = v34;
                  __p = 0;
                  v88 = 0;
                  a3 = v32;
                  ZinIrTensor::CreateTensor(v32, SHIDWORD(v100), (__int128 *)v101[0].i8, (__int128 *)v20, &v98, (uint64_t *)&__p, v35, (uint64_t *)&v109);
                  v36 = v109;
                  v109 = 0uLL;
                  v37 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
                  v99 = v36;
                  v6 = v31;
                  v11 = v30;
                  v12 = v29;
                  v13 = v15;
                  LODWORD(v15) = v75;
                  if (v37)
                  {
                    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                    do
                      v39 = __ldaxr(p_shared_owners);
                    while (__stlxr(v39 - 1, p_shared_owners));
                    if (!v39)
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                  }
                  v40 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
                  if (*((_QWORD *)&v109 + 1))
                  {
                    v41 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
                    do
                      v42 = __ldaxr(v41);
                    while (__stlxr(v42 - 1, v41));
                    if (!v42)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v40);
                    }
                  }
                  v43 = v88;
                  if (v88)
                  {
                    v44 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  v46 = v98;
                  v98 = 0;
                  if (v46)
                    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v98, v46);
                  v47 = v97[0];
                  v97[0] = 0;
                  if (v47)
                    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v97, v47);
                }
                else
                {
                  v111 = 0;
                  v109 = 0u;
                  v110 = 0u;
                  v48 = v104;
                  if (ZinIrIO::HasCustomStridesForPlaneIndex(v104, v23)
                    && ZinIrIO::GetCustomStridesForPlaneIndex(v48, *v6, v23, (ZinTensorDimensions *)&v109)
                    && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  {
                    ZinIrLiveIOManager::PrepareBindingsForLiveInsWith4CC(&v112, (char *)v86 + 79, v80, v113);
                  }
                  FindDimOrder(&v104, (uint64_t)v97);
                  v49 = operator new();
                  ZinIrTensor::MirInfo::MirInfo(v49, 2, v100, 1, v97, &v109);
                  v96 = 0;
                  v93 = 0;
                  v94 = (_QWORD *)v49;
                  v92 = 0;
                  LODWORD(__p) = 0;
                  v89 = 0;
                  v90 = 0;
                  v88 = 0;
                  v91 = 0;
                  ZinIrTensor::CreateTensor(a3, SHIDWORD(v100), (__int128 *)v101[0].i8, (__int128 *)v20, &v94, &v92, (unsigned int *)&__p, (uint64_t *)&v95);
                  v50 = v95;
                  v95 = 0uLL;
                  v51 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
                  v99 = v50;
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v54 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
                  if (*((_QWORD *)&v95 + 1))
                  {
                    v55 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  v57 = v93;
                  if (v93)
                  {
                    v58 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  v60 = v94;
                  v94 = 0;
                  if (v60)
                    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v94, v60);
                  v61 = v96;
                  v96 = 0;
                  if (v61)
                    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v96, v61);
                  if (v97[0])
                  {
                    v97[1] = v97[0];
                    operator delete(v97[0]);
                  }
                }
                *(_QWORD *)(v103.n128_u64[0] + 8 * v23) = v99;
                std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrTensor>,std::shared_ptr<ZinIrTensor> const&>(v11, (uint64_t *)&v99, (uint64_t *)&v99);
                v62 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
                if (*((_QWORD *)&v99 + 1))
                {
                  v63 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
              }
              v20 += 24;
            }
            while (v20 != v84);
          }
          v65 = *a4;
          if (IsCompressed)
            ZinIrBindings::AddCompressedMapping(v65, v80, v108, &v103);
          else
            ZinIrBindings::AddUncompressedMapping(v65, v80, v108, &v103);
          if (v66 || (ZinIrBindings::AddIO(*a4, (__int128 *)(v86 + 7), v108, (uint64_t)(v86 + 7)), v72))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC();
LABEL_104:
            v67 = 1;
          }
          else
          {
            v67 = 0;
          }
          if (v103.n128_u64[0])
          {
            v103.n128_u64[1] = v103.n128_u64[0];
            operator delete((void *)v103.n128_u64[0]);
          }
          goto LABEL_87;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_85:
          ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC();
      }
      v67 = 1;
LABEL_87:
      if (v104)
        (*(void (**)(ZinIrIO *))(*(_QWORD *)v104 + 8))(v104);
      if (v106)
      {
        v107 = v106;
        operator delete(v106);
      }
      result = v67 == 0;
      if (!v67)
      {
        v69 = (void **)v10[1];
        if (v69)
        {
          do
          {
            v70 = v69;
            v69 = (void **)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            v70 = (void **)v10[2];
            v71 = *v70 == v10;
            v10 = v70;
          }
          while (!v71);
        }
        v10 = v70;
        if (v70 != (void **)v76)
          continue;
      }
      return result;
    }
  }
  return 1;
}

void sub_206F7102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  void *v62;

  if (__p)
    operator delete(__p);
  if (a60)
    (*(void (**)(uint64_t))(*(_QWORD *)a60 + 8))(a60);
  v62 = *(void **)(v60 - 240);
  if (v62)
  {
    *(_QWORD *)(v60 - 232) = v62;
    operator delete(v62);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,unsigned int &,DimensionOrderHint>@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _OWORD v12[2];
  uint64_t v13;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  result = ZinIrTensor::MirInfo::MirInfo(v8, v9, v10, 1, a3, v12);
  *a4 = v8;
  return result;
}

void sub_206F71240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C405A042323);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,unsigned int &,DimensionOrderHint &,ZinTensorDimensions &>@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = operator new();
  result = ZinIrTensor::MirInfo::MirInfo(v10, *a1, *a2, 1, a3, a4);
  *a5 = v10;
  return result;
}

void sub_206F712D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C405A042323);
  _Unwind_Resume(a1);
}

BOOL ZinIrLiveIOManager::PrepareLiveInBinding(const ZinIrHalParameters **a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  _BOOL8 result;

  result = ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC(a1, 0, a2, a3, a4);
  if (result)
    return ZinIrLiveIOManager::PrepareBindingsForLiveInsWith4CC(a1, 0, a2, a3, a4);
  return result;
}

BOOL ZinIrLiveIOManager::PrepareLiveStateBinding(const ZinIrHalParameters **a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  int v9;

  v9 = 2;
  if (std::map<ZinIrDimension,unsigned long>::at((uint64_t)(a1 + 5), &v9)[2])
    ZinAssertImpl("State with 4cc format are not supported");
  return ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC(a1, 2, a2, a3, a4);
}

uint64_t ZinIrLiveIOManager::PrepareLiveOut(ZinIrLiveIOManager *this, CFArrayRef *a2)
{
  uint64_t *v3;
  std::string *v4;
  uint64_t **v5;
  void **v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::string *size;
  std::string *v26;
  BOOL v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t PlaneCount;
  char *v32;
  void **v33;
  void **v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void **v43;
  void **v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void **v58;
  uint64_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v70;
  uint64_t *v71;
  _OWORD *v72;
  void **v73;
  ZinIrLiveIOManager *v74;
  uint64_t *v75;
  uint64_t **v77;
  std::string *v78;
  void **v79;
  char v80;
  char v81[15];
  char v82;
  char v83[15];
  void *v84;
  _BYTE *v85;
  __int128 *v86[2];
  void *v87;
  void *v88;
  char v89;
  char v90[15];
  std::string __str;
  std::string v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *__p;
  _BYTE *v104;
  uint64_t v105;
  __int128 v106;
  unsigned int v107;
  __int128 *v108[2];

  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
  v3 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)this + 64, (int *)&__str);
  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
  v70 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)this + 40, (int *)&__str);
  v74 = this;
  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
  v75 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)this + 16, (int *)&__str);
  v4 = (std::string *)*v3;
  v78 = (std::string *)(v3 + 1);
  if ((uint64_t *)*v3 != v3 + 1)
  {
    v5 = (uint64_t **)((char *)v74 + 256);
    v6 = (void **)((char *)v74 + 264);
    do
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v4[1].__r_.__value_.__l.__size_;
      v7 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v75, (void **)&v4[1].__r_.__value_.__l.__size_, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      v8 = (char *)operator new(8uLL);
      *(_QWORD *)v8 = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v4[1].__r_.__value_.__l.__size_;
      v9 = std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 26, (void **)&v4[1].__r_.__value_.__l.__size_, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v9 + 56, v8, (uint64_t)(v8 + 8), 1uLL);
      if (*((char *)v7 + 79) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v7[7], v7[8]);
      else
        __str = *(std::string *)(v7 + 7);
      v10 = (__int128 *)(v7 + 10);
      if (*((char *)v7 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v92, (const std::string::value_type *)v7[10], v7[11]);
      }
      else
      {
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *v10;
        v92.__r_.__value_.__r.__words[2] = v7[12];
      }
      v11 = *(_OWORD *)(v7 + 27);
      v99 = *(_OWORD *)(v7 + 25);
      v100 = v11;
      v12 = *(_OWORD *)(v7 + 31);
      v101 = *(_OWORD *)(v7 + 29);
      v102 = v12;
      v13 = *(_OWORD *)(v7 + 19);
      v95 = *(_OWORD *)(v7 + 17);
      v96 = v13;
      v14 = *(_OWORD *)(v7 + 23);
      v97 = *(_OWORD *)(v7 + 21);
      v98 = v14;
      v15 = *(_OWORD *)(v7 + 15);
      v93 = *(_OWORD *)(v7 + 13);
      v94 = v15;
      v104 = 0;
      v105 = 0;
      __p = 0;
      std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(&__p, (const void *)v7[33], v7[34], (v7[34] - v7[33]) >> 4);
      v106 = *((_OWORD *)v7 + 18);
      v107 = 0;
      v16 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v5, (void **)v7 + 10);
      if (v6 == v16)
      {
        v86[0] = v10;
        v17 = std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)v10, (uint64_t)&std::piecewise_construct, v86);
        std::string::operator=((std::string *)(v17 + 7), &__str);
        std::string::operator=((std::string *)(v17 + 10), &v92);
        v18 = v100;
        v20 = v101;
        v19 = v102;
        *(_OWORD *)(v17 + 25) = v99;
        *(_OWORD *)(v17 + 27) = v18;
        *(_OWORD *)(v17 + 29) = v20;
        *(_OWORD *)(v17 + 31) = v19;
        v21 = v96;
        v23 = v97;
        v22 = v98;
        *(_OWORD *)(v17 + 17) = v95;
        *(_OWORD *)(v17 + 19) = v21;
        *(_OWORD *)(v17 + 21) = v23;
        *(_OWORD *)(v17 + 23) = v22;
        v24 = v94;
        *(_OWORD *)(v17 + 13) = v93;
        *(_OWORD *)(v17 + 15) = v24;
        if (v17 + 7 != (uint64_t *)&__str)
          std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)v17 + 264, (char *)__p, (uint64_t)v104, (v104 - (_BYTE *)__p) >> 4);
        *((_OWORD *)v17 + 18) = v106;
        *((_DWORD *)v17 + 76) = v107;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLiveIOManager::PrepareLiveOut(&v89, v90);
        ZinIrNetworkStatus::SetError(a2, CFSTR("DuplicateOutput"));
      }
      if (__p)
      {
        v104 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      operator delete(v8);
      if (v6 != v16)
        return 0;
      size = (std::string *)v4->__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          v26 = size;
          size = (std::string *)size->__r_.__value_.__r.__words[0];
        }
        while (size);
      }
      else
      {
        do
        {
          v26 = (std::string *)v4->__r_.__value_.__r.__words[2];
          v27 = v26->__r_.__value_.__r.__words[0] == (_QWORD)v4;
          v4 = v26;
        }
        while (!v27);
      }
      v4 = v26;
    }
    while (v26 != v78);
  }
  v28 = (void **)*v70;
  v71 = v70 + 1;
  if (v28 == (void **)v71)
    return 1;
  v77 = (uint64_t **)((char *)v74 + 256);
  v79 = (void **)((char *)v74 + 264);
  while (1)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 4);
    v29 = std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v75, v28 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
    v30 = *((unsigned int *)v29 + 65);
    ZinIr4CCInfo::ZinIr4CCInfo(v86, v30);
    PlaneCount = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v86);
    __str.__r_.__value_.__r.__words[0] = 0;
    std::vector<ZinIrTensor *>::vector(&v84, PlaneCount, &__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 4);
    v32 = (char *)(std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 26, v28 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&__str)+ 7);
    if (v32 != (char *)&v84)
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v32, (char *)v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 3);
    v73 = (void **)(v29 + 10);
    v33 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v74 + 184, (void **)v29 + 10);
    v34 = v33;
    v72 = v29 + 7;
    if ((void **)((char *)v74 + 192) == v33)
    {
      if (*((char *)v29 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v29[7], v29[8]);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v72;
        __str.__r_.__value_.__r.__words[2] = v29[9];
      }
      if (*((char *)v29 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v92, (const std::string::value_type *)v29[10], v29[11]);
      }
      else
      {
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)v73;
        v92.__r_.__value_.__r.__words[2] = v29[12];
      }
      v53 = *(_OWORD *)(v29 + 27);
      v99 = *(_OWORD *)(v29 + 25);
      v100 = v53;
      v54 = *(_OWORD *)(v29 + 31);
      v101 = *(_OWORD *)(v29 + 29);
      v102 = v54;
      v55 = *(_OWORD *)(v29 + 19);
      v95 = *(_OWORD *)(v29 + 17);
      v96 = v55;
      v56 = *(_OWORD *)(v29 + 23);
      v97 = *(_OWORD *)(v29 + 21);
      v98 = v56;
      v57 = *(_OWORD *)(v29 + 15);
      v93 = *(_OWORD *)(v29 + 13);
      v94 = v57;
      v104 = 0;
      v105 = 0;
      __p = 0;
      std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(&__p, (const void *)v29[33], v29[34], (v29[34] - v29[33]) >> 4);
      v106 = *((_OWORD *)v29 + 18);
      v107 = 0;
      v58 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v77, v73);
      if (v79 == v58)
      {
        v108[0] = (__int128 *)(v29 + 10);
        v59 = std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v77, v73, (uint64_t)&std::piecewise_construct, v108);
        std::string::operator=((std::string *)(v59 + 7), &__str);
        std::string::operator=((std::string *)(v59 + 10), &v92);
        v60 = v100;
        v62 = v101;
        v61 = v102;
        *(_OWORD *)(v59 + 25) = v99;
        *(_OWORD *)(v59 + 27) = v60;
        *(_OWORD *)(v59 + 29) = v62;
        *(_OWORD *)(v59 + 31) = v61;
        v63 = v96;
        v65 = v97;
        v64 = v98;
        *(_OWORD *)(v59 + 17) = v95;
        *(_OWORD *)(v59 + 19) = v63;
        *(_OWORD *)(v59 + 21) = v65;
        *(_OWORD *)(v59 + 23) = v64;
        v66 = v94;
        *(_OWORD *)(v59 + 13) = v93;
        *(_OWORD *)(v59 + 15) = v66;
        if (v59 + 7 != (uint64_t *)&__str)
          std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)v59 + 264, (char *)__p, (uint64_t)v104, (v104 - (_BYTE *)__p) >> 4);
        *((_OWORD *)v59 + 18) = v106;
        *((_DWORD *)v59 + 76) = v107;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLiveIOManager::PrepareLiveOut(&v80, v81);
        ZinIrNetworkStatus::SetError(a2, CFSTR("DuplicateOutput"));
      }
      if (__p)
      {
        v104 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v79 != v58)
        goto LABEL_93;
      goto LABEL_79;
    }
    if (*((_DWORD *)v33 + 34) != (_DWORD)v30)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareLiveOut();
      ZinIrNetworkStatus::SetError(a2, CFSTR("InvalidOutput"));
      goto LABEL_93;
    }
    v35 = v33[12];
    if (v33[13] != v35)
      break;
LABEL_79:
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    v67 = (uint64_t *)v28[1];
    if (v67)
    {
      do
      {
        v68 = v67;
        v67 = (uint64_t *)*v67;
      }
      while (v67);
    }
    else
    {
      do
      {
        v68 = (uint64_t *)v28[2];
        v27 = *v68 == (_QWORD)v28;
        v28 = (void **)v68;
      }
      while (!v27);
    }
    v28 = (void **)v68;
    if (v68 == v71)
      return 1;
  }
  v36 = 0;
  v37 = 0;
  while (1)
  {
    if (*((char *)v29 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v29[7], v29[8]);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v72;
      __str.__r_.__value_.__r.__words[2] = v29[9];
    }
    if (*((char *)v29 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, (const std::string::value_type *)v29[10], v29[11]);
    }
    else
    {
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)v73;
      v92.__r_.__value_.__r.__words[2] = v29[12];
    }
    v38 = *(_OWORD *)(v29 + 27);
    v99 = *(_OWORD *)(v29 + 25);
    v100 = v38;
    v39 = *(_OWORD *)(v29 + 31);
    v101 = *(_OWORD *)(v29 + 29);
    v102 = v39;
    v40 = *(_OWORD *)(v29 + 19);
    v95 = *(_OWORD *)(v29 + 17);
    v96 = v40;
    v41 = *(_OWORD *)(v29 + 23);
    v97 = *(_OWORD *)(v29 + 21);
    v98 = v41;
    v42 = *(_OWORD *)(v29 + 15);
    v93 = *(_OWORD *)(v29 + 13);
    v94 = v42;
    v104 = 0;
    v105 = 0;
    __p = 0;
    std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(&__p, (const void *)v29[33], v29[34], (v29[34] - v29[33]) >> 4);
    v43 = (void **)&v35[24 * v36];
    v106 = *((_OWORD *)v29 + 18);
    v107 = v37;
    v44 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v77, v43);
    if (v79 == v44)
    {
      v108[0] = (__int128 *)v43;
      v45 = std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v77, v43, (uint64_t)&std::piecewise_construct, v108);
      std::string::operator=((std::string *)(v45 + 7), &__str);
      std::string::operator=((std::string *)(v45 + 10), &v92);
      v46 = v100;
      v48 = v101;
      v47 = v102;
      *(_OWORD *)(v45 + 25) = v99;
      *(_OWORD *)(v45 + 27) = v46;
      *(_OWORD *)(v45 + 29) = v48;
      *(_OWORD *)(v45 + 31) = v47;
      v49 = v96;
      v51 = v97;
      v50 = v98;
      *(_OWORD *)(v45 + 17) = v95;
      *(_OWORD *)(v45 + 19) = v49;
      *(_OWORD *)(v45 + 21) = v51;
      *(_OWORD *)(v45 + 23) = v50;
      v52 = v94;
      *(_OWORD *)(v45 + 13) = v93;
      *(_OWORD *)(v45 + 15) = v52;
      if (v45 + 7 != (uint64_t *)&__str)
        std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)v45 + 264, (char *)__p, (uint64_t)v104, (v104 - (_BYTE *)__p) >> 4);
      *((_OWORD *)v45 + 18) = v106;
      *((_DWORD *)v45 + 76) = v107;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareLiveOut(&v82, v83);
      ZinIrNetworkStatus::SetError(a2, CFSTR("DuplicateOutput"));
    }
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v79 != v44)
      break;
    v35 = v34[12];
    v36 = ++v37;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v34[13] - v35) >> 3) <= v37)
      goto LABEL_79;
  }
LABEL_93:
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  return 0;
}

void sub_206F71D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void ZinIrLiveIOManager::CreateOutputTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, __int128 *a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, CFArrayRef *a8@<X7>, _QWORD *a9@<X8>)
{
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[2];
  uint64_t v63;
  _QWORD *v64;
  void *v65[3];
  int v66;
  _QWORD *v67;
  unsigned int v68[2];
  void *__p[2];
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  _QWORD *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _OWORD v78[2];

  v78[0] = 0uLL;
  v17 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 256, a3);
  v18 = v17;
  if ((void **)(a1 + 264) == v17)
  {
    v77 = 0;
    LODWORD(v74) = 0;
    v75 = 0uLL;
    *((_QWORD *)&v74 + 1) = 0;
    LODWORD(v76) = 0;
    ZinIrTensor::CreateTensor(a2, a5, a4, (__int128 *)a3, &v77, a7, (unsigned int *)&v74, (uint64_t *)__p);
    v22 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v78[0] + 1);
    v78[0] = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v27 = (unint64_t *)((char *)__p[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v77;
    v77 = 0;
    if (v29)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v77, v29);
    goto LABEL_83;
  }
  if (!*((_BYTE *)v17 + 256))
  {
    if (*((_DWORD *)v17 + 76))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::CreateOutputTensor();
      ZinIrNetworkStatus::SetError(a8, CFSTR("InvalidOutput"));
      goto LABEL_84;
    }
    if (!*((_DWORD *)v17 + 26))
      *((_DWORD *)v17 + 26) = a5;
    v30 = (unint64_t *)operator new();
    ZinIrOutput::ZinIrOutput((ZinIrOutput *)v30, (const ZinIrIOInfo *)(v18 + 7));
    if (ZinIrOutput::Validate((uint64_t)v30, a4, *((_DWORD *)v18 + 26), a6, (ZinIrNetworkStatus *)a8, *(const ZinIrHalParameters **)a1))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::CreateOutputTensor();
      ZinIrNetworkStatus::SetError(a8, CFSTR("InvalidOutput"));
    }
    else
    {
      v76 = 0;
      v74 = 0u;
      v75 = 0u;
      if (!ZinIrIO::GetCustomStrides((ZinIrIO *)v30, *(const ZinIrHalParameters **)a1, (ZinTensorDimensions *)&v74))
      {
        DimensionOrderHint::DimensionOrderHint(&v57, 0);
        if (ZinIrIO::HasCustomStrides((ZinIrIO *)v30))
          FindDimensionOrderFromStrides((const ZinTensorDimensions *)&v74, (const ZinTensorDimensions *)(v30 + 8), v30[19], 1, (uint64_t)__p);
        else
          DimensionOrderHint::DimensionOrderHint(__p, 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v57, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        LODWORD(v60) = DWORD2(v70);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        LODWORD(__p[0]) = 2;
        std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,long &,DimensionOrderHint &,ZinTensorDimensions &>((unsigned int *)__p, v18 + 25, (uint64_t)&v57, (uint64_t)&v74, v62);
        v51 = *((_DWORD *)v18 + 26);
        v52 = v62[0];
        v62[0] = 0;
        v73 = (_QWORD *)v52;
        v72 = 0uLL;
        LODWORD(__p[0]) = 0;
        v70 = 0uLL;
        __p[1] = 0;
        LODWORD(v71) = 0;
        ZinIrTensor::CreateTensor(a2, v51, a4, (__int128 *)a3, &v73, (uint64_t *)&v72, (unsigned int *)__p, (uint64_t *)v65);
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v78, (__int128 *)v65);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v65);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
        v53 = v73;
        v73 = 0;
        if (v53)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v73, v53);
        v54 = *(_QWORD *)&v78[0];
        __p[0] = v18 + 7;
        *(_QWORD *)(std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 208), v18 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[7]+ 8 * *((unsigned int *)v18 + 76)) = v54;
        v55 = (_QWORD *)v62[0];
        v62[0] = 0;
        if (v55)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v62, v55);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        v43 = 0;
LABEL_58:
        (*(void (**)(unint64_t *))(*v30 + 8))(v30);
        if (v43)
          goto LABEL_85;
        goto LABEL_82;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::CreateOutputTensor();
      ZinIrNetworkStatus::SetError(a8, CFSTR("InvalidOutput"));
    }
    *a9 = 0;
    a9[1] = 0;
    v43 = 1;
    goto LABEL_58;
  }
  v19 = ZinIr4CCInfo::ZinIr4CCInfo(&v74, *((unsigned int *)v17 + 65));
  *(_QWORD *)v68 = 0;
  if (ZinIr4CCInfo::GetPlaneFormat(v19, *((_DWORD *)v18 + 76), &v68[1])
    && ZinIr4CCInfo::GetPlaneInterleave((ZinIr4CCInfo *)&v74, *((_DWORD *)v18 + 76), v68))
  {
    v20 = (unint64_t *)operator new();
    ZinIrOutput::ZinIrOutput((ZinIrOutput *)v20, (const ZinIrIOInfo *)(v18 + 7));
    if (ZinIrOutput::Validate((uint64_t)v20, a4, *((_DWORD *)v18 + 26), a6, (ZinIrNetworkStatus *)a8, *(const ZinIrHalParameters **)a1))
    {
      ZinIrNetworkStatus::SetError(a8, CFSTR("InvalidOutput"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::CreateOutputTensor();
      *a9 = 0;
      a9[1] = 0;
      v21 = 1;
    }
    else
    {
      if (ZinIr4CCInfo::IsCompressed((ZinIr4CCInfo *)&v74))
      {
        v31 = *(_QWORD *)(*(_QWORD *)a1 + 1568);
        if (!v31)
          goto LABEL_46;
        v32 = *((_DWORD *)v18 + 65);
        v33 = *(_QWORD *)a1 + 1568;
        do
        {
          v34 = *(_DWORD *)(v31 + 32);
          v35 = v34 >= v32;
          if (v34 >= v32)
            v36 = (uint64_t *)v31;
          else
            v36 = (uint64_t *)(v31 + 8);
          if (v35)
            v33 = v31;
          v31 = *v36;
        }
        while (*v36);
        if (v33 == *(_QWORD *)a1 + 1568 || v32 < *(_DWORD *)(v33 + 32))
LABEL_46:
          v33 = *(_QWORD *)a1 + 1568;
        v37 = *((_DWORD *)v18 + 76);
        v38 = *(_QWORD *)(v33 + 40);
        LODWORD(v57) = 2;
        DimensionOrderHint::DimensionOrderHint(__p, 2);
        std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,unsigned int &,DimensionOrderHint>((unsigned int *)&v57, v68, (uint64_t)__p, (uint64_t *)v65);
        v39 = (unsigned int *)(v38 + 40 * v37);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v40 = v65[0];
        v65[0] = 0;
        v67 = v40;
        v57 = 0;
        v58 = 0;
        ZinIrTensor::CreateTensor(a2, v68[1], a4, (__int128 *)a3, &v67, (uint64_t *)&v57, v39, (uint64_t *)__p);
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v78, (__int128 *)__p);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
        v41 = v67;
        v67 = 0;
        if (v41)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v67, v41);
        v42 = v65[0];
        v65[0] = 0;
        if (v42)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v65, v42);
      }
      else
      {
        v71 = 0;
        v70 = 0u;
        *(_OWORD *)__p = 0u;
        if (ZinIrIO::HasCustomStridesForPlaneIndex((ZinIrIO *)v20, *((_DWORD *)v18 + 76))
          && ZinIrIO::GetCustomStridesForPlaneIndex((ZinIrIO *)v20, *(const ZinIrHalParameters **)a1, *((_DWORD *)v18 + 76), (ZinTensorDimensions *)__p)&& os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinIrLiveIOManager::CreateOutputTensor();
        }
        DimensionOrderHint::DimensionOrderHint(v65, 0);
        if (ZinIrIO::HasCustomStrides((ZinIrIO *)v20))
          FindDimensionOrderFromStrides((const ZinTensorDimensions *)__p, (const ZinTensorDimensions *)(v20 + 8), v20[19], 1, (uint64_t)&v57);
        else
          DimensionOrderHint::DimensionOrderHint(&v57, 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v65, (char *)v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 2);
        v66 = v60;
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        LODWORD(v57) = 2;
        std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,unsigned int &,DimensionOrderHint &,ZinTensorDimensions &>((unsigned int *)&v57, v68, (uint64_t)v65, (uint64_t)__p, (uint64_t *)&v64);
        v63 = (uint64_t)v64;
        v64 = 0;
        v62[0] = 0;
        v62[1] = 0;
        LODWORD(v57) = 0;
        v59 = 0;
        v60 = 0;
        v58 = 0;
        v61 = 0;
        ZinIrTensor::CreateTensor(a2, v68[1], a4, (__int128 *)a3, &v63, v62, (unsigned int *)&v57, (uint64_t *)&v72);
        std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]<ZinIrConstData_specialization<half>,void>((uint64_t)v78, &v72);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v62);
        v44 = (_QWORD *)v63;
        v63 = 0;
        if (v44)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v63, v44);
        v45 = v64;
        v64 = 0;
        if (v45)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v64, v45);
        if (v65[0])
        {
          v65[1] = v65[0];
          operator delete(v65[0]);
        }
      }
      v46 = *(_QWORD *)&v78[0];
      __p[0] = v18 + 7;
      v21 = 0;
      *(_QWORD *)(std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 208), v18 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[7]+ 8 * *((unsigned int *)v18 + 76)) = v46;
    }
    (*(void (**)(unint64_t *))(*v20 + 8))(v20);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLiveIOManager::CreateOutputTensor();
    ZinIrNetworkStatus::SetError(a8, CFSTR("InvalidOutput"));
    *a9 = 0;
    a9[1] = 0;
    v21 = 1;
  }
  if ((_QWORD)v75)
  {
    *((_QWORD *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  if (!v21)
  {
LABEL_82:
    LODWORD(v74) = 1;
    v47 = std::map<ZinIrDimension,unsigned long>::at(a1 + 88, (int *)&v74);
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrTensor>,std::shared_ptr<ZinIrTensor> const&>((uint64_t **)v47, (uint64_t *)v78, (uint64_t *)v78);
LABEL_83:
    *(_OWORD *)a9 = v78[0];
    a9 = v78;
LABEL_84:
    *a9 = 0;
    a9[1] = 0;
  }
LABEL_85:
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v78[0] + 1);
  if (*((_QWORD *)&v78[0] + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v78[0] + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_206F726D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v31 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrTensor::MirInfo,ZinIrTensor::AllocationHint,long &,DimensionOrderHint &,ZinTensorDimensions &>@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = operator new();
  result = ZinIrTensor::MirInfo::MirInfo(v10, *a1, *a2, 1, a3, a4);
  *a5 = v10;
  return result;
}

void sub_206F72974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C405A042323);
  _Unwind_Resume(a1);
}

BOOL ZinIrLiveIOManager::PrepareLiveOutBinding(uint64_t a1, uint64_t a2, uint64_t *a3, CFArrayRef *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  uint64_t v11;
  __int128 *v12;
  void **v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  int IsCompressed;
  void **v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  _BOOL8 result;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  __n128 v34;
  uint64_t v35;
  __n128 __p;
  void *v37;
  void *v38;
  char v39;
  char v40[15];
  float v41;
  _QWORD v42[5];

  *(_QWORD *)((char *)&v42[3] + 4) = *MEMORY[0x24BDAC8D0];
  __p.n128_u32[0] = 1;
  v7 = std::map<ZinIrDimension,unsigned long>::at(a1 + 64, (int *)&__p);
  __p.n128_u32[0] = 1;
  v33 = std::map<ZinIrDimension,unsigned long>::at(a1 + 40, (int *)&__p);
  __p.n128_u32[0] = 1;
  v8 = std::map<ZinIrDimension,unsigned long>::at(a1 + 16, (int *)&__p);
  v11 = *v7;
  v9 = v7 + 1;
  v10 = (void **)v11;
  if ((uint64_t *)v11 == v9)
  {
LABEL_22:
    v20 = *v33;
    if ((uint64_t *)*v33 == v33 + 1)
      return 1;
    v21 = a1 + 208;
    v22 = (void **)(a1 + 216);
    do
    {
      v23 = std::map<std::string,BOOL>::at((uint64_t)v8, (void **)(v20 + 32));
      ZinIr4CCInfo::ZinIr4CCInfo(&__p, *(unsigned int *)(v23 + 204));
      IsCompressed = ZinIr4CCInfo::IsCompressed((ZinIr4CCInfo *)&__p);
      v25 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v21, (void **)(v20 + 32));
      if (v22 == v25)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLiveIOManager::PrepareLiveOutBinding(&v41, v20, (_QWORD *)(v20 + 32), v42);
        ZinIrNetworkStatus::SetError(a4, CFSTR("InvalidOutput"));
        v28 = 1;
      }
      else
      {
        v34 = 0uLL;
        v35 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v34, v25[7], (uint64_t)v25[8], ((_BYTE *)v25[8] - (_BYTE *)v25[7]) >> 3);
        v26 = *a3;
        if (IsCompressed)
          ZinIrBindings::AddCompressedMapping(v26, (__int128 *)v23, 1, &v34);
        else
          ZinIrBindings::AddUncompressedMapping(v26, (__int128 *)v23, 1, &v34);
        if (v27 || (ZinIrBindings::AddIO(*a3, (__int128 *)v23, 1, v23), v29))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrLiveIOManager::PrepareLiveOutBinding();
          ZinIrNetworkStatus::SetError(a4, CFSTR("InvalidOutput"));
          v28 = 1;
        }
        else
        {
          v28 = 0;
        }
        if (v34.n128_u64[0])
        {
          v34.n128_u64[1] = v34.n128_u64[0];
          operator delete((void *)v34.n128_u64[0]);
        }
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      result = v28 == 0;
      if (v28)
        break;
      v31 = *(uint64_t **)(v20 + 8);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = *(uint64_t **)(v20 + 16);
          v19 = *v32 == v20;
          v20 = (uint64_t)v32;
        }
        while (!v19);
      }
      v20 = (uint64_t)v32;
    }
    while (v32 != v33 + 1);
    return result;
  }
  while (1)
  {
    v12 = (__int128 *)std::map<std::string,BOOL>::at((uint64_t)v8, v10 + 4);
    v13 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1 + 208, v10 + 4);
    if ((void **)(a1 + 216) == v13)
      break;
    __p = 0uLL;
    v37 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v13[7], (uint64_t)v13[8], ((_BYTE *)v13[8] - (_BYTE *)v13[7]) >> 3);
    if (__p.n128_u64[1] - __p.n128_u64[0] != 8)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareLiveOutBinding(&v39, v40);
      goto LABEL_10;
    }
    ZinIrBindings::AddUncompressedMapping(*a3, v12, 1, &__p);
    if (v14 || (ZinIrBindings::AddIO(*a3, v12, 1, (uint64_t)v12), v15))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareLiveOutBinding();
LABEL_10:
      ZinIrNetworkStatus::SetError(a4, CFSTR("InvalidOutput"));
      v16 = 0;
      goto LABEL_11;
    }
    v16 = 1;
LABEL_11:
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v16)
      return 0;
    v17 = (uint64_t *)v10[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (uint64_t *)v10[2];
        v19 = *v18 == (_QWORD)v10;
        v10 = (void **)v18;
      }
      while (!v19);
    }
    v10 = (void **)v18;
    if (v18 == v9)
      goto LABEL_22;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLiveIOManager::PrepareLiveOutBinding();
  ZinIrNetworkStatus::SetError(a4, CFSTR("InvalidOutput"));
  return 0;
}

void sub_206F72DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(ZinIrLiveIOManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t PlaneCount;
  int v10;
  void **v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Interleave;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  _BOOL8 result;
  void **v24;
  char *v25;
  int64x2_t v26;
  void **v27;
  uint64_t v28;
  int64x2_t v29[2];
  uint64_t v30;
  int v31[4];
  void *__p;
  void *v33;
  float v34;
  uint64_t v35;
  float v36;
  _QWORD v37[3];

  *(_QWORD *)((char *)&v37[1] + 4) = *MEMORY[0x24BDAC8D0];
  v31[0] = 1;
  v2 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)this + 40, v31);
  v31[0] = 1;
  v3 = std::map<ZinIrDimension,unsigned long>::at((uint64_t)this + 16, v31);
  v6 = *v2;
  v4 = v2 + 1;
  v5 = v6;
  if ((uint64_t *)v6 == v4)
    return 1;
  v7 = (uint64_t)v3;
  v27 = (void **)(v3 + 1);
  v24 = (void **)((char *)this + 216);
  v25 = (char *)this + 208;
  v26 = vdupq_n_s64(1uLL);
  while (1)
  {
    v8 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v7, (void **)(v5 + 32));
    if (v27 == v8)
      break;
    ZinIr4CCInfo::ZinIr4CCInfo(v31, *((unsigned int *)v8 + 65));
    PlaneCount = ZinIr4CCInfo::GetPlaneCount((ZinIr4CCInfo *)v31);
    if (PlaneCount == 1)
    {
      v10 = 3;
      goto LABEL_25;
    }
    v11 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)v25, (void **)(v5 + 32));
    v12 = v11;
    if (v24 == v11 || (v13 = v11[7], PlaneCount != ((_BYTE *)v11[8] - (_BYTE *)v13) >> 3))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(&v36, v5, (_QWORD *)(v5 + 32), v37);
LABEL_24:
      v10 = 1;
      goto LABEL_25;
    }
    if (PlaneCount)
    {
      v14 = 0;
      v15 = (uint64_t *)*v13;
      while (1)
      {
        v29[0] = v26;
        v29[1] = v26;
        v30 = 1;
        v28 = 0;
        if (!ZinIr4CCInfo::GetPlaneInfo((ZinIr4CCInfo *)v31, v14, v15[9], v15[8], v15[7], v29, (_DWORD *)&v28 + 1, &v28))goto LABEL_24;
        v16 = *((_QWORD *)v12[7] + v14);
        Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v16);
        if (v18)
          v19 = Interleave;
        else
          v19 = 1;
        if (!ZinTensorDimensionsEqual(v29, (_QWORD *)(v16 + 48))
          || (HIDWORD(v28) == *(_DWORD *)(v16 + 88) ? (v20 = v19 == v28) : (v20 = 0), !v20))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(&v34, v5, (_QWORD *)(v5 + 32), &v35);
          goto LABEL_24;
        }
        v10 = 0;
        if (PlaneCount == ++v14)
          goto LABEL_25;
      }
    }
    v10 = 0;
LABEL_25:
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    if (v10 != 3 && v10)
      return 0;
    v21 = *(uint64_t **)(v5 + 8);
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        v22 = *(uint64_t **)(v5 + 16);
        v20 = *v22 == v5;
        v5 = (uint64_t)v22;
      }
      while (!v20);
    }
    v5 = (uint64_t)v22;
    if (v22 == v4)
      return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  ZinIrLiveIOManager::ValidateMultiplanarLiveOutput();
  return 0;
}

void sub_206F730C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLiveIOManager::PrepareLiveInParamBinding(uint64_t a1, uint64_t a2, uint64_t *a3, ZinIrNetworkStatus *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v15;
  std::string *v16;

  v4 = *(_QWORD **)(a1 + 160);
  v5 = (_QWORD *)(a1 + 168);
  if (v4 == (_QWORD *)(a1 + 168))
    return 1;
  while (1)
  {
    v9 = (std::string *)operator new();
    ZinIrInputParam::ZinIrInputParam(v9, (__int128 *)(v4 + 7));
    v16 = v9;
    if (ZinIrInputParam::Validate((ZinIrInputParam *)v9, a4, *(const ZinIrHalParameters **)a1))
      break;
    if (ZinIrBindings::AddLiveInParam(*a3, (void **)v4 + 4, (uint64_t)(v4 + 7)))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLiveIOManager::PrepareLiveInParamBinding();
      goto LABEL_17;
    }
    v10 = (uint64_t)v16;
    v16 = 0;
    if (v10)
      std::default_delete<ZinIrInputParam>::operator()[abi:ne180100]((uint64_t)&v16, v10);
    v11 = (_QWORD *)v4[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v4[2];
        v13 = *v12 == (_QWORD)v4;
        v4 = v12;
      }
      while (!v13);
    }
    v4 = v12;
    if (v12 == v5)
      return 1;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLiveIOManager::PrepareLiveInParamBinding();
LABEL_17:
  v15 = (uint64_t)v16;
  v16 = 0;
  if (v15)
    std::default_delete<ZinIrInputParam>::operator()[abi:ne180100]((uint64_t)&v16, v15);
  return 0;
}

void sub_206F7325C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_206F732D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<ZinIrTensor>,std::__tree_node<std::shared_ptr<ZinIrTensor>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_206F73430(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<ZinIrTensor>,std::__tree_node<std::shared_ptr<ZinIrTensor>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__emplace_hint_unique_key_args<std::shared_ptr<ZinIrTensor>,std::shared_ptr<ZinIrTensor> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__emplace_hint_unique_key_args<std::shared_ptr<ZinIrTensor>,std::shared_ptr<ZinIrTensor> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__find_equal<std::shared_ptr<ZinIrTensor>>(a1, a2, &v16, &v15, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v16, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__find_equal<std::shared_ptr<ZinIrTensor>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 + 1 == a2)
    goto LABEL_5;
  v5 = *a5;
  v6 = a2[4];
  if (!*a5)
  {
    if (!v6)
      goto LABEL_25;
LABEL_12:
    v12 = a2[1];
    if (v12)
    {
      v13 = (_QWORD *)a2[1];
      do
      {
        a4 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (_QWORD *)v17[2];
        v15 = *a4 == (_QWORD)v17;
        v17 = a4;
      }
      while (!v15);
    }
    if (a4 == a1 + 1 || v5 && ((v18 = a4[4]) == 0 || *(_QWORD *)(v5 + 8) < *(_QWORD *)(v18 + 8)))
    {
      if (v12)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__find_equal<std::shared_ptr<ZinIrTensor>>((uint64_t)a1, a3, a5);
  }
  if (!v6 || (v7 = *(_QWORD *)(v5 + 8), v8 = *(_QWORD *)(v6 + 8), v7 < v8))
  {
LABEL_5:
    v9 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v11 = a2;
LABEL_21:
      if (v9)
      {
        *a3 = v11;
        return v11 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v9)
    {
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      v14 = a2;
      do
      {
        v11 = (_QWORD *)v14[2];
        v15 = *v11 == (_QWORD)v14;
        v14 = v11;
      }
      while (v15);
    }
    v16 = v11[4];
    if (v16 && (!*a5 || *(_QWORD *)(v16 + 8) < *(_QWORD *)(*a5 + 8)))
      goto LABEL_21;
    return std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::__find_equal<std::shared_ptr<ZinIrTensor>>((uint64_t)a1, a3, a5);
  }
  if (v8 < v7)
    goto LABEL_12;
LABEL_25:
  *a3 = a2;
  *a4 = a2;
  return a4;
}

uint64_t std::vector<ZinIrIOInfo>::__emplace_back_slow_path<ZinIrIOInfo>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v23[5];

  v3 = *a1;
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x84210842108421)
    v9 = 0x108421084210842;
  else
    v9 = v5;
  v23[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrIOInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[248 * v4];
  v23[0] = v10;
  v23[1] = v11;
  v23[3] = &v10[248 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)v11 + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v11 + 24) = v13;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v14 = a2[4];
  *((_OWORD *)v11 + 3) = a2[3];
  *((_OWORD *)v11 + 4) = v14;
  v15 = a2[5];
  v16 = a2[6];
  v17 = a2[8];
  *((_OWORD *)v11 + 7) = a2[7];
  *((_OWORD *)v11 + 8) = v17;
  *((_OWORD *)v11 + 5) = v15;
  *((_OWORD *)v11 + 6) = v16;
  v18 = a2[9];
  v19 = a2[10];
  v20 = a2[12];
  *((_OWORD *)v11 + 11) = a2[11];
  *((_OWORD *)v11 + 12) = v20;
  *((_OWORD *)v11 + 9) = v18;
  *((_OWORD *)v11 + 10) = v19;
  *((_QWORD *)v11 + 27) = 0;
  *((_QWORD *)v11 + 28) = 0;
  *((_QWORD *)v11 + 26) = 0;
  *((_OWORD *)v11 + 13) = a2[13];
  *((_QWORD *)v11 + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *(_OWORD *)(v11 + 232) = *(__int128 *)((char *)a2 + 232);
  v23[2] = v11 + 248;
  std::vector<ZinIrIOInfo>::__swap_out_circular_buffer(a1, v23);
  v21 = a1[1];
  std::__split_buffer<ZinIrIOInfo>::~__split_buffer((uint64_t)v23);
  return v21;
}

void sub_206F73854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinIrIOInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ZinIrIOInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 248;
      v6 = *(_OWORD *)(v3 - 248);
      *(_QWORD *)(v4 - 232) = *(_QWORD *)(v3 - 232);
      *(_OWORD *)(v4 - 248) = v6;
      *(_QWORD *)(v3 - 240) = 0;
      *(_QWORD *)(v3 - 232) = 0;
      *(_QWORD *)(v3 - 248) = 0;
      v7 = *(_OWORD *)(v3 - 224);
      *(_QWORD *)(v4 - 208) = *(_QWORD *)(v3 - 208);
      *(_OWORD *)(v4 - 224) = v7;
      *(_QWORD *)(v3 - 216) = 0;
      *(_QWORD *)(v3 - 208) = 0;
      *(_QWORD *)(v3 - 224) = 0;
      v8 = *(_OWORD *)(v3 - 200);
      *(_OWORD *)(v4 - 184) = *(_OWORD *)(v3 - 184);
      *(_OWORD *)(v4 - 200) = v8;
      v9 = *(_OWORD *)(v3 - 168);
      v10 = *(_OWORD *)(v3 - 152);
      v11 = *(_OWORD *)(v3 - 136);
      *(_OWORD *)(v4 - 120) = *(_OWORD *)(v3 - 120);
      *(_OWORD *)(v4 - 136) = v11;
      *(_OWORD *)(v4 - 152) = v10;
      *(_OWORD *)(v4 - 168) = v9;
      v12 = *(_OWORD *)(v3 - 104);
      v13 = *(_OWORD *)(v3 - 88);
      v14 = *(_OWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v14;
      *(_OWORD *)(v4 - 88) = v13;
      *(_OWORD *)(v4 - 104) = v12;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v3 -= 248;
      v4 -= 248;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v15 = *result;
  *result = v5;
  a2[1] = v15;
  v16 = result[1];
  result[1] = a2[2];
  a2[2] = v16;
  v17 = result[2];
  result[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrIOInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(248 * a2);
}

void std::__destroy_at[abi:ne180100]<ZinIrIOInfo,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<ZinIrIOInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 248;
    std::__destroy_at[abi:ne180100]<ZinIrIOInfo,0>(i - 248);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ZinIrIOInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 248;
        std::__destroy_at[abi:ne180100]<ZinIrIOInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = 3 * __n;
    v8 = &end[__n];
    v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_206F73B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ZinIrTensor *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_206F73BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<IOType,std::set<std::string>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::__emplace_hint_unique_key_args<IOType,std::pair<IOType const,std::set<std::string>> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_206F73C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::__emplace_hint_unique_key_args<IOType,std::pair<IOType const,std::set<std::string>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__find_equal<ZinIrDimension>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::__construct_node<std::pair<IOType const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<IOType,std::set<std::string>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::string>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::string>>>>::__construct_node<std::pair<IOType const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = std::set<std::string>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F73D80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IOType,std::set<std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IOType,std::set<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::map<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>>>::__emplace_hint_unique_key_args<IOType,std::pair<IOType const,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_206F73E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>>>::__emplace_hint_unique_key_args<IOType,std::pair<IOType const,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__find_equal<ZinIrDimension>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>>>::__construct_node<std::pair<IOType const,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::__map_value_compare<IOType,std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,std::less<IOType>,true>,std::allocator<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>>>::__construct_node<std::pair<IOType const,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F73F4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IOType,std::set<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F740D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinIrPlaneReaderUnitInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F741E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinIrPlaneReaderUnitInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  this[4].__r_.__value_.__r.__words[0] = -1;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C022F60;
  this[1].__r_.__value_.__l.__size_ = 0;
  HIDWORD(this[4].__r_.__value_.__r.__words[1]) = -1;
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinIrPlaneWriterUnitInfo>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPlaneWriterUnitInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinIrPlaneWriterUnitInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F743B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrPlaneReaderUnitInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinIrPlaneWriterUnitInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  this[4].__r_.__value_.__r.__words[0] = -1;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C022F80;
  this[1].__r_.__value_.__l.__size_ = 0;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinIrIOInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrIOInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrIOInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x130uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinIrIOInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F7453C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinIrIOInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v4;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v4;
  this[4].__r_.__value_.__r.__words[2] = -1;
  this[9].__r_.__value_.__r.__words[0] = -1;
  *(_OWORD *)((char *)this[8].__r_.__value_.__r.__words + 4) = v4;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = v4;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v4;
  *(std::string::size_type *)((char *)&this[9].__r_.__value_.__r.__words[2] + 4) = 0;
  *(std::string::size_type *)((char *)&this[9].__r_.__value_.__r.__words[1] + 4) = 0;
  *(std::string::size_type *)((char *)this[10].__r_.__value_.__r.__words + 4) = 0;
  HIDWORD(this[10].__r_.__value_.__r.__words[1]) = 0;
  LODWORD(this[10].__r_.__value_.__r.__words[2]) = 5;
  this[11].__r_.__value_.__r.__words[0] = -1;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206F7473C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrTensor *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrTensor *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206F74878(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrTensor *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<ZinIrTensor *>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrLiveOutTensorInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrLiveOutTensorInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x138uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinIrLiveOutTensorInfo>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F749CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinIrIOInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ZinIrLiveOutTensorInfo>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = 0u;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v4;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v4;
  this[4].__r_.__value_.__r.__words[2] = -1;
  this[9].__r_.__value_.__r.__words[0] = -1;
  *(_OWORD *)((char *)this[8].__r_.__value_.__r.__words + 4) = v4;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = v4;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v4;
  *(std::string::size_type *)((char *)&this[9].__r_.__value_.__r.__words[2] + 4) = 0;
  *(std::string::size_type *)((char *)&this[9].__r_.__value_.__r.__words[1] + 4) = 0;
  *(std::string::size_type *)((char *)this[10].__r_.__value_.__r.__words + 4) = 0;
  HIDWORD(this[10].__r_.__value_.__r.__words[1]) = 0;
  LODWORD(this[10].__r_.__value_.__r.__words[2]) = 5;
  this[11].__r_.__value_.__r.__words[0] = -1;
  return this;
}

void std::default_delete<ZinIrInputParam>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BD002F8);
  }
}

void ZinIrLiveIOManager::PrepareBindingsForLiveInsWithout4CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  float *v4;
  int v5;
  uint64_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_8_3();
  if (v5 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_19(4.8149e-34, v0, v1, (uint64_t)v2, v3, v4);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v6, "Unable to add binding for livein %s\n", v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  float *v4;
  int v5;
  uint64_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_8_3();
  if (v5 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_19(4.8149e-34, v0, v1, (uint64_t)v2, v3, v4);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v6, "Invalid livein %s\n", v7);
}

void ZinIrLiveIOManager::PrepareBindingsForLiveInsWith4CC(float *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint8_t *v5;

  if (*a2 < 0)
    a3 = (_QWORD *)*a3;
  OUTLINED_FUNCTION_19(4.8149e-34, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a1);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Invalid livein %s\n", v5);
}

void ZinIrLiveIOManager::PrepareLiveOut(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Unsupported model topology, multiple liveouts with same bottom\n", v3);
}

void ZinIrLiveIOManager::PrepareLiveOut()
{
  uint64_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "incompatible 4cc format between plane writer unit and live out %s\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLiveIOManager::CreateOutputTensor()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid stride for liveout tensor %s!\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid liveout tensor %s!\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid live output tensor %s!\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid liveout %s\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid plane index for liveout tensor %s!\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLiveIOManager::PrepareLiveOutBinding(float *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint8_t *v5;

  if (*(char *)(a2 + 55) < 0)
    a3 = (_QWORD *)*a3;
  OUTLINED_FUNCTION_19(4.8149e-34, (uint64_t)a1, a2, (uint64_t)a3, a4, a1);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Invalid live output %s!\n", v5);
}

void ZinIrLiveIOManager::PrepareLiveOutBinding()
{
  _DWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint8_t *v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  OUTLINED_FUNCTION_9_2();
  if (v5 != v6)
    v7 = v4;
  else
    v7 = v1;
  *v0 = 136315138;
  *v2 = v7;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)v2, "Unable to add binding for liveout %s\n", v3);
}

{
  uint64_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid live output %s!\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLiveIOManager::PrepareLiveOutBinding(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "LiveOutput without 4cc format should only have one liveout tensor\n", v3);
}

void ZinIrLiveIOManager::ValidateMultiplanarLiveOutput()
{
  uint64_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid liveout %s\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(float *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint8_t *v5;

  if (*(char *)(a2 + 55) < 0)
    a3 = (_QWORD *)*a3;
  OUTLINED_FUNCTION_19(4.8149e-34, (uint64_t)a1, a2, (uint64_t)a3, a4, a1);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Invalid number of planes for liveout %s\n", v5);
}

{
  uint64_t v4;
  uint8_t *v5;

  if (*(char *)(a2 + 55) < 0)
    a3 = (_QWORD *)*a3;
  OUTLINED_FUNCTION_19(4.8149e-34, (uint64_t)a1, a2, (uint64_t)a3, a4, a1);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Plane dimensions, format or interleave are incompatible for liveout %s\n", v5);
}

void ZinIrLiveIOManager::PrepareLiveInParamBinding()
{
  uint64_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Unable to add binding for livein param %s\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid livein param %s\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrFileBacking::~ZinIrFileBacking(void **this)
{
  *this = &off_24C01B958;
  ZinIrFileBacking::Close((ZinIrFileBacking *)this);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

BOOL ZinIrFileBacking::Open(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v13;
  void **v14;
  const void *v15;
  void **v16;
  int v17;
  int *v18;
  void *__p[2];
  char v20;
  char __str[1024];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 16) == -1)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = *((unsigned __int8 *)a2 + 23);
    else
      v13 = (size_t)a2[1];
    v14 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 26);
    if (v20 < 0)
      v14 = (void **)__p[0];
    if (v13)
    {
      if (*((char *)a2 + 23) >= 0)
        v15 = a2;
      else
        v15 = *a2;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "anecompiler.swap.XXXXXXXXX");
    v16 = __p;
    if (v20 < 0)
      v16 = (void **)__p[0];
    snprintf(__str, 0x400uLL, "%s", (const char *)v16);
    if (v20 < 0)
      operator delete(__p[0]);
    v17 = mkstemp(__str);
    v10 = v17 != -1;
    if (v17 == -1)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrFileBacking::Open();
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 8) = 0;
      std::string::__assign_external((std::string *)(a1 + 24), __str);
      if (unlink(__str))
      {
        v18 = __error();
        strerror(*v18);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrFileBacking::Open();
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileBacking::Open(a1, v3, v4, v5, v6, v7, v8, v9);
    return 0;
  }
  return v10;
}

void ZinIrFileBacking::Close(ZinIrFileBacking *this)
{
  int v2;
  int *v3;

  v2 = *((_DWORD *)this + 4);
  if (v2 != -1)
  {
    if (close(v2))
    {
      v3 = __error();
      strerror(*v3);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrFileBacking::Close();
    }
    *((_DWORD *)this + 4) = -1;
  }
}

BOOL ZinIrFileBacking::Valid(ZinIrFileBacking *this)
{
  return *((_DWORD *)this + 4) != -1;
}

void *ZinIrFileBacking::Allocate(ZinIrFileBacking *this, size_t a2)
{
  unsigned __int8 v4;
  off_t v5;
  void *result;

  if (((*(uint64_t (**)(ZinIrFileBacking *))(*(_QWORD *)this + 24))(this) & 1) == 0)
    ZinAssertImpl("Internal error: Tried to allocate %llu elements without file backing.", a2);
  if (((*(uint64_t (**)(ZinIrFileBacking *))(*(_QWORD *)this + 16))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileBacking::Allocate();
    return 0;
  }
  if ((v4 & 1) == 0
  {
    ZinIrFileBacking::Allocate(unsigned long long)::page_size = sysconf(29);
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5 + ZinAlignPower2(a2, ZinIrFileBacking::Allocate(unsigned long long)::page_size);
  if (ftruncate(*((_DWORD *)this + 4), v5 + a2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileBacking::Allocate();
    return 0;
  }
  result = mmap(0, a2, 3, 1, *((_DWORD *)this + 4), v5);
  if (result == (void *)-1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileBacking::Allocate();
    return 0;
  }
  return result;
}

void sub_206F755C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ZinIrFileBacking::UnmapSystem(ZinIrFileBacking *this, uint64_t a2)
{
  uint64_t v4;
  size_t v5;

  v4 = sysconf(29);
  v5 = ZinAlignPower2(a2, v4);
  return munmap(this, v5);
}

void ZinIrFileBacking::Open()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ZinIrFileBacking: Temp file not removed: %s - %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "ANECompiler internal error: Unable to create backing file %s: %s\n", v2, v3, v4, v5, 2u);
}

void ZinIrFileBacking::Open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinIrFileBacking: file is already open:  %s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrFileBacking::Close()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ZinIrFileBacking: Could not close file backing - %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrFileBacking::Allocate()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "ANECompiler internal error: mmap failure: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "ANECompiler internal error: ftruncate failure: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ANECompiler internal error: file backing is not opened.", v0, 2u);
}

__CFDictionary *ZinCreatePEGOCUnit(const ZinIrPEGOCUnitInfo *a1)
{
  __CFDictionary *Unit;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit(a1);
  v6[0] = &off_24C053F68;
  v7 = v6;
  ZinCreatePEUnit((uint64_t)a1, (uint64_t)v6, Unit);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return Unit;
}

void sub_206F759F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C053F68;
  return result;
}

void std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C053F68;
}

void std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(uint64_t a1, uint64_t a2, std::vector<std::string> *a3, __CFDictionary **a4)
{
  __CFDictionary *v6;
  size_t v7;
  std::string *p_str;
  _QWORD *v9;
  std::vector<std::string>::pointer begin;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t i;
  __CFDictionary *v15;
  std::string *p_p;
  CFStringRef v17;
  void *v18;
  std::string __p;
  std::vector<std::string> v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(ZinIrBroadcastUnitInfo *__hidden);
  uint64_t v24;
  void *v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[11];
  void (**v31)(ZinIrBroadcastUnitInfo *__hidden);
  uint64_t v32;
  std::string __str;
  std::string v34;
  std::string v35;
  __int128 v36;

  *(_QWORD *)&v36 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)&v25, (const ZinIrPEUnitInfo *)a2);
  v25 = &unk_24C01E0A0;
  ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)v30, (const ZinIrDynamicGOCUnitInfo *)(a2 + 968));
  ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)&v18, (const ZinIrDynamicGOCUnitInfo *)v30);
  if ((v27 & 0x80u) == 0)
    v7 = v27;
  else
    v7 = v26[1];
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v7 + 12);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if ((v27 & 0x80u) == 0)
      v9 = v26;
    else
      v9 = (_QWORD *)v26[0];
    memmove(p_str, v9, v7);
  }
  strcpy((char *)p_str + v7, ".dynamic_goc");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  v21 = v28;
  v22 = v29;
  begin = a3->__begin_;
  if (SHIBYTE(a3->__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    begin = a3->__begin_;
  }
  else
  {
    v11 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
  }
  if (SHIBYTE(begin[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, begin[1].__r_.__value_.__l.__data_, begin[1].__r_.__value_.__l.__size_);
    begin = a3->__begin_;
  }
  else
  {
    v12 = *(_OWORD *)&begin[1].__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = begin[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v12;
  }
  if (SHIBYTE(begin[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, begin[1].__r_.__value_.__l.__data_, begin[1].__r_.__value_.__l.__size_);
  }
  else
  {
    v13 = *(_OWORD *)&begin[1].__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = begin[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v20, &__str, &v36, 3uLL);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v35.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v35.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(a3, &__str, (__int128 *)&v34, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = ZinCreateDynamicGOCUnit(&v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(v6, v17, v15);
  CFRelease(v15);
  CFRelease(v17);
  v18 = &unk_24C0221D8;
  v23 = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v24);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v23);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v18);
  v25 = &unk_24C01E0A0;
  v30[0] = &unk_24C0221D8;
  v31 = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v32);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v31);
  ZinIrUnitInfo::~ZinIrUnitInfo(v30);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(&v25);
}

void sub_206F75DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(ZinIrBroadcastUnitInfo *__hidden this),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void **v36;
  uint64_t v37;

  a9 = &unk_24C0221D8;
  a20 = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a30);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&a20);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a9);
  a36 = (void *)(v37 + 16);
  STACK[0x4A0] = (unint64_t)&unk_24C0221D8;
  STACK[0x4F8] = (unint64_t)off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x548]);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&STACK[0x4F8]);
  ZinIrUnitInfo::~ZinIrUnitInfo(v36);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(&a36);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0,std::allocator<ZinCreatePEGOCUnit(ZinIrPEGOCUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target_type()
{
}

uint64_t ZinParseSoftmaxUnit(const __CFDictionary *a1, ZinIrSoftmaxUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t result;
  const __CFArray *v12;
  const __CFArray *v13;
  CFTypeID v14;
  int Count;
  CFIndex v16;
  uint64_t v17;
  const __CFString *ValueAtIndex;
  const __CFString *v19;
  CFTypeID v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
LABEL_18:
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Dimension"));
  if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    v12 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("Dimension"));
    if (v12 && (v13 = v12, v14 = CFGetTypeID(v12), v14 == CFArrayGetTypeID()))
    {
      Count = CFArrayGetCount(v13);
      if (Count < 1)
      {
        v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v29)
          ZinParseSoftmaxUnit(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        v16 = 0;
        v17 = Count;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v16);
          if (!ValueAtIndex)
            break;
          v19 = ValueAtIndex;
          v20 = CFGetTypeID(ValueAtIndex);
          if (v20 != CFStringGetTypeID())
            break;
          result = ZinParseSoftmaxDimension(v19, a2, a3);
          if ((_DWORD)result)
            return result;
          if (v17 == ++v16)
            goto LABEL_15;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinParseSoftmaxUnit(v16);
      }
    }
    else
    {
      v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v21)
        ZinParseSoftmaxUnit(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    goto LABEL_18;
  }
  result = ZinParseSoftmaxDimension(v9, a2, a3);
  if (!(_DWORD)result)
  {
LABEL_15:
    ZinParseBoolean(v6, CFSTR("SubtractMax"), (BOOL *)a2 + 120);
    return 0;
  }
  return result;
}

uint64_t ZinParseSoftmaxDimension(const __CFString *a1, ZinIrSoftmaxUnitInfo *a2, CFArrayRef *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  if (ZinCFStringEquals(a1, CFSTR("Channel")))
  {
    v6 = 2;
LABEL_9:
    v24 = v6;
    goto LABEL_10;
  }
  if (ZinCFStringEquals(a1, CFSTR("Height")))
  {
    v6 = 3;
    goto LABEL_9;
  }
  if (ZinCFStringEquals(a1, CFSTR("Width")))
  {
    v6 = 4;
    goto LABEL_9;
  }
  if (ZinCFStringEquals(a1, CFSTR("Depth")))
  {
    v6 = 1;
    goto LABEL_9;
  }
  if (!ZinCFStringEquals(a1, CFSTR("Batch")))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinParseSoftmaxDimension(v16, v17, v18, v19, v20, v21, v22, v23);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitSoftmaxDimension"));
    return 3;
  }
  v24 = 0;
LABEL_10:
  v7 = (_QWORD *)((char *)a2 + 80);
  if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v24))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    ZinParseSoftmaxDimension(result, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>((uint64_t)v7, &v24, &v24);
  }
  return 0;
}

void ZinParseSoftmaxUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Softmax dimension information needs to be an array or a string.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Softmax dimension array cannot be empty.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseSoftmaxUnit(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to parse softmax dimension at index #%d.\n", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ZinParseSoftmaxDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Warning: Duplicated Softmax dimension.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown or unsupported softmax dimension!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrEWUnit::ZinIrEWUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C0159A0;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C01A728;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_206F76458(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrEWUnit::CreateOpcode@<X0>(ZinIrEWUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = operator new();
  result = ZinIrElementWiseInfo::ZinIrElementWiseInfo(v5, *((_DWORD *)this + 34));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206F764DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrEWUnit::CreateLayer(ZinIrEWUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrEWUnit::CreateOpcode(a1, (uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinElementWiseLayer::ZinElementWiseLayer(v8, &v20, &v17, (char *)a1 + 64, a4);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v7);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206F76618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrEWUnit::TensorDimensions(ZinIrEWUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, CFArrayRef *a4)
{
  unsigned int v5;
  int v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t result;
  const ZinIrHalParameters *v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  uint64_t v18;
  int64x2_t v19;
  int8x16_t v20;
  int64x2_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25[2];
  uint64_t v26;
  int64x2_t v27[2];
  uint64_t v28;
  int64x2_t v29;
  int8x16_t v30;
  uint64_t v31;

  v5 = *((_DWORD *)this + 34);
  if (!v5)
    return 3;
  v9 = IsEWTypeUnary(v5);
  v10 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (v9)
  {
    if (v10 != 120)
    {
LABEL_4:
      v11 = CFSTR("InvalidBottomCount");
LABEL_5:
      ZinIrUnitStatus::SetError(a4, v11);
      return 3;
    }
  }
  else if (v10 != 240)
  {
    goto LABEL_4;
  }
  if ((IsEWTypeUnary(*((_DWORD *)this + 34)) & 1) == 0)
  {
    v17 = *((_DWORD *)this + 34);
    v18 = *((_QWORD *)this + 1);
    v19 = *(int64x2_t *)(v18 + 8);
    v20 = *(int8x16_t *)(v18 + 24);
    v31 = *(_QWORD *)(v18 + 40);
    v29 = v19;
    v30 = v20;
    v21 = *(int64x2_t *)(v18 + 144);
    v27[0] = *(int64x2_t *)(v18 + 128);
    v27[1] = v21;
    v28 = *(_QWORD *)(v18 + 160);
    if (v17 <= 4
      && ((1 << v17) & 0x16) != 0
      && ((IsSingularValue((const ZinTensorDimensions *)&v29) & 1) != 0
       || (IsSingularValue((const ZinTensorDimensions *)v27) & 1) != 0
       || v29.i64[1] == v27[0].i64[1]
       && (ZinElementWiseLayerUtils::IsChannelVector(&v29) || ZinElementWiseLayerUtils::IsChannelVector(v27))))
    {
      ZinElementWiseLayerUtils::GetOutputTensorDims((int64x2_t *)(*((_QWORD *)this + 1) + 8), (int64x2_t *)(*((_QWORD *)this + 1) + 128), v25);
      result = 0;
      v22 = v25[1];
      *a3 = v25[0];
      a3[1] = v22;
      v23 = v26;
      goto LABEL_17;
    }
    if (!ZinElementWiseLayerUtils::CanMatchDimensions((ZinElementWiseLayerUtils *)(*((_QWORD *)this + 1) + 8), (const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 128), a2, v13))
    {
      v11 = CFSTR("InvalidBottomDimensions");
      goto LABEL_5;
    }
  }
  v14 = *((_QWORD *)this + 1);
  v15 = *(int8x16_t *)(v14 + 8);
  v16 = *(int8x16_t *)(v14 + 24);
  a3[2].i64[0] = *(_QWORD *)(v14 + 40);
  *a3 = v15;
  a3[1] = v16;
  if ((IsEWTypeUnary(*((_DWORD *)this + 34)) & 1) != 0)
    return 0;
  ZinElementWiseLayerUtils::GetOutputTensorDims((int64x2_t *)(*((_QWORD *)this + 1) + 8), (int64x2_t *)(*((_QWORD *)this + 1) + 128), (int8x16_t *)&v29);
  result = 0;
  v24 = v30;
  *a3 = (int8x16_t)v29;
  a3[1] = v24;
  v23 = v31;
LABEL_17:
  a3[2].i64[0] = v23;
  return result;
}

uint64_t ZinIrEWUnit::ValidateOutputChannel(ZinIrEWUnit *this, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 1);
  if (v3 != -1)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (a2 == 2)
    {
      if (v5 != v3 && *(_QWORD *)(v4 + 136) != v3)
        goto LABEL_5;
    }
    else if (v5 != v3)
    {
LABEL_5:
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidOutputChannels"));
      return 3;
    }
    return 0;
  }
  if (a2 == 1)
  {
    v7 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 136);
    if (v7 <= v8)
      v7 = v8;
  }
  v6 = 0;
  *((_QWORD *)this + 16) = v7;
  return v6;
}

uint64_t ZinIrEWUnit::ValidateForDynamicShapes(ZinIrEWUnit *this, CFArrayRef *a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  if (v2 == 1)
    return 0;
  if (v2 == 2)
  {
    v3 = *((_DWORD *)this + 34) - 1;
    if (v3 < 0x15 && ((0x1F82FBu >> v3) & 1) != 0)
      return 0;
  }
  ZinIrUnitStatus::SetError(a2, CFSTR("UnsupportedForDynamicShapes"));
  return 3;
}

void ZinIrEWUnit::~ZinIrEWUnit(void **this)
{
  *this = &off_24C0159A0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0159A0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

__CFDictionary *ZinCreateNEPoolUnit(void (***a1)(ZinIrUnitInfo *__hidden this))
{
  __CFDictionary *Unit;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  size_t v7;
  std::string *v8;
  void (**v9)(ZinIrUnitInfo *__hidden);
  __CFDictionary *PoolUnit;
  std::string *p_p;
  CFStringRef v12;
  std::string v14;
  void (**v15)(ZinIrUnitInfo *__hidden);
  std::string __p;
  int v17;
  std::string v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  std::string *v26;
  char v27;
  std::string v28;
  __int128 v29;

  *(_QWORD *)&v29 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v15 = off_24C017CA0;
  if (*((char *)a1 + 399) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a1[47], (std::string::size_type)a1[48]);
  else
    __p = *(std::string *)(a1 + 47);
  v17 = *((_DWORD *)a1 + 100);
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, (__int128 *)a1[51], (__int128 *)a1[52], 0xAAAAAAAAAAAAAAABLL * (a1[52] - a1[51]));
  v3 = *((_OWORD *)a1 + 31);
  v4 = *((_OWORD *)a1 + 32);
  v5 = *((_OWORD *)a1 + 29);
  v22 = *((_OWORD *)a1 + 30);
  v23 = v3;
  v24 = v4;
  v6 = *((_OWORD *)a1 + 28);
  v19 = *((_OWORD *)a1 + 27);
  v20 = v6;
  v15 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C01CC78;
  v25 = *((_DWORD *)a1 + 132);
  if (*((char *)a1 + 31) >= 0)
    v7 = *((unsigned __int8 *)a1 + 31);
  else
    v7 = (size_t)a1[2];
  v21 = v5;
  v8 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v7 + 5);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a1 + 31) >= 0)
      v9 = (void (**)(ZinIrUnitInfo *__hidden))(a1 + 1);
    else
      v9 = a1[1];
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, ".pool");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v14;
  v19 = *((_OWORD *)a1 + 4);
  if (&v15 != a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v18, (std::string *)a1[5], (__int128 *)a1[6], 0xAAAAAAAAAAAAAAABLL * (a1[6] - a1[5]));
  PoolUnit = ZinCreatePoolUnit((const ZinIrPoolUnitInfo *)&v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(Unit, v12, PoolUnit);
  CFRelease(v12);
  CFRelease(PoolUnit);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v28 = __p;
  memset(&v14, 0, sizeof(v14));
  v26 = &v14;
  v27 = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v14.__r_.__value_.__l.__size_ = v14.__r_.__value_.__r.__words[0];
  v14.__r_.__value_.__r.__words[2] = v14.__r_.__value_.__r.__words[0] + 24;
  v14.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14.__r_.__value_.__r.__words[2], (__int128 *)&v28, &v29, (std::string *)v14.__r_.__value_.__l.__data_);
  ZinCreateNEUnit((uint64_t)a1, (__int128 **)&v14, Unit);
  v26 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v15);
  return Unit;
}

void sub_206F76C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(&a12);
  _Unwind_Resume(a1);
}

void ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(ZinEngineLayerMirInfo *this, uint64_t a2)
{
  uint64_t v4;
  int64x2_t v5;
  ZinMirL2Config::NE *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;

  v4 = 0;
  v5 = vdupq_n_s64(1uLL);
  *((_OWORD *)this + 5) = 0u;
  *((int64x2_t *)this + 6) = v5;
  *(int64x2_t *)((char *)this + 120) = v5;
  v6 = (ZinEngineLayerMirInfo *)((char *)this + 120);
  *((_DWORD *)this + 152) = 1065353216;
  *((_DWORD *)this + 164) = 1065353216;
  *((_DWORD *)this + 176) = 1065353216;
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 17) = 1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 25) = 1;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 116) = 0;
  *((_OWORD *)this + 15) = xmmword_207A7E150;
  *((_BYTE *)this + 256) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_BYTE *)this + 408) = 0;
  *((_DWORD *)this + 106) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_BYTE *)this + 480) = 0;
  *((_DWORD *)this + 124) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_BYTE *)this + 552) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_DWORD *)this + 142) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_BYTE *)this + 344) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 154) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_DWORD *)this + 166) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  do
  {
    v7 = (char *)this + v4;
    *((_DWORD *)v7 + 178) = 0;
    v8 = (char *)this + v4 + 720;
    v7[804] = 0;
    *((_OWORD *)v7 + 45) = 0uLL;
    *((_OWORD *)v7 + 46) = 0uLL;
    *((_OWORD *)v7 + 47) = 0uLL;
    *((_OWORD *)v7 + 48) = 0uLL;
    v4 += 96;
    *(_OWORD *)(v8 + 57) = 0uLL;
  }
  while (v4 != 192);
  *((_DWORD *)this + 226) = 0;
  *((_BYTE *)this + 996) = 0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 969) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  v9 = 1000;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  do
  {
    v10 = (char *)this + v9;
    *(_DWORD *)v10 = 0;
    *(_OWORD *)(v10 + 40) = 0uLL;
    *(_OWORD *)(v10 + 56) = 0uLL;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_DWORD *)v10 + 8) = 0;
    v9 += 80;
    *((_DWORD *)v10 + 18) = 1065353216;
  }
  while (v10 + 80 != (char *)this + 1160);
  *((_DWORD *)this + 290) = 0;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_QWORD *)this + 146) = 0;
  *((_DWORD *)this + 298) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *((_DWORD *)this + 308) = 1065353216;
  *((_QWORD *)this + 162) = 0;
  *((_BYTE *)this + 1304) = 0;
  *((_QWORD *)this + 164) = 0;
  *((_WORD *)this + 660) = 0;
  *(_OWORD *)((char *)this + 1268) = 0u;
  *(_QWORD *)((char *)this + 1281) = 0;
  *((_QWORD *)this + 166) = 0;
  *(_DWORD *)((char *)this + 1335) = 0;
  *((_DWORD *)this + 335) = 0;
  *(_DWORD *)((char *)this + 1343) = 0;
  *((_QWORD *)this + 171) = 0;
  *((_WORD *)this + 688) = 0;
  *(_OWORD *)((char *)this + 1348) = 0u;
  *((_BYTE *)this + 1384) = 0;
  *((_QWORD *)this + 157) = 0;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_BYTE *)this + 1264) = 0;
  *(_WORD *)((char *)this + 1385) = 1;
  *((_DWORD *)this + 347) = 0;
  *((_BYTE *)this + 1392) = 0;
  *(_QWORD *)&v11 = 0x100000001;
  *((_QWORD *)&v11 + 1) = 0x100000001;
  *(_OWORD *)((char *)this + 1396) = xmmword_207AA1730;
  *(_OWORD *)((char *)this + 1412) = v11;
  *(_OWORD *)((char *)this + 1428) = xmmword_207AAF4F0;
  *(_OWORD *)((char *)this + 1444) = xmmword_207A89670;
  *((_QWORD *)this + 191) = 0;
  *((_DWORD *)this + 384) = 0;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 392) = 0;
  *((_QWORD *)this + 195) = 0;
  *((_DWORD *)this + 400) = 0;
  *((_QWORD *)this + 199) = 0;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_QWORD *)this + 203) = 0;
  *((_DWORD *)this + 408) = 0;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1489) = 0u;
  *((_DWORD *)this + 410) = 0;
  ZinMirPerfTracerConfig::ZinMirPerfTracerConfig((ZinEngineLayerMirInfo *)((char *)this + 1648), 0);
  *((_BYTE *)this + 1680) = 0;
  *((_QWORD *)this + 211) = 0;
  *((_OWORD *)this + 106) = xmmword_207A9CEA0;
  *((_OWORD *)this + 107) = xmmword_207A9CEA0;
  *((_OWORD *)this + 108) = xmmword_207A9CEA0;
  *((_OWORD *)this + 109) = xmmword_207A9CEA0;
  *((_OWORD *)this + 110) = xmmword_207A9CEA0;
  *((_QWORD *)this + 222) = 0xFFFFLL;
  ZinMirL2Config::NE::SetNumNeededNEs(v6, a2);
  ZinMirL2Config::NE::SetOCGSize(v6, 1);
}

void sub_206F77024(_Unwind_Exception *a1)
{
  _QWORD *v1;
  ZinMirL2Config *v2;
  uint64_t v3;
  ZinDramDependentInfo *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v10 = *v8;
  if (*v8)
  {
    v1[202] = v10;
    operator delete(v10);
  }
  v11 = *v7;
  if (*v7)
  {
    v1[198] = v11;
    operator delete(v11);
  }
  v12 = *v6;
  if (*v6)
  {
    v1[194] = v12;
    operator delete(v12);
  }
  v13 = *v5;
  if (*v5)
  {
    v1[190] = v13;
    operator delete(v13);
  }
  ZinDramDependentInfo::~ZinDramDependentInfo(v4);
  std::array<ZinDramDependentInfo,2ul>::~array(v3);
  ZinMirL2Config::~ZinMirL2Config(v2);
  v14 = (void *)v1[7];
  if (v14)
  {
    v1[8] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

BOOL ZinEngineLayerMirInfo::SetNumNeededNEs(ZinEngineLayerMirInfo *this, uint64_t a2)
{
  return ZinMirL2Config::NE::SetNumNeededNEs((ZinEngineLayerMirInfo *)((char *)this + 120), a2);
}

BOOL ZinEngineLayerMirInfo::SetOCGSize(ZinEngineLayerMirInfo *this, uint64_t a2)
{
  return ZinMirL2Config::NE::SetOCGSize((ZinEngineLayerMirInfo *)((char *)this + 120), a2);
}

void ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(ZinEngineLayerMirInfo *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t i;
  void *v9;
  void *v10;

  v2 = (void *)*((_QWORD *)this + 207);
  if (v2)
  {
    *((_QWORD *)this + 208) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 201);
  if (v3)
  {
    *((_QWORD *)this + 202) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 197);
  if (v4)
  {
    *((_QWORD *)this + 198) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 193);
  if (v5)
  {
    *((_QWORD *)this + 194) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 189);
  if (v6)
  {
    *((_QWORD *)this + 190) = v6;
    operator delete(v6);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 1200);
  v7 = (void *)*((_QWORD *)this + 146);
  if (v7)
  {
    *((_QWORD *)this + 147) = v7;
    operator delete(v7);
  }
  for (i = 0; i != -160; i -= 80)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + i + 1120);
    v9 = *(void **)((char *)this + i + 1088);
    if (v9)
    {
      *(_QWORD *)((char *)this + i + 1096) = v9;
      operator delete(v9);
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 672);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 624);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 576);
  v10 = (void *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 8) = v10;
    operator delete(v10);
  }
}

uint64_t ZinEngineLayerMirInfo::GetChannelAssignment(ZinEngineLayerMirInfo *this)
{
  return ZinMirL2Config::NE::GetChannelAssignment((ZinEngineLayerMirInfo *)((char *)this + 120));
}

__n128 ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(uint64_t a1, int a2, uint64_t a3)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;

  if (a2 == 3)
  {
    v3 = (_OWORD *)(a1 + 1752);
  }
  else if (a2 == 1)
  {
    v3 = (_OWORD *)(a1 + 1720);
  }
  else
  {
    if (a2)
      ZinAssertImpl("Type Undefined\n");
    v3 = (_OWORD *)(a1 + 1688);
  }
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *v3 = *(_OWORD *)a3;
  v3[1] = v5;
  return result;
}

__n128 ZinEngineLayerMirInfo::GetAddressTranslationBoundaryRegisters@<Q0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  *a3 = xmmword_207AAF500;
  a3[1] = xmmword_207AAF500;
  if (a2 == 3)
  {
    v3 = a1 + 1752;
  }
  else if (a2 == 1)
  {
    v3 = a1 + 1720;
  }
  else
  {
    if (a2)
      ZinAssertImpl("Type Undefined\n");
    v3 = a1 + 1688;
  }
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a3 = *(_OWORD *)v3;
  a3[1] = v5;
  return result;
}

uint64_t ZinEngineLayerMirInfo::GetAllValidL2Symbols@<X0>(ZinEngineLayerMirInfo *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Symbol;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  Symbol = ZinL2Access::GetSymbol((ZinEngineLayerMirInfo *)((char *)this + 1512));
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a2, &Symbol, &Symbol);
  Symbol = ZinL2Access::GetSymbol((ZinEngineLayerMirInfo *)((char *)this + 1544));
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a2, &Symbol, &Symbol);
  Symbol = ZinL2Access::GetSymbol((ZinEngineLayerMirInfo *)((char *)this + 1576));
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a2, &Symbol, &Symbol);
  Symbol = ZinL2Access::GetSymbol((ZinEngineLayerMirInfo *)((char *)this + 1608));
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a2, &Symbol, &Symbol);
  Symbol = 0;
  return std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__erase_unique<ZinIrSymbol const*>((uint64_t **)a2, &Symbol);
}

void sub_206F7730C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t ZinEngineLayerMirInfo::GetL2RdSymbol(uint64_t a1, int a2)
{
  if (a2 == 2)
    return ZinL2Access::GetSymbol((ZinL2Access *)(a1 + 1576));
  if (a2 == 1)
    return ZinL2Access::GetSymbol((ZinL2Access *)(a1 + 1544));
  return ZinL2Access::GetSymbol((ZinL2Access *)(a1 + 1512));
}

uint64_t ZinEngineLayerMirInfo::GetL2WrSymbol(ZinEngineLayerMirInfo *this)
{
  return ZinL2Access::GetSymbol((ZinEngineLayerMirInfo *)((char *)this + 1608));
}

uint64_t ZinEngineLayerMirInfo::GetL2RdAccess(uint64_t a1, int a2)
{
  if (a2 == 2)
    return a1 + 1576;
  if (a2 == 1)
    return a1 + 1544;
  return a1 + 1512;
}

_QWORD *ZinEngineLayerMirInfo::GetL2RdSymbols@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  if (a2 == 2)
  {
    v5 = a1 + 1576;
  }
  else if (a2 == 1)
  {
    v5 = a1 + 1544;
  }
  else
  {
    v5 = a1 + 1512;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(a3, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
}

_QWORD *ZinEngineLayerMirInfo::GetL2WrSymbols@<X0>(ZinEngineLayerMirInfo *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(a2, *((const void **)this + 201), *((_QWORD *)this + 202), (uint64_t)(*((_QWORD *)this + 202) - *((_QWORD *)this + 201)) >> 3);
}

uint64_t ZinEngineLayerMirInfo::SetL2RdSymbols(uint64_t a1, const ZinIrSymbol ***a2, int a3, int a4)
{
  const ZinIrSymbol **v8;
  const ZinIrSymbol **v9;
  uint64_t v10;

  v8 = *a2;
  v9 = a2[1];
  while (v8 != v9)
  {
    if (!IsL2Symbol(*v8))
      return 0;
    ++v8;
  }
  switch(a3)
  {
    case 2:
      v10 = a1 + 1576;
      goto LABEL_12;
    case 1:
      v10 = a1 + 1544;
      goto LABEL_12;
    case 0:
      v10 = a1 + 1512;
LABEL_12:
      ZinL2Access::SetSymbols(v10, (uint64_t)a2, a4);
      break;
  }
  return 1;
}

BOOL IsL2Symbol(const ZinIrSymbol *a1)
{
  _BOOL8 result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 && ZinIrSymbol::GetMemType(a1) == 2)
    return 1;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    IsL2Symbol(result, v2, v3, v4, v5, v6, v7, v8);
    return 0;
  }
  return result;
}

uint64_t ZinEngineLayerMirInfo::SetL2WrSymbols(uint64_t a1, const ZinIrSymbol ***a2, int a3)
{
  const ZinIrSymbol **v6;
  const ZinIrSymbol **v7;

  v6 = *a2;
  v7 = a2[1];
  while (1)
  {
    if (v6 == v7)
    {
      ZinL2Access::SetSymbols(a1 + 1608, (uint64_t)a2, a3);
      return 1;
    }
    if (!IsL2Symbol(*v6))
      break;
    ++v6;
  }
  return 0;
}

uint64_t ZinEngineLayerMirInfo::RemoveL2RdSymbol(uint64_t result, int a2)
{
  switch(a2)
  {
    case 2:
      return ZinL2Access::RemoveSymbol(result + 1576);
    case 1:
      return ZinL2Access::RemoveSymbol(result + 1544);
    case 0:
      return ZinL2Access::RemoveSymbol(result + 1512);
  }
  return result;
}

uint64_t ZinEngineLayerMirInfo::GetL2RdMode(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2 == 2)
  {
    v2 = a1 + 1576;
  }
  else if (a2 == 1)
  {
    v2 = a1 + 1544;
  }
  else
  {
    v2 = a1 + 1512;
  }
  return *(unsigned int *)(v2 + 24);
}

uint64_t ZinEngineLayerMirInfo::HasChainRead(_DWORD *a1, int *a2)
{
  int v2;

  if (a1[384] == 4)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return 1;
  }
  if (a1[392] == 4)
  {
    v2 = 1;
    goto LABEL_7;
  }
  if (a1[400] == 4)
  {
    v2 = 2;
    goto LABEL_7;
  }
  return 0;
}

void ZinEngineLayerMirInfo::SetNeedInputDMACached(uint64_t a1, int a2, char a3)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 2:
      v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v3)
        ZinEngineLayerMirInfo::SetNeedInputDMACached(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    case 1:
      *(_BYTE *)(a1 + 1641) = a3;
      break;
    case 0:
      *(_BYTE *)(a1 + 1640) = a3;
      break;
  }
}

BOOL ZinEngineLayerMirInfo::NeedInputDMACached(uint64_t a1, int a2)
{
  unsigned __int8 *v2;

  if (a2 == 1)
  {
    v2 = (unsigned __int8 *)(a1 + 1641);
    return *v2 != 0;
  }
  if (!a2)
  {
    v2 = (unsigned __int8 *)(a1 + 1640);
    return *v2 != 0;
  }
  return 0;
}

double ZinEngineLayerMirInfo::SetChannelAssignment(ZinEngineLayerMirInfo *this, const MirInfoChannelAssignment *a2)
{
  double result;

  *(_QWORD *)&result = ZinMirL2Config::NE::SetChannelAssignment((ZinEngineLayerMirInfo *)((char *)this + 120), a2).n128_u64[0];
  return result;
}

BOOL ZinEngineLayerMirInfo::SetFatTileEnable(ZinEngineLayerMirInfo *this, char a2)
{
  return ZinMirL2Config::NE::SetFatTileEnable((ZinEngineLayerMirInfo *)((char *)this + 120), a2);
}

BOOL ZinEngineLayerMirInfo::SetWUStackLog2(ZinEngineLayerMirInfo *this, uint64_t a2)
{
  return ZinMirL2Config::NE::SetWUStackLog2((ZinEngineLayerMirInfo *)((char *)this + 120), a2);
}

uint64_t ZinEngineLayerMirInfo::SetChannelAssignmentLock(ZinEngineLayerMirInfo *this, char a2)
{
  return ZinMirL2Config::NE::SetChannelAssignmentLock((ZinEngineLayerMirInfo *)((char *)this + 120), a2);
}

void IsL2Symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid L2 Symbol. Null symbol or non-L2 symbol.\n", a5, a6, a7, a8, 0);
}

void ZinEngineLayerMirInfo::SetNeedInputDMACached(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: SrcIdx should always be resident for Crete+", a5, a6, a7, a8, 0);
}

CFMutableDictionaryRef ZinCreateBroadcastUnit(const ZinIrBroadcastUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t *v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  const __CFString *v9;
  __CFDictionary *theDict;
  CFMutableDictionaryRef Unit;
  int valuePtr;

  Unit = ZinCreateUnit(a1);
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  v4 = (uint64_t *)*((_QWORD *)a1 + 12);
  if (v4)
  {
    v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v7 = CFDictionaryCreateMutable(v2, 0, v5, v6);
      valuePtr = v4[3];
      v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      v9 = ZinIrCoordinateToCFString((_DWORD *)v4 + 4);
      CFDictionaryAddValue(v7, CFSTR("Dimension"), v9);
      CFDictionaryAddValue(v7, CFSTR("Size"), v8);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
      CFRelease(v7);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  CFDictionaryAddValue(theDict, CFSTR("BroadcastInfo"), Mutable);
  CFDictionaryAddValue(Unit, CFSTR("Params"), theDict);
  CFRelease(Mutable);
  CFRelease(theDict);
  return Unit;
}

void ZinMirHoistGOCTexture::InitializePatterns(int64x2_t *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  void ***v6;
  _QWORD *v7;
  uint64_t v8;
  ZinPattern *v9;
  unint64_t v10;
  ZinPattern **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  ZinPattern **v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  ZinPattern *v23;
  int64x2_t v24;
  char *v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char **v31;
  char v32;
  _QWORD v33[3];
  _QWORD *v34;
  void **v35;
  int64x2_t v36;
  char *v37;
  uint64_t (*v38)(uint64_t);
  void **v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[40];
  _QWORD v45[23];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v35, "dequant_goc");
  v37 = (char *)&unk_24C0537D8;
  v38 = MatchDequantGOC;
  v39 = (void **)&v37;
  v27 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v40, &v27, 1);
  std::string::basic_string[abi:ne180100]<0>(v41, "texture");
  v42[0] = &unk_24C0537D8;
  v42[1] = MatchTexture;
  v43 = v42;
  v26 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v44, &v26, 1);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = &v28;
  v32 = 0;
  v28 = (char *)operator new(0xC0uLL);
  v29 = (uint64_t)v28;
  v30 = v28 + 192;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v30, (uint64_t)&v35, (uint64_t)v45, (uint64_t)v28);
  v2 = this[1].i64[0];
  v33[0] = &unk_24C053A98;
  v33[1] = IsValidPattern;
  v34 = v33;
  ZinLinearPattern::ZinLinearPattern(v45, &v28, v2, 0, v33, 0);
  v3 = v34;
  if (v34 == v33)
  {
    v4 = 4;
    v3 = v33;
    goto LABEL_5;
  }
  if (v34)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v31 = &v28;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  for (i = 0; i != -24; i -= 12)
  {
    v6 = &(&v35)[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v44[i * 8]);
    v7 = *(_QWORD **)&v44[i * 8 - 8];
    if (&v42[i] == v7)
    {
      v7 = v6 + 15;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_12;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
    if (SHIBYTE(v41[i + 2]) < 0)
      operator delete(v6[12]);
  }
  v9 = (ZinPattern *)operator new();
  ZinPattern::ZinPattern(v9, (const ZinPattern *)v45);
  *(_QWORD *)v9 = &off_24C01BCC8;
  *((_QWORD *)v9 + 24) = 0;
  *((_QWORD *)v9 + 25) = 0;
  *((_QWORD *)v9 + 23) = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((_QWORD *)v9 + 23, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 5));
  v10 = this[5].u64[0];
  v11 = (ZinPattern **)this[4].i64[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = this[4].i64[0];
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v38 = (uint64_t (*)(uint64_t))&this[5];
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this[5].i64, v17);
    else
      v18 = 0;
    v19 = (ZinPattern **)&v18[8 * v14];
    v20 = &v18[8 * v17];
    v37 = v20;
    *v19 = v9;
    v12 = v19 + 1;
    v36.i64[1] = (uint64_t)(v19 + 1);
    v22 = (_QWORD *)this[4].i64[0];
    v21 = (_QWORD *)this[4].i64[1];
    if (v21 == v22)
    {
      v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        v23 = (ZinPattern *)*--v21;
        *v21 = 0;
        *--v19 = v23;
      }
      while (v21 != v22);
      v24 = this[4];
      v12 = (_QWORD *)v36.i64[1];
      v20 = v37;
    }
    this[4].i64[0] = (uint64_t)v19;
    this[4].i64[1] = (uint64_t)v12;
    v36 = v24;
    v25 = (char *)this[5].i64[0];
    this[5].i64[0] = (uint64_t)v20;
    v37 = v25;
    v35 = (void **)v24.i64[0];
    std::__split_buffer<std::unique_ptr<ZinPattern>>::~__split_buffer((uint64_t)&v35);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  this[4].i64[1] = (uint64_t)v12;
  v45[0] = &off_24C01BCC8;
  v35 = (void **)&v46;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v35);
  ZinPattern::~ZinPattern((ZinPattern *)v45);
}

void sub_206F77BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)&a44);
  _Unwind_Resume(a1);
}

uint64_t MatchDequantGOC(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v3;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 64) + 8) == 2
    && ZinIrOpLayer::IsTensorFmtQuantized(**(ZinIrOpLayer ***)(v1 + 88))
    && *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) < 9uLL;
  return v3 | 0x100u;
}

uint64_t MatchTexture(uint64_t a1)
{
  return ZinIrOpLayer::IsTELayer(*(ZinIrOpLayer **)(a1 + 8)) | 0x100;
}

uint64_t IsValidPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinGOCLayer *SingleMatch;
  _QWORD **v5;
  uint64_t result;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "dequant_goc");
  SingleMatch = (ZinGOCLayer *)ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "texture");
  v5 = (_QWORD **)ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SingleMatch != (ZinGOCLayer *)*v5[11])
    return 0;
  if (ZinGOCLayer::IsSingularScaleBias(SingleMatch))
    return 1;
  result = ((uint64_t (*)(_QWORD **, uint64_t))(*v5)[43])(v5, 2);
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_206F77E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistGOCTexture::Hoist(ZinMirHoistGOCTexture *this, const ZinPattern *a2, uint64_t **a3)
{
  ZinIrOpLayer ***SingleMatch;
  uint64_t **v6;
  size_t v7;
  std::string *p_p;
  ZinIrOpLayer **v9;
  __n128 v10;
  ZinIrTensor *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  ZinIrOpLayer *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD v27[2];
  int v28;
  _QWORD v29[2];
  std::string __p;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35[2];
  char v36;
  char v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v35, "dequant_goc");
  SingleMatch = (ZinIrOpLayer ***)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "texture");
  v6 = (uint64_t **)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  if (*((char *)SingleMatch + 47) >= 0)
    v7 = *((unsigned __int8 *)SingleMatch + 47);
  else
    v7 = (size_t)SingleMatch[4];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)SingleMatch + 47) >= 0)
      v9 = (ZinIrOpLayer **)(SingleMatch + 3);
    else
      v9 = SingleMatch[3];
    memmove(p_p, v9, v7);
  }
  strcpy((char *)p_p + v7, "SwapGOCTexture");
  v10 = ZinObjectNameFactory::ZinObjectNameFactory(v35, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD, __n128))(*v6)[4])(v6, 0, 0, v10);
  ZinObjectNameFactory::CreateName((uint64_t)v35, 0, &__p);
  ZinIrTensor::CreateTensor(v11, (__int128 *)&__p, &v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = v33;
  v32 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinObjectNameFactory::CreateName((uint64_t)v35, 1u, &__p);
  v14 = (ZinIrOpLayer *)((uint64_t (*)(ZinIrOpLayer ***, uint64_t *, std::string *))(*SingleMatch)[22])(SingleMatch, &v31, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v32;
  if (v32)
  {
    v16 = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a3, (ZinIrOpLayerGraph *)SingleMatch, *SingleMatch[11], (uint64_t)v6, 0xFFFFFFFFFFFFFFFFLL, 0, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v38[0] = SingleMatch;
  v29[0] = v38;
  v29[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v29);
  v19 = ZinIrOpLayerGraph::AddNode(a3, v14, (ZinIrOpLayer ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  v20 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a3, v6, v14, v27);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  v21 = ZinIrOpLayerGraph::AddEdge((uint64_t)a3, (uint64_t)v6, (uint64_t)v14, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v22 = v18 & v19 & v20 & v21 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a3, (ZinIrOpLayer *)SingleMatch, 0);
  if ((v22 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinMirHoistGOCTexture::Hoist();
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v35[0] = off_24C01FBB0;
  if (v37 < 0)
    operator delete(v35[1]);
  return v22;
}

void sub_206F78208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  *(_QWORD *)(v24 - 120) = off_24C01FBB0;
  if (*(char *)(v24 - 89) < 0)
    operator delete(*(void **)(v24 - 112));
  _Unwind_Resume(a1);
}

void ZinMirHoistGOCTexture::Hoist()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[ZinIrOptSwapGOCTexture] Graph Transformation Failed\n", v0, 2u);
}

void ZinChannelToSpaceLargeFactorCompositeLayer::ZinChannelToSpaceLargeFactorCompositeLayer(ZinChannelToSpaceLargeFactorCompositeLayer *this, ZinConvLayer *a2, ZinGOCLayer *a3, size_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  ZinIrKernel *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  ZinIrKernel *v28;
  std::string v29;
  void *v30[2];
  int64_t v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, 27);
  v37 = v8;
  v9 = (uint64_t *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*a4 + 40))(a4, 0, 0);
  v10 = v9[1];
  v35 = *v9;
  v36 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*((char *)a4 + 47) >= 0)
    v13 = *((unsigned __int8 *)a4 + 47);
  else
    v13 = a4[4];
  v14 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v13 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*((char *)a4 + 47) >= 0)
      v15 = (char *)(a4 + 3);
    else
      v15 = (char *)a4[3];
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v29, "comp_ctos");
  v16 = std::string::append(&v29, "_xfm", 4uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v30 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0)
    v18 = v30;
  else
    v18 = (void **)v30[0];
  if (v31 >= 0)
    v19 = HIBYTE(v31);
  else
    v19 = (std::string::size_type)v30[1];
  v20 = std::string::append(&v32, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v34 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v28 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)this, &v37, &v35, (__int128 *)__p, &v28);
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    ZinIrKernel::~ZinIrKernel(v22);
    MEMORY[0x20BD002F8](v23);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v37;
  v37 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  *(_QWORD *)this = &off_24C060020;
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 25) = a3;
  *((_QWORD *)this + 26) = a4;
}

void sub_206F785A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 72);
  v35 = *(_QWORD *)(v33 - 56);
  *(_QWORD *)(v33 - 56) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::Lower(ZinIrOpLayer *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t Hal;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  _OWORD *v36;
  std::string *v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  size_t v43;
  __int128 *v44;
  const void *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *p_p;
  std::string::size_type v55;
  std::string *v56;
  char *v57;
  char v58;
  std::vector<std::string>::pointer end;
  std::string *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  int j;
  uint64_t v67;
  size_t v68;
  __int128 *v69;
  const void *v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  char v84;
  std::string::size_type v85;
  std::string::size_type v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  std::string *v90;
  std::string *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  std::string *v114;
  size_t v115;
  void *p_v;
  std::string *v117;
  ZinKernelSparsityCache *KernelSparsityCache;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  size_t v123;
  void *first;
  const void *v125;
  const ZinIrOpLayerOpCode *v126;
  ZinIrOpLayerOpCode *v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  std::string *v131;
  size_t v132;
  std::string *v133;
  std::string *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  ZinIrOpLayer *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *GroupId;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  ZinIrOpLayer **v154;
  char *v155;
  char *v156;
  ZinIrOpLayer *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  ZinIrKernel *v161;
  ZinIrKernel *v162;
  ZinIrKernel *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  ZinIrOpLayer *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  unint64_t *v173;
  unint64_t v174;
  std::string::size_type v175;
  size_t v176;
  void *v177;
  const void *v178;
  ZinKernelSparsityCache *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  size_t v184;
  void *v185;
  const void *v186;
  const ZinIrOpLayerOpCode *v187;
  ZinIrOpLayerOpCode *v188;
  __int128 v189;
  int v190;
  std::string::size_type v191;
  size_t v192;
  std::string *v193;
  const void *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  ZinIrOpLayer *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t *v206;
  _QWORD *v207;
  ZinIrKernel *v208;
  ZinIrKernel *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  ZinIrKernel *v214;
  ZinIrKernel *v215;
  ZinIrKernel *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  ZinIrKernel *v222;
  ZinIrKernel *v223;
  uint64_t k;
  uint64_t v225;
  ZinIrKernel **v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  ZinIrKernel *v230;
  ZinIrKernel *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  ZinIrKernel *v237;
  ZinIrKernel *v238;
  ZinIrKernel *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  size_t v247;
  std::string *v248;
  const void *v249;
  std::string *v250;
  __int128 v251;
  const std::string::value_type *v252;
  std::string::size_type v253;
  std::string *v254;
  __int128 v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  int v264;
  _DWORD *v265;
  ZinIrOpLayer *v266;
  uint64_t *v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v271;
  int64x2_t v272;
  uint64_t v273;
  uint64_t v274;
  ZinIrOpLayer *v275;
  uint64_t v276;
  ZinIrTarget **v277;
  void *v279;
  void *v280;
  char *v281;
  std::string __p;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  _QWORD *v286;
  std::string v287;
  __int128 v288;
  int64_t v289;
  std::string v290;
  char v291;
  _QWORD *v292;
  std::string v293;
  ZinIrKernel *v294;
  ZinIrKernel *v295;
  ZinIrKernel *v296;
  __int128 v297;
  _QWORD *v298;
  __int128 v299;
  ZinIrKernel *v300;
  ZinIrKernel *v301;
  ZinIrKernel *v302;
  __int128 v303;
  std::string v304;
  uint64_t v305;
  int v306;
  _QWORD *v307;
  __int128 v308;
  std::string v309;
  std::vector<std::string> v310;
  int64x2_t v311;
  _QWORD v312[2];
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  std::__split_buffer<std::string> __v;
  __int128 v318;
  char *v319;
  __int128 v320;
  _QWORD v321[4];

  v321[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 24);
  if (!v3)
    ZinAssertImpl("Conv is required in a ZinChannelToSpaceLargeFactorCompositeLayer");
  v4 = *((_QWORD *)a1 + 26);
  if (!v4)
    ZinAssertImpl("C2S is required in a ZinChannelToSpaceLargeFactorCompositeLayer");
  v5 = *(_DWORD **)(v4 + 64);
  if (v5[3] != 4 || v5[4] != 4 || v5[5] != 1)
    ZinAssertImpl("Factor of 4x4x1 is the only supported large factor");
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0) + 56) & 3) != 0)
    ZinAssertImpl("Conv output channel must be divisible by split");
  v277 = *(ZinIrTarget ***)(*((_QWORD *)a1 + 24) + 16);
  Hal = ZinIrTarget::GetHal(v277[20]);
  v276 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a1 + 24) + 32))(*((_QWORD *)a1 + 24), 0, 0);
  v8 = *(_QWORD *)(v7 + 56);
  v9 = v8 + 3;
  if (v8 >= 0)
    v9 = *(_QWORD *)(v7 + 56);
  v315 = 0;
  v316 = v9 >> 2;
  v313 = 0;
  v314 = 0;
  if (v8 < 1)
  {
    v21 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    for (i = 0; i < v8; i = (int)v316 + (int)i)
    {
      if (v10 >= v315)
      {
        v12 = v313;
        v13 = v10 - v313;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v15 = (char *)v315 - (char *)v313;
        if (((char *)v315 - (char *)v313) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v315, v16);
          v12 = v313;
          v10 = v314;
        }
        else
        {
          v17 = 0;
        }
        v18 = (uint64_t *)&v17[8 * v13];
        *v18 = i;
        v19 = v18 + 1;
        while (v10 != v12)
        {
          v20 = *--v10;
          *--v18 = v20;
        }
        v313 = v18;
        v314 = v19;
        v315 = (uint64_t *)&v17[8 * v16];
        if (v12)
          operator delete(v12);
        v10 = v19;
      }
      else
      {
        *v10++ = i;
      }
      v314 = v10;
    }
    v21 = v313;
  }
  if ((char *)v10 - (char *)v21 != 32)
    ZinAssertImpl("Split cout offset vector size must be same as split");
  v22 = 0;
  v311 = 0uLL;
  v312[0] = 0;
  do
  {
    v290.__r_.__value_.__s.__data_[0] = 0;
    std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,unsigned long &,ZinPartialTransformDimension,void>(&v316, &v313[v22], (char *)&v290, &v304);
    v23 = v311.i64[1];
    if (v311.i64[1] >= v312[0])
    {
      v24 = (v311.i64[1] - v311.i64[0]) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v26 = v312[0] - v311.i64[0];
      if ((v312[0] - v311.i64[0]) >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)v312;
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)v312, v27);
      v30 = &v28[16 * v24];
      *(_OWORD *)v30 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
      *(_OWORD *)&v304.__r_.__value_.__l.__data_ = 0uLL;
      v31 = (_QWORD *)v311.i64[1];
      v32 = (_QWORD *)v311.i64[0];
      if (v311.i64[1] == v311.i64[0])
      {
        v35 = vdupq_n_s64(v311.u64[1]);
        v33 = &v28[16 * v24];
      }
      else
      {
        v33 = &v28[16 * v24];
        do
        {
          v34 = *((_OWORD *)v31 - 1);
          v31 -= 2;
          *((_OWORD *)v33 - 1) = v34;
          v33 -= 16;
          *v31 = 0;
          v31[1] = 0;
        }
        while (v31 != v32);
        v35 = v311;
      }
      v36 = v30 + 16;
      v311.i64[0] = (uint64_t)v33;
      v311.i64[1] = (uint64_t)(v30 + 16);
      *(int64x2_t *)&__v.__begin_ = v35;
      v37 = (std::string *)v312[0];
      v312[0] = &v28[16 * v29];
      __v.__end_cap_.__value_ = v37;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v35.i64[0];
      std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer((uint64_t)&__v);
      size = (std::__shared_weak_count *)v304.__r_.__value_.__l.__size_;
      v311.i64[1] = (uint64_t)v36;
      if (v304.__r_.__value_.__l.__size_)
      {
        v39 = (unint64_t *)(v304.__r_.__value_.__l.__size_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      *(_OWORD *)v311.i64[1] = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
      v311.i64[1] = v23 + 16;
    }
    ++v22;
  }
  while (v22 != 4);
  if (v311.i64[1] - v311.i64[0] != 64)
    ZinAssertImpl("Split transforms vector size must be same as split");
  v41 = 0;
  memset(&v310, 0, sizeof(v310));
  do
  {
    v42 = *((_QWORD *)a1 + 24);
    if (*(char *)(v42 + 47) >= 0)
      v43 = *(unsigned __int8 *)(v42 + 47);
    else
      v43 = *(_QWORD *)(v42 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v283, v43 + 7);
    if ((SBYTE7(v284) & 0x80u) == 0)
      v44 = &v283;
    else
      v44 = (__int128 *)v283;
    if (v43)
    {
      if (*(char *)(v42 + 47) >= 0)
        v45 = (const void *)(v42 + 24);
      else
        v45 = *(const void **)(v42 + 24);
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, "_split_");
    std::to_string(&v293, v41);
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v293;
    else
      v46 = (std::string *)v293.__r_.__value_.__r.__words[0];
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
    else
      v47 = v293.__r_.__value_.__l.__size_;
    v48 = std::string::append((std::string *)&v283, (const std::string::value_type *)v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v290.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v290, "_", 1uLL);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v304.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v309, "c2s_comp");
    v52 = std::string::append(&v309, "_xfm", 4uLL);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v55 = __p.__r_.__value_.__l.__size_;
    v56 = std::string::append(&v304, (const std::string::value_type *)p_p, v55);
    v57 = (char *)v56->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v320 = v56->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v320 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
    v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    end = v310.__end_;
    if (v310.__end_ >= v310.__end_cap_.__value_)
    {
      v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v310.__end_ - (char *)v310.__begin_) >> 3);
      v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v310.__end_cap_.__value_ - (char *)v310.__begin_) >> 3) > v62)
        v62 = 0x5555555555555556 * (((char *)v310.__end_cap_.__value_ - (char *)v310.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v310.__end_cap_.__value_ - (char *)v310.__begin_) >> 3) >= 0x555555555555555)
        v63 = 0xAAAAAAAAAAAAAAALL;
      else
        v63 = v62;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v310.__end_cap_;
      if (v63)
        v64 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v310.__end_cap_, v63);
      else
        v64 = 0;
      v65 = v64 + v61;
      __v.__first_ = v64;
      __v.__begin_ = v65;
      __v.__end_cap_.__value_ = &v64[v63];
      v65->__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      v65->__r_.__value_.__l.__size_ = v320;
      *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v320 + 7);
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v58;
      *(_QWORD *)&v320 = 0;
      *(_QWORD *)((char *)&v320 + 7) = 0;
      __v.__end_ = v65 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v310, &__v);
      v60 = v310.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v310.__end_->__r_.__value_.__l.__data_ = v57;
      end->__r_.__value_.__l.__size_ = v320;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v320 + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v58;
      *(_QWORD *)&v320 = 0;
      *(_QWORD *)((char *)&v320 + 7) = 0;
      v60 = end + 1;
    }
    v310.__end_ = v60;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v290.__r_.__value_.__l.__data_);
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    if (SBYTE7(v284) < 0)
      operator delete((void *)v283);
    ++v41;
  }
  while (v41 != 4);
  if ((std::vector<std::string>::pointer)((char *)v310.__end_ - (char *)v310.__begin_) != (std::vector<std::string>::pointer)96)
    ZinAssertImpl("Split name vector size must be same as split");
  memset(&v309, 0, sizeof(v309));
  if (*((_QWORD *)a1 + 25))
  {
    for (j = 0; j != 4; ++j)
    {
      v67 = *((_QWORD *)a1 + 25);
      if (*(char *)(v67 + 47) >= 0)
        v68 = *(unsigned __int8 *)(v67 + 47);
      else
        v68 = *(_QWORD *)(v67 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v283, v68 + 7);
      if ((SBYTE7(v284) & 0x80u) == 0)
        v69 = &v283;
      else
        v69 = (__int128 *)v283;
      if (v68)
      {
        if (*(char *)(v67 + 47) >= 0)
          v70 = (const void *)(v67 + 24);
        else
          v70 = *(const void **)(v67 + 24);
        memmove(v69, v70, v68);
      }
      strcpy((char *)v69 + v68, "_split_");
      std::to_string(&v293, j);
      if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v293;
      else
        v71 = (std::string *)v293.__r_.__value_.__r.__words[0];
      if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
      else
        v72 = v293.__r_.__value_.__l.__size_;
      v73 = std::string::append((std::string *)&v283, (const std::string::value_type *)v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v290.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v290, "_", 1uLL);
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v304.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v77 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v320, "c2s_comp");
      v78 = std::string::append(v77, "_xfm", 4uLL);
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &__p;
      else
        v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v81 = __p.__r_.__value_.__l.__size_;
      v82 = std::string::append(&v304, (const std::string::value_type *)v80, v81);
      v83 = v82->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v318 = v82->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v318 + 7) = *(std::string::size_type *)((char *)&v82->__r_.__value_.__r.__words[1] + 7);
      v84 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v85 = v309.__r_.__value_.__l.__size_;
      if (v309.__r_.__value_.__l.__size_ >= v309.__r_.__value_.__r.__words[2])
      {
        v87 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v309.__r_.__value_.__l.__size_ - v309.__r_.__value_.__r.__words[0]) >> 3);
        v88 = v87 + 1;
        if (v87 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(v309.__r_.__value_.__r.__words[2] - v309.__r_.__value_.__r.__words[0]) >> 3) > v88)
          v88 = 0x5555555555555556
              * ((uint64_t)(v309.__r_.__value_.__r.__words[2] - v309.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v309.__r_.__value_.__r.__words[2] - v309.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v89 = 0xAAAAAAAAAAAAAAALL;
        else
          v89 = v88;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v309.__r_.__value_.__r.__words[2];
        if (v89)
          v90 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v309.__r_.__value_.__r.__words[2], v89);
        else
          v90 = 0;
        v91 = v90 + v87;
        __v.__first_ = v90;
        __v.__begin_ = v91;
        __v.__end_cap_.__value_ = &v90[v89];
        v91->__r_.__value_.__r.__words[0] = v83;
        v91->__r_.__value_.__l.__size_ = v318;
        *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v318 + 7);
        *((_BYTE *)&v91->__r_.__value_.__s + 23) = v84;
        *(_QWORD *)&v318 = 0;
        *(_QWORD *)((char *)&v318 + 7) = 0;
        __v.__end_ = v91 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v309, &__v);
        v86 = v309.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        *(_QWORD *)v309.__r_.__value_.__l.__size_ = v83;
        *(_QWORD *)(v85 + 8) = v318;
        *(_QWORD *)(v85 + 15) = *(_QWORD *)((char *)&v318 + 7);
        *(_BYTE *)(v85 + 23) = v84;
        *(_QWORD *)&v318 = 0;
        *(_QWORD *)((char *)&v318 + 7) = 0;
        v86 = v85 + 24;
      }
      v309.__r_.__value_.__l.__size_ = v86;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v321[0]) < 0)
        operator delete((void *)v320);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
      if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v290.__r_.__value_.__l.__data_);
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      if (SBYTE7(v284) < 0)
        operator delete((void *)v283);
    }
    if (v309.__r_.__value_.__l.__size_ - v309.__r_.__value_.__r.__words[0] != 96)
      ZinAssertImpl("Split name vector size must be same as split");
  }
  v92 = (int)v5[3];
  if ((_DWORD)v92 != v5[4])
    ZinAssertImpl("We only support 4x4x1");
  v320 = 0uLL;
  v321[0] = 0;
  v93 = v316 / v92;
  if (v316 / v92 >= 1)
  {
    v94 = 0;
    v95 = 0;
    do
    {
      if ((int)v92 < 1)
      {
        v98 = v94;
      }
      else
      {
        v96 = 0;
        do
        {
          v97 = v95 + v93 * v96;
          if ((unint64_t)v94 >= v321[0])
          {
            v99 = (_QWORD *)v320;
            v100 = (uint64_t)((uint64_t)v94 - v320) >> 3;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v102 = v321[0] - v320;
            if ((uint64_t)(v321[0] - v320) >> 2 > v101)
              v101 = v102 >> 2;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
              v103 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v103 = v101;
            if (v103)
            {
              v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v321, v103);
              v94 = (_QWORD *)*((_QWORD *)&v320 + 1);
              v99 = (_QWORD *)v320;
            }
            else
            {
              v104 = 0;
            }
            v105 = &v104[8 * v100];
            *(_QWORD *)v105 = v97;
            v98 = v105 + 8;
            while (v94 != v99)
            {
              v106 = *--v94;
              *((_QWORD *)v105 - 1) = v106;
              v105 -= 8;
            }
            *(_QWORD *)&v320 = v105;
            *((_QWORD *)&v320 + 1) = v98;
            v321[0] = &v104[8 * v103];
            if (v99)
              operator delete(v99);
          }
          else
          {
            *v94 = v97;
            v98 = v94 + 1;
          }
          *((_QWORD *)&v320 + 1) = v98;
          ++v96;
          v94 = v98;
        }
        while (v96 != v92);
      }
      ++v95;
      v94 = v98;
    }
    while (v95 != v93);
  }
  v275 = (ZinIrOpLayer *)*((_QWORD *)a1 + 24);
  v107 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v275 + 32))(v275, 0, 0);
  v108 = 0;
  v273 = *((_QWORD *)a1 + 24);
  v318 = 0uLL;
  v319 = 0;
  v109 = v107 + 48;
  do
  {
    v110 = *(_QWORD *)(v273 + 136);
    v111 = *(_OWORD *)(v311.i64[0] + 16 * v108);
    v308 = v111;
    if (*((_QWORD *)&v111 + 1))
    {
      v112 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    v114 = &v310.__begin_[v108];
    if ((v114->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(v114->__r_.__value_.__r.__words[2]);
    else
      v115 = v114->__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__v, v115 + 7);
    if (SHIBYTE(__v.__end_) >= 0)
      p_v = &__v;
    else
      p_v = __v.__first_;
    if (v115)
    {
      if ((v114->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = v114;
      else
        v117 = (std::string *)v114->__r_.__value_.__r.__words[0];
      memmove(p_v, v117, v115);
    }
    strcpy((char *)p_v + v115, "_kernel");
    KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache((ZinIrContext *)v277);
    ZinIrKernel::Partial(v110, (uint64_t *)&v308, (uint64_t)&__v, KernelSparsityCache, (uint64_t *)&__p);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v119 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
    if (*((_QWORD *)&v308 + 1))
    {
      v120 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = __p.__r_.__value_.__r.__words[0];
    if (*(char *)(__p.__r_.__value_.__r.__words[0] + 23) >= 0)
      v123 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 23);
    else
      v123 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&__v, v123 + 13);
    if (SHIBYTE(__v.__end_) >= 0)
      first = &__v;
    else
      first = __v.__first_;
    if (v123)
    {
      if (*(char *)(v122 + 23) >= 0)
        v125 = (const void *)v122;
      else
        v125 = *(const void **)v122;
      memmove(first, v125, v123);
    }
    strcpy((char *)first + v123, "_post_shuffle");
    ZinIrKernel::ShuffleChannels(v122, (__int128 *)&__v, (uint64_t)&v320, (uint64_t *)&v300);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v126 = (const ZinIrOpLayerOpCode *)*((_QWORD *)v275 + 8);
    v127 = (ZinIrOpLayerOpCode *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v127, v126);
    *(_QWORD *)v127 = &unk_24C01FA18;
    v294 = v127;
    v128 = *(_OWORD *)(v109 + 16);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)v109;
    *(_OWORD *)&__v.__end_ = v128;
    __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(v109 + 32);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)v316;
    v129 = v107;
    v130 = *(_DWORD *)(v107 + 88);
    v131 = &v310.__begin_[v108];
    if ((v131->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = HIBYTE(v131->__r_.__value_.__r.__words[2]);
    else
      v132 = v131->__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v290, v132 + 7);
    if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = &v290;
    else
      v133 = (std::string *)v290.__r_.__value_.__r.__words[0];
    if (v132)
    {
      if ((v131->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = v131;
      else
        v134 = (std::string *)v131->__r_.__value_.__r.__words[0];
      memmove(v133, v134, v132);
    }
    strcpy((char *)v133 + v132, "_tensor");
    v307 = 0;
    *(_OWORD *)&v293.__r_.__value_.__l.__data_ = 0uLL;
    LODWORD(v304.__r_.__value_.__l.__data_) = 0;
    v305 = 0;
    *(_OWORD *)&v304.__r_.__value_.__r.__words[1] = 0uLL;
    v306 = 0;
    ZinIrTensor::CreateTensor((uint64_t)v277, v130, (__int128 *)&__v, (__int128 *)&v290, &v307, (uint64_t *)&v293, (unsigned int *)&v304, (uint64_t *)&v283);
    v135 = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
    v107 = v129;
    if (v293.__r_.__value_.__l.__size_)
    {
      v136 = (unint64_t *)(v293.__r_.__value_.__l.__size_ + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v138 = v307;
    v307 = 0;
    if (v138)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v307, v138);
    if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v290.__r_.__value_.__l.__data_);
    if (ZinIrTensor::SetInterleave((uint64_t *)v283, 4uLL, 1, 1))
      ZinAssertImpl("Setting interleave must succeed");
    v139 = operator new();
    v140 = (ZinIrOpLayer *)v139;
    v303 = v283;
    if (*((_QWORD *)&v283 + 1))
    {
      v141 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    ZinConvLayer::ZinConvLayer(v139, &v294, &v303, &v310.__begin_[v108], &v300);
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    if (*((_QWORD *)&v303 + 1))
    {
      v144 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(v275);
    ZinIrOpLayer::SetGroupId((uint64_t)v140, *GroupId);
    v147 = operator new(8uLL);
    v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
    *v147 = v275;
    v290.__r_.__value_.__l.__size_ = (std::string::size_type)(v147 + 1);
    v290.__r_.__value_.__r.__words[2] = (std::string::size_type)(v147 + 1);
    Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v304, (uint64_t **)&v290);
    ZinIrOpLayerGraph::AddNode(a2, v140, (ZinIrOpLayer ***)&v304);
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v304.__r_.__value_.__l.__size_)
    {
      v304.__r_.__value_.__r.__words[2] = v304.__r_.__value_.__l.__size_;
      operator delete((void *)v304.__r_.__value_.__l.__size_);
    }
    v148 = *((_QWORD *)&v318 + 1);
    if (*((_QWORD *)&v318 + 1) >= (unint64_t)v319)
    {
      v150 = (uint64_t)(*((_QWORD *)&v318 + 1) - v318) >> 3;
      if ((unint64_t)(v150 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v151 = (uint64_t)&v319[-v318] >> 2;
      if (v151 <= v150 + 1)
        v151 = v150 + 1;
      if ((unint64_t)&v319[-v318] >= 0x7FFFFFFFFFFFFFF8)
        v152 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v152 = v151;
      if (v152)
        v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v319, v152);
      else
        v153 = 0;
      v154 = (ZinIrOpLayer **)&v153[8 * v150];
      *v154 = v140;
      v149 = v154 + 1;
      v155 = (char *)*((_QWORD *)&v318 + 1);
      v156 = (char *)v318;
      if (*((_QWORD *)&v318 + 1) != (_QWORD)v318)
      {
        do
        {
          v157 = (ZinIrOpLayer *)*((_QWORD *)v155 - 1);
          v155 -= 8;
          *--v154 = v157;
        }
        while (v155 != v156);
        v155 = (char *)v318;
      }
      *(_QWORD *)&v318 = v154;
      *((_QWORD *)&v318 + 1) = v149;
      v319 = &v153[8 * v152];
      if (v155)
        operator delete(v155);
    }
    else
    {
      **((_QWORD **)&v318 + 1) = v140;
      v149 = (_QWORD *)(v148 + 8);
    }
    *((_QWORD *)&v318 + 1) = v149;
    if (v290.__r_.__value_.__r.__words[0])
    {
      v290.__r_.__value_.__l.__size_ = v290.__r_.__value_.__r.__words[0];
      operator delete(v290.__r_.__value_.__l.__data_);
    }
    v158 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
    if (*((_QWORD *)&v283 + 1))
    {
      v159 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    v161 = v294;
    v294 = 0;
    if (v161)
      (*(void (**)(ZinIrKernel *))(*(_QWORD *)v161 + 8))(v161);
    v162 = v300;
    v300 = 0;
    if (v162)
    {
      ZinIrKernel::~ZinIrKernel(v162);
      MEMORY[0x20BD002F8]();
    }
    v163 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v163)
    {
      ZinIrKernel::~ZinIrKernel(v163);
      MEMORY[0x20BD002F8]();
    }
    ++v108;
  }
  while (v108 != 4);
  v164 = (uint64_t *)*((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12) - (_QWORD)v164 != 8)
    ZinAssertImpl("ZinChannelToSpaceLargeFactorCompositeLayer input must be unique");
  v165 = 0;
  v166 = *v164;
  do
  {
    ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v166, *(_QWORD *)(v318 + v165), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v165 += 8;
  }
  while (v165 != 32);
  v300 = 0;
  v301 = 0;
  v302 = 0;
  v167 = (ZinIrOpLayer *)*((_QWORD *)a1 + 25);
  if (v167)
  {
    v168 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v167 + 32))(*((_QWORD *)a1 + 25), 0, 0);
    v169 = 0;
    v274 = *((_QWORD *)a1 + 25);
    v271 = v168;
    v170 = v168 + 48;
    do
    {
      v171 = *(_QWORD *)(v274 + 136);
      v172 = *(_OWORD *)(v311.i64[0] + 16 * v169);
      v299 = v172;
      if (*((_QWORD *)&v172 + 1))
      {
        v173 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
        do
          v174 = __ldxr(v173);
        while (__stxr(v174 + 1, v173));
      }
      v175 = v309.__r_.__value_.__r.__words[0] + 24 * v169;
      if (*(char *)(v175 + 23) >= 0)
        v176 = *(unsigned __int8 *)(v175 + 23);
      else
        v176 = *(_QWORD *)(v175 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&__v, v176 + 7);
      if (SHIBYTE(__v.__end_) >= 0)
        v177 = &__v;
      else
        v177 = __v.__first_;
      if (v176)
      {
        if (*(char *)(v175 + 23) >= 0)
          v178 = (const void *)v175;
        else
          v178 = *(const void **)v175;
        memmove(v177, v178, v176);
      }
      strcpy((char *)v177 + v176, "_kernel");
      v179 = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache((ZinIrContext *)v277);
      ZinIrKernel::Partial(v171, (uint64_t *)&v299, (uint64_t)&__v, v179, (uint64_t *)&__p);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v180 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
      if (*((_QWORD *)&v299 + 1))
      {
        v181 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v183 = __p.__r_.__value_.__r.__words[0];
      if (*(char *)(__p.__r_.__value_.__r.__words[0] + 23) >= 0)
        v184 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 23);
      else
        v184 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&__v, v184 + 13);
      if (SHIBYTE(__v.__end_) >= 0)
        v185 = &__v;
      else
        v185 = __v.__first_;
      if (v184)
      {
        if (*(char *)(v183 + 23) >= 0)
          v186 = (const void *)v183;
        else
          v186 = *(const void **)v183;
        memmove(v185, v186, v184);
      }
      strcpy((char *)v185 + v184, "_post_shuffle");
      ZinIrKernel::ShuffleChannels(v183, (__int128 *)&__v, (uint64_t)&v320, (uint64_t *)&v294);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v187 = (const ZinIrOpLayerOpCode *)*((_QWORD *)v167 + 8);
      v188 = (ZinIrOpLayerOpCode *)operator new();
      ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v188, v187);
      *(_QWORD *)v188 = &unk_24C01E1B0;
      *(_QWORD *)&v288 = v188;
      v189 = *(_OWORD *)(v170 + 16);
      *(_OWORD *)&__v.__first_ = *(_OWORD *)v170;
      *(_OWORD *)&__v.__end_ = v189;
      __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(v170 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)v316;
      v190 = *(_DWORD *)(v271 + 88);
      v191 = v309.__r_.__value_.__r.__words[0] + 24 * v169;
      if (*(char *)(v191 + 23) >= 0)
        v192 = *(unsigned __int8 *)(v191 + 23);
      else
        v192 = *(_QWORD *)(v191 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v290, v192 + 7);
      if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v193 = &v290;
      else
        v193 = (std::string *)v290.__r_.__value_.__r.__words[0];
      if (v192)
      {
        if (*(char *)(v191 + 23) >= 0)
          v194 = (const void *)v191;
        else
          v194 = *(const void **)v191;
        memmove(v193, v194, v192);
      }
      strcpy((char *)v193 + v192, "_tensor");
      v298 = 0;
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = 0uLL;
      LODWORD(v304.__r_.__value_.__l.__data_) = 0;
      v305 = 0;
      *(_OWORD *)&v304.__r_.__value_.__r.__words[1] = 0uLL;
      v306 = 0;
      ZinIrTensor::CreateTensor((uint64_t)v277, v190, (__int128 *)&__v, (__int128 *)&v290, &v298, (uint64_t *)&v293, (unsigned int *)&v304, (uint64_t *)&v283);
      v195 = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
      if (v293.__r_.__value_.__l.__size_)
      {
        v196 = (unint64_t *)(v293.__r_.__value_.__l.__size_ + 8);
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v198 = v298;
      v298 = 0;
      if (v198)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v298, v198);
      if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v290.__r_.__value_.__l.__data_);
      if (ZinIrTensor::SetInterleave((uint64_t *)v283, 4uLL, 1, 1))
        ZinAssertImpl("Setting interleave must succeed");
      v199 = operator new();
      v200 = (ZinIrOpLayer *)v199;
      v297 = v283;
      if (*((_QWORD *)&v283 + 1))
      {
        v201 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
        do
          v202 = __ldxr(v201);
        while (__stxr(v202 + 1, v201));
      }
      ZinGOCLayer::ZinGOCLayer(v199, &v288, &v297, v309.__r_.__value_.__r.__words[0] + 24 * v169, &v294);
      v203 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
      if (*((_QWORD *)&v297 + 1))
      {
        v204 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      v206 = (uint64_t *)ZinIrOpLayer::GetGroupId(v167);
      ZinIrOpLayer::SetGroupId((uint64_t)v200, *v206);
      v207 = operator new(8uLL);
      v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
      *v207 = v167;
      v290.__r_.__value_.__l.__size_ = (std::string::size_type)(v207 + 1);
      v290.__r_.__value_.__r.__words[2] = (std::string::size_type)(v207 + 1);
      Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v304, (uint64_t **)&v290);
      ZinIrOpLayerGraph::AddNode(a2, v200, (ZinIrOpLayer ***)&v304);
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v304.__r_.__value_.__l.__size_)
      {
        v304.__r_.__value_.__r.__words[2] = v304.__r_.__value_.__l.__size_;
        operator delete((void *)v304.__r_.__value_.__l.__size_);
      }
      v208 = v301;
      if (v301 >= v302)
      {
        v210 = (v301 - v300) >> 3;
        if ((unint64_t)(v210 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v211 = (v302 - v300) >> 2;
        if (v211 <= v210 + 1)
          v211 = v210 + 1;
        if ((unint64_t)(v302 - v300) >= 0x7FFFFFFFFFFFFFF8)
          v212 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v212 = v211;
        if (v212)
          v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v302, v212);
        else
          v213 = 0;
        v214 = (ZinIrKernel *)&v213[8 * v210];
        *(_QWORD *)v214 = v200;
        v209 = (ZinIrKernel *)((char *)v214 + 8);
        v216 = v300;
        v215 = v301;
        if (v301 != v300)
        {
          do
          {
            v217 = *((_QWORD *)v215 - 1);
            v215 = (ZinIrKernel *)((char *)v215 - 8);
            *((_QWORD *)v214 - 1) = v217;
            v214 = (ZinIrKernel *)((char *)v214 - 8);
          }
          while (v215 != v216);
          v215 = v300;
        }
        v300 = v214;
        v301 = v209;
        v302 = (ZinIrKernel *)&v213[8 * v212];
        if (v215)
          operator delete(v215);
      }
      else
      {
        *(_QWORD *)v301 = v200;
        v209 = (ZinIrKernel *)((char *)v208 + 8);
      }
      v301 = v209;
      if (v290.__r_.__value_.__r.__words[0])
      {
        v290.__r_.__value_.__l.__size_ = v290.__r_.__value_.__r.__words[0];
        operator delete(v290.__r_.__value_.__l.__data_);
      }
      v218 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
      if (*((_QWORD *)&v283 + 1))
      {
        v219 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
          std::__shared_weak_count::__release_weak(v218);
        }
      }
      v221 = v288;
      *(_QWORD *)&v288 = 0;
      if (v221)
        (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
      v222 = v294;
      v294 = 0;
      if (v222)
      {
        ZinIrKernel::~ZinIrKernel(v222);
        MEMORY[0x20BD002F8]();
      }
      v223 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v223)
      {
        ZinIrKernel::~ZinIrKernel(v223);
        MEMORY[0x20BD002F8]();
      }
      ++v169;
    }
    while (v169 != 4);
    if (*((_QWORD *)&v318 + 1) - (_QWORD)v318 != 32 || v301 - v300 != 32)
      ZinAssertImpl("Number of split layers must be equal");
    for (k = 0; k != 32; k += 8)
      ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)(v318 + k), *(_QWORD *)((char *)v300 + k), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v225 = *((_QWORD *)a1 + 25);
  }
  else
  {
    v225 = 0;
  }
  if (v225)
    v226 = &v300;
  else
    v226 = (ZinIrKernel **)&v318;
  v294 = 0;
  v295 = 0;
  v296 = 0;
  v227 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v318 + 32))(*(_QWORD *)v318, 0, 0);
  v228 = 0;
  v229 = *(_OWORD *)(v227 + 64);
  *(_OWORD *)&__v.__first_ = *(_OWORD *)(v227 + 48);
  *(_OWORD *)&__v.__end_ = v229;
  __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(v227 + 80);
  __v.__end_ = 0;
  v272 = vdupq_n_s64(1uLL);
  do
  {
    v230 = v295;
    if (v295 >= v296)
    {
      v232 = 0xCCCCCCCCCCCCCCCDLL * ((v295 - v294) >> 4);
      v233 = v232 + 1;
      if (v232 + 1 > 0x333333333333333)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((v296 - v294) >> 4) > v233)
        v233 = 0x999999999999999ALL * ((v296 - v294) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((v296 - v294) >> 4) >= 0x199999999999999)
        v234 = 0x333333333333333;
      else
        v234 = v233;
      if (v234)
        v235 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v296, v234);
      else
        v235 = 0;
      v236 = &v235[80 * v232];
      *(_QWORD *)v236 = 0;
      *((_QWORD *)v236 + 1) = 0;
      *((_QWORD *)v236 + 3) = 0;
      *((_QWORD *)v236 + 4) = 0;
      *((_QWORD *)v236 + 2) = v228;
      *(int64x2_t *)(v236 + 40) = vdupq_n_s64(1uLL);
      *(_OWORD *)(v236 + 56) = xmmword_207A7D620;
      *((_QWORD *)v236 + 9) = 1;
      v238 = v294;
      v237 = v295;
      v239 = (ZinIrKernel *)v236;
      if (v295 != v294)
      {
        do
        {
          *((_OWORD *)v239 - 5) = *((_OWORD *)v237 - 5);
          v240 = *((_OWORD *)v237 - 4);
          v241 = *((_OWORD *)v237 - 3);
          v242 = *((_OWORD *)v237 - 1);
          *((_OWORD *)v239 - 2) = *((_OWORD *)v237 - 2);
          *((_OWORD *)v239 - 1) = v242;
          *((_OWORD *)v239 - 4) = v240;
          *((_OWORD *)v239 - 3) = v241;
          v239 = (ZinIrKernel *)((char *)v239 - 80);
          v237 = (ZinIrKernel *)((char *)v237 - 80);
        }
        while (v237 != v238);
        v237 = v238;
      }
      v231 = (ZinIrKernel *)(v236 + 80);
      v294 = v239;
      v295 = (ZinIrKernel *)(v236 + 80);
      v296 = (ZinIrKernel *)&v235[80 * v234];
      if (v237)
        operator delete(v237);
    }
    else
    {
      *(_QWORD *)v295 = 0;
      *((_QWORD *)v230 + 1) = 0;
      *((_QWORD *)v230 + 3) = 0;
      *((_QWORD *)v230 + 4) = 0;
      *((_QWORD *)v230 + 2) = v228;
      *(int64x2_t *)((char *)v230 + 40) = v272;
      *(_OWORD *)((char *)v230 + 56) = xmmword_207A7D620;
      v231 = (ZinIrKernel *)((char *)v230 + 80);
      *((_QWORD *)v230 + 9) = 1;
    }
    v295 = v231;
    v243 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v318 + 32))(*(_QWORD *)v318, 0, 0);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__end_ + *(_QWORD *)(v243 + 64));
    ++v228;
  }
  while (v228 != 4);
  DimensionOrderHint::DimensionOrderHint(&v293, 2);
  v244 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v275 + 32))(v275, 0, 0);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&__v, *(_DWORD *)(v244 + 88), 2, (uint64_t)&v293, *(_QWORD *)(v276 + 528), 4, 1, (int64x2_t *)&v304);
  v245 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v245, 2, 4, 1, &v293, &v304);
  v292 = (_QWORD *)v245;
  v246 = *((_QWORD *)a1 + 26);
  if (*(char *)(v246 + 47) >= 0)
    v247 = *(unsigned __int8 *)(v246 + 47);
  else
    v247 = *(_QWORD *)(v246 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v247 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = &__p;
  else
    v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v247)
  {
    if (*(char *)(v246 + 47) >= 0)
      v249 = (const void *)(v246 + 24);
    else
      v249 = *(const void **)(v246 + 24);
    memmove(v248, v249, v247);
  }
  *(_WORD *)((char *)&v248->__r_.__value_.__l.__data_ + v247) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v287, "c2s_comp");
  v250 = std::string::append(&v287, "_xfm", 4uLL);
  v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
  v289 = v250->__r_.__value_.__r.__words[2];
  v288 = v251;
  v250->__r_.__value_.__l.__size_ = 0;
  v250->__r_.__value_.__r.__words[2] = 0;
  v250->__r_.__value_.__r.__words[0] = 0;
  if (v289 >= 0)
    v252 = (const std::string::value_type *)&v288;
  else
    v252 = (const std::string::value_type *)v288;
  if (v289 >= 0)
    v253 = HIBYTE(v289);
  else
    v253 = *((_QWORD *)&v288 + 1);
  v254 = std::string::append(&__p, v252, v253);
  v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
  *(_QWORD *)&v284 = *((_QWORD *)&v254->__r_.__value_.__l + 2);
  v283 = v255;
  v254->__r_.__value_.__l.__size_ = 0;
  v254->__r_.__value_.__r.__words[2] = 0;
  v254->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v290, &v283);
  if (SBYTE7(v284) < 0)
    operator delete((void *)v283);
  if (SHIBYTE(v289) < 0)
    operator delete((void *)v288);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v287.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v256 = v292;
  v292 = 0;
  v286 = v256;
  ZinBuilder::CreateConcat((uint64_t)v277, (uint64_t)&v290, (__int128 *)&__v, (_QWORD **)v226, (uint64_t)&v294, 6, 1, &v286, (void **)&v288, 0);
  v257 = v286;
  v286 = 0;
  if (v257)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v286, v257);
  v258 = *((_QWORD *)a1 + 26);
  v259 = operator new(8uLL);
  v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v259;
  *v259 = v258;
  v287.__r_.__value_.__l.__size_ = (std::string::size_type)(v259 + 1);
  v287.__r_.__value_.__r.__words[2] = (std::string::size_type)(v259 + 1);
  Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v283, (uint64_t **)&v287);
  ZinBuilder::AddConcatToGraph(a2, (uint64_t *)v226, &v288, (ZinIrOpLayer ***)&v283);
  *(_QWORD *)&v283 = &unk_24C02BB18;
  if (*((_QWORD *)&v283 + 1))
  {
    *(_QWORD *)&v284 = *((_QWORD *)&v283 + 1);
    operator delete(*((void **)&v283 + 1));
  }
  v260 = *(_QWORD *)(*((_QWORD *)&v288 + 1) - 8);
  if (!v260)
    ZinAssertImpl("C2S decomposition must be successful");
  v261 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v260 + 32))(*(_QWORD *)(*((_QWORD *)&v288 + 1) - 8), 0, 0);
  v262 = *(_OWORD *)(v261 + 64);
  v283 = *(_OWORD *)(v261 + 48);
  v284 = v262;
  v263 = *(_QWORD *)(v261 + 80);
  *((uint64_t *)&v283 + 1) /= 4;
  *((_QWORD *)&v284 + 1) = 4 * *((_QWORD *)&v262 + 1);
  v285 = v263;
  if (!ZinIrTensor::HasInterleaveOtherThanOne((ZinIrTensor *)v261))
    ZinAssertImpl("Concat tensor must be interleaved. Otherwise reshape is noop.");
  v264 = *(_DWORD *)(v261 + 88);
  v265 = operator new(0x14uLL);
  v280 = v265 + 5;
  v281 = (char *)(v265 + 5);
  v265[4] = 4;
  *(_OWORD *)v265 = xmmword_207AAF528;
  v279 = v265;
  DimensionOrderHint::DimensionOrderHint(&__p, &v279);
  v266 = (ZinIrOpLayer *)ZinBuilder::CreateReshape((uint64_t)v277, (uint64_t)&v290, v261 + 48, v264, &v283, (const DimensionOrderHint *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&__p, (uint64_t **)&v287);
  ZinIrOpLayerGraph::AddNode(a2, v266, (ZinIrOpLayer ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v260, (uint64_t)v266, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v267 = (uint64_t *)*((_QWORD *)a1 + 14);
  v268 = (uint64_t *)*((_QWORD *)a1 + 15);
  while (v267 != v268)
    ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v266, *v267++, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a1, 0);
  if (v287.__r_.__value_.__r.__words[0])
  {
    v287.__r_.__value_.__l.__size_ = v287.__r_.__value_.__r.__words[0];
    operator delete(v287.__r_.__value_.__l.__data_);
  }
  if ((_QWORD)v288)
  {
    *((_QWORD *)&v288 + 1) = v288;
    operator delete((void *)v288);
  }
  v290.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
  if (v291 < 0)
    operator delete((void *)v290.__r_.__value_.__l.__size_);
  v269 = v292;
  v292 = 0;
  if (v269)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v292, v269);
  if (v293.__r_.__value_.__r.__words[0])
  {
    v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
    operator delete(v293.__r_.__value_.__l.__data_);
  }
  if (v294)
  {
    v295 = v294;
    operator delete(v294);
  }
  if (v300)
  {
    v301 = v300;
    operator delete(v300);
  }
  if ((_QWORD)v318)
  {
    *((_QWORD *)&v318 + 1) = v318;
    operator delete((void *)v318);
  }
  if ((_QWORD)v320)
  {
    *((_QWORD *)&v320 + 1) = v320;
    operator delete((void *)v320);
  }
  __v.__first_ = &v309;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v310;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v311;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  return 0;
}

void sub_206F7A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  void *v69;
  void *v70;
  void *v71;

  if (__p)
    operator delete(__p);
  v69 = *(void **)(v67 - 152);
  if (v69)
  {
    *(_QWORD *)(v67 - 144) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(v67 - 128);
  if (v70)
  {
    *(_QWORD *)(v67 - 120) = v70;
    operator delete(v70);
  }
  a67 = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a67 = &STACK[0x228];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a67 = (void *)(v67 - 256);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  v71 = *(void **)(v67 - 224);
  if (v71)
  {
    *(_QWORD *)(v67 - 216) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MatchConv(uint64_t a1)
{
  _QWORD *v2;
  uint64_t SingleMatch;
  ZinIrKernel **v4;
  ZinIrKernel *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  void *__p[2];
  char v12;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8))
    goto LABEL_14;
  v2 = *(_QWORD **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "c2s");
  SingleMatch = ZinPattern::State::GetSingleMatch(v2, (unsigned __int8 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v4 = *(ZinIrKernel ***)(a1 + 8);
  v5 = v4[17];
  if (!ZinIrKernel::IsMutable(v5)
    && (v6 = *(_DWORD *)((*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*v4 + 4))(v4, 0, 0) + 88),
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0),
        ZinQuantizationUtils::TensorFormatCompatible(v6, *(_DWORD *)(v7 + 88)))
    && *((_DWORD *)v5 + 85) == 1
    && *((_DWORD *)v5 + 86) == 1
    && *((_DWORD *)v5 + 87) == 1
    && *((_DWORD *)v5 + 82) == 1
    && *((_DWORD *)v5 + 83) == 1
    && *((_DWORD *)v5 + 84) == 1
    && *((_QWORD *)v5 + 50) < 2uLL
    && !ZinIrKernel::HasVectorPalettizedWeight(v4[17]))
  {
    LOBYTE(v8) = 1;
    v9 = 1;
  }
  else
  {
LABEL_14:
    v8 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v9 = HIBYTE(v8);
  }
  return v8 | (v9 << 8);
}

void sub_206F7AE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MatchGOC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 v4;
  unsigned __int8 v5;
  int v6;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  void *__p;
  void *v22;
  char v23;
  void *v24[2];
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;

  v2 = (_QWORD *)a1[1];
  if (*(_DWORD *)(v2[8] + 8) != 2
    || (*(unsigned int (**)(_QWORD *))(*v2 + 120))(v2)
    || (v3 = a1[1], ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v3 + 136))))
  {
    v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v5 = v4;
    v6 = HIBYTE(v4);
  }
  else
  {
    v8 = (_QWORD *)a1[3];
    std::string::basic_string[abi:ne180100]<0>(v24, "goc");
    ZinPattern::State::GetMatch(v8, (unsigned __int8 *)v24, &__p);
    ZinPatternUtils::ToGOC((uint64_t **)&__p, &v26);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (v25 < 0)
      operator delete(v24[0]);
    v9 = v27;
    if ((unint64_t)v27 >= v28)
    {
      v11 = v27 - v26;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(v28 - (_QWORD)v26) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (v28 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v3;
      v10 = v15 + 1;
      v18 = v26;
      v17 = v27;
      if (v27 != v26)
      {
        do
        {
          v19 = *--v17;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = v26;
      }
      v26 = v15;
      v27 = v10;
      v28 = (unint64_t)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v27 = v3;
      v10 = v9 + 1;
    }
    v27 = v10;
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, v3 + 24);
    if (ZinMergeGOCSequence(*a1, (uint64_t)&__p, (uint64_t)&v26))
    {
      v5 = 1;
      v6 = 1;
    }
    else
    {
      v20 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      v5 = v20;
      v6 = HIBYTE(v20);
    }
    __p = off_24C01FBB0;
    if (v23 < 0)
      operator delete(v22);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  return v5 | (v6 << 8);
}

void sub_206F7B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(_QWORD *)(v23 - 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MatchQuant(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 103) | 0x100u;
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MatchDequant(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 104) | 0x100u;
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MatchChannelToSpace(uint64_t a1)
{
  _DWORD *v1;
  __int16 v2;
  int v3;

  v1 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 64);
  if (v1[2] == 41)
  {
    LOBYTE(v2) = v1[3] == 4 && v1[4] == 4 && v1[5] == 1;
    v3 = 1;
  }
  else
  {
    v2 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v3 = HIBYTE(v2);
  }
  return v2 | (v3 << 8);
}

uint64_t ZinChannelToSpaceLargeFactorCompositeLayer::MakeComposite(const ZinIrOpLayerGraph *a1, uint64_t a2, ZinIrOpLayer *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  std::string *v10;
  uint64_t v11;
  ZinConvLayer *SingleMatch;
  uint64_t v13;
  uint64_t v14;
  const ZinDeQuantLayer *v15;
  uint64_t v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  ZinChannelToSpaceLargeFactorCompositeLayer *v27;
  _QWORD *v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  ZinIrOpLayer **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::string *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  void **v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  ZinIrTensor *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  ZinIrTensor::MirInfo *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  std::string *v66;
  const void *v67;
  std::string *v68;
  __int128 v69;
  void **v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  ZinIrTensor *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  ZinIrTensor::MirInfo *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];
  int v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  ZinIrTensor::MirInfo *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void *v109[2];
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  ZinIrTensor::MirInfo *v115;
  std::string v116;
  void *v117[2];
  int64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  _QWORD v121[4];
  int v122;
  std::string v123;
  void *v124[2];
  int64_t v125;
  std::string v126;
  void *v127;
  char *v128[2];
  _BYTE v129[24];
  _BYTE *v130;
  void *__p[2];
  char v132;
  _QWORD v133[4];
  uint64_t v134;
  _QWORD v135[3];
  _QWORD v136[4];
  uint64_t v137;
  _QWORD v138[3];
  _QWORD v139[4];
  uint64_t v140;
  _QWORD v141[3];
  _QWORD v142[4];
  uint64_t v143;
  _QWORD v144[3];
  _QWORD v145[4];
  uint64_t v146;
  _QWORD v147[23];
  _QWORD v148[5];

  v148[3] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v133[0] = &unk_24C0537D8;
  v133[1] = ZinChannelToSpaceLargeFactorCompositeLayer::MatchConv;
  v133[3] = v133;
  LODWORD(v126.__r_.__value_.__l.__data_) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v134, (int *)&v126, 1);
  std::string::basic_string[abi:ne180100]<0>(v135, "goc");
  v136[0] = &unk_24C0537D8;
  v136[1] = ZinChannelToSpaceLargeFactorCompositeLayer::MatchGOC;
  v136[3] = v136;
  LODWORD(v124[0]) = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v137, (int *)v124, 1);
  std::string::basic_string[abi:ne180100]<0>(v138, "quant");
  v139[0] = &unk_24C0537D8;
  v139[1] = ZinChannelToSpaceLargeFactorCompositeLayer::MatchQuant;
  v139[3] = v139;
  LODWORD(v123.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v140, (int *)&v123, 1);
  std::string::basic_string[abi:ne180100]<0>(v141, "dequant");
  v142[0] = &unk_24C0537D8;
  v142[1] = ZinChannelToSpaceLargeFactorCompositeLayer::MatchDequant;
  v142[3] = v142;
  LODWORD(v117[0]) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v143, (int *)v117, 1);
  std::string::basic_string[abi:ne180100]<0>(v144, "c2s");
  v145[0] = &unk_24C0537D8;
  v145[1] = ZinChannelToSpaceLargeFactorCompositeLayer::MatchChannelToSpace;
  v145[3] = v145;
  LODWORD(v116.__r_.__value_.__l.__data_) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v146, (int *)&v116, 1);
  v109[0] = 0;
  v109[1] = 0;
  v110 = 0;
  v127 = v109;
  LOBYTE(v128[0]) = 0;
  v109[0] = operator new(0x1E0uLL);
  v109[1] = v109[0];
  v110 = (char *)v109[0] + 480;
  v109[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v110, (uint64_t)__p, (uint64_t)v147, (uint64_t)v109[0]);
  v130 = 0;
  ZinLinearPattern::ZinLinearPattern(v147, v109, a2, 1, v129, 0);
  v6 = v130;
  if (v130 == v129)
  {
    v7 = 4;
    v6 = v129;
    goto LABEL_5;
  }
  if (v130)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v127 = v109;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  v8 = 60;
  do
  {
    v9 = &__p[v8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v128[v8 + 1]);
    v10 = (std::string *)v128[v8];
    if (&v126.__r_.__value_.__r.__words[v8 + 1] == (std::string::size_type *)v10)
    {
      v10 = (std::string *)(v9 - 9);
      v11 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_12;
      v11 = 5;
    }
    (*(void (**)(void))(v10->__r_.__value_.__r.__words[0] + 8 * v11))();
LABEL_12:
    if (SHIBYTE(v126.__r_.__value_.__r.__words[v8]) < 0)
      operator delete(*(v9 - 12));
    v8 -= 12;
  }
  while (v8 * 8);
  if ((ZinLinearPattern::Match((ZinLinearPattern *)v147, a1, a3) & 1) == 0)
    goto LABEL_63;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  SingleMatch = (ZinConvLayer *)ZinPattern::GetSingleMatch((uint64_t)v147, (unsigned __int8 *)__p);
  if (v132 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "c2s");
  v13 = ZinPattern::GetSingleMatch((uint64_t)v147, (unsigned __int8 *)__p);
  if (v132 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "quant");
  v14 = ZinPattern::GetSingleMatch((uint64_t)v147, (unsigned __int8 *)__p);
  if (v132 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant");
  v16 = ZinPattern::GetSingleMatch((uint64_t)v147, (unsigned __int8 *)__p);
  if (v132 < 0)
    operator delete(__p[0]);
  if (!(v14 | v16) || ZinQuantizationUtils::IsInverse((ZinQuantizationUtils *)v14, (const ZinQuantLayer *)v16, v15))
  {
    if (!ZinLinearPattern::GetLastMatch((ZinLinearPattern *)v147))
      ZinAssertImpl("ZinChannelToSpaceLargeFactorCompositeLayer has at least 1 layer.");
    std::string::basic_string[abi:ne180100]<0>(__p, "goc");
    ZinPattern::GetMatch((uint64_t)v147, (unsigned __int8 *)__p, &v127);
    if (v132 < 0)
      operator delete(__p[0]);
    if (*(char *)(v13 + 47) >= 0)
      v17 = *(unsigned __int8 *)(v13 + 47);
    else
      v17 = *(_QWORD *)(v13 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v126, v17 + 1);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v126;
    else
      v18 = (std::string *)v126.__r_.__value_.__r.__words[0];
    if (v17)
    {
      if (*(char *)(v13 + 47) >= 0)
        v19 = (const void *)(v13 + 24);
      else
        v19 = *(const void **)(v13 + 24);
      memmove(v18, v19, v17);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v123, "c2s_comp");
    v20 = std::string::append(&v123, "_xfm", 4uLL);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v125 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)v124 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v125 >= 0)
      v22 = v124;
    else
      v22 = (void **)v124[0];
    if (v125 >= 0)
      v23 = HIBYTE(v125);
    else
      v23 = (std::string::size_type)v124[1];
    v24 = std::string::append(&v126, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v110 = (char *)v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)v109 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(__p, v109);
    if (SHIBYTE(v110) < 0)
      operator delete(v109[0]);
    if (SHIBYTE(v125) < 0)
      operator delete(v124[0]);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    ZinPatternUtils::ToGOC((uint64_t **)&v127, (uint64_t **)v109);
    v26 = ZinMergeGOCSequence((uint64_t)a1, (uint64_t)__p, (uint64_t)v109);
    if (v109[0])
    {
      v109[1] = v109[0];
      operator delete(v109[0]);
    }
    v27 = (ZinChannelToSpaceLargeFactorCompositeLayer *)operator new();
    ZinChannelToSpaceLargeFactorCompositeLayer::ZinChannelToSpaceLargeFactorCompositeLayer(v27, SingleMatch, (ZinGOCLayer *)v26, (size_t *)v13);
    v28 = operator new(0x10uLL);
    v126.__r_.__value_.__l.__size_ = (std::string::size_type)(v28 + 2);
    v126.__r_.__value_.__r.__words[2] = (std::string::size_type)(v28 + 2);
    *v28 = SingleMatch;
    v28[1] = v13;
    v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v126, (uint64_t)(v28 + 2), (char *)v127, v128[0], (v128[0] - (char *)v127) >> 3);
    Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(v109, (uint64_t **)&v126);
    v29 = ZinIrOpLayerGraph::AddNode((uint64_t **)a1, v27, (ZinIrOpLayer ***)v109);
    v109[0] = &unk_24C02BB18;
    if (v109[1])
    {
      v110 = (char *)v109[1];
      operator delete(v109[1]);
    }
    v30 = ZinIrOpLayerGraph::MoveIncomingEdges(a1, SingleMatch, v27);
    memset(v121, 0, sizeof(v121));
    v122 = 1065353216;
    v31 = ZinIrOpLayerGraph::MoveOutgoingEdges(a1, (uint64_t **)v13, v27, v121);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v121);
    v32 = v29 & v30 & v31 & ZinIrOpLayerGraph::RemoveNode(a1, SingleMatch, 0);
    v33 = (ZinIrOpLayer **)v127;
    v34 = v128[0];
    while (v33 != (ZinIrOpLayer **)v34)
    {
      if (*v33)
        v32 &= ZinIrOpLayerGraph::RemoveNode(a1, *v33, 0);
      ++v33;
    }
    if (v14 && v16)
    {
      v36 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0);
      v97 = v13;
      v98 = *(_QWORD *)(v14 + 16);
      v37 = *(_DWORD *)(v36 + 88);
      v38 = (*(uint64_t (**)(ZinChannelToSpaceLargeFactorCompositeLayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
      v39 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0);
      v40 = v39;
      if (*(char *)(v39 + 47) >= 0)
        v41 = *(unsigned __int8 *)(v39 + 47);
      else
        v41 = *(_QWORD *)(v39 + 32);
      v42 = &v123;
      std::string::basic_string[abi:ne180100]((uint64_t)&v123, v41 + 1);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v42 = (std::string *)v123.__r_.__value_.__r.__words[0];
      if (v41)
      {
        if (*(char *)(v40 + 47) >= 0)
          v43 = (const void *)(v40 + 24);
        else
          v43 = *(const void **)(v40 + 24);
        memmove(v42, v43, v41);
      }
      *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v116, "comp_ctos");
      v44 = std::string::append(&v116, "_xfm", 4uLL);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v118 = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)v117 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (v118 >= 0)
        v46 = v117;
      else
        v46 = (void **)v117[0];
      if (v118 >= 0)
        v47 = HIBYTE(v118);
      else
        v47 = (std::string::size_type)v117[1];
      v48 = std::string::append(&v123, (const std::string::value_type *)v46, v47);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v125 = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)v124 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v50, &v115);
      v113 = 0;
      v114 = 0;
      LODWORD(v109[0]) = 0;
      v110 = 0;
      v111 = 0;
      v109[1] = 0;
      v112 = 0;
      ZinIrTensor::CreateTensor(v98, v37, (__int128 *)(v38 + 48), (__int128 *)v124, &v115, &v113, (unsigned int *)v109, &v119);
      v51 = v114;
      if (v114)
      {
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v115;
      v115 = 0;
      if (v54)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v115, v54);
      if (SHIBYTE(v125) < 0)
        operator delete(v124[0]);
      if (SHIBYTE(v118) < 0)
        operator delete(v117[0]);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v107 = v119;
      v108 = v120;
      if (v120)
      {
        v55 = (unint64_t *)&v120->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 24))(v14, &v107);
      v57 = v108;
      if (v108)
      {
        v58 = (unint64_t *)&v108->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
      v99 = *(_QWORD *)(v16 + 16);
      v61 = *(_DWORD *)(v60 + 88);
      v62 = (*(uint64_t (**)(ZinChannelToSpaceLargeFactorCompositeLayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
      v63 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
      v64 = v63;
      if (*(char *)(v63 + 47) >= 0)
        v65 = *(unsigned __int8 *)(v63 + 47);
      else
        v65 = *(_QWORD *)(v63 + 32);
      v66 = &v123;
      std::string::basic_string[abi:ne180100]((uint64_t)&v123, v65 + 1);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v66 = (std::string *)v123.__r_.__value_.__r.__words[0];
      if (v65)
      {
        if (*(char *)(v64 + 47) >= 0)
          v67 = (const void *)(v64 + 24);
        else
          v67 = *(const void **)(v64 + 24);
        memmove(v66, v67, v65);
      }
      *(_WORD *)((char *)&v66->__r_.__value_.__l.__data_ + v65) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v116, "comp_ctos");
      v68 = std::string::append(&v116, "_xfm", 4uLL);
      v13 = v97;
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v118 = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)v117 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      if (v118 >= 0)
        v70 = v117;
      else
        v70 = (void **)v117[0];
      if (v118 >= 0)
        v71 = HIBYTE(v118);
      else
        v71 = (std::string::size_type)v117[1];
      v72 = std::string::append(&v123, (const std::string::value_type *)v70, v71);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v125 = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)v124 = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v74, &v106);
      v104 = 0;
      v105 = 0;
      LODWORD(v109[0]) = 0;
      v110 = 0;
      v111 = 0;
      v109[1] = 0;
      v112 = 0;
      ZinIrTensor::CreateTensor(v99, v61, (__int128 *)(v62 + 48), (__int128 *)v124, &v106, &v104, (unsigned int *)v109, &v113);
      v75 = v105;
      if (v105)
      {
        v76 = (unint64_t *)&v105->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v106;
      v106 = 0;
      if (v78)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v106, v78);
      if (SHIBYTE(v125) < 0)
        operator delete(v124[0]);
      if (SHIBYTE(v118) < 0)
        operator delete(v117[0]);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v102 = v113;
      v103 = v114;
      if (v114)
      {
        v79 = (unint64_t *)&v114->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 24))(v16, &v102);
      v81 = v103;
      if (v103)
      {
        v82 = (unint64_t *)&v103->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      memset(v100, 0, sizeof(v100));
      v101 = 1065353216;
      v84 = ZinIrOpLayerGraph::MoveOutgoingEdges(a1, (uint64_t **)v27, (ZinIrOpLayer *)v16, v100);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v100);
      v85 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v27, v14, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v86 = (*(uint64_t (**)(ZinChannelToSpaceLargeFactorCompositeLayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
      v87 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0);
      if (!ZinTensorPosition::operator==((_QWORD *)(v86 + 48), (_QWORD *)(v87 + 48))
        || (v88 = (*(uint64_t (**)(ZinChannelToSpaceLargeFactorCompositeLayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0), v89 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0), !ZinTensorPosition::operator==((_QWORD *)(v88 + 48), (_QWORD *)(v89 + 48))))
      {
        ZinAssertImpl("Output dimensions must match");
      }
      v90 = v114;
      if (v114)
      {
        v91 = (unint64_t *)&v114->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v32 &= v84 & v85;
      v93 = v120;
      if (v120)
      {
        v94 = (unint64_t *)&v120->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
    }
    if ((v32 & ZinIrOpLayerGraph::RemoveNode(a1, (ZinIrOpLayer *)v13, 0) & 1) == 0)
      ZinAssertImpl("Failed in making ZinChannelToSpaceLargeFactorCompositeLayer.");
    if (v126.__r_.__value_.__r.__words[0])
    {
      v126.__r_.__value_.__l.__size_ = v126.__r_.__value_.__r.__words[0];
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    __p[0] = off_24C01FBB0;
    if (SHIBYTE(v133[0]) < 0)
      operator delete(__p[1]);
    if (v127)
    {
      v128[0] = (char *)v127;
      operator delete(v127);
    }
    v35 = 1;
  }
  else
  {
LABEL_63:
    v35 = 0;
  }
  v147[0] = &off_24C01BCC8;
  __p[0] = v148;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  ZinPattern::~ZinPattern((ZinPattern *)v147);
  return v35;
}

void sub_206F7BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  a63 = (uint64_t)off_24C01FBB0;
  if (a69 < 0)
    operator delete(a64);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void ZinChannelToSpaceLargeFactorCompositeLayer::Clone()
{
  ZinAssertImpl("Must not clone ZinChannelToSpaceLargeFactorCompositeLayer.");
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,unsigned long &,ZinPartialTransformDimension,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformPartial>::__shared_ptr_emplace[abi:ne180100]<unsigned long const&,unsigned long &,ZinPartialTransformDimension,std::allocator<ZinIrTransformPartial>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_206F7C33C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinPESecureFlushLayer::ZinPESecureFlushLayer(uint64_t a1, uint64_t *a2, __int128 *a3, int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v10 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v10, 82);
  v11 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v11;
  v23 = v10;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  LOBYTE(v19) = 0;
  BYTE8(v19) = 0;
  BYTE12(v19) = 0;
  v20 = 0;
  ZinPELayer::ZinPELayer(a1, &v23, &v21, 0, 0, a3, &v19);
  v14 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  v23 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_QWORD *)a1 = &off_24C0213C0;
  *(_DWORD *)(a1 + 392) = a4;
  *(_BYTE *)(a1 + 396) = a5;
  return a1;
}

void sub_206F7C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t ZinPESecureFlushLayer::Lower()
{
  return 3;
}

uint64_t ZinPESecureFlushLayer::Clone()
{
  return 0;
}

uint64_t ZinPESecureFlushLayer::GetLastEncapsulatedLayer(ZinPESecureFlushLayer *this)
{
  return 0;
}

void ZinPESecureFlushLayer::ExecutionOrderSort(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ZinPESecureFlushLayer::HasBinaryTaskType(ZinPESecureFlushLayer *this)
{
  return *((unsigned __int8 *)this + 396);
}

uint64_t ZinPESecureFlushLayer::SpatialSplitCopy(ZinPESecureFlushLayer *this, const TiledLayerTensorRegions *a2)
{
  return 0;
}

uint64_t ZinPESecureFlushLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F7C5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t ZinPESecureFlushLayer::GetProgrammedKernelSize@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = 1;
  return result;
}

uint64_t ZinPESecureFlushLayer::GetProgrammedInputStride(ZinPESecureFlushLayer *this)
{
  return 0x100000001;
}

void ZinPESecureFlushLayer::GetProgrammedPadding(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void ZinPESecureFlushLayer::GetProjectedCoreInputDims(ZinPESecureFlushLayer *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  void *__p[3];

  ZinIrOpLayer::GetInputTensorDimensions(this, __p);
  v3 = __p[0];
  v4 = *((_OWORD *)__p[0] + 1);
  *(_OWORD *)a2 = *(_OWORD *)__p[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v3[4];
  __p[1] = v3;
  operator delete(v3);
}

uint64_t ZinPESecureFlushLayer::IsQualifiedForInPlace()
{
  return 0;
}

void ZinPESecureFlushLayer::~ZinPESecureFlushLayer(ZinEngineLayerMirInfo **this)
{
  ZinANELayer::~ZinANELayer(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t EncryptedFile::EncryptedFile(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)a1 = -1;
  v3 = (std::string *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t EncryptedFile::LoadFile(EncryptedFile *this)
{
  const char *v2;
  int v3;
  unint64_t st_size;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::runtime_error *exception;
  void *v13;
  int *v14;
  __n128 v15;
  void *v16;
  int *v17;
  __n128 v18;
  void *v19;
  __n128 v20;
  void *v21;
  __n128 v22;
  void *v23;
  int *v24;
  __n128 v25;
  std::string v26;
  std::string v27;
  stat v28;

  if (*(_DWORD *)this != -1)
  {
    EncryptedFile::UnloadFile(this);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "File is already opened.");
    goto LABEL_35;
  }
  v2 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v2 = *(const char **)v2;
  v3 = open(v2, 0);
  *(_DWORD *)this = v3;
  if (v3 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "File cannot be opened.");
    goto LABEL_35;
  }
  v28.st_size = 0;
  if (fstat(v3, &v28) == -1)
  {
    EncryptedFile::UnloadFile(this);
    v13 = __cxa_allocate_exception(0x10uLL);
    v14 = __error();
    std::to_string(&v26, *v14);
    v15 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Cannot be fstat'd with error code: ", &v26, &v27);
    MEMORY[0x20BCFFD70](v13, &v27, v15);
    __cxa_throw(v13, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  st_size = v28.st_size;
  *((_QWORD *)this + 2) = v28.st_size;
  if (st_size <= 0x40)
  {
    EncryptedFile::UnloadFile(this);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Does not contain encrypted model header. Is the file encrypted?");
    goto LABEL_35;
  }
  if ((v28.st_mode & 0xF000) != 0x8000)
  {
    EncryptedFile::UnloadFile(this);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "File must be a regular file.");
    goto LABEL_35;
  }
  v5 = (unsigned __int8 *)mmap(0, st_size, 1, 2, *(_DWORD *)this, 0);
  *((_QWORD *)this + 1) = v5;
  if (v5 == (unsigned __int8 *)-1)
  {
    EncryptedFile::UnloadFile(this);
    v16 = __cxa_allocate_exception(0x10uLL);
    v17 = __error();
    std::to_string(&v26, *v17);
    v18 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Cannot be loaded, with error code: ", &v26, &v27);
    MEMORY[0x20BCFFD70](v16, &v27, v18);
    __cxa_throw(v16, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (*(_DWORD *)v5 != 1162759500)
  {
    EncryptedFile::UnloadFile(this);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unrecognized magic word in the encrypted model header. Is the file encrypted?");
    goto LABEL_35;
  }
  if (!v5[4] || v5[4] >= 3u)
  {
    EncryptedFile::UnloadFile(this);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unrecognized encryption version");
    goto LABEL_35;
  }
  if (v5[4] == 1)
    v6 = 64;
  else
    v6 = v5[7];
  v7 = v6;
  v8 = *((_QWORD *)this + 2);
  if (v8 <= v6)
  {
    EncryptedFile::UnloadFile(this);
    v19 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v26, v7);
    v20 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("File does not contain any payload, size_of_header = ", &v26, &v27);
    MEMORY[0x20BCFFD70](v19, &v27, v20);
    __cxa_throw(v19, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v9 = *((_QWORD *)v5 + 1);
  if (v9 - 1 >= v8 - v6)
  {
    EncryptedFile::UnloadFile(this);
    v21 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v26, v9);
    v22 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Illegal value for original file size = ", &v26, &v27);
    MEMORY[0x20BCFFD70](v21, &v27, v22);
    __cxa_throw(v21, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (*((_QWORD *)v5 + 2))
  {
    v10 = *((_QWORD *)v5 + 2);
    if (v10 >> 52)
    {
      EncryptedFile::UnloadFile(this);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Illegal value for number of encrypted pages");
    }
    else
    {
      if (v10 << 12 <= v8)
      {
        if (mremap_encrypted())
        {
          EncryptedFile::UnloadFile(this);
          v23 = __cxa_allocate_exception(0x10uLL);
          v24 = __error();
          std::to_string(&v26, *v24);
          v25 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed to setup decryption path due to error: ", &v26, &v27);
          MEMORY[0x20BCFFD70](v23, &v27, v25);
          __cxa_throw(v23, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
        goto LABEL_22;
      }
      EncryptedFile::UnloadFile(this);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Illegal number of encrypted bytes");
    }
LABEL_35:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
LABEL_22:
  *((_QWORD *)this + 3) = &v5[v7];
  *((_QWORD *)this + 4) = v9;
  return close(*(_DWORD *)this);
}

void sub_206F7CB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

double EncryptedFile::UnloadFile(EncryptedFile *this)
{
  void *v2;
  _OWORD *v3;
  double result;

  v3 = (_OWORD *)((char *)this + 8);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
    munmap(v2, *((_QWORD *)this + 2));
  if (*(_DWORD *)this != -1)
    close(*(_DWORD *)this);
  *(_DWORD *)this = -1;
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  return result;
}

uint64_t ZinMirTensorTransform::FixAllocation(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unint64_t a6, char a7)
{
  int IsCompatibleWithAllocationHint;
  uint64_t v14;
  int v15;
  uint64_t CopyLayer;
  ZinIrTensor *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t Interleave;
  char v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  ZinIrTensor *v31;
  ZinIrTensor::MirInfo *v32;
  _BYTE v35[172];
  ZinIrTensor::MirInfo *v36;
  _QWORD *v37;
  _QWORD v38[2];

  IsCompatibleWithAllocationHint = ZinIrTensor::IsCompatibleWithAllocationHint((ZinIrTensor *)a1, a3);
  v14 = *(_QWORD *)(a1 + 96);
  if (IsCompatibleWithAllocationHint)
  {
    v15 = ZinIrTensor::SetAllocationHint((ZinIrTensor *)a1, a3, 1);
    CopyLayer = 0;
    v17 = (ZinIrTensor *)a1;
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 16);
    v19 = *(_DWORD *)(a1 + 88);
    v38[0] = 0;
    CopyLayer = ZinBuilder::CreateCopyLayer(v18, v14, a2, v19, v38);
    v20 = (_QWORD *)v38[0];
    v38[0] = 0;
    if (v20)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v38, v20);
    v17 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)CopyLayer + 32))(CopyLayer, 0, 0);
    v15 = ZinIrTensor::SetAllocationHint(v17, a3, 1);
  }
  v21 = a3 == 2 && !ZinIrTensor::IsValidInterleave(v17, a6, a7);
  Interleave = ZinIrTensor::GetInterleave(v17);
  v24 = HasInterleaveMismatch(Interleave, v23, a6, a7);
  if (v21 || v24)
  {
    v25 = *(_QWORD *)(v14 + 16);
    v26 = *(_DWORD *)(a1 + 88);
    v37 = 0;
    CopyLayer = ZinBuilder::CreateCopyLayer(v25, v14, a2, v26, &v37);
    v27 = v37;
    v37 = 0;
    if (v27)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v37, v27);
    v17 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)CopyLayer + 32))(CopyLayer, 0, 0);
  }
  v28 = ZinIrTensor::SetInterleave((uint64_t *)v17, a6, a7, 1);
  if (a5 || !CopyLayer)
  {
    *a4 = CopyLayer;
  }
  else
  {
    v29 = *(_QWORD *)(v14 + 16);
    v30 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)CopyLayer + 32))(CopyLayer, 0, 0)+ 88);
    v31 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)CopyLayer + 32))(CopyLayer, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v31, &v36);
    v35[0] = 0;
    v35[168] = 0;
    *a4 = ZinBuilder::CreateNEBypass(v29, a2, v14, v30, &v36, 0, (uint64_t)v35, 1.0);
    v32 = v36;
    v36 = 0;
    if (v32)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v36, v32);
  }
  if (v28 | v15)
    return 3;
  else
    return 0;
}

void sub_206F7CE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = *(_QWORD **)(v1 - 112);
  *(_QWORD *)(v1 - 112) = 0;
  if (v3)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v1 - 112, v3);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirTensorTransform::InsertCopyBetween(uint64_t **a1, ZinIrOpLayer *a2, ZinIrOpLayer *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  ZinIrOpLayer *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  const char *v17;
  _BYTE v18[172];
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  ZinIrOpLayer **v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  ZinIrOpLayer *v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)a2 + 2);
  v11 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 88);
  v26 = 0;
  v12 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v10, (uint64_t)a2, a4, v11, &v26);
  v13 = v26;
  v26 = 0;
  if (v13)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v26, v13);
  v28[0] = a2;
  v20 = v28;
  *(_QWORD *)&v21 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v23, &v20);
  if ((*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) & 0xFFFFFFFC) == 0x1C)
  {
    v27 = a3;
    v28[0] = &v27;
    v28[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v20, v28);
    if ((_QWORD)v24)
    {
      *((_QWORD *)&v24 + 1) = v24;
      operator delete((void *)v24);
    }
    v24 = v21;
    v25 = v22;
  }
  if (a5)
  {
    v14 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0)
                    + 88);
    v19 = 0;
    v18[0] = 0;
    v18[168] = 0;
    v12 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v10, a4, (uint64_t)a2, v14, &v19, 0, (uint64_t)v18, 1.0);
    v15 = v19;
    v19 = 0;
    if (v15)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v19, v15);
  }
  if ((ZinIrOpLayerGraph::InsertNodeBetween(a1, v12, a2, a3, &v23) & 1) == 0)
  {
    v17 = (char *)a2 + 24;
    if (*((char *)a2 + 47) < 0)
      v17 = *(const char **)v17;
    ZinAssertImpl("Dim order propagation fails in %s", v17);
  }
  v23 = (ZinIrOpLayer **)&unk_24C02BB18;
  if ((_QWORD)v24)
  {
    *((_QWORD *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  return v12;
}

void sub_206F7D0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  _QWORD *v35;
  void *v36;

  v35 = *(_QWORD **)v33;
  *(_QWORD *)v33 = 0;
  if (v35)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a33, v35);
  *(_QWORD *)(v33 + 40) = &unk_24C02BB18;
  v36 = *(void **)(v33 + 48);
  if (v36)
  {
    *(_QWORD *)(v33 + 56) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirTensorTransform::ReconcileInputTensorFormat(uint64_t **a1, ZinIrOpLayer *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  ZinIrOpLayer *v24;
  _BOOL4 IsANELayer;
  _QWORD *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t IndexOfMatchedIncomingLayer;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  ZinIrTensor::MirInfo *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  std::__shared_weak_count *v63;
  ZinIrOpLayer **v64;
  void *__p;
  void *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  ZinIrTensor::MirInfo *v71;
  void *v72[2];
  std::string::size_type v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _QWORD *v78;
  _BYTE v79[172];
  _QWORD *v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t *v83;
  std::string v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  v82 = 0;
  v83 = 0;
  std::vector<unsigned long>::reserve((void **)&v81, (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  v8 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) != v8)
  {
    v9 = 0;
    do
    {
      if (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8 * v9) + 32))(*(_QWORD *)(v8 + 8 * v9), 0, 0)+ 88) != a4)
      {
        v10 = v82;
        if (v82 >= v83)
        {
          v12 = v81;
          v13 = v82 - v81;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v15 = (char *)v83 - (char *)v81;
          if (((char *)v83 - (char *)v81) >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v83, v16);
            v12 = v81;
            v10 = v82;
          }
          else
          {
            v17 = 0;
          }
          v18 = (unint64_t *)&v17[8 * v13];
          *v18 = v9;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *--v10;
            *--v18 = v19;
          }
          v81 = v18;
          v82 = v11;
          v83 = (unint64_t *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v82 = v9;
          v11 = v10 + 1;
        }
        v82 = v11;
      }
      ++v9;
      v8 = *((_QWORD *)a2 + 11);
    }
    while (v9 < (*((_QWORD *)a2 + 12) - v8) >> 3);
  }
  v21 = v81;
  v20 = v82;
  if (v82 != v81)
  {
    while (1)
    {
      v22 = *v21;
      v23 = *((_QWORD *)a2 + 11);
      v24 = *(ZinIrOpLayer **)(v23 + 8 * *v21);
      if ((*(_DWORD *)(*((_QWORD *)v24 + 8) + 8) - 28) >= 3
        && *((_QWORD *)v24 + 15) - *((_QWORD *)v24 + 14) <= 8uLL)
      {
        IsANELayer = ZinIrOpLayer::IsANELayer(v24);
        v26 = *(_QWORD **)(v23 + 8 * v22);
        if (!IsANELayer || !v26[33])
        {
          v34 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v26 + 40))(v26, 0, 0);
          v36 = *v34;
          v35 = (std::__shared_weak_count *)v34[1];
          v76 = *v34;
          v77 = v35;
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v38 = __ldxr(p_shared_owners);
            while (__stxr(v38 + 1, p_shared_owners));
          }
          v39 = *(_QWORD *)(*(_QWORD *)(v23 + 8 * v22) + 16);
          (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(&v84, a3, 0);
          v40 = *(char *)(v36 + 47);
          if (v40 >= 0)
            v41 = (const std::string::value_type *)(v36 + 24);
          else
            v41 = *(const std::string::value_type **)(v36 + 24);
          if (v40 >= 0)
            v42 = *(unsigned __int8 *)(v36 + 47);
          else
            v42 = *(_QWORD *)(v36 + 32);
          v43 = std::string::insert(&v84, 0, v41, v42);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v73 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)v72 = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v36, &v71);
          v69 = 0;
          v70 = 0;
          LODWORD(v64) = 0;
          v66 = 0;
          v67 = 0;
          __p = 0;
          v68 = 0;
          ZinIrTensor::CreateTensor(v39, a4, (__int128 *)(v36 + 48), (__int128 *)v72, &v71, &v69, (unsigned int *)&v64, &v74);
          v45 = v70;
          if (v70)
          {
            v46 = (unint64_t *)&v70->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = v71;
          v71 = 0;
          if (v48)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v71, v48);
          if (SHIBYTE(v73) < 0)
            operator delete(v72[0]);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          v49 = *(_QWORD *)(v23 + 8 * v22);
          v62 = v74;
          v63 = v75;
          if (v75)
          {
            v50 = (unint64_t *)&v75->__shared_owners_;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 24))(v49, &v62);
          v52 = v63;
          if (v63)
          {
            v53 = (unint64_t *)&v63->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v55 = v75;
          if (v75)
          {
            v56 = (unint64_t *)&v75->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = v77;
          if (v77)
          {
            v59 = (unint64_t *)&v77->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          goto LABEL_36;
        }
      }
      v27 = ZinIrOpLayer::IsANELayer(a2);
      v28 = *(_QWORD *)(v23 + 8 * v22);
      v29 = *(_QWORD *)(v28 + 16);
      if (v27)
      {
        v80 = 0;
        v79[0] = 0;
        v79[168] = 0;
        v30 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v29, a3, v28, a4, &v80, 0, (uint64_t)v79, 1.0);
        v31 = v80;
        v80 = 0;
        if (v31)
        {
          v32 = &v80;
LABEL_32:
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v32, v31);
        }
      }
      else
      {
        v78 = 0;
        v30 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v29, v28, a3, a4, &v78);
        v31 = v78;
        v78 = 0;
        if (v31)
        {
          v32 = &v78;
          goto LABEL_32;
        }
      }
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v72[0] = &v84;
      v72[1] = (void *)1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v64, v72);
      ZinIrOpLayerGraph::AddNode(a1, v30, &v64);
      v64 = (ZinIrOpLayer **)&unk_24C02BB18;
      if (__p)
      {
        v66 = __p;
        operator delete(__p);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *(_QWORD *)(v23 + 8 * v22), (uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer((ZinIrOpLayerGraph *)a1, a2, *(const ZinIrOpLayer **)(v23 + 8 * v22));
      ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a1, *(ZinIrOpLayerGraph **)(v23 + 8 * v22), v30, (uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL, IndexOfMatchedIncomingLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
LABEL_36:
      if (++v21 == v20)
      {
        v20 = v81;
        break;
      }
    }
  }
  if (v20)
  {
    v82 = v20;
    operator delete(v20);
  }
  return 0;
}

void sub_206F7D6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  v36 = *(void **)(v34 - 144);
  if (v36)
  {
    *(_QWORD *)(v34 - 136) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirTensorTransform::ChannelVectorInsertPaddingInL2(uint64_t **this, ZinIrOpLayer **a2, unint64_t a3, uint64_t a4, uint64_t a5, ZinObjectNameFactory *a6)
{
  ZinIrOpLayer **v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int fixed;
  int v15;
  ZinIrOpLayer *v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ZinIrOpLayer *v37;
  ZinIrOpLayer *v38;
  _QWORD *v39;
  int v40;
  uint64_t Hal;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  ZinIrTensor *v46;
  uint64_t Interleave;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _BOOL4 v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v60;
  _QWORD v61[2];
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[4];
  __int128 v70;
  unint64_t v71;
  int64x2_t v72;
  ZinIrOpLayer *v73;
  ZinIrOpLayer **v74;
  ZinIrOpLayer **v75;
  void *v76;
  void *v77;
  int64x2_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  int64x2_t v86[2];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      goto LABEL_12;
    return 0;
  }
  v9 = a2;
  v11 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD, uint64_t, uint64_t, ZinObjectNameFactory *))*a2 + 4))(a2, 0, 0, a4, a5, a6);
  if (*(_QWORD *)(v11 + 72) != 1)
  {
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
LABEL_12:
      ZinMirTensorTransform::ChannelVectorInsertPaddingInL2(v29, v30, v31, v32, v33, v34, v35, v36);
    return 0;
  }
  v12 = (_QWORD *)v11;
  v73 = 0;
  v13 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v9 + 4))(v9, 0, 0);
  fixed = ZinMirTensorTransform::FixAllocation(v13, a5, 1, (uint64_t *)&v73, 1, 0, 0);
  v15 = fixed == 0;
  v16 = v73;
  if (v73)
  {
    v86[0].i64[0] = (uint64_t)v9;
    *(_QWORD *)&v70 = v86;
    *((_QWORD *)&v70 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v78, &v70);
    v17 = ZinIrOpLayerGraph::AddNode(this, v16, (ZinIrOpLayer ***)&v78);
    v78.i64[0] = (uint64_t)&unk_24C02BB18;
    if (v78.i64[1])
    {
      *(_QWORD *)&v79 = v78.i64[1];
      operator delete((void *)v78.i64[1]);
    }
    v15 = (fixed == 0) & v17 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v9, (uint64_t)v16, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v9 = (ZinIrOpLayer **)v16;
  }
  v18 = v12[10] * v12[6] * v12[7] * v12[8] * v12[9] / a3;
  *((_QWORD *)&v70 + 1) = a3;
  v71 = v18;
  *(_QWORD *)&v70 = 1;
  v72 = vdupq_n_s64(1uLL);
  DimensionOrderHint::DimensionOrderHint(v69, 1);
  v19 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v9 + 4))(v9, 0, 0);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v70, *(_DWORD *)(v19 + 88), 1, (uint64_t)v69, 16, 1, 1, v86);
  v20 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v20, 1, 0, 0, v69, v86);
  v68 = (_QWORD *)v20;
  v21 = (uint64_t)v9[2];
  (*((void (**)(int64x2_t *__return_ptr, ZinIrOpLayer **, _QWORD, _QWORD))*v9 + 10))(&v78, v9, 0, 0);
  v22 = operator new(0x78uLL);
  v65 = (uint64_t)(v22 + 30);
  v66 = (char *)(v22 + 30);
  v22[28] = v85;
  v23 = v84;
  v24 = v82;
  *((_OWORD *)v22 + 5) = v83;
  *((_OWORD *)v22 + 6) = v23;
  v25 = v79;
  *(int64x2_t *)v22 = v78;
  *((_OWORD *)v22 + 1) = v25;
  v26 = v81;
  *((_OWORD *)v22 + 2) = v80;
  *((_OWORD *)v22 + 3) = v26;
  *((_OWORD *)v22 + 4) = v24;
  v64 = v22;
  v27 = *(_QWORD *)((*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v9 + 4))(v9, 0, 0) + 104);
  if (v27)
    v28 = *(_DWORD *)(v27 + 96);
  else
    v28 = 0;
  v67 = v68;
  v68 = 0;
  v38 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v21, a5, (uint64_t)&v64, v28, &v70, (uint64_t)&v67);
  v39 = v67;
  v67 = 0;
  if (v39)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v67, v39);
  if (v64)
  {
    v65 = (uint64_t)v64;
    operator delete(v64);
  }
  v75 = v9;
  v64 = &v75;
  v65 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v78, &v64);
  v60 = ZinIrOpLayerGraph::AddNode(this, v38, (ZinIrOpLayer ***)&v78);
  v78.i64[0] = (uint64_t)&unk_24C02BB18;
  if (v78.i64[1])
  {
    *(_QWORD *)&v79 = v78.i64[1];
    operator delete((void *)v78.i64[1]);
  }
  v40 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v9, (uint64_t)v38, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v38 + 2) + 160));
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v43 = v15;
  v44 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0);
  v45 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0)
                  + 88);
  DimensionOrderHint::DimensionOrderHint(&v64, 1);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(v44 + 48), v45, 1, (uint64_t)&v64, *(_QWORD *)(v42 + 416), 1, 1, &v78);
  if (v64)
  {
    v65 = (uint64_t)v64;
    operator delete(v64);
  }
  v78.i64[0] = v78.i64[1] * a4;
  *(_QWORD *)&v79 = v70 * v78.i64[1] * a4;
  v46 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v46);
  v49 = v48;
  v50 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0);
  if (v49)
    v51 = Interleave;
  else
    v51 = 1;
  FindDimensionOrderFromStrides((const ZinTensorDimensions *)&v78, (const ZinTensorDimensions *)(v50 + 48), v51, 0, (uint64_t)&v64);
  v52 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v52, 1, 1, 1, &v64, &v78);
  v63 = (_QWORD *)v52;
  v53 = *((_QWORD *)v38 + 2);
  v54 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0)
                  + 88);
  v62 = v63;
  v63 = 0;
  v37 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v53, (uint64_t)v38, a5, v54, &v62);
  v55 = v62;
  v62 = 0;
  if (v55)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v62, v55);
  v74 = v9;
  v61[0] = &v74;
  v61[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v75, v61);
  v56 = ZinIrOpLayerGraph::AddNode(this, v37, &v75);
  v75 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if ((v43 & v60 & v40 & v56 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v38, (uint64_t)v37, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirTensorTransform::ChannelVectorInsertPaddingInL2();
    v37 = 0;
  }
  v57 = v63;
  v63 = 0;
  if (v57)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v63, v57);
  if (v64)
  {
    v65 = (uint64_t)v64;
    operator delete(v64);
  }
  v58 = v68;
  v68 = 0;
  if (v58)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v68, v58);
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  return v37;
}

void sub_206F7DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirTensorTransform::Split(uint64_t **a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void **a7@<X8>)
{
  uint64_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *v30;
  unint64_t v31;
  ZinIrOpLayer **v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  ZinIrOpLayer **v40;
  char *v41;
  char *v42;
  ZinIrOpLayer *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  int64x2_t v60;
  _QWORD v65[2];
  void *__p;
  void *v67;
  void *v68;
  _QWORD v69[5];
  int64x2_t v70;
  int64x2_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    v57 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
    switch(a4)
    {
      case 0:
        v10 = (uint64_t *)(v57 + 48);
        break;
      case 1:
        v10 = (uint64_t *)(v57 + 56);
        break;
      case 2:
        v10 = (uint64_t *)(v57 + 64);
        break;
      case 3:
        v10 = (uint64_t *)(v57 + 72);
        break;
      default:
        v10 = (uint64_t *)(v57 + 80);
        break;
    }
    if (*v10 <= a3)
    {
      v44 = (unint64_t)a7[2];
      v45 = a7[1];
      if ((unint64_t)v45 >= v44)
      {
        v47 = ((char *)v45 - (_BYTE *)*a7) >> 3;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v48 = v44 - (_QWORD)*a7;
        v49 = v48 >> 2;
        if (v48 >> 2 <= (unint64_t)(v47 + 1))
          v49 = v47 + 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a7 + 2), v50);
        else
          v51 = 0;
        v52 = &v51[8 * v47];
        v53 = &v51[8 * v50];
        *(_QWORD *)v52 = a2;
        v46 = v52 + 8;
        v55 = (char *)*a7;
        v54 = (char *)a7[1];
        if (v54 != *a7)
        {
          do
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v52 - 1) = v56;
            v52 -= 8;
          }
          while (v54 != v55);
          v54 = (char *)*a7;
        }
        *a7 = v52;
        a7[1] = v46;
        a7[2] = v53;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *v45 = a2;
        v46 = v45 + 1;
      }
      a7[1] = v46;
    }
    else if (*v10 >= 1)
    {
      v19 = 0;
      v20 = (__int128 *)(v57 + 48);
      v60 = vdupq_n_s64(1uLL);
      v59 = a1;
      v58 = *v10;
      do
      {
        v21 = *(_OWORD *)(v57 + 64);
        v73 = *v20;
        v74 = v21;
        v75 = *(_QWORD *)(v57 + 80);
        switch(a4)
        {
          case 0:
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = v19 + a3;
            if ((int64_t)(v19 + a3) >= *(_QWORD *)v20)
              v26 = *(_QWORD *)v20;
            *(_QWORD *)&v73 = v26 - v19;
            v27 = v19;
            goto LABEL_30;
          case 1:
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v27 = 0;
            v26 = v19 + a3;
            if ((int64_t)(v19 + a3) >= *(_QWORD *)(v57 + 56))
              v26 = *(_QWORD *)(v57 + 56);
            *((_QWORD *)&v73 + 1) = v26 - v19;
            v25 = v19;
            goto LABEL_30;
          case 2:
            v22 = 0;
            v23 = 0;
            v25 = 0;
            v27 = 0;
            v26 = v19 + a3;
            if ((int64_t)(v19 + a3) >= *(_QWORD *)(v57 + 64))
              v26 = *(_QWORD *)(v57 + 64);
            *(_QWORD *)&v74 = v26 - v19;
            v24 = v19;
            goto LABEL_30;
          case 3:
            v22 = 0;
            v24 = 0;
            v25 = 0;
            v27 = 0;
            v26 = v19 + a3;
            if ((int64_t)(v19 + a3) >= *(_QWORD *)(v57 + 72))
              v26 = *(_QWORD *)(v57 + 72);
            *((_QWORD *)&v74 + 1) = v26 - v19;
            v23 = v19;
            goto LABEL_30;
          case 4:
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v27 = 0;
            v26 = v19 + a3;
            if ((int64_t)(v19 + a3) >= *(_QWORD *)(v57 + 80))
              v26 = *(_QWORD *)(v57 + 80);
            v75 = v26 - v19;
            v22 = v19;
LABEL_30:
            v19 = v26;
            break;
          default:
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v27 = 0;
            v19 = 0;
            break;
        }
        v28 = a2[2];
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a5 + 16))(&__p, a5, 0);
        v29 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
        v69[0] = v27;
        v69[1] = v25;
        v69[2] = v24;
        v69[3] = v23;
        v69[4] = v22;
        v70 = v60;
        v71 = v60;
        v72 = 1;
        v30 = (ZinIrOpLayer *)ZinBuilder::CreateView(v28, (uint64_t)&__p, v29, &v73, (uint64_t)v69);
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
        v76[0] = a6;
        v65[0] = v76;
        v65[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, v65);
        ZinIrOpLayerGraph::AddNode(v59, v30, (ZinIrOpLayer ***)&__p);
        __p = &unk_24C02BB18;
        if (v67)
        {
          v68 = v67;
          operator delete(v67);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)v59, (uint64_t)a2, (uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v32 = (ZinIrOpLayer **)a7[1];
        v31 = (unint64_t)a7[2];
        if ((unint64_t)v32 >= v31)
        {
          v35 = ((char *)v32 - (_BYTE *)*a7) >> 3;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v36 = v31 - (_QWORD)*a7;
          v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a7 + 2), v38);
          else
            v39 = 0;
          v40 = (ZinIrOpLayer **)&v39[8 * v35];
          *v40 = v30;
          v33 = v40 + 1;
          v42 = (char *)*a7;
          v41 = (char *)a7[1];
          if (v41 == *a7)
          {
            v34 = v58;
          }
          else
          {
            v34 = v58;
            do
            {
              v43 = (ZinIrOpLayer *)*((_QWORD *)v41 - 1);
              v41 -= 8;
              *--v40 = v43;
            }
            while (v41 != v42);
            v41 = (char *)*a7;
          }
          *a7 = v40;
          a7[1] = v33;
          a7[2] = &v39[8 * v38];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v32 = v30;
          v33 = v32 + 1;
          v34 = v58;
        }
        a7[1] = v33;
      }
      while (v19 < v34);
    }
  }
  else
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinMirTensorTransform::Split(v11, v12, v13, v14, v15, v16, v17, v18);
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_206F7E4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3, ZinObjectNameFactory *a4)
{
  ZinIrOpLayerGraph *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  ZinIrOpLayer *v11;
  _QWORD *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  int v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int fixed;
  int v34;
  ZinIrOpLayer *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Hal;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  ZinIrOpLayer *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  ZinIrOpLayer *v73;
  _BOOL4 v74;
  _QWORD *v75;
  char v76;
  ZinIrOpLayer *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  ZinIrOpLayerGraph *v88;
  ZinIrOpLayer *v89;
  void *__p[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  int64x2_t v98[2];
  void *v99[6];

  v99[4] = *(void **)MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(v25, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  v5 = a2;
  v7 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD, ZinObjectNameFactory *))(*(_QWORD *)a2 + 32))(a2, 0, 0, a4);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v91 = 0;
  v77 = a3;
  if (!ZinIrOpLayer::IsNoOp(v5, (uint64_t *)__p))
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_17;
  }
  v8 = *(_DWORD *)(*((_QWORD *)v5 + 8) + 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v8 != 37)
  {
LABEL_17:
    v98[0].i64[0] = 0;
    fixed = ZinMirTensorTransform::FixAllocation(v7, (uint64_t)a3, 2, v98[0].i64, 1, 1uLL, 1);
    LOBYTE(v34) = fixed == 0;
    v35 = (ZinIrOpLayer *)v98[0].i64[0];
    if (v98[0].i64[0])
    {
      v99[0] = v5;
      *(_QWORD *)&v83 = v99;
      *((_QWORD *)&v83 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v83);
      v36 = ZinIrOpLayerGraph::AddNode(this, v35, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v91 = __p[1];
        operator delete(__p[1]);
      }
      v34 = (fixed == 0) & v36 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v5, (uint64_t)v35, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v5 = v35;
    }
    goto LABEL_21;
  }
  v9 = *((_QWORD *)v5 + 2);
  v10 = *(_DWORD *)(v7 + 88);
  v87 = 0;
  v11 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v9, (uint64_t)v5, (uint64_t)a3, v10, &v87);
  v12 = v87;
  v87 = 0;
  if (v12)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v87, v12);
  v98[0].i64[0] = (uint64_t)v5;
  *(_QWORD *)&v83 = v98;
  *((_QWORD *)&v83 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v83);
  v13 = ZinIrOpLayerGraph::AddNode(this, v11, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v91 = __p[1];
    operator delete(__p[1]);
  }
  v14 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v5, (uint64_t)v11, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  __p[0] = 0;
  v15 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
  v16 = ZinMirTensorTransform::FixAllocation(v15, (uint64_t)v77, 2, (uint64_t *)__p, 1, 1uLL, 1);
  if (__p[0])
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(v17, v18, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  LOBYTE(v34) = v13 & v14;
  if (v16)
    LOBYTE(v34) = 0;
LABEL_21:
  v76 = v34;
  v37 = *(_QWORD *)(v7 + 48);
  v38 = *(_QWORD *)(v7 + 56);
  v40 = *(_QWORD *)(v7 + 64);
  v39 = *(_QWORD *)(v7 + 72);
  v41 = *(_QWORD *)(v7 + 80);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(v7 + 16) + 160));
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v44 = v43;
  if (v39 > *(_QWORD *)(v43 + 1680))
  {
    v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v45)
      ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(v45, v46, v47, v48, v49, v50, v51, v52);
    return 0;
  }
  if (v39 == 1)
    return v5;
  v55 = 0;
  v56 = 1;
  while (*(_QWORD *)(v43 + 1656 + v55) < v39)
  {
    v55 += 8;
    if (v55 == 32)
      goto LABEL_33;
  }
  v56 = *(_QWORD *)(v43 + 1656 + v55);
LABEL_33:
  *(_QWORD *)&v83 = 1;
  *((_QWORD *)&v83 + 1) = v39;
  v84 = v38 * v37 * v40;
  v85 = 1;
  v86 = v41;
  DimensionOrderHint::DimensionOrderHint(v99, 2);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v83, *(_DWORD *)(v7 + 88), 2, (uint64_t)v99, *(_QWORD *)(v44 + 528), v56, 1, v98);
  v57 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v57, 2, v56, 1, v99, v98);
  v82 = (_QWORD *)v57;
  v58 = *((_QWORD *)v5 + 2);
  (*(void (**)(void **__return_ptr, ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v5 + 80))(__p, v5, 0, 0);
  v59 = operator new(0x78uLL);
  v80 = (uint64_t)(v59 + 30);
  v81 = (char *)(v59 + 30);
  v59[28] = v97;
  v60 = v96;
  v61 = v94;
  *((_OWORD *)v59 + 5) = v95;
  *((_OWORD *)v59 + 6) = v60;
  v62 = v91;
  *(_OWORD *)v59 = *(_OWORD *)__p;
  *((_OWORD *)v59 + 1) = v62;
  v63 = v93;
  *((_OWORD *)v59 + 2) = v92;
  *((_OWORD *)v59 + 3) = v63;
  *((_OWORD *)v59 + 4) = v61;
  v79 = v59;
  v64 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 104);
  if (v64)
    v65 = *(_DWORD *)(v64 + 96);
  else
    v65 = 0;
  v66 = v82;
  v82 = 0;
  v78 = v66;
  v53 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v58, (uint64_t)v77, (uint64_t)&v79, v65, &v83, (uint64_t)&v78);
  v67 = v78;
  v78 = 0;
  if (v67)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v78, v67);
  if (v79)
  {
    v80 = (uint64_t)v79;
    operator delete(v79);
  }
  v89 = v5;
  v79 = &v89;
  v80 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v79);
  v68 = ZinIrOpLayerGraph::AddNode(this, v53, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v91 = __p[1];
    operator delete(__p[1]);
  }
  v69 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v5, (uint64_t)v53, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v89 = 0;
  v70 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0, 0);
  v71 = ZinMirTensorTransform::FixAllocation(v70, (uint64_t)v77, 1, (uint64_t *)&v89, 1, 0, 0);
  v72 = v76 & v68 & v69;
  if (v71)
    v72 = 0;
  if ((v72 & 1) != 0)
  {
    v73 = v89;
    if (v89)
    {
      v88 = v5;
      v79 = &v88;
      v80 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v79);
      v74 = ZinIrOpLayerGraph::AddNode(this, v73, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v91 = __p[1];
        operator delete(__p[1]);
      }
      if ((v74 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v53, (uint64_t)v73, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0)) != 0)v53 = v73;
      else
        v53 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirTensorTransform::NonResidentLinearizeToChannelInL2();
    v53 = 0;
  }
  v75 = v82;
  v82 = 0;
  if (v75)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v82, v75);
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  return v53;
}

void sub_206F7EBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  void *v31;

  a25 = v27 + 16;
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = a16;
  a16 = 0;
  if (v30)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a16, v30);
  v31 = *(void **)(v28 - 128);
  if (v31)
  {
    *(_QWORD *)(v28 - 120) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3, ZinObjectNameFactory *a4, const ZinIrHalParameters *a5)
{
  ZinIrOpLayerGraph *v7;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  int64x2_t v16;
  __n128 v17;
  uint64_t v18;
  int fixed;
  _BOOL4 v20;
  ZinIrOpLayer *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ZinIrOpLayer *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  ZinIrOpLayer *Alias;
  _QWORD *v60;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  int v64;
  ZinIrOpLayer *v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  ZinIrOpLayer *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  void *v100[2];
  char *v101;
  std::string::size_type v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106[4];
  std::string v107;
  int64x2_t v108;
  ZinIrOpLayer *v109;
  _QWORD v110[3];
  char v111;
  ZinIrOpLayerGraph *v112;
  _QWORD v113[2];
  void *v114[4];
  int64x2_t __p;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  int64x2_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v7 = a2;
    v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v123, "fix_alloc_hint");
    v10 = std::string::append(v9, "_xfm", 4uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = *((char *)v7 + 47);
    if (v12 >= 0)
      v13 = (char *)v7 + 24;
    else
      v13 = (const std::string::value_type *)*((_QWORD *)v7 + 3);
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)v7 + 47);
    else
      v14 = *((_QWORD *)v7 + 4);
    v15 = std::string::insert(&v107, 0, v13, v14);
    v16 = *(int64x2_t *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v116 = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    __p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = ZinObjectNameFactory::ZinObjectNameFactory(v110, &__p);
    if (SBYTE7(v116) < 0)
      operator delete((void *)__p.i64[0]);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (SBYTE7(v124) < 0)
      operator delete((void *)v123.i64[0]);
    v109 = 0;
    v18 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD, __n128))(*(_QWORD *)v7 + 32))(v7, 0, 0, v17);
    fixed = ZinMirTensorTransform::FixAllocation(v18, (uint64_t)v110, 1, (uint64_t *)&v109, 1, 0, 0);
    v20 = fixed == 0;
    v21 = v109;
    if (v109)
    {
      v123.i64[0] = (uint64_t)v7;
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
      v107.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v107);
      v22 = ZinIrOpLayerGraph::AddNode(this, v21, (ZinIrOpLayer ***)&__p);
      __p.i64[0] = (uint64_t)&unk_24C02BB18;
      if (__p.i64[1])
      {
        *(_QWORD *)&v116 = __p.i64[1];
        operator delete((void *)__p.i64[1]);
      }
      v23 = v22 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v7, (uint64_t)v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (fixed)
        v20 = 0;
      else
        v20 = v23;
      v7 = v21;
    }
    v24 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    if (v24[9] == 1)
    {
      v25 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
      v26 = v24[7];
      v27 = v24[8];
      if (ZinIrTensor::MirInfo::HasCustomStrides(*(ZinIrTensor::MirInfo **)(v25 + 104)))
        v28 = v24[8] * (*(_QWORD *)(*(_QWORD *)(v25 + 104) + 16) / *((_QWORD *)a4 + 52));
      else
        v28 = v27 * v26;
      v46 = *((_QWORD *)a4 + 210);
      v47 = v28 / v46;
      if (!(v28 % v46))
      {
        v107.__r_.__value_.__r.__words[0] = 1;
        v107.__r_.__value_.__l.__size_ = v46;
        v107.__r_.__value_.__r.__words[2] = v28 / v46;
        v108 = vdupq_n_s64(1uLL);
        DimensionOrderHint::DimensionOrderHint(v106, 1);
        v49 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v107, *(_DWORD *)(v49 + 88), 1, (uint64_t)v106, 16, 1, 1, &v123);
        v50 = operator new();
        ZinIrTensor::MirInfo::MirInfo(v50, 1, 0, 0, v106, &v123);
        v105 = (_QWORD *)v50;
        v51 = *((_QWORD *)v7 + 2);
        (*(void (**)(int64x2_t *__return_ptr, ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 80))(&__p, v7, 0, 0);
        v52 = operator new(0x78uLL);
        v100[1] = v52 + 30;
        v101 = (char *)(v52 + 30);
        v52[28] = v122;
        v53 = v121;
        v54 = v119;
        *((_OWORD *)v52 + 5) = v120;
        *((_OWORD *)v52 + 6) = v53;
        v55 = v116;
        *(int64x2_t *)v52 = __p;
        *((_OWORD *)v52 + 1) = v55;
        v56 = v118;
        *((_OWORD *)v52 + 2) = v117;
        *((_OWORD *)v52 + 3) = v56;
        *((_OWORD *)v52 + 4) = v54;
        v100[0] = v52;
        v57 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0)+ 104);
        if (v57)
          v58 = *(_DWORD *)(v57 + 96);
        else
          v58 = 0;
        v104 = v105;
        v105 = 0;
        Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v51, (uint64_t)a3, (uint64_t)v100, v58, (__int128 *)&v107, (uint64_t)&v104);
        v60 = v104;
        v104 = 0;
        if (v60)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v104, v60);
        if (v100[0])
        {
          v100[1] = v100[0];
          operator delete(v100[0]);
        }
        v114[0] = v7;
        v100[0] = v114;
        v100[1] = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, v100);
        v61 = ZinIrOpLayerGraph::AddNode(this, Alias, (ZinIrOpLayer ***)&__p);
        __p.i64[0] = (uint64_t)&unk_24C02BB18;
        if (__p.i64[1])
        {
          *(_QWORD *)&v116 = __p.i64[1];
          operator delete((void *)__p.i64[1]);
        }
        v62 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v7, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v109 = 0;
        v63 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 32))(Alias, 0, 0);
        if (ZinMirTensorTransform::FixAllocation(v63, (uint64_t)v110, 2, (uint64_t *)&v109, 1, v46, 1))
          v64 = 0;
        else
          v64 = (v20 && v61) & v62;
        v65 = v109;
        if (v109)
        {
          v114[0] = v7;
          v100[0] = v114;
          v100[1] = (void *)1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, v100);
          v66 = ZinIrOpLayerGraph::AddNode(this, v65, (ZinIrOpLayer ***)&__p);
          __p.i64[0] = (uint64_t)&unk_24C02BB18;
          if (__p.i64[1])
          {
            *(_QWORD *)&v116 = __p.i64[1];
            operator delete((void *)__p.i64[1]);
          }
          v64 &= v66 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)Alias, (uint64_t)v65, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          Alias = v65;
        }
        *(int64x2_t *)v100 = vdupq_n_s64(1uLL);
        v101 = (char *)v47;
        v102 = v46;
        v103 = 1;
        DimensionOrderHint::DimensionOrderHint(v114, 2);
        v67 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v100, *(_DWORD *)(v67 + 88), 2, (uint64_t)v114, 64, 1, 1, &__p);
        v123 = __p;
        v124 = v116;
        v125 = v117;
        v68 = operator new();
        ZinIrTensor::MirInfo::MirInfo(v68, 2, 1, 1, v114, &v123);
        __p.i64[0] = 0;
        v69 = v105;
        v105 = (_QWORD *)v68;
        if (v69)
        {
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v105, v69);
          v70 = (_QWORD *)__p.i64[0];
          __p.i64[0] = 0;
          if (v70)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&__p, v70);
        }
        v71 = *((_QWORD *)Alias + 2);
        (*(void (**)(int64x2_t *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 80))(&__p, Alias, 0, 0);
        v72 = operator new(0x78uLL);
        v95 = v72 + 30;
        v96 = v72 + 30;
        v72[28] = v122;
        v73 = v121;
        v74 = v119;
        *((_OWORD *)v72 + 5) = v120;
        *((_OWORD *)v72 + 6) = v73;
        v75 = v116;
        *(int64x2_t *)v72 = __p;
        *((_OWORD *)v72 + 1) = v75;
        v76 = v118;
        *((_OWORD *)v72 + 2) = v117;
        *((_OWORD *)v72 + 3) = v76;
        *((_OWORD *)v72 + 4) = v74;
        v94 = v72;
        v77 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 32))(Alias, 0, 0)+ 104);
        if (v77)
          v78 = *(_DWORD *)(v77 + 96);
        else
          v78 = 0;
        v79 = v105;
        v105 = 0;
        v99 = v79;
        v80 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v71, (uint64_t)a3, (uint64_t)&v94, v78, (__int128 *)v100, (uint64_t)&v99);
        v81 = v99;
        v99 = 0;
        if (v81)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v99, v81);
        if (v94)
        {
          v95 = v94;
          operator delete(v94);
        }
        v113[0] = v7;
        v94 = v113;
        v95 = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v94);
        ZinIrOpLayerGraph::AddNode(this, v80, (ZinIrOpLayer ***)&__p);
        __p.i64[0] = (uint64_t)&unk_24C02BB18;
        if (__p.i64[1])
        {
          *(_QWORD *)&v116 = __p.i64[1];
          operator delete((void *)__p.i64[1]);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)Alias, (uint64_t)v80, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v82 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
        v83 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(v82 + 48), *(_DWORD *)(v83 + 88), 1, (uint64_t)v106, 16, 1, 1, &__p);
        v84 = operator new();
        ZinIrTensor::MirInfo::MirInfo(v84, 1, 0, 0, v106, &__p);
        v85 = *((_QWORD *)v80 + 2);
        v97 = (_QWORD *)v84;
        v98 = 0;
        v37 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v85, (uint64_t)v80, (uint64_t)a3, 3, &v97);
        v86 = v97;
        v97 = 0;
        if (v86)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v97, v86);
        v112 = v7;
        v113[0] = &v112;
        v113[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v94, v113);
        v87 = ZinIrOpLayerGraph::AddNode(this, v37, (ZinIrOpLayer ***)&v94);
        v94 = &unk_24C02BB18;
        if (v95)
        {
          v96 = v95;
          operator delete(v95);
        }
        v88 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v80, (uint64_t)v37, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v109 = 0;
        v89 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0, 0);
        v90 = ZinMirTensorTransform::FixAllocation(v89, (uint64_t)a3, 1, (uint64_t *)&v109, 1, 0, 0);
        v91 = v64 & v87 & v88 ^ 1;
        if (v90)
          v91 = 1;
        if ((v91 & 1) != 0 || v109)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2();
          v37 = 0;
        }
        v92 = v98;
        v98 = 0;
        if (v92)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v98, v92);
        if (v114[0])
        {
          v114[1] = v114[0];
          operator delete(v114[0]);
        }
        v93 = v105;
        v105 = 0;
        if (v93)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v105, v93);
        if (v106[0])
        {
          v106[1] = v106[0];
          operator delete(v106[0]);
        }
        goto LABEL_34;
      }
      v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v38)
        goto LABEL_32;
    }
    else
    {
      v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v38)
LABEL_32:
        ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    v37 = 0;
LABEL_34:
    v110[0] = off_24C01FBB0;
    if (v111 < 0)
      operator delete((void *)v110[1]);
    return v37;
  }
  v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v29)
    ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(v29, v30, v31, v32, v33, v34, v35, v36);
  return 0;
}

void sub_206F7F674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void (**a38)(ZinObjectNameFactory *__hidden this),void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,void *__p,uint64_t a55)
{
  _QWORD *v56;

  a53 = &unk_24C02BB18;
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  v56 = a24;
  a24 = 0;
  if (v56)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a24, v56);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  a38 = off_24C01FBB0;
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirTensorTransform::ReplaceTensorWithNewFormat(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  ZinIrTensor::MirInfo *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ZinIrTensor::MirInfo *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  ZinIrTensor::MirInfo *v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  ZinIrTensor::MirInfo *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  ZinIrTensor::MirInfo *v41;
  __int128 v42;
  char v43;

  if (a2)
  {
    v5 = a2;
    if (*(_DWORD *)(a2 + 88) != a3)
    {
      v6 = *(_QWORD *)(a2 + 16);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 16))(&v42, a4, 0);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v5, &v41);
      v7 = v41;
      v41 = 0;
      v37 = 0;
      v38 = v7;
      v36 = 0;
      LODWORD(v33.__r_.__value_.__l.__data_) = 0;
      v34 = 0;
      *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = 0uLL;
      v35 = 0;
      ZinIrTensor::CreateTensor(v6, a3, (__int128 *)(v5 + 48), &v42, &v38, &v36, (unsigned int *)&v33, &v39);
      v8 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v38;
      v38 = 0;
      if (v11)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v38, v11);
      if (*(char *)(v5 + 47) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
      else
        v33 = *(std::string *)(v5 + 24);
      v20 = *(_QWORD *)(v5 + 96);
      v31 = v39;
      v32 = v40;
      if (v40)
      {
        v21 = (unint64_t *)&v40->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 24))(v20, &v31);
      v23 = v32;
      if (v32)
      {
        v24 = (unint64_t *)&v32->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v5 = v39;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v26 = v40;
      if (v40)
      {
        v27 = (unint64_t *)&v40->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v41;
      v41 = 0;
      if (v29)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v41, v29);
      if (v43 < 0)
        operator delete((void *)v42);
    }
  }
  else
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinMirTensorTransform::ReplaceTensorWithNewFormat(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  return v5;
}

void sub_206F7FB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  _QWORD *v24;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  v24 = *(_QWORD **)(v22 - 64);
  *(_QWORD *)(v22 - 64) = 0;
  if (v24)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v22 - 64, v24);
  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  _Unwind_Resume(a1);
}

uint64_t ZinMirTensorTransform::SplitLayerPerBatch(uint64_t **a1, const std::string *a2, uint64_t a3, _QWORD *a4)
{
  ZinIrOpLayerGraph *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  ZinIrTensor *v21;
  unint64_t Interleave;
  char v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int64x2_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  ZinIrTensor *v48;
  __int128 v49;
  uint64_t v50;
  _QWORD **v51;
  uint64_t *v52;
  _QWORD *v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD **v56;
  BOOL v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type size;
  std::string *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  ZinIrOpLayer *View;
  _BOOL4 v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  void *v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  ZinIrOpLayer **v77;
  char *v78;
  char *v79;
  ZinIrOpLayer *v80;
  uint64_t v81;
  char *v82;
  void *v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  const std::string *v92;
  const std::string *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  uint64_t v96;
  ZinIrOpLayer *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _BOOL4 v101;
  int v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  ZinIrTensor *v111;
  ZinIrTensor *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  ZinIrTensor *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  ZinIrOpLayer **v132;
  ZinIrOpLayer *v133;
  ZinIrOpLayer **v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  ZinIrOpLayer **v139;
  char *v140;
  char *v141;
  ZinIrOpLayer *v142;
  _QWORD *v143;
  _QWORD *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  int v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  _BOOL4 v156;
  uint64_t *v157;
  uint64_t *v158;
  const std::string *v159;
  size_t v160;
  __int128 *v161;
  const std::string *data;
  __n128 v163;
  uint64_t v164;
  ZinIrTensor *v165;
  ZinIrTensor::MirInfo *v166;
  int v167;
  uint64_t *v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _BOOL8 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  ZinIrOpLayer *v192;
  uint64_t **v193;
  _QWORD *v194;
  int v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t **v199;
  _QWORD *v200;
  int __val;
  _QWORD *v203;
  int v205;
  ZinIrTensor *v206;
  ZinIrTensor::MirInfo *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  _OWORD v212[2];
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  std::string v217;
  _BYTE v218[32];
  uint64_t v219;
  _BYTE v220[40];
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  __int128 __s1;
  __int128 v228;
  uint64_t v229;
  _QWORD **v230;
  _QWORD *v231[2];
  std::string __str;
  _BYTE v233[32];
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  void *v237;
  void *v238;
  unint64_t v239;
  _QWORD *v240;
  uint64_t *v241;
  std::__shared_weak_count *v242;
  __int128 v243;
  std::string::size_type v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t *v248;
  _QWORD *v249[2];
  void *__p;
  char *v251;
  char *v252;
  char *v253;
  ZinIrOpLayer **v254;
  char *v255;
  const std::string *v256;
  uint8_t buf[4];
  int v258;
  std::string v259;
  _BYTE v260[32];
  uint64_t v261;
  _BYTE __s2[40];
  uint64_t v263;

  v4 = (ZinIrOpLayerGraph *)a1;
  v263 = *MEMORY[0x24BDAC8D0];
  v255 = 0;
  v256 = a2;
  v253 = 0;
  v254 = 0;
  v251 = 0;
  __p = 0;
  v252 = 0;
  v249[1] = 0;
  v249[0] = 0;
  v248 = (uint64_t *)v249;
  v198 = a2->__r_.__value_.__r.__words[2];
  v5 = *(_QWORD **)a3;
  v197 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 != v197)
  {
    __val = 0;
    v194 = a1 + 8;
    v195 = 0;
    v193 = a1 + 13;
    v205 = 1;
    while (1)
    {
      if (!*v5)
      {
        v183 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v183)
          ZinMirTensorTransform::SplitLayerPerBatch(v183, v184, v185, v186, v187, v188, v189, v190);
        v174 = 3;
        goto LABEL_268;
      }
      v6 = (*(uint64_t (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0] + 32))(v256, 0, 0);
      v247 = *(_QWORD *)(v6 + 80);
      v7 = *(_OWORD *)(v6 + 64);
      v245 = *(_OWORD *)(v6 + 48);
      v246 = v7;
      *(_QWORD *)&v245 = *v5;
      std::string::basic_string((std::string *)__s2, v256 + 1, 0, 2uLL, (std::allocator<char> *)v260);
      std::operator+<char>();
      v8 = std::string::append((std::string *)v233, "_split_", 7uLL);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      *(_QWORD *)&v220[16] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
      *(_OWORD *)v220 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::to_string((std::string *)v260, __val);
      if (v260[23] >= 0)
        v10 = v260;
      else
        v10 = *(const std::string::value_type **)v260;
      if (v260[23] >= 0)
        v11 = v260[23];
      else
        v11 = *(_QWORD *)&v260[8];
      v12 = std::string::append((std::string *)v220, v10, v11);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v244 = v12->__r_.__value_.__r.__words[2];
      v243 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if ((v260[23] & 0x80000000) != 0)
        operator delete(*(void **)v260);
      if ((v220[23] & 0x80000000) != 0)
        operator delete(*(void **)v220);
      if ((v233[23] & 0x80000000) != 0)
        operator delete(*(void **)v233);
      if ((__s2[23] & 0x80000000) != 0)
        operator delete(*(void **)__s2);
      v14 = v256->__r_.__value_.__r.__words[2];
      v15 = *(_DWORD *)((*(uint64_t (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0]
                                                                                       + 32))(v256, 0, 0)+ 88);
      v240 = 0;
      *(_OWORD *)v233 = 0uLL;
      *(_DWORD *)v220 = 0;
      memset(&v220[8], 0, 28);
      ZinIrTensor::CreateTensor(v14, v15, &v245, &v243, &v240, (uint64_t *)v233, (unsigned int *)v220, (uint64_t *)&v241);
      v16 = *(std::__shared_weak_count **)&v233[8];
      if (*(_QWORD *)&v233[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v233[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v240;
      v240 = 0;
      if (v19)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v240, v19);
      v20 = v241;
      v21 = (ZinIrTensor *)(*(uint64_t (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0]
                                                                                          + 32))(v256, 0, 0);
      Interleave = ZinIrTensor::GetInterleave(v21);
      v24 = ZinIrTensor::SetInterleave(v20, Interleave, v23, 1);
      v203 = v5;
      if (v24)
      {
        v25 = 1;
        v196 = v24;
        goto LABEL_206;
      }
      v26 = v195;
      v27 = v251;
      if (v251 >= v252)
      {
        v30 = (char *)__p;
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((v251 - (_BYTE *)__p) >> 4);
        v32 = v31 + 1;
        if (v31 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v252 - (_BYTE *)__p) >> 4) > v32)
          v32 = 0x999999999999999ALL * ((v252 - (_BYTE *)__p) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v252 - (_BYTE *)__p) >> 4) >= 0x199999999999999)
          v33 = 0x333333333333333;
        else
          v33 = v32;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v252, v33);
          v27 = v251;
          v30 = (char *)__p;
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[80 * v31];
        *(_QWORD *)v35 = v195;
        *(_OWORD *)(v35 + 8) = 0u;
        *(_OWORD *)(v35 + 24) = 0u;
        v36 = vdupq_n_s64(1uLL);
        *(int64x2_t *)(v35 + 40) = v36;
        *(int64x2_t *)(v35 + 56) = v36;
        *((_QWORD *)v35 + 9) = 1;
        if (v27 == v30)
        {
          v41 = &v34[80 * v31];
        }
        else
        {
          v37 = &v34[80 * v31];
          do
          {
            *((_OWORD *)v37 - 5) = *((_OWORD *)v27 - 5);
            v38 = *((_OWORD *)v27 - 4);
            v39 = *((_OWORD *)v27 - 3);
            v40 = *((_OWORD *)v27 - 1);
            v41 = v37 - 80;
            *((_OWORD *)v37 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v37 - 1) = v40;
            *((_OWORD *)v37 - 4) = v38;
            *((_OWORD *)v37 - 3) = v39;
            v27 -= 80;
            v37 -= 80;
          }
          while (v27 != v30);
        }
        v29 = v35 + 80;
        __p = v41;
        v251 = v35 + 80;
        v252 = &v34[80 * v33];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_QWORD *)v251 = v195;
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        v28 = vdupq_n_s64(1uLL);
        *(int64x2_t *)(v27 + 40) = v28;
        *(int64x2_t *)(v27 + 56) = v28;
        *((_QWORD *)v27 + 9) = 1;
        v29 = v27 + 80;
      }
      v251 = v29;
      v238 = 0;
      v237 = 0;
      v239 = 0;
      v236 = 0;
      v235 = 0;
      *(_QWORD *)v220 = &v256;
      v42 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v194, (unint64_t **)v220);
      v43 = v42 + 3;
      if (!v42)
        v43 = v193;
      v45 = (uint64_t **)*v43;
      v44 = (uint64_t **)v43[1];
      v199 = v44;
      while (v45 != v44)
      {
        v46 = *v45;
        v47 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)**v45 + 32))(**v45, 0, 0);
        v48 = (ZinIrTensor *)v47;
        v234 = *(_QWORD *)(v47 + 80);
        v49 = *(_OWORD *)(v47 + 64);
        *(_OWORD *)v233 = *(_OWORD *)(v47 + 48);
        *(_OWORD *)&v233[16] = v49;
        *(_QWORD *)v233 = *v203;
        if (*(char *)(v47 + 47) < 0)
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v47 + 24), *(_QWORD *)(v47 + 32));
        else
          __str = *(std::string *)(v47 + 24);
        ZinIrTensor::GetChildren(v48, (uint64_t)&v230);
        memset(&__s2[8], 0, 32);
        v50 = v26;
        *(_QWORD *)__s2 = v26;
        *(int64x2_t *)v260 = vdupq_n_s64(1uLL);
        *(_OWORD *)&v260[16] = *(_OWORD *)v260;
        v261 = 1;
        if (!v231[1] || (v51 = v230, v230 == v231))
        {
LABEL_63:
          std::string::basic_string(&v259, &__str, 0, 2uLL, (std::allocator<char> *)&v217);
          std::operator+<char>();
          v58 = std::string::append((std::string *)v218, "_split_", 7uLL);
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          *(_QWORD *)&v220[16] = *((_QWORD *)&v58->__r_.__value_.__l + 2);
          *(_OWORD *)v220 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v217, __val);
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v217;
          else
            v60 = (std::string *)v217.__r_.__value_.__r.__words[0];
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v217.__r_.__value_.__r.__words[2]);
          else
            size = v217.__r_.__value_.__l.__size_;
          v62 = std::string::append((std::string *)v220, (const std::string::value_type *)v60, size);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          *(_QWORD *)&v228 = *((_QWORD *)&v62->__r_.__value_.__l + 2);
          __s1 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v217.__r_.__value_.__l.__data_);
          if ((v220[23] & 0x80000000) != 0)
            operator delete(*(void **)v220);
          if ((v218[23] & 0x80000000) != 0)
            operator delete(*(void **)v218);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          ZinIrContext::GetAlternativeNameForTensor(v198, (uint64_t)&__s1, (uint64_t)v220);
          if (SBYTE7(v228) < 0)
            operator delete((void *)__s1);
          __s1 = *(_OWORD *)v220;
          *(_QWORD *)&v228 = *(_QWORD *)&v220[16];
          v64 = *(_QWORD *)(*v46 + 16);
          v65 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v46 + 32))(*v46, 0, 0);
          v212[0] = *(_OWORD *)__s2;
          v212[1] = *(_OWORD *)&__s2[16];
          v213 = *(_QWORD *)&__s2[32];
          v214 = *(_OWORD *)v260;
          v215 = *(_OWORD *)&v260[16];
          v216 = v261;
          View = (ZinIrOpLayer *)ZinBuilder::CreateView(v64, (uint64_t)&__s1, v65, (__int128 *)v233, (uint64_t)v212);
          v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
          *(_QWORD *)v218 = &v259;
          *(_QWORD *)&v218[8] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v220, v218);
          v67 = ZinIrOpLayerGraph::AddNode(a1, View, (ZinIrOpLayer ***)v220);
          *(_QWORD *)v220 = &unk_24C02BB18;
          if (*(_QWORD *)&v220[8])
          {
            *(_QWORD *)&v220[16] = *(_QWORD *)&v220[8];
            operator delete(*(void **)&v220[8]);
          }
          v68 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *v46, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v69 = operator new(0x18uLL);
          v70 = (_QWORD *)*a4;
          v69[1] = a4;
          v69[2] = View;
          *v69 = v70;
          v70[1] = v69;
          *a4 = v69;
          ++a4[2];
          v71 = (char *)v238;
          if ((unint64_t)v238 >= v239)
          {
            v73 = ((_BYTE *)v238 - (_BYTE *)v237) >> 3;
            if ((unint64_t)(v73 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v74 = (uint64_t)(v239 - (_QWORD)v237) >> 2;
            if (v74 <= v73 + 1)
              v74 = v73 + 1;
            if (v239 - (unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v74;
            if (v75)
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v239, v75);
            else
              v76 = 0;
            v77 = (ZinIrOpLayer **)&v76[8 * v73];
            *v77 = View;
            v72 = v77 + 1;
            v78 = (char *)v238;
            v79 = (char *)v237;
            v26 = v50;
            if (v238 != v237)
            {
              do
              {
                v80 = (ZinIrOpLayer *)*((_QWORD *)v78 - 1);
                v78 -= 8;
                *--v77 = v80;
              }
              while (v78 != v79);
              v78 = (char *)v237;
            }
            v237 = v77;
            v238 = v72;
            v239 = (unint64_t)&v76[8 * v75];
            if (v78)
              operator delete(v78);
          }
          else
          {
            *(_QWORD *)v238 = View;
            v72 = v71 + 8;
            v26 = v50;
          }
          v238 = v72;
          if (SBYTE7(v228) < 0)
            operator delete((void *)__s1);
          v205 &= v67 & v68;
        }
        else
        {
          while (1)
          {
            v52 = (uint64_t *)(v51 + 4);
            ZinIrTensor::GetMemorySharingInfo((ZinIrTensor *)v51[4], (uint64_t)v220);
            __s1 = *(_OWORD *)&v220[8];
            v228 = *(_OWORD *)&v220[24];
            v229 = v221;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v225, v226);
            ZinIrTensor::GetMemorySharingInfo((ZinIrTensor *)v51[4], (uint64_t)v220);
            *(_OWORD *)v218 = v222;
            *(_OWORD *)&v218[16] = v223;
            v219 = v224;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v225, v226);
            v53 = v51[4];
            v54 = *((_OWORD *)v53 + 4);
            *(_OWORD *)v220 = *((_OWORD *)v53 + 3);
            *(_OWORD *)&v220[16] = v54;
            *(_QWORD *)&v220[32] = v53[10];
            if (!memcmp(&__s1, __s2, 0x28uLL) && !memcmp(v220, v233, 0x28uLL) && !memcmp(v218, v260, 0x28uLL))
              break;
            v55 = v51[1];
            if (v55)
            {
              do
              {
                v56 = (_QWORD **)v55;
                v55 = (_QWORD *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                v56 = (_QWORD **)v51[2];
                v57 = *v56 == v51;
                v51 = v56;
              }
              while (!v57);
            }
            v51 = v56;
            if (v56 == v231)
              goto LABEL_63;
          }
          v81 = *(_QWORD *)(*v52 + 96);
          v82 = (char *)v238;
          if ((unint64_t)v238 >= v239)
          {
            v84 = ((_BYTE *)v238 - (_BYTE *)v237) >> 3;
            if ((unint64_t)(v84 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v85 = (uint64_t)(v239 - (_QWORD)v237) >> 2;
            if (v85 <= v84 + 1)
              v85 = v84 + 1;
            if (v239 - (unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
              v86 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v86 = v85;
            if (v86)
              v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v239, v86);
            else
              v87 = 0;
            v88 = &v87[8 * v84];
            *(_QWORD *)v88 = v81;
            v83 = v88 + 8;
            v89 = (char *)v238;
            v90 = (char *)v237;
            if (v238 != v237)
            {
              do
              {
                v91 = *((_QWORD *)v89 - 1);
                v89 -= 8;
                *((_QWORD *)v88 - 1) = v91;
                v88 -= 8;
              }
              while (v89 != v90);
              v89 = (char *)v237;
            }
            v237 = v88;
            v238 = v83;
            v239 = (unint64_t)&v87[8 * v86];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_QWORD *)v238 = v81;
            v83 = v82 + 8;
          }
          v238 = v83;
          v92 = v256;
          if (*(_DWORD *)(v256[2].__r_.__value_.__r.__words[2] + 8) == 85
            && (*(unsigned int (**)(const std::string *))(v256->__r_.__value_.__r.__words[0] + 120))(v256)
            && (*(unsigned int (**)(const std::string *, ZinIrTensor *))(v92->__r_.__value_.__r.__words[0]
                                                                                  + 200))(v92, v48))
          {
            std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v235, v52);
          }
          v26 = v50;
        }
        std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v230, v231[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v45;
        v44 = v199;
      }
      v93 = v256;
      v210 = (uint64_t)v241;
      v211 = v242;
      if (v242)
      {
        p_shared_owners = (unint64_t *)&v242->__shared_owners_;
        do
          v95 = __ldxr(p_shared_owners);
        while (__stxr(v95 + 1, p_shared_owners));
      }
      v96 = (*(uint64_t (**)(const std::string *, uint64_t *, __int128 *))(v93->__r_.__value_.__r.__words[0]
                                                                                  + 176))(v93, &v210, &v243);
      v4 = (ZinIrOpLayerGraph *)a1;
      v97 = (ZinIrOpLayer *)v96;
      v98 = v211;
      if (!v211)
        goto LABEL_131;
      v99 = (unint64_t *)&v211->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
        if (!v97)
          goto LABEL_198;
      }
      else
      {
LABEL_131:
        if (!v96)
          goto LABEL_198;
      }
      *(_QWORD *)__s2 = v256;
      *(_QWORD *)v233 = __s2;
      *(_QWORD *)&v233[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v220, v233);
      v101 = ZinIrOpLayerGraph::AddNode(a1, v97, (ZinIrOpLayer ***)v220);
      *(_QWORD *)v220 = &unk_24C02BB18;
      if (*(_QWORD *)&v220[8])
      {
        *(_QWORD *)&v220[16] = *(_QWORD *)&v220[8];
        operator delete(*(void **)&v220[8]);
      }
      v102 = v205 & v101 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a1, (uint64_t *)&v237, (uint64_t)v97);
      if (*(_DWORD *)(*((_QWORD *)v97 + 8) + 8) != 85
        || !(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v97 + 120))(v97))
      {
        goto LABEL_144;
      }
      if (!v235)
        ZinAssertImpl("inconsistent kernel tensor");
      v208 = v235;
      v209 = v236;
      if (v236)
      {
        v103 = (unint64_t *)&v236->__shared_owners_;
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      LOBYTE(v102) = v102 & (*(uint64_t (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v97 + 240))(v97, &v208);
      v105 = v209;
      if (!v209)
        goto LABEL_144;
      v106 = (unint64_t *)&v209->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
        if ((v102 & 1) != 0)
        {
LABEL_145:
          if (ZinIrOpLayer::IsANELayer(v97) && *((_QWORD *)v97 + 33))
          {
            (*(void (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0] + 32))(v256, 0, 0);
            *(_QWORD *)(*((_QWORD *)v97 + 33) + 104) = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0, 0)+ 48);
          }
          v192 = v97;
          v108 = v237;
          v109 = v238;
          v200 = v238;
          while (v108 != v109)
          {
            v110 = *v108;
            v111 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v108 + 32))(*v108, 0, 0);
            if (*(_QWORD *)(v110 + 120) - *(_QWORD *)(v110 + 112) == 16)
            {
              v112 = v111;
              if (ZinIrTensor::HasParent(v111))
              {
                v206 = v112;
                ZinIrTensor::GetParentTensor(v112, v220);
                v113 = *(std::__shared_weak_count **)&v220[8];
                v114 = *(_QWORD *)(*(_QWORD *)v220 + 96);
                v116 = *(_QWORD *)(v114 + 112);
                v115 = *(_QWORD *)(v114 + 120);
                if (*(_QWORD *)&v220[8])
                {
                  v117 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
                v119 = v206;
                if (v115 - v116 == 8)
                {
                  v120 = *(uint64_t **)(v110 + 112);
                  v121 = *(uint64_t **)(v110 + 120);
                  while (v120 != v121)
                  {
                    v122 = *v120;
                    if (*(_DWORD *)(*(_QWORD *)(*v120 + 64) + 8) == 7)
                    {
                      ZinIrTensor::GetParentTensor(v119, v220);
                      v123 = *(_QWORD *)v220;
                      v124 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0, 0);
                      v125 = *(std::__shared_weak_count **)&v220[8];
                      if (*(_QWORD *)&v220[8])
                      {
                        v126 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
                        do
                          v127 = __ldaxr(v126);
                        while (__stlxr(v127 - 1, v126));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                          std::__shared_weak_count::__release_weak(v125);
                        }
                      }
                      v119 = v206;
                      if (v123 == v124)
                      {
                        *(_QWORD *)v233 = 0;
                        ZinIrTensor::GetParentTensor(v206, v220);
                        v128 = *(std::__shared_weak_count **)&v220[8];
                        v129 = *(_QWORD *)(*(_QWORD *)v220 + 96);
                        if (*(_QWORD *)&v220[8])
                        {
                          v130 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
                          do
                            v131 = __ldaxr(v130);
                          while (__stlxr(v131 - 1, v130));
                          if (!v131)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        *(_QWORD *)v233 = v129;
                        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v248, (unint64_t *)v233, (uint64_t *)v233);
                        break;
                      }
                    }
                    ++v120;
                  }
                }
              }
            }
            ++v108;
            v109 = v200;
          }
          v132 = v254;
          if (v254 >= (ZinIrOpLayer **)v255)
          {
            v135 = ((char *)v254 - v253) >> 3;
            v4 = (ZinIrOpLayerGraph *)a1;
            v133 = v192;
            if ((unint64_t)(v135 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v136 = (v255 - v253) >> 2;
            if (v136 <= v135 + 1)
              v136 = v135 + 1;
            if ((unint64_t)(v255 - v253) >= 0x7FFFFFFFFFFFFFF8)
              v137 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v137 = v136;
            if (v137)
              v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v255, v137);
            else
              v138 = 0;
            v139 = (ZinIrOpLayer **)&v138[8 * v135];
            *v139 = v192;
            v134 = v139 + 1;
            v141 = v253;
            v140 = (char *)v254;
            if (v254 != (ZinIrOpLayer **)v253)
            {
              do
              {
                v142 = (ZinIrOpLayer *)*((_QWORD *)v140 - 1);
                v140 -= 8;
                *--v139 = v142;
              }
              while (v140 != v141);
              v140 = v253;
            }
            v253 = (char *)v139;
            v254 = v134;
            v255 = &v138[8 * v137];
            if (v140)
              operator delete(v140);
          }
          else
          {
            v133 = v192;
            *v254 = v192;
            v134 = v132 + 1;
            v4 = (ZinIrOpLayerGraph *)a1;
          }
          v254 = v134;
          v143 = operator new(0x18uLL);
          v144 = (_QWORD *)*a4;
          v143[1] = a4;
          v143[2] = v133;
          *v143 = v144;
          v144[1] = v143;
          *a4 = v143;
          ++a4[2];
          (*(void (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0] + 32))(v256, 0, 0);
          v25 = 0;
          v195 += *(_DWORD *)v203;
          ++__val;
          v205 = 1;
          goto LABEL_199;
        }
      }
      else
      {
LABEL_144:
        if ((v102 & 1) != 0)
          goto LABEL_145;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirTensorTransform::SplitLayerPerBatch(buf, __val, &v258);
      v205 = 0;
LABEL_198:
      v196 = 3;
      v25 = 1;
LABEL_199:
      v145 = v236;
      if (v236)
      {
        v146 = (unint64_t *)&v236->__shared_owners_;
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      if (v237)
      {
        v238 = v237;
        operator delete(v237);
      }
LABEL_206:
      v148 = v242;
      if (v242)
      {
        v149 = (unint64_t *)&v242->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      if (SHIBYTE(v244) < 0)
        operator delete((void *)v243);
      if (v25)
      {
        v174 = v196;
        goto LABEL_268;
      }
      v5 = v203 + 1;
      if (v203 + 1 == v197)
        goto LABEL_217;
    }
  }
  v205 = 1;
LABEL_217:
  v151 = v248;
  if (v248 == (uint64_t *)v249)
  {
    v152 = v205;
  }
  else
  {
    v152 = v205;
    do
    {
      v153 = v151[4];
      v154 = *(uint64_t **)(v153 + 112);
      v155 = *(uint64_t **)(v153 + 120);
      if (v154 != v155)
      {
        while (*(_DWORD *)(*(_QWORD *)(*v154 + 64) + 8) != 31)
        {
          if (++v154 == v155)
            goto LABEL_225;
        }
      }
      if (v154 != v155)
        v152 &= ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)v4, (ZinIrOpLayerGraph *)v153, **(ZinIrOpLayer ***)(v153 + 88), *v154, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
LABEL_225:
      v156 = ZinIrOpLayerGraph::RemoveNode(v4, (ZinIrOpLayer *)v153, 0);
      v157 = (uint64_t *)v151[1];
      if (v157)
      {
        do
        {
          v158 = v157;
          v157 = (uint64_t *)*v157;
        }
        while (v157);
      }
      else
      {
        do
        {
          v158 = (uint64_t *)v151[2];
          v57 = *v158 == (_QWORD)v151;
          v151 = v158;
        }
        while (!v57);
      }
      v152 &= v156;
      v151 = v158;
    }
    while (v158 != (uint64_t *)v249);
  }
  v159 = v256;
  if ((v256[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v160 = HIBYTE(v256[1].__r_.__value_.__r.__words[2]);
  else
    v160 = v256[1].__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v245, v160 + 7);
  if ((SBYTE7(v246) & 0x80u) == 0)
    v161 = &v245;
  else
    v161 = (__int128 *)v245;
  if (v160)
  {
    if ((v159[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      data = v159 + 1;
    else
      data = (const std::string *)v159[1].__r_.__value_.__l.__data_;
    memmove(v161, data, v160);
  }
  strcpy((char *)v161 + v160, "_gather");
  v163 = ZinObjectNameFactory::ZinObjectNameFactory(v220, &v245);
  if (SBYTE7(v246) < 0)
    operator delete((void *)v245);
  v164 = (*(uint64_t (**)(const std::string *, _QWORD, _QWORD, __n128))(v256->__r_.__value_.__r.__words[0] + 32))(v256, 0, 0, v163);
  v165 = (ZinIrTensor *)(*(uint64_t (**)(const std::string *, _QWORD, _QWORD))(v256->__r_.__value_.__r.__words[0]
                                                                                       + 32))(v256, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v165, &v207);
  ZinBuilder::CreateConcat(v198, (uint64_t)v220, (__int128 *)(v164 + 48), (_QWORD **)&v253, (uint64_t)&__p, 5, 0, &v207, (void **)v233, 0);
  v166 = v207;
  v207 = 0;
  if (v166)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v207, v166);
  *(_QWORD *)v260 = v256;
  *(_QWORD *)__s2 = v260;
  *(_QWORD *)&__s2[8] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v245, __s2);
  v167 = ZinBuilder::AddConcatToGraph((uint64_t **)v4, (uint64_t *)&v253, v233, (ZinIrOpLayer ***)&v245);
  *(_QWORD *)&v245 = &unk_24C02BB18;
  if (*((_QWORD *)&v245 + 1))
  {
    *(_QWORD *)&v246 = *((_QWORD *)&v245 + 1);
    operator delete(*((void **)&v245 + 1));
  }
  v169 = *(uint64_t **)&v233[8];
  v168 = *(uint64_t **)v233;
  if (*(_QWORD *)v233 != *(_QWORD *)&v233[8])
  {
    v170 = (_QWORD *)*a4;
    v171 = a4[2];
    do
    {
      v172 = *v168;
      if (*v168)
      {
        v173 = operator new(0x18uLL);
        v173[2] = v172;
        v170[1] = v173;
        *a4 = v173;
        *v173 = v170;
        v173[1] = a4;
        ++v171;
        v170 = v173;
        a4[2] = v171;
      }
      ++v168;
    }
    while (v168 != v169);
  }
  ZinMirTensorTransform::PropagateSpatialSplitInfo<std::list<ZinIrOpLayer *>>((uint64_t)v256, (uint64_t)a4);
  if ((v152 & v167 & 1) != 0)
  {
    v174 = 0;
  }
  else
  {
    v175 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v175)
      ZinMirTensorTransform::SplitLayerPerBatch(v175, v176, v177, v178, v179, v180, v181, v182);
    v174 = 3;
  }
  if (*(_QWORD *)v233)
  {
    *(_QWORD *)&v233[8] = *(_QWORD *)v233;
    operator delete(*(void **)v233);
  }
  *(_QWORD *)v220 = off_24C01FBB0;
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
LABEL_268:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v248, v249[0]);
  if (__p)
  {
    v251 = (char *)__p;
    operator delete(__p);
  }
  if (v253)
  {
    v254 = (ZinIrOpLayer **)v253;
    operator delete(v253);
  }
  return v174;
}

void sub_206F81038(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  v3 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v3;
    operator delete(v3);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x330], (_QWORD *)STACK[0x338]);
  v4 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 256);
  if (v5)
  {
    *(_QWORD *)(v1 - 248) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirTensorTransform::PropagateSpatialSplitInfo<std::list<ZinIrOpLayer *>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  int v8;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  if (*(_BYTE *)(result + 144))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    if (!*(_BYTE *)(result + 144))
      goto LABEL_11;
    if (*(_DWORD *)(result + 132) != 2)
      return result;
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    if (!*(_BYTE *)(result + 144))
LABEL_11:
      std::__throw_bad_optional_access[abi:ne180100]();
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 != a2)
    {
      v6 = *(_WORD *)(result + 128);
      v7 = *(_QWORD *)(result + 136);
      do
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v5 + 16) + 32))(*(_QWORD *)(v5 + 16), 0, 0);
        v8 = *(unsigned __int8 *)(result + 144);
        *(_WORD *)(result + 128) = v6;
        *(_DWORD *)(result + 132) = 2;
        *(_QWORD *)(result + 136) = v7;
        if (!v8)
          *(_BYTE *)(result + 144) = 1;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != a2);
    }
  }
  return result;
}

uint64_t ZinMirTensorTransform::CopyAndReplaceInputAtIndex(ZinMirTensorTransform *this, ZinIrOpLayerGraph *a2, uint64_t a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  ZinIrOpLayerGraph *v9;
  uint64_t v10;
  ZinIrOpLayerGraph *v11;
  size_t v12;
  std::string *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  ZinIrOpLayer *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  void *v43;
  _QWORD *v44;
  std::string v45;
  std::string v46;
  void *v47[2];
  int64_t v48;
  std::string v49;
  std::string v50;
  unint64_t *v51[3];
  char v52;
  ZinIrOpLayerGraph *v53;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v53 = a2;
  v51[0] = (unint64_t *)&v53;
  v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, v51);
  v6 = (_QWORD *)((char *)this + 104);
  if (v5)
    v6 = v5 + 3;
  v8 = v6;
  v7 = *v6;
  if (a3 >= (unint64_t)((v8[1] - v7) >> 3))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a3, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  else
  {
    v9 = **(ZinIrOpLayerGraph ***)(v7 + 8 * a3);
    v10 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
    v11 = v53;
    if (*((char *)v53 + 47) >= 0)
      v12 = *((unsigned __int8 *)v53 + 47);
    else
      v12 = *((_QWORD *)v53 + 4);
    v13 = &v49;
    std::string::basic_string[abi:ne180100]((uint64_t)&v49, v12 + 1);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if (v12)
    {
      v16 = (char *)*((_QWORD *)v11 + 3);
      v15 = (char *)v11 + 24;
      v14 = v16;
      if (v15[23] >= 0)
        v17 = v15;
      else
        v17 = v14;
      memmove(v13, v17, v12);
    }
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v46, "copy_at_idx");
    v18 = std::string::append(&v46, "_xfm", 4uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v48 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)v47 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0)
      v20 = v47;
    else
      v20 = (void **)v47[0];
    if (v48 >= 0)
      v21 = HIBYTE(v48);
    else
      v21 = (std::string::size_type)v47[1];
    v22 = std::string::append(&v49, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v54, "_", 1uLL);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, a3);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v45;
    else
      v26 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      size = v45.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v50, (const std::string::value_type *)v26, size);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43 = (void *)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v51, __p);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v30 = *((_QWORD *)v9 + 2);
    v31 = *(_DWORD *)(v10 + 88);
    v44 = 0;
    v32 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v30, (uint64_t)v9, (uint64_t)v51, v31, &v44);
    v33 = v44;
    v44 = 0;
    if (v33)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v44, v33);
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v50.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v50);
    ZinIrOpLayerGraph::AddNode((uint64_t **)this, v32, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v43 = __p[1];
      operator delete(__p[1]);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v9, (uint64_t)v32, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)this, v9, v32, (uint64_t)v53, 0xFFFFFFFFFFFFFFFFLL, a3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    v51[0] = (unint64_t *)off_24C01FBB0;
    if (v52 < 0)
      operator delete(v51[1]);
    return 0;
  }
}

void sub_206F817FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v46 - 144) = off_24C01FBB0;
  if (*(char *)(v46 - 113) < 0)
    operator delete(*(void **)(v46 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirTensorTransform::GetSinglePreviousLayer(ZinMirTensorTransform *this, ZinIrOpLayer *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) - v2 == 8)
    return *(_QWORD *)v2;
  else
    return 0;
}

uint64_t ZinMirTensorTransform::GetSinglePreviousLayer(ZinMirTensorTransform *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (a2 >= (*((_QWORD *)this + 12) - v2) >> 3)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t ZinMirTensorTransform::GetSingleNextLayer(ZinMirTensorTransform *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  if (a2 >= (*((_QWORD *)this + 15) - v2) >> 3)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

_QWORD *std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C058F28;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C058F28;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD002F8);
}

char *std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24C058F28;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  return v2;
}

void sub_206F81A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C058F28;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(a2 + 8), *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 40);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::operator()(uint64_t a1, ZinReshapeLayer ***a2)
{
  _QWORD *v3;
  _QWORD *v4;
  ZinReshapeLayer *v5;
  int IsNoOp;
  uint64_t ReshapeInfo;
  std::__shared_weak_count *v8;
  void (**v9)(ZinObjectNameFactory *__hidden);
  unint64_t *v10;
  unint64_t v11;
  void (*v12)(ZinObjectNameFactory *__hidden);
  const char *v13;
  std::string *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  uint64_t **v30;
  ZinIrOpLayer *inserted;
  std::string::__raw *v32;
  void (**v33)(ZinObjectNameFactory *__hidden);
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  BOOL v42;
  const char *v44;
  void *__p[3];
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  void *v49[2];
  int64_t v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  void (**v55)(ZinObjectNameFactory *__hidden);
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61;
  int v62;
  ZinReshapeLayer **v63;

  v63 = *a2;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v59, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v62 = *(_DWORD *)(a1 + 32);
  v3 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(*(_QWORD **)(a1 + 40), &v63);
  v4 = v3;
  if (v3)
  {
    if (&v59 != v3 + 3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v59, (char *)v3[3], v3[4], (uint64_t)(v3[4] - v3[3]) >> 2);
    v62 = *((_DWORD *)v4 + 12);
  }
  v5 = v63[12];
  v55 = 0;
  v56 = 0uLL;
  IsNoOp = ZinIrOpLayer::IsNoOp(v5, (uint64_t *)&v55);
  if (v55)
  {
    *(_QWORD *)&v56 = v55;
    operator delete(v55);
  }
  if (IsNoOp && *(_DWORD *)(*((_QWORD *)v5 + 8) + 8) == 37)
  {
    ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v5);
    memset(__p, 0, sizeof(__p));
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(__p, *(const void **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 3);
    DimensionOrderHint::TransposeDimensionOrder((const void **)&v59, (uint64_t)__p, (uint64_t)&v55);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v59, (char *)v55, v56, (uint64_t)(v56 - (_QWORD)v55) >> 2);
    v62 = v57;
    if (v55)
    {
      *(_QWORD *)&v56 = v55;
      operator delete(v55);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if ((ZinIrTensor::IsTensorCompatibleWithDimensionOrder(v63, &v59) & 1) == 0)
  {
    ZinIrTensor::GetParentTensor((ZinIrTensor *)v63, &v55);
    v9 = v55;
    v8 = (std::__shared_weak_count *)v56;
    if ((_QWORD)v56)
    {
      v10 = (unint64_t *)(v56 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (!v9)
    {
      v44 = (const char *)(v63 + 3);
      if (*((char *)v63 + 47) < 0)
        v44 = *(const char **)v44;
      ZinAssertImpl("Expecting a parent tensor here for %s", v44);
    }
    v12 = v9[12];
    v13 = (char *)v5 + 24;
    std::operator+<char>();
    v14 = std::string::append(&v51, "_", 1uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = (char *)v12 + 24;
    v17 = *((char *)v12 + 47);
    if (v17 >= 0)
      v18 = (char *)v12 + 24;
    else
      v18 = (const std::string::value_type *)*((_QWORD *)v12 + 3);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v12 + 47);
    else
      v19 = *((_QWORD *)v12 + 4);
    v20 = std::string::append(&v52, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v53, "_", 1uLL);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v48, "fix_dim_order");
    v24 = std::string::append(&v48, "_xfm", 4uLL);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v50 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)v49 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v50 >= 0)
      v26 = v49;
    else
      v26 = (void **)v49[0];
    if (v50 >= 0)
      v27 = HIBYTE(v50);
    else
      v27 = (std::string::size_type)v49[1];
    v28 = std::string::append(&v54, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __p[2] = (void *)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v55, __p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50) < 0)
      operator delete(v49[0]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v30 = *(uint64_t ***)(a1 + 48);
    __p[0] = off_24C01FBB0;
    if (SHIBYTE(v57) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v56, *((std::string::size_type *)&v56 + 1));
    }
    else
    {
      *(_OWORD *)&__p[1] = v56;
      v46 = v57;
    }
    v47 = v58;
    inserted = ZinMirTensorTransform::InsertCopyBetween(v30, (ZinIrOpLayer *)v12, v5, (uint64_t)__p, *(_DWORD *)(a1 + 56) == 0);
    __p[0] = off_24C01FBB0;
    if (SHIBYTE(v46) < 0)
      operator delete(__p[1]);
    if (!inserted)
    {
      if (*((char *)v12 + 47) < 0)
        v16 = *(const char **)v16;
      if (*((char *)v5 + 47) < 0)
        v13 = *(const char **)v13;
      ZinAssertImpl("Failed to add memory copy between layers %s and %s", v16, v13);
    }
    v55 = off_24C01FBB0;
    if (SHIBYTE(v57) < 0)
      operator delete((void *)v56);
  }
  ZinIrTensor::GetChildren((ZinIrTensor *)v63, (uint64_t)&v54);
  v32 = (std::string::__raw *)v54.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v54.__r_.__value_.__l.__data_ != &v54.__r_.__value_.__r.__words[1])
  {
    do
    {
      v33 = (void (**)(ZinObjectNameFactory *__hidden))v32[1].__words[1];
      v34 = (std::__shared_weak_count *)v32[1].__words[2];
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
      }
      v37 = *(_QWORD **)(a1 + 40);
      v55 = v33;
      v57 = 0;
      v56 = 0uLL;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v56, v59, (uint64_t)v60, v60 - v59);
      LODWORD(v58) = v62;
      std::__hash_table<std::__hash_value_type<ZinIrTensor const*,DimensionOrderHint const>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,DimensionOrderHint const>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,DimensionOrderHint const>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,DimensionOrderHint const>>>::__emplace_unique_impl<std::pair<ZinIrTensor*,DimensionOrderHint>>(v37, (uint64_t)&v55);
      if ((_QWORD)v56)
      {
        *((_QWORD *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      if (v34)
      {
        v38 = (unint64_t *)&v34->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v40 = (std::string *)v32->__words[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (std::string *)v40->__r_.__value_.__r.__words[0];
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (std::string *)v32->__words[2];
          v42 = v41->__r_.__value_.__r.__words[0] == (_QWORD)v32;
          v32 = (std::string::__raw *)v41;
        }
        while (!v42);
      }
      v32 = (std::string::__raw *)v41;
    }
    while (v41 != (std::string *)&v54.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v54, (_QWORD *)v54.__r_.__value_.__l.__size_);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  return 1;
}

void sub_206F82094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  void *v54;
  void *v55;

  v54 = *(void **)(v52 - 144);
  if (v54)
  {
    *(_QWORD *)(v52 - 136) = v54;
    operator delete(v54);
  }
  if (__p)
    operator delete(__p);
  v55 = *(void **)(v52 - 104);
  if (v55)
  {
    *(_QWORD *)(v52 - 96) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0,std::allocator<ZinMirTensorTransform::FixDimensionOrder(ZinIrTensor *,ZinIrOpLayerGraph *,DimensionOrderHint const&,ZinMirTensorTransform::OutputLayerType)::$_0>,BOOL ()(ZinIrTensor *)>::target_type()
{
}

void ZinMirTensorTransform::ChannelVectorInsertPaddingInL2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in ChannelVectorInsertPaddingInL2 function.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::ChannelVectorInsertPaddingInL2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Could not complete ChannelVectorInsertPaddingInL2 for layer \"%s\"", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirTensorTransform::Split(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in Split function.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in NonResidentLinearizeToChannelInL2 function.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: There must not be a new copy inserted by FixAllocation.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::NonResidentLinearizeToChannelInL2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Could not complete NonResidentLinearizeToChannelInL2 for layer \"%s\"", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in TransposeChannelVectorToWidthFP16InL2 function.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Could not successfully complete TransposeChannelVectorToWidthFP16InL2 for layer \"%s\"", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirTensorTransform::ReplaceTensorWithNewFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in ReplaceTensorWithNewFormat function.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::SplitLayerPerBatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Graph manipulation error during SplitLayerPerBatch.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Batch size should be 1 or more\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirTensorTransform::SplitLayerPerBatch(uint8_t *buf, int a2, _DWORD *a3)
{
  *(_DWORD *)buf = 67109120;
  *a3 = a2;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Graph manipulation error during SplitLayerPerBatch at Split #%d.", buf, 8u);
}

void ZinMirTensorTransform::CopyAndReplaceInputAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "invalid index: %llu", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4();
}

void ZinIrOpLayer::SetOutgoingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = (_QWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  std::vector<ZinIrOpLayer *>::resize(a1 + 112, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_QWORD **)*a2;
  v5 = (_QWORD **)a2[1];
  if ((_QWORD **)*a2 != v5)
  {
    v6 = *v3;
    do
    {
      v7 = *v4++;
      *v6++ = *v7;
    }
    while (v4 != v5);
  }
}

void ZinIrOpLayer::SetIncomingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = (_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
  std::vector<ZinIrOpLayer *>::resize(a1 + 88, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_QWORD **)*a2;
  v5 = (_QWORD **)a2[1];
  if ((_QWORD **)*a2 != v5)
  {
    v6 = *v3;
    do
    {
      v7 = *v4++;
      *v6++ = *v7;
    }
    while (v4 != v5);
  }
}

_QWORD *ZinIrOpLayerGraph::GetOutputPortsOfInEdges(ZinIrOpLayerGraph *this, ZinIrOpLayer *a2)
{
  _QWORD *v3;
  ZinIrOpLayer *v5;

  v5 = a2;
  v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 36, &v5);
  if (v3)
    return v3 + 3;
  else
    return (_QWORD *)((char *)this + 328);
}

uint64_t ZinIrOpLayerGraph::RemoveEdge(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;

  v16 = a3;
  v17 = a2;
  result = ZinIrOpLayerGraph::RemoveOutputPortForEdge((_QWORD *)a1, a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    result = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::RemoveEdge(a1, &v17, &v16, a4, a5);
    if ((_DWORD)result)
    {
      v10 = v17;
      v18 = v17;
      v19 = (unint64_t *)&v18;
      v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 24), &v19);
      if (v11)
        v12 = v11 + 3;
      else
        v12 = (_QWORD *)(a1 + 104);
      ZinIrOpLayer::SetOutgoingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(v10, v12);
      v13 = v16;
      v18 = v16;
      v19 = (unint64_t *)&v18;
      v14 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), &v19);
      if (v14)
        v15 = v14 + 3;
      else
        v15 = (_QWORD *)(a1 + 104);
      ZinIrOpLayer::SetIncomingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(v13, v15);
      result = 1;
      *(_BYTE *)(a1 + 584) = 1;
    }
  }
  return result;
}

uint64_t ZinIrOpLayerGraph::AddEdge(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v17 = a3;
  v18 = a2;
  result = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::AddEdge(a1, &v18, &v17, a4, a5);
  if ((_DWORD)result)
  {
    result = ZinIrOpLayerGraph::AddOutputPortForEdge((_QWORD *)a1, v18, v17, a4, a5, a6);
    if ((_DWORD)result)
    {
      v11 = v18;
      v19 = v18;
      v20 = (unint64_t *)&v19;
      v12 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 24), &v20);
      if (v12)
        v13 = v12 + 3;
      else
        v13 = (_QWORD *)(a1 + 104);
      ZinIrOpLayer::SetOutgoingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(v11, v13);
      v14 = v17;
      v19 = v17;
      v20 = (unint64_t *)&v19;
      v15 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), &v20);
      if (v15)
        v16 = v15 + 3;
      else
        v16 = (_QWORD *)(a1 + 104);
      ZinIrOpLayer::SetIncomingLayers<std::vector<std::reference_wrapper<ZinIrOpLayer* const>>>(v14, v16);
      result = 1;
      *(_BYTE *)(a1 + 584) = 1;
    }
  }
  return result;
}

uint64_t ZinIrOpLayerGraph::AddOutputPortForEdge(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t **v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t **v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  v54 = a3;
  v55 = a2;
  v53 = a6;
  if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v55)|| !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v54))
  {
    ZinAssertImpl("node does not exist");
  }
  v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 31, &v55);
  if (v9)
  {
    v10 = v9;
    v11 = (void **)(v9 + 3);
    v12 = (char *)v9[4];
    if ((a4 & 0x8000000000000000) != 0)
    {
      v15 = v9[5];
      if ((unint64_t)v12 >= v15)
      {
        v17 = (char *)*v11;
        v18 = (v12 - (_BYTE *)*v11) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          goto LABEL_61;
        v19 = v15 - (_QWORD)v17;
        v20 = (uint64_t)(v15 - (_QWORD)v17) >> 2;
        if (v20 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v10 + 5), v21);
          v17 = (char *)v10[3];
          v12 = (char *)v10[4];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        v24 = &v22[8 * v21];
        *(_QWORD *)v23 = v53;
        v16 = v23 + 8;
        while (v12 != v17)
        {
          v25 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v23 - 1) = v25;
          v23 -= 8;
        }
        v10[3] = v23;
        v10[4] = v16;
        v10[5] = v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v12 = v53;
        v16 = v12 + 8;
      }
      v10[4] = v16;
    }
    else
    {
      if (a4 > (v12 - (_BYTE *)*v11) >> 3)
        return 0;
      std::vector<ZinLayerOutputPort>::insert((uint64_t)(v9 + 3), (char *)*v11 + 8 * a4, (char *)&v53);
    }
  }
  else
  {
    v13 = (char *)operator new(8uLL);
    *(_QWORD *)v13 = v53;
    v56 = &v55;
    v14 = (char *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)(a1 + 31), &v55, (uint64_t)&std::piecewise_construct, &v56);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v14 + 24, v13, (uint64_t)(v13 + 8), 1uLL);
    operator delete(v13);
  }
  v26 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 36, &v54);
  if (v26)
  {
    v27 = v26;
    v28 = v26 + 3;
    v29 = (_QWORD *)v26[4];
    if ((a5 & 0x8000000000000000) == 0)
    {
      if (a5 > ((uint64_t)v29 - *v28) >> 3)
        return 0;
      std::vector<ZinLayerOutputPort>::insert((uint64_t)(v26 + 3), (char *)(*v28 + 8 * a5), (char *)&v53);
      goto LABEL_48;
    }
    v34 = v26[5];
    if ((unint64_t)v29 < v34)
    {
      *v29 = v53;
      v35 = v29 + 1;
LABEL_47:
      v27[4] = v35;
      goto LABEL_48;
    }
    v36 = (_QWORD *)*v28;
    v37 = ((uint64_t)v29 - *v28) >> 3;
    if (!((unint64_t)(v37 + 1) >> 61))
    {
      v38 = v34 - (_QWORD)v36;
      v39 = (uint64_t)(v34 - (_QWORD)v36) >> 2;
      if (v39 <= v37 + 1)
        v39 = v37 + 1;
      if (v38 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
      {
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v27 + 5), v40);
        v36 = (_QWORD *)v27[3];
        v29 = (_QWORD *)v27[4];
      }
      else
      {
        v41 = 0;
      }
      v42 = &v41[8 * v37];
      v43 = &v41[8 * v40];
      *(_QWORD *)v42 = v53;
      v35 = v42 + 8;
      while (v29 != v36)
      {
        v44 = *--v29;
        *((_QWORD *)v42 - 1) = v44;
        v42 -= 8;
      }
      v27[3] = v42;
      v27[4] = v35;
      v27[5] = v43;
      if (v36)
        operator delete(v36);
      goto LABEL_47;
    }
LABEL_61:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  v31 = v53;
  v32 = (char *)operator new(8uLL);
  *(_QWORD *)v32 = v31;
  v56 = &v54;
  v33 = (char *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)(a1 + 36), &v54, (uint64_t)&std::piecewise_construct, &v56);
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v33 + 24, v32, (uint64_t)(v32 + 8), 1uLL);
  operator delete(v32);
LABEL_48:
  v45 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 31, &v55);
  if (!v45)
    goto LABEL_59;
  v46 = v45[4] - v45[3];
  v56 = &v55;
  v47 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 3, (unint64_t **)&v56);
  v48 = v47 + 3;
  if (!v47)
    v48 = a1 + 13;
  if (v46 != v48[1] - *v48)
LABEL_60:
    ZinAssertImpl("inconsistent size between node map and outport map for out edges");
  v49 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 36, &v54);
  if (!v49)
LABEL_59:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v50 = v49[4] - v49[3];
  v56 = &v54;
  v51 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)&v56);
  v52 = v51 + 3;
  if (!v51)
    v52 = a1 + 13;
  if (v50 != v52[1] - *v52)
    goto LABEL_60;
  return 1;
}

void sub_206F82C9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<ZinLayerOutputPort>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<ZinGOCLayer const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_206F82EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrOpLayerGraph::RemoveOutputPortForEdge(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t **v13;
  _QWORD ***v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  _QWORD ***v20;
  const void *v21;
  size_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t **v27;
  _QWORD ***v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  _QWORD ***v34;
  const void *v35;
  size_t v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;

  v39 = a3;
  v40 = a2;
  if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v40)|| !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v39))
  {
    ZinAssertImpl("node does not exist");
  }
  result = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected((uint64_t)a1, (unint64_t *)&v40, &v39);
  if (result)
  {
    v11 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 31, &v40);
    if (v11)
    {
      v12 = v11;
      v41 = (unint64_t *)&v40;
      v13 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 3, &v41);
      v14 = (_QWORD ***)(v13 + 3);
      if (!v13)
        v14 = (_QWORD ***)(a1 + 13);
      v16 = (char *)v12[3];
      v15 = (char *)v12[4];
      v17 = (v15 - v16) >> 3;
      v20 = v14;
      v18 = *v14;
      v19 = v20[1];
      if (v17 == v19 - v18)
      {
        if ((a4 & 0x8000000000000000) != 0)
        {
          if (v19 == v18)
LABEL_24:
            ZinAssertImpl("could not find a matching node/port for out edges");
          if (v17 <= 1)
            v17 = 1;
          v22 = v15 - v16 - 8;
          while (**v18 != v39 || *(_QWORD *)v16 != a6)
          {
            v16 += 8;
            v22 -= 8;
            ++v18;
            if (!--v17)
              goto LABEL_24;
          }
          v21 = v16 + 8;
          if (v16 + 8 == v15)
            goto LABEL_27;
        }
        else
        {
          if (v17 <= a4)
            return 0;
          v16 += 8 * a4;
          if (*(_QWORD *)v16 != a6)
            return 0;
          v21 = v16 + 8;
          v22 = v15 - (v16 + 8);
          if (v15 == v16 + 8)
            goto LABEL_27;
        }
        memmove(v16, v21, v22);
LABEL_27:
        v12[4] = &v16[v22];
        goto LABEL_28;
      }
    }
    else
    {
      v41 = (unint64_t *)&v40;
      v23 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 3, &v41);
      v24 = a1 + 13;
      if (v23)
        v24 = v23 + 3;
      if (v24[1] == *v24)
      {
LABEL_28:
        v25 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 36, &v39);
        if (v25)
        {
          v26 = v25;
          v41 = (unint64_t *)&v39;
          v27 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, &v41);
          v28 = (_QWORD ***)(v27 + 3);
          if (!v27)
            v28 = (_QWORD ***)(a1 + 13);
          v30 = (char *)v26[3];
          v29 = (char *)v26[4];
          v31 = (v29 - v30) >> 3;
          v34 = v28;
          v32 = *v28;
          v33 = v34[1];
          if (v31 == v33 - v32)
          {
            if ((a5 & 0x8000000000000000) != 0)
            {
              if (v33 == v32)
LABEL_49:
                ZinAssertImpl("could not find a matching node/port for in edges");
              if (v31 <= 1)
                v31 = 1;
              v36 = v29 - v30 - 8;
              while (**v32 != v40 || *(_QWORD *)v30 != a6)
              {
                v30 += 8;
                v36 -= 8;
                ++v32;
                if (!--v31)
                  goto LABEL_49;
              }
              v35 = v30 + 8;
              if (v30 + 8 == v29)
                goto LABEL_52;
LABEL_51:
              memmove(v30, v35, v36);
LABEL_52:
              v26[4] = &v30[v36];
              return 1;
            }
            if (v31 > a5)
            {
              v30 += 8 * a5;
              if (*(_QWORD *)v30 == a6)
              {
                v35 = v30 + 8;
                v36 = v29 - (v30 + 8);
                if (v29 == v30 + 8)
                  goto LABEL_52;
                goto LABEL_51;
              }
            }
            return 0;
          }
        }
        else
        {
          v41 = (unint64_t *)&v39;
          v37 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, &v41);
          v38 = a1 + 13;
          if (v37)
            v38 = v37 + 3;
          if (v38[1] == *v38)
            return 1;
        }
        ZinAssertImpl("node map and outport map for in edges are not synced");
      }
    }
    ZinAssertImpl("node map and outport map for out edges are not synced");
  }
  return result;
}

void ZinIrOpLayerGraph::GetOutgoingLayersFromPort(ZinIrOpLayer *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t **v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t **v27;

  v26 = (unint64_t *)this;
  if (a3 && !ZinIrOpLayer::IsANELayer(this))
    ZinAssertImpl("Only ANELayer can have non-regular output port.");
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v27 = &v26;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a2 + 3, (unint64_t **)&v27);
  if (v7)
    v8 = (uint64_t *)(v7 + 3);
  else
    v8 = a2 + 13;
  v27 = (unint64_t **)v26;
  v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2 + 31, &v27);
  if (v9)
    v10 = v9 + 3;
  else
    v10 = a2 + 41;
  v12 = *v8;
  v11 = v8[1];
  if (v11 - *v8 != v10[1] - *v10)
    ZinAssertImpl("layers and ports must have the same size.");
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = a4 + 2;
    do
    {
      if (*(_QWORD *)(*v10 + 8 * v14) == a3)
      {
        v16 = *(_QWORD **)(v12 + 8 * v14);
        if ((unint64_t)v13 >= *v15)
        {
          v17 = (v13 - *a4) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v18 = *v15 - (_QWORD)*a4;
          v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v20);
          else
            v21 = 0;
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = *v16;
          v13 = v22 + 8;
          v24 = *a4;
          v23 = a4[1];
          if (v23 != *a4)
          {
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v22 - 1) = v25;
              v22 -= 8;
            }
            while (v23 != v24);
            v23 = *a4;
          }
          *a4 = v22;
          a4[1] = v13;
          a4[2] = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v13 = *v16;
          v13 += 8;
        }
        a4[1] = v13;
        v12 = *v8;
        v11 = v8[1];
      }
      ++v14;
    }
    while (v14 < (v11 - v12) >> 3);
  }
}

void sub_206F833B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpLayerGraph::MoveIncomingEdges(ZinIrOpLayerGraph *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  uint64_t **v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  ZinIrOpLayer **v12;
  uint64_t v13;
  unint64_t IndexOfMatchedOutgoingLayer;
  uint64_t v15;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;

  v23 = a2;
  __p = &v23;
  v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&__p);
  v6 = (char *)this + 104;
  if (v5)
    v6 = (char *)(v5 + 3);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v20, *(const void **)v6, *((_QWORD *)v6 + 1), (uint64_t)(*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 3);
  v24 = v23;
  v7 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 36, &v24);
  v8 = (char *)this + 328;
  if (v7)
    v8 = (char *)(v7 + 3);
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)v8, *((_QWORD *)v8 + 1), (uint64_t)(*((_QWORD *)v8 + 1) - *(_QWORD *)v8) >> 3);
  v9 = v20;
  v10 = __p;
  if (v21 - (_BYTE *)v20 != v18 - (_BYTE *)__p)
    ZinAssertImpl("nodes/ports are not synced for in edges");
  if (v21 == v20)
  {
    v15 = 1;
    if (__p)
    {
LABEL_14:
      v18 = v10;
      operator delete(v10);
    }
  }
  else
  {
    v11 = 0;
    while (1)
    {
      v12 = (ZinIrOpLayer **)v9[v11];
      v13 = *((_QWORD *)__p + v11);
      IndexOfMatchedOutgoingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedOutgoingLayer(this, *v12, v23, 0xFFFFFFFFFFFFFFFFLL);
      if ((ZinIrOpLayerGraph::RemoveEdge((uint64_t)this, (uint64_t)*v12, (uint64_t)v23, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, v13) & 1) == 0|| (ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)*v12, (uint64_t)a3, IndexOfMatchedOutgoingLayer, 0xFFFFFFFFFFFFFFFFLL, v13) & 1) == 0)
      {
        break;
      }
      ++v11;
      v9 = v20;
      if (v11 >= (v21 - (_BYTE *)v20) >> 3)
      {
        v15 = 1;
        goto LABEL_13;
      }
    }
    v15 = 0;
LABEL_13:
    v10 = __p;
    if (__p)
      goto LABEL_14;
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  return v15;
}

void sub_206F83580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpLayerGraph::GetIndexOfMatchedOutgoingLayer(ZinIrOpLayerGraph *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3, unint64_t a4)
{
  uint64_t **v7;
  ZinIrOpLayer ****v8;
  ZinIrOpLayer ***v9;
  ZinIrOpLayer ****v10;
  uint64_t v11;
  unint64_t v12;
  ZinIrOpLayer **v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  ZinIrOpLayer *v21;
  ZinIrOpLayer *v22;
  ZinIrOpLayer **v23;

  v21 = a3;
  v22 = a2;
  v23 = &v21;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v23);
  if ((a4 & 0x8000000000000000) != 0)
  {
    v11 = 1;
  }
  else
  {
    v8 = (ZinIrOpLayer ****)(v7 + 3);
    if (!v7)
      v8 = (ZinIrOpLayer ****)((char *)this + 104);
    v10 = v8;
    v9 = *v8;
    if (a4 >= v10[1] - v9 || *v9[a4] != a2)
      return -1;
    v11 = 0;
    v12 = a4 + 1;
    do
    {
      v13 = *v9++;
      if (*v13 == a2)
        ++v11;
      --v12;
    }
    while (v12);
  }
  v23 = &v22;
  v14 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 3, (unint64_t **)&v23);
  v15 = v14 + 3;
  if (!v14)
    v15 = (_QWORD *)((char *)this + 104);
  v17 = v15;
  v16 = *v15;
  v18 = v17[1] - v16;
  if (!v18)
    return -1;
  result = 0;
  v20 = v18 >> 3;
  if ((unint64_t)(v18 >> 3) <= 1)
    v20 = 1;
  while (v21 != **(ZinIrOpLayer ***)(v16 + 8 * result) || --v11)
  {
    if (v20 == ++result)
      return -1;
  }
  return result;
}

uint64_t ZinIrOpLayerGraph::SwapEdgeSource(uint64_t a1, ZinIrOpLayerGraph *this, ZinIrOpLayer *a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  ZinIrOpLayerGraph::IsTensorMirInfoPreserved(this, a3, a3);
  result = ZinIrOpLayerGraph::RemoveEdge(a1, (uint64_t)this, a4, a7, a8, a10);
  if ((_DWORD)result)
  {
    result = ZinIrOpLayerGraph::AddEdge(a1, (uint64_t)a3, a4, a5, a6, a9);
    if ((_DWORD)result)
    {
      v19 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 200))(a4, v19))
        return 1;
      v20 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 40))(a3, 0, 0);
      v21 = (std::__shared_weak_count *)v20[1];
      v28 = *v20;
      v29 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 240))(a4, &v28);
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return (v24 & 1) != 0;
    }
  }
  return result;
}

void sub_206F83848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayerGraph::SwapEdgeDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = ZinIrOpLayerGraph::RemoveEdge(a1, a2, a3, a7, a8, a10);
  if ((_DWORD)result)
    return ZinIrOpLayerGraph::AddEdge(a1, a2, a4, a5, a6, a9);
  return result;
}

void ZinIrOpLayerGraph::GetIndicesOfMatchedIncomingLayer(ZinIrOpLayerGraph *this@<X0>, ZinIrOpLayer *a2@<X1>, const ZinIrOpLayer *a3@<X2>, unint64_t **a4@<X8>)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer **v24;

  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v23 = a2;
  v24 = &v23;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v24);
  if (v7)
    v8 = (uint64_t *)(v7 + 3);
  else
    v8 = (uint64_t *)((char *)this + 104);
  v10 = *v8;
  v9 = v8[1];
  if (v9 != *v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 + 2;
    do
    {
      if (**(const ZinIrOpLayer ***)(v10 + 8 * v12) == a3)
      {
        if ((unint64_t)v11 >= *v13)
        {
          v15 = *a4;
          v16 = v11 - *a4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v18 = *v13 - (_QWORD)v15;
          if (v18 >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v19);
            v15 = *a4;
            v11 = a4[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = (unint64_t *)&v20[8 * v16];
          *v21 = v12;
          v14 = v21 + 1;
          while (v11 != v15)
          {
            v22 = *--v11;
            *--v21 = v22;
          }
          *a4 = v21;
          a4[1] = v14;
          a4[2] = (unint64_t *)&v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v11 = v12;
          v14 = v11 + 1;
        }
        a4[1] = v14;
        v10 = *v8;
        v9 = v8[1];
        v11 = v14;
      }
      ++v12;
    }
    while (v12 < (v9 - v10) >> 3);
  }
}

void sub_206F83A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpLayerGraph::ReplaceNode(uint64_t **this, ZinIrOpLayer *a2, ZinIrOpLayer *a3, const Layer2TDMapper::SourceLayer *a4)
{
  BOOL v7;
  BOOL v9;
  _QWORD *DynamicOffsetInfo;
  uint64_t result;
  char v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[2];
  ZinIrOpLayer **v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 29)
  {
    v18 = 0;
    v19 = 0;
    v16 = (ZinIrOpLayer **)&unk_24C02BB30;
    __p = 0;
    v7 = ZinIrOpLayerGraph::AddNode(this, a3, &v16);
    v16 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (!v7)
      return 0;
    goto LABEL_12;
  }
  v20[0] = a2;
  v15[0] = v20;
  v15[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v16, v15);
  v9 = ZinIrOpLayerGraph::AddNode(this, a3, &v16);
  v16 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (!v9)
    return 0;
  DynamicOffsetInfo = (_QWORD *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(a4);
  if (DynamicOffsetInfo[1] == *DynamicOffsetInfo
    || (result = Layer2TDMapper::LayerTracker::RecordSourceLayers((Layer2TDMapper::LayerTracker *)(this + 19), a3, (ZinIrOpLayer ***)a4), (_DWORD)result))
  {
    result = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)this, a2, a3);
    if ((_DWORD)result)
    {
LABEL_12:
      memset(v13, 0, sizeof(v13));
      v14 = 1065353216;
      v12 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, a3, v13);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v13);
      if ((v12 & 1) != 0)
        return ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
      return 0;
    }
  }
  return result;
}

void sub_206F83C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayerGraph::ReplaceNode(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayer ***a3)
{
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  ZinIrOpLayer *v11;
  BOOL v12;
  ZinIrOpLayer **v13;
  unint64_t v14;
  ZinIrOpLayer *v15;
  BOOL v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  int v34;
  ZinIrOpLayer *v35;
  uint64_t v36;
  ZinIrOpLayer **v37;
  void *__p;
  void *v39;
  ZinIrOpLayer *v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x24BDAC8D0];
  v40 = a2;
  if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a1, (uint64_t *)&v40))ZinAssertImpl("The old node should be present in the graph.");
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
    return 0;
  do
  {
    v35 = *v5;
    if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a1, (uint64_t *)&v35))
    {
      goto LABEL_33;
    }
    v37 = &v35;
    v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), (unint64_t **)&v37);
    v8 = v7 + 3;
    if (!v7)
      v8 = (_QWORD *)(a1 + 104);
    if (v8[1] != *v8)
      goto LABEL_33;
    v37 = &v35;
    v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 24), (unint64_t **)&v37);
    v10 = v9 + 3;
    if (!v9)
      v10 = (_QWORD *)(a1 + 104);
    if (v10[1] != *v10)
LABEL_33:
      ZinAssertImpl("new node in the chain should not have any edge at this point");
    ++v5;
  }
  while (v5 != v6);
  if (*a3 == a3[1])
    return 0;
  v11 = **a3;
  v41[0] = v40;
  v35 = (ZinIrOpLayer *)v41;
  v36 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v37, &v35);
  v12 = ZinIrOpLayerGraph::AddNode((uint64_t **)a1, v11, &v37);
  v37 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  if (!v12)
    return 0;
  if (!ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a1, v40, v11))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    ZinIrOpLayerGraph::ReplaceNode(result, v18, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  v13 = *a3;
  if ((unint64_t)((char *)a3[1] - (char *)*a3) >= 9)
  {
    v14 = 1;
    while (1)
    {
      v15 = v13[v14];
      v41[0] = v40;
      v35 = (ZinIrOpLayer *)v41;
      v36 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v37, &v35);
      v16 = ZinIrOpLayerGraph::AddNode((uint64_t **)a1, v15, &v37);
      v37 = (ZinIrOpLayer **)&unk_24C02BB18;
      if (__p)
      {
        v39 = __p;
        operator delete(__p);
      }
      if (!v16
        || (ZinIrOpLayerGraph::AddEdge(a1, (uint64_t)v11, (uint64_t)v15, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
      {
        return 0;
      }
      ++v14;
      v13 = *a3;
      v11 = v15;
      if (v14 >= a3[1] - *a3)
        goto LABEL_27;
    }
  }
  v15 = v11;
LABEL_27:
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  v25 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v40, v15, v33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  if ((v25 & 1) != 0)
    return ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v40, 0);
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    ZinFlattenCompositeLayer::MakeFlattenCompositeLayer(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  return result;
}

void sub_206F83F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayerGraph::MoveNodeBefore(ZinIrOpLayerGraph *this, size_t *a2, ZinIrOpLayer *a3)
{
  uint64_t **v4;
  char *v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  std::string *v14;
  __int128 v15;
  ZinIrTensor *v16;
  ZinIrOpLayer *v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  ZinIrOpLayer *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  ZinIrOpLayer *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  ZinIrOpLayer *v49;
  ZinIrOpLayer *v50;
  int inserted;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD **v56;
  BOOL v57;
  uint64_t v58;
  uint64_t **v60;
  uint64_t **v61;
  ZinIrOpLayer ****v62;
  ZinIrOpLayer *v63;
  int v64;
  _OWORD v65[2];
  int v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string v70;
  std::string v71;
  std::string v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  int64_t v76;
  _QWORD **v77;
  _QWORD *v78[2];
  ZinIrOpLayer *v79;
  size_t *v80;
  std::string v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v79 = a3;
  v80 = a2;
  if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&v80)|| !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&v79))
  {
    return 0;
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v67);
  if (v4)
    v5 = (char *)(v4 + 3);
  else
    v5 = (char *)this + 104;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v67);
  v7 = v6 + 3;
  if (!v6)
    v7 = (_QWORD *)((char *)this + 104);
  if (v7[1] - *v7 != 8)
    return 0;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v8 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 3, (unint64_t **)&v67);
  v9 = v8 + 3;
  if (!v8)
    v9 = (_QWORD *)((char *)this + 104);
  if (v9[1] == *v9)
    return 0;
  v10 = (uint64_t **)*((_QWORD *)v5 + 1);
  if (v10 == *(uint64_t ***)v5)
    return 0;
  std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<ZinIrOpLayer * const> const*>>((uint64_t)&v77, *(uint64_t ***)v5, v10);
  v11 = v77;
  if (v77 == v78)
  {
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "move_before");
      v14 = std::string::append(&v67, "_xfm", 4uLL);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v76 = v14->__r_.__value_.__r.__words[2];
      v75 = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v16 = (ZinIrTensor *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*v80 + 32))(v80, 0, 0);
      v17 = (ZinIrOpLayer *)v80;
      if (*((char *)v80 + 47) >= 0)
        v18 = *((unsigned __int8 *)v80 + 47);
      else
        v18 = v80[4];
      std::string::basic_string[abi:ne180100]((uint64_t)&v71, v18 + 1);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v71;
      else
        v19 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if (v18)
      {
        if (*((char *)v17 + 47) >= 0)
          v20 = (char *)v17 + 24;
        else
          v20 = (const void *)*((_QWORD *)v17 + 3);
        memmove(v19, v20, v18);
      }
      *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 95;
      if (v76 >= 0)
        v21 = (const std::string::value_type *)&v75;
      else
        v21 = (const std::string::value_type *)v75;
      if (v76 >= 0)
        v22 = HIBYTE(v76);
      else
        v22 = *((_QWORD *)&v75 + 1);
      v23 = std::string::append(&v71, v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v81, "_tensor", 7uLL);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v70, v12);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v70;
      else
        v27 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        size = v70.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v72, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      ZinIrTensor::CreateTensor(v16, (__int128 *)&v67, &v73);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v31 = (ZinIrOpLayer *)v80;
      v68 = v73;
      v69 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      if (*((char *)v31 + 47) >= 0)
        v34 = *((unsigned __int8 *)v31 + 47);
      else
        v34 = *((_QWORD *)v31 + 4);
      std::string::basic_string[abi:ne180100]((uint64_t)&v81, v34 + 1);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v81;
      else
        v35 = (std::string *)v81.__r_.__value_.__r.__words[0];
      if (v34)
      {
        if (*((char *)v31 + 47) >= 0)
          v36 = (char *)v31 + 24;
        else
          v36 = (const void *)*((_QWORD *)v31 + 3);
        memmove(v35, v36, v34);
      }
      *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 95;
      if (v76 >= 0)
        v37 = (const std::string::value_type *)&v75;
      else
        v37 = (const std::string::value_type *)v75;
      if (v76 >= 0)
        v38 = HIBYTE(v76);
      else
        v38 = *((_QWORD *)&v75 + 1);
      v39 = std::string::append(&v81, v37, v38);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v71, v12);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v71;
      else
        v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v42 = v71.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v72, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayer *, uint64_t *, std::string *))(*(_QWORD *)v31 + 176))(v31, &v68, &v67);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      v46 = v69;
      if (v69)
      {
        v47 = (unint64_t *)&v69->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (ZinIrOpLayer *)v11[4];
      v50 = v79;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      v72.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v67, &v72);
      inserted = ZinIrOpLayerGraph::InsertNodeBetween((uint64_t **)this, v45, v49, v50, (ZinIrOpLayer ***)&v67);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v67.__r_.__value_.__l.__size_)
      {
        v67.__r_.__value_.__r.__words[2] = v67.__r_.__value_.__l.__size_;
        operator delete((void *)v67.__r_.__value_.__l.__size_);
      }
      v52 = v74;
      if (v74)
      {
        v53 = (unint64_t *)&v74->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (SHIBYTE(v76) < 0)
        operator delete((void *)v75);
      v55 = (_QWORD *)v11[1];
      if (v55)
      {
        do
        {
          v56 = (_QWORD **)v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD **)v11[2];
          v57 = *v56 == v11;
          v11 = v56;
        }
        while (!v57);
      }
      v13 &= inserted;
      ++v12;
      v11 = v56;
    }
    while (v56 != v78);
  }
  v60 = (uint64_t **)v80;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v61 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)this + 8, (unint64_t **)&v67);
  v62 = (ZinIrOpLayer ****)(v61 + 3);
  if (!v61)
    v62 = (ZinIrOpLayer ****)((char *)this + 104);
  v63 = ***v62;
  memset(v65, 0, sizeof(v65));
  v66 = 1065353216;
  v64 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, v60, v63, v65);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v65);
  v58 = v13 & v64 & ZinIrOpLayerGraph::RemoveNode(this, (ZinIrOpLayer *)v80, 0);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v77, v78[0]);
  return v58;
}

void sub_206F845C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v42 - 168, *(_QWORD **)(v42 - 160));
  _Unwind_Resume(a1);
}

void sub_206F84720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x206F84708);
  JUMPOUT(0x206F8470CLL);
}

void sub_206F8473C()
{
  JUMPOUT(0x206F84718);
}

uint64_t ZinIrOpLayerGraph::SwapNodes(ZinIrOpLayerGraph *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  uint64_t result;
  ZinIrOpLayer *v5;
  int v6;
  int v7;
  int v8;
  _OWORD v9[2];
  int v10;
  ZinIrOpLayer *v11;
  ZinIrOpLayer *v12;

  v12 = a2;
  v11 = a3;
  result = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsConnected((uint64_t)this, (unint64_t *)&v12, (uint64_t *)&v11);
  if ((_DWORD)result)
  {
    if (*((_QWORD *)v12 + 12) - *((_QWORD *)v12 + 11) == 8)
    {
      v5 = v11;
    }
    else
    {
      v5 = v11;
      if (*((_QWORD *)v12 + 15) - *((_QWORD *)v12 + 14) == 8 && *((_QWORD *)v11 + 12) - *((_QWORD *)v11 + 11) != 8)
        return 0;
    }
    v6 = ZinIrOpLayerGraph::RemoveEdge((uint64_t)this, (uint64_t)v12, (uint64_t)v5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v7 = ZinIrOpLayerGraph::MoveIncomingEdges(this, v12, v11);
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    v8 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, (uint64_t **)v11, v12, v9);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v9);
    return v6 & v7 & v8 & ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v11, (uint64_t)v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  return result;
}

void sub_206F84854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayerGraph::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F84910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayerGraph::CloneSubGraph@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  ZinIrConstManager *v8;
  ZinIrContext *v9;
  ZinIrContext *v10;
  uint64_t **Hal;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  ZinIrTensor::MirInfo *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  size_t v37;
  std::string *p_p;
  const void *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  ZinIrOpLayer *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71[2];
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  ZinIrTensor::MirInfo *v77;
  std::string v78;
  std::string __p;
  uint64_t v80;
  std::__shared_weak_count *v81;
  _OWORD v82[2];
  int v83;

  v5 = a1;
  v6 = (uint64_t *)a4;
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 40) = 1065353216;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  v8 = *(ZinIrConstManager **)(v7 + 72);
  v9 = (ZinIrContext *)operator new();
  ZinIrContext::ZinIrContext(v9, (const ZinIrCompilerParameters *)(v7 + 176), v8, 0, 0);
  v10 = (ZinIrContext *)*v6;
  *v6 = (uint64_t)v9;
  if (v10)
  {
    (*(void (**)(ZinIrContext *))(*(_QWORD *)v10 + 8))(v10);
    v9 = (ZinIrContext *)*v6;
  }
  Hal = (uint64_t **)ZinIrTarget::GetHal(*(ZinIrTarget **)(**((_QWORD **)v9 + 124) + 32));
  memset(v82, 0, sizeof(v82));
  v83 = 1065353216;
  if (a2[2])
    v12 = a2;
  else
    v12 = (_QWORD *)v5;
  v13 = v12 + 1;
  v14 = (_QWORD *)*v12;
  if ((_QWORD *)*v12 != v12 + 1)
  {
    v67 = (_QWORD *)(v5 + 8);
    v64 = (uint64_t)(v6 + 1);
    v65 = v5;
    v66 = v6;
    do
    {
      v15 = v14 + 4;
      if (v67 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v5, v14 + 4))ZinAssertImpl("layer must be a member of the original graph");
      v16 = Hal;
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v15 + 32))(*v15, 0, 0);
      v18 = v17;
      v19 = *v6;
      v20 = *(_DWORD *)(v17 + 88);
      if (*(char *)(v17 + 47) >= 0)
        v21 = *(unsigned __int8 *)(v17 + 47);
      else
        v21 = *(_QWORD *)(v17 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v78, v21 + 1);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v78;
      else
        v22 = (std::string *)v78.__r_.__value_.__r.__words[0];
      if (v21)
      {
        if (*(char *)(v18 + 47) >= 0)
          v23 = (const void *)(v18 + 24);
        else
          v23 = *(const void **)(v18 + 24);
        memmove(v22, v23, v21);
      }
      *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 95;
      v24 = *(char *)(a3 + 23);
      if (v24 >= 0)
        v25 = (const std::string::value_type *)a3;
      else
        v25 = *(const std::string::value_type **)a3;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a3 + 23);
      else
        v26 = *(_QWORD *)(a3 + 8);
      v27 = std::string::append(&v78, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v18, &v77);
      v75 = 0;
      v76 = 0;
      LODWORD(v71[0]) = 0;
      v72 = 0;
      v73 = 0;
      v71[1] = 0;
      v74 = 0;
      ZinIrTensor::CreateTensor(v19, v20, (__int128 *)(v18 + 48), (__int128 *)&__p, &v77, &v75, (unsigned int *)v71, &v80);
      v29 = v76;
      Hal = v16;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v77;
      v77 = 0;
      if (v32)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v77, v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v33 = *v15;
      v69 = v80;
      v70 = v81;
      v34 = v33;
      if (v81)
      {
        v35 = (unint64_t *)&v81->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v34 = *v15;
      }
      if (*(char *)(v34 + 47) >= 0)
        v37 = *(unsigned __int8 *)(v34 + 47);
      else
        v37 = *(_QWORD *)(v34 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v37)
      {
        if (*(char *)(v34 + 47) >= 0)
          v39 = (const void *)(v34 + 24);
        else
          v39 = *(const void **)(v34 + 24);
        memmove(p_p, v39, v37);
      }
      *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v37) = 95;
      v40 = *(char *)(a3 + 23);
      if (v40 >= 0)
        v41 = (const std::string::value_type *)a3;
      else
        v41 = *(const std::string::value_type **)a3;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(a3 + 23);
      else
        v42 = *(_QWORD *)(a3 + 8);
      v43 = std::string::append(&__p, v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v72 = (void *)v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)v71 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v5 = v65;
      v45 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v33 + 176))(v33, &v69, v71);
      if (SHIBYTE(v72) < 0)
        operator delete(v71[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v46 = v70;
      if (v70)
      {
        v47 = (unint64_t *)&v70->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v71[1] = 0;
      v72 = 0;
      v73 = 0;
      v71[0] = &unk_24C02BB30;
      ZinIrOpLayerGraph::AddNode(Hal, v45, (ZinIrOpLayer ***)v71);
      v71[0] = &unk_24C02BB18;
      if (v71[1])
      {
        v72 = v71[1];
        operator delete(v71[1]);
      }
      v71[0] = v14 + 4;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v64, v14 + 4, (uint64_t)&std::piecewise_construct, (_QWORD **)v71)[3] = v45;
      v49 = v81;
      v6 = v66;
      if (v81)
      {
        v50 = (unint64_t *)&v81->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (_QWORD *)v14[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v14[2];
          v54 = *v53 == (_QWORD)v14;
          v14 = v53;
        }
        while (!v54);
      }
      v14 = v53;
    }
    while (v53 != v13);
    v14 = (_QWORD *)*v12;
  }
  if (v14 != v13)
  {
    do
    {
      v55 = v14[4];
      v56 = *(uint64_t **)(v55 + 88);
      v57 = *(uint64_t **)(v55 + 96);
      while (v56 != v57)
      {
        if (v13 != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)v12, v56))
        {
          v58 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v6 + 1, v56);
          if (!v58
            || (v59 = v58[3],
                (v60 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v6 + 1, v14 + 4)) == 0))
          {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          ZinIrOpLayerGraph::AddEdge((uint64_t)Hal, v59, v60[3], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
        ++v56;
      }
      v61 = (_QWORD *)v14[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (_QWORD *)v14[2];
          v54 = *v62 == (_QWORD)v14;
          v14 = v62;
        }
        while (!v54);
      }
      v14 = v62;
    }
    while (v62 != v13);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v82);
}

void sub_206F84EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, void *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t *v42;
  uint64_t v44;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(v42 + 1));
  v44 = *v42;
  *v42 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  _Unwind_Resume(a1);
}

uint64_t *std::list<ZinIrOpLayer *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>,std::__wrap_iter<ZinIrOpLayer **>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v11 = *a3;
    v10 = a3 + 1;
    v8[2] = v11;
    v12 = 1;
    if (v10 != a4)
    {
      v13 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v13;
        v8[1] = 0;
        v14 = *v10++;
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        v13 = v8;
      }
      while (v10 != a4);
    }
    v15 = *a2;
    *(_QWORD *)(v15 + 8) = v9;
    *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_206F85104(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_206F85124(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<ZinIrOpLayer * const> const*>>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  _QWORD *v4;
  uint64_t **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
      std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__emplace_hint_unique_impl<std::reference_wrapper<ZinIrOpLayer * const> const&>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_206F8519C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__emplace_hint_unique_impl<std::reference_wrapper<ZinIrOpLayer * const> const&>(uint64_t **a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t *)operator new(0x28uLL);
  v6[4] = **a3;
  v7 = (uint64_t **)std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__find_equal<ZinIrTensor *>(a1, a2, &v11, &v10, v6 + 4);
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v7, v6);
  }
  return v6;
}

void sub_206F85248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinIrOpLayerGraph::ReplaceNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in moving incoming edges.\n", a5, a6, a7, a8, 0);
}

_QWORD *ZinNEDualSourceElementWiseLayer::ZinNEDualSourceElementWiseLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;

  v16 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v16, 91);
  v17 = a2[1];
  v25 = *a2;
  v26 = (std::__shared_weak_count *)v17;
  v27 = v16;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ZinNELayer::ZinNELayer((uint64_t)a1, &v27, &v25, 0, a4, 0, a7, a8, 0, 0, a3, 0);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  *a1 = &off_24C025780;
  a1[54] = a6;
  a1[55] = a5;
  return a1;
}

void sub_206F853CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t ZinNEDualSourceElementWiseLayer::Lower()
{
  return 0;
}

uint64_t ZinNEDualSourceElementWiseLayer::LowerEngineCore()
{
  return 0;
}

__n128 ZinNEDualSourceElementWiseLayer::ExecutionOrderSort@<Q0>(int8x16_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  __n128 result;

  v4 = this[23].i64[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)operator new(0x28uLL);
  a2[1] = v5 + 40;
  a2[2] = v5 + 40;
  *(_QWORD *)v5 = v4;
  *(int8x16_t *)(v5 + 8) = vextq_s8(this[27], this[27], 8uLL);
  result = (__n128)this[24];
  *(__n128 *)(v5 + 24) = result;
  *a2 = v5;
  return result;
}

uint64_t ZinNEDualSourceElementWiseLayer::Clone(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void **v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void **v19;
  const void *v20;
  uint64_t v21;
  size_t v22;
  void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  size_t v38;
  void **v39;
  const void *v40;
  unint64_t *v41;
  unint64_t v42;
  ZinEngineLayerMirInfo *v43;
  uint64_t *GroupId;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48[2];
  void *__p[2];
  char v50;

  v6 = *(_QWORD *)(*a2 + 16);
  v7 = a1[46];
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 12);
  if (v50 < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_ibroadcast1");
  v11 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v7, (const void **)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  v12 = a1[55];
  if (*((char *)a3 + 23) >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 12);
  if (v50 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_ibroadcast2");
  v16 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v12, (const void **)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  v17 = a1[54];
  if (*((char *)a3 + 23) >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 3);
  if (v50 < 0)
    v19 = (void **)__p[0];
  if (v18)
  {
    if (*((char *)a3 + 23) >= 0)
      v20 = a3;
    else
      v20 = *a3;
    memmove(v19, v20, v18);
  }
  *(_DWORD *)((char *)v19 + v18) = 7824735;
  v47 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v17, (const void **)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  v21 = a1[48];
  if (*((char *)a3 + 23) >= 0)
    v22 = *((unsigned __int8 *)a3 + 23);
  else
    v22 = (size_t)a3[1];
  v23 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 4);
  if (v50 < 0)
    v23 = (void **)__p[0];
  if (v22)
  {
    if (*((char *)a3 + 23) >= 0)
      v24 = a3;
    else
      v24 = *a3;
    memmove(v23, v24, v22);
  }
  v25 = v16;
  strcpy((char *)v23 + v22, "_goc");
  v26 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v21, (const void **)__p);
  v27 = v11;
  if (v50 < 0)
    operator delete(__p[0]);
  v28 = a1[49];
  if (*((char *)a3 + 23) >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = (size_t)a3[1];
  v30 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v29 + 11);
  if (v50 < 0)
    v30 = (void **)__p[0];
  if (v29)
  {
    if (*((char *)a3 + 23) >= 0)
      v31 = a3;
    else
      v31 = *a3;
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "_activation");
  v32 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v28, (const void **)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  v33 = operator new();
  v34 = *a2;
  v35 = (std::__shared_weak_count *)a2[1];
  v48[0] = v34;
  v48[1] = (uint64_t)v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 23) >= 0)
    v38 = *((unsigned __int8 *)a3 + 23);
  else
    v38 = (size_t)a3[1];
  v39 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v38 + 5);
  if (v50 < 0)
    v39 = (void **)__p[0];
  if (v38)
  {
    if (*((char *)a3 + 23) >= 0)
      v40 = a3;
    else
      v40 = *a3;
    memmove(v39, v40, v38);
  }
  strcpy((char *)v39 + v38, "_neew");
  ZinNEDualSourceElementWiseLayer::ZinNEDualSourceElementWiseLayer((_QWORD *)v33, v48, (__int128 *)__p, v27, v25, v47, v26, v32);
  if (v50 < 0)
    operator delete(__p[0]);
  if (v35)
  {
    v41 = (unint64_t *)&v35->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  ZinANELayer::CopyDMALayers((_QWORD *)v33, (const ZinANELayer *)a1);
  if (a1[33])
  {
    ZinANELayer::CopyMirInfo((ZinANELayer *)a1, (ZinEngineLayerMirInfo **)__p);
    ZinANELayer::SetMirInfo(v33, (int **)__p);
    v43 = (ZinEngineLayerMirInfo *)__p[0];
    __p[0] = 0;
    if (v43)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v43);
      MEMORY[0x20BD002F8]();
    }
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(v33, *GroupId);
  v45 = *(_QWORD *)((char *)a1 + 420);
  if ((v45 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v33 + 420) = v45;
    *(_BYTE *)(v33 + 424) = 1;
  }
  return v33;
}

void sub_206F8598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)&__p, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinNEDualSourceElementWiseLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F85AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinNEDualSourceElementWiseLayer::SpatialSplitCopy(ZinNEDualSourceElementWiseLayer *this, const TiledLayerTensorRegions *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v18);
  v16 = v18;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &__p);
  v6 = (*(uint64_t (**)(ZinNEDualSourceElementWiseLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v17;
  if (v17)
  {
    v8 = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(v6 + 264);
  if (v10 && !*(_BYTE *)(v10 + 233))
  {
    *(_QWORD *)(v10 + 200) = 1;
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_WORD *)(v10 + 232) = 0;
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v6;
}

void sub_206F85BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void ZinNEDualSourceElementWiseLayer::GetFusedKernel(uint64_t a1@<X0>, int a2@<W1>, ZinIrKernel **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  ZinIrKernel *v17;
  ZinIrKernel *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char *v30;
  size_t v31;
  std::string *v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  ZinIrKernel *v49;
  ZinIrKernel *v50;
  void *v51;
  uint64_t v52;
  size_t v53;
  std::string *v54;
  const void *v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  ZinIrKernel *v61;
  ZinIrKernel *v62;
  uint64_t v63;
  ZinIrKernel *v64;
  std::string v65;
  uint64_t v66;
  void *__p[2];
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  std::string v79;
  __int128 v80;
  std::string v81;
  int64x2_t v82;
  unsigned int v83;
  uint64_t v84[2];

  v84[0] = 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 432) + 64) + 12) == 4)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    v83 = 0;
    v81.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 56);
    *(_OWORD *)&v81.__r_.__value_.__r.__words[1] = xmmword_207A7D4F0;
    v82 = vdupq_n_s64(1uLL);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    CreateElementWiseSubCoefficients((uint64_t)v81.__r_.__value_.__l.__data_, *(_DWORD *)(v7 + 88), &v83, &v80);
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v79 = *(std::string *)(a1 + 24);
    __p[0] = 0;
    __p[1] = 0;
    v68 = 0;
    v8 = operator new();
    v9 = v8;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v80;
    if (*((_QWORD *)&v80 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    ZinIrWeight::ZinIrWeight(v8, &v65, __p, v83, &v81, 1, 1262703187, 0);
    v78 = v9;
    size = (std::__shared_weak_count *)v65.__r_.__value_.__l.__size_;
    if (v65.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    *(int64x2_t *)__p = vdupq_n_s64(1uLL);
    v68 = 1;
    *(_QWORD *)&v15 = 0x100000001;
    *((_QWORD *)&v15 + 1) = 0x100000001;
    v69 = v15;
    v70 = 0x100000001;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    v74 = v15;
    v75 = *(_QWORD *)(v6 + 56);
    v76 = 0;
    v77 = 0;
    v84[1] = 0;
    v66 = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat &,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>((__int128 *)&v79, (int *)&v83, (__int128 *)__p, &v78, (uint64_t *)&v65);
    v16 = v65.__r_.__value_.__r.__words[0];
    v65.__r_.__value_.__r.__words[0] = 0;
    v17 = (ZinIrKernel *)v84[0];
    v84[0] = v16;
    if (v17)
    {
      ZinIrKernel::~ZinIrKernel(v17);
      MEMORY[0x20BD002F8]();
      v18 = (ZinIrKernel *)v65.__r_.__value_.__r.__words[0];
      v65.__r_.__value_.__r.__words[0] = 0;
      if (v18)
      {
        ZinIrKernel::~ZinIrKernel(v18);
        MEMORY[0x20BD002F8]();
      }
    }
    v19 = v78;
    v78 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = *(_QWORD *)(a1 + 384);
  if (!v23)
  {
    v27 = v84[0];
    *a3 = 0;
    if (!v27)
      return;
LABEL_54:
    if (*(char *)(v27 + 23) >= 0)
      v40 = *(unsigned __int8 *)(v27 + 23);
    else
      v40 = *(_QWORD *)(v27 + 8);
    v41 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v40 + 1);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v40)
    {
      if (*(char *)(v27 + 23) >= 0)
        v42 = (const void *)v27;
      else
        v42 = *(const void **)v27;
      memmove(v41, v42, v40);
    }
    *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v65, "fuse_neew_kernel");
    v43 = std::string::append(&v65, "_xfm", 4uLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v79;
    else
      v45 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v46 = v79.__r_.__value_.__l.__size_;
    v47 = std::string::append(&v81, (const std::string::value_type *)v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v68 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> &,std::string>((uint64_t)v84, (uint64_t)__p, (uint64_t *)&v80);
    goto LABEL_71;
  }
  v26 = *(_QWORD *)(v23 + 136);
  v25 = v23 + 136;
  v24 = v26;
  v27 = v84[0];
  *a3 = 0;
  if (v27)
    v28 = a2 == 0;
  else
    v28 = 0;
  if (v28 && v24 != 0)
  {
    v52 = *(_QWORD *)v25;
    if (*(char *)(*(_QWORD *)v25 + 23) >= 0)
      v53 = *(unsigned __int8 *)(*(_QWORD *)v25 + 23);
    else
      v53 = *(_QWORD *)(*(_QWORD *)v25 + 8);
    v54 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v53 + 7);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v53)
    {
      if (*(char *)(v52 + 23) >= 0)
        v55 = (const void *)v52;
      else
        v55 = *(const void **)v52;
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, "_fused_");
    v56 = *(char *)(v84[0] + 23);
    if (v56 >= 0)
      v57 = (const std::string::value_type *)v84[0];
    else
      v57 = *(const std::string::value_type **)v84[0];
    if (v56 >= 0)
      v58 = *(unsigned __int8 *)(v84[0] + 23);
    else
      v58 = *(_QWORD *)(v84[0] + 8);
    v59 = std::string::append(&v81, v57, v58);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v68 = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    ZinIrKernel::FuseScaleBiasWithBottom(v52, (__int128 *)__p, v84, (uint64_t *)&v79);
    v61 = (ZinIrKernel *)v79.__r_.__value_.__r.__words[0];
    v79.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a3, v61);
    v62 = (ZinIrKernel *)v79.__r_.__value_.__r.__words[0];
    v79.__r_.__value_.__r.__words[0] = 0;
    if (v62)
    {
      ZinIrKernel::~ZinIrKernel(v62);
      MEMORY[0x20BD002F8]();
    }
    if ((SHIBYTE(v68) & 0x80000000) == 0)
      goto LABEL_100;
    v51 = __p[0];
LABEL_99:
    operator delete(v51);
LABEL_100:
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    goto LABEL_102;
  }
  if (v27)
    goto LABEL_54;
  if (v24)
  {
    v30 = *(char **)v25;
    if (*(char *)(*(_QWORD *)v25 + 23) >= 0)
      v31 = *(unsigned __int8 *)(*(_QWORD *)v25 + 23);
    else
      v31 = *(_QWORD *)(*(_QWORD *)v25 + 8);
    v32 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v31 + 1);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v31)
    {
      if (v30[23] >= 0)
        v33 = v30;
      else
        v33 = *(char **)v30;
      memmove(v32, v33, v31);
    }
    *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v65, "fuse_negoc_kernel");
    v34 = std::string::append(&v65, "_xfm", 4uLL);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v79;
    else
      v36 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v37 = v79.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v81, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v68 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>(v25, (uint64_t)__p, (uint64_t *)&v80);
LABEL_71:
    v49 = (ZinIrKernel *)v80;
    *(_QWORD *)&v80 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a3, v49);
    v50 = (ZinIrKernel *)v80;
    *(_QWORD *)&v80 = 0;
    if (v50)
    {
      ZinIrKernel::~ZinIrKernel(v50);
      MEMORY[0x20BD002F8]();
    }
    if (SHIBYTE(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
    v51 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_99;
  }
LABEL_102:
  if (*a3)
  {
    v63 = *(_QWORD *)(a1 + 264);
    if (v63)
      ZinIrKernel::SetSmallSourceMode((uint64_t)*a3, *(_DWORD *)(v63 + 144));
  }
  v64 = (ZinIrKernel *)v84[0];
  v84[0] = 0;
  if (v64)
  {
    ZinIrKernel::~ZinIrKernel(v64);
    MEMORY[0x20BD002F8]();
  }
}

void sub_206F862B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  ZinIrKernel **v38;
  uint64_t v39;

  if (a21 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v38, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v39 - 80), 0);
  _Unwind_Resume(a1);
}

uint64_t ZinNEDualSourceElementWiseLayer::ComputeMirInfoCore(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[5];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 376))(v9);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v6 = (_QWORD *)*a3;
  v7 = v9[0];
  v6[10] = v9[1];
  v6[11] = *(_QWORD *)(v5 + 56);
  v6[13] = v7;
  return 0;
}

uint64_t ZinChannelToSpaceUtils::CreateFusedDeconv(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int ShuffledKernelDimensions;
  char FusedPadding;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  ZinKernelSparsityCache *KernelSparsityCache;
  uint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::__shared_weak_count *size;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  ZinIrConvolutionInfo *v67;
  unint64_t *v68;
  unint64_t v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::string::size_type v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  ZinIrKernel *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  _QWORD *v89;
  int *v90;
  uint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  ZinIrKernel *v95;
  std::string v96;
  void *v97[2];
  int64_t v98;
  std::string v99;
  void *__p[2];
  std::string::size_type v101;
  std::string v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  std::string v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  int64_t v111;

  v11 = a2[2];
  v90 = *(int **)(a4 + 64);
  v12 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  v13 = (int *)a2[17];
  ZinIrKernel::GetWeightDimensions((ZinIrKernel *)v13, (uint64_t)&v110);
  v109 = 0;
  v107 = 0u;
  v108 = 0u;
  v89 = a2;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  ShuffledKernelDimensions = ZinPixelShuffleUtils::GetShuffledKernelDimensions((uint64_t *)&v110, v90 + 3, a6, *(_DWORD *)(v14 + 88), (uint64_t *)&v107);
  memset(&v106, 0, sizeof(v106));
  v88 = v12;
  FusedPadding = ZinPixelShuffleUtils::GetFusedPadding(a3, v12 + 48, (uint64_t)&v110, v13 + 88, &v107, v90 + 3, (int *)&v106);
  if (!ShuffledKernelDimensions || (FusedPadding & 1) == 0)
    return 0;
  v86 = a6;
  v87 = v13;
  v83 = v11;
  v84 = a4;
  v85 = a1;
  v17 = v90[3];
  v18 = v90[4];
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)&v102, *((_QWORD *)&v107 + 1) * v107 * v108 * *((_QWORD *)&v108 + 1) * v109);
  v19 = v107;
  if ((uint64_t)v107 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = *((_QWORD *)&v107 + 1);
    do
    {
      if (v22 >= 1)
      {
        v23 = 0;
        v24 = v108;
        do
        {
          if (v24 >= 1)
          {
            v25 = 0;
            v26 = *((_QWORD *)&v108 + 1);
            do
            {
              v27 = v25 + 1;
              if (v26 >= 1)
              {
                v28 = 0;
                v91 = v21;
                v29 = 40 * v21;
                do
                {
                  v30 = v107;
                  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                           + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                  v32 = (std::string *)(v105 + v29);
                  if (!v31)
                    v32 = &v102;
                  v33 = v28 / v17;
                  v32->__r_.__value_.__r.__words[0] = v20 + (++v28 % v17 + v27 % v18 * v17) * v30;
                  v32->__r_.__value_.__l.__size_ = v23;
                  v32->__r_.__value_.__r.__words[2] = v25 / v18;
                  v32[1].__r_.__value_.__r.__words[0] = v33;
                  v32[1].__r_.__value_.__l.__size_ = 0;
                  v26 = *((_QWORD *)&v108 + 1);
                  v29 += 40;
                }
                while (*((uint64_t *)&v108 + 1) > v28);
                v24 = v108;
                v21 = v91 + v28;
              }
              ++v25;
            }
            while (v24 > v27);
            v22 = *((_QWORD *)&v107 + 1);
          }
          ++v23;
        }
        while (v22 > v23);
        v19 = v107;
      }
      ++v20;
    }
    while (v19 > v20);
  }
  v34 = v89[17];
  if (*(char *)(v88 + 47) >= 0)
    v35 = *(unsigned __int8 *)(v88 + 47);
  else
    v35 = *(_QWORD *)(v88 + 32);
  v36 = &v99;
  std::string::basic_string[abi:ne180100]((uint64_t)&v99, v35 + 1);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = (std::string *)v99.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*(char *)(v88 + 47) >= 0)
      v37 = (const void *)(v88 + 24);
    else
      v37 = *(const void **)(v88 + 24);
    memmove(v36, v37, v35);
  }
  *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v96, "ctos_kernel");
  v38 = std::string::append(&v96, "_xfm", 4uLL);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v98 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)v97 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (v98 >= 0)
    v40 = v97;
  else
    v40 = (void **)v97[0];
  if (v98 >= 0)
    v41 = HIBYTE(v98);
  else
    v41 = (std::string::size_type)v97[1];
  v42 = std::string::append(&v99, (const std::string::value_type *)v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v101 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = v87[82];
  v45 = v87[83];
  v46 = v87[84];
  v48 = v90[3];
  v47 = v90[4];
  v49 = v90[5];
  KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache((ZinIrContext *)v89[2]);
  ZinIrKernel::ShuffleKernel(v34, (__int128 *)__p, (uint64_t)&v102, v44, v45, v46, v48, v47, (uint64_t *)&v95, v49, (uint64_t)&v107, v86, KernelSparsityCache, (__int128 *)&v106, 1, v87[94]);
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&v102);
  if (!v95)
    return 0;
  v51 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0, 0);
  v52 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v107, "ctos_fused");
  v53 = std::string::append(v52, "_xfm", 4uLL);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  v55 = std::string::insert(&v102, 0, "_", 1uLL);
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v111 = v55->__r_.__value_.__r.__words[2];
  v110 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SBYTE7(v108) < 0)
    operator delete((void *)v107);
  v57 = *(_DWORD *)(v51 + 88);
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v85 + 16))(&v106, v85, 0);
  if (v111 >= 0)
    v58 = (const std::string::value_type *)&v110;
  else
    v58 = (const std::string::value_type *)v110;
  if (v111 >= 0)
    v59 = HIBYTE(v111);
  else
    v59 = *((_QWORD *)&v110 + 1);
  v60 = std::string::append(&v106, v58, v59);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&v108 = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  v107 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v94 = 0;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0uLL;
  LODWORD(v102.__r_.__value_.__l.__data_) = 0;
  v103 = 0;
  *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = 0uLL;
  v104 = 0;
  ZinIrTensor::CreateTensor(v83, v57, (__int128 *)(v51 + 48), &v107, &v94, (uint64_t *)&v99, (unsigned int *)&v102, (uint64_t *)__p);
  size = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
  if (v99.__r_.__value_.__l.__size_)
  {
    v63 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v65 = v94;
  v94 = 0;
  if (v65)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v94, v65);
  if (SBYTE7(v108) < 0)
    operator delete((void *)v107);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v66 = operator new();
  v67 = (ZinIrConvolutionInfo *)operator new();
  ZinIrConvolutionInfo::ZinIrConvolutionInfo(v67);
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
  v92 = __p[0];
  v93 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v68 = (unint64_t *)((char *)__p[1] + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(&v107, v85, 1);
  if (v111 >= 0)
    v70 = (const std::string::value_type *)&v110;
  else
    v70 = (const std::string::value_type *)v110;
  if (v111 >= 0)
    v71 = HIBYTE(v111);
  else
    v71 = *((_QWORD *)&v110 + 1);
  v72 = std::string::append((std::string *)&v107, v70, v71);
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  ZinConvLayer::ZinConvLayer(v66, &v106, &v92, &v102, &v95);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SBYTE7(v108) < 0)
    operator delete((void *)v107);
  v74 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v106.__r_.__value_.__r.__words[0];
  v106.__r_.__value_.__r.__words[0] = 0;
  if (v77)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v79 = (unint64_t *)((char *)__p[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  v81 = v95;
  v95 = 0;
  if (v81)
  {
    ZinIrKernel::~ZinIrKernel(v81);
    MEMORY[0x20BD002F8]();
  }
  return v66;
}

void sub_206F86BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,ZinIrKernel *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;

  if (a58 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 169) < 0)
    operator delete(*(void **)(v59 - 192));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v61 = *(_QWORD *)(v59 - 216);
  *(_QWORD *)(v59 - 216) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  MEMORY[0x20BD002F8](v58, 0x10B3C4024B96488);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  if (*(char *)(v59 - 121) < 0)
    operator delete(*(void **)(v59 - 144));
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

void ZinMirMemCacheStrategyNone::ZinMirMemCacheStrategyNone(ZinMirMemCacheStrategyNone *this, uint64_t a2, uint64_t a3, char a4, BOOL a5, char a6, char a7)
{
  _QWORD *v7;

  ZinMirMemCacheStrategyBase::ZinMirMemCacheStrategyBase(this, a2, a3, a4, a5, a6, a7);
  *v7 = &off_24C023C98;
}

void ZinMirMemCacheStrategyNone::~ZinMirMemCacheStrategyNone(ZinMirMemCacheStrategyNone *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinMirMemCacheStrategyNone::PerformAllocation(ZinMirMemCacheStrategyNone *this, const ZinIrControlFlowGraph *a2)
{
  return 0;
}

uint64_t ZinParseRingBufferReaderUnit(const __CFDictionary *a1, ZinIrRingBufferReaderUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  const __CFString *v11;
  uint64_t result;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v11 = CFSTR("InvalidParams");
LABEL_10:
    ZinIrUnitStatus::SetError(a3, v11);
    return 3;
  }
  v8 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("RingBufferReaderOffsetInfo"));
  if (!v8
    || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFArrayGetTypeID())
    || ZinParseRingBufferOffset(v9, a2, a3))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinParseRingBufferReaderUnit();
    v11 = CFSTR("InvalidUnitRingBufferOffset");
    goto LABEL_10;
  }
  result = ZinParseRingBufferReaderOutputSize(v6, a2, a3);
  if ((_DWORD)result)
  {
    v11 = CFSTR("InvalidUnitRingBufferReaderOutputSizeInfo");
    goto LABEL_10;
  }
  return result;
}

void ZinParseRingBufferReaderUnit()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to retrieve the array containing offset info for RingBufferReader.\n", v0, 2u);
}

void ZinAneTdHw_v11::ZinAneTdHw_v11(ZinAneTdHw_v11 *this, unsigned int a2, char a3, int a4)
{
  _OWORD *v7;

  v7 = (_OWORD *)((char *)this + 1000);
  bzero(this, 0x3E4uLL);
  *((_QWORD *)this + 127) = 0;
  *v7 = 0u;
  *((_BYTE *)this + 1024) = a3;
  *((_DWORD *)this + 257) = a4;
}

uint64_t ZinAneTdHw_v11::GetRegisterValueFromAddress(ZinAneTdHw_v11 *this, unsigned int a2)
{
  char *v2;
  unsigned int v3;

  if (a2 <= 0x4B)
  {
    v2 = (char *)this + 484;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 1280;
  if (a2 - 1280 <= 0x63)
  {
    v2 = (char *)this + 788;
LABEL_13:
    a2 = v3;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 2304;
  if (a2 - 2304 <= 0x13)
  {
    v2 = (char *)this + 896;
    goto LABEL_13;
  }
  v3 = a2 - 3328;
  if (a2 - 3328 <= 0x13)
  {
    v2 = (char *)this + 924;
    goto LABEL_13;
  }
  v3 = a2 - 4352;
  if (a2 - 4352 <= 0xD3)
  {
    v2 = (char *)this + 568;
    goto LABEL_13;
  }
  v3 = a2 - 5376;
  if (a2 - 5376 <= 0x23)
  {
    v2 = (char *)this + 952;
    goto LABEL_13;
  }
  a2 -= 6400;
  if (a2 <= 0x117)
  {
    v2 = (char *)this + 36;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  return 0;
}

uint64_t ZinIrOpt::TopkGatherToTopk(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char **v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD v39[4];
  uint64_t v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[40];
  void **v45[23];
  uint64_t v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v38, "topk");
  v39[0] = &off_24C002BA0;
  v39[3] = v39;
  v23 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v40, &v23, 1);
  std::string::basic_string[abi:ne180100]<0>(v41, "gather");
  v42[0] = &off_24C002BF8;
  v43 = v42;
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v44, &v22, 1);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v32 = &v24;
  v33 = 0;
  v24 = (char *)operator new(0xC0uLL);
  v25 = (uint64_t)v24;
  v26 = v24 + 192;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v26, (uint64_t)v38, (uint64_t)v45, (uint64_t)v24);
  v36[0] = &off_24C002C50;
  v37 = v36;
  ZinLinearPattern::ZinLinearPattern(v45, &v24, a2, 0, v36, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v45, &v27);
  v5 = v27;
  v4 = v28;
  v47[0] = v27;
  v47[1] = v28;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = (char **)&v29;
  v33 = 0;
  v6 = operator new(0x10uLL);
  v29 = v6;
  v31 = v6 + 2;
  *v6 = v5;
  v6[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v30 = v6 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v47);
  v9 = v28;
  if (v28)
  {
    v10 = (unint64_t *)&v28->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v45[0] = (void **)&off_24C01BCC8;
  v32 = (char **)&v46;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  ZinPattern::~ZinPattern((ZinPattern *)v45);
  v12 = v37;
  if (v37 == v36)
  {
    v13 = 4;
    v12 = v36;
    goto LABEL_13;
  }
  if (v37)
  {
    v13 = 5;
LABEL_13:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v32 = &v24;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  for (i = 0; i != -24; i -= 12)
  {
    v15 = &v38[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v44[i * 8]);
    v16 = *(_QWORD **)&v44[i * 8 - 8];
    if (&v42[i] == v16)
    {
      v16 = v15 + 15;
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_20;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
    if (SHIBYTE(v41[i + 2]) < 0)
      operator delete((void *)v15[12]);
  }
  v34[0] = &off_24C002CA8;
  v34[1] = &v29;
  v35 = v34;
  v18 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v34, 1);
  v19 = v35;
  if (v35 == v34)
  {
    v20 = 4;
    v19 = v34;
LABEL_27:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v35)
  {
    v20 = 5;
    goto LABEL_27;
  }
  v45[0] = (void **)&v29;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v45);
  return v18;
}

void sub_206F87334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  char *v54;
  char *v56;
  uint64_t v57;

  v56 = a25;
  if (a25 == v54)
  {
    v57 = 4;
    v56 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_6:
  a54 = (void **)&a16;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a54);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002BA0;
  return result;
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002BA0;
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  v3 = *(_DWORD *)(v2 + 8) == 66 && *(unsigned __int8 *)(v2 + 56) != 0;
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002BF8;
  return result;
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002BF8;
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t ValueAt;
  uint64_t v12;
  _BOOL4 v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = v2[8];
  if (*(_DWORD *)(v3 + 8) == 55 && v2[12] - v2[11] == 16)
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)(v3 + 176), *(_QWORD *)(v3 + 184), (uint64_t)(*(_QWORD *)(v3 + 184) - *(_QWORD *)(v3 + 176)) >> 2);
    v5 = __p;
    if (v16 - (_BYTE *)__p != 4)
    {
      v13 = 0;
      if (!__p)
        return v13 | 0x100u;
      goto LABEL_17;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 88) + 8);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
    v8 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 88);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
    if (v9)
      v10 = v7 == 0;
    else
      v10 = 1;
    v13 = !v10
       && (ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v7 + 48), *(_DWORD *)__p),
           GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v9 + 48), *(_DWORD *)__p) >= ValueAt)
       && (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 88) + 8) + 64),
           *(_DWORD *)(v12 + 8) == 66)
       && *(_QWORD *)(v12 + 16) == ValueAt;
    v5 = __p;
    if (__p)
    {
LABEL_17:
      v16 = v5;
      operator delete(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 | 0x100u;
}

void sub_206F876D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002C50;
  return result;
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002C50;
}

BOOL std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  void *__p[2];
  char v8;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(SingleMatch + 88) + 8) + 88) == **(_QWORD **)(SingleMatch + 88);
}

void sub_206F87800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C002CA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C002CA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t SingleMatch;
  ZinIrOpLayer *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t *v16;
  _BYTE *v17;
  const void *v18;
  __n128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  ZinIrOpLayer *TopK;
  BOOL v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  BOOL v31;
  BOOL v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _QWORD v41[2];
  void *v42;
  void *v43;
  void *v44;
  _BYTE __p[48];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];

  v53[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v5 = *v3;
  v4 = v3[1];
  if (*v3 == v4)
    return 0;
  v6 = *a2;
  v34 = *a3;
  while (1)
  {
    v7 = v6;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v5 + 8))(*v5))
      goto LABEL_28;
    v8 = *v5;
    std::string::basic_string[abi:ne180100]<0>(__p, "gather");
    SingleMatch = ZinPattern::GetSingleMatch(v8, __p);
    v10 = (ZinIrOpLayer *)SingleMatch;
    if ((__p[23] & 0x80000000) != 0)
      break;
    if (SingleMatch)
      goto LABEL_8;
LABEL_28:
    v5 += 2;
    v6 = v7;
    if (v5 == v4)
      return 0;
  }
  operator delete(*(void **)__p);
  if (!v10)
    goto LABEL_28;
LABEL_8:
  v11 = (uint64_t *)*((_QWORD *)v10 + 11);
  v13 = *v11;
  v12 = v11[1];
  v35 = **((_QWORD **)v10 + 14);
  v14 = *(_QWORD *)(v12 + 64);
  v39 = *(_DWORD *)(v14 + 28);
  v40 = *(_DWORD *)(v14 + 24);
  v38 = *(_DWORD *)(v14 + 12);
  v36 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0)
                  + 88);
  v37 = *(_QWORD *)(v14 + 16);
  if (*(char *)(v12 + 47) >= 0)
    v15 = *(unsigned __int8 *)(v12 + 47);
  else
    v15 = *(_QWORD *)(v12 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 4);
  v16 = v4;
  if (__p[23] >= 0)
    v17 = __p;
  else
    v17 = *(_BYTE **)__p;
  if (v15)
  {
    if (*(char *)(v12 + 47) >= 0)
      v18 = (const void *)(v12 + 24);
    else
      v18 = *(const void **)(v12 + 24);
    memmove(v17, v18, v15);
  }
  strcpy(&v17[v15], "topk");
  v19 = ZinObjectNameFactory::ZinObjectNameFactory(v51, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v13 + 80))(__p, v13, 0, 0, v19);
  v4 = v16;
  v20 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  v21 = *(_OWORD *)(v20 + 64);
  *(_OWORD *)&__p[8] = *(_OWORD *)(v20 + 48);
  *(_OWORD *)&__p[24] = v21;
  *(_QWORD *)&__p[40] = *(_QWORD *)(v20 + 80);
  v22 = *(_QWORD *)(v12 + 16);
  v23 = operator new(0x78uLL);
  v43 = (char *)v23 + 120;
  v44 = (char *)v23 + 120;
  v24 = v48;
  v23[4] = v47;
  v23[5] = v24;
  v23[6] = v49;
  *((_DWORD *)v23 + 28) = v50;
  v25 = *(_OWORD *)&__p[16];
  *v23 = *(_OWORD *)__p;
  v23[1] = v25;
  v26 = v46;
  v23[2] = *(_OWORD *)&__p[32];
  v23[3] = v26;
  v42 = v23;
  TopK = (ZinIrOpLayer *)ZinBuilder::CreateTopK(v22, (uint64_t)v51, (uint64_t *)&v42, v36, v38, v37, v40, v39, v14 + 32, 0);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v53[0] = v12;
  v41[0] = v53;
  v41[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v42, v41);
  v28 = ZinIrOpLayerGraph::AddNode(v7, TopK, (ZinIrOpLayer ***)&v42);
  v42 = &unk_24C02BB18;
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v29 = ZinIrOpLayerGraph::AddEdge((uint64_t)v7, v13, (uint64_t)TopK, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v30 = ZinIrOpLayerGraph::AddEdge((uint64_t)v7, (uint64_t)TopK, v35, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v31 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v7, (ZinIrOpLayer *)v12, 0);
  v32 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v7, v10, 0);
  v51[0] = off_24C01FBB0;
  if (v52 < 0)
    operator delete((void *)v51[1]);
  if ((v28 & v29 & v30 & v31 & v32 & 1) != 0)
    goto LABEL_28;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v34);
  return 3;
}

void sub_206F87CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v31 - 144) = off_24C01FBB0;
  if (*(char *)(v31 - 113) < 0)
    operator delete(*(void **)(v31 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::TopkGatherToTopk(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v1 = (_QWORD *)*v1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Unable to fuse %s and gather to topk\n", (uint8_t *)&v2, 0xCu);
}

uint64_t ZinPixelShuffleUnshuffleTransform::ZinPixelShuffleUnshuffleTransform(uint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)result = &off_24C025C20;
  *(_QWORD *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = *a3;
  *(_QWORD *)(result + 32) = *a4;
  v4 = a4 + 1;
  v5 = a4[1];
  *(_QWORD *)(result + 40) = v5;
  v6 = result + 40;
  v7 = a4[2];
  *(_QWORD *)(result + 48) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *a4 = v4;
    *v4 = 0;
    a4[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 32) = v6;
  }
  *(_QWORD *)(result + 56) = 0;
  return result;
}

uint64_t ZinPixelShuffleUnshuffleTransform::Run(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform **a3, _QWORD *a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t PaddingInfo;
  uint64_t result;

  if (*(_QWORD *)(a1 + 8) != *((_QWORD *)*a3 + 11))
    ZinAssertImpl("Error: Serialized source layer group ID does not match current node.");
  if (a4[1] == *a4)
    ZinAssertImpl("Error: Invalid number of input dimensions.");
  v8 = *(_QWORD **)(a1 + 56);
  if (!v8)
  {
    v10 = a1 + 16;
    v9 = *(_DWORD *)(a1 + 16);
    if (v9 == 1)
    {
      v8 = (_QWORD *)operator new();
      *v8 = &unk_24C020250;
      v8[1] = v10;
      v8[2] = a1 + 32;
    }
    else
    {
      if (v9)
        ZinAssertImpl("Error: Unknown ZinPixelShuffleUnshuffleTransform type.");
      v8 = (_QWORD *)operator new();
      *v8 = &unk_24C01E948;
      v8[1] = v10;
    }
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v8;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v8 = *(_QWORD **)(a1 + 56);
      if (!v8)
        ZinAssertImpl("Error: Unexpected null handler.");
    }
  }
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(*a3);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 24))(v8, PaddingInfo);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, ZinSpatialSplitTransform **, _QWORD *))(**(_QWORD **)(a1 + 56)
                                                                                             + 16))(*(_QWORD *)(a1 + 56), a2, a3, a4);
  return result;
}

uint64_t ZinPixelShuffleUnshuffleTransform::GetTransformType(ZinPixelShuffleUnshuffleTransform *this)
{
  return 3;
}

BOOL ZinPixelShuffleUnshuffleTransform::operator==(_DWORD *a1, _DWORD *a2)
{
  int v4;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
  return v4 == (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2)
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7];
}

void ZinPixelShuffleUnshuffleTransform::~ZinPixelShuffleUnshuffleTransform(ZinPixelShuffleUnshuffleTransform *this)
{
  ZinPixelShuffleUnshuffleTransform::~ZinPixelShuffleUnshuffleTransform(this);
  JUMPOUT(0x20BD002F8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C025C20;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

uint64_t PixelShuffleHandler::Run(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo((ZinSpatialSplitTransform *)*a3) == 33)
    return PixelShuffleHandler::UpdateAliasNodeOutputDims(a1, a2, a3, a4);
  else
    return 0;
}

BOOL PixelShuffleHandler::ShouldHandleOp(uint64_t a1, _DWORD *a2)
{
  return *a2 == 33;
}

uint64_t PixelShuffleHandler::UpdateAliasNodeOutputDims(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  __int128 v11[2];

  v5 = *a4;
  if (a4[1] - *a4 != 40)
    ZinAssertImpl("Error: Invalid number of inputs for Alias.");
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v6 + 4);
  v7 = (int *)(v6 + 4);
  if (*(_QWORD *)(v5 + 8) % (v7[1] * (uint64_t)v8 * v7[2]))
    ZinAssertImpl("Error: Input dimensions are invalid; must be a multiple of the shuffle factor.");
  ZinPixelShuffleUtils::GetAliasDims(v5, v7, (uint64_t)v11);
  return ZinMirAliasUnit::SetOutputDimensions(*a3, v11);
}

void PixelUnshuffleHandler::~PixelUnshuffleHandler(PixelUnshuffleHandler *this)
{
  JUMPOUT(0x20BD002F8);
}

uint64_t PixelUnshuffleHandler::Run(uint64_t a1, uint64_t a2, ZinSpatialSplitTransform **a3, uint64_t *a4)
{
  int v8;

  v8 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3);
  switch(v8)
  {
    case '$':
      return PixelUnshuffleHandler::UpdateViewNodeViewInfoSize(a1, a2, a3, a4);
    case '#':
      return PixelUnshuffleHandler::UpdateReshapeNodeOutputDims(a1, a2, a3, a4);
    case '!':
      return PixelUnshuffleHandler::UpdateAliasNodeOutputDims(a1, a2, (uint64_t *)a3, a4);
  }
  return 0;
}

uint64_t PixelUnshuffleHandler::ShouldHandleOp(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0x25uLL) & (0x1A00000000uLL >> *a2);
}

uint64_t PixelUnshuffleHandler::UpdateAliasNodeOutputDims(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = *a4;
  if (a4[1] - *a4 != 40)
    ZinAssertImpl("Error: Invalid number of inputs for Alias.");
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 12) != 1)
    ZinAssertImpl("Error: PixelShuffle factor z have to be 1");
  v6 = *(int *)(v5 + 4);
  if (*(_QWORD *)(v4 + 24) % v6)
    ZinAssertImpl("Error: Input dimensions are invalid; must be a multiple of the shuffle factor.");
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_OWORD *)(v4 + 16);
  *(_QWORD *)&v10 = *(_QWORD *)v4;
  v11 = v8;
  v12 = v7;
  *((_QWORD *)&v10 + 1) = v6;
  if (!(_DWORD)v6 || *((_QWORD *)&v11 + 1) % v6)
    ZinAssertImpl("Input width cannot divided by factor.x", v10, (_QWORD)v11);
  *((uint64_t *)&v11 + 1) /= v6;
  return ZinMirAliasUnit::SetOutputDimensions(*a3, &v10);
}

uint64_t PixelUnshuffleHandler::UpdateViewNodeViewInfoSize(uint64_t a1, uint64_t a2, ZinANELayer **a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *BondedInfo;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD **)(v4 + 8);
  v5 = (_QWORD *)(v4 + 8);
  v6 = v7;
  if (v7)
  {
    v9 = *((_QWORD *)*a3 + 10);
    v10 = v5;
    do
    {
      v11 = v6[4];
      v12 = v11 >= v9;
      if (v11 >= v9)
        v13 = v6;
      else
        v13 = v6 + 1;
      if (v12)
        v10 = v6;
      v6 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != v5 && v9 >= v10[4])
    {
      if (a4[1] - *a4 != 40)
        ZinAssertImpl("Error: Invalid number of inputs for View.");
      v14 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(*a4 + 16) % *(int *)(v14 + 8))
        ZinAssertImpl("Error: Input dimensions are invalid; height must be a multiple of the shuffle factor.");
      BondedInfo = (uint64_t *)ZinANELayer::GetBondedInfo(*a3);
      v16 = *BondedInfo;
      v17 = BondedInfo[1];
      if (*BondedInfo != v17)
      {
        v18 = *a4;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)v16 + 92) != 3)
            ZinAssertImpl("Error: Unexpected view dimension.");
          *(_DWORD *)(*(_QWORD *)v16 + 84) = *(_QWORD *)(v18 + 16) / *(int *)(v14 + 8);
          v16 += 8;
        }
        while (v16 != v17);
      }
    }
  }
  return 0;
}

uint64_t PixelUnshuffleHandler::UpdateReshapeNodeOutputDims(uint64_t a1, uint64_t a2, ZinMirUnit **a3, _QWORD *a4)
{
  uint64_t AotTensorDims;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (a4[1] - *a4 != 40)
    ZinAssertImpl("Error: Invalid number of inputs for View.");
  AotTensorDims = ZinMirUnit::GetAotTensorDims(*a3);
  v7 = *(_OWORD *)AotTensorDims;
  v8 = *(_OWORD *)(AotTensorDims + 16);
  v12 = *(_QWORD *)(AotTensorDims + 32);
  v10 = v7;
  v11 = v8;
  v11 = *(_OWORD *)(*a4 + 16);
  return ZinMirReshapeUnit::SetOutputDimensions((uint64_t)*a3, &v10);
}

void ZinAneTd<1u>::SetL2Barrier()
{
  ZinAssertImpl("L2 barrier not supported.");
}

BOOL ZinAneTd<1u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 224), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Start Address");
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a1 + 68) & 0xFFE00000 | v4 & 0x1FFFFF;
  return result;
}

BOOL ZinAneTd<1u>::SetL2Src1ChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 272), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFE00000 | v4 & 0x1FFFFF;
  return result;
}

BOOL ZinAneTd<1u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  int v7;
  uint64_t v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 440) + 268), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(_QWORD *)(a1 + 440) + 264), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFFE00000 | v7 & 0x1FFFFF;
  return result;
}

void ZinAneTd<1u>::SetL2Src1DepthStride()
{
  uint8_t v0[16];

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v0 = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Depth Stride not programmed", v0, 2u);
  }
}

BOOL ZinAneTd<1u>::SetL2Src1GroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 280), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFE00000 | v4 & 0x1FFFFF;
  return result;
}

uint64_t ZinAneTd<1u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF | 0x200;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF | 0x100;
      break;
    default:
      ZinAssertImpl("Invalid input tensor format used\n");
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

BOOL ZinAneTd<1u>::SetSrc1BoundaryRegisters(uint64_t a1, unint64_t *a2)
{
  _BOOL8 result;
  int v5;

  v5 = 0;
  if (!ZinCodegenUtil::ValueToRegister(*a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 232), &v5)
    || (*(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[1], (unsigned int *)(*(_QWORD *)(a1 + 440) + 240), &v5))
    || (*(_WORD *)(a1 + 76) = v5,
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[2], (unsigned int *)(*(_QWORD *)(a1 + 440) + 248), &v5))
    || (*(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !(result = ZinCodegenUtil::ValueToRegister(a2[3], (unsigned int *)(*(_QWORD *)(a1 + 440) + 256), &v5))))
  {
    ZinAssertImpl("Illegal Value");
  }
  *(_WORD *)(a1 + 80) = v5;
  return result;
}

uint64_t ZinAneTd<1u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF | 0x2000;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF | 0x1000;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

BOOL ZinAneTd<1u>::SetDstBoundaryRegisters(uint64_t a1, unint64_t *a2)
{
  _BOOL8 result;
  int v5;

  v5 = 0;
  if (!ZinCodegenUtil::ValueToRegister(*a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 360), &v5)
    || (*(_DWORD *)(a1 + 156) = *(_DWORD *)(a1 + 156) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[1], (unsigned int *)(*(_QWORD *)(a1 + 440) + 368), &v5))
    || (*(_WORD *)(a1 + 156) = v5,
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[2], (unsigned int *)(*(_QWORD *)(a1 + 440) + 376), &v5))
    || (*(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !(result = ZinCodegenUtil::ValueToRegister(a2[3], (unsigned int *)(*(_QWORD *)(a1 + 440) + 384), &v5))))
  {
    ZinAssertImpl("Illegal Value");
  }
  *(_WORD *)(a1 + 160) = v5;
  return result;
}

void ZinAneTd<1u>::SetL2SrcOffsetXlsbs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Invalid Offset X Lsbs for architecture", v2, v3);
}

unint64_t ZinAneTd<1u>::SetL2SrcNumInterleavedChannels(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, dword_2545191D8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xFFFFF000 | result & 0xFFF;
  return result;
}

void ZinAneTd<1u>::SetSourceAddrWrap(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 | a2)
    ZinAssertImpl("Source wrapping start offset or wrap index not acceptable\n", v3, v4);
}

void ZinAneTd<1u>::SetSourceWrap(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a4 | a3)
    ZinAssertImpl("Source wrapping start offset or wrap index not acceptable\n", v4, v5);
}

void ZinAneTd<1u>::SetL2Src1FIFOMode(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Input DMA FIFO is not supported", v2, v3);
}

BOOL ZinAneTd<1u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 296), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 116) & 0xFFE00000 | v4 & 0x1FFFFF;
  return result;
}

BOOL ZinAneTd<1u>::SetL2Src2ChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Channel Stride");
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 136) & 0xFFE00000 | v4 & 0x1FFFFF;
  return result;
}

BOOL ZinAneTd<1u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  int v7;
  uint64_t v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 440) + 340), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(_QWORD *)(a1 + 440) + 336), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Row Stride");
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 132) & 0xFFE00000 | v7 & 0x1FFFFF;
  return result;
}

void ZinAneTd<1u>::SetL2Src2DepthStride()
{
  ZinAssertImpl("Invalid Attempt to set L2 Src2 Depth Stride");
}

void ZinAneTd<1u>::SetL2Src2GroupStride()
{
  ZinAssertImpl("Invalid Attempt to set L2 Src2 Group Stride");
}

void ZinAneTd<1u>::SetL2Src2OffsetXlsbs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Invalid Offset2 X Lsbs for architecture", v2, v3);
}

unint64_t ZinAneTd<1u>::SetL2Src2NumInterleavedChannels(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, &dword_2545191B0[8]);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xF000FFFF | ((result & 0xFFF) << 16);
  return result;
}

BOOL ZinAneTd<1u>::SetSrc2BoundaryRegisters(uint64_t a1, unint64_t *a2)
{
  _BOOL8 result;
  int v5;

  v5 = 0;
  if (!ZinCodegenUtil::ValueToRegister(*a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 304), &v5)
    || (*(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[1], (unsigned int *)(*(_QWORD *)(a1 + 440) + 312), &v5))
    || (*(_WORD *)(a1 + 124) = v5,
        v5 = 0,
        !ZinCodegenUtil::ValueToRegister(a2[2], (unsigned int *)(*(_QWORD *)(a1 + 440) + 320), &v5))
    || (*(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 128) & 0x8000FFFF | ((v5 & 0x7FFF) << 16),
        v5 = 0,
        !(result = ZinCodegenUtil::ValueToRegister(a2[3], (unsigned int *)(*(_QWORD *)(a1 + 440) + 328), &v5))))
  {
    ZinAssertImpl("Illegal Value");
  }
  *(_WORD *)(a1 + 128) = v5;
  return result;
}

uint64_t ZinAneTd<1u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 44) & 0xFFFFFFF8;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 44) & 0xFFFFFFF8 | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 44) & 0xFFFFFFF8 | 3;
LABEL_5:
      *(_DWORD *)(result + 44) = v2;
      break;
    case 3:
      ZinAssertImpl("EWSqr not valid for architecture");
    case 4:
      ZinAssertImpl("EWMul not valid for architecture");
    case 5:
    case 6:
      ZinAssertImpl("Bypass and RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<1u>::SetElementWiseOp(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 44) & 0xFF8FFFFF | 0x300000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 44) & 0xFF8FFFFF | 0x100000;
  }
  else
  {
    if (a2)
      ZinAssertImpl("Invalid ElementWiseOp for this architecture");
    v2 = *(_DWORD *)(result + 44) & 0xFF8FFFFF;
  }
  *(_DWORD *)(result + 44) = v2;
  return result;
}

BOOL ZinAneTd<1u>::SetSplitRowCompute(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 8), &v4);
  if (!result)
    ZinAssertImpl("Illegal Value");
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFFFFFDF | (32 * (v4 & 1));
  return result;
}

uint64_t ZinAneTd<1u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 44) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 44) = v2;
      return result;
    case 2:
      v2 = *(_DWORD *)(result + 44) | 8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

void ZinAneTd<1u>::SetPassthroughEnable(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Passthrough flag not supported on this arch.", v2, v3);
}

uint64_t ZinAneTd<1u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 40) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 40) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 40) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 40) = v2;
      break;
    case 3:
      ZinAssertImpl("Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<1u>::SetTileDmaSrc1ChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 336) & 0xF | (16 * v4);
  return result;
}

BOOL ZinAneTd<1u>::SetTileDmaSrc1RowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 332) & 0xF | (16 * v4);
  return result;
}

BOOL ZinAneTd<1u>::SetTileDmaSrc2ChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Channel Stride");
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 336) & 0xF | (16 * v4);
  return result;
}

BOOL ZinAneTd<1u>::SetTileDmaSrc2RowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Row Stride");
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 332) & 0xF | (16 * v4);
  return result;
}

uint64_t ZinAneTd<1u>::SetTileDmaDstFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 316) & 0xFFFFCFCC | 0x2031;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 316) & 0xFFFFCFFC;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 316) & 0xFFFFCFFC | 0x1000;
      break;
    default:
      ZinAssertImpl("dma format %d format not implemented yet\n", a2);
  }
  *(_DWORD *)(result + 316) = v2;
  return result;
}

void ZinAneTd<1u>::SetTileDmaDstandL2DstInterleave()
{
  uint8_t v0[16];

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v0 = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "HW does not support DMA Interleave", v0, 2u);
  }
}

BOOL ZinAneTd<1u>::SetTileDmaDstChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 336) & 0xF | (16 * v4);
  return result;
}

BOOL ZinAneTd<1u>::SetTileDmaDstRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 332) & 0xF | (16 * v4);
  return result;
}

void ZinAneTd<1u>::SetCacheDmaPreEnable(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Cache Prefetch not supported", v2, v3);
}

void ZinAneTd<1u>::SetCacheDmaPreFlush()
{
  ZinAssertImpl("Cache Prefetch not supported");
}

void ZinAneTd<1u>::SetCacheDmaPrePause(uint64_t a1, char a2, char a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a5 || a4)
    ZinAssertImpl("Cache Prefetch Pause not supported", v5, v6);
}

void ZinAneTd<1u>::SetCacheDmaPreThrottle(uint64_t a1, char a2, char a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a6 | a5 || a4)
    ZinAssertImpl("Cache Prefetch Throttle not supported", v6, v7);
}

void ZinAneTd<1u>::SetCacheDmaPrePrefetchRate(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Cache Prefetch Rate not supported", v2, v3);
}

void ZinAneTd<1u>::Set1DWinogradMode(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("1D Winograd is not supported", v2, v3);
}

void ZinAneTd<1u>::SetRcasKeyMask()
{
  ZinAssertImpl("Rcas is not supported");
}

uint64_t ZinAneTd<1u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 19) >= 4)
  {
    v2 = 0;
    switch(a2)
    {
      case 0:
      case 3:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        ZinAssertImpl("Unknown kernel format in codegen\n");
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        ZinAssertImpl("Invalid kernel format");
      default:
        break;
    }
  }
  else
  {
    v2 = 4;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<1u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      ZinAssertImpl("Invalid kernel format");
    default:
      *(_DWORD *)(result + 40) &= 0xFFFFFFE7;
      return result;
  }
}

void ZinAneTd<1u>::SetStochasticRoundMode()
{
  ZinAssertImpl("Stochastic rounding is not supported");
}

uint64_t ZinAneTd<1u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFC0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<1u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x20000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x40000;
    }
  }
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFF9FFFF | a2;
  return result;
}

uint64_t ZinAneTd<1u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 15360;
  v9 = ((a2 & 0xFF0000000000) != 0) << 16;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFEFFFF | v9;
  *(_DWORD *)(result + 52) = v10 | *(_DWORD *)(result + 52) & 0xFFE00000;
  return result;
}

int8x8_t ZinAneTd<1u>::SetNEBias(uint64_t a1, unint64_t a2, char a3)
{
  int v8;
  int8x8_t v9;
  int8x8_t result;

  if (a3)
  {
    _S0 = a2;
    __asm { FCVT            H0, S0 }
    v8 = (unsigned __int16)_S0;
    if (!_ZF)
      v8 = 0;
    v9.i32[0] = 16 * ((a2 & 0xFF0000000000) != 0);
    v9.i32[1] = (a2 >> 16) & 0x1F0000 | v8;
  }
  else
  {
    v9 = 0;
  }
  result = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 44), (int8x8_t)0xFFE00000FFFFFFCFLL), v9);
  *(int8x8_t *)(a1 + 44) = result;
  return result;
}

uint64_t ZinAneTd<1u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

void ZinAneTd<1u>::SetNEHalfWUMode(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: HalfWU mode is not supported", v2, v3);
}

uint64_t ZinAneTd<1u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF | 0x200;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFFCFF | 0x100;
      break;
    default:
      ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

uint64_t ZinAneTd<1u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFF3FF | 0x800;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFF3FF;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFF3FF | 0x400;
      break;
    default:
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

uint64_t ZinAneTd<1u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF | 0x2000;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF;
      break;
    case 1:
      v2 = *(_DWORD *)(result + 16) & 0xFFFFCFFF | 0x1000;
      break;
    default:
      ZinAssertImpl("Error: Invalid output format");
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfgKh(uint64_t a1, char a2)
{
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60) & 0xFFFF03FF | ((a2 & 0x3F) << 10);
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfgKw(uint64_t a1, __int16 a2)
{
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60) & 0xFFFFFC00 | a2 & 0x3FF;
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfg3dKd(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("Error: kernel depth is not supported", v2, v3);
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfgSx(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 62) = a2;
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfgSy(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 63) = a2;
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfg3dSz(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("Error: Invalid input stride z", v2, v3);
  return 1;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfg3dOz(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("Error: Invalid output stride z", v2, v3);
  return 1;
}

BOOL ZinAneTd<1u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 192), &v4);
  if (result)
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) & 0xFFFFFC00 | v4 & 0x3FF;
  return result;
}

BOOL ZinAneTd<1u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) & 0xFFFF03FF | ((v4 & 0x3F) << 10);
  return result;
}

uint64_t ZinAneTd<1u>::SetCommonConvCfg3dPz(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Invalid pad z", v2, v3);
  return 1;
}

BOOL ZinAneTd<1u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 128), &v4);
  if (result)
    *(_WORD *)(a1 + 38) = v4;
  return result;
}

BOOL ZinAneTd<1u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 72), &v4);
  if (result)
    *(_WORD *)(a1 + 24) = v4;
  return result;
}

BOOL ZinAneTd<1u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 80), &v4);
  if (result)
    *(_WORD *)(a1 + 26) = v4;
  return result;
}

uint64_t ZinAneTd<1u>::SetOrReturnDin(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("Error: Din not supported", v2, v3);
  return 1;
}

BOOL ZinAneTd<1u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 88), &v4);
  if (result)
    *(_WORD *)(a1 + 28) = v4;
  return result;
}

BOOL ZinAneTd<1u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 104), &v4);
  if (result)
    *(_WORD *)(a1 + 32) = v4;
  return result;
}

BOOL ZinAneTd<1u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 112), &v4);
  if (result)
    *(_WORD *)(a1 + 34) = v4;
  return result;
}

uint64_t ZinAneTd<1u>::SetOrReturnDout(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("Error: Dout not supported", v2, v3);
  return 1;
}

BOOL ZinAneTd<1u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 440) + 120), &v4);
  if (result)
    *(_WORD *)(a1 + 36) = v4;
  return result;
}

void ZinAneTd<4u>::SetL2Barrier()
{
  ZinAssertImpl("L2 barrier not supported.");
}

uint64_t ZinAneTd<4u>::SetEventFlags(uint64_t result, __int16 a2, __int16 a3, int a4)
{
  *(_WORD *)(result + 16) = a2;
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_WORD *)(result + 20) = a3;
  return result;
}

BOOL ZinAneTd<4u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 192), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a1 + 180) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<4u>::SetL2Src1ChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 200), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 184) & 0xFFFF000F | (16 * (v4 & 0xFFF));
  return result;
}

BOOL ZinAneTd<4u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  int v7;
  uint64_t v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 280) + 212), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(_QWORD *)(a1 + 280) + 208), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a1 + 188) & 0xFFF0000F | (16 * (unsigned __int16)v7);
  return result;
}

uint64_t ZinAneTd<4u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 176) = v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 192) = v2;
  return result;
}

void ZinAneTd<4u>::SetL2ResultWrapCfg(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 5)
    ZinAssertImpl("Error: Invalid Wrap Axis", v2, v3);
}

void ZinAneTd<4u>::SetL2ResultWrapStartOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Invalid wrap start offset", v2, v3);
}

void ZinAneTd<4u>::SetL2ResultWrapIndex(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Invalid wrap index", v2, v3);
}

void ZinAneTd<4u>::SetL2ResultWrapAddrOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Result Wrap Addr Offset is invalid", v2, v3);
}

void ZinAneTd<4u>::SetL2ResultWrapAddr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Result Wrap Addr is invalid", v2, v3);
}

void ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Invalid Output Crop Offset X LSBs for architecture", v2, v3);
}

BOOL ZinAneTd<4u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 288), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 176) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<4u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      ZinAssertImpl("Invalid L2 Source Type");
    default:
      break;
  }
  *(_DWORD *)(result + 176) = *(_DWORD *)(result + 176) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 3;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 1;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 2;
      goto LABEL_7;
    case 5:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 4;
LABEL_7:
      *(_DWORD *)(result + 224) = v2;
      break;
    case 6:
      ZinAssertImpl("RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 224) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 224) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 220) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelBaseHeader(uint64_t result, char a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFF0 | a2 & 7 | 8;
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) = *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) & 0xFFFFFFFE | a2;
  return result;
}

void ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch()
{
  ZinAssertImpl("Error: Kernel Prefetch is not supported");
}

uint64_t ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 57344;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 0x2000;
      goto LABEL_5;
    case 2:
      v3 = 0x4000;
      goto LABEL_5;
    case 3:
      v3 = 49152;
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) = *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) & 0xFFFF0FFF | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 304), &v6);
  if (result)
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 24 * a3 + 12) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 24 * a3 + 12) & 0xFFFE003F | ((v6 & 0x7FF) << 6);
  return result;
}

void ZinAneTd<4u>::SetKernelDmaSrcCoeffBaseOffset()
{
  ZinAssertImpl("Error: Kernel Dma Src Coeff Base Offset is not supported");
}

uint64_t ZinAneTd<4u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_7;
      v3 = 0;
      break;
    case 2:
      if (a3)
LABEL_7:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 4;
      break;
    case 3:
      ZinAssertImpl("Platform doesn't support replication padding-mode");
    case 4:
      ZinAssertImpl("Platform doesn't support positive padding-mode");
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 172) = *(_DWORD *)(result + 172) & 0xFFFFFFFB | v3;
  return result;
}

BOOL ZinAneTd<4u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 216), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a1 + 196) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<4u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 224), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a1 + 200) & 0xFFFF000F | (16 * (v4 & 0xFFF));
  return result;
}

BOOL ZinAneTd<4u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 232), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a1 + 204) & 0xFFF0000F | (16 * (unsigned __int16)v4);
  return result;
}

uint64_t ZinAneTd<4u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 192) = *(_DWORD *)(result + 192) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 192) & 0xFFFFFFFC | 1;
  }
  else if (a2 == 3)
  {
    v2 = *(_DWORD *)(result + 192) & 0xFFFFFFFC;
  }
  else
  {
    v2 = *(_DWORD *)(result + 192) & 0xFFFFFFFC | 2;
  }
  *(_DWORD *)(result + 192) = v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 124);
    v3 = 0x1000000;
LABEL_7:
    *(_DWORD *)(result + 124) = v2 & 0xFCFFFFFF | v3;
    return result;
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 124);
    if ((v2 & 0x3000000) == 0)
    {
      v3 = 0x2000000;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC | 0x1000;
      goto LABEL_15;
    case 2:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC;
      goto LABEL_15;
    case 3:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCECC | 1;
      goto LABEL_15;
    case 5:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_10;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_10:
        v5 = 8497;
      break;
    case 11:
      ZinAssertImpl("Invalid format provided for architecture");
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_15:
  *(_DWORD *)(result + 268) = v3;
  return result;
}

BOOL ZinAneTd<4u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 288), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a1 + 192) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<4u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 268) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 268) = v2;
  *(_DWORD *)(result + 268) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

void ZinAneTd<4u>::SetDoubleInt8Enable(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("2xInt8 mode is not supported", v2, v3);
}

void ZinAneTd<4u>::SetPaletteBlockSize(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Palette block size is not supported", v2, v3);
}

uint64_t ZinAneTd<4u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFBFF | v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFEFF | v2;
  return result;
}

void ZinAneTd<4u>::SetKernelSparseBinary(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Sparse binary mode is not supported", v2, v3);
}

uint64_t ZinAneTd<4u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFF0F | v2;
  return result;
}

void ZinAneTd<4u>::SetKernelAsymQuantEn(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Asym quantization is not supported", v2, v3);
}

void ZinAneTd<4u>::SetKernelDetectZeros(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("On-the-fly Sparse Encoding is not supported", v2, v3);
}

void ZinAneTd<4u>::SetQuantizationOutputZeroOffset(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3)
  {
    if (a2)
      ZinAssertImpl("Quantization output zero offset is not supported", v3, v4);
  }
}

uint64_t ZinAneTd<4u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 224) = *(_DWORD *)(result + 224) & 0xFFFFE0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<4u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 224) = *(_DWORD *)(result + 224) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<4u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 224) = *(_DWORD *)(result + 224) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 236) = v10 | *(_DWORD *)(result + 236) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<4u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 224) = *(_DWORD *)(result + 224) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 232) = v10 | *(_DWORD *)(result + 232) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<4u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 228) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a1 + 224) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<4u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 88) = *(_DWORD *)(result + 88) & 0xFFFF8FFF | ((a2 & 7) << 12);
  return result;
}

uint64_t ZinAneTd<4u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 100) & 0xFFFFFFFB;
      goto LABEL_4;
    case 1:
      v2 = *(_DWORD *)(result + 100) | 4;
LABEL_4:
      *(_DWORD *)(result + 100) = v2;
      break;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
    case 4:
      ZinAssertImpl("Error: NP2 small source mode  is not supported for this arch");
    default:
      return result;
  }
  return result;
}

_DWORD *ZinAneTd<4u>::SetDoubleBufferingBasedOnOtherRegisters(_DWORD *result, unsigned int a2)
{
  int v2;
  unsigned __int16 v3;
  unsigned int v4;

  v2 = result[25];
  if ((v2 & 0x4000000) == 0)
  {
    if ((v2 & 4) != 0)
    {
      v3 = 4;
    }
    else if ((result[18] & 3) == 2)
    {
      v3 = 2;
    }
    else
    {
      v3 = 1;
    }
    v4 = (((result[22] >> 28) & 3u) << ((result[22] >> 12) & 7)) * (result[22] >> 30) / v3;
    if (v4 <= 1)
      v4 = 1;
    if (v4 <= a2 >> 1)
      result[25] = v2 | 0x4000000;
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 72) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 72) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 72) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 72) = v2;
  return result;
}

uint64_t ZinAneTd<4u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 72) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 72) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 72) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 72) = v2;
  return result;
}

BOOL ZinAneTd<4u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFFF83F | ((v4 & 0x1F) << 6);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFCFFFF | ((v4 & 3) << 16);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFF3FFFF | ((v4 & 3) << 18);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFF0FFFFF | ((v4 & 0xF) << 20);
  return result;
}

BOOL ZinAneTd<4u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 92) & 0xFFFFE000 | v4 & 0x1FFF;
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a1 + 68) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a1 + 68) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<4u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<4u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 92) = *(_DWORD *)(result + 92) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<4u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 144), &v4);
  if (result)
    *(_WORD *)(a1 + 94) = v4;
  return result;
}

void ZinAneTd<5u>::SetL2Barrier()
{
  ZinAssertImpl("L2 barrier not supported.");
}

uint64_t ZinAneTd<5u>::SetEventFlags(uint64_t result, __int16 a2, __int16 a3, int a4)
{
  *(_WORD *)(result + 16) = a2;
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_WORD *)(result + 20) = a3;
  return result;
}

uint64_t ZinAneTd<5u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 176) = v2;
  return result;
}

uint64_t ZinAneTd<5u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 192) = v2;
  return result;
}

uint64_t ZinAneTd<5u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      ZinAssertImpl("Invalid L2 Source Type");
    default:
      break;
  }
  *(_DWORD *)(result + 176) = *(_DWORD *)(result + 176) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<5u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 3;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 1;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 2;
      goto LABEL_7;
    case 5:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 4;
LABEL_7:
      *(_DWORD *)(result + 224) = v2;
      break;
    case 6:
      ZinAssertImpl("RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<5u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 220) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<5u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 57344;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 0x2000;
      goto LABEL_5;
    case 2:
      v3 = 0x4000;
      goto LABEL_5;
    case 3:
      v3 = 49152;
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) = *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) & 0xFFFF0FFF | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<5u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_7;
      v3 = 0;
      break;
    case 2:
      if (a3)
LABEL_7:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 4;
      break;
    case 3:
      ZinAssertImpl("Platform doesn't support replication padding-mode");
    case 4:
      ZinAssertImpl("Platform doesn't support positive padding-mode");
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 172) = *(_DWORD *)(result + 172) & 0xFFFFFFFB | v3;
  return result;
}

uint64_t ZinAneTd<5u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC | 0x1000;
      goto LABEL_15;
    case 2:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC;
      goto LABEL_15;
    case 3:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCECC | 1;
      goto LABEL_15;
    case 5:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_10;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_10:
        v5 = 8497;
      break;
    case 11:
      ZinAssertImpl("Invalid format provided for architecture");
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_15:
  *(_DWORD *)(result + 268) = v3;
  return result;
}

uint64_t ZinAneTd<5u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<5u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<5u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 100) & 0xFFFFFFFB;
      goto LABEL_4;
    case 1:
      v2 = *(_DWORD *)(result + 100) | 4;
LABEL_4:
      *(_DWORD *)(result + 100) = v2;
      break;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
    case 4:
      ZinAssertImpl("Error: NP2 small source mode  is not supported for this arch");
    default:
      return result;
  }
  return result;
}

void ZinAneTd<6u>::SetL2Barrier()
{
  ZinAssertImpl("L2 barrier not supported.");
}

uint64_t ZinAneTd<6u>::SetEventFlags(uint64_t result, __int16 a2, __int16 a3, int a4)
{
  *(_WORD *)(result + 16) = a2;
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_WORD *)(result + 20) = a3;
  return result;
}

uint64_t ZinAneTd<6u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 176) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 176) = v2;
  return result;
}

uint64_t ZinAneTd<6u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 192) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 192) = v2;
  return result;
}

uint64_t ZinAneTd<6u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      ZinAssertImpl("Invalid L2 Source Type");
    default:
      break;
  }
  *(_DWORD *)(result + 176) = *(_DWORD *)(result + 176) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<6u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 3;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 1;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 2;
      goto LABEL_7;
    case 5:
      v2 = *(_DWORD *)(result + 224) & 0xFFFFFFF8 | 4;
LABEL_7:
      *(_DWORD *)(result + 224) = v2;
      break;
    case 6:
      ZinAssertImpl("RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<6u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 220) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 220) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<6u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 57344;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 0x2000;
      goto LABEL_5;
    case 2:
      v3 = 0x4000;
      goto LABEL_5;
    case 3:
      v3 = 49152;
LABEL_5:
      *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) = *(_DWORD *)(*(_QWORD *)(result + 40) + 24 * a3 + 4) & 0xFFFF0FFF | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<6u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_9;
      v3 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_9;
      v3 = 4;
      break;
    case 3:
      if (a3)
LABEL_9:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 8;
      break;
    case 4:
      ZinAssertImpl("Platform doesn't support positive padding-mode");
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 172) = *(_DWORD *)(result + 172) & 0xFFFFFFF3 | v3;
  return result;
}

uint64_t ZinAneTd<6u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC | 0x1000;
      goto LABEL_15;
    case 2:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCFFC;
      goto LABEL_15;
    case 3:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 268) & 0xFFFFCECC | 1;
      goto LABEL_15;
    case 5:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_10;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 268) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_10:
        v5 = 8497;
      break;
    case 11:
      ZinAssertImpl("Invalid format provided for architecture");
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_15:
  *(_DWORD *)(result + 268) = v3;
  return result;
}

uint64_t ZinAneTd<6u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<6u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<6u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 100) & 0xFFFFFFFB;
      goto LABEL_4;
    case 1:
      v2 = *(_DWORD *)(result + 100) | 4;
LABEL_4:
      *(_DWORD *)(result + 100) = v2;
      break;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
    case 4:
      ZinAssertImpl("Error: NP2 small source mode  is not supported for this arch");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, char a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 792) |= dword_207AB03CC[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 792) = *(_DWORD *)(result + 792) & 0xFC3FFFFF | ((a4 & 0xF) << 22);
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 520) |= 0x800000u;
  return result;
}

uint64_t ZinAneTd<7u>::SetEventFlags(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 16) = a2 & 0xFFFFFF | (*(unsigned __int8 *)(result + 19) << 24);
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_DWORD *)(result + 24) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(result + 27) << 24);
  return result;
}

BOOL ZinAneTd<7u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 296), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 668) = *(_DWORD *)(a1 + 668) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 304), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 840) + 316), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 312), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 676) = *(_DWORD *)(a1 + 676) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 328), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a1 + 680) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 684) = *(_DWORD *)(a1 + 684) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<7u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 664) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 664) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      ZinAssertImpl("32 bit format not supported");
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 664) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 708) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 708) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      ZinAssertImpl("Float32 not supported for architecture");
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 708) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 616), 2);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a1 + 664) & 0x3FFFFFFF | (result << 30);
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 552), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a1 + 664) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<7u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 664) = *(_DWORD *)(result + 664) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 0x1000000;
      break;
    case 2:
      v2 = 0x800000;
      break;
    case 4:
      v2 = 25165824;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 664) = *(_DWORD *)(result + 664) & 0xFE7FFFFF | v2;
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a1 + 688) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 352), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 840) + 364), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 360), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a1 + 696) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 368), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a1 + 700) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a1 + 704) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<7u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 664) & 0xF7F80FFF;
  *(_DWORD *)(result + 664) = v2 | 0x8000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xE7F80FFF | 0x8000000;
LABEL_7:
      *(_DWORD *)(result + 664) = v3;
      return result;
    case 2:
      v3 = v2 | 0x18000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF8 | 3;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF8 | 1;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF8 | 2;
      goto LABEL_7;
    case 5:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF8 | 4;
LABEL_7:
      *(_DWORD *)(result + 768) = v2;
      break;
    case 6:
      ZinAssertImpl("RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 768) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 768) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 768) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 764) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 764) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 764) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 764) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelBaseHeader(uint64_t result, char a2)
{
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFC0 | a2 & 0x1F | 0x20;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 60) = *(_DWORD *)(result + 4 * a3 + 60) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 896;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 128;
      goto LABEL_5;
    case 2:
      v3 = 256;
      goto LABEL_5;
    case 3:
      v3 = 768;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 60) = *(_DWORD *)(result + 4 * a3 + 60) & 0xFFFFFC3F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcHeaderDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 896;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 128;
      goto LABEL_5;
    case 2:
      v3 = 256;
      goto LABEL_5;
    case 3:
      v3 = 768;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 252) = *(_DWORD *)(result + 4 * a3 + 252) & 0xFFFFFC3F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<7u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 1);
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<7u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 0);
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<7u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 2);
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<7u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 3);
}

BOOL ZinAneTd<7u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 528), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 188) = *(_DWORD *)(a1 + 4 * a3 + 188) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<7u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_11;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_11:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 660) & 0xFFFFFFF3 | v4;
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelBaseHeaderAligned(uint64_t result, char a2, signed int a3)
{
  if (a3 >= 4)
    ZinAssertImpl("bad H13 aligned header selector");
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & dword_207AB04D0[a3] | ((a2 & 0x1F) << (6 * a3 + 6)) | dword_207AB04E0[a3];
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelDmaSrcEnable(uint64_t result)
{
  *(_DWORD *)(result + 52) |= 0x40u;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 764) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 764) | 0x10000;
  }
  *(_DWORD *)(result + 764) = v2;
  return result;
}

_DWORD *ZinAneTd<7u>::SetAlignedKernelBias(_DWORD *result, char a2, uint64_t a3, int a4)
{
  result[71] = result[71] & 0x3F | (a4 << 6);
  result[63] |= 1u;
  result[11] = result[11] & 0xFFFFF03F | ((a2 & 0x1F) << 6) | 0x800;
  return result;
}

_DWORD *ZinAneTd<7u>::SetAlignedKernelPostScale(_DWORD *result, char a2, uint64_t a3, int a4)
{
  result[72] = result[72] & 0x3F | (a4 << 6);
  result[64] |= 1u;
  result[11] = result[11] & 0xFFFC0FFF | ((a2 & 0x1F) << 12) | 0x20000;
  return result;
}

_DWORD *ZinAneTd<7u>::SetAlignedKernelPaletteLut(_DWORD *result, char a2, uint64_t a3, int a4)
{
  result[73] = result[73] & 0x3F | (a4 << 6);
  result[65] |= 1u;
  result[11] = result[11] & 0xFF03FFFF | ((a2 & 0x1F) << 18) | 0x800000;
  return result;
}

_DWORD *ZinAneTd<7u>::SetAlignedKernelNonLinearLut(_DWORD *result, char a2, uint64_t a3, int a4)
{
  result[74] = result[74] & 0x3F | (a4 << 6);
  result[66] |= 1u;
  result[11] = result[11] & 0xFF03FFFF | ((a2 & 0x1F) << 18) | 0x800000;
  return result;
}

void ZinAneTd<7u>::SetQuantizationSrc1InputOffset()
{
  ZinAssertImpl("Invalid Attempt to set quantization src1 input offset");
}

void ZinAneTd<7u>::SetQuantizationSrc2InputOffset()
{
  ZinAssertImpl("Invalid Attempt to set quantization src2 input offset");
}

void ZinAneTd<7u>::SetPEOutputQuantization()
{
  ZinAssertImpl("Invalid Attempt to set Output Quantization.");
}

uint64_t ZinAneTd<7u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 752) = a2;
  return result;
}

__int16 ZinAneTd<7u>::SetPEScale@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 746) = result;
  return result;
}

__int16 ZinAneTd<7u>::SetPEBias@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 744) = result;
  return result;
}

__int16 ZinAneTd<7u>::SetPEPreScale@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 750) = result;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 660) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 660) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 516) = *(_DWORD *)(result + 516) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 516) = *(_DWORD *)(result + 516) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 516) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 516) |= v4;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 740) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 840) + 560);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 740) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 840) + 560);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 740) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 560)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 740) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 840) + 560);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 740) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 840) + 560);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<7u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 740) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 740) | 0x10000;
  }
  *(_DWORD *)(result + 740) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 740) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 740) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 740) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 740) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 740) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetPECondition(uint64_t result, int a2)
{
  if (a2 != 1)
    ZinAssertImpl("Error: invalid PE Condition");
  *(_DWORD *)(result + 740) |= 0x40u;
  return result;
}

uint64_t ZinAneTd<7u>::SetPEOutputReLU(uint64_t result)
{
  *(_DWORD *)(result + 740) |= 0x20u;
  return result;
}

uint64_t ZinAneTd<7u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 516) = *(_DWORD *)(result + 516) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a1 + 712) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 392), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 716) = *(_DWORD *)(a1 + 716) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 400), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a1 + 720) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 408), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a1 + 724) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 416), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a1 + 728) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<7u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 708) = *(_DWORD *)(result + 708) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 708) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 708) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 708) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 708) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 708) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 596) & 0xFFFFCFFC | 0x1000;
      goto LABEL_15;
    case 2:
      v3 = *(_DWORD *)(result + 596) & 0xFFFFCFFC;
      goto LABEL_15;
    case 3:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 596) & 0xFFFFCECC | 1;
      goto LABEL_15;
    case 5:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_10;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 596) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_10:
        v5 = 8497;
      break;
    case 11:
      ZinAssertImpl("Invalid format provided for architecture");
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_15:
  *(_DWORD *)(result + 596) = v3;
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 552), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a1 + 596) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 540) |= 1u;
  *(_DWORD *)(result + 32) |= 0x10000000u;
  return result;
}

void ZinAneTd<7u>::SetTileDmaSrc1E4M3Overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF00000000) != 0)
    ZinAssertImpl("E4M3Overflow is not supported.", v2, v3);
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;

  v4 = 896;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 128;
      goto LABEL_5;
    case 2:
      v4 = 256;
      goto LABEL_5;
    case 3:
      v4 = 768;
LABEL_5:
      *(_DWORD *)(result + 540) = *(_DWORD *)(result + 540) & 0xFFFFFC3F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 0x8000;
  switch(a4)
  {
    case 0:
      v5 = 229376;
      goto LABEL_10;
    case 2:
      v5 = 0x10000;
      goto LABEL_10;
    case 3:
      v5 = 196608;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2048;
      switch(a3)
      {
        case 0:
          v6 = 14336;
          goto LABEL_14;
        case 2:
          v6 = 4096;
          goto LABEL_14;
        case 3:
          v6 = 12288;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_DWORD *)(result + 540) = v6 | v5 | *(_DWORD *)(result + 540) & 0xFFFC03FF;
          return result;
      }
  }
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc2CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;

  v4 = 896;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 128;
      goto LABEL_5;
    case 2:
      v4 = 256;
      goto LABEL_5;
    case 3:
      v4 = 768;
LABEL_5:
      *(_DWORD *)(result + 544) = *(_DWORD *)(result + 544) & 0xFFFFFC3F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 0x8000;
  switch(a4)
  {
    case 0:
      v5 = 229376;
      goto LABEL_10;
    case 2:
      v5 = 0x10000;
      goto LABEL_10;
    case 3:
      v5 = 196608;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2048;
      switch(a3)
      {
        case 0:
          v6 = 14336;
          goto LABEL_14;
        case 2:
          v6 = 4096;
          goto LABEL_14;
        case 3:
          v6 = 12288;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_DWORD *)(result + 544) = v6 | v5 | *(_DWORD *)(result + 544) & 0xFFFC03FF;
          return result;
      }
  }
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 432), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a1 + 552) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a1 + 564) & 0x3F | (v4 << 6);
  return result;
}

void ZinAneTd<7u>::SetTileDmaSrc1CropOffset(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Invalid Crop Offset for architecture", v2, v3);
}

void ZinAneTd<7u>::SetTileDmaSrc1WrapStatic()
{
  ZinAssertImpl("Wrap not supported on architecture");
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 596) = *(_DWORD *)(result + 596) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 596) = *(_DWORD *)(result + 596) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1BaseAddrLo(uint64_t result, uint64_t a2, char a3)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFFFC0 | a3 & 0x1F | 0x20;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 540);
    v3 = 0x40000;
LABEL_7:
    *(_DWORD *)(result + 540) = v2 & 0xFFF3FFFF | v3;
    return result;
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 540);
    if ((v2 & 0xC0000) == 0)
    {
      v3 = 0x80000;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 616) = a2;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;

  v4 = *(_DWORD *)(result + 604);
  *(_DWORD *)(result + 604) = v4 | 1;
  if (a4)
    ZinAssertImpl("Architecture only supports lossless compression");
  if (a3 == 2)
  {
    v5 = v4 | 0x10001;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v5 = v4 & 0xFFFEFFFE | 1;
  }
  *(_DWORD *)(result + 604) = v5;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 604) = v5 & 0xFFFFC0FF | dword_207AB03D8[a2 - 1];
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 840) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 612) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1MetaData(uint64_t result, uint64_t a2, char a3)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFFF03F | ((a3 & 0x1F) << 6) | 0x800;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 604) |= 0x20000u;
  return result;
}

void ZinAneTd<7u>::SetL2Src2Interleave(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != 1)
    ZinAssertImpl("No Source2 for architecture", v2, v3);
}

uint64_t ZinAneTd<7u>::SetTileDmaSrc2Enable(uint64_t result)
{
  *(_DWORD *)(result + 540) |= 1u;
  return result;
}

int8x16_t ZinAneTd<7u>::SetTileDmaSrc2PixelOffset(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, *(int8x16_t *)(a1 + 636), v5);
  *(int8x16_t *)(a1 + 636) = result;
  return result;
}

void ZinAneTd<7u>::SetTileDmaSrc2CompressedInfo(uint64_t a1, int a2, int a3, int a4)
{
  ZinAneTd<7u>::SetTileDmaSrc1CompressedInfo(a1, a2, a3, a4);
  ZinAssertImpl("Source Compression not supported");
}

BOOL ZinAneTd<7u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 840) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 612) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 816) & 0xFFFFCFFC | 0x1000;
      goto LABEL_15;
    case 2:
      v3 = *(_DWORD *)(result + 816) & 0xFFFFCFFC;
      goto LABEL_15;
    case 3:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 816) & 0xFFFFCECC | 1;
      goto LABEL_15;
    case 5:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_10;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 816) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_10:
        v5 = 8497;
      break;
    case 11:
      ZinAssertImpl("Invalid format provided for architecture");
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_15:
  *(_DWORD *)(result + 816) = v3;
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 552), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 708) = *(_DWORD *)(a1 + 708) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 840) + 552), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a1 + 816) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<7u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 552), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 708) = *(_DWORD *)(a1 + 708) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 708) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x4000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 792) & 0xFBFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 792) = v4;
  *(_DWORD *)(result + 708) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 792) |= 1u;
  *(_DWORD *)(result + 32) |= 0x20000000u;
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 792) | 0x3C0;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 792) & 0xFFFFFC3F | 0xC0;
      goto LABEL_5;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = *(_DWORD *)(result + 792) & 0xFFFFFC3F | 0x340;
LABEL_5:
      *(_DWORD *)(result + 792) = v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 480), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 804) = *(_DWORD *)(a1 + 804) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 472), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a1 + 800) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 808) = *(_DWORD *)(a1 + 808) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 840) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 812) = *(_DWORD *)(a1 + 812) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 816) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 816) = v2;
  *(_DWORD *)(result + 816) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

void ZinAneTd<7u>::SetTileDmaDstCropOffset(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 | a2)
    ZinAssertImpl("Invalid Crop Offset for architecture", v3, v4);
}

uint64_t ZinAneTd<7u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<7u>::SetTileDmaDstBaseAddrLo(uint64_t result, uint64_t a2, char a3)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFC0FFF | ((a3 & 0x1F) << 12) | 0x20000;
  return result;
}

void ZinAneTd<7u>::SetTileDmaDstCompressedInfo()
{
  ZinAssertImpl("Output Compression not supported");
}

uint64_t ZinAneTd<7u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFF8FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 768) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 768) & 0xFFF7FFFF;
  *(_DWORD *)(result + 768) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFFFFE0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<7u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<7u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 780) = v10 | *(_DWORD *)(result + 780) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<7u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 768) = *(_DWORD *)(result + 768) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 776) = v10 | *(_DWORD *)(result + 776) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<7u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 772) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a1 + 768) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<7u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 496) = *(_DWORD *)(result + 496) & 0xFFFFE3FF | ((a2 & 7) << 10);
  return result;
}

uint64_t ZinAneTd<7u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 520) = *(_DWORD *)(result + 520) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 520) & 0xFFFFFFFB;
      goto LABEL_4;
    case 1:
      v2 = *(_DWORD *)(result + 520) | 4;
LABEL_4:
      *(_DWORD *)(result + 520) = v2;
      break;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
    case 4:
      ZinAssertImpl("Error: NP2 small source mode  is not supported for this arch");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::GetNESmallSourceMode(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 520) >> 2) & 1;
}

uint64_t ZinAneTd<7u>::SetNEKeepKernel(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4096;
  else
    v2 = 0;
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFEFFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetNEUsePrevKernel(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 764) = *(_DWORD *)(result + 764) & 0xFFFFBFFF | v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetCommonTaskType(uint64_t result, int a2)
{
  int v2;

  v2 = 16;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(result + 520) &= 0xFFFFFF8F;
      goto LABEL_9;
    case 1:
LABEL_9:
      ZinAssertImpl("Error: Invalid Task Type");
    case 2:
      goto LABEL_7;
    case 3:
      v2 = 96;
      goto LABEL_7;
    case 4:
      v2 = 80;
      goto LABEL_7;
    case 5:
      v2 = 48;
      goto LABEL_7;
    case 6:
      v2 = 32;
      goto LABEL_7;
    case 7:
      v2 = 64;
LABEL_7:
      *(_DWORD *)(result + 520) = *(_DWORD *)(result + 520) & 0xFFFFFF8F | v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<7u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 476) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 476) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 476) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 476) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 476) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 476) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 476) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 476) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 476) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 476) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 476) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 476) = v2;
  return result;
}

uint64_t ZinAneTd<7u>::SetCommonSourceRouting(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 520) & 0xFFFFFFFC | 2;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 520) & 0xFFFFFFFC | 1;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 520) | 3;
  }
  *(_DWORD *)(result + 520) = v2;
  return result;
}

BOOL ZinAneTd<7u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFFFF0F | (16 * (a2 & 0xF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 288));
}

BOOL ZinAneTd<7u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 280));
}

BOOL ZinAneTd<7u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 216));
}

BOOL ZinAneTd<7u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 224));
}

BOOL ZinAneTd<7u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 208));
}

void ZinAneTd<7u>::SetTileOverlapPadReflect(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
    ZinAssertImpl("Error: Overlap pad reflect is not supported", v2, v3);
}

BOOL ZinAneTd<7u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFFFFC1F | (32 * (v4 & 0x1F));
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 176), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<7u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 184), &v4);
  if (result)
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFFE000 | v4 & 0x1FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 468) = *(_DWORD *)(a1 + 468) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 468) = *(_DWORD *)(a1 + 468) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 472) = *(_DWORD *)(a1 + 472) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 480) = *(_DWORD *)(a1 + 480) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a1 + 488) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a1 + 488) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 492) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<7u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 484) = *(_DWORD *)(a1 + 484) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<7u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 504) = *(_DWORD *)(result + 504) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<7u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 840) + 192), &v4);
  if (result)
    *(_WORD *)(a1 + 506) = v4;
  return result;
}

uint64_t ZinAneTd<8u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (!*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 1116) |= dword_207AB0430[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 1116) = *(_DWORD *)(result + 1116) & 0x7FFFFFF | (a4 << 27);
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 556) |= 0x800000u;
  return result;
}

uint64_t ZinAneTd<8u>::SetEventFlags(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFC000000 | a2 & 0x3FFFFFF;
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFC000000 | a3 & 0x3FFFFFF;
  return result;
}

BOOL ZinAneTd<8u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 296), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a1 + 880) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 304), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a1 + 884) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1296) + 316), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 312), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 888) = *(_DWORD *)(a1 + 888) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 320), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 892) = *(_DWORD *)(a1 + 892) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 328), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a1 + 896) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 872) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 872) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src2DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 876) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 876) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 876) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 876) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 920) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 920) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      v2 = *(_DWORD *)(result + 920) | 0xC0;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 920) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultWrapCfg(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 948) & 0xFFFFF8FF | 0x400;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 948) & 0xFFFFF8FF | 0x300;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 948) & 0xFFFFF8FF | 0x100;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 948) & 0xFFFFF8FF | 0x200;
      goto LABEL_7;
    case 4:
      ZinAssertImpl("Error: Invalid Wrap Axis");
    case 5:
      v2 = *(_DWORD *)(result + 948) & 0xFFFFF8FF;
LABEL_7:
      *(_DWORD *)(result + 948) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultWrapStartOffset(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 962) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultWrapIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 960) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultWrapAddrOffset(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 984) = *(_DWORD *)(result + 984) & 0xF800FFFF | ((a2 & 0x7FF) << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultWrapAddr(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 984) = *(_DWORD *)(result + 984) & 0xFFFFF000 | a2 & 0xFFF;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 716), 5);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0x7FFFFFF | (result << 27);
  return result;
}

uint64_t ZinAneTd<8u>::SetSourceAddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 976) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 976) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<8u>::SetSourceWrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 948) = *(_DWORD *)(result + 948) & 0xFFFFFFF8 | dword_207AB04F0[a2];
  *(_DWORD *)(result + 952) = a4 | (a3 << 16);
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 872) = *(_DWORD *)(result + 872) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 876) = *(_DWORD *)(result + 876) & 0xFFFFFFFC | v2;
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 900) = *(_DWORD *)(a1 + 900) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 904) = *(_DWORD *)(a1 + 904) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1296) + 356), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 352), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 908) = *(_DWORD *)(a1 + 908) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 360), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 912) = *(_DWORD *)(a1 + 912) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 368), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 916) = *(_DWORD *)(a1 + 916) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src2OffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 732), 5);
  *(_DWORD *)(a1 + 876) = *(_DWORD *)(a1 + 876) & 0x7FFFFFF | (result << 27);
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 872) & 0xFDF80FFF;
  *(_DWORD *)(result + 872) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 872) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetL2Src2CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 876) & 0xFDF80FFF;
  *(_DWORD *)(result + 876) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 876) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultCfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 920) & 0xFDF80FFF;
  *(_DWORD *)(result + 920) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 920) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetSource2AddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 980) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 980) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<8u>::SetSource2Wrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 948) = *(_DWORD *)(result + 948) & 0xFFFFFF8F | dword_207AB0500[a2];
  *(_DWORD *)(result + 956) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8;
      goto LABEL_8;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8 | 3;
      goto LABEL_8;
    case 3:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8 | 1;
      goto LABEL_8;
    case 4:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8 | 2;
      goto LABEL_8;
    case 5:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8 | 4;
      goto LABEL_8;
    case 6:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF8 | 5;
LABEL_8:
      *(_DWORD *)(result + 1064) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1064) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 1064) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 1064) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetPassthroughEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1060) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 1060) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 1060) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 1060) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcKid(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 46) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcNoReuseHint(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 76) = *(_DWORD *)(result + 4 * a3 + 76) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcConfigPrefetch(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  if (*(_DWORD *)(a2 + 96) == 1)
  {
    v2 = *(unsigned __int16 *)(result + 52) | (*(_DWORD *)(a2 + 104) << 16);
    *(_DWORD *)(result + 52) = v2;
    v3 = v2 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 112);
    *(_DWORD *)(result + 52) = v3;
    *(_DWORD *)(result + 52) = v3 & 0xFFFFFFFD | (2 * *(unsigned __int8 *)(a2 + 113));
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 76) = *(_DWORD *)(result + 4 * a3 + 76) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 284) = *(_DWORD *)(result + 284) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 268) = *(_DWORD *)(result + 268) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 300) = *(_DWORD *)(result + 300) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PaletteLut Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 316) = *(_DWORD *)(result + 316) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 568), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 204) = *(_DWORD *)(a1 + 4 * a3 + 204) & 0x3F | (v6 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetKernelDmaSrcCoeffBaseOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 560), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 140) = *(_DWORD *)(a1 + 4 * a3 + 140) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcDataSetId(uint64_t result, char a2, uint64_t a3)
{
  *(_BYTE *)(result + 4 * a3 + 77) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_11;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_11:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 868) = *(_DWORD *)(result + 868) & 0xFFFFFFF3 | v4;
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcEnable(uint64_t result)
{
  *(_DWORD *)(result + 44) |= 0x40u;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 1060) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 1060) | 0x10000;
  }
  *(_DWORD *)(result + 1060) = v2;
  return result;
}

void ZinAneTd<8u>::SetAlignedKernelRelocationCommand(uint64_t *a1, _QWORD *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  const void *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  __int16 v40;
  __int128 __p;
  uint64_t v42;
  int v43;

  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = *((unsigned __int8 *)a4 + 23);
    else
      v10 = (size_t)a4[1];
    v11 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v10 + 7);
    if (v39 < 0)
      v11 = (void **)v38[0];
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = a4;
      else
        v12 = *a4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5510, a3, 1, 1, a5, 0);
    v13 = a1[159];
    if (v13 >= a1[160])
    {
      v16 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v13 = v40;
      v14 = (std::string *)(v13 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v15 = __p;
        *(_QWORD *)(v13 + 24) = v42;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *(_DWORD *)(v13 + 32) = v43;
      v16 = v13 + 40;
      a1[159] = v13 + 40;
    }
    a1[159] = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v17 + 7);
    if (v39 < 0)
      v18 = (void **)v38[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5506, a3, 1, 1, a5, 0);
    v20 = a1[159];
    if (v20 >= a1[160])
    {
      v23 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v20 = v40;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v42;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v43;
      v23 = v20 + 40;
      a1[159] = v20 + 40;
    }
    a1[159] = v23;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v24 + 6);
    if (v39 < 0)
      v25 = (void **)v38[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5502, a3, 1, 1, a5, 0);
    v27 = a1[159];
    if (v27 >= a1[160])
    {
      v30 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v27 = v40;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v29 = __p;
        *(_QWORD *)(v27 + 24) = v42;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *(_DWORD *)(v27 + 32) = v43;
      v30 = v27 + 40;
      a1[159] = v27 + 40;
    }
    a1[159] = v30;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[4])
  {
    if (*((char *)a4 + 23) >= 0)
      v31 = *((unsigned __int8 *)a4 + 23);
    else
      v31 = (size_t)a4[1];
    v32 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v31 + 5);
    if (v39 < 0)
      v32 = (void **)v38[0];
    if (v31)
    {
      if (*((char *)a4 + 23) >= 0)
        v33 = a4;
      else
        v33 = *a4;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_bias");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5498, a3, 1, 1, a5, 0);
    v34 = a1[159];
    if (v34 >= a1[160])
    {
      v37 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v34 = v40;
      v35 = (std::string *)(v34 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v36 = __p;
        *(_QWORD *)(v34 + 24) = v42;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      *(_DWORD *)(v34 + 32) = v43;
      v37 = v34 + 40;
      a1[159] = v34 + 40;
    }
    a1[159] = v37;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
}

void sub_206F8FF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 1272) = v23;
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *ZinAneTd<8u>::SetAlignedKernelBias(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[11] = result[11] & 0xFFFFFFF3 | 8;
  result[265] = result[265] & 0xFFF9FFFF | 0x40000;
  result[68] = result[68] & 0x3F | (a4 << 6);
  result[67] |= 1u;
  return result;
}

_DWORD *ZinAneTd<8u>::SetAlignedKernelPostScale(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[11] = result[11] & 0xFFFFFFFC | 2;
  result[265] = result[265] & 0xFFE7FFFF | 0x100000;
  result[72] = result[72] & 0x3F | (a4 << 6);
  result[71] |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetAlignedKernelPaletteLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 304) = *(_DWORD *)(result + 304) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 300) |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetAlignedKernelNonLinearLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 320) = *(_DWORD *)(result + 320) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 316) |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetAlignedCoeffSizePerCh(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(result + 48) & 0xF0000000 | a2 & 0xFFFFFFF;
  return result;
}

uint64_t ZinAneTd<8u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 1016) = a2;
  return result;
}

void ZinAneTd<8u>::SetPEScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1004) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<8u>::SetPEBias(uint64_t a1, float a2)
{
  *(float *)(a1 + 1000) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<8u>::SetPEPreScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1012) = ZinF32ToNearestF19(a2);
}

uint64_t ZinAneTd<8u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 868) = *(_DWORD *)(result + 868) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 868) = *(_DWORD *)(result + 868) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 552) = *(_DWORD *)(result + 552) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 552) = *(_DWORD *)(result + 552) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  unsigned int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 552) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 552) |= v4;
  }
  return result;
}

void ZinAneTd<8u>::SetPEIndexMode(uint64_t a1, int a2)
{
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(a1 + 972) & 0xFFF8FFFF | 0x10000;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(a1 + 972) & 0xFFF8FFFF | 0x20000;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(a1 + 972) & 0xFFF8FFFF | 0x50000;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 972) & 0xFFF8FFFF | 0x30000;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(a1 + 972) & 0xFFF8FFFF | 0x40000;
LABEL_7:
      *(_DWORD *)(a1 + 972) = v2;
      break;
    case 5:
      v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v3)
        ZinAneTd<8u>::SetPEIndexMode(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    default:
      return;
  }
}

uint64_t ZinAneTd<8u>::SetPEIndexTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 972) = *(_DWORD *)(result + 972) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPEIndexBroadcast(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *((_DWORD *)v2 + 4);
      if (v3 == 2)
        break;
      if (v3 == 1)
      {
        v4 = 0x1000000;
LABEL_6:
        *(_DWORD *)(result + 972) |= v4;
      }
      v2 = (uint64_t *)*v2;
      if (!v2)
        return result;
    }
    v4 = 0x2000000;
    goto LABEL_6;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetPEMaxIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 972) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 996) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1296) + 600);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1296) + 600);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 600)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1296) + 600);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1296) + 600);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<8u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 996) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 996) | 0x10000;
  }
  *(_DWORD *)(result + 996) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 996) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 996) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 996) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 996) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 996) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetPECondition(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F;
      goto LABEL_10;
    case 1:
      v2 = *(_DWORD *)(result + 996) | 0x1C0;
      goto LABEL_10;
    case 2:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0x100;
      goto LABEL_10;
    case 3:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0x180;
      goto LABEL_10;
    case 4:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0x80;
      goto LABEL_10;
    case 5:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0x140;
      goto LABEL_10;
    case 6:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0x40;
      goto LABEL_10;
    case 7:
      v2 = *(_DWORD *)(result + 996) & 0xFFFFFE3F | 0xC0;
LABEL_10:
      *(_DWORD *)(result + 996) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 552) = *(_DWORD *)(result + 552) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 924) = *(_DWORD *)(a1 + 924) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 928) = *(_DWORD *)(a1 + 928) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 392), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 932) = *(_DWORD *)(a1 + 932) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 400), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a1 + 936) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 408), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 940) = *(_DWORD *)(a1 + 940) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<8u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 920) = *(_DWORD *)(result + 920) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 920) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 920) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 920) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 920) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 920) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 688) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 688) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 688) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 688) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 688) = v3;
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a1 + 688) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 584) |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 584) = *(_DWORD *)(result + 584) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 592) = v6 | v5;
          return result;
      }
  }
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 588) = *(_DWORD *)(result + 588) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 596) = v6 | v5;
          return result;
      }
  }
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 612) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 432), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a1 + 616) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a1 + 620) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<8u>::SetTileDmaSrc1WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 768) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a1 + 592) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4974, a2, 0, 0, 0, 0);
  v6 = a1[159];
  if (v6 >= a1[160])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[159] = v6 + 40;
  }
  a1[159] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<8u>::SetTileDmaSrc1WrapCfg((uint64_t)a1, a3);
}

void sub_206F90EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1272) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 688) = *(_DWORD *)(result + 688) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 688) = *(_DWORD *)(result + 688) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<8u>::SetTileDmaSrc1BaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 4932, a3, 1, 1, 0, 0);
  v4 = a1[159];
  if (v4 >= a1[160])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[159] = v4 + 40;
  }
  a1[159] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F90FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1272) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 584) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 584) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 584) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 584) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 588) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 588) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 588) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 588) = v2;
  return result;
}

unint64_t ZinAneTd<8u>::SetTileDmaSrc1DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 592));
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a1 + 584) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

unint64_t ZinAneTd<8u>::SetTileDmaSrc2DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 592));
  *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 588) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1DependencyOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  ZinCodegenUtil *v5;

  v5 = 0;
  if (GetProgrammedDependencyOffsetAndDimension(a2, &v5, (_DWORD *)&v5 + 1))
    ZinAssertImpl("Failed to get dependency offset or dimension.");
  if (HIDWORD(v5) == 2)
  {
    v3 = *(_DWORD *)(a1 + 776) & 0xFFFFFFFC | 2;
  }
  else if (HIDWORD(v5) == 1)
  {
    v3 = *(_DWORD *)(a1 + 776) & 0xFFFFFFFC | 1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 776) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 776) = v3;
  result = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType((ZinCodegenUtil *)v5, 0x1DuLL);
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a1 + 776) & 0x80000003 | (4 * (result & 0x1FFFFFFF));
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2DependencyOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  ZinCodegenUtil *v5;

  v5 = 0;
  if (GetProgrammedDependencyOffsetAndDimension(a2, &v5, (_DWORD *)&v5 + 1))
    ZinAssertImpl("Failed to get dependency offset or dimension");
  if (HIDWORD(v5) == 2)
  {
    v3 = *(_DWORD *)(a1 + 780) & 0xFFFFFFFC | 2;
  }
  else if (HIDWORD(v5) == 1)
  {
    v3 = *(_DWORD *)(a1 + 780) & 0xFFFFFFFC | 1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 780) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 780) = v3;
  result = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType((ZinCodegenUtil *)v5, 0x1DuLL);
  *(_DWORD *)(a1 + 780) = *(_DWORD *)(a1 + 780) & 0x80000003 | (4 * (result & 0x1FFFFFFF));
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 716) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 704);
  *(_DWORD *)(result + 704) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 704) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 704) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 704) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 708) = *(_DWORD *)(a1 + 708) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a1 + 712) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<8u>::SetTileDmaSrc1MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4944, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1272);
  if (v10 >= *(_QWORD *)(a1 + 1280))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1264), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1272) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1272) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 704) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 664) = vsli_n_s32(*(int32x2_t *)(a1 + 664), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F914B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1272) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 704) |= 8u;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc1DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 585) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2Format(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v3 = *(_DWORD *)(result + 692);
      v4 = v3 & 0xFFFFFFFC;
      *(_DWORD *)(result + 692) = v3 & 0xFFFFFFFC;
      switch(a2)
      {
        case 1:
          v5 = v3 & 0xFFFFCFFC | 0x1000;
          goto LABEL_24;
        case 2:
          v5 = v3 & 0xFFFFCFFC;
          goto LABEL_24;
        case 3:
          goto LABEL_5;
        case 4:
          goto LABEL_7;
        case 5:
          goto LABEL_9;
        case 6:
          goto LABEL_11;
        case 7:
          goto LABEL_13;
        case 8:
          goto LABEL_26;
        case 9:
          goto LABEL_15;
        case 10:
          goto LABEL_18;
        case 11:
          goto LABEL_22;
        case 12:
          ZinAssertImpl("E4M3 is not supported");
        case 13:
          ZinAssertImpl("E5M2 is not supported");
        default:
          goto LABEL_27;
      }
    case 3:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_5:
      v6 = v4 & 0xFFFFCFFF;
      v7 = 8240;
      break;
    case 4:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_7:
      v5 = v4 & 0xFFFFCECF;
      goto LABEL_24;
    case 5:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_9:
      v5 = v4 & 0xFFFFCECF | 0x100;
      goto LABEL_24;
    case 6:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_11:
      v5 = v4 & 0xFFFFCECF | 0x10;
      goto LABEL_24;
    case 7:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_13:
      v6 = v4 & 0xFFFFCECF;
      v7 = 272;
      break;
    case 8:
LABEL_26:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_15:
      v6 = v4 & 0xFFFFCECF;
      if (!a3)
        goto LABEL_20;
      v7 = 4400;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 692) & 0xFFFFFFFC | 1;
LABEL_18:
      v6 = v4 & 0xFFFFCECF;
      if (a3)
        v7 = 304;
      else
LABEL_20:
        v7 = 8496;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 692) | 3;
LABEL_22:
      v6 = v4 & 0xFFFFFFCF;
      v7 = 12544;
      break;
    default:
LABEL_27:
      ZinAssertImpl("Invalid format provided");
  }
  v5 = v6 | v7;
LABEL_24:
  *(_DWORD *)(result + 692) = v5;
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<8u>::SetL2Src2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 876) = *(_DWORD *)(a1 + 876) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2Enable(uint64_t result)
{
  *(_DWORD *)(result + 588) |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<8u>::SetTileDmaSrc2WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 772) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a1 + 596) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4975, a2, 0, 0, 0, 0);
  v6 = a1[159];
  if (v6 >= a1[160])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[159] = v6 + 40;
  }
  a1[159] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<8u>::SetTileDmaSrc2WrapCfg((uint64_t)a1, a3);
}

void sub_206F918C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1272) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 692) = *(_DWORD *)(result + 692) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 692) = *(_DWORD *)(result + 692) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 732) = a2;
  return result;
}

int8x16_t ZinAneTd<8u>::SetTileDmaSrc2PixelOffset(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, a1[47], v5);
  a1[47] = result;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 720);
  *(_DWORD *)(result + 720) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 720) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 720) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 720) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrc2DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 589) = a2;
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a1 + 724) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a1 + 728) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<8u>::SetTileDmaSrc2MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4946, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1272);
  if (v10 >= *(_QWORD *)(a1 + 1280))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1264), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1272) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1272) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 720) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 676) = vsli_n_s32(*(int32x2_t *)(a1 + 676), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 684) = *(_DWORD *)(a1 + 684) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F91BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1272) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 1168) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 1168) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 1168) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 1168) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 1168) = v3;
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<8u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 920) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x1000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 1112) & 0xFEFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 1112) = v4;
  *(_DWORD *)(result + 920) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 1112) |= 1u;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1112) | 0xF0;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 1112) & 0xFFFFFF0F | 0x30;
      goto LABEL_5;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = *(_DWORD *)(result + 1112) & 0xFFFFFF0F | 0xD0;
LABEL_5:
      *(_DWORD *)(result + 1112) = v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 1132) = *(_DWORD *)(a1 + 1132) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a1 + 1128) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 504), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a1 + 1136) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 512), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 1140) = *(_DWORD *)(a1 + 1140) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 1168) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 1168) = v2;
  *(_DWORD *)(result + 1168) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstCropOffset(uint64_t result, int a2, __int16 a3)
{
  *(_WORD *)(result + 1192) = a3;
  if (a2)
    ZinAssertImpl("Invalid Crop Offset X for architecture");
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstWrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<8u>::SetTileDmaDstWrapCfg(a1, a4);
  *(_DWORD *)(a1 + 1164) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstWrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 1116) = *(_DWORD *)(a1 + 1116) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstWrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 5197, a2, 0, 0, 0, 0);
  v6 = a1[159];
  if (v6 >= a1[160])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[159] = v6 + 40;
  }
  a1[159] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<8u>::SetTileDmaDstWrapCfg((uint64_t)a1, a3);
}

void sub_206F92234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1272) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1168) = *(_DWORD *)(result + 1168) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 1168) = *(_DWORD *)(result + 1168) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<8u>::SetTileDmaDstBaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 5186, a3, 1, 1, 0, 0);
  v4 = a1[159];
  if (v4 >= a1[160])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[159] = v4 + 40;
  }
  a1[159] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1272) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<8u>::SetTileDmaDstCompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaDst Compressed Width");
  *(_DWORD *)(a1 + 1184) = *(_DWORD *)(a1 + 1184) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Compressed Height");
  *(_DWORD *)(a1 + 1188) = *(_DWORD *)(a1 + 1188) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstCompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 1176);
  *(_DWORD *)(result + 1176) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 1176) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 1176) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 1176) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

double ZinAneTd<8u>::SetTileDmaDstMetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 5192, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1272);
  if (v10 >= *(_QWORD *)(a1 + 1280))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1264), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1272) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1272) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 1176) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 1152) = vsli_n_s32(*(int32x2_t *)(a1 + 1152), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a1 + 1160) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F925FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1272) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetTileDmaDstNoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 1176) |= 8u;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1113) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreFlush(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFFFE | a2;
  *(_WORD *)(result + 1240) = a3;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreTaskSync(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  if (a3)
    v3 = 4;
  else
    v3 = 0;
  if (a2)
    v4 = 8;
  else
    v4 = 0;
  *(_DWORD *)(result + 1204) = v3 | v4 | *(_DWORD *)(result + 1204) & 0xFFFFFFF3;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreEarlyTermination(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, __int16 a8, __int16 a9, __int16 a10, char a11, __int16 a12, char a13)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (a2)
    v13 = 16;
  else
    v13 = 0;
  if (a3)
    v14 = 32;
  else
    v14 = 0;
  if (a4)
    v15 = 64;
  else
    v15 = 0;
  if (a5)
    v16 = 128;
  else
    v16 = 0;
  if (a6)
    v17 = 256;
  else
    v17 = 0;
  *(_DWORD *)(result + 1204) = v14 | v13 | v15 | v16 | v17 | *(_DWORD *)(result + 1204) & 0xFFFFFE0F;
  if (a3)
  {
    *(_WORD *)(result + 1236) = a8;
    if (!a4)
    {
LABEL_18:
      if (!a6)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if (!a4)
  {
    goto LABEL_18;
  }
  *(_WORD *)(result + 1238) = a9;
  if (!a6)
  {
LABEL_19:
    if ((a5 & 1) != 0)
      goto LABEL_25;
LABEL_24:
    if (!a7)
      return result;
    goto LABEL_25;
  }
LABEL_23:
  *(_BYTE *)(result + 1244) = a11;
  if ((a5 & 1) == 0)
    goto LABEL_24;
LABEL_25:
  *(_BYTE *)(result + 1246) = a13;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreTelemetryBackOff(uint64_t result, int a2, char a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  unsigned int v6;

  v6 = *(_DWORD *)(result + 1248) & 0xFFFFFFFE | a2;
  if (a2)
    v6 = (16 * (a3 & 0xF)) | (unsigned __int16)(a4 << 8) | (a5 << 16) | (a6 << 24) | *(_DWORD *)(result + 1248) & 0xE | a2 & 0xF;
  *(_DWORD *)(result + 1248) = v6;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreFootprintLimiter(uint64_t result, int a2, __int16 a3, unsigned __int16 a4)
{
  int v4;
  unsigned int v5;

  if (a2)
    v4 = 512;
  else
    v4 = 0;
  v5 = *(_DWORD *)(result + 1204) & 0xFFFFFDFF | v4;
  *(_DWORD *)(result + 1204) = v5;
  if (a2)
  {
    *(_DWORD *)(result + 1204) = (unsigned __int16)v5 | (a4 << 16);
    *(_DWORD *)(result + 1232) = *(_DWORD *)(result + 1232) & 0xF001FFFF | ((a3 & 0x7FF) << 17);
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreSieveFiltering(uint64_t result, char a2, char a3)
{
  *(_DWORD *)(result + 1208) = a2 & 7 | (16 * (a3 & 0xF)) | *(_DWORD *)(result + 1208) & 0xFFFFFF08;
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreBandwidthLimit(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFE00FF | ((a2 & 0x1FF) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetCacheDmaPreTelemetryResponseAgeOut(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFF0FFFFF | ((a2 & 0xF) << 20);
  return result;
}

void ZinAneTd<8u>::SetCacheDmaPreDSIDAndSize(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  __int16 v11;
  __int128 __p;
  uint64_t v13;
  int v14;

  *(_DWORD *)(a1 + 1228) = *(_DWORD *)(a1 + 1228) & 0xC000007F | ((a3 & 0x7FFFFF) << 7);
  if (*((_BYTE *)a2 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, &byte_207AF6795);
    ZinAneRelocInfo::ZinAneRelocInfo(&v11, v9, 5698, *a2, 0, 0, 0, 0);
    v5 = *(_QWORD *)(a1 + 1272);
    if (v5 >= *(_QWORD *)(a1 + 1280))
    {
      v8 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1264), (uint64_t)&v11);
    }
    else
    {
      *(_WORD *)v5 = v11;
      v6 = (std::string *)(v5 + 8);
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v7 = __p;
        *(_QWORD *)(v5 + 24) = v13;
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_DWORD *)(v5 + 32) = v14;
      v8 = v5 + 40;
      *(_QWORD *)(a1 + 1272) = v5 + 40;
    }
    *(_QWORD *)(a1 + 1272) = v8;
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_206F928E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v22;
  *(_QWORD *)(v21 + 1272) = v23;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ZinAneTd<8u>::SetCacheDmaPreAddress(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a3, 5700, a2, 1, 1, 0, 0);
  v4 = a1[159];
  if (v4 >= a1[160])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 158, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[159] = v4 + 40;
  }
  a1[159] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F929F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1272) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x20000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 556) = *(_DWORD *)(result + 556) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 1064) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 1064) & 0xFFF7FFFF;
  *(_DWORD *)(result + 1064) = v2;
  return result;
}

BOOL ZinAneTd<8u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 688), &v7))
    ZinAssertImpl("Illegal Kernel Group Stride");
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a1 + 68) & 0x3F | (v7 << 6);
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 680), &v6);
  if (!result)
    ZinAssertImpl("Illegal Kernel OCG Stride");
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 72) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<8u>::SetRcasKeyMask(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1080) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetRcasMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 1080) & 0xFFEFFFFF;
LABEL_7:
      *(_DWORD *)(result + 1080) = v2;
      return result;
    case 2:
      v2 = *(_DWORD *)(result + 1080) | 0x100000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Unknown RCAS Mode.\n");
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetRcasSenseAxis(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1080) | 0x3000;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 1080) & 0xFFFFCFFF | 0x1000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 1080) & 0xFFFFCFFF | 0x2000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 1080) & 0xFFFFCFFF;
LABEL_6:
      *(_DWORD *)(result + 1080) = v2;
      break;
    case 4:
    case 5:
      ZinAssertImpl("Unknown RCAS Sense Axis.\n");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetRcasSenseBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1080) = *(_DWORD *)(result + 1080) & 0xFFF0FFFF | ((a2 & 0xF) << 16);
  return result;
}

uint64_t ZinAneTd<8u>::SetRcasCmpBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1080) = *(_DWORD *)(result + 1080) & 0xFFFFF8FF | ((a2 & 7) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 1060) = *(_DWORD *)(result + 1060) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetStochasticRoundMode(uint64_t result, int a2)
{
  if (a2 != 1 && a2 != 2)
  {
    if (!a2)
      ZinAssertImpl("Invalid stochastic rounding mode");
    a2 = 0;
  }
  *(_DWORD *)(result + 1084) = *(_DWORD *)(result + 1084) & 0xFFFFFFFC | a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetStochasticRoundSeed(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 1088) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetStochasticRoundIntegerBits(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1084) = *(_DWORD *)(result + 1084) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return result;
}

uint64_t ZinAneTd<8u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFFE0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<8u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 1076) = v10 | *(_DWORD *)(result + 1076) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<8u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 1064) = *(_DWORD *)(result + 1064) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 1072) = v10 | *(_DWORD *)(result + 1072) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<8u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 1068) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a1 + 1064) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<8u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 528) = *(_DWORD *)(result + 528) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<8u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 556) = *(_DWORD *)(result + 556) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 556) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 556) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      v2 = *(_DWORD *)(result + 556) | 0xC;
      goto LABEL_6;
    case 4:
      v2 = *(_DWORD *)(result + 556) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 556) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_207A7FF60 + (*(_DWORD *)(a1 + 556) & 0xC));
}

uint64_t ZinAneTd<8u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 586) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 590) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 707) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaSrcCompressed2MdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 723) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1114) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcCoeffUserTag(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  int8x16_t v3;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s32(a2 << 16);
  do
  {
    *(int8x16_t *)(result + 76 + v2) = vorrq_s8((int8x16_t)(*(_OWORD *)(result + 76 + v2) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return result;
}

uint64_t ZinAneTd<8u>::SetCachePrefetchDmaUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1214) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcPostScaleUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 286) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcPaletteLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 302) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcBiasUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 270) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 318) = a2;
  return result;
}

uint64_t ZinAneTd<8u>::SetCommonTaskType(uint64_t result, unsigned int a2)
{
  if (a2 <= 7)
    *(_DWORD *)(result + 556) = *(_DWORD *)(result + 556) & 0xFFFFFF0F | dword_207AB04A0[a2];
  return result;
}

uint64_t ZinAneTd<8u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 508) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 508) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 508) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 508) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 508) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 508) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 508) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 508) = v2;
  return result;
}

uint64_t ZinAneTd<8u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 508) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 508) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 508) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 508) = v2;
  return result;
}

BOOL ZinAneTd<8u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFFF0F | (16 * (a2 & 0xF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 288));
}

BOOL ZinAneTd<8u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 280));
}

BOOL ZinAneTd<8u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 216));
}

BOOL ZinAneTd<8u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 224));
}

BOOL ZinAneTd<8u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 208));
}

BOOL ZinAneTd<8u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFFFFC0 | v4 & 0x3F;
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<8u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 184), &v4);
  if (result)
    *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFFE000 | v4 & 0x1FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 500) = *(_DWORD *)(a1 + 500) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 520) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 520) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<8u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<8u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 540) = *(_DWORD *)(result + 540) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<8u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1296) + 192), &v4);
  if (result)
    *(_WORD *)(a1 + 542) = v4;
  return result;
}

uint64_t ZinAneTd<10u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (!*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 868) |= dword_207AB0430[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 868) = *(_DWORD *)(result + 868) & 0x7FFFFFF | (a4 << 27);
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 308) |= 0x800000u;
  return result;
}

uint64_t ZinAneTd<10u>::SetEventFlags(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFC000000 | a2 & 0x3FFFFFF;
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFC000000 | a3 & 0x3FFFFFF;
  return result;
}

BOOL ZinAneTd<10u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 296), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 632) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 304), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 636) = *(_DWORD *)(a1 + 636) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 992) + 316), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 312), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a1 + 640) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 320), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 644) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 328), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a1 + 648) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 624) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 624) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 624) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 624) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src2DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 628) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 628) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 628) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 628) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 672) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 672) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      v2 = *(_DWORD *)(result + 672) | 0xC0;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 672) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultWrapCfg(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 700) & 0xFFFFF8FF | 0x400;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 700) & 0xFFFFF8FF | 0x300;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 700) & 0xFFFFF8FF | 0x100;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 700) & 0xFFFFF8FF | 0x200;
      goto LABEL_7;
    case 4:
      ZinAssertImpl("Error: Invalid Wrap Axis");
    case 5:
      v2 = *(_DWORD *)(result + 700) & 0xFFFFF8FF;
LABEL_7:
      *(_DWORD *)(result + 700) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultWrapStartOffset(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 714) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultWrapIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 712) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultWrapAddrOffset(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 736) = *(_DWORD *)(result + 736) & 0xF800FFFF | ((a2 & 0x7FF) << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultWrapAddr(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 736) = *(_DWORD *)(result + 736) & 0xFFFFF000 | a2 & 0xFFF;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 468), 5);
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 624) & 0x7FFFFFF | (result << 27);
  return result;
}

uint64_t ZinAneTd<10u>::SetSourceAddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 728) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 728) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<10u>::SetSourceWrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 700) = *(_DWORD *)(result + 700) & 0xFFFFFFF8 | dword_207AB04F0[a2];
  *(_DWORD *)(result + 704) = a4 | (a3 << 16);
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 624) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 624) = *(_DWORD *)(result + 624) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 628) = *(_DWORD *)(result + 628) & 0xFFFFFFFC | v2;
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 652) = *(_DWORD *)(a1 + 652) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a1 + 656) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 992) + 356), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 352), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 660) = *(_DWORD *)(a1 + 660) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 360), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a1 + 664) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 368), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 668) = *(_DWORD *)(a1 + 668) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src2OffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 484), 5);
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a1 + 628) & 0x7FFFFFF | (result << 27);
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 624) & 0xFDF80FFF;
  *(_DWORD *)(result + 624) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 624) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetL2Src2CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 628) & 0xFDF80FFF;
  *(_DWORD *)(result + 628) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 628) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultCfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 672) & 0xFDF80FFF;
  *(_DWORD *)(result + 672) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 672) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetSource2AddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 732) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 732) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<10u>::SetSource2Wrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 700) = *(_DWORD *)(result + 700) & 0xFFFFFF8F | dword_207AB0500[a2];
  *(_DWORD *)(result + 708) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8;
      goto LABEL_8;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8 | 3;
      goto LABEL_8;
    case 3:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8 | 1;
      goto LABEL_8;
    case 4:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8 | 2;
      goto LABEL_8;
    case 5:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8 | 4;
      goto LABEL_8;
    case 6:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF8 | 5;
LABEL_8:
      *(_DWORD *)(result + 816) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 816) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 816) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 816) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetPassthroughEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 812) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 812) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 812) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 812) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 68) = *(_DWORD *)(result + 4 * a3 + 68) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 68) = *(_DWORD *)(result + 4 * a3 + 68) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 132) = *(_DWORD *)(result + 132) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 116) = *(_DWORD *)(result + 116) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PaletteLut Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 164) = *(_DWORD *)(result + 164) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<10u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 568), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 100) = *(_DWORD *)(a1 + 4 * a3 + 100) & 0x3F | (v6 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetKernelDmaSrcCoeffBaseOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 560), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 84) = *(_DWORD *)(a1 + 4 * a3 + 84) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcDataSetId(uint64_t result, char a2, uint64_t a3)
{
  *(_BYTE *)(result + 4 * a3 + 69) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_11;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_11:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 620) = *(_DWORD *)(result + 620) & 0xFFFFFFF3 | v4;
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 812) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 812) | 0x10000;
  }
  *(_DWORD *)(result + 812) = v2;
  return result;
}

void ZinAneTd<10u>::SetAlignedKernelRelocationCommand(uint64_t *a1, _QWORD *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  const void *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  __int16 v40;
  __int128 __p;
  uint64_t v42;
  int v43;

  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = *((unsigned __int8 *)a4 + 23);
    else
      v10 = (size_t)a4[1];
    v11 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v10 + 7);
    if (v39 < 0)
      v11 = (void **)v38[0];
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = a4;
      else
        v12 = *a4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5472, a3, 1, 1, a5, 0);
    v13 = a1[121];
    if (v13 >= a1[122])
    {
      v16 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v13 = v40;
      v14 = (std::string *)(v13 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v15 = __p;
        *(_QWORD *)(v13 + 24) = v42;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *(_DWORD *)(v13 + 32) = v43;
      v16 = v13 + 40;
      a1[121] = v13 + 40;
    }
    a1[121] = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v17 + 7);
    if (v39 < 0)
      v18 = (void **)v38[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5468, a3, 1, 1, a5, 0);
    v20 = a1[121];
    if (v20 >= a1[122])
    {
      v23 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v20 = v40;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v42;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v43;
      v23 = v20 + 40;
      a1[121] = v20 + 40;
    }
    a1[121] = v23;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v24 + 6);
    if (v39 < 0)
      v25 = (void **)v38[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5464, a3, 1, 1, a5, 0);
    v27 = a1[121];
    if (v27 >= a1[122])
    {
      v30 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v27 = v40;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v29 = __p;
        *(_QWORD *)(v27 + 24) = v42;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *(_DWORD *)(v27 + 32) = v43;
      v30 = v27 + 40;
      a1[121] = v27 + 40;
    }
    a1[121] = v30;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[4])
  {
    if (*((char *)a4 + 23) >= 0)
      v31 = *((unsigned __int8 *)a4 + 23);
    else
      v31 = (size_t)a4[1];
    v32 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v31 + 5);
    if (v39 < 0)
      v32 = (void **)v38[0];
    if (v31)
    {
      if (*((char *)a4 + 23) >= 0)
        v33 = a4;
      else
        v33 = *a4;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_bias");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5460, a3, 1, 1, a5, 0);
    v34 = a1[121];
    if (v34 >= a1[122])
    {
      v37 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v34 = v40;
      v35 = (std::string *)(v34 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v36 = __p;
        *(_QWORD *)(v34 + 24) = v42;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      *(_DWORD *)(v34 + 32) = v43;
      v37 = v34 + 40;
      a1[121] = v34 + 40;
    }
    a1[121] = v37;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
}

void sub_206F94FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 968) = v23;
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *ZinAneTd<10u>::SetAlignedKernelBias(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  result[11] = result[11] & 0xFFFFFFF3 | 8;
  result[203] = result[203] & 0xFFF9FFFF | 0x40000;
  v4 = result[30] & 0x3F | (a4 << 6);
  result[29] |= 1u;
  result[30] = v4;
  return result;
}

_DWORD *ZinAneTd<10u>::SetAlignedKernelPostScale(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  result[11] = result[11] & 0xFFFFFFFC | 2;
  result[203] = result[203] & 0xFFE7FFFF | 0x100000;
  v4 = result[34] & 0x3F | (a4 << 6);
  result[33] |= 1u;
  result[34] = v4;
  return result;
}

uint64_t ZinAneTd<10u>::SetAlignedKernelPaletteLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  v4 = *(_DWORD *)(result + 152) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 148) |= 1u;
  *(_DWORD *)(result + 152) = v4;
  return result;
}

uint64_t ZinAneTd<10u>::SetAlignedKernelNonLinearLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  v4 = *(_DWORD *)(result + 168) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 164) |= 1u;
  *(_DWORD *)(result + 168) = v4;
  return result;
}

uint64_t ZinAneTd<10u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 768) = a2;
  return result;
}

void ZinAneTd<10u>::SetPEScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 756) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<10u>::SetPEBias(uint64_t a1, float a2)
{
  *(float *)(a1 + 752) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<10u>::SetPEPreScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 764) = ZinF32ToNearestF19(a2);
}

uint64_t ZinAneTd<10u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 620) = *(_DWORD *)(result + 620) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 620) = *(_DWORD *)(result + 620) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 304) = *(_DWORD *)(result + 304) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 304) = *(_DWORD *)(result + 304) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  unsigned int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 304) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 304) |= v4;
  }
  return result;
}

void ZinAneTd<10u>::SetPEIndexMode(uint64_t a1, int a2)
{
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(a1 + 724) & 0xFFF8FFFF | 0x10000;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(a1 + 724) & 0xFFF8FFFF | 0x20000;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(a1 + 724) & 0xFFF8FFFF | 0x50000;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 724) & 0xFFF8FFFF | 0x30000;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(a1 + 724) & 0xFFF8FFFF | 0x40000;
LABEL_7:
      *(_DWORD *)(a1 + 724) = v2;
      break;
    case 5:
      v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v3)
        ZinAneTd<8u>::SetPEIndexMode(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    default:
      return;
  }
}

uint64_t ZinAneTd<10u>::SetPEIndexTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 724) = *(_DWORD *)(result + 724) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPEIndexBroadcast(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *((_DWORD *)v2 + 4);
      if (v3 == 2)
        break;
      if (v3 == 1)
      {
        v4 = 0x1000000;
LABEL_6:
        *(_DWORD *)(result + 724) |= v4;
      }
      v2 = (uint64_t *)*v2;
      if (!v2)
        return result;
    }
    v4 = 0x2000000;
    goto LABEL_6;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 748) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 992) + 600);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a1 + 748) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 992) + 600);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a1 + 748) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 600)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a1 + 748) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 992) + 600);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a1 + 748) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 992) + 600);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<10u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 748) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 748) | 0x10000;
  }
  *(_DWORD *)(result + 748) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 748) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 748) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 748) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 748) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 748) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetPECondition(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F;
      goto LABEL_10;
    case 1:
      v2 = *(_DWORD *)(result + 748) | 0x1C0;
      goto LABEL_10;
    case 2:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0x100;
      goto LABEL_10;
    case 3:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0x180;
      goto LABEL_10;
    case 4:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0x80;
      goto LABEL_10;
    case 5:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0x140;
      goto LABEL_10;
    case 6:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0x40;
      goto LABEL_10;
    case 7:
      v2 = *(_DWORD *)(result + 748) & 0xFFFFFE3F | 0xC0;
LABEL_10:
      *(_DWORD *)(result + 748) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 304) = *(_DWORD *)(result + 304) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 676) = *(_DWORD *)(a1 + 676) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a1 + 680) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 392), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 684) = *(_DWORD *)(a1 + 684) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 400), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a1 + 688) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 408), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<10u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 672) = *(_DWORD *)(result + 672) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 672) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 672) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 672) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 672) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 672) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 440) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 440) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 440) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 440) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 440) = v3;
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 440) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 336) |= 1u;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 336) = *(_DWORD *)(result + 336) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 344) = v6 | v5;
          return result;
      }
  }
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 340) = *(_DWORD *)(result + 340) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 348) = v6 | v5;
          return result;
      }
  }
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 364) = *(_DWORD *)(a1 + 364) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 432), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 360) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a1 + 368) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a1 + 372) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<10u>::SetTileDmaSrc1WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 520) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 344) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4974, a2, 0, 0, 0, 0);
  v6 = a1[121];
  if (v6 >= a1[122])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[121] = v6 + 40;
  }
  a1[121] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<10u>::SetTileDmaSrc1WrapCfg((uint64_t)a1, a3);
}

void sub_206F95EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 968) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 440) = *(_DWORD *)(result + 440) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 440) = *(_DWORD *)(result + 440) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<10u>::SetTileDmaSrc1BaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 4932, a3, 1, 1, 0, 0);
  v4 = a1[121];
  if (v4 >= a1[122])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[121] = v4 + 40;
  }
  a1[121] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F95FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 968) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 336) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 336) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 336) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 336) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 340) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 340) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 340) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 340) = v2;
  return result;
}

unint64_t ZinAneTd<10u>::SetTileDmaSrc1DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 592));
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 336) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

unint64_t ZinAneTd<10u>::SetTileDmaSrc2DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 592));
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 340) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1DependencyOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  ZinCodegenUtil *v5;

  v5 = 0;
  if (GetProgrammedDependencyOffsetAndDimension(a2, &v5, (_DWORD *)&v5 + 1))
    ZinAssertImpl("Failed to get dependency offset or dimension.");
  if (HIDWORD(v5) == 2)
  {
    v3 = *(_DWORD *)(a1 + 528) & 0xFFFFFFFC | 2;
  }
  else if (HIDWORD(v5) == 1)
  {
    v3 = *(_DWORD *)(a1 + 528) & 0xFFFFFFFC | 1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 528) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 528) = v3;
  result = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType((ZinCodegenUtil *)v5, 0x1DuLL);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0x80000003 | (4 * (result & 0x1FFFFFFF));
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2DependencyOffset(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  ZinCodegenUtil *v5;

  v5 = 0;
  if (GetProgrammedDependencyOffsetAndDimension(a2, &v5, (_DWORD *)&v5 + 1))
    ZinAssertImpl("Failed to get dependency offset or dimension");
  if (HIDWORD(v5) == 2)
  {
    v3 = *(_DWORD *)(a1 + 532) & 0xFFFFFFFC | 2;
  }
  else if (HIDWORD(v5) == 1)
  {
    v3 = *(_DWORD *)(a1 + 532) & 0xFFFFFFFC | 1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 532) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 532) = v3;
  result = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType((ZinCodegenUtil *)v5, 0x1DuLL);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0x80000003 | (4 * (result & 0x1FFFFFFF));
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 468) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 456);
  *(_DWORD *)(result + 456) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 456) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 456) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 456) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 460) = *(_DWORD *)(a1 + 460) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 992) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a1 + 464) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<10u>::SetTileDmaSrc1MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4944, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 968);
  if (v10 >= *(_QWORD *)(a1 + 976))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 960), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 968) = v10 + 40;
  }
  *(_QWORD *)(a1 + 968) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 456) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 416) = vsli_n_s32(*(int32x2_t *)(a1 + 416), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a1 + 424) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F964CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 968) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 456) |= 8u;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc1DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 337) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2Format(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v3 = *(_DWORD *)(result + 444);
      v4 = v3 & 0xFFFFFFFC;
      *(_DWORD *)(result + 444) = v3 & 0xFFFFFFFC;
      switch(a2)
      {
        case 1:
          v5 = v3 & 0xFFFFCFFC | 0x1000;
          goto LABEL_24;
        case 2:
          v5 = v3 & 0xFFFFCFFC;
          goto LABEL_24;
        case 3:
          goto LABEL_5;
        case 4:
          goto LABEL_7;
        case 5:
          goto LABEL_9;
        case 6:
          goto LABEL_11;
        case 7:
          goto LABEL_13;
        case 8:
          goto LABEL_26;
        case 9:
          goto LABEL_15;
        case 10:
          goto LABEL_18;
        case 11:
          goto LABEL_22;
        case 12:
          ZinAssertImpl("E4M3 is not supported");
        case 13:
          ZinAssertImpl("E5M2 is not supported");
        default:
          goto LABEL_27;
      }
    case 3:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_5:
      v6 = v4 & 0xFFFFCFFF;
      v7 = 8240;
      break;
    case 4:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_7:
      v5 = v4 & 0xFFFFCECF;
      goto LABEL_24;
    case 5:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_9:
      v5 = v4 & 0xFFFFCECF | 0x100;
      goto LABEL_24;
    case 6:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_11:
      v5 = v4 & 0xFFFFCECF | 0x10;
      goto LABEL_24;
    case 7:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_13:
      v6 = v4 & 0xFFFFCECF;
      v7 = 272;
      break;
    case 8:
LABEL_26:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_15:
      v6 = v4 & 0xFFFFCECF;
      if (!a3)
        goto LABEL_20;
      v7 = 4400;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 444) & 0xFFFFFFFC | 1;
LABEL_18:
      v6 = v4 & 0xFFFFCECF;
      if (a3)
        v7 = 304;
      else
LABEL_20:
        v7 = 8496;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 444) | 3;
LABEL_22:
      v6 = v4 & 0xFFFFFFCF;
      v7 = 12544;
      break;
    default:
LABEL_27:
      ZinAssertImpl("Invalid format provided");
  }
  v5 = v6 | v7;
LABEL_24:
  *(_DWORD *)(result + 444) = v5;
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a1 + 444) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<10u>::SetL2Src2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a1 + 628) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2Enable(uint64_t result)
{
  *(_DWORD *)(result + 340) |= 1u;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<10u>::SetTileDmaSrc2WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 524) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 348) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4975, a2, 0, 0, 0, 0);
  v6 = a1[121];
  if (v6 >= a1[122])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[121] = v6 + 40;
  }
  a1[121] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<10u>::SetTileDmaSrc2WrapCfg((uint64_t)a1, a3);
}

void sub_206F968E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 968) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 444) = *(_DWORD *)(result + 444) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 444) = *(_DWORD *)(result + 444) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 484) = a2;
  return result;
}

int8x16_t ZinAneTd<10u>::SetTileDmaSrc2PixelOffset(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, *(int8x16_t *)(a1 + 504), v5);
  *(int8x16_t *)(a1 + 504) = result;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 472);
  *(_DWORD *)(result + 472) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 472) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 472) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 472) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrc2DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 341) = a2;
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a1 + 476) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 992) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a1 + 480) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<10u>::SetTileDmaSrc2MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4946, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 968);
  if (v10 >= *(_QWORD *)(a1 + 976))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 960), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 968) = v10 + 40;
  }
  *(_QWORD *)(a1 + 968) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 472) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 428) = vsli_n_s32(*(int32x2_t *)(a1 + 428), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 436) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F96BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 968) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 920) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 920) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 920) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 920) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 920) = v3;
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<10u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 584), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 672) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x1000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 864) & 0xFEFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 864) = v4;
  *(_DWORD *)(result + 672) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 864) |= 1u;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 864) | 0xF0;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 864) & 0xFFFFFF0F | 0x30;
      goto LABEL_5;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = *(_DWORD *)(result + 864) & 0xFFFFFF0F | 0xD0;
LABEL_5:
      *(_DWORD *)(result + 864) = v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a1 + 884) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a1 + 880) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 504), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 888) = *(_DWORD *)(a1 + 888) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 992) + 512), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 892) = *(_DWORD *)(a1 + 892) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 920) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 920) = v2;
  *(_DWORD *)(result + 920) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstCropOffset(uint64_t result, int a2, __int16 a3)
{
  *(_WORD *)(result + 944) = a3;
  if (a2)
    ZinAssertImpl("Invalid Crop Offset X for architecture");
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstWrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<10u>::SetTileDmaDstWrapCfg(a1, a4);
  *(_DWORD *)(a1 + 916) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstWrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 868) = *(_DWORD *)(a1 + 868) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstWrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 5197, a2, 0, 0, 0, 0);
  v6 = a1[121];
  if (v6 >= a1[122])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[121] = v6 + 40;
  }
  a1[121] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<10u>::SetTileDmaDstWrapCfg((uint64_t)a1, a3);
}

void sub_206F97254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 968) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<10u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 920) = *(_DWORD *)(result + 920) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 920) = *(_DWORD *)(result + 920) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<10u>::SetTileDmaDstBaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 5186, a3, 1, 1, 0, 0);
  v4 = a1[121];
  if (v4 >= a1[122])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 120, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[121] = v4 + 40;
  }
  a1[121] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9737C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 968) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<10u>::SetTileDmaDstCompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaDst Compressed Width");
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a1 + 936) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 992) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Compressed Height");
  *(_DWORD *)(a1 + 940) = *(_DWORD *)(a1 + 940) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 865) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x20000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 308) = *(_DWORD *)(result + 308) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 816) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 816) & 0xFFF7FFFF;
  *(_DWORD *)(result + 816) = v2;
  return result;
}

BOOL ZinAneTd<10u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 688), &v7))
    ZinAssertImpl("Illegal Kernel Group Stride");
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60) & 0x3F | (v7 << 6);
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 992) + 680), &v6);
  if (!result)
    ZinAssertImpl("Illegal Kernel OCG Stride");
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<10u>::SetRcasKeyMask(uint64_t result, char a2)
{
  *(_BYTE *)(result + 832) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetRcasMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 832) & 0xFFEFFFFF;
LABEL_7:
      *(_DWORD *)(result + 832) = v2;
      return result;
    case 2:
      v2 = *(_DWORD *)(result + 832) | 0x100000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Unknown RCAS Mode.\n");
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetRcasSenseAxis(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 832) | 0x3000;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 832) & 0xFFFFCFFF | 0x1000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 832) & 0xFFFFCFFF | 0x2000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 832) & 0xFFFFCFFF;
LABEL_6:
      *(_DWORD *)(result + 832) = v2;
      break;
    case 4:
    case 5:
      ZinAssertImpl("Unknown RCAS Sense Axis.\n");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::SetRcasSenseBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 832) = *(_DWORD *)(result + 832) & 0xFFF0FFFF | ((a2 & 0xF) << 16);
  return result;
}

uint64_t ZinAneTd<10u>::SetRcasCmpBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 832) = *(_DWORD *)(result + 832) & 0xFFFFF8FF | ((a2 & 7) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 812) = *(_DWORD *)(result + 812) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetStochasticRoundMode(uint64_t result, int a2)
{
  if (a2 != 1 && a2 != 2)
  {
    if (!a2)
      ZinAssertImpl("Invalid stochastic rounding mode");
    a2 = 0;
  }
  *(_DWORD *)(result + 836) = *(_DWORD *)(result + 836) & 0xFFFFFFFC | a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetStochasticRoundSeed(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 840) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetStochasticRoundIntegerBits(uint64_t result, char a2)
{
  *(_DWORD *)(result + 836) = *(_DWORD *)(result + 836) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return result;
}

uint64_t ZinAneTd<10u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFFE0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<10u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 828) = v10 | *(_DWORD *)(result + 828) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<10u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 816) = *(_DWORD *)(result + 816) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 824) = v10 | *(_DWORD *)(result + 824) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<10u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 820) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a1 + 816) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<10u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 280) = *(_DWORD *)(result + 280) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<10u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 308) = *(_DWORD *)(result + 308) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 308) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 308) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      v2 = *(_DWORD *)(result + 308) | 0xC;
      goto LABEL_6;
    case 4:
      v2 = *(_DWORD *)(result + 308) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 308) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<10u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_207A7FF60 + (*(_DWORD *)(a1 + 308) & 0xC));
}

uint64_t ZinAneTd<10u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 338) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 342) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 459) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaSrcCompressed2MdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 475) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 866) = a2;
  return result;
}

int8x16_t ZinAneTd<10u>::SetKernelDmaSrcCoeffUserTag(uint64_t a1, unsigned __int8 a2)
{
  int8x16_t result;

  result = vorrq_s8((int8x16_t)(*(_OWORD *)(a1 + 68) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), (int8x16_t)vdupq_n_s32(a2 << 16));
  *(int8x16_t *)(a1 + 68) = result;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcPostScaleUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 134) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcPaletteLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 150) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcBiasUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 118) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetKernelDmaSrcNonLinearLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 166) = a2;
  return result;
}

uint64_t ZinAneTd<10u>::SetCommonTaskType(uint64_t result, unsigned int a2)
{
  if (a2 <= 7)
    *(_DWORD *)(result + 308) = *(_DWORD *)(result + 308) & 0xFFFFFF0F | dword_207AB04A0[a2];
  return result;
}

uint64_t ZinAneTd<10u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 260) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 260) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 260) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 260) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 260) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 260) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 260) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 260) = v2;
  return result;
}

uint64_t ZinAneTd<10u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 260) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 260) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 260) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 260) = v2;
  return result;
}

BOOL ZinAneTd<10u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a1 + 300) & 0xFFFFFF0F | (16 * (a2 & 0xF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 288));
}

BOOL ZinAneTd<10u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a1 + 300) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 280));
}

BOOL ZinAneTd<10u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 296) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 296) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 216));
}

BOOL ZinAneTd<10u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 296) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 224));
}

BOOL ZinAneTd<10u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 296) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 208));
}

BOOL ZinAneTd<10u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xFFFFFFC0 | v4 & 0x3F;
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<10u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 184), &v4);
  if (result)
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(a1 + 292) & 0xFFFFE000 | v4 & 0x1FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 256) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 276) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<10u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<10u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 292) = *(_DWORD *)(result + 292) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<10u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 992) + 192), &v4);
  if (result)
    *(_WORD *)(a1 + 294) = v4;
  return result;
}

uint64_t ZinAneTd<11u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 960) |= dword_207AB0424[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 960) = *(_DWORD *)(result + 960) & 0xFFFFFFF | (a4 << 28);
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 548) |= 0x800000u;
  return result;
}

uint64_t ZinAneTd<11u>::SetEventFlags(uint64_t result, int a2, int a3, int a4)
{
  *(_DWORD *)(result + 16) = a2 & 0xFFFFFF | (*(unsigned __int8 *)(result + 19) << 24);
  if (a4)
    ZinAssertImpl("DRAM Events not supported for architecture");
  *(_DWORD *)(result + 24) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(result + 27) << 24);
  return result;
}

BOOL ZinAneTd<11u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 296), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 804) = *(_DWORD *)(a1 + 804) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 304), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 808) = *(_DWORD *)(a1 + 808) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1040) + 316), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 312), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 812) = *(_DWORD *)(a1 + 812) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 328), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a1 + 816) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 820) = *(_DWORD *)(a1 + 820) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<11u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 800) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 800) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 800) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 800) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 844) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 844) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      v2 = *(_DWORD *)(result + 844) | 0xC0;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 844) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2ResultWrapCfg(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFF8FF | 0x400;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFF8FF | 0x300;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFF8FF | 0x100;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFF8FF | 0x200;
      goto LABEL_7;
    case 4:
      ZinAssertImpl("Error: Invalid Wrap Axis");
    case 5:
      v2 = *(_DWORD *)(result + 872) & 0xFFFFF8FF;
LABEL_7:
      *(_DWORD *)(result + 872) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetL2ResultWrapStartOffset(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 886) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2ResultWrapIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 884) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 676), 2);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a1 + 800) & 0x3FFFFFFF | (result << 30);
  return result;
}

uint64_t ZinAneTd<11u>::SetSourceWrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 872) = *(_DWORD *)(result + 872) & 0xFFFFFFF8 | dword_207AB04F0[a2];
  *(_DWORD *)(result + 876) = a4 | (a3 << 16);
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 592), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a1 + 800) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<11u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 800) = *(_DWORD *)(result + 800) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 0x1000000;
      break;
    case 2:
      v2 = 0x800000;
      break;
    case 4:
      v2 = 25165824;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 800) = *(_DWORD *)(result + 800) & 0xFE7FFFFF | v2;
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a1 + 824) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 352), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 828) = *(_DWORD *)(a1 + 828) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1040) + 364), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 360), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 832) = *(_DWORD *)(a1 + 832) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 368), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a1 + 836) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 840) = *(_DWORD *)(a1 + 840) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<11u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 800) & 0xF7F80FFF;
  *(_DWORD *)(result + 800) = v2 | 0x8000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xE7F80FFF | 0x8000000;
LABEL_7:
      *(_DWORD *)(result + 800) = v3;
      return result;
    case 2:
      v3 = v2 | 0x18000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetSource2Wrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 872) = *(_DWORD *)(result + 872) & 0xFFFFFF8F | dword_207AB0500[a2];
  *(_DWORD *)(result + 880) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<11u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF8;
      goto LABEL_7;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF8 | 3;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF8 | 1;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF8 | 2;
      goto LABEL_7;
    case 5:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF8 | 4;
LABEL_7:
      *(_DWORD *)(result + 936) = v2;
      break;
    case 6:
      ZinAssertImpl("RCAS not valid for architecture");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 936) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 936) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 936) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 932) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 932) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 932) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 932) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 68) = *(_DWORD *)(result + 4 * a3 + 68) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcHeaderDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 260) = *(_DWORD *)(result + 4 * a3 + 260) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<11u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 1);
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<11u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 0);
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<11u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 2);
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t a1, int a2)
{
  return ZinAneTd<11u>::SetKernelDmaSrcHeaderDmaCacheHint(a1, a2, 3);
}

BOOL ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 568), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 196) = *(_DWORD *)(a1 + 4 * a3 + 196) & 0x3F | (v6 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetKernelDmaSrcCoeffBaseOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 560), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 132) = *(_DWORD *)(a1 + 4 * a3 + 132) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<11u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_11;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_11;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_11:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      ZinAssertImpl("Platform doesn't support constant padding-mode");
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 796) = *(_DWORD *)(result + 796) & 0xFFFFFFF3 | v4;
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 932) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 932) | 0x10000;
  }
  *(_DWORD *)(result + 932) = v2;
  return result;
}

void ZinAneTd<11u>::SetAlignedKernelRelocationCommand(uint64_t *a1, _QWORD *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  const void *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  size_t v38;
  void **v39;
  const void *v40;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  size_t v45;
  void **v46;
  const void *v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  size_t v52;
  void **v53;
  const void *v54;
  unint64_t v55;
  std::string *v56;
  __int128 v57;
  uint64_t v58;
  size_t v59;
  void **v60;
  const void *v61;
  unint64_t v62;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  void *v66[2];
  char v67;
  __int16 v68;
  __int128 __p;
  uint64_t v70;
  int v71;

  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = *((unsigned __int8 *)a4 + 23);
    else
      v10 = (size_t)a4[1];
    v11 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v10 + 7);
    if (v67 < 0)
      v11 = (void **)v66[0];
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = a4;
      else
        v12 = *a4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1664, a3, 1, 1, a5, 0);
    v13 = a1[127];
    if (v13 >= a1[128])
    {
      v16 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v13 = v68;
      v14 = (std::string *)(v13 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v15 = __p;
        *(_QWORD *)(v13 + 24) = v70;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *(_DWORD *)(v13 + 32) = v71;
      v16 = v13 + 40;
      a1[127] = v13 + 40;
    }
    a1[127] = v16;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v17 + 7);
    if (v67 < 0)
      v18 = (void **)v66[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1663, a3, 1, 1, a5, 0);
    v20 = a1[127];
    if (v20 >= a1[128])
    {
      v23 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v20 = v68;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v70;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v71;
      v23 = v20 + 40;
      a1[127] = v20 + 40;
    }
    a1[127] = v23;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v24 + 6);
    if (v67 < 0)
      v25 = (void **)v66[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1662, a3, 1, 1, a5, 0);
    v27 = a1[127];
    if (v27 >= a1[128])
    {
      v30 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v27 = v68;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v29 = __p;
        *(_QWORD *)(v27 + 24) = v70;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *(_DWORD *)(v27 + 32) = v71;
      v30 = v27 + 40;
      a1[127] = v27 + 40;
    }
    a1[127] = v30;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  if (a2[4])
  {
    if (*((char *)a4 + 23) >= 0)
      v31 = *((unsigned __int8 *)a4 + 23);
    else
      v31 = (size_t)a4[1];
    v32 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v31 + 5);
    if (v67 < 0)
      v32 = (void **)v66[0];
    if (v31)
    {
      if (*((char *)a4 + 23) >= 0)
        v33 = a4;
      else
        v33 = *a4;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_bias");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1661, a3, 1, 1, a5, 0);
    v34 = a1[127];
    if (v34 >= a1[128])
    {
      v37 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v34 = v68;
      v35 = (std::string *)(v34 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v36 = __p;
        *(_QWORD *)(v34 + 24) = v70;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      *(_DWORD *)(v34 + 32) = v71;
      v37 = v34 + 40;
      a1[127] = v34 + 40;
    }
    a1[127] = v37;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
    if (a2[4])
    {
      if (*((char *)a4 + 23) >= 0)
        v38 = *((unsigned __int8 *)a4 + 23);
      else
        v38 = (size_t)a4[1];
      v39 = v66;
      std::string::basic_string[abi:ne180100]((uint64_t)v66, v38 + 5);
      if (v67 < 0)
        v39 = (void **)v66[0];
      if (v38)
      {
        if (*((char *)a4 + 23) >= 0)
          v40 = a4;
        else
          v40 = *a4;
        memmove(v39, v40, v38);
      }
      strcpy((char *)v39 + v38, "_bias");
      ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1658, a3, 0, 1, a5, 0);
      v41 = a1[127];
      if (v41 >= a1[128])
      {
        v44 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
      }
      else
      {
        *(_WORD *)v41 = v68;
        v42 = (std::string *)(v41 + 8);
        if (SHIBYTE(v70) < 0)
        {
          std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        }
        else
        {
          v43 = __p;
          *(_QWORD *)(v41 + 24) = v70;
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        }
        *(_DWORD *)(v41 + 32) = v71;
        v44 = v41 + 40;
        a1[127] = v41 + 40;
      }
      a1[127] = v44;
      if (SHIBYTE(v70) < 0)
        operator delete((void *)__p);
      if (v67 < 0)
        operator delete(v66[0]);
    }
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v45 = *((unsigned __int8 *)a4 + 23);
    else
      v45 = (size_t)a4[1];
    v46 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v45 + 6);
    if (v67 < 0)
      v46 = (void **)v66[0];
    if (v45)
    {
      if (*((char *)a4 + 23) >= 0)
        v47 = a4;
      else
        v47 = *a4;
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1659, a3, 0, 1, a5, 0);
    v48 = a1[127];
    if (v48 >= a1[128])
    {
      v51 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v48 = v68;
      v49 = (std::string *)(v48 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v49, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v50 = __p;
        *(_QWORD *)(v48 + 24) = v70;
        *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      }
      *(_DWORD *)(v48 + 32) = v71;
      v51 = v48 + 40;
      a1[127] = v48 + 40;
    }
    a1[127] = v51;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v52 = *((unsigned __int8 *)a4 + 23);
    else
      v52 = (size_t)a4[1];
    v53 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v52 + 7);
    if (v67 < 0)
      v53 = (void **)v66[0];
    if (v52)
    {
      if (*((char *)a4 + 23) >= 0)
        v54 = a4;
      else
        v54 = *a4;
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1660, a3, 0, 1, a5, 0);
    v55 = a1[127];
    if (v55 >= a1[128])
    {
      v58 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v55 = v68;
      v56 = (std::string *)(v55 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v56, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v57 = __p;
        *(_QWORD *)(v55 + 24) = v70;
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
      }
      *(_DWORD *)(v55 + 32) = v71;
      v58 = v55 + 40;
      a1[127] = v55 + 40;
    }
    a1[127] = v58;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v59 = *((unsigned __int8 *)a4 + 23);
    else
      v59 = (size_t)a4[1];
    v60 = v66;
    std::string::basic_string[abi:ne180100]((uint64_t)v66, v59 + 7);
    if (v67 < 0)
      v60 = (void **)v66[0];
    if (v59)
    {
      if (*((char *)a4 + 23) >= 0)
        v61 = a4;
      else
        v61 = *a4;
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v68, v66, 1661, a3, 0, 1, a5, 0);
    v62 = a1[127];
    if (v62 >= a1[128])
    {
      v65 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v68);
    }
    else
    {
      *(_WORD *)v62 = v68;
      v63 = (std::string *)(v62 + 8);
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external(v63, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v64 = __p;
        *(_QWORD *)(v62 + 24) = v70;
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
      }
      *(_DWORD *)(v62 + 32) = v71;
      v65 = v62 + 40;
      a1[127] = v62 + 40;
    }
    a1[127] = v65;
    if (SHIBYTE(v70) < 0)
      operator delete((void *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
  }
}

void sub_206F99B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 1016) = v23;
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *ZinAneTd<11u>::SetAlignedKernelBias(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[11] = result[11] & 0xFFFFFFF3 | 8;
  result[233] = result[233] & 0xFFF9FFFF | 0x40000;
  result[77] = result[77] & 0x3F | (a4 << 6);
  result[65] |= 1u;
  return result;
}

_DWORD *ZinAneTd<11u>::SetAlignedKernelPostScale(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[11] = result[11] & 0xFFFFFFFC | 2;
  result[233] = result[233] & 0xFFE7FFFF | 0x100000;
  result[78] = result[78] & 0x3F | (a4 << 6);
  result[66] |= 1u;
  return result;
}

uint64_t ZinAneTd<11u>::SetAlignedKernelPaletteLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 316) = *(_DWORD *)(result + 316) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 268) |= 1u;
  return result;
}

uint64_t ZinAneTd<11u>::SetAlignedKernelNonLinearLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 320) = *(_DWORD *)(result + 320) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 272) |= 1u;
  return result;
}

uint64_t ZinAneTd<11u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 916) = a2;
  return result;
}

__int16 ZinAneTd<11u>::SetPEScale@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 910) = result;
  return result;
}

__int16 ZinAneTd<11u>::SetPEBias@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 908) = result;
  return result;
}

__int16 ZinAneTd<11u>::SetPEPreScale@<H0>(uint64_t a1@<X0>, float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  *(_WORD *)(a1 + 914) = result;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 796) = *(_DWORD *)(result + 796) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 796) = *(_DWORD *)(result + 796) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 544) = *(_DWORD *)(result + 544) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 544) = *(_DWORD *)(result + 544) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  unsigned int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 544) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 544) |= v4;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 904) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1040) + 608);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 904) = *(_DWORD *)(a1 + 904) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1040) + 608);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 904) = *(_DWORD *)(a1 + 904) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 608)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 904) = *(_DWORD *)(a1 + 904) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1040) + 608);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 904) = *(_DWORD *)(a1 + 904) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1040) + 608);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<11u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 904) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 904) | 0x10000;
  }
  *(_DWORD *)(result + 904) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 904) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 904) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 904) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 904) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 904) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetPECondition(uint64_t result, int a2)
{
  if (a2 != 1)
    ZinAssertImpl("Error: invalid PE Condition");
  *(_DWORD *)(result + 904) |= 0x40u;
  return result;
}

unsigned __int16 ZinAneTd<11u>::SetPEOutputReLU@<H0>(uint64_t a1@<X0>, _DWORD *a2@<X1>)
{
  unsigned __int16 v7;
  unsigned __int16 result;

  *(_DWORD *)(a1 + 904) |= 0x20u;
  if (*a2 == 7)
  {
    _S0 = a2[3];
    __asm { FCVT            H0, S0 }
    *(_WORD *)(a1 + 920) = _S0;
    v7 = _S0;
    _S0 = a2[4];
    __asm { FCVT            H0, S0 }
    *(_DWORD *)(a1 + 920) = v7 | (result << 16);
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 544) = *(_DWORD *)(result + 544) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a1 + 848) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 392), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 852) = *(_DWORD *)(a1 + 852) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 400), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a1 + 856) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 408), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 860) = *(_DWORD *)(a1 + 860) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 416), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a1 + 864) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<11u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 844) = *(_DWORD *)(result + 844) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 844) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 844) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 844) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 844) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 844) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 656) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 656) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 656) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 656) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 656) = v3;
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 592), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a1 + 656) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 576) |= 1u;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 584) = v6 | v5;
          return result;
      }
  }
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc2CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 580) = *(_DWORD *)(result + 580) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 588) = v6 | v5;
          return result;
      }
  }
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 604) = *(_DWORD *)(a1 + 604) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a1 + 600) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 464), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 612) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 656) = *(_DWORD *)(result + 656) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 656) = *(_DWORD *)(result + 656) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<11u>::SetTileDmaSrc1BaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 1092, a3, 1, 1, 0, 0);
  v4 = a1[127];
  if (v4 >= a1[128])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[127] = v4 + 40;
  }
  a1[127] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9A880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1016) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  if ((a2 - 1) <= 1)
    *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xCFFFFFFF | 0x10000000;
  return result;
}

unint64_t ZinAneTd<11u>::SetTileDmaSrc1DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 600));
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a1 + 576) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 676) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 664);
  *(_DWORD *)(result + 664) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 664) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 664) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 664) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 668) = *(_DWORD *)(a1 + 668) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

void ZinAneTd<11u>::SetTileDmaSrc1MetaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 1104, a3, 1, 1, 0, 0);
  v4 = *(_QWORD *)(a1 + 1016);
  if (v4 >= *(_QWORD *)(a1 + 1024))
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1008), (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    *(_QWORD *)(a1 + 1016) = v4 + 40;
  }
  *(_QWORD *)(a1 + 1016) = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 664) &= ~8u;
}

void sub_206F9AB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1016) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 664) |= 8u;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc1DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 577) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc2FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 660) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc2FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 660) & 0xFFFFFFF | (a2 << 28);
  return result;
}

int8x16_t ZinAneTd<11u>::SetTileDmaSrc2PixelOffset(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, *(int8x16_t *)(a1 + 696), v5);
  *(int8x16_t *)(a1 + 696) = result;
  return result;
}

void ZinAneTd<11u>::SetTileDmaSrc2CompressedInfo(uint64_t a1, int a2, int a3, int a4)
{
  ZinAneTd<11u>::SetTileDmaSrc1CompressedInfo(a1, a2, a3, a4);
  ZinAssertImpl("Source Compression not supported");
}

uint64_t ZinAneTd<11u>::SetTileDmaSrc2DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 581) = a2;
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 668) = *(_DWORD *)(a1 + 668) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a1 + 672) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

void ZinAneTd<11u>::SetTileDmaSrc2MetaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 1104, a3, 1, 1, 0, 0);
  v4 = *(_QWORD *)(a1 + 1016);
  if (v4 >= *(_QWORD *)(a1 + 1024))
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1008), (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    *(_QWORD *)(a1 + 1016) = v4 + 40;
  }
  *(_QWORD *)(a1 + 1016) = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 664) &= ~8u;
}

void sub_206F9AD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1016) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 992) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 992) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 992) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 992) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 992) = v3;
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 592), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 844) = *(_DWORD *)(a1 + 844) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 592), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a1 + 992) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<11u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 592), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 844) = *(_DWORD *)(a1 + 844) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 844) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x1000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 960) & 0xFEFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 960) = v4;
  *(_DWORD *)(result + 844) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 960) |= 1u;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 960) | 0xF0;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 960) & 0xFFFFFF0F | 0x30;
      goto LABEL_5;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = *(_DWORD *)(result + 960) & 0xFFFFFF0F | 0xD0;
LABEL_5:
      *(_DWORD *)(result + 960) = v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 980) = *(_DWORD *)(a1 + 980) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a1 + 976) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 504), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 984) = *(_DWORD *)(a1 + 984) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 512), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 988) = *(_DWORD *)(a1 + 988) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 992) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 992) = v2;
  *(_DWORD *)(result + 992) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 992) = *(_DWORD *)(result + 992) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 992) = *(_DWORD *)(result + 992) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<11u>::SetTileDmaDstBaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 1346, a3, 1, 1, 0, 0);
  v4 = a1[127];
  if (v4 >= a1[128])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[127] = v4 + 40;
  }
  a1[127] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9B314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1016) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 961) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x20000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 548) = *(_DWORD *)(result + 548) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 936) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 936) & 0xFFF7FFFF;
  *(_DWORD *)(result + 936) = v2;
  return result;
}

BOOL ZinAneTd<11u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 696), &v7))
    ZinAssertImpl("Illegal Kernel Group Stride");
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60) & 0x3F | (v7 << 6);
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 688), &v6);
  if (!result)
    ZinAssertImpl("Illegal Kernel OCG Stride");
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<11u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(result + 44) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 932) = *(_DWORD *)(result + 932) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFFE0FF | ((a2 & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<11u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 948) = v10 | *(_DWORD *)(result + 948) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<11u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 944) = v10 | *(_DWORD *)(result + 944) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<11u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 940) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a1 + 936) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<11u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 520) = *(_DWORD *)(result + 520) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<11u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 548) = *(_DWORD *)(result + 548) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 548) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 548) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      v2 = *(_DWORD *)(result + 548) | 0xC;
      goto LABEL_6;
    case 4:
      v2 = *(_DWORD *)(result + 548) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 548) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_207A7FF60 + (*(_DWORD *)(a1 + 548) & 0xC));
}

uint64_t ZinAneTd<11u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 578) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 582) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 667) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 962) = a2;
  return result;
}

uint64_t ZinAneTd<11u>::SetKernelDmaSrcCoeffUserTag(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  int8x16_t v3;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s32(a2 << 16);
  do
  {
    *(int8x16_t *)(result + 68 + v2) = vorrq_s8((int8x16_t)(*(_OWORD *)(result + 68 + v2) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return result;
}

int8x16_t ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag(uint64_t a1, unsigned __int8 a2)
{
  int8x16_t result;

  result = vorrq_s8((int8x16_t)(*(_OWORD *)(a1 + 260) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), (int8x16_t)vdupq_n_s32(a2 << 16));
  *(int8x16_t *)(a1 + 260) = result;
  return result;
}

uint64_t ZinAneTd<11u>::SetCommonTaskType(uint64_t result, int a2)
{
  int v2;

  v2 = 16;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(result + 548) &= 0xFFFFFF8F;
      goto LABEL_9;
    case 1:
LABEL_9:
      ZinAssertImpl("Error: Invalid Task Type");
    case 2:
      goto LABEL_7;
    case 3:
      v2 = 96;
      goto LABEL_7;
    case 4:
      v2 = 80;
      goto LABEL_7;
    case 5:
      v2 = 48;
      goto LABEL_7;
    case 6:
      v2 = 32;
      goto LABEL_7;
    case 7:
      v2 = 64;
LABEL_7:
      *(_DWORD *)(result + 548) = *(_DWORD *)(result + 548) & 0xFFFFFF8F | v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 500) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 500) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 500) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 500) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 500) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 500) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 500) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 500) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 500) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 500) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 500) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 500) = v2;
  return result;
}

uint64_t ZinAneTd<11u>::SetCommonSourceRouting(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 548) & 0xFFFFFFFC | 2;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 548) & 0xFFFFFFFC | 1;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 548) | 3;
  }
  *(_DWORD *)(result + 548) = v2;
  return result;
}

BOOL ZinAneTd<11u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFFFF0F | (16 * (a2 & 0xF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 288));
}

BOOL ZinAneTd<11u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 280));
}

BOOL ZinAneTd<11u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 216));
}

BOOL ZinAneTd<11u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 224));
}

BOOL ZinAneTd<11u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 208));
}

BOOL ZinAneTd<11u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFFFFC0 | v4 & 0x3F;
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<11u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 184), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFFE000 | v4 & 0x1FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 492) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 492) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 496) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0x8000FFFF | ((v4 & 0x7FFF) << 16);
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFF8000 | v4 & 0x7FFF;
  return result;
}

BOOL ZinAneTd<11u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<11u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 532) = *(_DWORD *)(result + 532) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<11u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 192), &v4);
  if (result)
    *(_WORD *)(a1 + 534) = v4;
  return result;
}

uint64_t ZinAneTd<17u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (!*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 1236) |= dword_207AB0430[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 1236) = *(_DWORD *)(result + 1236) & 0x7FFFFFF | (a4 << 27);
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 564) |= 0x800000u;
  return result;
}

_DWORD *ZinAneTd<17u>::SetEventFlags(_DWORD *result, int a2, int a3, int a4)
{
  result[4] = result[4] & 0xF0000000 | a2 & 0xFFFFFFF;
  result[8] = result[8] & 0xFC000000 | a4 & 0x3FFFFFF;
  result[6] = result[6] & 0xF0000000 | a3 & 0xFFFFFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 312), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(a1 + 952) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 320), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 956) = *(_DWORD *)(a1 + 956) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1416) + 332), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 328), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 960) = *(_DWORD *)(a1 + 960) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 964) = *(_DWORD *)(a1 + 964) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a1 + 968) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 940) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 940) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 940) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 940) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src2DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 944) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 944) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 944) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 944) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 1008) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 1008) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      v2 = *(_DWORD *)(result + 1008) | 0xC0;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 1008) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultWrapCfg(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1036) & 0xFFFFF8FF | 0x400;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 1036) & 0xFFFFF8FF | 0x300;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 1036) & 0xFFFFF8FF | 0x100;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 1036) & 0xFFFFF8FF | 0x200;
      goto LABEL_7;
    case 4:
      ZinAssertImpl("Error: Invalid Wrap Axis");
    case 5:
      v2 = *(_DWORD *)(result + 1036) & 0xFFFFF8FF;
LABEL_7:
      *(_DWORD *)(result + 1036) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultWrapStartOffset(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1054) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultWrapIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1052) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultWrapAddrOffset(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1092) = *(_DWORD *)(result + 1092) & 0xF800FFFF | ((a2 & 0x7FF) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultWrapAddr(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1092) = *(_DWORD *)(result + 1092) & 0xFFFFF000 | a2 & 0xFFF;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2SrcOffsetXlsbs(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1096) = *(_DWORD *)(result + 1096) & 0xFFFFFFC0 | a2 & 0x3F;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 736), 5);
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a1 + 1096) & 0xFFFFE0FF | ((result & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetSourceAddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 1080) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 1080) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<17u>::SetSourceWrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 1036) = *(_DWORD *)(result + 1036) & 0xFFFFFFF8 | dword_207AB04F0[a2];
  *(_DWORD *)(result + 1040) = a4 | (a3 << 16);
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 940) = *(_DWORD *)(a1 + 940) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 940) = *(_DWORD *)(result + 940) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 944) = *(_DWORD *)(result + 944) & 0xFFFFFFFC | v2;
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 352), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 972) = *(_DWORD *)(a1 + 972) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 360), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a1 + 976) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1416) + 372), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 368), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 980) = *(_DWORD *)(a1 + 980) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 984) = *(_DWORD *)(a1 + 984) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 988) = *(_DWORD *)(a1 + 988) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src2OffsetXlsbs(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1096) = *(_DWORD *)(result + 1096) & 0xFFC0FFFF | ((a2 & 0x3F) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src2OffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 752), 5);
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a1 + 1096) & 0xE0FFFFFF | ((result & 0x1F) << 24);
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 940) & 0xFDF80FFF;
  *(_DWORD *)(result + 940) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 940) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetL2Src2CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 944) & 0xFDF80FFF;
  *(_DWORD *)(result + 944) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 944) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

BOOL ZinAneTd<17u>::SetL2SrcIdxBaseAddr(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a1 + 992) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 392));
}

BOOL ZinAneTd<17u>::SetL2SrcIdxChannelStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 400));
}

BOOL ZinAneTd<17u>::SetL2SrcIdxGroupStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1004) = *(_DWORD *)(a1 + 1004) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 416));
}

BOOL ZinAneTd<17u>::SetL2SrcIdxDepthStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a1 + 1000) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 408));
}

uint64_t ZinAneTd<17u>::SetL2ResultCfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 1008) & 0xFDF80FFF;
  *(_DWORD *)(result + 1008) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 1008) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetSource2AddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 1084) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 1084) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<17u>::SetSource2Wrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 1036) = *(_DWORD *)(result + 1036) & 0xFFFFFF8F | dword_207AB0500[a2];
  *(_DWORD *)(result + 1044) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8;
      goto LABEL_8;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8 | 3;
      goto LABEL_8;
    case 3:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8 | 1;
      goto LABEL_8;
    case 4:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8 | 2;
      goto LABEL_8;
    case 5:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8 | 4;
      goto LABEL_8;
    case 6:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF8 | 5;
LABEL_8:
      *(_DWORD *)(result + 1180) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1180) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 1180) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 1180) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetPassthroughEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1176) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 1176) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 1176) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 1176) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 80) = *(_DWORD *)(result + 4 * a3 + 80) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcConfigPrefetch(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  if (*(_DWORD *)(a2 + 96) == 1)
  {
    v2 = *(unsigned __int16 *)(result + 56) | (*(_DWORD *)(a2 + 104) << 16);
    *(_DWORD *)(result + 56) = v2;
    v3 = v2 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 112);
    *(_DWORD *)(result + 56) = v3;
    *(_DWORD *)(result + 56) = v3 & 0xFFFFFFFD | (2 * *(unsigned __int8 *)(a2 + 113));
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 80) = *(_DWORD *)(result + 4 * a3 + 80) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 288) = *(_DWORD *)(result + 288) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 272) = *(_DWORD *)(result + 272) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 304) = *(_DWORD *)(result + 304) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PaletteLut Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 320) = *(_DWORD *)(result + 320) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<17u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 616), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 208) = *(_DWORD *)(a1 + 4 * a3 + 208) & 0x3F | (v6 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetKernelDmaSrcCoeffBaseOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 608), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 144) = *(_DWORD *)(a1 + 4 * a3 + 144) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcDataSetId(uint64_t result, char a2, uint64_t a3)
{
  *(_BYTE *)(result + 4 * a3 + 81) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_12;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_12;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_12;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_12:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      v4 = 0;
      v3 = (a3 != 0) << 18;
      break;
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 936) = v4 & 0xFF00FFFF | (a3 << 16) | *(_DWORD *)(result + 936) & 0xFF00FFF3;
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcEnable(uint64_t result)
{
  *(_DWORD *)(result + 48) |= 0x40u;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 1176) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 1176) | 0x10000;
  }
  *(_DWORD *)(result + 1176) = v2;
  return result;
}

void ZinAneTd<17u>::SetAlignedKernelRelocationCommand(uint64_t *a1, _QWORD *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  const void *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  __int16 v40;
  __int128 __p;
  uint64_t v42;
  int v43;

  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = *((unsigned __int8 *)a4 + 23);
    else
      v10 = (size_t)a4[1];
    v11 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v10 + 7);
    if (v39 < 0)
      v11 = (void **)v38[0];
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = a4;
      else
        v12 = *a4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5510, a3, 1, 1, a5, 0);
    v13 = a1[174];
    if (v13 >= a1[175])
    {
      v16 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v13 = v40;
      v14 = (std::string *)(v13 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v15 = __p;
        *(_QWORD *)(v13 + 24) = v42;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *(_DWORD *)(v13 + 32) = v43;
      v16 = v13 + 40;
      a1[174] = v13 + 40;
    }
    a1[174] = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v17 + 7);
    if (v39 < 0)
      v18 = (void **)v38[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5506, a3, 1, 1, a5, 0);
    v20 = a1[174];
    if (v20 >= a1[175])
    {
      v23 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v20 = v40;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v42;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v43;
      v23 = v20 + 40;
      a1[174] = v20 + 40;
    }
    a1[174] = v23;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v24 + 6);
    if (v39 < 0)
      v25 = (void **)v38[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5502, a3, 1, 1, a5, 0);
    v27 = a1[174];
    if (v27 >= a1[175])
    {
      v30 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v27 = v40;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v29 = __p;
        *(_QWORD *)(v27 + 24) = v42;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *(_DWORD *)(v27 + 32) = v43;
      v30 = v27 + 40;
      a1[174] = v27 + 40;
    }
    a1[174] = v30;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[4])
  {
    if (*((char *)a4 + 23) >= 0)
      v31 = *((unsigned __int8 *)a4 + 23);
    else
      v31 = (size_t)a4[1];
    v32 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v31 + 5);
    if (v39 < 0)
      v32 = (void **)v38[0];
    if (v31)
    {
      if (*((char *)a4 + 23) >= 0)
        v33 = a4;
      else
        v33 = *a4;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_bias");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5498, a3, 1, 1, a5, 0);
    v34 = a1[174];
    if (v34 >= a1[175])
    {
      v37 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v34 = v40;
      v35 = (std::string *)(v34 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v36 = __p;
        *(_QWORD *)(v34 + 24) = v42;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      *(_DWORD *)(v34 + 32) = v43;
      v37 = v34 + 40;
      a1[174] = v34 + 40;
    }
    a1[174] = v37;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
}

void sub_206F9D984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 1392) = v23;
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *ZinAneTd<17u>::SetAlignedKernelBias(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[12] = result[12] & 0xFFFFFFF3 | 8;
  result[294] = result[294] & 0xFFF9FFFF | 0x40000;
  result[69] = result[69] & 0x3F | (a4 << 6);
  result[68] |= 1u;
  return result;
}

_DWORD *ZinAneTd<17u>::SetAlignedKernelPostScale(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[12] = result[12] & 0xFFFFFFFC | 2;
  result[294] = result[294] & 0xFFE7FFFF | 0x100000;
  result[73] = result[73] & 0x3F | (a4 << 6);
  result[72] |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetAlignedKernelPaletteLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 308) = *(_DWORD *)(result + 308) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 304) |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetAlignedKernelNonLinearLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 324) = *(_DWORD *)(result + 324) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 320) |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetAlignedCoeffSizePerCh(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xF0000000 | a2 & 0xFFFFFFF;
  return result;
}

uint64_t ZinAneTd<17u>::SetQuantizationSrc1InputOffset(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1164) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetQuantizationSrc2InputOffset(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1165) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPEOutputQuantization(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1166) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 1128) = a2;
  return result;
}

void ZinAneTd<17u>::SetPEScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1116) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<17u>::SetPEBias(uint64_t a1, float a2)
{
  *(float *)(a1 + 1112) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<17u>::SetPEPreScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1124) = ZinF32ToNearestF19(a2);
}

uint64_t ZinAneTd<17u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 936) = *(_DWORD *)(result + 936) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  unsigned int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 576) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 576) |= v4;
  }
  return result;
}

void ZinAneTd<17u>::SetPEIndexMode(uint64_t a1, int a2)
{
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(a1 + 1076) & 0xFFF8FFFF | 0x10000;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(a1 + 1076) & 0xFFF8FFFF | 0x20000;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(a1 + 1076) & 0xFFF8FFFF | 0x50000;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 1076) & 0xFFF8FFFF | 0x30000;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(a1 + 1076) & 0xFFF8FFFF | 0x40000;
LABEL_7:
      *(_DWORD *)(a1 + 1076) = v2;
      break;
    case 5:
      v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v3)
        ZinAneTd<8u>::SetPEIndexMode(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    default:
      return;
  }
}

uint64_t ZinAneTd<17u>::SetPEIndexTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1076) = *(_DWORD *)(result + 1076) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPEIndexBroadcast(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *((_DWORD *)v2 + 4);
      if (v3 == 2)
        break;
      if (v3 == 1)
      {
        v4 = 0x1000000;
LABEL_6:
        *(_DWORD *)(result + 1076) |= v4;
      }
      v2 = (uint64_t *)*v2;
      if (!v2)
        return result;
    }
    v4 = 0x2000000;
    goto LABEL_6;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetPEMaxIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1076) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 1108) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1416) + 648);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a1 + 1108) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1416) + 648);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a1 + 1108) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 648)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a1 + 1108) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1416) + 648);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a1 + 1108) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1416) + 648);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<17u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 1108) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 1108) | 0x10000;
  }
  *(_DWORD *)(result + 1108) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1108) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 1108) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 1108) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 1108) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 1108) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetPECondition(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F;
      goto LABEL_10;
    case 1:
      v2 = *(_DWORD *)(result + 1108) | 0x1C0;
      goto LABEL_10;
    case 2:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0x100;
      goto LABEL_10;
    case 3:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0x180;
      goto LABEL_10;
    case 4:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0x80;
      goto LABEL_10;
    case 5:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0x140;
      goto LABEL_10;
    case 6:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0x40;
      goto LABEL_10;
    case 7:
      v2 = *(_DWORD *)(result + 1108) & 0xFFFFFE3F | 0xC0;
LABEL_10:
      *(_DWORD *)(result + 1108) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 424), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 1012) = *(_DWORD *)(a1 + 1012) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 432), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 1016) = *(_DWORD *)(a1 + 1016) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 1020) = *(_DWORD *)(a1 + 1020) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1024) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 1028) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<17u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 1008) = *(_DWORD *)(result + 1008) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 1008) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 1008) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 1008) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 1008) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 1008) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 708) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 708) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 708) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 708) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 708) = v3;
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 708) = *(_DWORD *)(a1 + 708) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 604) |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 604) = *(_DWORD *)(result + 604) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 612) = v6 | v5;
          return result;
      }
  }
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 632) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 480), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a1 + 628) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 636) = *(_DWORD *)(a1 + 636) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 504), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a1 + 640) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1CropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 736) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<17u>::SetTileDmaSrc1WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 788) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 612) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4974, a2, 0, 0, 0, 0);
  v6 = a1[174];
  if (v6 >= a1[175])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[174] = v6 + 40;
  }
  a1[174] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<17u>::SetTileDmaSrc1WrapCfg((uint64_t)a1, a3);
}

void sub_206F9E7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1392) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 708) = *(_DWORD *)(result + 708) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 708) = *(_DWORD *)(result + 708) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<17u>::SetTileDmaSrc1BaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 4932, a3, 1, 1, 0, 0);
  v4 = a1[174];
  if (v4 >= a1[175])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[174] = v4 + 40;
  }
  a1[174] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1392) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 604) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 604) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 604) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 604) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 608) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 608) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 608) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 608) = v2;
  return result;
}

unint64_t ZinAneTd<17u>::SetTileDmaSrc1DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 640));
  *(_DWORD *)(a1 + 604) = *(_DWORD *)(a1 + 604) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

unint64_t ZinAneTd<17u>::SetTileDmaSrc2DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 640));
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

uint64_t *ZinAneTd<17u>::SetTileDmaSrc1DependencyOffset(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  int v4;

  v4 = 1;
  result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v4);
  if (result)
    *(_DWORD *)(a1 + 796) = result[3];
  return result;
}

uint64_t *ZinAneTd<17u>::SetTileDmaSrc2DependencyOffset(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  int v4;

  v4 = 1;
  result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v4);
  if (result)
    *(_DWORD *)(a1 + 800) = result[3];
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 736) = a2;
  return result;
}

int8x16_t ZinAneTd<17u>::SetTileDmaSrc1PixelOffset(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, *(int8x16_t *)(a1 + 756), v5);
  *(int8x16_t *)(a1 + 756) = result;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 724);
  *(_DWORD *)(result + 724) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 724) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 724) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 724) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a1 + 728) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a1 + 732) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<17u>::SetTileDmaSrc1MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4944, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1392);
  if (v10 >= *(_QWORD *)(a1 + 1400))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1384), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1392) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1392) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 724) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 684) = vsli_n_s32(*(int32x2_t *)(a1 + 684), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F9ED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1392) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 724) |= 8u;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc1DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 605) = a2;
  return result;
}

BOOL ZinAneTd<17u>::SetL2Src2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a1 + 944) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2Enable(uint64_t result)
{
  *(_DWORD *)(result + 608) |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2CropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 752) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<17u>::SetTileDmaSrc2WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 792) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a1 + 616) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4975, a2, 0, 0, 0, 0);
  v6 = a1[174];
  if (v6 >= a1[175])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[174] = v6 + 40;
  }
  a1[174] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<17u>::SetTileDmaSrc2WrapCfg((uint64_t)a1, a3);
}

void sub_206F9EF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1392) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 712) = *(_DWORD *)(result + 712) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 712) = *(_DWORD *)(result + 712) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 752) = a2;
  return result;
}

int8x16_t ZinAneTd<17u>::SetTileDmaSrc2PixelOffset(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, *(int8x16_t *)(a1 + 772), v5);
  *(int8x16_t *)(a1 + 772) = result;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 740);
  *(_DWORD *)(result + 740) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 740) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 740) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 740) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrc2DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 609) = a2;
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 744) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a1 + 748) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<17u>::SetTileDmaSrc2MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4946, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1392);
  if (v10 >= *(_QWORD *)(a1 + 1400))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1384), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1392) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1392) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 740) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 696) = vsli_n_s32(*(int32x2_t *)(a1 + 696), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a1 + 704) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F9F288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1392) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 1288) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 1288) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 1288) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 1288) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 1288) = v3;
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 1008) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)(a1 + 1288) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<17u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 1008) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 1008) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x1000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 1232) & 0xFEFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 1232) = v4;
  *(_DWORD *)(result + 1008) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 1232) |= 1u;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1232) | 0xF0;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 1232) & 0xFFFFFF0F | 0x30;
      goto LABEL_5;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = *(_DWORD *)(result + 1232) & 0xFFFFFF0F | 0xD0;
LABEL_5:
      *(_DWORD *)(result + 1232) = v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 544), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 1252) = *(_DWORD *)(a1 + 1252) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 536), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 1248) = *(_DWORD *)(a1 + 1248) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 552), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a1 + 1256) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 560), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 1260) = *(_DWORD *)(a1 + 1260) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 1288) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 1288) = v2;
  *(_DWORD *)(result + 1288) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstCropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 1312) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstWrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<17u>::SetTileDmaDstWrapCfg(a1, a4);
  *(_DWORD *)(a1 + 1284) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstWrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 1236) = *(_DWORD *)(a1 + 1236) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstWrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 5197, a2, 0, 0, 0, 0);
  v6 = a1[174];
  if (v6 >= a1[175])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[174] = v6 + 40;
  }
  a1[174] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<17u>::SetTileDmaDstWrapCfg((uint64_t)a1, a3);
}

void sub_206F9F8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1392) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1288) = *(_DWORD *)(result + 1288) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 1288) = *(_DWORD *)(result + 1288) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<17u>::SetTileDmaDstBaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 5186, a3, 1, 1, 0, 0);
  v4 = a1[174];
  if (v4 >= a1[175])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[174] = v4 + 40;
  }
  a1[174] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206F9F9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1392) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<17u>::SetTileDmaDstCompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaDst Compressed Width");
  *(_DWORD *)(a1 + 1304) = *(_DWORD *)(a1 + 1304) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Compressed Height");
  *(_DWORD *)(a1 + 1308) = *(_DWORD *)(a1 + 1308) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstCompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 1296);
  *(_DWORD *)(result + 1296) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 1296) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 1296) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 1296) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

double ZinAneTd<17u>::SetTileDmaDstMetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 5192, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1392);
  if (v10 >= *(_QWORD *)(a1 + 1400))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1384), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1392) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1392) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 1296) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 1272) = vsli_n_s32(*(int32x2_t *)(a1 + 1272), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a1 + 1280) & 0x7F | (a6 << 7);
  return result;
}

void sub_206F9FC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1392) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetTileDmaDstNoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 1296) |= 8u;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1233) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(result + 1324) = *(_DWORD *)(result + 1324) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreFlush(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)(result + 1324) = *(_DWORD *)(result + 1324) & 0xFFFFFFFE | a2;
  *(_WORD *)(result + 1360) = a3;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreTaskSync(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  if (a3)
    v3 = 4;
  else
    v3 = 0;
  if (a2)
    v4 = 8;
  else
    v4 = 0;
  *(_DWORD *)(result + 1324) = v3 | v4 | *(_DWORD *)(result + 1324) & 0xFFFFFFF3;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreEarlyTermination(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, __int16 a8, __int16 a9, __int16 a10, char a11, __int16 a12, char a13)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (a2)
    v13 = 16;
  else
    v13 = 0;
  if (a3)
    v14 = 32;
  else
    v14 = 0;
  if (a4)
    v15 = 64;
  else
    v15 = 0;
  if (a5)
    v16 = 128;
  else
    v16 = 0;
  if (a6)
    v17 = 256;
  else
    v17 = 0;
  *(_DWORD *)(result + 1324) = v14 | v13 | v15 | v16 | v17 | *(_DWORD *)(result + 1324) & 0xFFFFFE0F;
  if (a3)
  {
    *(_WORD *)(result + 1356) = a8;
    if (!a4)
    {
LABEL_18:
      if (!a6)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if (!a4)
  {
    goto LABEL_18;
  }
  *(_WORD *)(result + 1358) = a9;
  if (!a6)
  {
LABEL_19:
    if ((a5 & 1) != 0)
      goto LABEL_25;
LABEL_24:
    if (!a7)
      return result;
    goto LABEL_25;
  }
LABEL_23:
  *(_BYTE *)(result + 1364) = a11;
  if ((a5 & 1) == 0)
    goto LABEL_24;
LABEL_25:
  *(_BYTE *)(result + 1366) = a13;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreTelemetryBackOff(uint64_t result, int a2, char a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  unsigned int v6;

  v6 = *(_DWORD *)(result + 1368) & 0xFFFFFFFE | a2;
  if (a2)
    v6 = (16 * (a3 & 0xF)) | (unsigned __int16)(a4 << 8) | (a5 << 16) | (a6 << 24) | *(_DWORD *)(result + 1368) & 0xE | a2 & 0xF;
  *(_DWORD *)(result + 1368) = v6;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreFootprintLimiter(uint64_t result, int a2, __int16 a3, unsigned __int16 a4)
{
  int v4;
  unsigned int v5;

  if (a2)
    v4 = 512;
  else
    v4 = 0;
  v5 = *(_DWORD *)(result + 1324) & 0xFFFFFDFF | v4;
  *(_DWORD *)(result + 1324) = v5;
  if (a2)
  {
    *(_DWORD *)(result + 1324) = (unsigned __int16)v5 | (a4 << 16);
    *(_DWORD *)(result + 1352) = *(_DWORD *)(result + 1352) & 0xF001FFFF | ((a3 & 0x7FF) << 17);
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreSieveFiltering(uint64_t result, char a2, char a3)
{
  *(_DWORD *)(result + 1328) = a2 & 7 | (16 * (a3 & 0xF)) | *(_DWORD *)(result + 1328) & 0xFFFFFF08;
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreBandwidthLimit(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1328) = *(_DWORD *)(result + 1328) & 0xFFFE00FF | ((a2 & 0x1FF) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetCacheDmaPreTelemetryResponseAgeOut(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1328) = *(_DWORD *)(result + 1328) & 0xFF0FFFFF | ((a2 & 0xF) << 20);
  return result;
}

void ZinAneTd<17u>::SetCacheDmaPreDSIDAndSize(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  __int16 v11;
  __int128 __p;
  uint64_t v13;
  int v14;

  *(_DWORD *)(a1 + 1348) = *(_DWORD *)(a1 + 1348) & 0xC000007F | ((a3 & 0x7FFFFF) << 7);
  if (*((_BYTE *)a2 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, &byte_207AF6795);
    ZinAneRelocInfo::ZinAneRelocInfo(&v11, v9, 5698, *a2, 0, 0, 0, 0);
    v5 = *(_QWORD *)(a1 + 1392);
    if (v5 >= *(_QWORD *)(a1 + 1400))
    {
      v8 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1384), (uint64_t)&v11);
    }
    else
    {
      *(_WORD *)v5 = v11;
      v6 = (std::string *)(v5 + 8);
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v7 = __p;
        *(_QWORD *)(v5 + 24) = v13;
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_DWORD *)(v5 + 32) = v14;
      v8 = v5 + 40;
      *(_QWORD *)(a1 + 1392) = v5 + 40;
    }
    *(_QWORD *)(a1 + 1392) = v8;
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_206F9FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v22;
  *(_QWORD *)(v21 + 1392) = v23;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ZinAneTd<17u>::SetCacheDmaPreAddress(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a3, 5700, a2, 1, 1, 0, 0);
  v4 = a1[174];
  if (v4 >= a1[175])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 173, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[174] = v4 + 40;
  }
  a1[174] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206FA0098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1392) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<17u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x20000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 564) = *(_DWORD *)(result + 564) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetDoubleInt8Enable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 1180) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 1180) & 0xFFF7FFFF;
  *(_DWORD *)(result + 1180) = v2;
  return result;
}

BOOL ZinAneTd<17u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 736), &v7))
    ZinAssertImpl("Illegal Kernel Group Stride");
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 72) & 0x3F | (v7 << 6);
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 728), &v6);
  if (!result)
    ZinAssertImpl("Illegal Kernel OCG Stride");
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<17u>::SetRcasKeyMask(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1196) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetRcasMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 1196) & 0xFFEFFFFF;
LABEL_7:
      *(_DWORD *)(result + 1196) = v2;
      return result;
    case 2:
      v2 = *(_DWORD *)(result + 1196) | 0x100000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Unknown RCAS Mode.\n");
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetRcasSenseAxis(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1196) | 0x3000;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 1196) & 0xFFFFCFFF | 0x1000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 1196) & 0xFFFFCFFF | 0x2000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 1196) & 0xFFFFCFFF;
LABEL_6:
      *(_DWORD *)(result + 1196) = v2;
      break;
    case 4:
    case 5:
      ZinAssertImpl("Unknown RCAS Sense Axis.\n");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetRcasSenseBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1196) = *(_DWORD *)(result + 1196) & 0xFFF0FFFF | ((a2 & 0xF) << 16);
  return result;
}

uint64_t ZinAneTd<17u>::SetRcasCmpBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1196) = *(_DWORD *)(result + 1196) & 0xFFFFF8FF | ((a2 & 7) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(result + 48) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(result + 48) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelAsymQuantEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x1000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1176) = *(_DWORD *)(result + 1176) & 0xFEFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetStochasticRoundMode(uint64_t result, int a2)
{
  if (a2 != 1 && a2 != 2)
  {
    if (!a2)
      ZinAssertImpl("Invalid stochastic rounding mode");
    a2 = 0;
  }
  *(_DWORD *)(result + 1200) = *(_DWORD *)(result + 1200) & 0xFFFFFFFC | a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetStochasticRoundSeed(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 1204) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetStochasticRoundIntegerBits(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1200) = *(_DWORD *)(result + 1200) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return result;
}

uint64_t ZinAneTd<17u>::SetQuantizationOutputZeroOffset(uint64_t result, int a2, char a3, int a4, uint64_t a5)
{
  _DWORD *v5;
  _DWORD *v6;

  v6 = *(_DWORD **)a5;
  v5 = *(_DWORD **)(a5 + 8);
  if (*(_DWORD **)a5 != v5)
  {
    while (*v6 != a4)
    {
      if (++v6 == v5)
      {
        v6 = *(_DWORD **)(a5 + 8);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    if (!a2)
      a3 = 0;
    *(_BYTE *)(result + 1220) = a3;
  }
  return result;
}

uint64_t ZinAneTd<17u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFFC0FF | ((a2 & 0x3F) << 8);
  return result;
}

uint64_t ZinAneTd<17u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 1192) = v10 | *(_DWORD *)(result + 1192) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<17u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 1180) = *(_DWORD *)(result + 1180) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 1188) = v10 | *(_DWORD *)(result + 1188) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<17u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 1184) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 1180) = *(_DWORD *)(a1 + 1180) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<17u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 568) = *(_DWORD *)(result + 568) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<17u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 564) = *(_DWORD *)(result + 564) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 564) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 564) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      v2 = *(_DWORD *)(result + 564) | 0xC;
      goto LABEL_6;
    case 4:
      v2 = *(_DWORD *)(result + 564) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 564) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<17u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_207A7FF60 + (*(_DWORD *)(a1 + 564) & 0xC));
}

uint64_t ZinAneTd<17u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 606) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 610) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 727) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaSrcCompressed2MdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 743) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1234) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcCoeffUserTag(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  int8x16_t v3;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s32(a2 << 16);
  do
  {
    *(int8x16_t *)(result + 80 + v2) = vorrq_s8((int8x16_t)(*(_OWORD *)(result + 80 + v2) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return result;
}

uint64_t ZinAneTd<17u>::SetCachePrefetchDmaUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1334) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcPostScaleUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 290) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcPaletteLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 306) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcBiasUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 274) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetKernelDmaSrcNonLinearLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 322) = a2;
  return result;
}

uint64_t ZinAneTd<17u>::SetCommonTaskType(uint64_t result, unsigned int a2)
{
  if (a2 <= 7)
    *(_DWORD *)(result + 564) = *(_DWORD *)(result + 564) & 0xFFFFFF0F | dword_207AB04A0[a2];
  return result;
}

uint64_t ZinAneTd<17u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 504) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 504) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 504) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 504) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 504) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 504) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 504) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 504) = v2;
  return result;
}

uint64_t ZinAneTd<17u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 504) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 504) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 504) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 504) = v2;
  return result;
}

BOOL ZinAneTd<17u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 304));
}

BOOL ZinAneTd<17u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 296));
}

BOOL ZinAneTd<17u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 216), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 232));
}

BOOL ZinAneTd<17u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 240));
}

BOOL ZinAneTd<17u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 224));
}

BOOL ZinAneTd<17u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFFFFC0 | v4 & 0x3F;
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<17u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 520) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<17u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<17u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 552) = *(_DWORD *)(result + 552) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<17u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1416) + 208), &v4);
  if (result)
    *(_WORD *)(a1 + 554) = v4;
  return result;
}

uint64_t ZinAneTd<19u>::SetWARdmaDependency(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, int **a5)
{
  int *v5;
  int *v6;
  uint64_t v7;

  if (!*(_BYTE *)(a2 + 1323))
    ZinAssertImpl("inconsistent WAR support");
  if (a3)
  {
    v5 = *a5;
    v6 = a5[1];
    if (*a5 != v6)
    {
      do
      {
        v7 = *v5;
        if (v7 <= 2)
          *(_DWORD *)(result + 1268) |= dword_207AB0430[v7];
        ++v5;
      }
      while (v5 != v6);
    }
    *(_DWORD *)(result + 1268) = *(_DWORD *)(result + 1268) & 0x7FFFFFF | (a4 << 27);
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Barrier(uint64_t result)
{
  *(_DWORD *)(result + 576) |= 0x800000u;
  return result;
}

_DWORD *ZinAneTd<19u>::SetEventFlags(_DWORD *result, int a2, int a3, int a4)
{
  result[4] = a2;
  result[8] = a4;
  result[6] = a3;
  return result;
}

BOOL ZinAneTd<19u>::SetL2SrcBaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 312), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Base Address");
  *(_DWORD *)(a1 + 972) = *(_DWORD *)(a1 + 972) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 320), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Channel Stride");
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a1 + 976) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2SrcRowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1464) + 332), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 328), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Row Stride");
  *(_DWORD *)(a1 + 980) = *(_DWORD *)(a1 + 980) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 336), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Depth Stride");
  *(_DWORD *)(a1 + 984) = *(_DWORD *)(a1 + 984) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 344), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src Group Stride");
  *(_DWORD *)(a1 + 988) = *(_DWORD *)(a1 + 988) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src1DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 960) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 960) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 960) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 960) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2DmaFormat(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
      v2 = *(_DWORD *)(result + 964) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 964) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not fully implemented yet\n");
    case 11:
      v2 = *(_DWORD *)(result + 964) | 0xC0;
      break;
    case 12:
    case 13:
      ZinAssertImpl("E4M3 or E5M2 format not supported");
    default:
      ZinAssertImpl("Invalid Dma Format");
  }
  *(_DWORD *)(result + 964) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultCfgDmaFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
    case 2:
    case 12:
    case 13:
      v2 = *(_DWORD *)(result + 1028) & 0xFFFFFF3F;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      v2 = *(_DWORD *)(result + 1028) & 0xFFFFFF3F | 0x40;
      break;
    case 8:
      ZinAssertImpl("packed10 format not fully implemented yet");
    case 11:
      v2 = *(_DWORD *)(result + 1028) | 0xC0;
      break;
    default:
      ZinAssertImpl("Invalid tensor format");
  }
  *(_DWORD *)(result + 1028) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultWrapCfg(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1056) & 0xFFFFF8FF | 0x400;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 1056) & 0xFFFFF8FF | 0x300;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 1056) & 0xFFFFF8FF | 0x100;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 1056) & 0xFFFFF8FF | 0x200;
      goto LABEL_7;
    case 4:
      ZinAssertImpl("Error: Invalid Wrap Axis");
    case 5:
      v2 = *(_DWORD *)(result + 1056) & 0xFFFFF8FF;
LABEL_7:
      *(_DWORD *)(result + 1056) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultWrapStartOffset(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1074) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultWrapIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1072) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultWrapAddrOffset(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1112) = *(_DWORD *)(result + 1112) & 0xF800FFFF | ((a2 & 0x7FF) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultWrapAddr(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1112) = *(_DWORD *)(result + 1112) & 0xFFFFF000 | a2 & 0xFFF;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2SrcOffsetXlsbs(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1116) = *(_DWORD *)(result + 1116) & 0xFFFFFFC0 | a2 & 0x3F;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2SrcOffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 748), 5);
  *(_DWORD *)(a1 + 1116) = *(_DWORD *)(a1 + 1116) & 0xFFFFE0FF | ((result & 0x1F) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetSourceAddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 1100) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 1100) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<19u>::SetSourceWrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 1056) = *(_DWORD *)(result + 1056) & 0xFFFFFFF8 | dword_207AB04F0[a2];
  *(_DWORD *)(result + 1060) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src1FIFOMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 960) = *(_DWORD *)(result + 960) & 0xF7FFFFFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 960) = *(_DWORD *)(a1 + 960) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src1SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 960) = *(_DWORD *)(result + 960) & 0xFFFFFFFC | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2SourceType(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
      ZinAssertImpl("Error: It must have a valid L2 access mode");
    case 1:
      v2 = 2;
      break;
    case 2:
      v2 = 1;
      break;
    case 4:
      v2 = 3;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 964) = *(_DWORD *)(result + 964) & 0xFFFFFFFC | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2BaseAddress(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 352), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Src2 Base Address");
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a1 + 992) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 360), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Channel Stride");
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2RowStride(uint64_t a1, ZinCodegen *this, ZinTensorDimensions *a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  unsigned int v7;
  ZinCodegenUtil *v8;

  v8 = 0;
  ZinCodegen::GetL2RowStride(this, a3, *(unsigned int *)(*(_QWORD *)(a1 + 1464) + 372), &v8, a5);
  v7 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(v8, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 368), &v7);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Row Stride");
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a1 + 1000) & 0xFFE0000F | (16 * (v7 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 376), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Depth Stride");
  *(_DWORD *)(a1 + 1004) = *(_DWORD *)(a1 + 1004) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x11uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 384), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source 2 Group Stride");
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 1008) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2OffsetXlsbs(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1116) = *(_DWORD *)(result + 1116) & 0xFFC0FFFF | ((a2 & 0x3F) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2OffsetYlsbsFromCropOffsetY(uint64_t a1)
{
  uint64_t result;

  result = ZinExtractLSBs(*(unsigned __int16 *)(a1 + 764), 5);
  *(_DWORD *)(a1 + 1116) = *(_DWORD *)(a1 + 1116) & 0xE0FFFFFF | ((result & 0x1F) << 24);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src1CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 960) & 0xFDF80FFF;
  *(_DWORD *)(result + 960) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 960) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2CfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 964) & 0xFDF80FFF;
  *(_DWORD *)(result + 964) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 964) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

BOOL ZinAneTd<19u>::SetL2SrcIdxBaseAddr(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1012) = *(_DWORD *)(a1 + 1012) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 392));
}

BOOL ZinAneTd<19u>::SetL2SrcIdxChannelStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1016) = *(_DWORD *)(a1 + 1016) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 400));
}

BOOL ZinAneTd<19u>::SetL2SrcIdxGroupStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1024) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 416));
}

BOOL ZinAneTd<19u>::SetL2SrcIdxDepthStride(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 1020) = *(_DWORD *)(a1 + 1020) & 0xFFE0000F | (16 * (a2 & 0x1FFFF));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 408));
}

uint64_t ZinAneTd<19u>::SetL2ResultCfgForCompression(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 1028) & 0xFDF80FFF;
  *(_DWORD *)(result + 1028) = v2 | 0x2000000;
  switch(a2)
  {
    case 1:
      v3 = v2 & 0xF9F80FFF | 0x2000000;
LABEL_7:
      *(_DWORD *)(result + 1028) = v3;
      return result;
    case 2:
      v3 = v2 | 0x6000000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Invalid macro block size");
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetSource2AddrWrap(uint64_t result, __int16 a2, __int16 a3)
{
  *(_DWORD *)(result + 1104) = a3 & 0xFFF | ((a2 & 0x7FF) << 16) | *(_DWORD *)(result + 1104) & 0xF800F000;
  return result;
}

uint64_t ZinAneTd<19u>::SetSource2Wrap(uint64_t result, unsigned int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  if (a2 >= 4)
    ZinAssertImpl("Source wrapping dimension not acceptable\n");
  *(_DWORD *)(result + 1056) = *(_DWORD *)(result + 1056) & 0xFFFFFF8F | dword_207AB0500[a2];
  *(_DWORD *)(result + 1064) = a4 | (a3 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetL2Src2FIFOMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 964) = *(_DWORD *)(result + 964) & 0xF7FFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetOpMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8;
      goto LABEL_8;
    case 1:
      ZinAssertImpl("ElemWise not valid for architecture");
    case 2:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8 | 3;
      goto LABEL_8;
    case 3:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8 | 1;
      goto LABEL_8;
    case 4:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8 | 2;
      goto LABEL_8;
    case 5:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8 | 4;
      goto LABEL_8;
    case 6:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF8 | 5;
LABEL_8:
      *(_DWORD *)(result + 1208) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1208) & 0xFFFFFFF7;
LABEL_7:
      *(_DWORD *)(result + 1208) = v2;
      return result;
    case 1:
      v2 = *(_DWORD *)(result + 1208) | 8;
      goto LABEL_7;
    case 2:
      ZinAssertImpl("Unsupported Kernel Mode");
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetPassthroughEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelFmt(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1204) & 0xFFFFFFFC;
      goto LABEL_5;
    case 1:
      v2 = *(_DWORD *)(result + 1204) & 0xFFFFFFFC | 1;
      goto LABEL_5;
    case 2:
      v2 = *(_DWORD *)(result + 1204) & 0xFFFFFFFC | 2;
LABEL_5:
      *(_DWORD *)(result + 1204) = v2;
      break;
    case 3:
      ZinAssertImpl("Unimplemented or Unsupported kernel format");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcCoeffDmaEn(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 84) = *(_DWORD *)(result + 4 * a3 + 84) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcConfigPrefetch(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  if (*(_DWORD *)(a2 + 96) == 1)
  {
    v2 = *(unsigned __int16 *)(result + 60) | (*(_DWORD *)(a2 + 104) << 16);
    *(_DWORD *)(result + 60) = v2;
    v3 = v2 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 112);
    *(_DWORD *)(result + 60) = v3;
    *(_DWORD *)(result + 60) = v3 & 0xFFFFFFFD | (2 * *(unsigned __int8 *)(a2 + 113));
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcCoeffDmaCacheHint(uint64_t result, int a2, uint64_t a3)
{
  int v3;

  v3 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v3 = 32;
      goto LABEL_5;
    case 2:
      v3 = 64;
      goto LABEL_5;
    case 3:
      v3 = 192;
LABEL_5:
      *(_DWORD *)(result + 4 * a3 + 84) = *(_DWORD *)(result + 4 * a3 + 84) & 0xFFFFFF0F | v3;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc CoeffDma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPostScaleDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 292) = *(_DWORD *)(result + 292) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcBiasDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 276) = *(_DWORD *)(result + 276) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPaletteLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 308) = *(_DWORD *)(result + 308) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PaletteLut Dma CacheHint");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v2 = 32;
      goto LABEL_5;
    case 2:
      v2 = 64;
      goto LABEL_5;
    case 3:
      v2 = 192;
LABEL_5:
      *(_DWORD *)(result + 324) = *(_DWORD *)(result + 324) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Error: Invalid KernelDmaSrc PostScale Dma CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetKernelDmaSrcCoeffMemBufferSize(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 616), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 212) = *(_DWORD *)(a1 + 4 * a3 + 212) & 0x3F | (v6 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetKernelDmaSrcCoeffBaseOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  int v6;

  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 608), &v6);
  if (result)
    *(_DWORD *)(a1 + 4 * a3 + 148) = *(_DWORD *)(a1 + 4 * a3 + 148) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcDataSetId(uint64_t result, char a2, uint64_t a3)
{
  *(_BYTE *)(result + 4 * a3 + 85) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPaddingMode(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  switch(a2)
  {
    case 1:
      if (a3)
        goto LABEL_12;
      v3 = 0;
      v4 = 0;
      break;
    case 2:
      if (a3)
        goto LABEL_12;
      v3 = 0;
      v4 = 4;
      break;
    case 3:
      if (a3)
        goto LABEL_12;
      v4 = 8;
      v3 = 0x40000;
      break;
    case 4:
      if (a3)
LABEL_12:
        ZinAssertImpl("Error: padding-mode doesn't support constants");
      v3 = 0;
      v4 = 12;
      break;
    case 6:
      ZinAssertImpl("Platform doesn't support reflective padding mode");
    case 9:
      v4 = 0;
      v3 = (a3 != 0) << 18;
      break;
    default:
      ZinAssertImpl("Invalid padding mode: %d", a2);
  }
  *(_DWORD *)(result + 956) = v4 & 0xFF00FFFF | (a3 << 16) | *(_DWORD *)(result + 956) & 0xFF00FFF3;
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFBFFFF | v3;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelAlignmentFormat(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 1204) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 1204) | 0x10000;
  }
  *(_DWORD *)(result + 1204) = v2;
  return result;
}

void ZinAneTd<19u>::SetAlignedKernelRelocationCommand(uint64_t *a1, _QWORD *a2, uint64_t a3, const void **a4, uint64_t a5)
{
  size_t v10;
  void **v11;
  const void *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  const void *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  size_t v31;
  void **v32;
  const void *v33;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  __int16 v40;
  __int128 __p;
  uint64_t v42;
  int v43;

  if (a2[1])
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = *((unsigned __int8 *)a4 + 23);
    else
      v10 = (size_t)a4[1];
    v11 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v10 + 7);
    if (v39 < 0)
      v11 = (void **)v38[0];
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = a4;
      else
        v12 = *a4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_actlut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5510, a3, 1, 1, a5, 0);
    v13 = a1[180];
    if (v13 >= a1[181])
    {
      v16 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v13 = v40;
      v14 = (std::string *)(v13 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v15 = __p;
        *(_QWORD *)(v13 + 24) = v42;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      *(_DWORD *)(v13 + 32) = v43;
      v16 = v13 + 40;
      a1[180] = v13 + 40;
    }
    a1[180] = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[2])
  {
    if (*((char *)a4 + 23) >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = (size_t)a4[1];
    v18 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v17 + 7);
    if (v39 < 0)
      v18 = (void **)v38[0];
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *a4;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_pallut");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5506, a3, 1, 1, a5, 0);
    v20 = a1[180];
    if (v20 >= a1[181])
    {
      v23 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v20 = v40;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v42;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v43;
      v23 = v20 + 40;
      a1[180] = v20 + 40;
    }
    a1[180] = v23;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[3])
  {
    if (*((char *)a4 + 23) >= 0)
      v24 = *((unsigned __int8 *)a4 + 23);
    else
      v24 = (size_t)a4[1];
    v25 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v24 + 6);
    if (v39 < 0)
      v25 = (void **)v38[0];
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0)
        v26 = a4;
      else
        v26 = *a4;
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_scale");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5502, a3, 1, 1, a5, 0);
    v27 = a1[180];
    if (v27 >= a1[181])
    {
      v30 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v27 = v40;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v29 = __p;
        *(_QWORD *)(v27 + 24) = v42;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *(_DWORD *)(v27 + 32) = v43;
      v30 = v27 + 40;
      a1[180] = v27 + 40;
    }
    a1[180] = v30;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (a2[4])
  {
    if (*((char *)a4 + 23) >= 0)
      v31 = *((unsigned __int8 *)a4 + 23);
    else
      v31 = (size_t)a4[1];
    v32 = v38;
    std::string::basic_string[abi:ne180100]((uint64_t)v38, v31 + 5);
    if (v39 < 0)
      v32 = (void **)v38[0];
    if (v31)
    {
      if (*((char *)a4 + 23) >= 0)
        v33 = a4;
      else
        v33 = *a4;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_bias");
    ZinAneRelocInfo::ZinAneRelocInfo(&v40, v38, 5498, a3, 1, 1, a5, 0);
    v34 = a1[180];
    if (v34 >= a1[181])
    {
      v37 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v34 = v40;
      v35 = (std::string *)(v34 + 8);
      if (SHIBYTE(v42) < 0)
      {
        std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v36 = __p;
        *(_QWORD *)(v34 + 24) = v42;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      }
      *(_DWORD *)(v34 + 32) = v43;
      v37 = v34 + 40;
      a1[180] = v34 + 40;
    }
    a1[180] = v37;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)__p);
    if (v39 < 0)
      operator delete(v38[0]);
  }
}

void sub_206FA284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 1440) = v23;
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *ZinAneTd<19u>::SetAlignedKernelBias(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[13] = result[13] & 0xFFFFFFF3 | 8;
  result[301] = result[301] & 0xFFF9FFFF | 0x40000;
  result[70] = result[70] & 0x3F | (a4 << 6);
  result[69] |= 1u;
  return result;
}

_DWORD *ZinAneTd<19u>::SetAlignedKernelPostScale(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  result[13] = result[13] & 0xFFFFFFFC | 2;
  result[301] = result[301] & 0xFFE7FFFF | 0x100000;
  result[74] = result[74] & 0x3F | (a4 << 6);
  result[73] |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetAlignedKernelPaletteLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 312) = *(_DWORD *)(result + 312) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 308) |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetAlignedKernelNonLinearLut(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 328) = *(_DWORD *)(result + 328) & 0x3F | (a4 << 6);
  *(_DWORD *)(result + 324) |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetAlignedCoeffSizePerCh(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = *(_DWORD *)(result + 56) & 0xF0000000 | a2 & 0xFFFFFFF;
  return result;
}

uint64_t ZinAneTd<19u>::SetQuantizationSrc1InputOffset(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1188) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetQuantizationSrc2InputOffset(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1189) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPEOutputQuantization(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1190) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPEFinalScale(uint64_t result, float a2)
{
  *(float *)(result + 1152) = a2;
  return result;
}

void ZinAneTd<19u>::SetPEScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1140) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<19u>::SetPEBias(uint64_t a1, float a2)
{
  *(float *)(a1 + 1136) = ZinF32ToNearestF19(a2);
}

void ZinAneTd<19u>::SetPEPreScale(uint64_t a1, float a2)
{
  *(float *)(a1 + 1148) = ZinF32ToNearestF19(a2);
}

uint64_t ZinAneTd<19u>::SetPESrc1ReLu(uint64_t result, int a2)
{
  *(_DWORD *)(result + 956) = *(_DWORD *)(result + 956) & 0xFFFFFFFE | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPESrc2ReLu(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(result + 956) = *(_DWORD *)(result + 956) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPESrc1Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 588) = *(_DWORD *)(result + 588) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPESrc2Transpose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_DWORD *)(result + 588) = *(_DWORD *)(result + 588) & 0xFFFFFDFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPESrc1Broadcast(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  unsigned int v3;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 4) - 1;
    if (v3 <= 3)
      *(_DWORD *)(result + 588) |= dword_207AB0510[v3];
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetPESrc2Broadcast(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *i;
  int v4;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v4 = 128;
    switch(*((_DWORD *)i + 4))
    {
      case 1:
        v4 = 64;
        break;
      case 2:
        break;
      case 3:
        if ((a3 & 1) != 0)
          continue;
        v4 = 32;
        break;
      case 4:
        if ((a3 & 1) != 0)
          continue;
        v4 = 16;
        break;
      default:
        continue;
    }
    *(_DWORD *)(result + 588) |= v4;
  }
  return result;
}

void ZinAneTd<19u>::SetPEIndexMode(uint64_t a1, int a2)
{
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(a1 + 1096) & 0xFFF8FFFF | 0x10000;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(a1 + 1096) & 0xFFF8FFFF | 0x20000;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(a1 + 1096) & 0xFFF8FFFF | 0x50000;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 1096) & 0xFFF8FFFF | 0x30000;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(a1 + 1096) & 0xFFF8FFFF | 0x40000;
LABEL_7:
      *(_DWORD *)(a1 + 1096) = v2;
      break;
    case 5:
      v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v3)
        ZinAneTd<8u>::SetPEIndexMode(v3, v4, v5, v6, v7, v8, v9, v10);
      break;
    default:
      return;
  }
}

uint64_t ZinAneTd<19u>::SetPEIndexTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1096) = *(_DWORD *)(result + 1096) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPEIndexBroadcast(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = *((_DWORD *)v2 + 4);
      if (v3 == 2)
        break;
      if (v3 == 1)
      {
        v4 = 0x1000000;
LABEL_6:
        *(_DWORD *)(result + 1096) |= v4;
      }
      v2 = (uint64_t *)*v2;
      if (!v2)
        return result;
    }
    v4 = 0x2000000;
    goto LABEL_6;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetPEMaxIndex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1096) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPEOperationMode(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;

  v2 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 1132) &= 0xFFFFFFE3;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1464) + 648);
      v4 = 0;
      goto LABEL_8;
    case 1:
      *(_DWORD *)(a1 + 1132) = *(_DWORD *)(a1 + 1132) & 0xFFFFFFE3 | 4;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1464) + 648);
      v4 = 1;
      goto LABEL_8;
    case 2:
      *(_DWORD *)(a1 + 1132) = *(_DWORD *)(a1 + 1132) & 0xFFFFFFE3 | 0x10;
      if (!CheckRegValueRange(4uLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 648)))
        goto LABEL_5;
      goto LABEL_9;
    case 3:
      *(_DWORD *)(a1 + 1132) = *(_DWORD *)(a1 + 1132) & 0xFFFFFFE3 | 8;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1464) + 648);
      v4 = 2;
      goto LABEL_8;
    case 4:
      *(_DWORD *)(a1 + 1132) = *(_DWORD *)(a1 + 1132) & 0xFFFFFFE3 | 0xC;
      v3 = (unsigned int *)(*(_QWORD *)(a1 + 1464) + 648);
      v4 = 3;
LABEL_8:
      if (CheckRegValueRange(v4, v3))
        goto LABEL_9;
LABEL_5:
      v2 = 0;
      break;
    case 5:
      return v2;
    default:
LABEL_9:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t ZinAneTd<19u>::SetPEFirstSource(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 != 1)
      return result;
    v2 = *(_DWORD *)(result + 1132) & 0xFFFEFFFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 1132) | 0x10000;
  }
  *(_DWORD *)(result + 1132) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetPESecondSource(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1132) & 0xFFF3FFFF;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 1132) & 0xFFF3FFFF | 0x40000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 1132) & 0xFFF3FFFF | 0x80000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 1132) | 0xC0000;
LABEL_6:
      *(_DWORD *)(result + 1132) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetPECondition(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F;
      goto LABEL_10;
    case 1:
      v2 = *(_DWORD *)(result + 1132) | 0x1C0;
      goto LABEL_10;
    case 2:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0x100;
      goto LABEL_10;
    case 3:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0x180;
      goto LABEL_10;
    case 4:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0x80;
      goto LABEL_10;
    case 5:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0x140;
      goto LABEL_10;
    case 6:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0x40;
      goto LABEL_10;
    case 7:
      v2 = *(_DWORD *)(result + 1132) & 0xFFFFFE3F | 0xC0;
LABEL_10:
      *(_DWORD *)(result + 1132) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetPEOutputCtoW(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 588) = *(_DWORD *)(result + 588) & 0xFFFFFBFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultBaseAddr(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 424), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Base Address");
  *(_DWORD *)(a1 + 1032) = *(_DWORD *)(a1 + 1032) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultChannelStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 432), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Channel Stride");
  *(_DWORD *)(a1 + 1036) = *(_DWORD *)(a1 + 1036) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultRowStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 440), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Row Stride");
  *(_DWORD *)(a1 + 1040) = *(_DWORD *)(a1 + 1040) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultDepthStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 448), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Depth Stride");
  *(_DWORD *)(a1 + 1044) = *(_DWORD *)(a1 + 1044) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultGroupStride(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 456), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Group Stride");
  *(_DWORD *)(a1 + 1048) = *(_DWORD *)(a1 + 1048) & 0xFFE0000F | (16 * (v4 & 0x1FFFF));
  return result;
}

uint64_t ZinAneTd<19u>::SetL2BfrMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 1028) = *(_DWORD *)(result + 1028) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetL2ResultType(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 1028) & 0xFFFFFFFC | 2;
      break;
    case 2:
      v2 = *(_DWORD *)(result + 1028) & 0xFFFFFFFC | 1;
      break;
    case 3:
      v2 = *(_DWORD *)(result + 1028) & 0xFFFFFFFC;
      break;
    case 4:
      v2 = *(_DWORD *)(result + 1028) | 3;
      break;
    default:
      ZinAssertImpl("Invalid L2 Result Type");
  }
  *(_DWORD *)(result + 1028) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1Format(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 720) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 720) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 720) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 720) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 format is not supported");
    case 13:
      ZinAssertImpl("E5M2 format is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 720) = v3;
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Interleave");
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a1 + 720) & 0xF0FFFFFF | ((v4 & 0xF) << 24);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1FIFOMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x40000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 616) = *(_DWORD *)(result + 616) & 0xBFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1Enable(uint64_t result)
{
  *(_DWORD *)(result + 616) |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1CacheHint(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  char v5;
  char v6;

  v4 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 32;
      goto LABEL_5;
    case 2:
      v4 = 64;
      goto LABEL_5;
    case 3:
      v4 = 192;
LABEL_5:
      *(_DWORD *)(result + 616) = *(_DWORD *)(result + 616) & 0xFFFFFF0F | v4;
      break;
    case 4:
LABEL_15:
      ZinAssertImpl("Invalid CacheHint");
    default:
      break;
  }
  v5 = 32;
  switch(a4)
  {
    case 0:
      v5 = -32;
      goto LABEL_10;
    case 2:
      v5 = 64;
      goto LABEL_10;
    case 3:
      v5 = -64;
      goto LABEL_10;
    case 4:
      goto LABEL_15;
    default:
LABEL_10:
      v6 = 2;
      switch(a3)
      {
        case 0:
          v6 = 14;
          goto LABEL_14;
        case 2:
          v6 = 4;
          goto LABEL_14;
        case 3:
          v6 = 12;
          goto LABEL_14;
        case 4:
          goto LABEL_15;
        default:
LABEL_14:
          *(_BYTE *)(result + 624) = v6 | v5;
          return result;
      }
  }
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1ChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 488), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Channel Stride");
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 644) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1RowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 480), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Row Stride");
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a1 + 640) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1DepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 496), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Depth Stride");
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a1 + 648) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1GroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 504), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Group Stride");
  *(_DWORD *)(a1 + 652) = *(_DWORD *)(a1 + 652) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1CropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 748) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<19u>::SetTileDmaSrc1WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 800) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 624) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4974, a2, 0, 0, 0, 0);
  v6 = a1[180];
  if (v6 >= a1[181])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[180] = v6 + 40;
  }
  a1[180] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<19u>::SetTileDmaSrc1WrapCfg((uint64_t)a1, a3);
}

void sub_206FA36AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1440) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 720) = *(_DWORD *)(result + 720) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 720) = *(_DWORD *)(result + 720) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<19u>::SetTileDmaSrc1BaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 4932, a3, 1, 1, 0, 0);
  v4 = a1[180];
  if (v4 >= a1[181])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[180] = v4 + 40;
  }
  a1[180] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206FA37D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1440) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 616) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 616) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 616) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 616) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2DependencyMode(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 620) & 0xCFFFFFFF | 0x10000000;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 620) & 0xCFFFFFFF | 0x20000000;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 620) & 0xCFFFFFFF;
  }
  *(_DWORD *)(result + 620) = v2;
  return result;
}

unint64_t ZinAneTd<19u>::SetTileDmaSrc1DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 640));
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a1 + 616) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

unint64_t ZinAneTd<19u>::SetTileDmaSrc2DependencyInterval(uint64_t a1, unsigned int a2)
{
  unint64_t result;

  result = ZinIrCodegenValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 640));
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a1 + 620) & 0xF0FFFFFF | ((result & 0xF) << 24);
  return result;
}

uint64_t *ZinAneTd<19u>::SetTileDmaSrc1DependencyOffset(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  int v4;

  v4 = 1;
  result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v4);
  if (result)
    *(_DWORD *)(a1 + 808) = result[3];
  return result;
}

uint64_t *ZinAneTd<19u>::SetTileDmaSrc2DependencyOffset(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  int v4;

  v4 = 1;
  result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v4);
  if (result)
    *(_DWORD *)(a1 + 812) = result[3];
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 748) = a2;
  return result;
}

int8x16_t ZinAneTd<19u>::SetTileDmaSrc1PixelOffset(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, a1[48], v5);
  a1[48] = result;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 736);
  *(_DWORD *)(result + 736) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 736) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 736) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 736) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc1CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Width");
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 740) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc1 Compressed Height");
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 744) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<19u>::SetTileDmaSrc1MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4944, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1440);
  if (v10 >= *(_QWORD *)(a1 + 1448))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1432), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1440) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1440) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 736) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 696) = vsli_n_s32(*(int32x2_t *)(a1 + 696), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a1 + 704) & 0x7F | (a6 << 7);
  return result;
}

void sub_206FA3C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1440) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1NoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 736) |= 8u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc1DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 617) = a2;
  return result;
}

BOOL ZinAneTd<19u>::SetL2Src2Interleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Source Interleave");
  *(_DWORD *)(a1 + 964) = *(_DWORD *)(a1 + 964) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2FIFOMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x40000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 620) = *(_DWORD *)(result + 620) & 0xBFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2Enable(uint64_t result)
{
  *(_DWORD *)(result + 620) |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2CropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 764) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2WrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<19u>::SetTileDmaSrc2WrapCfg(a1, a4);
  *(_DWORD *)(a1 + 804) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2WrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a1 + 628) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2WrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 4975, a2, 0, 0, 0, 0);
  v6 = a1[180];
  if (v6 >= a1[181])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[180] = v6 + 40;
  }
  a1[180] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<19u>::SetTileDmaSrc2WrapCfg((uint64_t)a1, a3);
}

void sub_206FA3E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1440) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2FmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 724) = *(_DWORD *)(result + 724) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2FmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 724) = *(_DWORD *)(result + 724) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2OffsetY(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 764) = a2;
  return result;
}

int8x16_t ZinAneTd<19u>::SetTileDmaSrc2PixelOffset(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t result;

  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  v6.i64[0] = 0xFFFF0000FFFF0000;
  v6.i64[1] = 0xFFFF0000FFFF0000;
  result = vbslq_s8(v6, a1[49], v5);
  a1[49] = result;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2CompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 752);
  *(_DWORD *)(result + 752) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 752) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 752) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 752) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrc2DataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 621) = a2;
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaSrc2CompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Width");
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(a1 + 756) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaSrc2 Compressed Height");
  *(_DWORD *)(a1 + 760) = *(_DWORD *)(a1 + 760) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

double ZinAneTd<19u>::SetTileDmaSrc2MetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 4946, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1440);
  if (v10 >= *(_QWORD *)(a1 + 1448))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1432), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1440) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1440) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 752) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 708) = vsli_n_s32(*(int32x2_t *)(a1 + 708), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 716) = *(_DWORD *)(a1 + 716) & 0x7F | (a6 << 7);
  return result;
}

void sub_206FA4188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1440) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaDstFormat(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  switch(a2)
  {
    case 1:
      v3 = *(_DWORD *)(result + 1320) & 0xFFFFCFFC | 0x1000;
      goto LABEL_16;
    case 2:
      v3 = *(_DWORD *)(result + 1320) & 0xFFFFCFFC;
      goto LABEL_16;
    case 3:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCFCC;
      v5 = 8241;
      break;
    case 4:
      v3 = *(_DWORD *)(result + 1320) & 0xFFFFCECC | 1;
      goto LABEL_16;
    case 5:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCECC;
      v5 = 257;
      break;
    case 6:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCECC;
      v5 = 17;
      break;
    case 7:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCECC;
      v5 = 273;
      break;
    case 8:
      ZinAssertImpl("Packed10 format not supported");
    case 9:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCECC;
      if (!a3)
        goto LABEL_14;
      v5 = 4401;
      break;
    case 10:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFCECC;
      if (a3)
        v5 = 305;
      else
LABEL_14:
        v5 = 8497;
      break;
    case 11:
      v4 = *(_DWORD *)(result + 1320) & 0xFFFFFFCF;
      v5 = 12547;
      break;
    case 12:
      ZinAssertImpl("E4M3 is not supported");
    case 13:
      ZinAssertImpl("E5M2 is not supported");
    default:
      ZinAssertImpl("Invalid format provided");
  }
  v3 = v4 | v5;
LABEL_16:
  *(_DWORD *)(result + 1320) = v3;
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstandL2DstInterleave(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v5;
  int v6;

  v6 = 0;
  v3 = a2;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v6))
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 1028) & 0xFFFFF0FF | ((v6 & 0xF) << 8);
  v5 = 0;
  result = ZinCodegenUtil::ValueToRegister(v3, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v5);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Interleave");
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a1 + 1320) & 0xF0FFFFFF | ((v5 & 0xF) << 24);
  return result;
}

BOOL ZinAneTd<19u>::SetL2ResultInterleave(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 632), &v4);
  if (!result)
    ZinAssertImpl("Illegal L2 Result Interleave");
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 1028) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstandL2DstFifoMode(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = *(_DWORD *)(result + 1028) & 0xFFFFFFF7;
  if (a2)
    v3 = 0x1000000;
  else
    v3 = 0;
  v4 = *(_DWORD *)(result + 1264) & 0xFEFFFFFF | v3;
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *(_DWORD *)(result + 1264) = v4;
  *(_DWORD *)(result + 1028) = v2 | v5;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstEnable(uint64_t result)
{
  *(_DWORD *)(result + 1264) |= 1u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstCacheHint(uint64_t result, int a2)
{
  int v2;

  v2 = 224;
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v2 = 32;
      goto LABEL_4;
    case 2:
      ZinAssertImpl("Drop CacheHint not supported on Dst");
    case 3:
      v2 = 192;
LABEL_4:
      *(_DWORD *)(result + 1264) = *(_DWORD *)(result + 1264) & 0xFFFFFF0F | v2;
      break;
    case 4:
      ZinAssertImpl("Invalid CacheHint");
    default:
      return result;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstChannelStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 544), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Channel Stride");
  *(_DWORD *)(a1 + 1284) = *(_DWORD *)(a1 + 1284) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstRowStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 536), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Row Stride");
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a1 + 1280) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 552), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)(a1 + 1288) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  _BOOL8 result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 560), &v4);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a1 + 1292) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 1320) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 1320) = v2;
  *(_DWORD *)(result + 1320) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstCropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 1344) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result;

  result = ZinAneTd<19u>::SetTileDmaDstWrapCfg(a1, a4);
  *(_DWORD *)(a1 + 1316) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapCfg(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 == 4)
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a1 + 1268) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapDynamic(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int16 v13;
  __int128 __p;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(v11, &byte_207AF6795);
  ZinAneRelocInfo::ZinAneRelocInfo(&v13, v11, 5197, a2, 0, 0, 0, 0);
  v6 = a1[180];
  if (v6 >= a1[181])
  {
    v9 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v13);
  }
  else
  {
    *(_WORD *)v6 = v13;
    v7 = (std::string *)(v6 + 8);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v8 = __p;
      *(_QWORD *)(v6 + 24) = v15;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *(_DWORD *)(v6 + 32) = v16;
    v9 = v6 + 40;
    a1[180] = v6 + 40;
  }
  a1[180] = v9;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v12 < 0)
    operator delete(v11[0]);
  return ZinAneTd<19u>::SetTileDmaDstWrapCfg((uint64_t)a1, a3);
}

void sub_206FA47C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 1440) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1320) = *(_DWORD *)(result + 1320) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 1320) = *(_DWORD *)(result + 1320) & 0xFFFFFFF | (a2 << 28);
  return result;
}

void ZinAneTd<19u>::SetTileDmaDstBaseAddrLo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a2, 5186, a3, 1, 1, 0, 0);
  v4 = a1[180];
  if (v4 >= a1[181])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[180] = v4 + 40;
  }
  a1[180] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206FA48F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1440) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<19u>::SetTileDmaDstCompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 24), &v7))
    ZinAssertImpl("Illegal TileDmaDst Compressed Width");
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(a1 + 1336) & 0xFFFE0000 | v7 & 0x1FFFF;
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 16), &v6);
  if (!result)
    ZinAssertImpl("Illegal TileDmaDst Compressed Height");
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1340) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstCompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(result + 1328);
  *(_DWORD *)(result + 1328) = v4 | 1;
  switch(a4)
  {
    case 0:
      v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 1328) = v5;
  if (a3 == 2)
  {
    v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1)
      ZinAssertImpl("Unsupported macro block size");
    v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 1328) = v6;
  if ((a2 - 1) >= 0x13)
    ZinAssertImpl("Invalid packing format");
  *(_DWORD *)(result + 1328) = v6 & 0xFFFFFC0F | dword_207AB043C[a2 - 1];
  return result;
}

double ZinAneTd<19u>::SetTileDmaDstMetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  double result;
  __int16 v15;
  __int128 __p;
  uint64_t v17;
  int v18;

  ZinAneRelocInfo::ZinAneRelocInfo(&v15, a2, 5192, a3, 1, 1, 0, 0);
  v10 = *(_QWORD *)(a1 + 1440);
  if (v10 >= *(_QWORD *)(a1 + 1448))
  {
    v13 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1432), (uint64_t)&v15);
  }
  else
  {
    *(_WORD *)v10 = v15;
    v11 = (std::string *)(v10 + 8);
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v12 = __p;
      *(_QWORD *)(v10 + 24) = v17;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    *(_DWORD *)(v10 + 32) = v18;
    v13 = v10 + 40;
    *(_QWORD *)(a1 + 1440) = v10 + 40;
  }
  *(_QWORD *)(a1 + 1440) = v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(a1 + 1328) &= ~8u;
  result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 1304) = vsli_n_s32(*(int32x2_t *)(a1 + 1304), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 1312) = *(_DWORD *)(a1 + 1312) & 0x7F | (a6 << 7);
  return result;
}

void sub_206FA4B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 1440) = v17;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaDstNoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 1328) |= 8u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1265) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreEnable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(result + 1364) = *(_DWORD *)(result + 1364) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreFlush(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)(result + 1364) = *(_DWORD *)(result + 1364) & 0xFFFFFFFE | a2;
  *(_WORD *)(result + 1400) = a3;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTaskSync(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  if (a3)
    v3 = 4;
  else
    v3 = 0;
  if (a2)
    v4 = 8;
  else
    v4 = 0;
  *(_DWORD *)(result + 1364) = v3 | v4 | *(_DWORD *)(result + 1364) & 0xFFFFFFF3;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreEarlyTermination(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, __int16 a8, __int16 a9, __int16 a10, char a11, __int16 a12, char a13)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (a2)
    v13 = 16;
  else
    v13 = 0;
  if (a3)
    v14 = 32;
  else
    v14 = 0;
  if (a4)
    v15 = 64;
  else
    v15 = 0;
  if (a5)
    v16 = 128;
  else
    v16 = 0;
  if (a6)
    v17 = 256;
  else
    v17 = 0;
  *(_DWORD *)(result + 1364) = v14 | v13 | v15 | v16 | v17 | *(_DWORD *)(result + 1364) & 0xFFFFFE0F;
  if (a3)
  {
    *(_WORD *)(result + 1396) = a8;
    if (!a4)
    {
LABEL_18:
      if (!a6)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if (!a4)
  {
    goto LABEL_18;
  }
  *(_WORD *)(result + 1398) = a9;
  if (!a6)
  {
LABEL_19:
    if ((a5 & 1) != 0)
      goto LABEL_25;
LABEL_24:
    if (!a7)
      return result;
    goto LABEL_25;
  }
LABEL_23:
  *(_BYTE *)(result + 1404) = a11;
  if ((a5 & 1) == 0)
    goto LABEL_24;
LABEL_25:
  *(_BYTE *)(result + 1406) = a13;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTelemetryBackOff(uint64_t result, int a2, char a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  unsigned int v6;

  v6 = *(_DWORD *)(result + 1408) & 0xFFFFFFFE | a2;
  if (a2)
    v6 = (16 * (a3 & 0xF)) | (unsigned __int16)(a4 << 8) | (a5 << 16) | (a6 << 24) | *(_DWORD *)(result + 1408) & 0xE | a2 & 0xF;
  *(_DWORD *)(result + 1408) = v6;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreFootprintLimiter(uint64_t result, int a2, __int16 a3, unsigned __int16 a4)
{
  int v4;
  unsigned int v5;

  if (a2)
    v4 = 512;
  else
    v4 = 0;
  v5 = *(_DWORD *)(result + 1364) & 0xFFFFFDFF | v4;
  *(_DWORD *)(result + 1364) = v5;
  if (a2)
  {
    *(_DWORD *)(result + 1364) = (unsigned __int16)v5 | (a4 << 16);
    *(_DWORD *)(result + 1392) = *(_DWORD *)(result + 1392) & 0xF001FFFF | ((a3 & 0x7FF) << 17);
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreSieveFiltering(uint64_t result, char a2, char a3)
{
  *(_DWORD *)(result + 1368) = a2 & 7 | (16 * (a3 & 0xF)) | *(_DWORD *)(result + 1368) & 0xFFFFFF08;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreBandwidthLimit(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1368) = *(_DWORD *)(result + 1368) & 0xFFFE00FF | ((a2 & 0x1FF) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTelemetryResponseAgeOut(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1368) = *(_DWORD *)(result + 1368) & 0xFF0FFFFF | ((a2 & 0xF) << 20);
  return result;
}

void ZinAneTd<19u>::SetCacheDmaPreDSIDAndSize(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  __int16 v11;
  __int128 __p;
  uint64_t v13;
  int v14;

  *(_DWORD *)(a1 + 1388) = *(_DWORD *)(a1 + 1388) & 0xC000007F | ((a3 & 0x7FFFFF) << 7);
  if (*((_BYTE *)a2 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, &byte_207AF6795);
    ZinAneRelocInfo::ZinAneRelocInfo(&v11, v9, 5698, *a2, 0, 0, 0, 0);
    v5 = *(_QWORD *)(a1 + 1440);
    if (v5 >= *(_QWORD *)(a1 + 1448))
    {
      v8 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a1 + 1432), (uint64_t)&v11);
    }
    else
    {
      *(_WORD *)v5 = v11;
      v6 = (std::string *)(v5 + 8);
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v7 = __p;
        *(_QWORD *)(v5 + 24) = v13;
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_DWORD *)(v5 + 32) = v14;
      v8 = v5 + 40;
      *(_QWORD *)(a1 + 1440) = v5 + 40;
    }
    *(_QWORD *)(a1 + 1440) = v8;
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_206FA4E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v22;
  *(_QWORD *)(v21 + 1440) = v23;
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void ZinAneTd<19u>::SetCacheDmaPreAddress(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 __p;
  uint64_t v10;
  int v11;

  ZinAneRelocInfo::ZinAneRelocInfo(&v8, a3, 5700, a2, 1, 1, 0, 0);
  v4 = a1[180];
  if (v4 >= a1[181])
  {
    v7 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 179, (uint64_t)&v8);
  }
  else
  {
    *(_WORD *)v4 = v8;
    v5 = (std::string *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v6 = __p;
      *(_QWORD *)(v4 + 24) = v10;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    *(_DWORD *)(v4 + 32) = v11;
    v7 = v4 + 40;
    a1[180] = v4 + 40;
  }
  a1[180] = v7;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_206FA4F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 1440) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetCacheDmaPrePause(uint64_t result, int a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;

  if (a3)
    v5 = 0x20000;
  else
    v5 = 0;
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
  {
    v5 = 0;
    if (a5)
    {
      if ((a4 & 1) == 0)
        ZinAssertImpl("Pause Duration has to be 0 if nothing to pause on");
    }
  }
  if (a2)
    v6 = 0x40000;
  else
    v6 = 0;
  if (a4)
    v7 = 0x10000;
  else
    v7 = 0;
  *(_DWORD *)(result + 1412) = (v7 | v6) & 0xFFFF0000 | (unsigned __int16)a5 | v5 | *(_DWORD *)(result + 1412) & 0xFFF80000;
  return result;
}

BOOL ZinAneTd<19u>::SetCacheDmaPreThrottle(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6)
{
  int v7;
  int v8;
  int v9;
  _BOOL8 result;
  int v11;

  if (a3)
    v7 = 0x200000;
  else
    v7 = 0;
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
  {
    v7 = 0;
    if (a5)
    {
      if ((a4 & 1) == 0)
        ZinAssertImpl("Throttle Duration has to be 0 if nothing to throttle on");
    }
  }
  if (a2)
    v8 = 0x400000;
  else
    v8 = 0;
  if (a4)
    v9 = 0x100000;
  else
    v9 = 0;
  *(_DWORD *)(a1 + 1416) = (v9 | v8) & 0xFFFF0000 | (unsigned __int16)a5 | v7 | *(_DWORD *)(a1 + 1416) & 0xFF8F0000;
  v11 = 0;
  result = ZinCodegenUtil::ValueToRegister(a6, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 744), &v11);
  if (!result)
    ZinAssertImpl("Illegal Throttle Rate");
  *(_DWORD *)(a1 + 1416) = *(_DWORD *)(a1 + 1416) & 0xFFF8FFFF | ((v11 & 7) << 16);
  return result;
}

BOOL ZinAneTd<19u>::SetCacheDmaPrePrefetchRate(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 752), &v4);
  if (!result)
    ZinAssertImpl("Illegal Prefetch Rate");
  *(_DWORD *)(a1 + 1364) = *(_DWORD *)(a1 + 1364) & 0xFFFF1FFF | ((v4 & 7) << 13);
  return result;
}

uint64_t ZinAneTd<19u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x20000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetDoubleInt8Enable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetArgOutputSelect(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 6) > 5)
    v2 = 0x100000;
  else
    v2 = dword_207AB0488[a2 - 6];
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0)
    v2 = *(_DWORD *)(result + 1208) | 0x80000;
  else
    v2 = *(_DWORD *)(result + 1208) & 0xFFF7FFFF;
  *(_DWORD *)(result + 1208) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::Set1DWinogradMode(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xF7FFFFFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  int v6;
  int v7;

  *(_DWORD *)(a1 + 52) |= 0x400u;
  v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 736), &v7))
    ZinAssertImpl("Illegal Kernel Group Stride");
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0x3F | (v7 << 6);
  v6 = 0;
  result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 728), &v6);
  if (!result)
    ZinAssertImpl("Illegal Kernel OCG Stride");
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetPaletteBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFC7FF | ((a2 & 7) << 11);
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xF1FFFFFF | ((a2 & 7) << 25);
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasKeyMask(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1224) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 1:
      v2 = *(_DWORD *)(result + 1224) & 0xFFEFFFFF;
LABEL_7:
      *(_DWORD *)(result + 1224) = v2;
      return result;
    case 2:
      v2 = *(_DWORD *)(result + 1224) | 0x100000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Unknown RCAS Mode.\n");
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasSenseAxis(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 1224) | 0x3000;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF | 0x1000;
      goto LABEL_6;
    case 2:
      v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF | 0x2000;
      goto LABEL_6;
    case 3:
      v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF;
LABEL_6:
      *(_DWORD *)(result + 1224) = v2;
      break;
    case 4:
    case 5:
      ZinAssertImpl("Unknown RCAS Sense Axis.\n");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasSenseBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1224) = *(_DWORD *)(result + 1224) & 0xFFF0FFFF | ((a2 & 0xF) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasCmpBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1224) = *(_DWORD *)(result + 1224) & 0xFFFFF8FF | ((a2 & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 1024;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFBFF | v2;
  if (a2)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFEFF | v2;
  if (a2)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2;

  v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2;

  v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelAsymQuantEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x1000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFEFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDetectZeros(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundMode(uint64_t result, int a2)
{
  if (a2 != 1 && a2 != 2)
  {
    if (!a2)
      ZinAssertImpl("Invalid stochastic rounding mode");
    a2 = 0;
  }
  *(_DWORD *)(result + 1228) = *(_DWORD *)(result + 1228) & 0xFFFFFFFC | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundSeed(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 1232) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundIntegerBits(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1228) = *(_DWORD *)(result + 1228) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return result;
}

uint64_t ZinAneTd<19u>::SetQuantizationOutputZeroOffset(uint64_t result, int a2, char a3, int a4, uint64_t a5)
{
  _DWORD *v5;
  _DWORD *v6;

  v6 = *(_DWORD **)a5;
  v5 = *(_DWORD **)(a5 + 8);
  if (*(_DWORD **)a5 != v5)
  {
    while (*v6 != a4)
    {
      if (++v6 == v5)
      {
        v6 = *(_DWORD **)(a5 + 8);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    if (!a2)
      a3 = 0;
    *(_BYTE *)(result + 1248) = a3;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFC0FF | ((a2 & 0x3F) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      v4 = *(_DWORD **)a3;
      v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3)
        ZinAssertImpl("Error: illegal non-linear mode\n");
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 15360;
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 1220) = v10 | *(_DWORD *)(result + 1220) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  int v8;
  int v9;
  int v10;

  _S0 = a2;
  __asm { FCVT            H0, S0 }
  v8 = (unsigned __int16)_S0;
  if (!_ZF)
    v8 = 0;
  v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 1216) = v10 | *(_DWORD *)(result + 1216) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<19u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  ZinIrKernel *result;
  int v6;
  int v8;

  result = *a2;
  if (*a2)
    _ZF = (a3 & 0xFF00000000) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if ((_DWORD)result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if ((_DWORD)result != 2 && (_DWORD)result != 1)
        ZinAssertImpl("Error: Invalid kernel format");
      v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 1212) = v8;
    v6 = 64;
  }
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a1 + 1208) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 580) = *(_DWORD *)(result + 580) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<19u>::SetOutputTranspose(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      v2 = *(_DWORD *)(result + 576) | 0xC;
      goto LABEL_6;
    case 4:
      v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 576) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_207A7FF60 + (*(_DWORD *)(a1 + 576) & 0xC));
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 618) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 622) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 739) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcCompressed2MdUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 755) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1266) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcCoeffUserTag(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  int8x16_t v3;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s32(a2 << 16);
  do
  {
    *(int8x16_t *)(result + 84 + v2) = vorrq_s8((int8x16_t)(*(_OWORD *)(result + 84 + v2) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return result;
}

uint64_t ZinAneTd<19u>::SetCachePrefetchDmaUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1374) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPostScaleUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 294) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPaletteLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 310) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcBiasUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 278) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcNonLinearLutUserTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 326) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonTaskType(uint64_t result, unsigned int a2)
{
  if (a2 <= 7)
    *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFF0F | dword_207AB04A0[a2];
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonInFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    if (a2 == 3)
    {
      v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12)
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2)
    goto LABEL_11;
  v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonOutFmt(uint64_t result, int a2)
{
  unsigned int v2;

  if ((a2 - 3) < 9)
    goto LABEL_2;
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12)
      ZinAssertImpl("Error: E4M3 is not supported");
    goto LABEL_12;
  }
LABEL_2:
  v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

BOOL ZinAneTd<19u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a1 + 584) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 304));
}

BOOL ZinAneTd<19u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a1 + 584) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 296));
}

BOOL ZinAneTd<19u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 216), &v4);
  if (result)
    *(_DWORD *)(a1 + 568) = *(_DWORD *)(a1 + 568) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 232));
}

BOOL ZinAneTd<19u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 240));
}

BOOL ZinAneTd<19u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 224));
}

BOOL ZinAneTd<19u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 128), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 136), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFFC0 | v4 & 0x3F;
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 168), &v4);
  if (result)
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFFFE0 | v4 & 0x1F;
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 120), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 112), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFE7FFF | ((v4 & 3) << 15);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 144), &v4);
  if (result)
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFFF3F | ((v4 & 3) << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 88), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xCFFFFFFF | ((v4 & 3) << 28);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 80), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0x3FFFFFFF | (v4 << 30);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 160), &v4);
  if (result)
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFF9FFF | ((v4 & 3) << 13);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 104), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 96), &v4);
  if (result)
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 152), &v4);
  if (result)
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 200), &v4);
  if (result)
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(a1 + 552) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 24), &v4);
  if (result)
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 520) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 16), &v4);
  if (result)
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 32), &v4);
  if (result)
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 40), &v4);
  if (result)
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 64), &v4);
  if (result)
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 56), &v4);
  if (result)
    *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 72), &v4);
  if (result)
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 48), &v4);
  if (result)
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFE0000 | v4 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<19u>::SetUnicastEn(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000;
  else
    v2 = 0;
  *(_DWORD *)(result + 564) = *(_DWORD *)(result + 564) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(_QWORD *)(a1 + 1464) + 208), &v4);
  if (result)
    *(_WORD *)(a1 + 566) = v4;
  return result;
}

void ZinAneTd<8u>::SetPEIndexMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid Index Mode", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding(ZinUAneCodegenUtil *this, const ZinANELayer *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t result;
  uint64_t L2RdSymbol;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t Hal;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v2 = (int)a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (int)a2);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
  (*(void (**)(uint64_t *__return_ptr, ZinUAneCodegenUtil *))(*(_QWORD *)this + 352))(&v20, this);
  v6 = v2 != 0;
  v7 = *(_QWORD *)(ZinMirL2Config::GetTileSrc(*((_QWORD *)this + 33) + 120, v6) + 8);
  v19 = 0;
  if (ZinTensorFormatGetSize(*(_DWORD *)(v5 + 88), &v19))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding();
      return 0;
    }
  }
  else
  {
    L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)this + 33), v6);
    v10 = *(_QWORD *)(L2RdSymbol + 384);
    v11 = *(_QWORD *)(L2RdSymbol + 16);
    v12 = v20;
    v13 = v21;
    v14 = v19;
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
    v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 632);
    v17 = v12 * v14 + (int)v7 % (int)v16 * v13;
    v18 = v11 % (int)v16;
    if (v17 > v18)
      v17 += (v10 - 1) * v16 + (v10 - 1) * v16 * ((v17 + ~v18) / (int)v16);
    return (v17 + (v7 - (int)v7 % (int)v16) * v13);
  }
  return result;
}

void ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Couldn't get size of tensor format\n", v0, 2u);
}

BOOL ZinHWEnumsUtils::IsHWKernelFormatFloat(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

uint64_t ZinIrReductionUnitInfo::TensorDimensions(ZinIrReductionUnitInfo *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  *((_QWORD *)a3 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 0x10) != 0)
  {
    *((_QWORD *)a3 + 3) = 1;
    v5 = *((_QWORD *)this + 12);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  *((_QWORD *)a3 + 2) = 1;
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
LABEL_11:
    *((_QWORD *)a3 + 4) = 1;
    if ((*((_QWORD *)this + 12) & 1) == 0)
      return 0;
    goto LABEL_6;
  }
LABEL_10:
  *((_QWORD *)a3 + 1) = 1;
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    *(_QWORD *)a3 = 1;
  return 0;
}

uint64_t ZinIrOpt::ReverseCSEDuplicateNode(uint64_t **a1, uint64_t a2, ZinIrOpLayerGraph *a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v11;
  ZinIrTensor *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  int v32;
  ZinIrOpLayer *v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  ZinIrOpLayerGraph **v37;
  ZinIrOpLayerGraph **v38;
  ZinIrOpLayerGraph **v39;
  uint64_t v41;
  __int128 __p;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD v51[2];

  v51[1] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)*((_QWORD *)a3 + 11);
  if (*((_QWORD *)a3 + 12) - (_QWORD)v4 != 8)
  {
    LOBYTE(v32) = 0;
    return v32 & 1;
  }
  v41 = *v4;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v8 = *(_QWORD **)a4;
  v9 = *(_QWORD **)(a4 + 8);
  if (*(_QWORD **)a4 == v9)
  {
    v30 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (*v8)
      {
        v12 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(&__p, a2, 0);
        ZinIrTensor::CreateTensor(v12, &__p, (uint64_t *)&v46);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v44 = (uint64_t)v46;
        v45 = (std::__shared_weak_count *)v47;
        if (v47)
        {
          v13 = (unint64_t *)(v47 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, 1);
        v15 = (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t *, __int128 *))(*(_QWORD *)a3 + 176))(a3, &v44, &__p);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v16 = v45;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (std::__shared_weak_count *)v47;
        if (v47)
        {
          v20 = (unint64_t *)(v47 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v11 = v49;
      }
      else
      {
        v15 = 0;
      }
      if (v11 >= v50)
      {
        v22 = ((char *)v11 - (_BYTE *)v48) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v23 = ((char *)v50 - (_BYTE *)v48) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if ((unint64_t)((char *)v50 - (_BYTE *)v48) >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v50, v24);
        else
          v25 = 0;
        v26 = (uint64_t *)&v25[8 * v22];
        *v26 = v15;
        v11 = v26 + 1;
        v28 = (char *)v48;
        v27 = (char *)v49;
        if (v49 != v48)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v26 = v29;
          }
          while (v27 != v28);
          v27 = (char *)v48;
        }
        v48 = v26;
        v49 = v11;
        v50 = (uint64_t *)&v25[8 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v11++ = v15;
      }
      v49 = v11;
      ++v8;
    }
    while (v8 != v9);
    v30 = (uint64_t *)v48;
    if (v11 != v48)
    {
      v31 = 0;
      LOBYTE(v32) = 1;
      do
      {
        v33 = (ZinIrOpLayer *)v30[v31];
        if (v33)
        {
          v51[0] = a3;
          v46 = v51;
          v47 = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v46);
          v34 = ZinIrOpLayerGraph::AddNode(a1, v33, (ZinIrOpLayer ***)&__p);
          *(_QWORD *)&__p = &unk_24C02BB18;
          if (*((_QWORD *)&__p + 1))
          {
            v43 = *((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          v35 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v41, *((_QWORD *)v48 + v31), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v36 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v31);
          v37 = *(ZinIrOpLayerGraph ***)(v36 + 88);
          v38 = *(ZinIrOpLayerGraph ***)(v36 + 96);
          v39 = v37;
          if (v37 != v38)
          {
            while (*v39 != a3)
            {
              if (++v39 == v38)
              {
                v39 = *(ZinIrOpLayerGraph ***)(v36 + 96);
                break;
              }
            }
          }
          v32 = v34 & v35 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a1, a3, *((ZinIrOpLayer **)v48 + v31), v36, 0xFFFFFFFFFFFFFFFFLL, v39 - v37, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
          v30 = (uint64_t *)v48;
          v11 = v49;
        }
        ++v31;
      }
      while (v31 < v11 - v30);
      goto LABEL_56;
    }
  }
  LOBYTE(v32) = 1;
LABEL_56:
  if (*((_QWORD *)a3 + 15) == *((_QWORD *)a3 + 14))
  {
    LOBYTE(v32) = v32 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, a3, 0);
    v30 = (uint64_t *)v48;
  }
  if (v30)
  {
    v49 = v30;
    operator delete(v30);
  }
  return v32 & 1;
}

void sub_206FA69A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::ReverseCSEDuplicateNodeFanInPattern(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, ZinIrOpLayer *a5, uint64_t **a6)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v12;
  ZinIrTensor *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  ZinIrOpLayer *v33;
  int v34;
  ZinIrOpLayer *v35;
  ZinIrOpLayer *v36;
  int inserted;
  int v38;
  _BOOL4 v39;
  _OWORD v43[2];
  int v44;
  __int128 __p;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD v54[3];

  v54[1] = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v9 = *(_QWORD **)a3;
  v8 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 == v8)
    goto LABEL_53;
  v12 = 0;
  do
  {
    if (*v9)
    {
      v13 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v9 + 32))(*v9, 0, 0);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(&__p, a2, 0);
      ZinIrTensor::CreateTensor(v13, &__p, (uint64_t *)&v49);
      if (SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      v47 = (uint64_t)v49;
      v48 = (std::__shared_weak_count *)v50;
      if (v50)
      {
        v14 = (unint64_t *)(v50 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, 1);
      v16 = ((uint64_t (*)(uint64_t **, uint64_t *, __int128 *))(*a6)[22])(a6, &v47, &__p);
      if (SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      v17 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v50;
      if (v50)
      {
        v21 = (unint64_t *)(v50 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v12 = v52;
    }
    else
    {
      v16 = 0;
    }
    if (v12 >= v53)
    {
      v23 = ((char *)v12 - (_BYTE *)v51) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v24 = ((char *)v53 - (_BYTE *)v51) >> 2;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if ((unint64_t)((char *)v53 - (_BYTE *)v51) >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v25);
      else
        v26 = 0;
      v27 = (uint64_t *)&v26[8 * v23];
      *v27 = v16;
      v12 = v27 + 1;
      v29 = (char *)v51;
      v28 = (char *)v52;
      if (v52 != v51)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v27 = v30;
        }
        while (v28 != v29);
        v28 = (char *)v51;
      }
      v51 = v27;
      v52 = v12;
      v53 = (uint64_t *)&v26[8 * v25];
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v12++ = v16;
    }
    v52 = v12;
    ++v9;
  }
  while (v9 != v8);
  v31 = v51;
  if ((char *)v12 - (_BYTE *)v51 != *(_QWORD *)(a3 + 8) - *(_QWORD *)a3)
    ZinAssertImpl("There should be one clone layer for each fan in branch.");
  if (v12 == v51)
  {
LABEL_53:
    v34 = 1;
  }
  else
  {
    v32 = 0;
    v33 = a5;
    v34 = 1;
    do
    {
      v35 = (ZinIrOpLayer *)v31[v32];
      if (v35)
      {
        v36 = *(ZinIrOpLayer **)(*(_QWORD *)a3 + 8 * v32);
        if (!v36)
          ZinAssertImpl("preceding layer should not be nullptr if the corresponding clone layer exist.");
        if (*a4 != a4[1] && *(_QWORD *)(*a4 + 8 * v32))
          v33 = *(ZinIrOpLayer **)(*a4 + 8 * v32);
        v54[0] = a6;
        v49 = v54;
        v50 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v49);
        inserted = ZinIrOpLayerGraph::InsertNodeBetween(a1, v35, v36, v33, (ZinIrOpLayer ***)&__p);
        *(_QWORD *)&__p = &unk_24C02BB18;
        if (*((_QWORD *)&__p + 1))
        {
          v46 = *((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        v34 &= inserted;
        v31 = v51;
        v12 = v52;
      }
      ++v32;
    }
    while (v32 < v12 - v31);
  }
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v38 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a6, a5, v43);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v43);
  v39 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a6, 0);
  if (v51)
  {
    v52 = (uint64_t *)v51;
    operator delete(v51);
  }
  return v34 & v38 & v39;
}

void sub_206FA6E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ReverseCSE(_QWORD *a1, uint64_t a2, _BYTE *a3, int a4)
{
  void *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t i;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t j;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  void **v83;
  __int128 v84;
  void **v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  uint64_t k;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t m;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  uint64_t **v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v145;
  int v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  _QWORD v153[2];
  __int128 v154;
  void ***v155;
  void ***v156;
  _OWORD *v157;
  __int128 v158;
  uint64_t v159;
  _QWORD v160[2];
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  _QWORD v166[2];
  __int128 v167;
  __int128 v168;
  _OWORD *v169;
  void **v170;
  void **v171;
  void **v172;
  char *v173;
  uint64_t v174;
  _OWORD *v175;
  _OWORD *v176;
  _OWORD *v177;
  _OWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  char **v186;
  char v187;
  _BYTE v188[24];
  _BYTE *v189;
  _QWORD v190[3];
  _QWORD *v191;
  void *v192;
  uint64_t v193;
  char *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[32];
  int v198;
  void *v199;
  std::__shared_weak_count *v200;
  char *v201;
  _QWORD v202[3];
  _QWORD *v203;
  _BYTE v204[32];
  int v205;
  void *__p;
  char v207;
  char v208;
  void *v209;
  void *v210;
  void **v211;
  __int128 v212;
  __int128 v213;
  int v214;
  _BYTE v215[88];
  uint64_t v216;
  uint64_t (**v217)(ZinLinearPattern *__hidden);
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[3];
  _QWORD *v221;
  void *v222[2];
  __int128 v223;
  uint64_t (*v224)();
  _OWORD *v225;
  _BYTE v226[32];
  int v227;
  _QWORD v228[3];
  _QWORD *v229;
  __int128 v230;
  _OWORD v231[2];
  _QWORD v232[3];
  _QWORD *v233;
  void **v234[23];
  _BYTE v235[24];
  _QWORD v236[3];
  uint64_t (**v237)(ZinLinearPattern *__hidden);
  _BYTE v238[24];
  _BYTE v239[24];
  uint64_t (**v240)(ZinLinearPattern *__hidden);
  uint64_t v241;
  _BYTE v242[24];
  _BYTE *v243;
  _QWORD v244[3];
  _QWORD *v245;
  _QWORD v246[3];
  _QWORD *v247;
  _QWORD v248[3];
  _QWORD *v249;
  void *v250;
  uint64_t v251;
  char *v252;
  void *v253;
  void *v254;
  void **v255;
  __int128 v256;
  __int128 v257;
  int v258;
  void *v259;
  uint64_t v260;
  void **v261;
  void *v262;
  uint64_t (*v263)(uint64_t);
  void **v264;
  __int128 v265;
  __int128 v266;
  int v267;
  void *v268;
  char v269;
  char v270;
  void *v271;
  uint64_t (*v272)(uint64_t);
  void **v273;
  __int128 v274;
  __int128 v275;
  int v276;
  _QWORD v277[3];
  _QWORD v278[3];
  _QWORD *v279;
  _BYTE v280[32];
  uint64_t v281;
  uint64_t v282;
  _QWORD v283[23];
  _BYTE v284[24];
  _BYTE v285[24];
  _QWORD v286[3];
  _QWORD *v287;
  void *v288;
  uint64_t v289;
  char *v290;
  void *v291;
  uint64_t (*v292)(uint64_t);
  void **v293;
  __int128 v294;
  __int128 v295;
  int v296;
  _QWORD v297[3];
  _QWORD *v298;
  _QWORD v299[3];
  _QWORD *v300;
  uint64_t v301;

  v301 = *MEMORY[0x24BDAC8D0];
  v185 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v268, "to_duplicate");
  v271 = &unk_24C0537D8;
  v272 = ZinIrOpt::IsView;
  v273 = &v271;
  v274 = 0u;
  v275 = 0u;
  v276 = 1065353216;
  v290 = 0;
  v288 = 0;
  v289 = 0;
  __p = &v288;
  v207 = 0;
  v288 = operator new(0x60uLL);
  v289 = (uint64_t)v288;
  v290 = (char *)v288 + 96;
  v146 = a4;
  v289 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v290, (uint64_t)&v268, (uint64_t)v277, (uint64_t)v288);
  v192 = &v288;
  std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
  v209 = &unk_24C0537D8;
  v210 = ZinIrOpt::IsMatmult;
  v211 = &v209;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v261 = 0;
  v259 = 0;
  v260 = 0;
  v250 = &v259;
  LOBYTE(v251) = 0;
  v259 = operator new(0x60uLL);
  v260 = (uint64_t)v259;
  v261 = (void **)((char *)v259 + 96);
  v260 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v261, (uint64_t)&__p, (uint64_t)v215, (uint64_t)v259);
  v193 = (uint64_t)&v259;
  v299[0] = &unk_24C053A98;
  v299[1] = ZinIrOpt::IsQualified;
  v300 = v299;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v234, &v192, a2, 0, v299, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v234, &v199);
  v7 = v199;
  v8 = v200;
  v222[0] = v199;
  v222[1] = v200;
  v200 = 0;
  v199 = 0;
  v183 = 0;
  v184 = 0;
  v182 = 0;
  v250 = &v182;
  LOBYTE(v251) = 0;
  v9 = operator new(0x10uLL);
  v182 = v9;
  v183 = v9;
  v184 = v9 + 2;
  *v9 = v7;
  v9[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v183 = v9 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v222);
  v12 = v200;
  if (v200)
  {
    v13 = (unint64_t *)&v200->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v234[0] = (void **)&off_24C022540;
  v250 = v239;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  v236[0] = &off_24C01BCC8;
  v250 = v238;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  ZinPattern::~ZinPattern((ZinPattern *)v236);
  v250 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v15 = v300;
  if (v300 == v299)
  {
    v16 = 4;
    v15 = v299;
  }
  else
  {
    if (!v300)
      goto LABEL_14;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_14:
  v250 = &v259;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v212);
  v17 = v211;
  if (v211 == &v209)
  {
    v18 = 4;
    v17 = &v209;
  }
  else
  {
    if (!v211)
      goto LABEL_19;
    v18 = 5;
  }
  (*((void (**)(void))*v17 + v18))();
LABEL_19:
  if (v208 < 0)
    operator delete(__p);
  __p = &v288;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v274);
  v19 = v273;
  if (v273 == &v271)
  {
    v20 = 4;
    v19 = &v271;
  }
  else
  {
    if (!v273)
      goto LABEL_26;
    v20 = 5;
  }
  (*((void (**)(void))*v19 + v20))();
LABEL_26:
  if (v270 < 0)
    operator delete(v268);
  std::string::basic_string[abi:ne180100]<0>(&v268, "to_duplicate");
  v271 = &unk_24C0537D8;
  v272 = ZinIrOpt::IsDeQuant;
  v273 = &v271;
  v274 = 0u;
  v275 = 0u;
  v276 = 1065353216;
  v290 = 0;
  v288 = 0;
  v289 = 0;
  __p = &v288;
  v207 = 0;
  v288 = operator new(0x60uLL);
  v289 = (uint64_t)v288;
  v290 = (char *)v288 + 96;
  v289 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v290, (uint64_t)&v268, (uint64_t)v277, (uint64_t)v288);
  v192 = &v288;
  std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
  v209 = &unk_24C0537D8;
  v210 = ZinIrOpt::IsAnyOp;
  v211 = &v209;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v261 = 0;
  v259 = 0;
  v260 = 0;
  v250 = &v259;
  LOBYTE(v251) = 0;
  v259 = operator new(0x60uLL);
  v260 = (uint64_t)v259;
  v261 = (void **)((char *)v259 + 96);
  v260 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v261, (uint64_t)&__p, (uint64_t)v215, (uint64_t)v259);
  v193 = (uint64_t)&v259;
  v297[0] = &unk_24C053A98;
  v297[1] = ZinIrOpt::IsQualified;
  v298 = v297;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v234, &v192, a2, 0, v297, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v234, &v199);
  v21 = v199;
  v22 = v200;
  v222[0] = v199;
  v222[1] = v200;
  v200 = 0;
  v199 = 0;
  v180 = 0;
  v181 = 0;
  v179 = 0;
  v250 = &v179;
  LOBYTE(v251) = 0;
  v23 = operator new(0x10uLL);
  v179 = v23;
  v180 = v23;
  v181 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v180 = v23 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v222);
  v26 = v200;
  if (v200)
  {
    v27 = (unint64_t *)&v200->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v234[0] = (void **)&off_24C022540;
  v250 = v239;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  v236[0] = &off_24C01BCC8;
  v250 = v238;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  ZinPattern::~ZinPattern((ZinPattern *)v236);
  v250 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v29 = v298;
  if (v298 == v297)
  {
    v30 = 4;
    v29 = v297;
  }
  else
  {
    if (!v298)
      goto LABEL_41;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_41:
  v250 = &v259;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v212);
  v31 = v211;
  if (v211 == &v209)
  {
    v32 = 4;
    v31 = &v209;
  }
  else
  {
    if (!v211)
      goto LABEL_46;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_46:
  if (v208 < 0)
    operator delete(__p);
  __p = &v288;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v274);
  v33 = v273;
  if (v273 == &v271)
  {
    v34 = 4;
    v33 = &v271;
  }
  else
  {
    if (!v273)
      goto LABEL_53;
    v34 = 5;
  }
  (*((void (**)(void))*v33 + v34))();
LABEL_53:
  if (v270 < 0)
    operator delete(v268);
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
  v209 = &unk_24C0537D8;
  v210 = ZinIrOpt::IsBroadcast;
  v211 = &v209;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v201 = 0;
  v199 = 0;
  v200 = 0;
  v268 = &v199;
  v269 = 0;
  v199 = operator new(0x60uLL);
  v200 = (std::__shared_weak_count *)v199;
  v201 = (char *)v199 + 96;
  v200 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v201, (uint64_t)&__p, (uint64_t)v215, (uint64_t)v199);
  *(_QWORD *)&v164 = &v199;
  std::string::basic_string[abi:ne180100]<0>(&v288, "consumers");
  v291 = &unk_24C0537D8;
  v292 = ZinIrOpt::IsScaledEW;
  v293 = &v291;
  v294 = 0u;
  v295 = 0u;
  v296 = 1065353216;
  v194 = 0;
  v192 = 0;
  v193 = 0;
  v268 = &v192;
  v269 = 0;
  v192 = operator new(0x60uLL);
  v193 = (uint64_t)v192;
  v194 = (char *)v192 + 96;
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v194, (uint64_t)&v288, (uint64_t)v297, (uint64_t)v192);
  *((_QWORD *)&v164 + 1) = &v192;
  v286[0] = &unk_24C053A98;
  v286[1] = ZinIrOpt::IsQualified;
  v287 = v286;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v234, &v164, a2, 0, v286, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v234, &v168);
  *(_OWORD *)v222 = v168;
  v168 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v259, "to_duplicate");
  v262 = &unk_24C0537D8;
  v263 = ZinIrOpt::IsDeQuant;
  v264 = &v262;
  v265 = 0u;
  v266 = 0u;
  v267 = 1065353216;
  *(_QWORD *)&v231[0] = 0;
  v230 = 0uLL;
  v250 = &v230;
  LOBYTE(v251) = 0;
  *(_QWORD *)&v230 = operator new(0x60uLL);
  *((_QWORD *)&v230 + 1) = v230;
  *(_QWORD *)&v231[0] = v230 + 96;
  v145 = a1;
  *((_QWORD *)&v230 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)v231, (uint64_t)&v259, (uint64_t)&v268, v230);
  *(_QWORD *)&v158 = &v230;
  std::string::basic_string[abi:ne180100]<0>(&v250, "consumers");
  v253 = &unk_24C0537D8;
  v254 = ZinIrOpt::IsAnyOp;
  v255 = &v253;
  v256 = 0u;
  v257 = 0u;
  v258 = 1065353216;
  v174 = 0;
  v175 = 0;
  v173 = 0;
  v170 = (void **)&v173;
  LOBYTE(v171) = 0;
  v173 = (char *)operator new(0x60uLL);
  v174 = (uint64_t)v173;
  v175 = v173 + 96;
  v174 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v175, (uint64_t)&v250, (uint64_t)&v259, (uint64_t)v173);
  *((_QWORD *)&v158 + 1) = &v173;
  v248[0] = &unk_24C053A98;
  v248[1] = ZinIrOpt::IsQualified;
  v249 = v248;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v268, &v158, a2, 0, v248, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v268, &v162);
  v223 = v162;
  v162 = 0uLL;
  v177 = 0;
  v178 = 0;
  v176 = 0;
  v170 = (void **)&v176;
  LOBYTE(v171) = 0;
  v35 = operator new(0x20uLL);
  v36 = 0;
  v176 = v35;
  v177 = v35;
  v178 = v35 + 2;
  do
  {
    v37 = *(_OWORD *)&v222[2 * v36];
    *v35 = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    ++v36;
    ++v35;
  }
  while (v36 != 2);
  v177 = v35;
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v222[i]);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v268 = &off_24C022540;
  v170 = (void **)v285;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&v170);
  v283[0] = &off_24C01BCC8;
  v170 = (void **)v284;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v170);
  ZinPattern::~ZinPattern((ZinPattern *)v283);
  v170 = (void **)&v281;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v170);
  ZinPattern::~ZinPattern((ZinPattern *)&v268);
  v44 = v249;
  if (v249 == v248)
  {
    v45 = 4;
    v44 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_72;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_72:
  v170 = (void **)&v173;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v170);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v256);
  v46 = v255;
  if (v255 == &v253)
  {
    v47 = 4;
    v46 = &v253;
  }
  else
  {
    if (!v255)
      goto LABEL_77;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_77:
  if (SHIBYTE(v252) < 0)
    operator delete(v250);
  v250 = &v230;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v265);
  v48 = v264;
  if (v264 == &v262)
  {
    v49 = 4;
    v48 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_84;
    v49 = 5;
  }
  (*((void (**)(void))*v48 + v49))();
LABEL_84:
  if (SHIBYTE(v261) < 0)
    operator delete(v259);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v234[0] = (void **)&off_24C022540;
  v268 = v239;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  v236[0] = &off_24C01BCC8;
  v268 = v238;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v236);
  v268 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v53 = v287;
  if (v287 == v286)
  {
    v54 = 4;
    v53 = v286;
  }
  else
  {
    if (!v287)
      goto LABEL_96;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_96:
  v268 = &v192;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v294);
  v55 = v293;
  if (v293 == &v291)
  {
    v56 = 4;
    v55 = &v291;
  }
  else
  {
    if (!v293)
      goto LABEL_101;
    v56 = 5;
  }
  (*((void (**)(void))*v55 + v56))();
LABEL_101:
  if (SHIBYTE(v290) < 0)
    operator delete(v288);
  v268 = &v199;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v212);
  v57 = v211;
  if (v211 == &v209)
  {
    v58 = 4;
    v57 = &v209;
  }
  else
  {
    if (!v211)
      goto LABEL_108;
    v58 = 5;
  }
  (*((void (**)(void))*v57 + v58))();
LABEL_108:
  if (v208 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
  v209 = &unk_24C0537D8;
  v210 = ZinIrOpt::IsPreScale;
  v211 = &v209;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  v201 = 0;
  v199 = 0;
  v200 = 0;
  v268 = &v199;
  v269 = 0;
  v199 = operator new(0x60uLL);
  v200 = (std::__shared_weak_count *)v199;
  v201 = (char *)v199 + 96;
  v200 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v201, (uint64_t)&__p, (uint64_t)v215, (uint64_t)v199);
  *(_QWORD *)&v162 = &v199;
  std::string::basic_string[abi:ne180100]<0>(&v288, "consumers");
  v291 = &unk_24C0537D8;
  v292 = ZinIrOpt::IsScaledEW;
  v293 = &v291;
  v294 = 0u;
  v295 = 0u;
  v296 = 1065353216;
  v194 = 0;
  v192 = 0;
  v193 = 0;
  v268 = &v192;
  v269 = 0;
  v192 = operator new(0x60uLL);
  v193 = (uint64_t)v192;
  v194 = (char *)v192 + 96;
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v194, (uint64_t)&v288, (uint64_t)v297, (uint64_t)v192);
  *((_QWORD *)&v162 + 1) = &v192;
  v246[0] = &unk_24C053A98;
  v246[1] = ZinIrOpt::IsQualified;
  v247 = v246;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v234, &v162, a2, 0, v246, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v234, &v164);
  *(_OWORD *)v222 = v164;
  v164 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v259, "to_duplicate");
  v262 = &unk_24C0537D8;
  v263 = ZinIrOpt::IsDeQuant;
  v264 = &v262;
  v265 = 0u;
  v266 = 0u;
  v267 = 1065353216;
  *(_QWORD *)&v231[0] = 0;
  v230 = 0uLL;
  v250 = &v230;
  LOBYTE(v251) = 0;
  *(_QWORD *)&v230 = operator new(0x60uLL);
  *((_QWORD *)&v230 + 1) = v230;
  *(_QWORD *)&v231[0] = v230 + 96;
  *((_QWORD *)&v230 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)v231, (uint64_t)&v259, (uint64_t)&v268, v230);
  v155 = (void ***)&v230;
  std::string::basic_string[abi:ne180100]<0>(&v250, "consumers");
  v253 = &unk_24C0537D8;
  v254 = ZinIrOpt::IsAnyOp;
  v255 = &v253;
  v256 = 0u;
  v257 = 0u;
  v258 = 1065353216;
  v171 = 0;
  v172 = 0;
  v170 = 0;
  *(_QWORD *)&v168 = &v170;
  BYTE8(v168) = 0;
  v170 = (void **)operator new(0x60uLL);
  v171 = v170;
  v172 = v170 + 12;
  v171 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v172, (uint64_t)&v250, (uint64_t)&v259, (uint64_t)v170);
  v156 = &v170;
  v244[0] = &unk_24C053A98;
  v244[1] = ZinIrOpt::IsQualified;
  v245 = v244;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v268, &v155, a2, 0, v244, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v268, &v158);
  v223 = v158;
  v158 = 0uLL;
  v174 = 0;
  v175 = 0;
  v173 = 0;
  *(_QWORD *)&v168 = &v173;
  BYTE8(v168) = 0;
  v59 = operator new(0x20uLL);
  v60 = 0;
  v173 = (char *)v59;
  v174 = (uint64_t)v59;
  v175 = v59 + 2;
  do
  {
    v61 = *(_OWORD *)&v222[2 * v60];
    *v59 = v61;
    if (*((_QWORD *)&v61 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    ++v60;
    ++v59;
  }
  while (v60 != 2);
  v174 = (uint64_t)v59;
  for (j = 2; j != -2; j -= 2)
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v222[j]);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v268 = &off_24C022540;
  *(_QWORD *)&v168 = v285;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
  v283[0] = &off_24C01BCC8;
  *(_QWORD *)&v168 = v284;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
  ZinPattern::~ZinPattern((ZinPattern *)v283);
  *(_QWORD *)&v168 = &v281;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
  ZinPattern::~ZinPattern((ZinPattern *)&v268);
  v68 = v245;
  if (v245 == v244)
  {
    v69 = 4;
    v68 = v244;
  }
  else
  {
    if (!v245)
      goto LABEL_127;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_127:
  *(_QWORD *)&v168 = &v170;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v256);
  v70 = v255;
  if (v255 == &v253)
  {
    v71 = 4;
    v70 = &v253;
  }
  else
  {
    if (!v255)
      goto LABEL_132;
    v71 = 5;
  }
  (*((void (**)(void))*v70 + v71))();
LABEL_132:
  if (SHIBYTE(v252) < 0)
    operator delete(v250);
  v250 = &v230;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v265);
  v72 = v264;
  if (v264 == &v262)
  {
    v73 = 4;
    v72 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_139;
    v73 = 5;
  }
  (*((void (**)(void))*v72 + v73))();
LABEL_139:
  if (SHIBYTE(v261) < 0)
    operator delete(v259);
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v234[0] = (void **)&off_24C022540;
  v268 = v239;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  v236[0] = &off_24C01BCC8;
  v268 = v238;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v236);
  v268 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v77 = v247;
  if (v247 == v246)
  {
    v78 = 4;
    v77 = v246;
  }
  else
  {
    if (!v247)
      goto LABEL_151;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_151:
  v268 = &v192;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v294);
  v79 = v293;
  if (v293 == &v291)
  {
    v80 = 4;
    v79 = &v291;
  }
  else
  {
    if (!v293)
      goto LABEL_156;
    v80 = 5;
  }
  (*((void (**)(void))*v79 + v80))();
LABEL_156:
  if (SHIBYTE(v290) < 0)
    operator delete(v288);
  v268 = &v199;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v212);
  v81 = v211;
  if (v211 == &v209)
  {
    v82 = 4;
    v81 = &v209;
  }
  else
  {
    if (!v211)
      goto LABEL_163;
    v82 = 5;
  }
  (*((void (**)(void))*v81 + v82))();
LABEL_163:
  if (v208 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v268, "producers");
  v271 = &unk_24C0537D8;
  v272 = ZinIrOpt::IsMatmult;
  v273 = &v271;
  LODWORD(v164) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v274, (int *)&v164, 1);
  std::string::basic_string[abi:ne180100]<0>(v277, "optional_mem_movements");
  v278[0] = &unk_24C0537D8;
  v278[1] = ZinIrOpt::IsTranspose;
  v279 = v278;
  LODWORD(v162) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v280, (int *)&v162, 1);
  v251 = 0;
  v250 = 0;
  v252 = 0;
  __p = &v250;
  v207 = 0;
  v250 = operator new(0xC0uLL);
  v251 = (uint64_t)v250;
  v252 = (char *)v250 + 192;
  v251 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v252, (uint64_t)&v268, (uint64_t)&v282, (uint64_t)v250);
  v259 = &v250;
  std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
  v209 = &unk_24C0537D8;
  v210 = ZinIrOpt::IsConcat;
  v211 = &v209;
  v212 = 0u;
  v213 = 0u;
  v214 = 1065353216;
  *(_QWORD *)&v223 = 0;
  v222[0] = 0;
  v222[1] = 0;
  v288 = v222;
  LOBYTE(v289) = 0;
  v222[0] = operator new(0x60uLL);
  v222[1] = v222[0];
  *(_QWORD *)&v223 = (char *)v222[0] + 96;
  v222[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v223, (uint64_t)&__p, (uint64_t)v215, (uint64_t)v222[0]);
  v260 = (uint64_t)v222;
  std::string::basic_string[abi:ne180100]<0>(&v288, "to_duplicate");
  v291 = &unk_24C0537D8;
  v292 = ZinIrOpt::IsPreScale;
  v293 = &v291;
  LODWORD(v158) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v294, (int *)&v158, 1);
  v200 = 0;
  v199 = 0;
  v201 = 0;
  v192 = &v199;
  LOBYTE(v193) = 0;
  v199 = operator new(0x60uLL);
  v200 = (std::__shared_weak_count *)v199;
  v201 = (char *)v199 + 96;
  v200 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v201, (uint64_t)&v288, (uint64_t)v297, (uint64_t)v199);
  v83 = &v262;
  v261 = &v199;
  v264 = 0;
  v232[0] = &unk_24C053A98;
  v232[1] = ZinIrOpt::IsSameFormat;
  v233 = v232;
  ZinVariableToOnePattern::ZinVariableToOnePattern(v234, &v259, a2, 0, v232, 0);
  std::allocate_shared[abi:ne180100]<ZinVariableToOnePattern,std::allocator<ZinVariableToOnePattern>,ZinVariableToOnePattern,void>((const ZinVariableToOnePattern *)v234, &v168);
  v84 = v168;
  v230 = v168;
  v168 = 0uLL;
  v171 = 0;
  v172 = 0;
  v170 = 0;
  v192 = &v170;
  LOBYTE(v193) = 0;
  v85 = (void **)operator new(0x10uLL);
  v170 = v85;
  v171 = v85;
  v172 = v85 + 2;
  *(_OWORD *)v85 = v84;
  if (*((_QWORD *)&v84 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  v171 = v85 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v234[0] = (void **)&off_24C022A50;
  v91 = v243;
  if (v243 == v242)
  {
    v92 = 4;
    v91 = v242;
  }
  else
  {
    if (!v243)
      goto LABEL_178;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_178:
  v240 = &off_24C01BCC8;
  v192 = &v241;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  ZinPattern::~ZinPattern((ZinPattern *)&v240);
  v237 = &off_24C01BCC8;
  v192 = v239;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  ZinPattern::~ZinPattern((ZinPattern *)&v237);
  v192 = v236;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  v192 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v93 = v233;
  if (v233 == v232)
  {
    v94 = 4;
    v93 = v232;
  }
  else
  {
    if (!v233)
      goto LABEL_183;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_183:
  if (v264 == &v262)
  {
    v95 = 4;
  }
  else
  {
    if (!v264)
      goto LABEL_188;
    v95 = 5;
    v83 = v264;
  }
  (*((void (**)(void **))*v83 + v95))(v83);
LABEL_188:
  v192 = &v199;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v294);
  v96 = v293;
  if (v293 == &v291)
  {
    v97 = 4;
    v96 = &v291;
  }
  else
  {
    if (!v293)
      goto LABEL_193;
    v97 = 5;
  }
  (*((void (**)(void))*v96 + v97))();
LABEL_193:
  if (SHIBYTE(v290) < 0)
    operator delete(v288);
  v288 = v222;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v212);
  v98 = v211;
  if (v211 == &v209)
  {
    v99 = 4;
    v98 = &v209;
    goto LABEL_199;
  }
  if (v211)
  {
    v99 = 5;
LABEL_199:
    (*((void (**)(void))*v98 + v99))();
  }
  if (v208 < 0)
    operator delete(__p);
  __p = &v250;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (k = 0; k != -24; k -= 12)
  {
    v101 = (char *)&v268 + k * 8;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v280[k * 8]);
    v102 = *(_QWORD **)&v280[k * 8 - 8];
    if (&v278[k] == v102)
    {
      v102 = v101 + 120;
      v103 = 4;
    }
    else
    {
      if (!v102)
        goto LABEL_208;
      v103 = 5;
    }
    (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_208:
    if (SHIBYTE(v277[k + 2]) < 0)
      operator delete(*((void **)v101 + 12));
  }
  std::string::basic_string[abi:ne180100]<0>(&v288, "to_duplicate");
  v291 = &unk_24C0537D8;
  v292 = ZinIrOpt::IsPreScale;
  v293 = &v291;
  v294 = 0u;
  v295 = 0u;
  v296 = 1065353216;
  v165 = 0;
  v164 = 0uLL;
  v268 = &v164;
  v269 = 0;
  *(_QWORD *)&v164 = operator new(0x60uLL);
  *((_QWORD *)&v164 + 1) = v164;
  v165 = v164 + 96;
  *((_QWORD *)&v164 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v165, (uint64_t)&v288, (uint64_t)v297, v164);
  v166[0] = &v164;
  std::string::basic_string[abi:ne180100]<0>(&v259, "consumers");
  v262 = &unk_24C0537D8;
  v263 = ZinIrOpt::IsScaledEW;
  v264 = &v262;
  v265 = 0u;
  v266 = 0u;
  v267 = 1065353216;
  v163 = 0;
  v162 = 0uLL;
  v268 = &v162;
  v269 = 0;
  *(_QWORD *)&v162 = operator new(0x60uLL);
  *((_QWORD *)&v162 + 1) = v162;
  v163 = v162 + 96;
  *((_QWORD *)&v162 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v163, (uint64_t)&v259, (uint64_t)&v268, v162);
  v166[1] = &v162;
  v228[0] = &unk_24C053A98;
  v228[1] = ZinIrOpt::IsQualified;
  v229 = v228;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v234, v166, a2, 0, v228, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v234, &v167);
  v230 = v167;
  v167 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v250, "to_duplicate");
  v253 = &unk_24C0537D8;
  v254 = ZinIrOpt::IsDeQuant;
  v255 = &v253;
  v256 = 0u;
  v257 = 0u;
  v258 = 1065353216;
  v159 = 0;
  v158 = 0uLL;
  __p = &v158;
  v207 = 0;
  *(_QWORD *)&v158 = operator new(0x60uLL);
  *((_QWORD *)&v158 + 1) = v158;
  v159 = v158 + 96;
  *((_QWORD *)&v158 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v159, (uint64_t)&v250, (uint64_t)&v259, v158);
  v160[0] = &v158;
  std::string::basic_string[abi:ne180100]<0>(v222, "consumers");
  *((_QWORD *)&v223 + 1) = &unk_24C0537D8;
  v224 = ZinIrOpt::IsAnyOp;
  v225 = (__int128 *)((char *)&v223 + 8);
  memset(v226, 0, sizeof(v226));
  v227 = 1065353216;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  __p = &v155;
  v207 = 0;
  v155 = (void ***)operator new(0x60uLL);
  v156 = v155;
  v157 = v155 + 12;
  v156 = (void ***)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v157, (uint64_t)v222, (uint64_t)v228, (uint64_t)v155);
  v160[1] = &v155;
  v220[0] = &unk_24C053A98;
  v220[1] = ZinIrOpt::IsQualified;
  v221 = v220;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v268, v160, a2, 0, v220, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v268, &v161);
  v231[0] = v161;
  v161 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v199, "to_duplicate");
  v202[0] = &unk_24C0537D8;
  v202[1] = ZinIrOpt::IsCHTranspose;
  v203 = v202;
  memset(v204, 0, sizeof(v204));
  v205 = 1065353216;
  v151 = 0;
  v152 = 0;
  v150 = 0;
  v192 = &v150;
  LOBYTE(v193) = 0;
  v150 = (char *)operator new(0x60uLL);
  v151 = (uint64_t)v150;
  v152 = v150 + 96;
  v151 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v152, (uint64_t)&v199, (uint64_t)&__p, (uint64_t)v150);
  v153[0] = &v150;
  std::string::basic_string[abi:ne180100]<0>(&v192, "consumers");
  v195[0] = &unk_24C0537D8;
  v195[1] = ZinIrOpt::IsAnyOp;
  v196 = v195;
  memset(v197, 0, sizeof(v197));
  v198 = 1065353216;
  v148 = 0;
  v149 = 0;
  v147 = 0;
  v186 = &v147;
  v187 = 0;
  v147 = (char *)operator new(0x60uLL);
  v148 = (uint64_t)v147;
  v149 = v147 + 96;
  v148 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v149, (uint64_t)&v192, (uint64_t)&v199, (uint64_t)v147);
  v153[1] = &v147;
  v190[0] = &unk_24C053A98;
  v190[1] = ZinIrOpt::IsQualified;
  v191 = v190;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&__p, v153, a2, 0, v190, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&__p, &v154);
  v231[1] = v154;
  v154 = 0uLL;
  v169 = 0;
  v168 = 0uLL;
  v186 = (char **)&v168;
  v187 = 0;
  v104 = operator new(0x30uLL);
  v105 = 0;
  *(_QWORD *)&v168 = v104;
  *((_QWORD *)&v168 + 1) = v104;
  v169 = v104 + 3;
  do
  {
    v106 = v231[v105 - 1];
    *v104 = v106;
    if (*((_QWORD *)&v106 + 1))
    {
      v107 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    ++v105;
    ++v104;
  }
  while (v105 != 3);
  *((_QWORD *)&v168 + 1) = v104;
  for (m = 2; m != -1; --m)
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v231[m - 1]);
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  __p = &off_24C022540;
  v186 = (char **)&v219;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  v217 = &off_24C01BCC8;
  v186 = (char **)&v218;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  ZinPattern::~ZinPattern((ZinPattern *)&v217);
  v186 = (char **)&v216;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  ZinPattern::~ZinPattern((ZinPattern *)&__p);
  v113 = v191;
  if (v191 == v190)
  {
    v114 = 4;
    v113 = v190;
LABEL_227:
    (*(void (**)(void))(*v113 + 8 * v114))();
  }
  else if (v191)
  {
    v114 = 5;
    goto LABEL_227;
  }
  v186 = &v147;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v197);
  v115 = v196;
  if (v196 == v195)
  {
    v117 = 4;
    v115 = v195;
    v116 = v145;
LABEL_232:
    (*(void (**)(void))(*v115 + 8 * v117))();
  }
  else
  {
    v116 = v145;
    if (v196)
    {
      v117 = 5;
      goto LABEL_232;
    }
  }
  if (SHIBYTE(v194) < 0)
    operator delete(v192);
  v192 = &v150;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v204);
  v118 = v203;
  if (v203 == v202)
  {
    v119 = 4;
    v118 = v202;
LABEL_239:
    (*(void (**)(void))(*v118 + 8 * v119))();
  }
  else if (v203)
  {
    v119 = 5;
    goto LABEL_239;
  }
  if (SHIBYTE(v201) < 0)
    operator delete(v199);
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v268 = &off_24C022540;
  __p = v285;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v283[0] = &off_24C01BCC8;
  __p = v284;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ZinPattern::~ZinPattern((ZinPattern *)v283);
  __p = &v281;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ZinPattern::~ZinPattern((ZinPattern *)&v268);
  v123 = v221;
  if (v221 == v220)
  {
    v124 = 4;
    v123 = v220;
LABEL_251:
    (*(void (**)(void))(*v123 + 8 * v124))();
  }
  else if (v221)
  {
    v124 = 5;
    goto LABEL_251;
  }
  __p = &v155;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v226);
  v125 = v225;
  if (v225 == (__int128 *)((char *)&v223 + 8))
  {
    v126 = 4;
    v125 = (_QWORD *)&v223 + 1;
LABEL_256:
    (*(void (**)(void))(*v125 + 8 * v126))();
  }
  else if (v225)
  {
    v126 = 5;
    goto LABEL_256;
  }
  if (SBYTE7(v223) < 0)
    operator delete(v222[0]);
  __p = &v158;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v256);
  v127 = v255;
  if (v255 == &v253)
  {
    v128 = 4;
    v127 = &v253;
LABEL_263:
    (*((void (**)(void))*v127 + v128))();
  }
  else if (v255)
  {
    v128 = 5;
    goto LABEL_263;
  }
  if (SHIBYTE(v252) < 0)
    operator delete(v250);
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v234[0] = (void **)&off_24C022540;
  v268 = v239;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  v236[0] = &off_24C01BCC8;
  v268 = v238;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v236);
  v268 = v235;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  ZinPattern::~ZinPattern((ZinPattern *)v234);
  v132 = v229;
  if (v229 == v228)
  {
    v133 = 4;
    v132 = v228;
LABEL_275:
    (*(void (**)(void))(*v132 + 8 * v133))();
  }
  else if (v229)
  {
    v133 = 5;
    goto LABEL_275;
  }
  v268 = &v162;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v265);
  v134 = v264;
  if (v264 == &v262)
  {
    v135 = 4;
    v134 = &v262;
LABEL_280:
    (*((void (**)(void))*v134 + v135))();
  }
  else if (v264)
  {
    v135 = 5;
    goto LABEL_280;
  }
  if (SHIBYTE(v261) < 0)
    operator delete(v259);
  v268 = &v164;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v294);
  v136 = v293;
  if (v293 == &v291)
  {
    v137 = 4;
    v136 = &v291;
LABEL_287:
    (*((void (**)(void))*v136 + v137))();
  }
  else if (v293)
  {
    v137 = 5;
    goto LABEL_287;
  }
  if (SHIBYTE(v290) < 0)
    operator delete(v288);
  v138 = &v182;
  switch(v146)
  {
    case 0:
      goto LABEL_294;
    case 1:
      goto LABEL_295;
    case 2:
      v138 = (uint64_t **)&v168;
      goto LABEL_294;
    case 3:
      v138 = (uint64_t **)&v176;
      goto LABEL_294;
    case 4:
      v138 = &v179;
LABEL_294:
      std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)&v173, *v138, v138[1], ((char *)v138[1] - (char *)*v138) >> 4);
      std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)&v170, 0, 0, 0);
LABEL_295:
      v189 = 0;
      v139 = operator new(0x20uLL);
      *v139 = &off_24C002938;
      v139[1] = &v173;
      v139[2] = &v185;
      v139[3] = &v170;
      v189 = v139;
      v140 = ZinIrControlFlowGraph::TraverseForward(v116, (uint64_t)v188, 1);
      v141 = v189;
      if (v189 == v188)
      {
        v142 = 4;
        v141 = v188;
      }
      else
      {
        if (!v189)
          goto LABEL_300;
        v142 = 5;
      }
      (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_300:
      if (v185)
        *a3 = 1;
      v234[0] = (void **)&v168;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      v234[0] = (void **)&v170;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      v234[0] = (void **)&v173;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      v234[0] = (void **)&v176;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      v234[0] = (void **)&v179;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      v234[0] = (void **)&v182;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v234);
      return v140;
    default:
      ZinAssertImpl("[ZinIrOpt::ReverseCSE] Invalid option (ir-optimize, pre-lowering, pre-hoisting, pre-fusion, post-fusion are allowed)");
  }
}

void sub_206FA94C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  char a70;
  uint64_t v70;
  char *v72;
  uint64_t v73;

  v72 = (char *)STACK[0x200];
  if (STACK[0x200] == v70)
  {
    v73 = 4;
    v72 = &a70;
  }
  else
  {
    if (!v72)
      goto LABEL_6;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
LABEL_6:
  STACK[0x598] = (unint64_t)&a47;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a51;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a54;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a57;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a60;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a63;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  _Unwind_Resume(a1);
}

BOOL ZinIrOpt::IsQualified(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "consumers");
  ZinPattern::GetMatch(a3, (unsigned __int8 *)__p, &v10);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v10 == v11)
  {
    v4 = 0;
    if (!v10)
      return v4 > 1;
    goto LABEL_9;
  }
  v4 = 0;
  v5 = v10;
  do
  {
    if (*v5++)
      ++v4;
  }
  while (v5 != v11);
  if (v10)
  {
LABEL_9:
    v11 = v10;
    operator delete(v10);
  }
  return v4 > 1;
}

void sub_206FAA0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::IsDeQuant(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 104) | 0x100u;
}

uint64_t ZinIrOpt::IsBroadcast(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 18) | 0x100u;
}

uint64_t ZinIrOpt::IsScaledEW(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 6) | 0x100u;
}

uint64_t ZinIrOpt::IsPreScale(uint64_t a1)
{
  uint64_t v1;
  ZinIrKernel *v2;
  _BOOL4 v3;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 64) + 8) == 2
    && (v2 = *(ZinIrKernel **)(v1 + 136)) != 0
    && ZinIrKernel::HasNoBiasNoWeightButSingularScale(v2, *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 1244));
  return v3 | 0x100u;
}

uint64_t ZinIrOpt::IsConcat(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 7) | 0x100u;
}

BOOL ZinIrOpt::IsSameFormat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  _BOOL8 v12;
  BOOL v13;
  void *__p[2];
  char v16;
  void *v17;
  char *v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "producers");
  ZinPattern::GetMatch(a3, (unsigned __int8 *)__p, &v17);
  if (v16 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  SingleMatch = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "to_duplicate");
  v5 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0) + 88);
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0)+ 88);
  v8 = (char *)v17;
  if (v7 != v6)
  {
    v12 = 0;
    if (!v17)
      return v12;
    goto LABEL_18;
  }
  v9 = v18;
  if (v17 == v18)
  {
    v12 = 1;
    if (!v17)
      return v12;
    goto LABEL_18;
  }
  v10 = (char *)v17 + 8;
  do
  {
    v11 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v10 - 1) + 32))(*((_QWORD *)v10 - 1), 0, 0)+ 88);
    v12 = v11 == v6;
    v13 = v11 != v6 || v10 == v9;
    v10 += 8;
  }
  while (!v13);
  v8 = (char *)v17;
  if (v17)
  {
LABEL_18:
    v18 = v8;
    operator delete(v8);
  }
  return v12;
}

void sub_206FAA344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::IsCHTranspose(uint64_t a1)
{
  ZinTransposeLayer *v1;
  _BOOL4 v2;

  v1 = *(ZinTransposeLayer **)(a1 + 8);
  v2 = *(_DWORD *)(*((_QWORD *)v1 + 8) + 8) == 37 && ZinTransposeLayer::IsCHTranspose(v1);
  return v2 | 0x100u;
}

void std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C002938;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C002938;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v4;
  ZinIrOpLayer *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  ZinIrOpLayerGraph *SingleMatch;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrOpLayer *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint8_t v24;
  char v25[7];
  void *v26[3];
  uint8_t v27;
  char v28[15];
  void *__p;
  void *v30;
  char v31;
  char v32;
  void *v33;
  void *v34;

  v4 = *a2;
  v5 = *a3;
  if (ZinIrOpLayer::IsIntermediate(*a3))
  {
    v6 = *(uint64_t ***)(a1 + 8);
    v8 = *v6;
    v7 = v6[1];
    if (*v6 != v7)
    {
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t **, ZinIrOpLayer *))(*(_QWORD *)*v8 + 8))(*v8, v4, v5))
        {
          v9 = *v8;
          std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
          SingleMatch = (ZinIrOpLayerGraph *)ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)&__p);
          if (v31 < 0)
            operator delete(__p);
          v11 = *v8;
          std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
          ZinPattern::GetMatch(v11, (unsigned __int8 *)&__p, &v33);
          if (v31 < 0)
            operator delete(__p);
          ZinObjectNameFactory::ZinObjectNameFactory(&__p, (char *)SingleMatch + 24);
          if ((ZinIrOpt::ReverseCSEDuplicateNode(v4, (uint64_t)&__p, SingleMatch, (uint64_t)&v33) & 1) != 0)
          {
            ++**(_QWORD **)(a1 + 16);
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(&v27, v28, v12);
          }
          __p = off_24C01FBB0;
          if (v32 < 0)
            operator delete(v30);
          if (v33)
          {
            v34 = v33;
            operator delete(v33);
          }
        }
        v8 += 2;
      }
      while (v8 != v7);
    }
    v13 = *(uint64_t ***)(a1 + 24);
    v15 = *v13;
    v14 = v13[1];
    if (*v13 != v14)
    {
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t **, ZinIrOpLayer *))(*(_QWORD *)*v15 + 8))(*v15, v4, v5))
        {
          v16 = *v15;
          std::string::basic_string[abi:ne180100]<0>(&__p, "producers");
          ZinPattern::GetMatch(v16, (unsigned __int8 *)&__p, &v33);
          if (v31 < 0)
            operator delete(__p);
          v17 = *v15;
          std::string::basic_string[abi:ne180100]<0>(&__p, "optional_mem_movements");
          ZinPattern::GetMatch(v17, (unsigned __int8 *)&__p, v26);
          if (v31 < 0)
            operator delete(__p);
          v18 = *v15;
          std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
          v19 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v18, (unsigned __int8 *)&__p);
          if (v31 < 0)
            operator delete(__p);
          v20 = *v15;
          std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
          v21 = (uint64_t **)ZinPattern::GetSingleMatch(v20, (unsigned __int8 *)&__p);
          if (v31 < 0)
            operator delete(__p);
          ZinObjectNameFactory::ZinObjectNameFactory(&__p, v21 + 3);
          if ((ZinIrOpt::ReverseCSEDuplicateNodeFanInPattern(v4, (uint64_t)&__p, (uint64_t)&v33, v26, v19, v21) & 1) != 0)
          {
            ++**(_QWORD **)(a1 + 16);
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(&v24, v25, v22);
          }
          __p = off_24C01FBB0;
          if (v32 < 0)
            operator delete(v30);
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          if (v33)
          {
            v34 = v33;
            operator delete(v33);
          }
        }
        v15 += 2;
      }
      while (v15 != v14);
    }
  }
  return 0;
}

void sub_206FAA7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error during Reverse CSE: Unable to duplicate node.", a1);
}

_QWORD *ZinTypeCastLayer::ZinTypeCastLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01C690;
  return a1;
}

void sub_206FAA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrTypeCastInfo::ZinIrTypeCastInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 71);
  *result = &unk_24C01CFA8;
  *(_QWORD *)((char *)result + 12) = a2;
  return result;
}

uint64_t ZinTypeCastLayer::Lower()
{
  return 0;
}

_QWORD *ZinTypeCastLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  uint64_t v18;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C01CFA8;
  *(_QWORD *)(v8 + 12) = *(_QWORD *)(v7 + 12);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinTypeCastLayer::ZinTypeCastLayer(v6, &v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206FAABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinTypeCastLayer::CreateDMALayer(ZinTypeCastLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  size_t v12;
  void **v13;
  char *v14;
  ZinIrTensor *v15;
  uint64_t v16;
  ZinIrTensor::MirInfo *v17;
  ZinIrTensor::MirInfo *v19;
  void *v20[2];
  char v21;
  void *v22;
  void *v23;
  char *v24;
  _QWORD v25[3];
  char v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 12);
  v3 = operator new();
  ZinIrDMAConvertInfo::ZinIrDMAConvertInfo(v3, v2);
  if (*((char *)this + 47) >= 0)
    v4 = *((unsigned __int8 *)this + 47);
  else
    v4 = *((_QWORD *)this + 4);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 11);
  if (SBYTE7(v28) < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)this + 47) >= 0)
      v6 = (char *)this + 24;
    else
      v6 = (char *)*((_QWORD *)this + 3);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_dmaconvert");
  ZinObjectNameFactory::ZinObjectNameFactory(v25, __p);
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  v7 = *((_QWORD *)this + 2);
  (*(void (**)(void **__return_ptr, ZinTypeCastLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 80))(__p, this, 0, 0);
  v8 = operator new(0x78uLL);
  v24 = (char *)v8 + 120;
  v9 = v32;
  v8[4] = v31;
  v8[5] = v9;
  v8[6] = v33;
  *((_DWORD *)v8 + 28) = v34;
  v10 = v28;
  *v8 = *(_OWORD *)__p;
  v8[1] = v10;
  v11 = v30;
  v8[2] = v29;
  v8[3] = v11;
  if (*((char *)this + 47) >= 0)
    v12 = *((unsigned __int8 *)this + 47);
  else
    v12 = *((_QWORD *)this + 4);
  v22 = v8;
  v23 = (char *)v8 + 120;
  v13 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v12 + 11);
  if (v21 < 0)
    v13 = (void **)v20[0];
  if (v12)
  {
    if (*((char *)this + 47) >= 0)
      v14 = (char *)this + 24;
    else
      v14 = (char *)*((_QWORD *)this + 3);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "_dmaconvert");
  v15 = (ZinIrTensor *)(*(uint64_t (**)(ZinTypeCastLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v15, &v19);
  v16 = ZinBuilder::CreateDMAConvertLayer(v7, (uint64_t)v25, &v22, (uint64_t)v20, &v19, *(_QWORD *)(*((_QWORD *)this + 8) + 12));
  v17 = v19;
  v19 = 0;
  if (v17)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v19, v17);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  v25[0] = off_24C01FBB0;
  if (v26 < 0)
    operator delete((void *)v25[1]);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v16;
}

void sub_206FAAEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void (**a19)(ZinObjectNameFactory *__hidden this), void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  _QWORD *v34;

  v34 = a9;
  a9 = 0;
  if (v34)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a9, v34);
  if (a15 < 0)
    operator delete(__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  a19 = off_24C01FBB0;
  if (a25 < 0)
    operator delete(a20);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  _Unwind_Resume(a1);
}

BOOL ZinTypeCastLayer::IsReadDMAConversion(ZinTypeCastLayer *this)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88);
  v3 = (*(uint64_t (**)(ZinTypeCastLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  return CheckValidFormatConversion(v2, *(_DWORD *)(v3 + 88), 0) == 0;
}

uint64_t ZinTypeCastLayer::IsWriteDMAConversion(ZinTypeCastLayer *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88);
  v3 = (*(uint64_t (**)(ZinTypeCastLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  if (*(_BYTE *)(*((_QWORD *)this + 8) + 16))
    return 0;
  v4 = 1;
  if (CheckValidFormatConversion(v2, *(_DWORD *)(v3 + 88), 1))
    return 0;
  return v4;
}

uint64_t ZinTypeCastLayer::NeedsTypeCastToRead()
{
  return 0;
}

uint64_t ZinTypeCastLayer::NeedsTypeCastToWrite()
{
  return 0;
}

float ZinIrPoolUnit::PoolUnitInfoToPoolParams@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  float result;

  *(_QWORD *)(a2 + 36) = 0x100000001;
  *(_DWORD *)(a2 + 44) = 1;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 72) = v4;
  *(_DWORD *)(a2 + 88) = 2;
  *(_BYTE *)(a2 + 92) = 0;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_BYTE *)(a2 + 100) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 120);
  v6 = *(_OWORD *)(a1 + 124);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 140);
  *(_OWORD *)(a2 + 48) = v6;
  v7 = ZinIrPoolingTypeToZinIrPoolingMode(*(_DWORD *)(a1 + 80));
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a2 + 88) = v7;
  *(_BYTE *)(a2 + 92) = *(_BYTE *)(a1 + 148);
  result = *(float *)(a1 + 156);
  *(float *)(a2 + 96) = result;
  *(_BYTE *)(a2 + 100) = 0;
  return result;
}

uint64_t ZinIrPoolUnit::CreateLayer(ZinIrPoolUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  __n128 Opcode;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  int v31;
  uint64_t v32;

  Opcode = ZinIrPoolUnit::CreateOpcode(a1, (uint64_t)&v31);
  if (v31)
  {
    v8 = 0;
  }
  else
  {
    v9 = operator new();
    v8 = v9;
    v10 = (std::__shared_weak_count *)(*a3)[1];
    v29 = **a3;
    v30 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ZinPoolLayer::ZinPoolLayer(v9, &v32, &v29, (char *)a1 + 64, a4);
    v13 = v30;
    if (v30)
    {
      v14 = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (__int128 *)*((_QWORD *)a1 + 1);
    v24 = v16[4];
    v25 = v16[5];
    v26 = v16[6];
    v27 = *((_DWORD *)v16 + 28);
    v20 = *v16;
    v21 = v16[1];
    v22 = v16[2];
    v23 = v16[3];
    v17 = operator new(0x78uLL);
    v17[4] = v24;
    v17[5] = v25;
    v17[6] = v26;
    *((_DWORD *)v17 + 28) = v27;
    *v17 = v20;
    v17[1] = v21;
    v17[2] = v22;
    v17[3] = v23;
    v28 = v17;
    ZinIrOpLayer::ValidateSemantics(v8);
    if (v28)
      operator delete(v28);
  }
  v18 = v32;
  v32 = 0;
  if (v18)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, Opcode);
  return v8;
}

void sub_206FAB2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPoolUnit::ValidateForDynamicShapes(ZinIrPoolUnit *this, ZinIrUnitStatus *a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 1);
  if (v2 == *((_QWORD *)this + 2))
    ZinAssertImpl("Pooling layer does not have input tensor", a2);
  v3 = *((_DWORD *)this + 34);
  if (v3 == 4 || v3 == 2)
  {
    if (*(_DWORD *)(v2 + 108) == 1 && *(_QWORD *)(v2 + 24) == *((_QWORD *)this + 19)
      || *(_DWORD *)(v2 + 112) == 1 && *(_QWORD *)(v2 + 32) == *((_QWORD *)this + 18))
    {
      ZinAssertImpl("Dynamic shape cannot support global max/min pool, please use reduction to replace global max/min pool", a2);
    }
    return 0;
  }
  if (v3 == 1 && *((_DWORD *)this + 52) == 1)
    return 0;
  ZinIrUnitStatus::SetError((CFArrayRef *)a2, CFSTR("InvalidUnit"));
  return 3;
}

void ZinIrPoolUnit::~ZinIrPoolUnit(void **this)
{
  *this = &off_24C0178C0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0178C0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

_BYTE *ZinIrDynamicGOCInfo::ZinIrDynamicGOCInfo(_BYTE *a1, float a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v17;

  v17 = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)a1, 3);
  *(_QWORD *)v17 = &unk_24C01EC90;
  *(float *)(v17 + 12) = a2;
  *(_BYTE *)(v17 + 16) = a4;
  *(_BYTE *)(v17 + 17) = a5;
  ZinIrBroadcastInfo::ZinIrBroadcastInfo(v17 + 24, a6);
  a1[80] = a7;
  a1[81] = a8;
  a1[82] = a9;
  return a1;
}

void sub_206FAB4C8(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrDynamicGOCInfo::TensorDimensions(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _QWORD v13[2];
  void *__p;
  void *v15;
  void *v16;
  void *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v2 = *(uint64_t **)a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) == 1)
    ZinAssertImpl("GOC missing bias scale input");
  v5 = *v2;
  v4 = v2[1];
  v7 = v2[3];
  v6 = v2[4];
  v8 = &v2[((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) - 5];
  v9 = *(_OWORD *)v8;
  v10 = *((_OWORD *)v8 + 1);
  v21 = v8[4];
  v19 = v9;
  v20 = v10;
  if (a1[80])
  {
    v11 = operator new(0x10uLL);
    v16 = v11;
    *v11 = xmmword_207A8A860;
    v17 = v11 + 1;
    v18 = v11 + 1;
    ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v13, (uint64_t)&v16);
    if (ZinIrTransposeInfo::TensorDimensions((ZinIrTransposeInfo *)v13, (ZinTensorDimensions *)&v19))
      ZinAssertImpl("GOC bias scale transpose shape propagation failed");
    v13[0] = &unk_24C01E1F0;
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v13);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
  if (a1[81] || a1[82])
  {
    if ((_QWORD)v20 != 1)
      ZinAssertImpl("GOC individual bias or scale shape must have height of 1");
  }
  else if ((_QWORD)v20 != 2)
  {
    ZinAssertImpl("GOC concatenated bias scale shape must have height of 2");
  }
  if ((_QWORD)v19 != 1 && (_QWORD)v19 != v5
    || v21 != 1 && v21 != v6
    || *((_QWORD *)&v19 + 1) != 1 && *((_QWORD *)&v19 + 1) != v4
    || *((_QWORD *)&v20 + 1) != 1 && *((_QWORD *)&v20 + 1) != v7)
  {
    ZinAssertImpl("GOC bias scale shape must match the data tensor", v13[0]);
  }
  ZinIrBroadcastInfo::GetBroadcastAxes((ZinIrBroadcastInfo *)(a1 + 24), (uint64_t)v13);
  if (*((_QWORD *)&v20 + 1) == 1 && v7 != 1)
  {
    LODWORD(v16) = 4;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have width of 1 to support implicit broadcast", v13[0]);
  }
  if (*((_QWORD *)&v19 + 1) == 1 && v4 != 1)
  {
    LODWORD(v16) = 2;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have channel of 1 to support implicit broadcast", v13[0]);
  }
  if (v21 != v6)
  {
    LODWORD(v16) = 1;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have depth of 1 to support implicit broadcast", v13[0]);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v13);
  return 0;
}

void sub_206FAB740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinTernaryDynamicGOCLayer::ZinTernaryDynamicGOCLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C023A80;
  return a1;
}

void sub_206FAB874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinTernaryDynamicGOCLayer::Lower(ZinTernaryDynamicGOCLayer *a1, uint64_t **a2, const ZinIrHalParameters ***a3)
{
  const ZinIrHalParameters *v4;

  v4 = **a3;
  if (!*((_BYTE *)v4 + 1113))
  {
    ZinTernaryDynamicGOCLayer::ValidateH11H12(a1, v4);
    ZinTernaryDynamicGOCLayer::LowerH11H12(a1, a2);
  }
  return 0;
}

uint64_t ZinTernaryDynamicGOCLayer::ValidateH11H12(ZinTernaryDynamicGOCLayer *this, const ZinIrHalParameters *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 8);
  if (!*(_BYTE *)(v2 + 81) || *(_BYTE *)(v2 + 82))
    ZinAssertImpl("Scale-Only and Default DynamicGOC are not supported", a2);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 11) + 8), 0, 0);
  if (*(_DWORD *)(v5 + 88) != 3 || *(_DWORD *)(result + 88) != 3)
    ZinAssertImpl("DynamicGOC only supports FP16 bottoms format");
  v7 = *(_QWORD *)(v5 + 56);
  v8 = *(_QWORD *)(result + 56);
  if (v7 != v8)
    ZinAssertImpl("DynamicGOC must have the same bottoms channel size, but input N%zdD%zdC%zdH%zdW%zd and bias N%zdD%zdC%zdH%zdW%zd are given", *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 80), v7, *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(result + 48), *(_QWORD *)(result + 80), v8, *(_QWORD *)(result + 64), *(_QWORD *)(result + 72));
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)((char *)a2 + v9 + 1648);
    if (v10 == v7)
      break;
    v13 = v9 == 32;
    v9 += 8;
  }
  while (!v13);
  v11 = *(_QWORD *)(v5 + 48);
  if (v10 != v7)
    ZinAssertImpl("DynamicGOC input channel size must be one of [1, 2, 3, 4, 8], but N%zdD%zdC%zdH%zdW%zd are given", v11, *(_QWORD *)(v5 + 80), v7, *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  v12 = *(_QWORD *)(v5 + 80);
  v13 = v11 == 1 && v12 == 1;
  if (!v13 || *(_QWORD *)(v5 + 64) != 1)
    ZinAssertImpl("DynamicGOC input dimensions N%zdD%zdC%zdH%zdW%zd are not within supported range, N[1-1]D[1-1]C[%zd-%zd]H[1-1]W[%zd-%zd].", v11, v12);
  v15 = *(_QWORD *)(result + 48);
  if (v15 != 1)
  {
    v16 = *(_QWORD *)(result + 80);
    if (v16 != 1 && *(_QWORD *)(result + 64) != 1)
      ZinAssertImpl("DynamicGOC bias dimensions N%zdD%zdC%zdH%zdW%zd are not within supported range, N[1-1]D[1-1]C[%zd-%zd]H[1-1]W[%zd-%zd].", v15, v16);
  }
  return result;
}

uint64_t ZinTernaryDynamicGOCLayer::LowerH11H12(ZinIrOpLayer *a1, uint64_t **a2)
{
  __n128 v4;
  uint64_t *v5;
  uint64_t v6;
  ZinIrOpLayer *v7;
  uint64_t v8;
  int fixed;
  _BOOL4 v10;
  ZinIrOpLayer *v11;
  int inserted;
  ZinIrTensor *v13;
  int v14;
  uint64_t v15;
  ZinIrTensor *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  __int128 v32;
  ZinIrScaleBiasInfo *v33;
  ZinIrOpLayer *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  char v44;
  ZinIrScaleBiasInfo *v45;
  ZinIrKernel *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _OWORD v57[2];
  int v58;
  ZinIrOpLayer *v59;
  _QWORD v60[3];
  char v61;
  std::string v62;
  ZinIrScaleBiasInfo *v63;
  ZinIrKernel *v64;
  std::string __p;
  __int16 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void *v89;
  std::__shared_weak_count *v90;
  char v91;
  std::string v92;
  void *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  ZinIrOpLayer *v97;
  __int128 v98;
  std::string::size_type v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v4 = ZinObjectNameFactory::ZinObjectNameFactory(v60, (char *)a1 + 24);
  v5 = (uint64_t *)*((_QWORD *)a1 + 11);
  v6 = *v5;
  v7 = (ZinIrOpLayer *)v5[1];
  v59 = 0;
  v8 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v7 + 32))(v7, 0, 0, v4);
  fixed = ZinMirTensorTransform::FixAllocation(v8, (uint64_t)v60, 2, (uint64_t *)&v59, 1, 1uLL, 1);
  v10 = fixed == 0;
  v11 = v59;
  if (v59)
  {
    *(_QWORD *)&v98 = a1;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
    v62.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v62);
    inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, v11, v7, a1, (ZinIrOpLayer ***)&__p);
    if (fixed)
      v10 = 0;
    else
      v10 = inserted;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p.__r_.__value_.__l.__size_)
    {
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    v7 = v59;
  }
  v13 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  v14 = ZinMirTensorTransform::FixDimensionOrder(v13, a2, (DimensionOrderHint *)&__p, 1);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14)
    ZinAssertImpl("ANEC internal error: Ternary Dynamic GOC lowering failed to set dimension order hint");
  v15 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8);
  v16 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, 0, 0);
  v18 = v17[1];
  v95 = *v17;
  v96 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *, _QWORD))(v60[0] + 16))(&v62, v60, 0);
  v21 = std::string::append(&v62, "_bias_tensor", 0xCuLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CreateTensor(v16, (__int128 *)&__p, (uint64_t *)&v93);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v60[0] + 16))(&v62, v60, 2);
  v23 = std::string::append(&v62, "_", 1uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v89, "bias_kernel_dyn");
  v26 = std::string::append(v25, "_xfm", 4uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v92;
  else
    v28 = (std::string *)v92.__r_.__value_.__r.__words[0];
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  else
    size = v92.__r_.__value_.__l.__size_;
  v30 = std::string::append(&__p, (const std::string::value_type *)v28, size);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v99 = v30->__r_.__value_.__r.__words[2];
  v98 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (v91 < 0)
    operator delete(v89);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  HIDWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  LOWORD(__p.__r_.__value_.__r.__words[2]) = 0;
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = 0;
  v66 = 0;
  __p.__r_.__value_.__r.__words[0] = 0;
  LOWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  v70 = vdupq_n_s64(1uLL);
  v71 = v70;
  v72 = v70;
  v73 = v70;
  v74 = v70;
  *(_QWORD *)&v32 = 0x100000001;
  *((_QWORD *)&v32 + 1) = 0x100000001;
  v75 = v32;
  v76 = 0x100000001;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v80 = xmmword_207A85790;
  v81 = 1;
  v82 = 1;
  v83 = 0;
  v88 = 0;
  v84 = 1;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v62.__r_.__value_.__r.__words[0] = 0;
  v92.__r_.__value_.__r.__words[0] = 0;
  v89 = 0;
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),decltype(nullptr),std::shared_ptr<ZinIrTensor> &>((uint64_t)&v98, (uint64_t)&__p, &v95, (uint64_t *)&v64);
  v33 = (ZinIrScaleBiasInfo *)operator new();
  ZinIrScaleBiasInfo::ZinIrScaleBiasInfo(v33);
  v63 = v33;
  v34 = (ZinIrOpLayer *)operator new();
  v89 = v93;
  v90 = v94;
  if (v94)
  {
    p_shared_owners = (unint64_t *)&v94->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(v60[0] + 16))(&v92, v60, 1);
  v37 = std::string::append(&v92, "_bias_layer", 0xBuLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  ZinGOCLayer::ZinGOCLayer(v34, &v63, &v89, &v62, &v64);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v39 = v90;
  if (v90)
  {
    v40 = (unint64_t *)&v90->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v97 = a1;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  v92.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v62, &v92);
  v42 = ZinIrOpLayerGraph::AddNode(a2, v34, (ZinIrOpLayer ***)&v62);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (v62.__r_.__value_.__l.__size_)
  {
    v62.__r_.__value_.__r.__words[2] = v62.__r_.__value_.__l.__size_;
    operator delete((void *)v62.__r_.__value_.__l.__size_);
  }
  v43 = operator new(0x10uLL);
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)(v43 + 2);
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)(v43 + 2);
  *v43 = v6;
  v43[1] = v15;
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  v44 = v42 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v62, (uint64_t)v34);
  if (v62.__r_.__value_.__r.__words[0])
  {
    v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if ((v44 & 1) == 0)
    ZinAssertImpl("ANE internal failure: DynamicGOC layer graph manipulation error");
  v45 = v63;
  v63 = 0;
  if (v45)
    (*(void (**)(ZinIrScaleBiasInfo *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v64;
  v64 = 0;
  if (v46)
  {
    ZinIrKernel::~ZinIrKernel(v46);
    MEMORY[0x20BD002F8]();
  }
  if (SHIBYTE(v99) < 0)
    operator delete((void *)v98);
  v47 = v94;
  if (v94)
  {
    v48 = (unint64_t *)&v94->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v96;
  if (v96)
  {
    v51 = (unint64_t *)&v96->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  v53 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v34, v57);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v57);
  v54 = (_QWORD *)*((_QWORD *)v34 + 11);
  v55 = *((_QWORD *)v34 + 12) - (_QWORD)v54;
  if (v55 != 16)
    ZinAssertImpl("Lowered GOC's input counts should be 2, but %ld detected", v55 >> 3);
  if (*v54 != v6)
    ZinAssertImpl("Lowered GOC's data input doesn't match the original DynamicGOC");
  if (v54[1] != v15)
    ZinAssertImpl("Lowered GOC bias input doesn't match the original DynamicGOC");
  if (*((_QWORD *)v34 + 15) == *((_QWORD *)v34 + 14))
    ZinAssertImpl("Lowered GOC's output is not connected correctly");
  if ((v10 & v53 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a1, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: DynamicGOC layer graph manipulation error");
  v60[0] = off_24C01FBB0;
  if (v61 < 0)
    operator delete((void *)v60[1]);
  return 0;
}

void sub_206FAC238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,void *__p,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinTernaryDynamicGOCLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  uint64_t v19;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C01EC90;
  v9 = *(_DWORD *)(v7 + 12);
  *(_WORD *)(v8 + 16) = *(_WORD *)(v7 + 16);
  *(_DWORD *)(v8 + 12) = v9;
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)(v8 + 24), (const ZinIrOpLayerOpCode *)(v7 + 24));
  *(_QWORD *)(v8 + 24) = &unk_24C01DE18;
  std::unordered_map<ZinIrDimension,unsigned long>::unordered_map(v8 + 40, v7 + 40);
  v10 = *(_WORD *)(v7 + 80);
  *(_BYTE *)(v8 + 82) = *(_BYTE *)(v7 + 82);
  *(_WORD *)(v8 + 80) = v10;
  v19 = v8;
  v11 = (std::__shared_weak_count *)a2[1];
  v18[0] = *a2;
  v18[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinTernaryDynamicGOCLayer::ZinTernaryDynamicGOCLayer(v6, &v19, v18, a3);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206FAC600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinTernaryDynamicGOCLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TERNARY_DYNAMIC_GOC");
}

uint64_t ZinTernaryDynamicGOCLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206FAC740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinTernaryDynamicGOCLayer::ValidateScaleOrBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;

  if (*(_DWORD *)a3 != 3)
  {
    if (*(char *)(a4 + 23) >= 0)
      v6 = (const char *)a4;
    else
      v6 = *(const char **)a4;
    ZinAssertImpl("DynamicGOC %s tensor format must be FP16", v6);
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 != 1)
  {
    v5 = *(_QWORD *)(a3 + 32);
    if (v5 != 1)
    {
      if (*(char *)(a4 + 23) >= 0)
        v8 = (const char *)a4;
      else
        v8 = *(const char **)a4;
      ZinAssertImpl("DynamicGOC %s must set either width or channel size to 1, but C%ldW%ld are given", v8, *(_QWORD *)(a3 + 16), v5);
    }
  }
  if (*(_QWORD *)(a3 + 24) != 1)
  {
    if (*(char *)(a4 + 23) >= 0)
      v7 = (const char *)a4;
    else
      v7 = *(const char **)a4;
    ZinAssertImpl("DynamicGOC %s height dimension must be 1, but N%zdD%zdC%zdH%zdW%zd are provided", v7, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 40), v4, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
}

void ZinTernaryDynamicGOCLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  char v23;

  if (!a3[1884])
    ZinAssertImpl("DynamicGOC is not supported");
  v6 = a2[1] - *a2;
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  v7 = *((_QWORD *)a1 + 8);
  v8 = *(unsigned __int8 *)(v7 + 81);
  v9 = *(unsigned __int8 *)(v7 + 82);
  if (v8)
  {
    if (v9)
      ZinAssertImpl("Invalid DynamicGOC: Bias_Only and Scale_Only can't be true at the same time");
    if (v6 != 240)
      ZinAssertImpl("Bias_only DynamicGOC requires 2 inputs.");
    v10 = *a2 + 120;
    v11 = std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v11, v12, v10, (uint64_t)__p);
  }
  else if (v9)
  {
    if (v6 != 240)
      ZinAssertImpl("Scale_only DynamicGOC requires 2 inputs.");
    v13 = *a2 + 120;
    v14 = std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v14, v15, v13, (uint64_t)__p);
  }
  else
  {
    if (v6 != 360)
      ZinAssertImpl("DynamicGOC requires 3 inputs.");
    if (!ZinTensorDimensionsEqual((_QWORD *)(*a2 + 128), (_QWORD *)(*a2 + 248)))
      ZinAssertImpl("DynamicGOC Scale and Bias bias dimensions must be equal");
    v16 = *a2 + 120;
    v17 = std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v17, v18, v16, (uint64_t)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    v19 = *a2 + 240;
    v20 = std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v20, v21, v19, (uint64_t)__p);
  }
  if (v23 < 0)
    operator delete(__p[0]);
  if (!a3[1113] && *(_QWORD *)(*a2 + 152) != 1)
    ZinAssertImpl("DynamicGOC Bias width dimension must be 1");
}

void sub_206FAC9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrDynamicGOCInfo::~ZinIrDynamicGOCInfo(ZinIrDynamicGOCInfo *this)
{
  *(_QWORD *)this = &unk_24C01EC90;
  *((_QWORD *)this + 3) = &unk_24C01DE18;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrDynamicGOCInfo *)((char *)this + 24));
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  *(_QWORD *)this = &unk_24C01EC90;
  *((_QWORD *)this + 3) = &unk_24C01DE18;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrDynamicGOCInfo *)((char *)this + 24));
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t CpTransposeGraph::CpTransposeGraph(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  CpGraph::CpGraph(a1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  return a1;
}

void sub_206FACB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::~CpTransposeGraph(void **this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 52));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 47));
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table((uint64_t)(this + 42));
  std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::~__hash_table((uint64_t)(this + 37));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 32));
  CpGraph::~CpGraph(this);
}

_QWORD *CpTransposeGraph::SetLiveInTensor(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 376, &v3, &v3);
}

_QWORD *CpTransposeGraph::SetLiveOutTensor(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 416, &v3, &v3);
}

char *CpTransposeGraph::SetTensorDimensions(uint64_t a1, unint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  char *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;

  v13 = a2;
  v4 = a1 + 256;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)(a1 + 256), (unint64_t *)&v13))
  {
    v9 = (unint64_t *)&v13;
    result = std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&v13, (uint64_t)&std::piecewise_construct, &v9);
    v6 = *a3;
    v7 = a3[1];
    *((_QWORD *)result + 7) = *((_QWORD *)a3 + 4);
    *(_OWORD *)(result + 40) = v7;
    *(_OWORD *)(result + 24) = v6;
  }
  else
  {
    v9 = v13;
    v8 = a3[1];
    v10 = *a3;
    v11 = v8;
    v12 = *((_QWORD *)a3 + 4);
    return (char *)std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::TensorDimensions>>(v4, (unint64_t *)&v9, &v9);
  }
  return result;
}

__n128 CpTransposeGraph::GetTensorDimensions@<Q0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  __n128 result;
  __int128 v6;
  unint64_t v7;

  v7 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 32, &v7);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  result = *(__n128 *)(v4 + 3);
  v6 = *(_OWORD *)(v4 + 5);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v4[7];
  return result;
}

void CpTransposeGraph::SetRootTensorConstraint(uint64_t a1, unint64_t *a2, char *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  char v7;
  std::string __p;
  unint64_t *v9;

  v9 = a2;
  v4 = a1 + 336;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)(a1 + 336), (unint64_t *)&v9))
  {
    v6 = (unint64_t *)&v9;
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&v9, (uint64_t)&std::piecewise_construct, &v6);
    *((_BYTE *)v5 + 24) = *a3;
    std::string::operator=((std::string *)(v5 + 4), (const std::string *)(a3 + 8));
  }
  else
  {
    v6 = v9;
    v7 = *a3;
    if (a3[31] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
    else
      __p = *(std::string *)(a3 + 8);
    std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::RootTensorConstraint>>(v4, (unint64_t *)&v6, (uint64_t)&v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_206FACDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::DisqualifyTranspose(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  std::string::size_type v5;
  void *__p[2];
  unsigned __int8 v7;
  unint64_t v8;

  v8 = a2;
  v2 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)(a1 + 336), &v8);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = v2;
  *((_BYTE *)v2 + 24) = 1;
  std::operator+<char>();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append((std::string *)(v3 + 4), (const std::string::value_type *)v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_206FACEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::SetLayerTruthTable(CpTransposeGraph *this, unint64_t a2, const std::string *a3)
{
  char *v4;
  std::string *v5;
  unint64_t *v6;
  uint64_t v7;
  void *__p;
  char v9;
  unint64_t v10;
  void **v11;

  v10 = a2;
  v4 = (char *)this + 296;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((_QWORD *)this + 37, &v10))
  {
    v6 = &v10;
    v5 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v4, &v10, (uint64_t)&std::piecewise_construct, &v6);
    if (&v5[1] != a3)
      std::vector<CpTransposeUtils::LayerConstraint>::__assign_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v5[1], a3->__r_.__value_.__r.__words[0], a3->__r_.__value_.__l.__size_, 0x8E38E38E38E38E39 * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 3));
    std::string::operator=(v5 + 2, a3 + 1);
  }
  else
  {
    std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::pair[abi:ne180100]<unsigned long long &,CpTransposeUtils::LayerTruthTable const&,0>(&v6, &v10, (uint64_t)a3);
    std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>>((uint64_t)v4, (unint64_t *)&v6, (uint64_t)&v6);
    if (v9 < 0)
      operator delete(__p);
    v11 = (void **)&v7;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
}

void sub_206FACFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::~pair(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *CpTransposeGraph::GetRootTensorConstraint(CpTransposeGraph *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 42, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

_QWORD *CpTransposeGraph::GetLayerTruthTable(CpTransposeGraph *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 37, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

uint64_t CpTransposeGraph::DebugPrintNode@<X0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string __p;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  __p.__r_.__value_.__r.__words[0] = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
    CpGraph::GetLayerName((uint64_t)this, a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)p_p, size);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = a2;
    if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 24, (unint64_t *)&__p))goto LABEL_19;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"T", 1);
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v10 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_19:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a3);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15 = v11;
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v18);
}

