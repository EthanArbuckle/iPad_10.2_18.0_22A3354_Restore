void sub_22DBB9DA0()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_22DBB9DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;

  v33 = *(_QWORD *)(v31 - 152);
  if (v33)
  {
    v34 = *(_QWORD *)(v31 - 144);
    v35 = *(void **)(v31 - 152);
    if (v34 == v33)
    {
      *(_QWORD *)(v31 - 144) = v33;
      operator delete(v35);
      _Unwind_Resume(exception_object);
    }
    do
    {
      if ((*(_BYTE *)(v34 - 40) & 1) != 0)
        operator delete(*(void **)(v34 - 32));
      v34 -= 64;
    }
    while (v34 != v33);
    v36 = *(void **)(v31 - 152);
    *(_QWORD *)(v31 - 144) = v33;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  _QWORD *v4;
  operations_research::sat::SatSolver *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  operations_research::sat::SatSolver *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v49;
  uint64_t v50;
  absl::lts_2020_02_25 *v51;
  double v52;
  double v53;
  const char *v54;
  int **v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int *v62;
  unint64_t v63;
  int v64;
  int *v65;
  const char *v66;
  int **v67;
  int *v68;
  int *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  _QWORD **v81;
  _QWORD *v82;
  _QWORD **v83;
  int v84;
  _QWORD *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  _QWORD *v104;
  int *v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _QWORD *v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  unint64_t v127;
  _BYTE *v128;
  _DWORD *v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  int v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _BYTE *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  _QWORD *v152;
  int v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  _OWORD *v181;
  char *v182;
  uint64_t v183;
  __int128 v184;
  char *v185;
  _BYTE *v186;
  char *v187;
  char *v188;
  _DWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  char v192;
  char *v193;
  char *v194;
  void *v195;
  char *v196;
  void *v197;
  void *v198;
  int v200;
  operations_research::sat::Model *v201;
  int *v202;
  _QWORD *v203;
  uint64_t v204;
  operations_research::sat::SatSolver *v205;
  absl::lts_2020_02_25 *v206;
  int *v207;
  operations_research::sat::PrecedencesPropagator *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  _DWORD *v218;
  char *v219;
  char *v220;
  void *__p;
  char *v222;
  char *v223;
  absl::lts_2020_02_25 *v224;
  _QWORD *v225[2];
  char *v226;
  char *v227;
  uint64_t v228;
  _BYTE v229[24];
  _BYTE *v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  v201 = a2;
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  v6 = (uint64_t)v5;
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v8 = *((_QWORD *)this + 23);
  v7 = *((_QWORD *)this + 24);
  v208 = this;
  v203 = v4;
  v205 = v5;
  if ((int)((unint64_t)(v7 - v8) >> 6) >= 1)
  {
    v9 = 0;
    while (1)
    {
      if (*(_DWORD *)(v8 + (v9 << 6) + 16) != -1)
        goto LABEL_5;
      v11 = (int *)(v8 + (v9 << 6));
      v12 = *v11;
      v15 = v11[1];
      v14 = v11 + 1;
      v13 = v15;
      if (v12 == (_DWORD)v15 || (*(_QWORD *)(v8 + (v9 << 6) + 24) & 0xFFFFFFFFFFFFFFFELL) != 2)
        goto LABEL_5;
      v16 = v227;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 3);
      if ((int)v13 >= (int)v17)
      {
        v18 = v13 + 1;
        if (v18 <= v17)
        {
          if (v18 < v17)
          {
            v19 = &v226[24 * v18];
            if (v227 != v19)
            {
              v20 = v227;
              do
              {
                v21 = (operations_research::sat::SatSolver *)*((_QWORD *)v20 - 3);
                v20 -= 24;
                v5 = v21;
                if (v21)
                {
                  *((_QWORD *)v16 - 2) = v5;
                  operator delete(v5);
                }
                v16 = v20;
              }
              while (v20 != v19);
            }
            v227 = v19;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v226, v18 - v17);
        }
      }
      v22 = &v226[24 * *v14];
      v24 = (uint64_t *)(v22 + 8);
      v23 = (char *)*((_QWORD *)v22 + 1);
      v25 = *((_QWORD *)v22 + 2);
      if ((unint64_t)v23 >= v25)
        break;
      *(_DWORD *)v23 = v9;
      v10 = (uint64_t)(v23 + 4);
LABEL_4:
      *v24 = v10;
      this = v208;
      v8 = *((_QWORD *)v208 + 23);
      v7 = *((_QWORD *)v208 + 24);
      v4 = v203;
      v6 = (uint64_t)v205;
LABEL_5:
      if (++v9 >= (int)((unint64_t)(v7 - v8) >> 6))
      {
        v43 = v226;
        v42 = v227;
        goto LABEL_41;
      }
    }
    v26 = *(char **)v22;
    v27 = (uint64_t)&v23[-*(_QWORD *)v22];
    v28 = v27 >> 2;
    v29 = (v27 >> 2) + 1;
    if (v29 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v30 = v25 - (_QWORD)v26;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v5 = (operations_research::sat::SatSolver *)operator new(4 * v31);
      v32 = (_DWORD *)((char *)v5 + 4 * v28);
      *v32 = v9;
      v10 = (uint64_t)(v32 + 1);
      if (v23 == v26)
        goto LABEL_37;
    }
    else
    {
      v5 = 0;
      v32 = (_DWORD *)(4 * v28);
      *(_DWORD *)(4 * v28) = v9;
      v10 = 4 * v28 + 4;
      if (v23 == v26)
      {
LABEL_37:
        *(_QWORD *)v22 = v32;
        *v24 = v10;
        *((_QWORD *)v22 + 2) = (char *)v5 + 4 * v31;
        if (v26)
          operator delete(v26);
        goto LABEL_4;
      }
    }
    v33 = v23 - 4 - v26;
    if (v33 < 0x2C)
      goto LABEL_247;
    if ((unint64_t)(v23 - ((char *)v5 + v27)) < 0x20)
      goto LABEL_247;
    v34 = (v33 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v36 = &v23[-v35];
    v32 = (_DWORD *)((char *)v32 - v35);
    v37 = (_OWORD *)((char *)v5 + 4 * v28 - 16);
    v38 = v23 - 16;
    v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    v23 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_247:
      do
      {
        v41 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *--v32 = v41;
      }
      while (v23 != v26);
    }
    goto LABEL_37;
  }
  v43 = 0;
  v42 = 0;
LABEL_41:
  if ((int)(-1431655765 * ((unint64_t)(v42 - v43) >> 3)) < 1)
  {
    v45 = 0;
    goto LABEL_221;
  }
  v44 = 0;
  v45 = 0;
  v202 = (int *)(v4 + 4);
  while (*(_QWORD *)&v43[24 * v44 + 8] - *(_QWORD *)&v43[24 * v44] < 8uLL)
  {
LABEL_44:
    if (++v44 >= (int)(-1431655765 * ((unint64_t)(v42 - v43) >> 3)))
      goto LABEL_221;
  }
  v46 = (unsigned __int8 *)v4[15];
  if (v46)
  {
    v47 = atomic_load(v46);
    if ((v47 & 1) != 0)
      goto LABEL_221;
  }
  if (fmax(*((double *)v4 + 13) - *((double *)v4 + 14), 0.0) <= 0.0)
    goto LABEL_221;
  CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v5);
  v49 = CurrentTimeNanos;
  if (v4[3] <= CurrentTimeNanos - v4[1])
    v50 = CurrentTimeNanos - v4[1];
  else
    v50 = v4[3];
  operations_research::RunningMax<long long>::Add(v202, v50);
  v4[1] = v49;
  if (*(_QWORD *)(v4[5] + 8 * *((int *)v4 + 17)) + v49 >= v4[2])
  {
    if (!FLAGS_time_limit_use_usertime)
      goto LABEL_230;
    v52 = *((double *)v4 + 12);
    if (*((_BYTE *)v4 + 72))
    {
      v53 = v52 + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v51) - v4[10] + v4[11]) * -0.000000001;
      if (v53 <= 0.0001)
        goto LABEL_230;
    }
    else
    {
      v53 = v52 + (double)(uint64_t)v4[11] * -0.000000001;
      if (v53 <= 0.0001)
      {
LABEL_230:
        v4[2] = 0;
        goto LABEL_221;
      }
    }
    v4[2] = v4[1] + (uint64_t)(v53 * 1000000000.0);
  }
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v6, 0);
  if (*(_BYTE *)(v6 + 496))
    goto LABEL_221;
  v55 = (int **)&v226[24 * v44];
  v56 = *v55;
  v57 = v55[1];
  while (v56 != v57)
  {
    v58 = *((_QWORD *)this + 23) + ((uint64_t)*v56 << 6);
    v61 = *(_QWORD *)(v58 + 24);
    v59 = v58 + 24;
    v60 = v61;
    if (v61 <= 1)
    v62 = (int *)(v59 + 8);
    if ((v60 & 1) != 0)
      v62 = *(int **)v62;
    v63 = *v62;
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 208) + 24) + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v63 & 0x3F ^ 1)) & 1) == 0)
    {
      v64 = *(_DWORD *)(v6 + 304);
      operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(v6, v63 ^ 1);
      if (*(_BYTE *)(v6 + 496))
        goto LABEL_221;
      if (*(_DWORD *)(v6 + 304) <= v64)
      {
        operations_research::sat::SatSolver::GetLastIncompatibleDecisions((operations_research::sat::SatSolver *)v6, &v224);
        v65 = (int *)v225[0];
        v206 = v224;
        goto LABEL_71;
      }
    }
    ++v56;
  }
  v206 = 0;
  v65 = 0;
LABEL_71:
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v6, 0);
  if ((unint64_t)((char *)v65 - (char *)v206) < 5)
  {
LABEL_218:
    v5 = v206;
    if (v206)
      operator delete(v206);
    v43 = v226;
    v42 = v227;
    goto LABEL_44;
  }
  std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>((_QWORD **)&v224, (int *)v206, v65);
  v200 = v45;
  __p = 0;
  v222 = 0;
  v223 = 0;
  v67 = (int **)&v226[24 * v44];
  v68 = *v67;
  v69 = v67[1];
  v204 = v44;
  if (*v67 != v69)
  {
    v70 = 0;
    v71 = 0;
    v72 = 0;
    while (1)
    {
      v73 = *v68;
      v74 = *((_QWORD *)this + 23) + (v73 << 6);
      v77 = *(_QWORD *)(v74 + 24);
      v75 = v74 + 24;
      v76 = v77;
      if (v77 <= 1)
      v78 = (_QWORD *)(v75 + 8);
      if ((v76 & 1) != 0)
        v78 = (_QWORD *)*v78;
      v79 = v225[0];
      if (!v225[0])
        goto LABEL_76;
      v80 = *(_DWORD *)v78 ^ 1;
      v81 = v225;
      do
      {
        v82 = v79;
        v83 = v81;
        v84 = *((_DWORD *)v79 + 7);
        v85 = v79 + 1;
        if (v84 >= v80)
        {
          v85 = v82;
          v81 = (_QWORD **)v82;
        }
        v79 = (_QWORD *)*v85;
      }
      while (v79);
      if (v81 == v225)
        goto LABEL_76;
      if (v84 < v80)
        v82 = v83;
      if (v80 < *((_DWORD *)v82 + 7))
        goto LABEL_76;
      if (v72 >= v71)
        break;
      *(_DWORD *)v72 = v73;
      v72 += 4;
LABEL_75:
      v222 = v72;
LABEL_76:
      if (++v68 == v69)
        goto LABEL_116;
    }
    v86 = v72 - v70;
    v87 = (v72 - v70) >> 2;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v71 - v70) >> 1 > v88)
      v88 = (v71 - v70) >> 1;
    if ((unint64_t)(v71 - v70) >= 0x7FFFFFFFFFFFFFFCLL)
      v89 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      if (v89 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v90 = (char *)operator new(4 * v89);
      v91 = v72;
      v92 = &v90[4 * v87];
      *(_DWORD *)v92 = v73;
      v72 = v92 + 4;
      if (v91 != v70)
      {
LABEL_99:
        v93 = v91;
        v94 = v91 - 4;
        v95 = v91 - 4 - v70;
        if (v95 < 0xBC
          || &v90[v86 - 4 - (v95 & 0xFFFFFFFFFFFFFFFCLL)] > &v90[v86 - 4]
          || &v94[-(v95 & 0xFFFFFFFFFFFFFFFCLL)] > v94
          || (unint64_t)(v94 - &v90[v86] + 4) < 0x20)
        {
          v96 = v93;
          this = v208;
        }
        else
        {
          v98 = (v95 >> 2) + 1;
          v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
          v96 = &v93[-v99];
          v92 -= v99;
          v100 = &v90[4 * v87 - 16];
          v101 = v93 - 16;
          v102 = v98 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v103 = *(_OWORD *)v101;
            *((_OWORD *)v100 - 1) = *((_OWORD *)v101 - 1);
            *(_OWORD *)v100 = v103;
            v100 -= 32;
            v101 -= 32;
            v102 -= 8;
          }
          while (v102);
          this = v208;
          if (v98 == (v98 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_102:
            v71 = &v90[4 * v89];
            __p = v92;
            v222 = v72;
            v223 = v71;
            if (!v70)
            {
LABEL_104:
              v70 = v92;
              goto LABEL_75;
            }
LABEL_103:
            operator delete(v70);
            goto LABEL_104;
          }
        }
        do
        {
          v97 = *((_DWORD *)v96 - 1);
          v96 -= 4;
          *((_DWORD *)v92 - 1) = v97;
          v92 -= 4;
        }
        while (v96 != v70);
        goto LABEL_102;
      }
    }
    else
    {
      v91 = v72;
      v90 = 0;
      v92 = (char *)(4 * v87);
      *(_DWORD *)(4 * v87) = v73;
      v72 = (char *)(4 * v87 + 4);
      if (v91 != v70)
        goto LABEL_99;
    }
    this = v208;
    v71 = &v90[4 * v89];
    __p = v92;
    v222 = v72;
    v223 = v71;
    if (!v70)
      goto LABEL_104;
    goto LABEL_103;
  }
  v72 = 0;
LABEL_116:
  if (*operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__ > 1
    && (operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v218, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 864);
    google::LogMessage::stream((google::LogMessage *)&v218);
    v104 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"/", 1);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v218);
  }
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v105 = (int *)__p;
  if (__p != v72)
  {
    v207 = (int *)v72;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    while (1)
    {
      v112 = *v105;
      v113 = *((_QWORD *)v208 + 23);
      v114 = (_DWORD *)(v113 + (v112 << 6));
      if ((unint64_t)v110 < v109)
      {
        *(_DWORD *)v110 = *v114;
        v110 += 4;
        v219 = v110;
        v115 = (_QWORD *)(v113 + (v112 << 6) + 8);
        v209 = (char *)v109;
        v210 = v110;
        if (v107 < v106)
          goto LABEL_126;
        goto LABEL_141;
      }
      v211 = v106;
      v116 = v110 - v108;
      v117 = (v110 - v108) >> 2;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v119 = v109 - (_QWORD)v108;
      v120 = (uint64_t)(v109 - (_QWORD)v108) >> 1;
      if (v120 > v118)
        v118 = v120;
      if (v119 >= 0x7FFFFFFFFFFFFFFCLL)
        v121 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v121 = v118;
      if (v121)
      {
        if (v121 >> 62)
          goto LABEL_236;
        v122 = v105;
        v123 = *((_QWORD *)v208 + 23);
        v124 = v112;
        v125 = v107;
        v126 = v110;
        v127 = v121;
        v128 = operator new(4 * v121);
        v110 = v126;
        v107 = v125;
        v112 = v124;
        v113 = v123;
        v105 = v122;
        v121 = v127;
        v129 = &v128[4 * v117];
        *v129 = *v114;
        v130 = (uint64_t)(v129 + 1);
        if (v110 != v108)
        {
LABEL_136:
          v131 = v110 - 4 - v108;
          if (v131 < 0xBC
            || &v128[v116 - 4 - (v131 & 0xFFFFFFFFFFFFFFFCLL)] > &v128[v116 - 4]
            || &v110[-(v131 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v110 - 4
            || (unint64_t)(v110 - &v128[v116]) < 0x20)
          {
            v132 = v110;
            v106 = v211;
          }
          else
          {
            v173 = (v131 >> 2) + 1;
            v174 = 4 * (v173 & 0x7FFFFFFFFFFFFFF8);
            v132 = &v110[-v174];
            v129 = (_DWORD *)((char *)v129 - v174);
            v175 = &v128[4 * v117 - 16];
            v176 = v110 - 16;
            v177 = v173 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v178 = *(_OWORD *)v176;
              *(v175 - 1) = *((_OWORD *)v176 - 1);
              *v175 = v178;
              v175 -= 2;
              v176 -= 32;
              v177 -= 8;
            }
            while (v177);
            v106 = v211;
            if (v173 == (v173 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_139:
              v218 = v129;
              v219 = (char *)v130;
              v209 = &v128[4 * v121];
              v220 = v209;
              if (v108)
                goto LABEL_140;
              goto LABEL_153;
            }
          }
          do
          {
            v133 = *((_DWORD *)v132 - 1);
            v132 -= 4;
            *--v129 = v133;
          }
          while (v132 != v108);
          goto LABEL_139;
        }
      }
      else
      {
        v128 = 0;
        v129 = (_DWORD *)(4 * v117);
        *(_DWORD *)(4 * v117) = *v114;
        v130 = 4 * v117 + 4;
        if (v110 != v108)
          goto LABEL_136;
      }
      v106 = v211;
      v218 = v129;
      v219 = (char *)v130;
      v209 = &v128[4 * v121];
      v220 = v209;
      if (v108)
      {
LABEL_140:
        operator delete(v108);
        v113 = *((_QWORD *)v208 + 23);
        v108 = (char *)v129;
        v110 = (char *)v130;
        v107 = v216;
        v106 = v217;
        v219 = (char *)v130;
        v115 = (_QWORD *)(v113 + (v112 << 6) + 8);
        v210 = (char *)v130;
        if (v216 < v217)
          goto LABEL_126;
        goto LABEL_141;
      }
LABEL_153:
      v108 = (char *)v129;
      v110 = (char *)v130;
      v219 = (char *)v130;
      v115 = (_QWORD *)(v113 + (v112 << 6) + 8);
      v210 = (char *)v130;
      if (v107 < v106)
      {
LABEL_126:
        *(_QWORD *)v107 = *v115;
        v107 += 8;
        goto LABEL_162;
      }
LABEL_141:
      v134 = v215;
      v135 = (char *)(v107 - v215);
      v136 = (v107 - v215) >> 3;
      v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v106 - v215) >> 2 > v137)
        v137 = (v106 - v215) >> 2;
      if ((unint64_t)(v106 - v215) >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v137;
      if (v138)
      {
        if (v138 >> 61)
LABEL_236:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v139 = v113;
        v140 = v112;
        v141 = v107;
        v142 = operator new(8 * v138);
        v110 = v210;
        v107 = v141;
        v112 = v140;
        v113 = v139;
        v143 = &v142[8 * v136];
        *(_QWORD *)v143 = *v115;
        v144 = (uint64_t)(v143 + 8);
        if (v107 == v215)
          goto LABEL_159;
      }
      else
      {
        v142 = 0;
        v143 = (char *)(8 * v136);
        *(_QWORD *)(8 * v136) = *v115;
        v144 = 8 * v136 + 8;
        if (v107 == v215)
          goto LABEL_159;
      }
      v145 = v107 - 8 - v215;
      if (v145 >= 0x168)
      {
        if (&v135[(_QWORD)v142 - 8 - (v145 & 0xFFFFFFFFFFFFFFF8)] > &v135[(_QWORD)v142 - 8])
        {
          v146 = v107;
        }
        else if (&v107[-(v145 & 0xFFFFFFFFFFFFFFF8) - 8] > v107 - 8)
        {
          v146 = v107;
        }
        else if ((unint64_t)(v107 - v142 - (_QWORD)v135) >= 0x20)
        {
          v179 = (v145 >> 3) + 1;
          v180 = 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
          v146 = &v107[-v180];
          v143 -= v180;
          v181 = &v142[8 * v136 - 16];
          v182 = v107 - 16;
          v183 = v179 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v184 = *(_OWORD *)v182;
            *(v181 - 1) = *((_OWORD *)v182 - 1);
            *v181 = v184;
            v181 -= 2;
            v182 -= 32;
            v183 -= 4;
          }
          while (v183);
          if (v179 == (v179 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_159;
        }
        else
        {
          v146 = v107;
        }
      }
      else
      {
        v146 = v107;
      }
      do
      {
        v147 = *((_QWORD *)v146 - 1);
        v146 -= 8;
        *((_QWORD *)v143 - 1) = v147;
        v143 -= 8;
      }
      while (v146 != v215);
LABEL_159:
      v106 = &v142[8 * v138];
      v215 = v143;
      v217 = v106;
      if (v134)
      {
        operator delete(v134);
        v110 = v210;
        v113 = *((_QWORD *)v208 + 23);
      }
      v107 = (char *)v144;
LABEL_162:
      v216 = v107;
      v148 = v113 + (v112 << 6);
      v151 = *(_QWORD *)(v148 + 24);
      v149 = v148 + 24;
      v150 = v151;
      if (v151 <= 1)
      v152 = (_QWORD *)(v149 + 8);
      if ((v150 & 1) != 0)
        v152 = (_QWORD *)*v152;
      v153 = *(_DWORD *)v152;
      v154 = v213;
      if (v213 >= v214)
      {
        v155 = v212;
        v156 = (v213 - v212) >> 2;
        v157 = v156 + 1;
        if ((unint64_t)(v156 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v158 = v214 - v212;
        if ((v214 - v212) >> 1 > v157)
          v157 = v158 >> 1;
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
          v159 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v159 = v157;
        if (v159)
        {
          if (v159 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v160 = v107;
          v161 = (char *)operator new(4 * v159);
          v110 = v210;
          v107 = v160;
          v162 = &v161[4 * v156];
          *(_DWORD *)v162 = v153;
          v111 = (uint64_t)(v162 + 4);
          if (v213 == v212)
            goto LABEL_183;
LABEL_177:
          v163 = v213 - 4 - v212;
          if (v163 < 0x2C)
            goto LABEL_248;
          if ((unint64_t)(v212 - v161) < 0x20)
            goto LABEL_248;
          v164 = (v163 >> 2) + 1;
          v165 = 4 * (v164 & 0x7FFFFFFFFFFFFFF8);
          v166 = &v213[-v165];
          v162 -= v165;
          v167 = &v161[4 * v156 - 16];
          v168 = (__int128 *)(v213 - 16);
          v169 = v164 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v170 = *v168;
            *((_OWORD *)v167 - 1) = *(v168 - 1);
            *(_OWORD *)v167 = v170;
            v167 -= 32;
            v168 -= 2;
            v169 -= 8;
          }
          while (v169);
          v154 = v166;
          if (v164 != (v164 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_248:
            do
            {
              v171 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *((_DWORD *)v162 - 1) = v171;
              v162 -= 4;
            }
            while (v154 != v212);
          }
        }
        else
        {
          v161 = 0;
          v162 = (char *)(4 * v156);
          *(_DWORD *)(4 * v156) = v153;
          v111 = 4 * v156 + 4;
          if (v213 != v212)
            goto LABEL_177;
        }
LABEL_183:
        v212 = v162;
        v214 = &v161[4 * v159];
        if (v155)
        {
          v172 = v107;
          operator delete(v155);
          v107 = v172;
          v110 = v210;
        }
        goto LABEL_123;
      }
      *(_DWORD *)v213 = v153;
      v111 = (uint64_t)(v213 + 4);
LABEL_123:
      v109 = (unint64_t)v209;
      v213 = (char *)v111;
      if (++v105 == v207)
      {
        v185 = v107;
        v186 = v218;
        v187 = v215;
        v188 = v212;
        goto LABEL_204;
      }
    }
  }
  v111 = 0;
  v188 = 0;
  v185 = 0;
  v187 = 0;
  v210 = 0;
  v186 = 0;
LABEL_204:
  v230 = 0;
  v189 = operator new(0x40uLL);
  *(_QWORD *)v189 = &off_24F983B10;
  v189[2] = v204;
  *((_QWORD *)v189 + 2) = v186;
  *((_QWORD *)v189 + 3) = (v210 - v186) >> 2;
  *((_QWORD *)v189 + 4) = v187;
  *((_QWORD *)v189 + 5) = (v185 - v187) >> 3;
  *((_QWORD *)v189 + 6) = v188;
  *((_QWORD *)v189 + 7) = (v111 - (uint64_t)v188) >> 2;
  v230 = v189;
  operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v189 + 2), (uint64_t)v201);
  v190 = v230;
  if (v230 == v229)
  {
    v190 = v229;
    v191 = 4;
  }
  else
  {
    if (!v230)
      goto LABEL_209;
    v191 = 5;
  }
  (*(void (**)(void))(*v190 + 8 * v191))();
LABEL_209:
  v192 = operations_research::sat::SatSolver::FinishPropagation(v205);
  if (v188)
    operator delete(v188);
  if (v187)
    operator delete(v187);
  this = v208;
  if (v186)
    operator delete(v186);
  v44 = v204;
  if (__p)
    operator delete(__p);
  v45 = (v200 + 1);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v224, v225[0]);
  v4 = v203;
  v6 = (uint64_t)v205;
  if ((v192 & 1) != 0)
    goto LABEL_218;
  if (v206)
    operator delete(v206);
LABEL_221:
  v193 = v226;
  if (v226)
  {
    v194 = v227;
    v195 = v226;
    if (v227 != v226)
    {
      v196 = v227;
      do
      {
        v198 = (void *)*((_QWORD *)v196 - 3);
        v196 -= 24;
        v197 = v198;
        if (v198)
        {
          *((_QWORD *)v194 - 2) = v197;
          operator delete(v197);
        }
        v194 = v196;
      }
      while (v196 != v193);
      v195 = v226;
    }
    v227 = v193;
    operator delete(v195);
  }
  return v45;
}

void sub_22DBBAEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;
  char *v35;
  char *v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a33, a34);
  if (a16)
  {
    operator delete(a16);
    v35 = *(char **)(v34 - 184);
    if (!v35)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v35 = *(char **)(v34 - 184);
    if (!v35)
      goto LABEL_5;
  }
  v37 = *(char **)(v34 - 176);
  v38 = v35;
  if (v37 != v35)
  {
    v39 = *(char **)(v34 - 176);
    do
    {
      v41 = (void *)*((_QWORD *)v39 - 3);
      v39 -= 24;
      v40 = v41;
      if (v41)
      {
        *((_QWORD *)v37 - 2) = v40;
        operator delete(v40);
      }
      v37 = v39;
    }
    while (v39 != v35);
    v38 = *(char **)(v34 - 184);
  }
  *(_QWORD *)(v34 - 176) = v35;
  operator delete(v38);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  operations_research::sat::SatSolver *v6;
  absl::lts_2020_02_25 *v7;
  int **v8;
  int **v9;
  uint64_t v10;
  int *v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15;
  uint64_t v16;
  absl::lts_2020_02_25 *v17;
  double v18;
  double v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE v24[16];

  if (*_MergedGlobals_16[0] >= 1
    && (_MergedGlobals_16[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_16, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 884);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Detecting GreaterThanAtLeastOneOf() constraints...", 50);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  v8 = (int **)*((_QWORD *)v7 + 38);
  v9 = (int **)*((_QWORD *)v7 + 39);
  if ((unint64_t)((char *)v9 - (char *)v8) > 0x7A11FF)
  {
    v10 = operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsWithClauseAutoDetection(this, a2);
LABEL_25:
    v20 = off_2540796C0[0];
    if (*off_2540796C0[0] < 1)
      return v10;
LABEL_26:
    if (v20 != &google::kLogSiteUninitialized
      || google::InitVLOG3__((google *)off_2540796C0, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 915);
      v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Added ", 6);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" GreaterThanAtLeastOneOf() constraints.", 39);
      google::LogMessage::~LogMessage((google::LogMessage *)v24);
    }
    return v10;
  }
  if (v8 == v9)
  {
    v10 = 0;
    v20 = off_2540796C0[0];
    if (*off_2540796C0[0] < 1)
      return v10;
    goto LABEL_26;
  }
  v10 = 0;
  while (1)
  {
    v11 = *v8;
    v12 = (unsigned __int8 *)v5[15];
    if (v12)
    {
      v13 = atomic_load(v12);
      if ((v13 & 1) != 0)
        return v10;
    }
    if (fmax(*((double *)v5 + 13) - *((double *)v5 + 14), 0.0) <= 0.0)
      return v10;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v7);
    v15 = CurrentTimeNanos;
    if (v5[3] <= CurrentTimeNanos - v5[1])
      v16 = CurrentTimeNanos - v5[1];
    else
      v16 = v5[3];
    operations_research::RunningMax<long long>::Add((int *)v5 + 8, v16);
    v5[1] = v15;
    if (*(_QWORD *)(v5[5] + 8 * *((int *)v5 + 17)) + v15 >= v5[2])
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_32;
      v18 = *((double *)v5 + 12);
      if (*((_BYTE *)v5 + 72))
      {
        v19 = v18 + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v17) - v5[10] + v5[11]) * -0.000000001;
        if (v19 <= 0.0001)
          goto LABEL_32;
      }
      else
      {
        v19 = v18 + (double)(uint64_t)v5[11] * -0.000000001;
        if (v19 <= 0.0001)
        {
LABEL_32:
          v5[2] = 0;
          return v10;
        }
      }
      v5[2] = v5[1] + (uint64_t)(v19 * 1000000000.0);
    }
    if (*((_BYTE *)v6 + 496))
      return v10;
    v7 = (absl::lts_2020_02_25 *)operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(this, v11 + 1, *v11, (uint64_t)a2);
    v10 = ((_DWORD)v7 + v10);
    if (++v8 == v9)
      goto LABEL_25;
  }
}

void sub_22DBBB3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DBBB3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this)
{
  operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;

  *(_QWORD *)this = &off_24F9877B0;
  *((_QWORD *)this + 5) = &unk_24F9877F0;
  v2 = (void *)*((_QWORD *)this + 71);
  if (v2)
  {
    *((_QWORD *)this + 72) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 68);
  if (v3)
  {
    *((_QWORD *)this + 69) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 65);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 62);
  if (v5)
    operator delete(v5);
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 448);
  v6 = (void *)*((_QWORD *)this + 53);
  if (v6)
  {
    *((_QWORD *)this + 54) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 50);
  if (v7)
  {
    *((_QWORD *)this + 51) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 47);
  if (v8)
  {
    *((_QWORD *)this + 48) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 44);
  if (v9)
  {
    v10 = *((_QWORD *)this + 45);
    v11 = (void *)*((_QWORD *)this + 44);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 45);
      do
      {
        v13 = *(_BYTE *)(v12 - 32);
        v12 -= 32;
        if ((v13 & 1) != 0)
          operator delete(*(void **)(v10 - 24));
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 44);
    }
    *((_QWORD *)this + 45) = v9;
    operator delete(v11);
  }
  v14 = (void *)*((_QWORD *)this + 41);
  if (v14)
  {
    *((_QWORD *)this + 42) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 38);
  if (v15)
  {
    *((_QWORD *)this + 39) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 35);
  if (v16)
  {
    *((_QWORD *)this + 36) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 32);
  if (v17)
  {
    *((_QWORD *)this + 33) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 29);
  if (v18)
  {
    v19 = *((_QWORD *)this + 30);
    v20 = (void *)*((_QWORD *)this + 29);
    if (v19 != v18)
    {
      do
      {
        if ((*(_BYTE *)(v19 - 40) & 1) != 0)
          operator delete(*(void **)(v19 - 32));
        v19 -= 64;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v18;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 26);
  if (v21)
  {
    v22 = *((_QWORD *)this + 27);
    v23 = (void *)*((_QWORD *)this + 26);
    if (v22 != v21)
    {
      v24 = *((_QWORD *)this + 27);
      do
      {
        v25 = *(_BYTE *)(v24 - 32);
        v24 -= 32;
        if ((v25 & 1) != 0)
          operator delete(*(void **)(v22 - 24));
        v22 = v24;
      }
      while (v24 != v21);
      v23 = (void *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v21;
    operator delete(v23);
  }
  v26 = *((_QWORD *)this + 23);
  if (v26)
  {
    v27 = *((_QWORD *)this + 24);
    v28 = (void *)*((_QWORD *)this + 23);
    if (v27 != v26)
    {
      do
      {
        if ((*(_BYTE *)(v27 - 40) & 1) != 0)
          operator delete(*(void **)(v27 - 32));
        v27 -= 64;
      }
      while (v27 != v26);
      v28 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v26;
    operator delete(v28);
  }
  v29 = *((_QWORD *)this + 20);
  if (v29)
  {
    v30 = *((_QWORD *)this + 21);
    v31 = (void *)*((_QWORD *)this + 20);
    if (v30 != v29)
    {
      v32 = *((_QWORD *)this + 21);
      do
      {
        v33 = *(_BYTE *)(v32 - 32);
        v32 -= 32;
        if ((v33 & 1) != 0)
          operator delete(*(void **)(v30 - 24));
        v30 = v32;
      }
      while (v32 != v29);
      v31 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v29;
    operator delete(v31);
  }
  v34 = (void *)*((_QWORD *)this + 17);
  if (v34)
  {
    *((_QWORD *)this + 18) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 11);
  if (v35)
  {
    *((_QWORD *)this + 12) = v35;
    operator delete(v35);
  }
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void `non-virtual thunk to'operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this)
{
  operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator((operations_research::sat::PrecedencesPropagator *)((char *)this - 40));
}

{
  operations_research::sat::PrecedencesPropagator::~PrecedencesPropagator((operations_research::sat::PrecedencesPropagator *)((char *)this - 40));
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24F987858;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F987858;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

char *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4"
                     "absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_I"
                                "KNS0_7LiteralEEESG_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEESG_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  operations_research::sat::GreaterThanAtLeastOneOfPropagator *v4;
  operations_research::sat::GenericLiteralWatcher *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *result;
  _QWORD *v9;

  v4 = (operations_research::sat::GreaterThanAtLeastOneOfPropagator *)operator new();
  operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator((uint64_t)v4, *(_DWORD *)a1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), a2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::GreaterThanAtLeastOneOfPropagator::RegisterWith(v4, v5);
  v6 = (_QWORD *)operator new();
  *v6 = &off_24F983B80;
  v6[1] = v4;
  v9 = v6;
  v7 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v7 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v9);
  }
  else
  {
    *v7 = v6;
    result = (char *)(v7 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DBBB638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40846E0A44);
  _Unwind_Resume(a1);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(uint64_t *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  int v63;
  uint64_t *v64;
  int v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char *v107;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;

  v9 = (uint64_t)result;
LABEL_2:
  v10 = (uint64_t *)(a2 - 12);
  v137 = a2 - 36;
  v138 = a2 - 24;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (uint64_t)&a2[-v11];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v11] >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 4))
        {
          v184 = *(_DWORD *)(v11 + 8);
          v158 = *(_QWORD *)v11;
          v98 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v11 = v98;
          *((_DWORD *)a2 - 1) = v184;
          *(_QWORD *)(a2 - 12) = v158;
        }
        return result;
      case 3uLL:
        v99 = v11 + 12;
        v100 = *(_QWORD *)(v11 + 16);
        v101 = *((_QWORD *)a2 - 1);
        if (v100 >= *(_QWORD *)(v11 + 4))
        {
          if (v101 < v100)
          {
            v118 = *(_QWORD *)v99;
            v119 = *(_DWORD *)(v11 + 20);
            v120 = *((_DWORD *)a2 - 1);
            *(_QWORD *)v99 = *v10;
            *(_DWORD *)(v11 + 20) = v120;
            *((_DWORD *)a2 - 1) = v119;
            *v10 = v118;
            goto LABEL_146;
          }
        }
        else if (v101 >= v100)
        {
          v188 = *(_DWORD *)(v11 + 8);
          v162 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *(_QWORD *)v99;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
          *(_QWORD *)v99 = v162;
          *(_DWORD *)(v11 + 20) = v188;
          if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 16))
          {
            v128 = *(_QWORD *)v99;
            v129 = *(_DWORD *)(v11 + 20);
            v130 = *((_DWORD *)a2 - 1);
            *(_QWORD *)v99 = *v10;
            *(_DWORD *)(v11 + 20) = v130;
            *((_DWORD *)a2 - 1) = v129;
            *v10 = v128;
          }
        }
        else
        {
          v185 = *(_DWORD *)(v11 + 8);
          v159 = *(_QWORD *)v11;
          v102 = *v10;
          *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v11 = v102;
          *((_DWORD *)a2 - 1) = v185;
          *v10 = v159;
        }
        return result;
      case 4uLL:
        v99 = v11 + 12;
        v103 = (uint64_t *)(v11 + 24);
        v104 = *(_QWORD *)(v11 + 16);
        v105 = *(_QWORD *)(v11 + 28);
        if (v104 >= *(_QWORD *)(v11 + 4))
        {
          if (v105 < v104)
          {
            v121 = *(_DWORD *)(v11 + 20);
            v122 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v122;
            *(_DWORD *)(v11 + 32) = v121;
            if (*(_QWORD *)(v11 + 16) < *(_QWORD *)(v11 + 4))
            {
              v187 = *(_DWORD *)(v11 + 8);
              v161 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v99;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
              *(_QWORD *)v99 = v161;
              *(_DWORD *)(v11 + 20) = v187;
            }
          }
        }
        else
        {
          if (v105 >= v104)
          {
            v189 = *(_DWORD *)(v11 + 8);
            v163 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)v99;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
            *(_QWORD *)v99 = v163;
            *(_DWORD *)(v11 + 20) = v189;
            if (v105 >= *(_QWORD *)(v11 + 16))
              goto LABEL_143;
            v106 = *(_DWORD *)(v11 + 20);
            v131 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v131;
          }
          else
          {
            v186 = *(_DWORD *)(v11 + 8);
            v160 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *v103;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 32);
            *v103 = v160;
            v106 = v186;
          }
          *(_DWORD *)(v11 + 32) = v106;
        }
LABEL_143:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)(v11 + 28))
        {
          v132 = *v103;
          v133 = *(_DWORD *)(v11 + 32);
          v134 = *((_DWORD *)a2 - 1);
          *v103 = *v10;
          *(_DWORD *)(v11 + 32) = v134;
          *((_DWORD *)a2 - 1) = v133;
          *v10 = v132;
          if (*(_QWORD *)(v11 + 28) < *(_QWORD *)(v11 + 16))
          {
            v135 = *(_DWORD *)(v11 + 20);
            v136 = *(_QWORD *)v99;
            *(_QWORD *)v99 = *v103;
            *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
            *v103 = v136;
            *(_DWORD *)(v11 + 32) = v135;
LABEL_146:
            if (*(_QWORD *)(v11 + 16) < *(_QWORD *)(v11 + 4))
            {
              v190 = *(_DWORD *)(v11 + 8);
              v164 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v99;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v99 + 8);
              *(_QWORD *)v99 = v164;
              *(_DWORD *)(v99 + 8) = v190;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)v11, (uint64_t *)(v11 + 12), (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 36), (uint64_t *)(a2 - 12));
      default:
        if (v12 > 287)
        {
          if (!a4)
          {
            if ((char *)v11 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((char *)v11, a2, (uint64_t *)a2);
            return result;
          }
          v14 = v13 >> 1;
          v15 = v11 + 12 * (v13 >> 1);
          v16 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v12 < 0x601)
          {
            v20 = *(_QWORD *)(v11 + 4);
            v21 = (_QWORD *)(v11 + 4 + 12 * v14);
            if (v20 >= *v21)
            {
              if (v16 < v20)
              {
                v169 = *(_DWORD *)(v11 + 8);
                v143 = *(_QWORD *)v11;
                v25 = *v10;
                *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v11 = v25;
                *((_DWORD *)a2 - 1) = v169;
                *v10 = v143;
                if (*(_QWORD *)(v11 + 4) < *v21)
                {
                  v170 = *(_DWORD *)(v15 + 8);
                  v144 = *(_QWORD *)v15;
                  v26 = *(_QWORD *)v11;
                  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                  *(_QWORD *)v15 = v26;
                  *(_DWORD *)(v11 + 8) = v170;
                  *(_QWORD *)v11 = v144;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v16 >= v20)
              {
                v173 = *(_DWORD *)(v15 + 8);
                v147 = *(_QWORD *)v15;
                v43 = *(_QWORD *)v11;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                *(_QWORD *)v15 = v43;
                *(_DWORD *)(v11 + 8) = v173;
                *(_QWORD *)v11 = v147;
                if (*((_QWORD *)a2 - 1) >= *(_QWORD *)(v11 + 4))
                  goto LABEL_32;
                v166 = *(_DWORD *)(v11 + 8);
                v140 = *(_QWORD *)v11;
                v44 = *v10;
                *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v11 = v44;
              }
              else
              {
                v166 = *(_DWORD *)(v15 + 8);
                v140 = *(_QWORD *)v15;
                v22 = *v10;
                *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v15 = v22;
              }
              *((_DWORD *)a2 - 1) = v166;
              *v10 = v140;
            }
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v45 = *(_QWORD *)(v11 + 4);
            if (*(_QWORD *)(v11 - 8) < v45)
              goto LABEL_55;
            if (v45 >= *((_QWORD *)a2 - 1))
            {
              v88 = v11 + 12;
              do
              {
                v11 = v88;
                if (v88 >= (unint64_t)a2)
                  break;
                v89 = *(_QWORD *)(v88 + 4);
                v88 += 12;
              }
              while (v45 >= v89);
            }
            else
            {
              v86 = v11;
              do
              {
                v11 = v86 + 12;
                v87 = *(_QWORD *)(v86 + 16);
                v86 += 12;
              }
              while (v45 >= v87);
            }
            v90 = a2;
            if (v11 < (unint64_t)a2)
            {
              v91 = a2;
              do
              {
                v90 = v91 - 12;
                v92 = *((_QWORD *)v91 - 1);
                v91 -= 12;
              }
              while (v45 < v92);
            }
            v93 = *(_DWORD *)v9;
            while (v11 < (unint64_t)v90)
            {
              v183 = *(_DWORD *)(v11 + 8);
              v157 = *(_QWORD *)v11;
              v94 = *(_QWORD *)v90;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)v90 + 2);
              *(_QWORD *)v11 = v94;
              *((_DWORD *)v90 + 2) = v183;
              *(_QWORD *)v90 = v157;
              do
              {
                v95 = *(_QWORD *)(v11 + 16);
                v11 += 12;
              }
              while (v45 >= v95);
              do
              {
                v96 = *((_QWORD *)v90 - 1);
                v90 -= 12;
              }
              while (v45 < v96);
            }
            if (v11 - 12 != v9)
            {
              v97 = *(_QWORD *)(v11 - 12);
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
              *(_QWORD *)v9 = v97;
            }
            a5 = 0;
            *(_DWORD *)(v11 - 12) = v93;
            *(_QWORD *)(v11 - 8) = v45;
            continue;
          }
          v17 = (uint64_t *)(v11 + 4 + 12 * v14);
          v18 = *v17;
          if (*v17 >= *(_QWORD *)(v11 + 4))
          {
            if (v16 < v18)
            {
              v167 = *(_DWORD *)(v15 + 8);
              v141 = *(_QWORD *)v15;
              v23 = *v10;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v15 = v23;
              *((_DWORD *)a2 - 1) = v167;
              *v10 = v141;
              if (*v17 < *(_QWORD *)(v11 + 4))
              {
                v168 = *(_DWORD *)(v11 + 8);
                v142 = *(_QWORD *)v11;
                v24 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v24;
                *(_DWORD *)(v15 + 8) = v168;
                *(_QWORD *)v15 = v142;
              }
            }
          }
          else
          {
            if (v16 >= v18)
            {
              v171 = *(_DWORD *)(v11 + 8);
              v145 = *(_QWORD *)v11;
              v27 = *(_QWORD *)v15;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
              *(_QWORD *)v11 = v27;
              *(_DWORD *)(v15 + 8) = v171;
              *(_QWORD *)v15 = v145;
              if (*((_QWORD *)a2 - 1) >= *v17)
                goto LABEL_23;
              v165 = *(_DWORD *)(v15 + 8);
              v139 = *(_QWORD *)v15;
              v28 = *v10;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v15 = v28;
            }
            else
            {
              v165 = *(_DWORD *)(v11 + 8);
              v139 = *(_QWORD *)v11;
              v19 = *v10;
              *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v11 = v19;
            }
            *((_DWORD *)a2 - 1) = v165;
            *v10 = v139;
          }
LABEL_23:
          v29 = (uint64_t *)(v11 + 12);
          v30 = v11 + 12 * v14;
          v33 = *(_QWORD *)(v30 - 8);
          v31 = v30 - 8;
          v32 = v33;
          v34 = (uint64_t *)(v31 - 4);
          v35 = *(_QWORD *)(a2 - 20);
          if (v33 >= *(_QWORD *)(v11 + 16))
          {
            if (v35 < v32)
            {
              v172 = *(_DWORD *)(v31 + 4);
              v146 = *v34;
              v39 = *(_QWORD *)v138;
              *(_DWORD *)(v31 + 4) = *((_DWORD *)a2 - 4);
              *v34 = v39;
              *((_DWORD *)a2 - 4) = v172;
              *(_QWORD *)v138 = v146;
              if (*(_QWORD *)v31 < *(_QWORD *)(v11 + 16))
              {
                v40 = *v29;
                v41 = *(_DWORD *)(v11 + 20);
                v42 = *(_DWORD *)(v31 + 4);
                *v29 = *v34;
                *(_DWORD *)(v11 + 20) = v42;
                *(_DWORD *)(v31 + 4) = v41;
                *v34 = v40;
              }
            }
          }
          else if (v35 >= v32)
          {
            v46 = *v29;
            v47 = *(_DWORD *)(v11 + 20);
            v48 = *(_DWORD *)(v31 + 4);
            *v29 = *v34;
            *(_DWORD *)(v11 + 20) = v48;
            *(_DWORD *)(v31 + 4) = v47;
            *v34 = v46;
            if (*(_QWORD *)(a2 - 20) < *(_QWORD *)v31)
            {
              v174 = *(_DWORD *)(v31 + 4);
              v148 = *v34;
              v49 = *(_QWORD *)v138;
              *(_DWORD *)(v31 + 4) = *((_DWORD *)a2 - 4);
              *v34 = v49;
              *((_DWORD *)a2 - 4) = v174;
              *(_QWORD *)v138 = v148;
            }
          }
          else
          {
            v36 = *v29;
            v37 = *(_DWORD *)(v11 + 20);
            result = (uint64_t *)(a2 - 24);
            v38 = *((_DWORD *)a2 - 4);
            *v29 = *(_QWORD *)v138;
            *(_DWORD *)(v11 + 20) = v38;
            *((_DWORD *)a2 - 4) = v37;
            *(_QWORD *)v138 = v36;
          }
          v50 = (uint64_t **)(v11 + 24);
          v51 = v11 + 12 * v14;
          v54 = *(_QWORD *)(v51 + 16);
          v52 = v51 + 16;
          v53 = v54;
          v55 = (uint64_t **)(v52 - 4);
          v56 = *((_QWORD *)a2 - 4);
          if (v54 >= *(_QWORD *)(v11 + 28))
          {
            if (v56 < v53)
            {
              v175 = *(_DWORD *)(v52 + 4);
              v149 = *v55;
              v60 = *(uint64_t **)v137;
              *(_DWORD *)(v52 + 4) = *((_DWORD *)a2 - 7);
              *v55 = v60;
              *((_DWORD *)a2 - 7) = v175;
              *(_QWORD *)v137 = v149;
              if (*(_QWORD *)v52 < *(_QWORD *)(v11 + 28))
              {
                v61 = *v50;
                v62 = *(_DWORD *)(v11 + 32);
                v63 = *(_DWORD *)(v52 + 4);
                result = *v55;
                *v50 = *v55;
                *(_DWORD *)(v11 + 32) = v63;
                *(_DWORD *)(v52 + 4) = v62;
                *v55 = v61;
              }
            }
          }
          else if (v56 >= v53)
          {
            v64 = *v50;
            v65 = *(_DWORD *)(v11 + 32);
            v66 = *(_DWORD *)(v52 + 4);
            result = *v55;
            *v50 = *v55;
            *(_DWORD *)(v11 + 32) = v66;
            *(_DWORD *)(v52 + 4) = v65;
            *v55 = v64;
            if (*((_QWORD *)a2 - 4) < *(_QWORD *)v52)
            {
              v176 = *(_DWORD *)(v52 + 4);
              v150 = *v55;
              v67 = *(uint64_t **)v137;
              *(_DWORD *)(v52 + 4) = *((_DWORD *)a2 - 7);
              *v55 = v67;
              *((_DWORD *)a2 - 7) = v176;
              *(_QWORD *)v137 = v150;
            }
          }
          else
          {
            v57 = *v50;
            v58 = *(_DWORD *)(v11 + 32);
            v59 = *((_DWORD *)a2 - 7);
            result = *(uint64_t **)v137;
            *v50 = *(uint64_t **)v137;
            *(_DWORD *)(v11 + 32) = v59;
            *((_DWORD *)a2 - 7) = v58;
            *(_QWORD *)v137 = v57;
          }
          v68 = *v17;
          v69 = *(_QWORD *)v52;
          if (*v17 >= *(_QWORD *)v31)
          {
            if (v69 < v68)
            {
              v178 = *(_DWORD *)(v15 + 8);
              v152 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v55;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v52 + 4);
              *(_DWORD *)(v52 + 4) = v178;
              *v55 = (uint64_t *)v152;
              if (*v17 < *(_QWORD *)v31)
              {
                v179 = *(_DWORD *)(v31 + 4);
                v153 = *v34;
                *v34 = *(_QWORD *)v15;
                *(_DWORD *)(v31 + 4) = *(_DWORD *)(v15 + 8);
                *(_DWORD *)(v15 + 8) = v179;
                *(_QWORD *)v15 = v153;
              }
            }
          }
          else
          {
            if (v69 >= v68)
            {
              v180 = *(_DWORD *)(v31 + 4);
              v154 = *v34;
              *v34 = *(_QWORD *)v15;
              *(_DWORD *)(v31 + 4) = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v180;
              *(_QWORD *)v15 = v154;
              if (*(_QWORD *)v52 >= *v17)
                goto LABEL_53;
              v177 = *(_DWORD *)(v15 + 8);
              v151 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v55;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v52 + 4);
            }
            else
            {
              v177 = *(_DWORD *)(v31 + 4);
              v151 = *v34;
              *v34 = (uint64_t)*v55;
              *(_DWORD *)(v31 + 4) = *(_DWORD *)(v52 + 4);
            }
            *(_DWORD *)(v52 + 4) = v177;
            *v55 = (uint64_t *)v151;
          }
LABEL_53:
          v181 = *(_DWORD *)(v11 + 8);
          v155 = *(_QWORD *)v11;
          v70 = *(_QWORD *)v15;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v11 = v70;
          *(_DWORD *)(v15 + 8) = v181;
          *(_QWORD *)v15 = v155;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v45 = *(_QWORD *)(v11 + 4);
LABEL_55:
          v71 = 0;
          v72 = *(_DWORD *)v11;
          do
          {
            v73 = *(_QWORD *)(v11 + v71 + 16);
            v71 += 12;
          }
          while (v73 < v45);
          v74 = v11 + v71;
          v75 = a2;
          if (v71 == 12)
          {
            v78 = a2;
            while (v74 < (unint64_t)v78)
            {
              v76 = v78 - 12;
              v79 = *((_QWORD *)v78 - 1);
              v78 -= 12;
              if (v79 < v45)
                goto LABEL_63;
            }
            v76 = v78;
            v11 = v74;
          }
          else
          {
            do
            {
              v76 = v75 - 12;
              v77 = *((_QWORD *)v75 - 1);
              v75 -= 12;
            }
            while (v77 >= v45);
LABEL_63:
            v11 = v74;
            if (v74 < (unint64_t)v76)
            {
              v80 = (unint64_t)v76;
              do
              {
                v182 = *(_DWORD *)(v11 + 8);
                v156 = *(_QWORD *)v11;
                v81 = *(_QWORD *)v80;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v80 + 8);
                *(_QWORD *)v11 = v81;
                *(_DWORD *)(v80 + 8) = v182;
                *(_QWORD *)v80 = v156;
                do
                {
                  v82 = *(_QWORD *)(v11 + 16);
                  v11 += 12;
                }
                while (v82 < v45);
                do
                {
                  v83 = *(_QWORD *)(v80 - 8);
                  v80 -= 12;
                }
                while (v83 >= v45);
              }
              while (v11 < v80);
            }
          }
          if (v11 - 12 != v9)
          {
            v84 = *(_QWORD *)(v11 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
            *(_QWORD *)v9 = v84;
          }
          *(_DWORD *)(v11 - 12) = v72;
          *(_QWORD *)(v11 - 8) = v45;
          if (v74 < (unint64_t)v76)
            goto LABEL_74;
          v85 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(v9, (uint64_t *)(v11 - 12));
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(v11, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v85)
              continue;
LABEL_74:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(v9, v11 - 12, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (char *)(v11 - 12);
          if (v85)
            return result;
          goto LABEL_2;
        }
        v107 = (char *)(v11 + 12);
        v109 = (char *)v11 == a2 || v107 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v109)
          {
            v110 = 0;
            v111 = v11;
            do
            {
              v113 = *(_QWORD *)(v111 + 16);
              v114 = *(_QWORD *)(v111 + 4);
              v111 = (unint64_t)v107;
              if (v113 < v114)
              {
                v115 = *(_DWORD *)v107;
                v116 = v110;
                do
                {
                  v117 = v11 + v116;
                  *(_QWORD *)(v117 + 12) = *(_QWORD *)(v11 + v116);
                  *(_DWORD *)(v117 + 20) = *(_DWORD *)(v11 + v116 + 8);
                  if (!v116)
                  {
                    v112 = v11;
                    goto LABEL_117;
                  }
                  v116 -= 12;
                }
                while (v113 < *(_QWORD *)(v117 - 8));
                v112 = v11 + v116 + 12;
LABEL_117:
                *(_DWORD *)v112 = v115;
                *(_QWORD *)(v112 + 4) = v113;
              }
              v107 = (char *)(v111 + 12);
              v110 += 12;
            }
            while ((char *)(v111 + 12) != a2);
          }
        }
        else if (!v109)
        {
          do
          {
            v123 = *(_QWORD *)(v9 + 16);
            v124 = *(_QWORD *)(v9 + 4);
            v9 = (uint64_t)v107;
            if (v123 < v124)
            {
              v125 = *(_DWORD *)v107;
              do
              {
                v126 = v107;
                v127 = *(_QWORD *)(v107 - 12);
                v107 -= 12;
                *(_QWORD *)v126 = v127;
                *((_DWORD *)v126 + 2) = *((_DWORD *)v126 - 1);
              }
              while (v123 < *(_QWORD *)(v126 - 20));
              *(_DWORD *)v107 = v125;
              *(_QWORD *)(v107 + 4) = v123;
            }
            v107 = (char *)(v9 + 12);
          }
          while ((char *)(v9 + 12) != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;

  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(a2 - 1) < *(_QWORD *)(a1 + 4))
      {
        v10 = *(_DWORD *)(a1 + 8);
        v11 = *(_QWORD *)a1;
        v12 = *((_DWORD *)a2 - 1);
        *(_QWORD *)a1 = *(uint64_t *)((char *)a2 - 12);
        *(_DWORD *)(a1 + 8) = v12;
        *(uint64_t *)((char *)a2 - 12) = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      v13 = (uint64_t *)(a1 + 12);
      v14 = (uint64_t *)((char *)a2 - 12);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(a2 - 1);
      if (v15 >= *(_QWORD *)(a1 + 4))
      {
        if (v16 >= v15)
          return 1;
        v29 = *(_DWORD *)(a1 + 20);
        v30 = *v13;
        v31 = *((_DWORD *)a2 - 1);
        *v13 = *v14;
        goto LABEL_45;
      }
      if (v16 < v15)
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
        v19 = *((_DWORD *)a2 - 1);
        *(_QWORD *)a1 = *v14;
        *(_DWORD *)(a1 + 8) = v19;
        *v14 = v18;
        *((_DWORD *)a2 - 1) = v17;
        return 1;
      }
      v48 = *(_DWORD *)(a1 + 8);
      v49 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v13 = v49;
      *(_DWORD *)(a1 + 20) = v48;
      if (*(a2 - 1) < *(_QWORD *)(a1 + 16))
      {
        v50 = *(_DWORD *)(a1 + 20);
        v51 = *v13;
        v52 = *((_DWORD *)a2 - 1);
        *v13 = *v14;
        *(_DWORD *)(a1 + 20) = v52;
        *v14 = v51;
        *((_DWORD *)a2 - 1) = v50;
        return 1;
      }
      return 1;
    case 4uLL:
      v13 = (uint64_t *)(a1 + 12);
      v14 = (uint64_t *)(a1 + 24);
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 4);
      v22 = *(_QWORD *)(a1 + 28);
      if (v20 >= v21)
      {
        if (v22 < v20)
        {
          v32 = *(_DWORD *)(a1 + 20);
          v33 = *v13;
          *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v14 = v33;
          *(_DWORD *)(a1 + 32) = v32;
          if (*(_QWORD *)(a1 + 16) < v21)
          {
            v34 = *(_DWORD *)(a1 + 8);
            v35 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v13;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v13 = v35;
            *(_DWORD *)(a1 + 20) = v34;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          v53 = *(_DWORD *)(a1 + 8);
          v54 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *v13 = v54;
          *(_DWORD *)(a1 + 20) = v53;
          if (v22 >= *(_QWORD *)(a1 + 16))
            goto LABEL_42;
          v23 = *(_DWORD *)(a1 + 20);
          v24 = *v13;
          *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          v23 = *(_DWORD *)(a1 + 8);
          v24 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v14;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        *v14 = v24;
        *(_DWORD *)(a1 + 32) = v23;
      }
LABEL_42:
      if (*(a2 - 1) >= *(_QWORD *)(a1 + 28))
        return 1;
      v55 = (uint64_t)a2 - 12;
      v56 = *(_DWORD *)(a1 + 32);
      v57 = *v14;
      v58 = *((_DWORD *)a2 - 1);
      *v14 = *(uint64_t *)((char *)a2 - 12);
      *(_DWORD *)(a1 + 32) = v58;
      *(_QWORD *)v55 = v57;
      *(_DWORD *)(v55 + 8) = v56;
      if (*(_QWORD *)(a1 + 28) >= *(_QWORD *)(a1 + 16))
        return 1;
      v29 = *(_DWORD *)(a1 + 20);
      v30 = *v13;
      *v13 = *v14;
      v31 = *(_DWORD *)(a1 + 32);
LABEL_45:
      *((_DWORD *)v13 + 2) = v31;
      *v14 = v30;
      *((_DWORD *)v14 + 2) = v29;
      if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a1 + 4))
        return 1;
      v59 = *(_DWORD *)(a1 + 8);
      v60 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)v13 + 2);
      *v13 = v60;
      *((_DWORD *)v13 + 2) = v59;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      v3 = (uint64_t *)(a1 + 24);
      v4 = (uint64_t *)(a1 + 12);
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 4);
      v7 = *(_QWORD *)(a1 + 28);
      if (v5 >= v6)
      {
        if (v7 < v5)
        {
          v25 = *(_DWORD *)(a1 + 20);
          v26 = *v4;
          *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v3 = v26;
          *(_DWORD *)(a1 + 32) = v25;
          if (*(_QWORD *)(a1 + 16) < v6)
          {
            v27 = *(_DWORD *)(a1 + 8);
            v28 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v4;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v4 = v28;
            *(_DWORD *)(a1 + 20) = v27;
          }
        }
      }
      else if (v7 >= v5)
      {
        v36 = *(_DWORD *)(a1 + 8);
        v37 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v4 = v37;
        *(_DWORD *)(a1 + 20) = v36;
        if (v7 < *(_QWORD *)(a1 + 16))
        {
          v38 = *(_DWORD *)(a1 + 20);
          v39 = *v4;
          *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *v3 = v39;
          *(_DWORD *)(a1 + 32) = v38;
        }
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v3;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        *v3 = v9;
        *(_DWORD *)(a1 + 32) = v8;
      }
      v40 = (uint64_t *)(a1 + 36);
      if ((uint64_t *)(a1 + 36) == a2)
        return 1;
      v41 = 0;
      v42 = 0;
      break;
  }
  while (1)
  {
    v43 = *(uint64_t *)((char *)v40 + 4);
    if (v43 < *(uint64_t *)((char *)v3 + 4))
      break;
LABEL_35:
    v3 = v40;
    v41 += 12;
    v40 = (uint64_t *)((char *)v40 + 12);
    if (v40 == a2)
      return 1;
  }
  v44 = *(_DWORD *)v40;
  v45 = v41;
  do
  {
    v46 = a1 + v45;
    *(_QWORD *)(v46 + 36) = *(_QWORD *)(a1 + v45 + 24);
    *(_DWORD *)(v46 + 44) = *(_DWORD *)(a1 + v45 + 32);
    if (v45 == -24)
    {
      *(_DWORD *)a1 = v44;
      *(_QWORD *)(a1 + 4) = v43;
      if (++v42 != 8)
        goto LABEL_35;
      return (uint64_t *)((char *)v40 + 12) == a2;
    }
    v45 -= 12;
  }
  while (v43 < *(_QWORD *)(v46 + 16));
  v47 = a1 + v45;
  *(_DWORD *)(v47 + 36) = v44;
  *(_QWORD *)(v47 + 40) = v43;
  if (++v42 != 8)
    goto LABEL_35;
  return (uint64_t *)((char *)v40 + 12) == a2;
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>(void **a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v4 = (void **)*a1;
  v3 = (void **)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 6;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 5 > v6)
    v6 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v6 = 0x3FFFFFFFFFFFFFFLL;
  if (v6 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = v6 << 6;
  v10 = (char *)operator new(v6 << 6);
  v11 = &v10[64 * v5];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = &v10[v9];
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 24) = 0;
  v13 = *(_BYTE *)(a2 + 56);
  v14 = v11 + 64;
  v11[56] = v13;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_17;
  }
  v15 = 0;
  do
  {
    v16 = &v11[v15 * 8];
    v17 = *(_OWORD *)&v3[v15 - 8];
    *((_DWORD *)v16 - 12) = v3[v15 - 6];
    *((_OWORD *)v16 - 4) = v17;
    *((_QWORD *)v16 - 5) = v3[v15 - 5];
    v18 = *(_OWORD *)&v3[v15 - 4];
    *((_QWORD *)v16 - 2) = v3[v15 - 2];
    *((_OWORD *)v16 - 2) = v18;
    v3[v15 - 5] = 0;
    *(v16 - 8) = (char)v3[v15 - 1];
    v15 -= 8;
  }
  while (&v3[v15] != v4);
  *a1 = &v11[v15 * 8];
  a1[1] = v14;
  a1[2] = v12;
  if (v3 != v4)
  {
    do
    {
      if ((*(_BYTE *)(v3 - 5) & 1) != 0)
        operator delete(*(v3 - 4));
      v3 -= 8;
    }
    while (v3 != v4);
    v3 = v4;
  }
  if (v3)
LABEL_17:
    operator delete(v3);
  return v14;
}

uint64_t std::__split_buffer<operations_research::sat::PrecedencesPropagator::ArcInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if ((*(_BYTE *)(v2 - 40) & 1) != 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>,gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DBBCE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__construct_one_at_end[abi:ne180100]<operations_research::sat::PrecedencesPropagator::ArcInfo const&>(char *result, __int128 *a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  __int128 v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  int v19;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *a2;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v4 = v5;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = *((_QWORD *)a2 + 3);
  if ((v6 & 1) != 0)
  {
    v8 = (int *)*((_QWORD *)a2 + 4);
    v9 = v6 >> 1;
    if (v6 < 0xE)
    {
      v11 = 0;
      if (v6 < 2)
      {
LABEL_18:
        *(_QWORD *)(v4 + 24) = v11 | v6 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_19;
      }
      result = (char *)(v4 + 32);
      v12 = 0;
    }
    else
    {
      if (v9 <= 0xC)
        v10 = 12;
      else
        v10 = v6 >> 1;
      if (v10 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      result = (char *)operator new(4 * v10);
      *(_QWORD *)(v4 + 32) = result;
      *(_QWORD *)(v4 + 40) = v10;
      v11 = 1;
      *(_QWORD *)(v4 + 24) = 1;
      v12 = 0;
      if (v6 >= 0x10 && (unint64_t)(result - (char *)v8) >= 0x20)
      {
        v12 = v9 & 0x7FFFFFFFFFFFFFF8;
        v13 = result + 16;
        v14 = (__int128 *)(v8 + 4);
        v15 = v9 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *v13 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        v8 += v9 & 0x7FFFFFFFFFFFFFF8;
        if (v9 == v12)
          goto LABEL_18;
      }
    }
    v17 = v9 - v12;
    v18 = &result[4 * v12];
    do
    {
      v19 = *v8++;
      *(_DWORD *)v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
    goto LABEL_18;
  }
  *(_QWORD *)(v4 + 24) = v6;
  v7 = a2[2];
  *(_QWORD *)(v4 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v4 + 32) = v7;
LABEL_19:
  *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
  *((_QWORD *)v3 + 1) = v4 + 64;
  return result;
}

void sub_22DBBCFA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    operator delete(*(void **)(v2 + 32));
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo const&>(void **a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  int v34;
  unint64_t v36;
  char *v37;
  uint64_t v38;

  v4 = (void **)*a1;
  v3 = (void **)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 6;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 58)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v8 >> 5 > v6)
    v6 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 58)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v5];
  v12 = &v10[64 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = 0;
  v13 = (unint64_t *)(v11 + 24);
  v14 = *(_QWORD *)(a2 + 24);
  if ((v14 & 1) != 0)
  {
    v21 = *(int **)(a2 + 32);
    v22 = v14 >> 1;
    if (v14 < 0xE)
    {
      v26 = 0;
      if (v14 < 2)
        goto LABEL_33;
      v38 = v5;
      v24 = &v10[64 * v5 + 32];
      v27 = 0;
    }
    else
    {
      v37 = v12;
      v38 = v5;
      v36 = v14 >> 1;
      if (v22 <= 0xC)
        v23 = 12;
      else
        v23 = v14 >> 1;
      if (v23 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = (char *)operator new(4 * v23);
      v12 = v37;
      v25 = &v10[64 * v38];
      *((_QWORD *)v25 + 4) = v24;
      *((_QWORD *)v25 + 5) = v23;
      v26 = 1;
      *v13 = 1;
      v22 = v14 >> 1;
      v27 = 0;
      if (v14 >= 0x10)
      {
        v5 = v38;
        if ((unint64_t)(v24 - (char *)v21) >= 0x20)
        {
          v27 = v36 & 0x7FFFFFFFFFFFFFF8;
          v28 = v24 + 16;
          v29 = (__int128 *)(v21 + 4);
          v30 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = *v29;
            *(v28 - 1) = *(v29 - 1);
            *v28 = v31;
            v28 += 2;
            v29 += 2;
            v30 -= 8;
          }
          while (v30);
          v21 += v36 & 0x7FFFFFFFFFFFFFF8;
          if (v36 == v27)
          {
LABEL_33:
            *v13 = v26 | v14 & 0xFFFFFFFFFFFFFFFELL;
            v10[64 * v5 + 56] = *(_BYTE *)(a2 + 56);
            v15 = v11 + 64;
            if (v3 != v4)
              goto LABEL_13;
LABEL_34:
            *a1 = v11;
            a1[1] = v15;
            a1[2] = v12;
            goto LABEL_39;
          }
        }
LABEL_31:
        v32 = v22 - v27;
        v33 = &v24[4 * v27];
        do
        {
          v34 = *v21++;
          *(_DWORD *)v33 = v34;
          v33 += 4;
          --v32;
        }
        while (v32);
        goto LABEL_33;
      }
    }
    v5 = v38;
    goto LABEL_31;
  }
  *v13 = v14;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  v10[64 * v5 + 56] = *(_BYTE *)(a2 + 56);
  v15 = v11 + 64;
  if (v3 == v4)
    goto LABEL_34;
LABEL_13:
  v16 = 0;
  do
  {
    v17 = &v11[v16 * 8];
    v18 = *(_OWORD *)&v3[v16 - 8];
    *((_DWORD *)v17 - 12) = v3[v16 - 6];
    *((_OWORD *)v17 - 4) = v18;
    *((_QWORD *)v17 - 5) = v3[v16 - 5];
    v19 = *(_OWORD *)&v3[v16 - 4];
    *((_QWORD *)v17 - 2) = v3[v16 - 2];
    *((_OWORD *)v17 - 2) = v19;
    v3[v16 - 5] = 0;
    *(v17 - 8) = (char)v3[v16 - 1];
    v16 -= 8;
  }
  while (&v3[v16] != v4);
  v20 = (void **)*a1;
  v3 = (void **)a1[1];
  *a1 = &v11[v16 * 8];
  a1[1] = v15;
  a1[2] = v12;
  if (v3 != v20)
  {
    do
    {
      if ((*(_BYTE *)(v3 - 5) & 1) != 0)
        operator delete(*(v3 - 4));
      v3 -= 8;
    }
    while (v3 != v20);
    v3 = v20;
  }
LABEL_39:
  if (v3)
    operator delete(v3);
  return v15;
}

void sub_22DBBD29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  _BYTE *v5;
  va_list va;

  va_start(va, a4);
  if ((*v5 & 1) != 0)
    operator delete(*(void **)(v4 + (a4 << 6) + 32));
  std::__split_buffer<operations_research::sat::PrecedencesPropagator::ArcInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  unint64_t v7;
  __n128 *v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  __n128 v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **v30;
  uint64_t v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  __n128 *v38;
  _BYTE *v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  __n128 v43;
  __n128 *v44;
  __n128 v45;
  void **v46;
  __n128 v47;
  __n128 v48;
  void **v49;
  uint64_t v50;
  __n128 *v51;
  _BYTE *v52;
  __n128 v53;
  void **v54;
  __n128 v55;
  uint64_t v56;
  __n128 *v57;
  _BYTE *v58;
  __n128 v59;
  void **v60;
  __n128 v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  __n128 v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if ((signed __int32)a2[-4].n128_u32[1] < *(_DWORD *)(a1 + 4))
      {
        v67 = *(__n128 *)a1;
        LODWORD(v68) = *(_DWORD *)(a1 + 16);
        v7 = *(_QWORD *)(a1 + 24);
        v8 = (__n128 *)(a1 + 32);
        v65 = *(__n128 *)(a1 + 32);
        v66 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 24) = 0;
        v10 = (unsigned __int8 *)(a1 + 56);
        v9 = *(_BYTE *)(a1 + 56);
        v11 = a2[-4];
        *(_DWORD *)(a1 + 16) = a2[-3].n128_u32[0];
        *(__n128 *)a1 = v11;
        v12 = a2[-3].n128_u64[1];
        if (&a2[-4] == (__n128 *)a1)
        {
          *(__n128 *)a1 = v67;
          *(_DWORD *)(a1 + 16) = v68;
          if ((v12 & 1) != 0)
            operator delete((void *)v8->n128_u64[0]);
        }
        else
        {
          *(_QWORD *)(a1 + 24) = v12;
          v13 = a2[-2];
          *(_QWORD *)(a1 + 48) = a2[-1].n128_u64[0];
          *v8 = v13;
          v8 = a2 - 2;
          v10 = &a2[-1].n128_u8[8];
          *(_BYTE *)(a1 + 56) = a2[-1].n128_u8[8];
          a2[-4] = v67;
          a2[-3].n128_u32[0] = v68;
        }
        a2[-3].n128_u64[1] = v7;
        *v8 = v65;
        v8[1].n128_u64[0] = v66;
        *v10 = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        v20 = a1 + 64;
        if ((__n128 *)(a1 + 64) != a2)
        {
          v21 = 0;
          v22 = a1;
          do
          {
            v23 = v20;
            if (*(_DWORD *)(v22 + 68) < *(_DWORD *)(v22 + 4))
            {
              v25 = *(_DWORD *)v20;
              v24 = *(_DWORD *)(v20 + 4);
              v65.n128_u32[2] = *(_DWORD *)(v20 + 16);
              v65.n128_u64[0] = *(_QWORD *)(v20 + 8);
              v26 = *(_QWORD *)(v22 + 88);
              v67 = *(__n128 *)(v22 + 96);
              v68 = *(_QWORD *)(v22 + 112);
              *(_QWORD *)(v22 + 88) = 0;
              v27 = *(_BYTE *)(v22 + 120);
              v28 = *(_QWORD *)(v20 + 24);
              v29 = *(_DWORD *)(v22 + 16);
              *(_OWORD *)v23 = *(_OWORD *)v22;
              *(_DWORD *)(v23 + 16) = v29;
              v30 = (void **)(v23 + 32);
              if ((v28 & 1) != 0)
              {
                v31 = v26;
                operator delete(*v30);
                v26 = v31;
              }
              v32 = (_BYTE *)(v22 + 24);
              *(_QWORD *)(v23 + 24) = *(_QWORD *)(v22 + 24);
              v33 = *(_OWORD *)(v22 + 32);
              *(_QWORD *)(v23 + 48) = *(_QWORD *)(v22 + 48);
              *(_OWORD *)v30 = v33;
              *(_QWORD *)(v22 + 24) = 0;
              *(_BYTE *)(v23 + 56) = *(_BYTE *)(v22 + 56);
              if (v22 == a1)
              {
                v22 = a1;
              }
              else if (v24 < *(_DWORD *)(v22 - 60))
              {
                v34 = v21;
                while (1)
                {
                  v35 = a1 + v34;
                  *(_OWORD *)v35 = *(_OWORD *)(a1 + v34 - 64);
                  *(_DWORD *)(v35 + 16) = *(_DWORD *)(a1 + v34 - 48);
                  *(_QWORD *)(v35 + 24) = *(_QWORD *)(a1 + v34 - 40);
                  *(_OWORD *)(v35 + 32) = *(_OWORD *)(a1 + v34 - 32);
                  *(_QWORD *)(v35 + 48) = *(_QWORD *)(a1 + v34 - 16);
                  *(_QWORD *)(v35 - 40) = 0;
                  *(_BYTE *)(v35 + 56) = *(_BYTE *)(a1 + v34 - 8);
                  v34 -= 64;
                  if (!v34)
                    break;
                  if (v24 >= *(_DWORD *)(v35 - 124))
                  {
                    v22 = a1 + v34;
                    goto LABEL_27;
                  }
                }
                v22 = a1;
LABEL_27:
                v32 = (_BYTE *)(v35 - 40);
              }
              *(_DWORD *)v22 = v25;
              *(_DWORD *)(v22 + 4) = v24;
              *(_DWORD *)(v22 + 16) = v65.n128_u32[2];
              *(_QWORD *)(v22 + 8) = v65.n128_u64[0];
              v36 = (void **)(v22 + 32);
              if ((*v32 & 1) != 0)
              {
                v37 = v26;
                operator delete(*v36);
                v26 = v37;
              }
              *(_QWORD *)v32 = v26;
              *(__n128 *)v36 = v67;
              *(_QWORD *)(v22 + 48) = v68;
              *(_BYTE *)(v22 + 56) = v27;
            }
            v20 = v23 + 64;
            v21 += 64;
            v22 = v23;
          }
          while ((__n128 *)(v23 + 64) != a2);
        }
      }
    }
    else
    {
      v17 = a3 >> 1;
      v18 = a1 + (a3 >> 1 << 6);
      if ((uint64_t)a3 <= a5)
      {
        v65.n128_u64[0] = 0;
        v67.n128_u64[0] = (unint64_t)a4;
        v67.n128_u64[1] = (unint64_t)&v65;
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((__n128 *)a1, (__n128 *)(a1 + (a3 >> 1 << 6)), a3 >> 1, a4);
        v65.n128_u64[0] = a3 >> 1;
        v38 = &a4[4 * v17];
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((__n128 *)(a1 + (a3 >> 1 << 6)), a2, a3 - v17, v38);
        v65.n128_u64[0] = a3;
        v39 = (_BYTE *)(a1 + 56);
        v40 = v38;
        v41 = a4;
        v42 = &a4[4 * a3];
        while (v40 != v42)
        {
          v44 = (__n128 *)(v39 - 56);
          if ((signed __int32)v40->n128_u32[1] >= (signed __int32)v41->n128_u32[1])
          {
            v48 = *v41;
            *((_DWORD *)v39 - 10) = v41[1].n128_u32[0];
            *v44 = v48;
            if (v44 != v41)
            {
              v49 = (void **)(v39 - 24);
              if ((*(v39 - 32) & 1) != 0)
                operator delete(*v49);
              *((_QWORD *)v39 - 4) = v41[1].n128_u64[1];
              v43 = v41[2];
              *((_QWORD *)v39 - 1) = v41[3].n128_u64[0];
              *(__n128 *)v49 = v43;
              v41[1].n128_u64[1] = 0;
            }
            *v39 = v41[3].n128_u8[8];
            v39 += 64;
            v41 += 4;
            if (v41 == v38)
            {
LABEL_52:
              if (v40 != v42)
              {
                v56 = 0;
                do
                {
                  v57 = &v40[v56];
                  v58 = &v39[v56 * 16];
                  v59 = v40[v56];
                  *((_DWORD *)v58 - 10) = v40[v56 + 1].n128_u32[0];
                  *(__n128 *)(v58 - 56) = v59;
                  if (&v39[v56 * 16 - 56] != (_BYTE *)&v40[v56])
                  {
                    v60 = (void **)(v58 - 24);
                    if ((*(v58 - 32) & 1) != 0)
                      operator delete(*v60);
                    *((_QWORD *)v58 - 4) = v57[1].n128_u64[1];
                    v61 = v40[v56 + 2];
                    *((_QWORD *)v58 - 1) = v40[v56 + 3].n128_u64[0];
                    *(__n128 *)v60 = v61;
                    v57[1].n128_u64[1] = 0;
                  }
                  v39[v56 * 16] = v57[3].n128_u8[8];
                  v56 += 4;
                }
                while (&v57[4] != v42);
              }
              goto LABEL_59;
            }
          }
          else
          {
            v45 = *v40;
            *((_DWORD *)v39 - 10) = v40[1].n128_u32[0];
            *v44 = v45;
            if (v44 != v40)
            {
              v46 = (void **)(v39 - 24);
              if ((*(v39 - 32) & 1) != 0)
                operator delete(*v46);
              *((_QWORD *)v39 - 4) = v40[1].n128_u64[1];
              v47 = v40[2];
              *((_QWORD *)v39 - 1) = v40[3].n128_u64[0];
              *(__n128 *)v46 = v47;
              v40[1].n128_u64[1] = 0;
            }
            *v39 = v40[3].n128_u8[8];
            v39 += 64;
            v40 += 4;
            if (v41 == v38)
              goto LABEL_52;
          }
        }
        if (v41 != v38)
        {
          v50 = 0;
          do
          {
            v51 = &v41[v50];
            v52 = &v39[v50 * 16];
            v53 = v41[v50];
            *((_DWORD *)v52 - 10) = v41[v50 + 1].n128_u32[0];
            *(__n128 *)(v52 - 56) = v53;
            if (&v39[v50 * 16 - 56] != (_BYTE *)&v41[v50])
            {
              v54 = (void **)(v52 - 24);
              if ((*(v52 - 32) & 1) != 0)
                operator delete(*v54);
              *((_QWORD *)v52 - 4) = v51[1].n128_u64[1];
              v55 = v41[v50 + 2];
              *((_QWORD *)v52 - 1) = v41[v50 + 3].n128_u64[0];
              *(__n128 *)v54 = v55;
              v51[1].n128_u64[1] = 0;
            }
            v39[v50 * 16] = v51[3].n128_u8[8];
            v50 += 4;
          }
          while (&v51[4] != v38);
        }
LABEL_59:
        if (a4)
        {
          v62 = v65.n128_u64[0];
          if (v65.n128_u64[0])
          {
            v63 = 0;
            v64 = (void **)&a4[2];
            do
            {
              if ((*(_BYTE *)(v64 - 1) & 1) != 0)
              {
                operator delete(*v64);
                v62 = v65.n128_u64[0];
              }
              ++v63;
              v64 += 8;
            }
            while (v63 < v62);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, a1 + (a3 >> 1 << 6), a3 >> 1, a4, a5);
        v19 = a3 - v17;
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v18, a2, v19, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, v18, (__int128 *)a2, v17, v19, (__int128 *)a4, a5);
      }
    }
  }
}

void sub_22DBBD8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_ptr<operations_research::sat::PrecedencesPropagator::ArcInfo,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v7;
  __n128 v8;
  __n128 result;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unsigned __int8 *v17;
  __n128 v18;
  __n128 *v19;
  uint64_t v20;
  __n128 *v21;
  __n128 v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;
  __n128 *v34;
  unsigned __int8 *v35;
  __n128 *v36;
  __n128 v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 v41;
  __n128 *v42;
  uint64_t v43;
  __n128 *v44;
  unsigned __int8 *v45;
  __n128 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  __n128 *v49;
  __n128 v50;

  if (a3)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v10 = a2 - 4;
      v11 = a4 + 2;
      v12 = a4 + 4;
      v13 = a4 + 6;
      if ((signed __int32)a2[-4].n128_u32[1] >= (signed __int32)a1->n128_u32[1])
      {
        v29 = *a1;
        a4[1].n128_u32[0] = a1[1].n128_u32[0];
        *a4 = v29;
        a4[1].n128_u64[1] = 0;
        a4[1].n128_u64[1] = a1[1].n128_u64[1];
        v30 = a1[2];
        a4[3].n128_u64[0] = a1[3].n128_u64[0];
        *v11 = v30;
        a1[1].n128_u64[1] = 0;
        a4[3].n128_u8[8] = a1[3].n128_u8[8];
        v31 = *v10;
        a4[5].n128_u32[0] = a2[-3].n128_u32[0];
        *v12 = v31;
        a4[5].n128_u64[1] = 0;
        a4[5].n128_u64[1] = a2[-3].n128_u64[1];
        result = a2[-2];
        a4[7].n128_u64[0] = a2[-1].n128_u64[0];
        *v13 = result;
        a2[-3].n128_u64[1] = 0;
        v17 = &a2[-1].n128_u8[8];
      }
      else
      {
        v14 = *v10;
        a4[1].n128_u32[0] = a2[-3].n128_u32[0];
        *a4 = v14;
        a4[1].n128_u64[1] = 0;
        a4[1].n128_u64[1] = a2[-3].n128_u64[1];
        v15 = a2[-2];
        a4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *v11 = v15;
        a2[-3].n128_u64[1] = 0;
        a4[3].n128_u8[8] = a2[-1].n128_u8[8];
        v16 = *a1;
        a4[5].n128_u32[0] = a1[1].n128_u32[0];
        *v12 = v16;
        a4[5].n128_u64[1] = 0;
        a4[5].n128_u64[1] = a1[1].n128_u64[1];
        result = a1[2];
        a4[7].n128_u64[0] = a1[3].n128_u64[0];
        *v13 = result;
        a1[1].n128_u64[1] = 0;
        v17 = &a1[3].n128_u8[8];
      }
      a4[7].n128_u8[8] = *v17;
    }
    else if (a3 == 1)
    {
      v8 = *a1;
      a4[1].n128_u32[0] = a1[1].n128_u32[0];
      *a4 = v8;
      a4[1].n128_u64[1] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      result = a1[2];
      a4[3].n128_u64[0] = a1[3].n128_u64[0];
      a4[2] = result;
      a1[1].n128_u64[1] = 0;
      a4[3].n128_u8[8] = a1[3].n128_u8[8];
    }
    else if ((uint64_t)a3 > 8)
    {
      v32 = a3 >> 1;
      v33 = a3 >> 1 << 6;
      v34 = (__n128 *)((char *)a1 + v33);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(a1, (char *)a1 + v33, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((char *)v7 + v33, a2, a3 - v32, (char *)a4 + v33, a3 - v32);
      v35 = &a4[3].n128_u8[8];
      v36 = (__n128 *)((char *)v7 + v33);
      while (v36 != a2)
      {
        v39 = (__n128 *)(v35 - 56);
        v40 = (__n128 *)(v35 - 24);
        if ((signed __int32)v36->n128_u32[1] >= (signed __int32)v7->n128_u32[1])
        {
          v37 = *v7;
          *((_DWORD *)v35 - 10) = v7[1].n128_u32[0];
          *v39 = v37;
          *((_QWORD *)v35 - 4) = 0;
          *((_QWORD *)v35 - 4) = v7[1].n128_u64[1];
          result = v7[2];
          *((_QWORD *)v35 - 1) = v7[3].n128_u64[0];
          *v40 = result;
          v7[1].n128_u64[1] = 0;
          v38 = v7;
          v7 += 4;
          *v35 = v38[3].n128_u8[8];
          v35 += 64;
          if (v7 == v34)
            goto LABEL_34;
        }
        else
        {
          v41 = *v36;
          *((_DWORD *)v35 - 10) = v36[1].n128_u32[0];
          *v39 = v41;
          *((_QWORD *)v35 - 4) = 0;
          *((_QWORD *)v35 - 4) = v36[1].n128_u64[1];
          result = v36[2];
          *((_QWORD *)v35 - 1) = v36[3].n128_u64[0];
          *v40 = result;
          v36[1].n128_u64[1] = 0;
          v42 = v36;
          v36 += 4;
          *v35 = v42[3].n128_u8[8];
          v35 += 64;
          if (v7 == v34)
          {
LABEL_34:
            if (v36 != a2)
            {
              v43 = 0;
              do
              {
                v44 = &v36[v43];
                v45 = &v35[v43 * 16];
                v46 = v36[v43];
                *((_DWORD *)v45 - 10) = v36[v43 + 1].n128_u32[0];
                *(__n128 *)(v45 - 56) = v46;
                *((_QWORD *)v45 - 4) = 0;
                *((_QWORD *)v45 - 4) = v36[v43 + 1].n128_u64[1];
                result = v36[v43 + 2];
                *((_QWORD *)v45 - 1) = v36[v43 + 3].n128_u64[0];
                *(__n128 *)(v45 - 24) = result;
                v44[1].n128_u64[1] = 0;
                *v45 = v36[v43 + 3].n128_u8[8];
                v43 += 4;
              }
              while (&v44[4] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v34)
      {
        v47 = 0;
        do
        {
          v48 = &v35[v47 * 16];
          v49 = &v7[v47];
          v50 = v7[v47];
          *((_DWORD *)v48 - 10) = v7[v47 + 1].n128_u32[0];
          *(__n128 *)(v48 - 56) = v50;
          *((_QWORD *)v48 - 4) = 0;
          *((_QWORD *)v48 - 4) = v7[v47 + 1].n128_u64[1];
          result = v7[v47 + 2];
          *((_QWORD *)v48 - 1) = v7[v47 + 3].n128_u64[0];
          *(__n128 *)(v48 - 24) = result;
          v49[1].n128_u64[1] = 0;
          *v48 = v7[v47 + 3].n128_u8[8];
          v47 += 4;
        }
        while (&v49[4] != v34);
      }
    }
    else if (a1 != a2)
    {
      v18 = *a1;
      a4[1].n128_u32[0] = a1[1].n128_u32[0];
      *a4 = v18;
      a4[1].n128_u64[1] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      result = a1[2];
      a4[3].n128_u64[0] = a1[3].n128_u64[0];
      a4[2] = result;
      a1[1].n128_u64[1] = 0;
      a4[3].n128_u8[8] = a1[3].n128_u8[8];
      v19 = a1 + 4;
      if (&a1[4] != a2)
      {
        v20 = 0;
        v21 = a4;
        do
        {
          v23 = v19;
          v24 = v21 + 4;
          if ((signed __int32)v7[4].n128_u32[1] >= (signed __int32)v21->n128_u32[1])
          {
            v22 = *v19;
            v21[5].n128_u32[0] = v19[1].n128_u32[0];
            *v24 = v22;
            v21[5].n128_u64[1] = 0;
            v21[5].n128_u64[1] = v7[5].n128_u64[1];
            result = v7[6];
            v21[7].n128_u64[0] = v7[7].n128_u64[0];
            v21[6] = result;
            v7[5].n128_u64[1] = 0;
            v21[7].n128_u8[8] = v7[7].n128_u8[8];
          }
          else
          {
            *v24 = *v21;
            v21[5].n128_u32[0] = v21[1].n128_u32[0];
            v21[5].n128_u64[1] = v21[1].n128_u64[1];
            v21[6] = v21[2];
            v21[7].n128_u64[0] = v21[3].n128_u64[0];
            v21[7].n128_u8[8] = v21[3].n128_u8[8];
            v25 = a4;
            v21[1].n128_u64[1] = 0;
            if (v21 != a4)
            {
              v26 = v20;
              while (1)
              {
                v25 = (__n128 *)((char *)a4 + v26);
                if ((signed __int32)v7[4].n128_u32[1] >= *(_DWORD *)((char *)&a4[-3] + v26 - 12))
                  break;
                *v25 = v25[-4];
                v25[1].n128_u32[0] = v25[-3].n128_u32[0];
                v27 = (void **)&v25[2];
                if ((v25[1].n128_u8[8] & 1) != 0)
                  operator delete(*v27);
                v25[1].n128_u64[1] = v25[-3].n128_u64[1];
                *(__n128 *)v27 = *(__n128 *)((char *)a4 + v26 - 32);
                v25[3].n128_u64[0] = *(unint64_t *)((char *)a4[-1].n128_u64 + v26);
                v25[-3].n128_u64[1] = 0;
                a4[3].n128_u8[v26 + 8] = a4->n128_u8[v26 - 8];
                v26 -= 64;
                if (!v26)
                {
                  v25 = a4;
                  break;
                }
              }
            }
            result = *v23;
            v25[1].n128_u32[0] = v23[1].n128_u32[0];
            *v25 = result;
            if (v25 != v23)
            {
              v28 = (void **)&v25[2];
              if ((v25[1].n128_u8[8] & 1) != 0)
                operator delete(*v28);
              v25[1].n128_u64[1] = v7[5].n128_u64[1];
              result = v7[6];
              v25[3].n128_u64[0] = v7[7].n128_u64[0];
              *(__n128 *)v28 = result;
              v7[5].n128_u64[1] = 0;
            }
            v25[3].n128_u8[8] = v7[7].n128_u8[8];
          }
          v19 = v23 + 4;
          v20 += 64;
          v21 = v24;
          v7 = v23;
        }
        while (&v23[4] != a2);
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<operations_research::sat::PrecedencesPropagator::ArcInfo,std::__destruct_n &>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      v6 = (void **)(v2 + 32);
      do
      {
        if ((*(_BYTE *)(v6 - 1) & 1) != 0)
        {
          operator delete(*v6);
          v4 = *v3;
        }
        ++v5;
        v6 += 8;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  __int128 *v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 *v58;
  __int128 v59;
  unint64_t v60;
  __int128 *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  uint64_t v66;
  _BYTE *v67;
  __int128 *v68;
  __int128 v69;
  __int128 *v70;
  __int128 v71;
  void **v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  void **v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 *v89;
  __int128 *v90;
  __int128 v91;
  void **v92;
  __int128 *v93;
  __int128 v94;
  uint64_t v95;
  _BYTE *v96;
  __int128 *v97;
  __int128 v98;
  void **v99;
  __int128 v100;
  unint64_t v101;
  void **v102;
  uint64_t v103;
  __int128 *v104;
  __int128 v106;
  int v107;
  __int128 v108;
  uint64_t v109;

  if (!a5)
    return;
  v7 = a6;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return;
    v11 = 0;
    v12 = -a4;
    while (1)
    {
      v13 = a1 + v11;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + v11 + 4))
        break;
      v11 += 64;
      if (__CFADD__(v12++, 1))
        return;
    }
    v15 = -v12;
    if (-v12 >= v8)
    {
      if (v12 == -1)
      {
        v80 = a1 + v11;
        v107 = *(_DWORD *)(a1 + v11 + 16);
        v106 = *(_OWORD *)(a1 + v11);
        v81 = *(_QWORD *)(a1 + v11 + 24);
        v82 = v80 + 32;
        v109 = *(_QWORD *)(v80 + 48);
        v108 = *(_OWORD *)(v80 + 32);
        *(_QWORD *)(v80 + 24) = 0;
        v84 = (_BYTE *)(v80 + 56);
        v83 = *(_BYTE *)(v80 + 56);
        v85 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)v80 = *(_OWORD *)a2;
        *(_DWORD *)(v80 + 16) = v85;
        v86 = *(_QWORD *)(a2 + 24);
        if (v80 == a2)
        {
          *(_OWORD *)a2 = v106;
          v103 = a2;
          *(_DWORD *)(a2 + 16) = v107;
          if ((v86 & 1) != 0)
            operator delete(*(void **)v82);
          a2 = v103;
        }
        else
        {
          *(_QWORD *)(v80 + 24) = v86;
          v87 = *(_OWORD *)(a2 + 32);
          *(_QWORD *)(v80 + 48) = *(_QWORD *)(a2 + 48);
          *(_OWORD *)v82 = v87;
          v82 = a2 + 32;
          *v84 = *(_BYTE *)(a2 + 56);
          *(_OWORD *)a2 = v106;
          *(_DWORD *)(a2 + 16) = v107;
          v84 = (_BYTE *)(a2 + 56);
        }
        *(_QWORD *)(a2 + 24) = v81;
        *(_QWORD *)(v82 + 16) = v109;
        *(_OWORD *)v82 = v108;
        *v84 = v83;
        return;
      }
      if (v12 > 0)
        v15 = 1 - v12;
      v25 = v15 >> 1;
      v19 = a1 + (v15 >> 1 << 6) + v11;
      v18 = a2;
      if ((__int128 *)a2 != a3)
      {
        v31 = ((uint64_t)a3 - a2) >> 6;
        v18 = a2;
        do
        {
          v32 = v31 >> 1;
          v33 = v18 + (v31 >> 1 << 6);
          v34 = *(_DWORD *)(v33 + 4);
          v35 = v33 + 64;
          v31 += ~(v31 >> 1);
          if (v34 < *(_DWORD *)(v19 + 4))
            v18 = v35;
          else
            v31 = v32;
        }
        while (v31);
      }
      v17 = (v18 - a2) >> 6;
      if (v19 != a2)
      {
LABEL_22:
        if (v18 == a2)
        {
          v30 = v19;
        }
        else
        {
          v104 = a3;
          v26 = a7;
          v27 = v25;
          v28 = v17;
          v29 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v19, a2, v18);
          v17 = v28;
          v25 = v27;
          a7 = v26;
          a3 = v104;
          v30 = v29;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v8 >= 0)
        v16 = v8;
      else
        v16 = v8 + 1;
      v17 = v16 >> 1;
      v18 = a2 + (v16 >> 1 << 6);
      v19 = a2;
      if (a2 - a1 != v11)
      {
        v20 = (a2 - a1 - v11) >> 6;
        v19 = a1 + v11;
        do
        {
          v21 = v20 >> 1;
          v22 = v19 + (v20 >> 1 << 6);
          v23 = *(_DWORD *)(v22 + 4);
          v24 = v22 + 64;
          v20 += ~(v20 >> 1);
          if (v23 > *(_DWORD *)(v18 + 4))
            v20 = v21;
          else
            v19 = v24;
        }
        while (v20);
      }
      v25 = (v19 - a1 - v11) >> 6;
      if (v19 != a2)
        goto LABEL_22;
    }
    v30 = v18;
LABEL_36:
    a4 = -(v25 + v12);
    v36 = v8 - v17;
    if (v25 + v17 >= v8 - (v25 + v17) - v12)
    {
      v41 = v25;
      v42 = -(v25 + v12);
      v8 = v17;
      v43 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v30, v18, a3, v42, v36, a6);
      a2 = v19;
      v7 = a6;
      a4 = v41;
      a3 = (__int128 *)v30;
      a1 = v13;
      a7 = v43;
      if (!v8)
        return;
    }
    else
    {
      v37 = a1 + v11;
      v38 = v19;
      v39 = a3;
      v7 = a6;
      v40 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(v37, v38, v30, v25, v17, a6);
      a3 = v39;
      a2 = v18;
      v8 = v36;
      a1 = v30;
      a7 = v40;
      if (!v36)
        return;
    }
  }
  if (a4 > v8)
  {
    if (a3 == (__int128 *)a2)
      return;
    v44 = 0;
    v45 = 0;
    do
    {
      v46 = &v7[v44 / 0x10];
      v47 = a2 + v44;
      v48 = *(_OWORD *)(a2 + v44);
      *((_DWORD *)v46 + 4) = *(_DWORD *)(a2 + v44 + 16);
      *v46 = v48;
      *((_QWORD *)v46 + 3) = 0;
      *((_QWORD *)v46 + 3) = *(_QWORD *)(a2 + v44 + 24);
      v49 = *(_OWORD *)(a2 + v44 + 32);
      *((_QWORD *)v46 + 6) = *(_QWORD *)(a2 + v44 + 48);
      v46[2] = v49;
      *(_QWORD *)(v47 + 24) = 0;
      *((_BYTE *)v46 + 56) = *(_BYTE *)(a2 + v44 + 56);
      ++v45;
      v44 += 64;
    }
    while ((__int128 *)(v47 + 64) != a3);
    if (!v44)
      goto LABEL_96;
    v50 = &v7[v44 / 0x10];
    while (2)
    {
      if (a2 == a1)
      {
        v88 = 0;
        do
        {
          v89 = &v50[v88];
          v90 = &a3[v88];
          v91 = v50[v88 - 4];
          *((_DWORD *)v90 - 12) = v50[v88 - 3];
          *(v90 - 4) = v91;
          if (a3 != v50)
          {
            v92 = (void **)(v90 - 2);
            if ((*((_BYTE *)v90 - 40) & 1) != 0)
            {
              v93 = a3;
              operator delete(*v92);
              a3 = v93;
            }
            *((_QWORD *)v90 - 5) = *((_QWORD *)v89 - 5);
            v94 = v50[v88 - 2];
            *((_QWORD *)v90 - 2) = *(_QWORD *)&v50[v88 - 1];
            *(_OWORD *)v92 = v94;
            *((_QWORD *)v89 - 5) = 0;
          }
          *((_BYTE *)v90 - 8) = *((_BYTE *)v89 - 8);
          v88 -= 4;
        }
        while (&v50[v88] != v7);
        goto LABEL_96;
      }
      v51 = a3 - 4;
      if (*((_DWORD *)v50 - 15) >= *(_DWORD *)(a2 - 60))
      {
        v56 = v50 - 4;
        v57 = *(v50 - 4);
        *((_DWORD *)a3 - 12) = *((_DWORD *)v50 - 12);
        *v51 = v57;
        if (a3 != v50)
        {
          v54 = a3 - 2;
          v55 = (uint64_t)v50;
          v52 = a2;
          v50 -= 4;
          if ((*((_BYTE *)a3 - 40) & 1) == 0)
            goto LABEL_55;
          goto LABEL_54;
        }
        v55 = (uint64_t)v50;
      }
      else
      {
        v52 = a2 - 64;
        v53 = *(_OWORD *)(a2 - 64);
        *((_DWORD *)a3 - 12) = *(_DWORD *)(a2 - 48);
        *v51 = v53;
        if (a3 != (__int128 *)a2)
        {
          v54 = a3 - 2;
          v55 = a2;
          v56 = v50;
          if ((*((_BYTE *)a3 - 40) & 1) == 0)
          {
LABEL_55:
            *((_QWORD *)a3 - 5) = *(_QWORD *)(v55 - 40);
            v59 = *(_OWORD *)(v55 - 32);
            *((_QWORD *)v54 + 2) = *(_QWORD *)(v55 - 16);
            *v54 = v59;
            *(_QWORD *)(v55 - 40) = 0;
            goto LABEL_56;
          }
LABEL_54:
          v58 = a3;
          operator delete(*(void **)v54);
          a3 = v58;
          v50 = v56;
          goto LABEL_55;
        }
        v55 = a2;
LABEL_56:
        a2 = v52;
        v56 = v50;
      }
      *((_BYTE *)a3 - 8) = *(_BYTE *)(v55 - 8);
      v50 = v56;
      a3 = v51;
      v7 = a6;
      if (v56 == a6)
        goto LABEL_96;
      continue;
    }
  }
  if (a1 != a2)
  {
    v60 = 0;
    v45 = 0;
    do
    {
      v61 = &v7[v60 / 0x10];
      v62 = a1 + v60;
      v63 = *(_OWORD *)(a1 + v60);
      *((_DWORD *)v61 + 4) = *(_DWORD *)(a1 + v60 + 16);
      *v61 = v63;
      *((_QWORD *)v61 + 3) = 0;
      *((_QWORD *)v61 + 3) = *(_QWORD *)(a1 + v60 + 24);
      v64 = *(_OWORD *)(a1 + v60 + 32);
      *((_QWORD *)v61 + 6) = *(_QWORD *)(a1 + v60 + 48);
      v61[2] = v64;
      *(_QWORD *)(v62 + 24) = 0;
      *((_BYTE *)v61 + 56) = *(_BYTE *)(a1 + v60 + 56);
      ++v45;
      v60 += 64;
    }
    while (v62 + 64 != a2);
    if (!v60)
      goto LABEL_96;
    v65 = &v7[v60 / 0x10];
    v66 = (uint64_t)&v7[v60 / 0x10 - 4];
    v67 = (_BYTE *)(a1 + 56);
    v68 = v7;
    while ((__int128 *)a2 != a3)
    {
      v70 = (__int128 *)(v67 - 56);
      if (*(_DWORD *)(a2 + 4) >= *((_DWORD *)v68 + 1))
      {
        v76 = *v68;
        *((_DWORD *)v67 - 10) = *((_DWORD *)v68 + 4);
        *v70 = v76;
        if (v70 != v68)
        {
          v77 = (void **)(v67 - 24);
          if ((*(v67 - 32) & 1) != 0)
          {
            v78 = a3;
            v79 = a2;
            operator delete(*v77);
            a2 = v79;
            a3 = v78;
          }
          *((_QWORD *)v67 - 4) = *((_QWORD *)v68 + 3);
          v69 = v68[2];
          *((_QWORD *)v67 - 1) = *((_QWORD *)v68 + 6);
          *(_OWORD *)v77 = v69;
          *((_QWORD *)v68 + 3) = 0;
        }
        *v67 = *((_BYTE *)v68 + 56);
        v67 += 64;
        v68 += 4;
        if (v65 == v68)
          goto LABEL_96;
      }
      else
      {
        v71 = *(_OWORD *)a2;
        *((_DWORD *)v67 - 10) = *(_DWORD *)(a2 + 16);
        *v70 = v71;
        if (v70 != (__int128 *)a2)
        {
          v72 = (void **)(v67 - 24);
          if ((*(v67 - 32) & 1) != 0)
          {
            v73 = a3;
            v74 = a2;
            operator delete(*v72);
            a2 = v74;
            a3 = v73;
          }
          *((_QWORD *)v67 - 4) = *(_QWORD *)(a2 + 24);
          v75 = *(_OWORD *)(a2 + 32);
          *((_QWORD *)v67 - 1) = *(_QWORD *)(a2 + 48);
          *(_OWORD *)v72 = v75;
          *(_QWORD *)(a2 + 24) = 0;
        }
        *v67 = *(_BYTE *)(a2 + 56);
        v67 += 64;
        a2 += 64;
        if (v65 == v68)
          goto LABEL_96;
      }
    }
    v95 = 0;
    do
    {
      v96 = &v67[v95 * 16];
      v97 = &v68[v95];
      v98 = v68[v95];
      *((_DWORD *)v96 - 10) = v68[v95 + 1];
      *(_OWORD *)(v96 - 56) = v98;
      if (&v67[v95 * 16 - 56] != (_BYTE *)&v68[v95])
      {
        v99 = (void **)(v96 - 24);
        if ((*(v96 - 32) & 1) != 0)
          operator delete(*v99);
        *((_QWORD *)v96 - 4) = *((_QWORD *)v97 + 3);
        v100 = v68[v95 + 2];
        *((_QWORD *)v96 - 1) = *(_QWORD *)&v68[v95 + 3];
        *(_OWORD *)v99 = v100;
        *((_QWORD *)v97 + 3) = 0;
      }
      v67[v95 * 16] = *((_BYTE *)v97 + 56);
      v95 += 4;
    }
    while ((__int128 *)v66 != v97);
    v7 = a6;
LABEL_96:
    if (v7)
    {
      v101 = 0;
      v102 = (void **)(v7 + 2);
      do
      {
        if ((*(_BYTE *)(v102 - 1) & 1) != 0)
          operator delete(*v102);
        ++v101;
        v102 += 8;
      }
      while (v101 < v45);
    }
  }
}

uint64_t std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  _BOOL4 v26;
  __int128 *v27;
  uint64_t v28;
  char v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = 0;
  v6 = a2;
  for (i = a2; ; i += 64)
  {
    v8 = a1 + v5;
    v9 = a2 + v5;
    v35 = *(_OWORD *)(a1 + v5);
    v38 = *(_DWORD *)(a1 + v5 + 16);
    v10 = *(_QWORD *)(a1 + v5 + 24);
    v11 = a1 + v5 + 32;
    v41 = *(_OWORD *)v11;
    v44 = *(_QWORD *)(a1 + v5 + 48);
    *(_QWORD *)(v8 + 24) = 0;
    v12 = (char *)(a1 + v5 + 56);
    v13 = *v12;
    v14 = *(_OWORD *)(a2 + v5);
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + v5 + 16);
    *(_OWORD *)v8 = v14;
    v15 = *(_QWORD *)(a2 + v5 + 24);
    if (a2 == a1)
    {
      *(_OWORD *)v8 = v35;
      *(_DWORD *)(v8 + 16) = v38;
      if ((v15 & 1) != 0)
      {
        v34 = a3;
        operator delete(*(void **)v11);
        a3 = v34;
      }
    }
    else
    {
      *(_QWORD *)(v8 + 24) = v15;
      v16 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(a1 + v5 + 48) = *(_QWORD *)(v9 + 48);
      *(_OWORD *)v11 = v16;
      v11 = i + 32;
      *v12 = *(_BYTE *)(v9 + 56);
      v12 = (char *)(i + 56);
      *(_OWORD *)v9 = v35;
      *(_DWORD *)(v9 + 16) = v38;
    }
    *(_QWORD *)(v9 + 24) = v10;
    *(_OWORD *)v11 = v41;
    *(_QWORD *)(v11 + 16) = v44;
    *v12 = v13;
    v17 = a1 + v5 + 64;
    if (a2 + v5 + 64 == a3)
      break;
    if (v17 == v6)
      v6 = a2 + v5 + 64;
    v5 += 64;
  }
  if (v17 != v6)
  {
    v18 = v6;
    while (1)
    {
      v39 = *(_DWORD *)(v17 + 16);
      v36 = *(_OWORD *)v17;
      v19 = *(_QWORD *)(v17 + 24);
      v20 = v17 + 32;
      v42 = *(_OWORD *)(v17 + 32);
      v45 = *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v17 + 24) = 0;
      v21 = (_BYTE *)(v17 + 56);
      v22 = *(_BYTE *)(v17 + 56);
      v23 = *(_DWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_DWORD *)(v17 + 16) = v23;
      v24 = *(_QWORD *)(v18 + 24);
      if (v17 == v18)
      {
        *(_DWORD *)(v17 + 16) = v39;
        *(_OWORD *)v17 = v36;
        if ((v24 & 1) != 0)
        {
          v32 = a3;
          operator delete(*(void **)v20);
          a3 = v32;
        }
      }
      else
      {
        *(_QWORD *)(v17 + 24) = v24;
        v25 = *(_OWORD *)(v18 + 32);
        *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
        *(_OWORD *)v20 = v25;
        v20 = v18 + 32;
        v21 = (_BYTE *)(v18 + 56);
        *(_BYTE *)(v17 + 56) = *(_BYTE *)(v18 + 56);
        *(_DWORD *)(v18 + 16) = v39;
        *(_OWORD *)v18 = v36;
      }
      *(_QWORD *)(v18 + 24) = v19;
      *(_OWORD *)v20 = v42;
      *(_QWORD *)(v20 + 16) = v45;
      *v21 = v22;
      v17 += 64;
      v18 += 64;
      v26 = v17 == v6;
      if (v18 == a3)
      {
        if (v17 == v6)
          return a1 + v5 + 64;
        v27 = (__int128 *)(v6 + 32);
        v18 = v6 + 64;
        while (1)
        {
          v40 = *(_DWORD *)(v17 + 16);
          v37 = *(_OWORD *)v17;
          v28 = *(_QWORD *)(v17 + 24);
          v46 = *(_QWORD *)(v17 + 48);
          v43 = *(_OWORD *)(v17 + 32);
          *(_QWORD *)(v17 + 24) = 0;
          v29 = *(_BYTE *)(v17 + 56);
          v30 = *(_DWORD *)(v6 + 16);
          *(_OWORD *)v17 = *(_OWORD *)v6;
          *(_DWORD *)(v17 + 16) = v30;
          *(_QWORD *)(v17 + 24) = *(_QWORD *)(v6 + 24);
          v31 = *v27;
          *(_QWORD *)(v17 + 48) = *(_QWORD *)(v6 + 48);
          *(_OWORD *)(v17 + 32) = v31;
          *(_BYTE *)(v17 + 56) = *(_BYTE *)(v6 + 56);
          *(_DWORD *)(v6 + 16) = v40;
          *(_OWORD *)v6 = v37;
          *(_QWORD *)(v6 + 24) = v28;
          *v27 = v43;
          *(_QWORD *)(v6 + 48) = v46;
          *(_BYTE *)(v6 + 56) = v29;
          v17 += 64;
          v26 = v17 == v6;
          if (v18 != a3)
            break;
          if (v17 == v6)
            return a1 + v5 + 64;
        }
      }
      if (v26)
        v6 = v18;
    }
  }
  return a1 + v5 + 64;
}

const char *operations_research::sat::PresolveContext::GetLiteralRepresentative(operations_research::sat::PresolveContext *this, const char *a2)
{
  const char *v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  int v15;
  const char *v16;
  BOOL v17;
  int v18;
  _QWORD *v20;
  _BYTE v21[16];

  v2 = a2;
  if (~(_DWORD)a2 <= (int)a2)
    v4 = (int)a2;
  else
    v4 = ~(_DWORD)a2;
  if (~v4 <= v4)
    v5 = v4;
  else
    v5 = ~v4;
  v6 = v5;
  v7 = *((_QWORD *)this + 137);
  if (v5 >= (unint64_t)((*((_QWORD *)this + 138) - v7) >> 2) || *(_DWORD *)(v7 + 4 * v5) == v5)
  {
    v8 = 0;
    v9 = 1;
    v10 = *((_QWORD *)this + 153);
    if (v5 >= (unint64_t)((*((_QWORD *)this + 154) - v10) >> 2))
      goto LABEL_15;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v5);
    v5 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v5);
    v9 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v6);
    v8 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v6);
    v6 = v5;
    v10 = *((_QWORD *)this + 153);
    if (v5 >= (unint64_t)((*((_QWORD *)this + 154) - v10) >> 2))
      goto LABEL_15;
  }
  if (*(_DWORD *)(v10 + 4 * v6) != v5)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v5);
    v5 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v6);
    if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v6) == -1)
      v9 = -v9;
  }
LABEL_15:
  if (v4 >= 0)
    v11 = v9;
  else
    v11 = -v9;
  if (v4 < 0)
    v8 = -v8;
  if (operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v4), a2) < 0
    || operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v4), v12) >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 701);
    v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  v14 = ~v5;
  if (~v5 <= v5)
    v15 = v5;
  else
    v15 = ~v5;
  if ((operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v15), v13) & 0x8000000000000000) == 0
    && operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v15), v16) <= 1)
  {
    if (v8)
      v17 = v11 + v8 == 1;
    else
      v17 = 1;
    v18 = v17;
    if ((v2 & 0x80000000) != 0)
    {
      if (v18)
        return (const char *)v14;
      else
        return (const char *)v5;
    }
    else if (v18)
    {
      return (const char *)v5;
    }
    else
    {
      return (const char *)v14;
    }
  }
  return v2;
}

void sub_22DBBEAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::PresolveContext::GetVariableRepresentative(operations_research::sat::PresolveContext *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12[2];
  int v13;
  uint64_t *v14;

  if (~a2 <= a2)
    v3 = a2;
  else
    v3 = ~a2;
  v4 = v3;
  v5 = *((_QWORD *)this + 153);
  if (v3 >= (unint64_t)((*((_QWORD *)this + 154) - v5) >> 2) || *(_DWORD *)(v5 + 4 * v3) == v3)
  {
    v6 = 0;
    v7 = 1;
    v12[0] = 1;
    v13 = 1;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v3);
    v3 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v3);
    v9 = 8 * v4;
    v7 = *(_QWORD *)(*((_QWORD *)this + 156) + 8 * v4);
    v6 = *(_QWORD *)(*((_QWORD *)this + 159) + v9);
    if (v7 >= 0)
      v10 = v7;
    else
      v10 = -v7;
    v12[0] = v10;
    v13 = 1;
    if (v10 != 1)
    {
      v14 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v12, (int)&v13, "std::abs(r.coeff) == 1");
      if (v14)
      {
        google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 729, &v14);
        google::LogMessage::stream((google::LogMessage *)v12);
        goto LABEL_17;
      }
    }
  }
  v12[0] = v6;
  v13 = 0;
  if (v6)
  {
    v14 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v12, (int)&v13, "r.offset == 0");
    if (v14)
    {
      google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 730, &v14);
      google::LogMessage::stream((google::LogMessage *)v12);
LABEL_17:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
    }
  }
  return v3 ^ (((a2 >= 0) ^ (v7 == 1)) << 31 >> 31);
}

void sub_22DBBEC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBBEC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::PresolveContext::NewIntVar(operations_research::sat::PresolveContext *this, const operations_research::Domain *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 6);
  v5 = *(int **)(v4 + 32);
  if (!v5)
  {
    v7 = *(_DWORD *)(v4 + 28);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v4 + 16), v7 + 1);
    v5 = *(int **)(v4 + 32);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(v4 + 24);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(v4 + 24) = v6 + 1;
    v8 = *(_QWORD *)&v5[2 * v6 + 2];
    goto LABEL_8;
  }
  if (v7 == *(_DWORD *)(v4 + 28))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v4 + 16));
  v9 = *(_QWORD *)(v4 + 32);
  v10 = *(int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v10 + 1;
  *(_QWORD *)(v9 + 8 * v10 + 8) = v8;
LABEL_8:
  *(_DWORD *)(v8 + 16) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), *(_QWORD *)a2 >> 1);
  v12 = *(_QWORD *)a2;
  v15 = (uint64_t *)*((_QWORD *)a2 + 1);
  v14 = (char *)a2 + 8;
  v13 = v15;
  if ((v12 & 1) != 0)
    v16 = v13;
  else
    v16 = (uint64_t *)v14;
  if (v12 >= 2)
  {
    v18 = &v16[2 * (v12 >> 1)];
    v19 = *(_DWORD *)(v8 + 16);
    do
    {
      v20 = *v16;
      v21 = *(_DWORD *)(v8 + 20);
      v22 = v19 + 1;
      if (v19 == v21)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v19 + 1);
        v21 = *(_DWORD *)(v8 + 20);
      }
      v23 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v23 + 8 * v19) = v20;
      *(_DWORD *)(v8 + 16) = v22;
      v24 = v16[1];
      v19 += 2;
      if (v22 == v21)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v19);
        v23 = *(_QWORD *)(v8 + 24);
      }
      *(_QWORD *)(v23 + 8 * v22) = v24;
      *(_DWORD *)(v8 + 16) = v19;
      v16 += 2;
    }
    while (v16 != v18);
  }
  operations_research::sat::PresolveContext::InitializeNewDomains(this, v11);
  return (*(_DWORD *)(*((_QWORD *)this + 6) + 24) - 1);
}

void operations_research::sat::PresolveContext::InitializeNewDomains(operations_research::sat::PresolveContext *this, __n128 a2)
{
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  const char *v12;
  int v13;
  int64_t *v14;
  int64_t *v15;
  int v16;
  int64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t i;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t j;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t k;
  _QWORD *v41;
  uint64_t v42;
  __int128 __p;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  v4 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v4 + 24) > (int)v3)
  {
    v5 = (_QWORD *)((char *)this + 512);
    v6 = (const char *)(int)v3;
    v7 = ~(_DWORD)v3;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * (_QWORD)v6 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v8 + 24), *(int *)(v8 + 16), (unint64_t *)&v42, a2);
      v9 = *((_QWORD *)this + 65);
      if (v9 >= *((_QWORD *)this + 66))
      {
        v10 = std::vector<operations_research::Domain>::__emplace_back_slow_path<operations_research::Domain>((uint64_t *)this + 64, (uint64_t)&v42);
        v11 = v42;
        *((_QWORD *)this + 65) = v10;
        if ((v11 & 1) != 0)
        {
          operator delete((void *)__p);
          v10 = *((_QWORD *)this + 65);
        }
      }
      else
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v9 = v42;
        *(_OWORD *)(v9 + 8) = __p;
        v10 = v9 + 24;
        *((_QWORD *)this + 65) = v9 + 24;
      }
      if (operations_research::Domain::IsEmpty((operations_research::Domain *)(v10 - 24)))
      {
        *((_BYTE *)this + 504) = 1;
        return;
      }
      if (v7 <= (int)v6)
        v13 = (int)v6;
      else
        v13 = v7;
      if (operations_research::Domain::IsFixed((operations_research::Domain *)(*v5 + 24 * v13), v12))
        operations_research::sat::PresolveContext::ExploitFixedDomain(this, v6);
      ++v6;
      v4 = *((_QWORD *)this + 6);
      --v7;
    }
    while ((uint64_t)v6 < *(int *)(v4 + 24));
    v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  }
  if (*((_QWORD *)this + 31) > v3)
  {
    v14 = (int64_t *)*((_QWORD *)this + 38);
    v15 = (int64_t *)*((_QWORD *)this + 39);
    if (v14 == v15)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      v17 = (int64_t *)*((_QWORD *)this + 38);
      do
      {
        if (*v17 < v3)
          v14[v16++] = *v17;
        ++v17;
      }
      while (v17 != v15);
    }
    v18 = v15 - v14;
    if (v16 <= v18)
    {
      if (v16 < v18)
        *((_QWORD *)this + 39) = &v14[v16];
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 304, v16 - v18);
    }
  }
  v19 = v3 & ~(v3 >> 63);
  *((_QWORD *)this + 31) = v19;
  v20 = (unint64_t)(v19 + 63) >> 6;
  v42 = 0;
  v21 = *((_QWORD *)this + 32);
  v22 = (*((_QWORD *)this + 33) - v21) >> 3;
  if (v20 <= v22)
  {
    if (v20 < v22)
      *((_QWORD *)this + 33) = v21 + 8 * v20;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 256, v20 - v22, &v42);
  }
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  v24 = *((_QWORD *)this + 86);
  v25 = *((_QWORD *)this + 85);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 4);
  if (v23 <= v26)
  {
    if (v23 < v26)
    {
      for (i = v25 + 16 * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3); v24 != i; v24 -= 48)
      {
        if (*(_QWORD *)(v24 - 24))
        {
          operator delete(*(void **)(v24 - 48));
          *(_QWORD *)(v24 - 8) = 0;
          *(_QWORD *)(v24 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v24 - 40) = 0;
          *(_QWORD *)(v24 - 32) = 0;
          *(_QWORD *)(v24 - 24) = 0;
        }
        v28 = *(_QWORD **)(v24 - 16);
        if (v28)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
      }
      *((_QWORD *)this + 86) = i;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this + 85, v23 - v26);
  }
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  v30 = *((_QWORD *)this + 91);
  v31 = (*((_QWORD *)this + 92) - v30) >> 2;
  if (v29 <= v31)
  {
    if (v29 < v31)
      *((_QWORD *)this + 92) = v30
                             - 0x5555555555555554 * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 728), v29 - v31);
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  }
  v32 = *((_QWORD *)this + 1);
  v33 = 0xAAAAAAAAAAAAAAABLL * ((v32 - *(_QWORD *)this) >> 4);
  if (v29 <= v33)
  {
    if (v29 < v33)
    {
      for (j = *(_QWORD *)this + 48 * v29; v32 != j; v32 -= 48)
      {
        if (*(_QWORD *)(v32 - 24))
        {
          operator delete(*(void **)(v32 - 48));
          *(_QWORD *)(v32 - 8) = 0;
          *(_QWORD *)(v32 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v32 - 40) = 0;
          *(_QWORD *)(v32 - 32) = 0;
          *(_QWORD *)(v32 - 24) = 0;
        }
        v35 = *(_QWORD **)(v32 - 16);
        if (v35)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v35);
      }
      *((_QWORD *)this + 1) = j;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this, v29 - v33);
  }
  v36 = *((_QWORD *)this + 3);
  v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3);
  v38 = *((_QWORD *)this + 4);
  v39 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v36) >> 4);
  if (v37 <= v39)
  {
    if (v37 < v39)
    {
      for (k = v36 + 16 * ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 3); v38 != k; v38 -= 48)
      {
        if (*(_QWORD *)(v38 - 24))
        {
          operator delete(*(void **)(v38 - 48));
          *(_QWORD *)(v38 - 8) = 0;
          *(_QWORD *)(v38 - 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v38 - 40) = 0;
          *(_QWORD *)(v38 - 32) = 0;
          *(_QWORD *)(v38 - 24) = 0;
        }
        v41 = *(_QWORD **)(v38 - 16);
        if (v41)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v41);
      }
      *((_QWORD *)this + 4) = k;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append((char **)this + 3, v37 - v39);
  }
}

void sub_22DBBF264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::NewBoolVar(operations_research::sat::PresolveContext *this)
{
  uint64_t v2;
  void *v4[3];

  operations_research::Domain::Domain(v4, 0, 1);
  v2 = operations_research::sat::PresolveContext::NewIntVar(this, (const operations_research::Domain *)v4);
  if (((uint64_t)v4[0] & 1) != 0)
    operator delete(v4[1]);
  return v2;
}

void sub_22DBBF2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::GetOrCreateConstantVar(operations_research::sat::PresolveContext *this, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v5 = 0;
  v6 = (uint64_t *)((char *)this + 848);
  v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v8 = *((_QWORD *)this + 106);
  v9 = (v7 >> 7) ^ (v8 >> 12);
  v10 = *((_QWORD *)this + 109);
  v11 = 0x101010101010101 * (v7 & 0x7F);
  v12 = *((_QWORD *)this + 107);
  for (i = v9; ; i = v5 + v14)
  {
    v14 = i & v10;
    v15 = *(_QWORD *)(v8 + v14);
    v16 = ((v15 ^ v11) - 0x101010101010101) & ~(v15 ^ v11) & 0x8080808080808080;
    if (v16)
      break;
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      goto LABEL_8;
    v5 += 8;
  }
  while (1)
  {
    v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v10;
    if (*(_QWORD *)(v12 + 16 * v17) == a2)
      break;
    v16 &= v16 - 1;
    if (!v16)
      goto LABEL_5;
  }
  if (v17 == v10)
  {
LABEL_8:
    v18 = 0;
    v19 = *((_QWORD *)this + 6);
    v20 = *(_DWORD *)(v19 + 24);
    while (1)
    {
      v21 = v9 & v10;
      v22 = *(_QWORD *)(v8 + v21);
      v23 = ((v22 ^ v11) - 0x101010101010101) & ~(v22 ^ v11) & 0x8080808080808080;
      if (v23)
        break;
LABEL_12:
      if ((v22 & (~v22 << 6) & 0x8080808080808080) != 0)
      {
        v24 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ a2)));
        v12 = *((_QWORD *)this + 107);
        v25 = v12 + 16 * v24;
        *(_QWORD *)v25 = a2;
        *(_DWORD *)(v25 + 8) = 0;
        v19 = *((_QWORD *)this + 6);
        goto LABEL_15;
      }
      v18 += 8;
      v9 = v18 + v21;
    }
    while (1)
    {
      v24 = (v21 + (__clz(__rbit64(v23)) >> 3)) & v10;
      if (*(_QWORD *)(v12 + 16 * v24) == a2)
        break;
      v23 &= v23 - 1;
      if (!v23)
        goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(v12 + 16 * v24 + 8) = v20;
    v26 = *(int **)(v19 + 32);
    if (v26)
    {
      v27 = *(int *)(v19 + 24);
      v28 = *v26;
      if ((int)v27 < *v26)
      {
        *(_DWORD *)(v19 + 24) = v27 + 1;
        v29 = *(_QWORD *)&v26[2 * v27 + 2];
        v32 = *(unsigned int *)(v29 + 16);
        v30 = *(_DWORD *)(v29 + 20);
        v31 = (unsigned int *)(v29 + 16);
        v33 = v32 + 1;
        if ((_DWORD)v32 != v30)
          goto LABEL_24;
        goto LABEL_23;
      }
      if (v28 != *(_DWORD *)(v19 + 28))
      {
LABEL_22:
        *v26 = v28 + 1;
        v29 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v19 + 16));
        v34 = *(_QWORD *)(v19 + 32);
        v35 = *(int *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v35 + 1;
        *(_QWORD *)(v34 + 8 * v35 + 8) = v29;
        v32 = *(unsigned int *)(v29 + 16);
        v30 = *(_DWORD *)(v29 + 20);
        v31 = (unsigned int *)(v29 + 16);
        v33 = v32 + 1;
        if ((_DWORD)v32 != v30)
        {
LABEL_24:
          v36 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v36 + 8 * v32) = a2;
          *(_DWORD *)(v29 + 16) = v33;
          v37 = v32 + 2;
          if (v33 == v30)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v31, v37);
            v36 = *(_QWORD *)(v29 + 24);
          }
          *(_QWORD *)(v36 + 8 * v33) = a2;
          *v31 = v37;
          operations_research::sat::PresolveContext::InitializeNewDomains(this, a3);
          v8 = *((_QWORD *)this + 106);
          v10 = *((_QWORD *)this + 109);
          v9 = (v7 >> 7) ^ (v8 >> 12);
          goto LABEL_27;
        }
LABEL_23:
        google::protobuf::RepeatedField<long long>::Reserve(v31, v33);
        v30 = *(_DWORD *)(v29 + 20);
        goto LABEL_24;
      }
    }
    else
    {
      v28 = *(_DWORD *)(v19 + 28);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v19 + 16), v28 + 1);
    v26 = *(int **)(v19 + 32);
    v28 = *v26;
    goto LABEL_22;
  }
LABEL_27:
  for (j = 0; ; v9 = j + v39)
  {
    v39 = v9 & v10;
    v40 = *(_QWORD *)(v8 + v39);
    v41 = ((v40 ^ v11) - 0x101010101010101) & ~(v40 ^ v11) & 0x8080808080808080;
    if (v41)
      break;
LABEL_32:
    if ((v40 & (~v40 << 6) & 0x8080808080808080) != 0)
    {
      v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ a2)));
      v42 = *((_QWORD *)this + 107);
      v44 = v42 + 16 * v43;
      *(_QWORD *)v44 = a2;
      *(_DWORD *)(v44 + 8) = 0;
      return operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v42 + 16 * v43 + 8));
    }
    j += 8;
  }
  v42 = *((_QWORD *)this + 107);
  while (1)
  {
    v43 = (v39 + (__clz(__rbit64(v41)) >> 3)) & v10;
    if (*(_QWORD *)(v42 + 16 * v43) == a2)
      return operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v42 + 16 * v43 + 8));
    v41 &= v41 - 1;
    if (!v41)
      goto LABEL_32;
  }
}

void operations_research::sat::PresolveContext::AddImplication(operations_research::sat::PresolveContext *this, int a2, int a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  google::protobuf::Arena *v20;

  v5 = *((_QWORD *)this + 6);
  v6 = *(int **)(v5 + 56);
  if (!v6)
  {
    v8 = *(_DWORD *)(v5 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 40), v8 + 1);
    v6 = *(int **)(v5 + 56);
    v8 = *v6;
LABEL_8:
    *v6 = v8 + 1;
    v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v5 + 40));
    v13 = *(_QWORD *)(v5 + 56);
    v14 = *(int *)(v5 + 48);
    *(_DWORD *)(v5 + 48) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 8) = v9;
    v11 = *(unsigned int *)(v9 + 16);
    v10 = (unsigned int *)(v9 + 16);
    v12 = v11 + 1;
    if ((_DWORD)v11 != *(_DWORD *)(v9 + 20))
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = *(int *)(v5 + 48);
  v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *(_DWORD *)(v5 + 52))
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_DWORD *)(v5 + 48) = v7 + 1;
  v9 = *(_QWORD *)&v6[2 * v7 + 2];
  v11 = *(unsigned int *)(v9 + 16);
  v10 = (unsigned int *)(v9 + 16);
  v12 = v11 + 1;
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 20))
LABEL_9:
    google::protobuf::RepeatedField<int>::Reserve(v10, v12);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v11) = a2;
  *(_DWORD *)(v9 + 16) = v12;
  if (*(_DWORD *)(v9 + 60) == 4)
  {
    v15 = *(_QWORD *)(v9 + 48);
    v17 = *(unsigned int *)(v15 + 16);
    v16 = (unsigned int *)(v15 + 16);
    v18 = v17 + 1;
    if ((_DWORD)v17 != *(_DWORD *)(v15 + 20))
      goto LABEL_17;
    goto LABEL_16;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v9);
  *(_DWORD *)(v9 + 60) = 4;
  v19 = *(_QWORD *)(v9 + 8);
  v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
    v20 = *(google::protobuf::Arena **)v20;
  v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v20);
  *(_QWORD *)(v9 + 48) = v15;
  v17 = *(unsigned int *)(v15 + 16);
  v16 = (unsigned int *)(v15 + 16);
  v18 = v17 + 1;
  if ((_DWORD)v17 == *(_DWORD *)(v15 + 20))
LABEL_16:
    google::protobuf::RepeatedField<int>::Reserve(v16, v18);
LABEL_17:
  *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v17) = a3;
  *(_DWORD *)(v15 + 16) = v18;
}

void operations_research::sat::PresolveContext::AddImplyInDomain(operations_research::sat::PresolveContext *this, unsigned int a2, unsigned int a3, const operations_research::Domain *a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  google::protobuf::Arena *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;

  v7 = *((_QWORD *)this + 6);
  v8 = *(int **)(v7 + 56);
  if (!v8)
  {
    v10 = *(_DWORD *)(v7 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v7 + 40), v10 + 1);
    v8 = *(int **)(v7 + 56);
    v10 = *v8;
    goto LABEL_8;
  }
  v9 = *(int *)(v7 + 48);
  v10 = *v8;
  if ((int)v9 < *v8)
  {
    *(_DWORD *)(v7 + 48) = v9 + 1;
    v11 = *(_QWORD *)&v8[2 * v9 + 2];
    v12 = (unsigned int *)(v11 + 16);
    if (*(int *)(v11 + 16) > 0)
      goto LABEL_17;
    goto LABEL_9;
  }
  if (v10 == *(_DWORD *)(v7 + 52))
    goto LABEL_7;
LABEL_8:
  *v8 = v10 + 1;
  v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v7 + 40));
  v13 = *(_QWORD *)(v7 + 56);
  v14 = *(int *)(v7 + 48);
  *(_DWORD *)(v7 + 48) = v14 + 1;
  *(_QWORD *)(v13 + 8 * v14 + 8) = v11;
  v12 = (unsigned int *)(v11 + 16);
  if (*(int *)(v11 + 16) > 0)
    goto LABEL_17;
LABEL_9:
  google::protobuf::RepeatedField<int>::Reserve(v12, 1);
  v15 = (int)*v12;
  if ((int)v15 > 0)
    goto LABEL_17;
  v16 = 4 * v15;
  v17 = 4 - 4 * v15;
  v18 = *(_QWORD *)(v11 + 24);
  v19 = (unsigned int *)(v18 + 4 * v15);
  v20 = v17 >> 2;
  if (v17 < 0x20)
  {
    v21 = v17 >> 2;
LABEL_15:
    v25 = v21 + 1;
    do
    {
      *v19++ = a2;
      --v25;
    }
    while (v25 > 1);
    goto LABEL_17;
  }
  v19 += v20 & 0x3FFFFFFFFFFFFFF8;
  v21 = (v17 >> 2) & 7;
  v22 = vdupq_n_s32(a2);
  v23 = (int32x4_t *)(v16 + v18 + 16);
  v24 = v20 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    v23[-1] = v22;
    *v23 = v22;
    v23 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFF8))
    goto LABEL_15;
LABEL_17:
  *(_DWORD *)(v11 + 16) = 1;
  if (*(_DWORD *)(v11 + 60) == 12)
  {
    v26 = *(_QWORD *)(v11 + 48);
    v27 = (unsigned int *)(v26 + 16);
    if (*(int *)(v26 + 16) > 0)
      goto LABEL_31;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v11);
    *(_DWORD *)(v11 + 60) = 12;
    v28 = *(_QWORD *)(v11 + 8);
    v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    if ((v28 & 1) != 0)
      v29 = *(google::protobuf::Arena **)v29;
    v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v29);
    *(_QWORD *)(v11 + 48) = v26;
    v27 = (unsigned int *)(v26 + 16);
    if (*(int *)(v26 + 16) > 0)
      goto LABEL_31;
  }
  google::protobuf::RepeatedField<int>::Reserve(v27, 1);
  v30 = (int)*v27;
  if ((int)v30 > 0)
    goto LABEL_31;
  v31 = 4 * v30;
  v32 = 4 - 4 * v30;
  v33 = *(_QWORD *)(v26 + 24);
  v34 = (unsigned int *)(v33 + 4 * v30);
  v35 = v32 >> 2;
  if (v32 < 0x20)
  {
    v36 = v32 >> 2;
LABEL_29:
    v40 = v36 + 1;
    do
    {
      *v34++ = a3;
      --v40;
    }
    while (v40 > 1);
    goto LABEL_31;
  }
  v34 += v35 & 0x3FFFFFFFFFFFFFF8;
  v36 = (v32 >> 2) & 7;
  v37 = vdupq_n_s32(a3);
  v38 = (int32x4_t *)(v31 + v33 + 16);
  v39 = v35 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    v38[-1] = v37;
    *v38 = v37;
    v38 += 2;
    v39 -= 8;
  }
  while (v39);
  if (v35 != (v35 & 0x3FFFFFFFFFFFFFF8))
    goto LABEL_29;
LABEL_31:
  v41 = *(_DWORD *)(v26 + 40);
  *(_DWORD *)(v26 + 16) = 1;
  if (v41 <= 0)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 40), 1);
    v42 = *(int *)(v26 + 40);
    if ((int)v42 <= 0)
      memset_pattern16((void *)(*(_QWORD *)(v26 + 48) + 8 * v42), &unk_22DCF6160, 8 - 8 * v42);
  }
  *(_DWORD *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 40) = 1;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), *(_QWORD *)a4 >> 1);
  v43 = *(_QWORD *)a4;
  v46 = (uint64_t *)*((_QWORD *)a4 + 1);
  v45 = (char *)a4 + 8;
  v44 = v46;
  if ((v43 & 1) != 0)
    v47 = v44;
  else
    v47 = (uint64_t *)v45;
  if (v43 >= 2)
  {
    v48 = &v47[2 * (v43 >> 1)];
    v49 = *(_DWORD *)(v26 + 64);
    do
    {
      v50 = *v47;
      v51 = *(_DWORD *)(v26 + 68);
      v52 = v49 + 1;
      if (v49 == v51)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v49 + 1);
        v51 = *(_DWORD *)(v26 + 68);
      }
      v53 = *(_QWORD *)(v26 + 72);
      *(_QWORD *)(v53 + 8 * v49) = v50;
      *(_DWORD *)(v26 + 64) = v52;
      v54 = v47[1];
      v49 += 2;
      if (v52 == v51)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v49);
        v53 = *(_QWORD *)(v26 + 72);
      }
      *(_QWORD *)(v53 + 8 * v52) = v54;
      *(_DWORD *)(v26 + 64) = v49;
      v47 += 2;
    }
    while (v47 != v48);
  }
}

BOOL operations_research::sat::PresolveContext::DomainIsEmpty(operations_research::sat::PresolveContext *this, int a2)
{
  int v2;

  if (~a2 <= a2)
    v2 = a2;
  else
    v2 = ~a2;
  return operations_research::Domain::IsEmpty((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v2));
}

BOOL operations_research::sat::PresolveContext::IsFixed(operations_research::sat::PresolveContext *this, const char *a2)
{
  int v2;

  if (~(_DWORD)a2 <= (int)a2)
    v2 = (int)a2;
  else
    v2 = ~(_DWORD)a2;
  return operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v2), a2);
}

BOOL operations_research::sat::PresolveContext::LiteralIsTrue(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
    return operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)a2), a2) == 0;
  else
    return operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a2) == 1;
}

BOOL operations_research::sat::PresolveContext::LiteralIsFalse(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
    return operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)a2), a2) == 1;
  else
    return operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a2) == 0;
}

uint64_t operations_research::sat::PresolveContext::MinOf(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
    return -operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)a2), a2);
  else
    return operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a2);
}

uint64_t operations_research::sat::PresolveContext::MaxOf(operations_research::sat::PresolveContext *this, const char *a2)
{
  if ((a2 & 0x80000000) != 0)
    return -operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)a2), a2);
  else
    return operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a2);
}

uint64_t operations_research::sat::PresolveContext::MinOf(operations_research::sat::PresolveContext *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((_QWORD *)a2 + 8);
  if (*((int *)a2 + 4) >= 1)
  {
    for (i = 0; i < *((int *)a2 + 4); ++i)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * i);
      v8 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * i);
      if (v7 < 1)
      {
        if ((v8 & 0x80000000) != 0)
        {
          v9 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v8), (const char *)a2);
          goto LABEL_11;
        }
        v6 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v8), (const char *)a2);
      }
      else
      {
        if ((v8 & 0x80000000) != 0)
        {
          v9 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v8), (const char *)a2);
LABEL_11:
          v6 = -v9;
          goto LABEL_4;
        }
        v6 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v8), (const char *)a2);
      }
LABEL_4:
      v2 += v6 * v7;
    }
  }
  return v2;
}

uint64_t operations_research::sat::PresolveContext::MaxOf(operations_research::sat::PresolveContext *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((_QWORD *)a2 + 8);
  if (*((int *)a2 + 4) >= 1)
  {
    for (i = 0; i < *((int *)a2 + 4); ++i)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * i);
      v8 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * i);
      if (v7 < 1)
      {
        if ((v8 & 0x80000000) != 0)
        {
          v9 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v8), (const char *)a2);
          goto LABEL_11;
        }
        v6 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v8), (const char *)a2);
      }
      else
      {
        if ((v8 & 0x80000000) != 0)
        {
          v9 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v8), (const char *)a2);
LABEL_11:
          v6 = -v9;
          goto LABEL_4;
        }
        v6 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v8), (const char *)a2);
      }
LABEL_4:
      v2 += v6 * v7;
    }
  }
  return v2;
}

BOOL operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(operations_research::sat::PresolveContext *this, int a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v4 = a2;
  v5 = *((_QWORD *)this + 137);
  if (a2 < (unint64_t)((*((_QWORD *)this + 138) - v5) >> 2))
  {
    v6 = a2;
    v7 = a2;
    if (*(_DWORD *)(v5 + 4 * a2) != a2)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
      v5 = *((_QWORD *)this + 137);
      v6 = *(_DWORD *)(v5 + 4 * v4);
      v7 = v6;
    }
    if (*(int *)(*((_QWORD *)this + 146) + 4 * v7) >= 2)
    {
      if (v4 >= (*((_QWORD *)this + 138) - v5) >> 2 || v6 == a2)
        return 0;
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
      if (*(_DWORD *)(*((_QWORD *)this + 137) + 4 * v4) == a2)
        return 0;
    }
  }
  v10 = *((_QWORD *)this + 153);
  if (v4 >= (*((_QWORD *)this + 154) - v10) >> 2)
    return 1;
  v11 = a2;
  v12 = v4;
  if (*(_DWORD *)(v10 + 4 * v4) != a2)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2);
    v10 = *((_QWORD *)this + 153);
    v11 = *(_DWORD *)(v10 + 4 * v4);
    v12 = v11;
  }
  if (*(int *)(*((_QWORD *)this + 162) + 4 * v12) < 2)
    return 1;
  result = 0;
  if (v4 < (*((_QWORD *)this + 154) - v10) >> 2 && v11 != a2)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2);
    return *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v4) != a2;
  }
  return result;
}

BOOL operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(operations_research::sat::PresolveContext *this, int a2)
{
  _BOOL8 result;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) != *(_DWORD *)(*((_QWORD *)this + 6) + 48))
    return 0;
  if (~a2 > a2)
    a2 = ~a2;
  if (*(_QWORD *)(*((_QWORD *)this + 85) + 48 * a2 + 16) != 1)
    return 0;
  result = operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(this, a2);
  if ((_DWORD)result)
    return *((_BYTE *)this + 64) == 0;
  return result;
}

BOOL operations_research::sat::PresolveContext::ConstraintVariableGraphIsUpToDate(operations_research::sat::PresolveContext *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) == *(int *)(*((_QWORD *)this + 6) + 48);
}

BOOL operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(operations_research::sat::PresolveContext *this, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) != *(_DWORD *)(*((_QWORD *)this + 6) + 48))
    return 0;
  if (~a2 > a2)
    a2 = ~a2;
  if (*((_BYTE *)this + 64))
    return 0;
  v3 = 0;
  v4 = (_QWORD *)(*((_QWORD *)this + 85) + 48 * a2);
  v5 = ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7));
  v6 = (v5 >> 7) ^ (*v4 >> 12);
  v7 = v4[3];
  v8 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(*v4 + v9);
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_10:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v3 += 8;
    v6 = v3 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(v4[1] + 4 * v12) == -1)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_10;
  }
  return v12 != v7
      && v4[2] == 2
      && operations_research::sat::PresolveContext::VariableIsNotRepresentativeOfEquivalenceClass(this, a2);
}

BOOL operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(operations_research::sat::PresolveContext *this, int a2)
{
  int v2;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) != *(_DWORD *)(*((_QWORD *)this + 6) + 48))
    return 0;
  if (~a2 <= a2)
    v2 = a2;
  else
    v2 = ~a2;
  return *(_QWORD *)(*((_QWORD *)this + 85) + 48 * v2 + 16) == 0;
}

unint64_t operations_research::sat::PresolveContext::MarkVariableAsRemoved(operations_research::sat::PresolveContext *this, int a2)
{
  uint64_t v3;
  unint64_t result;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = 0;
  result = (unint64_t)this + 1368;
  if (~a2 <= a2)
    v5 = a2;
  else
    v5 = ~a2;
  v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v5));
  v7 = *((_QWORD *)this + 171);
  v8 = (v6 >> 7) ^ (v7 >> 12);
  v9 = *((_QWORD *)this + 174);
  while (1)
  {
    v10 = v8 & v9;
    v11 = *(_QWORD *)(v7 + v10);
    v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12)
      break;
LABEL_8:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)result, v6);
      *(_DWORD *)(*((_QWORD *)this + 172) + 4 * result) = v5;
      return result;
    }
    v3 += 8;
    v8 = v3 + v10;
  }
  while (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * ((v10 + (__clz(__rbit64(v12)) >> 3)) & v9)) != v5)
  {
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_8;
  }
  return result;
}

uint64_t operations_research::sat::PresolveContext::VariableWasRemoved(operations_research::sat::PresolveContext *this, const char *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char **v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  void **v34;
  void *v35;
  int v36;
  int v37;
  unint64_t v38;
  void *__p[2];
  unsigned __int8 v40;
  _BYTE v41[16];

  if (~(_DWORD)a2 <= (int)a2)
    v3 = (int)a2;
  else
    v3 = ~(_DWORD)a2;
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v3), a2))
    return 0;
  v4 = 0;
  v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v6 = *((_QWORD *)this + 171);
  v7 = (v5 >> 7) ^ (v6 >> 12);
  v8 = *((_QWORD *)this + 174);
  v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v6 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_9:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      return 0;
    v4 += 8;
    v7 = v4 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v13) == v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_9;
  }
  if (v13 == v8)
    return 0;
  if (!*(_QWORD *)(*((_QWORD *)this + 85) + 48 * v3 + 16))
    return 1;
  if (~v3 <= v3)
    v15 = v3;
  else
    v15 = ~v3;
  v16 = v15;
  v17 = *((_QWORD *)this + 137);
  if (v15 >= (unint64_t)((*((_QWORD *)this + 138) - v17) >> 2) || *(_DWORD *)(v17 + 4 * v15) == v15)
  {
    v18 = *((_QWORD *)this + 153);
    if (v15 >= (unint64_t)((*((_QWORD *)this + 154) - v18) >> 2))
      goto LABEL_24;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v15);
    v15 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v15);
    v16 = v15;
    v18 = *((_QWORD *)this + 153);
    if (v15 >= (unint64_t)((*((_QWORD *)this + 154) - v18) >> 2))
      goto LABEL_24;
  }
  if (*(_DWORD *)(v18 + 4 * v16) != v15)
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v15);
LABEL_24:
  google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 202);
  v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Variable ", 9);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" was removed, yet it appears in some constraints!", 49);
  google::LogMessage::~LogMessage((google::LogMessage *)__p);
  google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 204);
  v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"affine relation = ", 18);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" * X", 4);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" + ", 3);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)__p);
  v24 = (char **)(*((_QWORD *)this + 85) + 48 * v3);
  v25 = v24[1];
  v26 = *v24;
  if (**v24 <= -2)
  {
    do
    {
      v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v26 = (_QWORD *)((char *)v26 + v27);
      v25 += 4 * v27;
    }
    while (*(char *)v26 < -1);
  }
  v28 = &v24[3][(_QWORD)*v24];
  while (v26 != (_QWORD *)v28)
  {
    v29 = *(unsigned int *)v25;
    google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 207);
    v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"constraint #", 12);
    v31 = (_QWORD *)std::ostream::operator<<();
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" : ", 3);
    if ((v29 & 0x80000000) != 0)
    {
      v33 = 0;
      v40 = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      google::protobuf::Message::ShortDebugString(*(google::protobuf::Message **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 8 * v29 + 8), (uint64_t)__p);
      v33 = v40;
    }
    if ((v33 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v35 = (void *)v33;
    else
      v35 = __p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, (uint64_t)v35);
    if ((char)v40 < 0)
    {
      operator delete(__p[0]);
      google::LogMessage::~LogMessage((google::LogMessage *)v41);
      v37 = *((char *)v26 + 1);
      v26 = (_QWORD *)((char *)v26 + 1);
      v25 += 4;
      if (v37 <= -2)
      {
        do
        {
LABEL_42:
          v38 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v26 = (_QWORD *)((char *)v26 + v38);
          v25 += 4 * v38;
        }
        while (*(char *)v26 < -1);
      }
    }
    else
    {
      google::LogMessage::~LogMessage((google::LogMessage *)v41);
      v36 = *((char *)v26 + 1);
      v26 = (_QWORD *)((char *)v26 + 1);
      v25 += 4;
      if (v36 <= -2)
        goto LABEL_42;
    }
  }
  return 1;
}

void sub_22DBC06FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBC0710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBC0724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBC0738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::PresolveContext::GetAffineRelation(operations_research::sat::PresolveContext *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  if (~a2 > a2)
    a2 = ~a2;
  v6 = a2;
  v7 = *((_QWORD *)this + 137);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 138) - v7) >> 2) || *(_DWORD *)(v7 + 4 * a2) == a2)
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
    a2 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v6);
    v9 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v6);
    v8 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v6);
    v6 = a2;
  }
  *(_DWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v8;
  v10 = *((_QWORD *)this + 153);
  if (v6 >= (*((_QWORD *)this + 154) - v10) >> 2
    || *(_DWORD *)(v10 + 4 * v6) == a2
    || (operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2), v11 = *(_QWORD *)(*((_QWORD *)this + 156) + 8 * v6), *(_DWORD *)a3 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v6), v11 != -1))
  {
    if ((v3 & 0x80000000) == 0)
      return;
LABEL_13:
    *(_QWORD *)(a3 + 8) = -v9;
    *(_QWORD *)(a3 + 16) = -v8;
    return;
  }
  v9 = -v9;
  *(_QWORD *)(a3 + 8) = v9;
  if (v3 < 0)
    goto LABEL_13;
}

BOOL operations_research::sat::PresolveContext::VariableIsOnlyUsedInEncoding(operations_research::sat::PresolveContext *this, int a2)
{
  int v2;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) != *(_DWORD *)(*((_QWORD *)this + 6) + 48))
    return 0;
  if (~a2 <= a2)
    v2 = a2;
  else
    v2 = ~a2;
  return *(_QWORD *)(*((_QWORD *)this + 85) + 48 * v2 + 16) == *(int *)(*((_QWORD *)this + 91) + 4 * v2);
}

void operations_research::sat::PresolveContext::DomainOf(operations_research::sat::PresolveContext *this@<X0>, const char *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  void *__p[2];

  *a3 = 0;
  if ((a2 & 0x80000000) != 0)
  {
    operations_research::Domain::Negation((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)a2), a2, &v12);
    v10 = *a3;
    if (&v12 == a3)
    {
      if ((v10 & 1) != 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = (void **)(a3 + 1);
      if ((v10 & 1) != 0)
        operator delete(*v11);
      *a3 = v12;
      *(_OWORD *)v11 = *(_OWORD *)__p;
    }
  }
  else
  {
    v4 = (uint64_t *)(*((_QWORD *)this + 64) + 24 * a2);
    if (v4 != (uint64_t *)a3)
    {
      v5 = *v4;
      v8 = (__int128 *)v4[1];
      v6 = (__int128 *)(v4 + 1);
      v7 = v8;
      if ((v5 & 1) != 0)
        v9 = v7;
      else
        v9 = v6;
      absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(a3, v9, v5 >> 1);
    }
  }
}

void sub_22DBC09B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)v1 & 1) != 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::PresolveContext::DomainContains(operations_research::sat::PresolveContext *this, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0)
    return operations_research::Domain::Contains((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~a2), -a3);
  else
    return operations_research::Domain::Contains((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a3);
}

uint64_t operations_research::sat::PresolveContext::IntersectDomainWith(operations_research::sat::PresolveContext *this, const char *a2, const operations_research::Domain *a3, BOOL *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  void **v10;
  unint64_t *v11;
  void **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v22;
  void *v23[3];
  unint64_t v24[3];
  unint64_t v25;
  void *v26[2];
  unint64_t v27;
  void *__p[2];

  if (~(_DWORD)a2 <= (int)a2)
    v7 = a2;
  else
    v7 = ~(_DWORD)a2;
  if ((a2 & 0x80000000) != 0)
  {
    operations_research::Domain::Negation(a3, a2, &v27);
    if ((operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v7), (const operations_research::Domain *)&v27) & 1) != 0)
    {
      if ((v27 & 1) != 0)
        operator delete(__p[0]);
      return 1;
    }
    operations_research::Domain::IntersectionWith((_QWORD *)(*((_QWORD *)this + 64) + 24 * (int)v7), (const operations_research::Domain *)&v27, &v25);
    v11 = (unint64_t *)(*((_QWORD *)this + 64) + 24 * (int)v7);
    if (v11 == &v25)
    {
      if ((v25 & 1) != 0)
        operator delete(v26[0]);
    }
    else
    {
      v12 = (void **)(v11 + 1);
      if ((*(_BYTE *)v11 & 1) != 0)
        operator delete(*v12);
      *v11 = v25;
      *(_OWORD *)v12 = *(_OWORD *)v26;
    }
  }
  else
  {
    if ((operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v7), a3) & 1) != 0)return 1;
    v8 = 24 * (int)v7;
    operations_research::Domain::IntersectionWith((_QWORD *)(*((_QWORD *)this + 64) + v8), a3, &v27);
    v9 = (unint64_t *)(*((_QWORD *)this + 64) + v8);
    if (v9 != &v27)
    {
      v10 = (void **)(v9 + 1);
      if ((*(_BYTE *)v9 & 1) != 0)
        operator delete(*v10);
      *v9 = v27;
      *(_OWORD *)v10 = *(_OWORD *)__p;
      goto LABEL_19;
    }
  }
  if ((v27 & 1) != 0)
    operator delete(__p[0]);
LABEL_19:
  if (a4)
    *a4 = 1;
  operations_research::SparseBitset<long long>::Set((_QWORD *)this + 31, (int)v7);
  if (!operations_research::Domain::IsEmpty((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v7)))
  {
    if (~(_DWORD)v7 <= (int)v7)
      v14 = v7;
    else
      v14 = ~(_DWORD)v7;
    v15 = v14;
    v16 = *((_QWORD *)this + 137);
    if (v14 >= (unint64_t)((*((_QWORD *)this + 138) - v16) >> 2) || *(_DWORD *)(v16 + 4 * v14) == v14)
    {
      v17 = 0;
      v18 = 1;
      v19 = *((_QWORD *)this + 153);
      if (v14 >= (unint64_t)((*((_QWORD *)this + 154) - v19) >> 2))
        goto LABEL_34;
    }
    else
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v14);
      v14 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v14);
      v18 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v15);
      v17 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v15);
      v15 = v14;
      v19 = *((_QWORD *)this + 153);
      if (v14 >= (unint64_t)((*((_QWORD *)this + 154) - v19) >> 2))
        goto LABEL_34;
    }
    if (*(_DWORD *)(v19 + 4 * v15) != v14)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v14);
      v14 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v15);
      if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v15) == -1)
        v18 = -v18;
    }
LABEL_34:
    if ((v7 & 0x80000000) == 0)
      v20 = v18;
    else
      v20 = -v18;
    if (v14 == (_DWORD)v7)
      return 1;
    if ((v7 & 0x80000000) == 0)
      v17 = -v17;
    operations_research::sat::PresolveContext::DomainOf(this, (const char *)v7, v24);
    operations_research::Domain::Domain(v23, v17);
    operations_research::Domain::AdditionWith((operations_research::Domain *)v24, (const operations_research::Domain *)v23, &v25, v22);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v25, v20, &v27);
    v13 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v14, (const operations_research::Domain *)&v27, 0);
    if ((v27 & 1) != 0)
    {
      operator delete(__p[0]);
      if ((v25 & 1) == 0)
      {
LABEL_44:
        if (((uint64_t)v23[0] & 1) == 0)
          goto LABEL_45;
        goto LABEL_49;
      }
    }
    else if ((v25 & 1) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v26[0]);
    if (((uint64_t)v23[0] & 1) == 0)
    {
LABEL_45:
      if ((v24[0] & 1) == 0)
        return v13;
LABEL_50:
      operator delete((void *)v24[1]);
      return v13;
    }
LABEL_49:
    operator delete(v23[1]);
    if ((v24[0] & 1) == 0)
      return v13;
    goto LABEL_50;
  }
  v13 = 0;
  *((_BYTE *)this + 504) = 1;
  return v13;
}

void sub_22DBC0D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *__p)
{
  if ((a18 & 1) != 0)
  {
    operator delete(__p);
    if ((a15 & 1) == 0)
    {
LABEL_3:
      if ((a9 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a9 & 1) == 0)
  {
LABEL_4:
    if ((a12 & 1) == 0)
LABEL_10:
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(a13);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a10);
  if ((a12 & 1) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t operations_research::sat::PresolveContext::SetLiteralToFalse(operations_research::sat::PresolveContext *this, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v6[3];

  if ((int)~a2 <= (int)a2)
    v3 = a2;
  else
    v3 = ~a2;
  operations_research::Domain::Domain(v6, a2 >> 31);
  v4 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)v6, 0);
  if (((uint64_t)v6[0] & 1) != 0)
    operator delete(v6[1]);
  return v4;
}

void sub_22DBC0E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PresolveContext::SetLiteralToTrue(operations_research::sat::PresolveContext *this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v6[3];

  if (a2 > ~a2)
    v3 = a2;
  else
    v3 = ~a2;
  operations_research::Domain::Domain(v6, a2 >= 0);
  v4 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)v6, 0);
  if (((uint64_t)v6[0] & 1) != 0)
    operator delete(v6[1]);
  return v4;
}

void sub_22DBC0EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PresolveContext::UpdateRuleStats(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[16];

  if (*(_BYTE *)(a1 + 65))
  {
    if (*operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__[0] >= 1
      && (operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::UpdateRuleStats(std::string const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 287);
      google::LogMessage::stream((google::LogMessage *)v14);
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" : ", 3);
      v6 = *(char *)(a2 + 23);
      if (v6 >= 0)
        v7 = a2;
      else
        v7 = *(_QWORD *)a2;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 23);
      else
        v8 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      google::LogMessage::~LogMessage((google::LogMessage *)v14);
    }
    v9 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::find_or_prepare_insert<std::string>((uint64_t *)(a1 + 72), (unsigned __int8 *)a2);
    v10 = v9;
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 80) + 32 * v9;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(*(_QWORD *)(a1 + 80) + 32 * v9), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v13 = *(_OWORD *)a2;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v12 = v13;
      }
      *(_DWORD *)(v12 + 24) = 0;
    }
    ++*(_DWORD *)(*(_QWORD *)(a1 + 80) + 32 * v10 + 24);
  }
  ++*(_QWORD *)(a1 + 120);
}

void sub_22DBC1048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::PresolveContext::AddVariableUsage(operations_research::sat::PresolveContext *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v4 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 8 * a2 + 8);
  operations_research::sat::UsedVariables((operations_research::sat *)v5, &v33);
  v6 = *((_QWORD *)this + 82);
  v7 = v6 + 24 * a2;
  v8 = *(void **)v7;
  if (*(_QWORD *)v7)
  {
    *(_QWORD *)(v6 + 24 * (int)v4 + 8) = v8;
    operator delete(v8);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_OWORD *)v7 = v33;
  *(_QWORD *)(v6 + 24 * v4 + 16) = v34;
  operations_research::sat::UsedIntervals((operations_research::sat *)v5, (unint64_t *)&v33);
  v9 = *((_QWORD *)this + 94);
  v10 = v9 + 24 * v4;
  v11 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v9 + 24 * (int)v4 + 8) = v11;
    operator delete(v11);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
  }
  v32 = v4;
  *(_OWORD *)v10 = v33;
  *(_QWORD *)(v10 + 16) = v34;
  v12 = *((_QWORD *)this + 82) + 24 * v4;
  v13 = *(int **)v12;
  v14 = *(int **)(v12 + 8);
  if (*(int **)v12 != v14)
  {
    v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v4));
    do
    {
      v19 = 0;
      v21 = (_QWORD *)(*((_QWORD *)this + 85) + 48 * *v13);
      v20 = (v15 >> 7) ^ (*v21 >> 12);
      v22 = v21[3];
      while (1)
      {
        v16 = v20 & v22;
        v17 = *(_QWORD *)(*v21 + v16);
        v18 = ((v17 ^ (0x101010101010101 * (v15 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                            * (v15 & 0x7F))) & 0x8080808080808080;
        if (v18)
          break;
LABEL_10:
        if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v21[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((_QWORD *)this + 85) + 48 * *v13), v15)) = a2;
          goto LABEL_13;
        }
        v19 += 8;
        v20 = v19 + v16;
      }
      while (*(_DWORD *)(v21[1] + 4 * ((v16 + (__clz(__rbit64(v18)) >> 3)) & v22)) != a2)
      {
        v18 &= v18 - 1;
        if (!v18)
          goto LABEL_10;
      }
LABEL_13:
      ++v13;
    }
    while (v13 != v14);
  }
  v23 = *((_QWORD *)this + 94) + 24 * (int)v32;
  v24 = *(int **)v23;
  v25 = *(int **)(v23 + 8);
  if (v24 != v25)
  {
    v26 = *((_QWORD *)this + 97);
    do
    {
      v27 = *v24++;
      ++*(_DWORD *)(v26 + 4 * v27);
    }
    while (v24 != v25);
  }
  v28 = *((_QWORD *)this + 88);
  v29 = *(unsigned int *)(v28 + 4 * v32);
  if ((v29 & 0x80000000) == 0)
    --*(_DWORD *)(*((_QWORD *)this + 91) + 4 * v29);
  if (*(_DWORD *)(v5 + 60) == 12)
  {
    v30 = *(_QWORD *)(v5 + 48);
    if (*(_DWORD *)(v30 + 16) == 1)
    {
      v31 = **(_DWORD **)(v30 + 24);
      if (~v31 > v31)
        v31 = ~v31;
      *(_DWORD *)(v28 + 4 * v32) = v31;
      ++*(_DWORD *)(*((_QWORD *)this + 91) + 4 * v31);
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(a1, v8);
      v9 = *a1;
      v15 = a1[1];
      *(_DWORD *)(v15 + 4 * result) = *a2;
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 4 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 4 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

char **operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(char **this, int a2)
{
  char **v2;
  uint64_t v3;
  operations_research::sat *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char **v67;
  uint64_t v68;
  operations_research::sat *v69;
  unint64_t v70;
  _BYTE v72[24];
  int v73;

  v73 = a2;
  if (!*((_BYTE *)this + 504))
  {
    v2 = this;
    v3 = a2;
    v4 = *(operations_research::sat **)(*((_QWORD *)this[6] + 7) + 8 * a2 + 8);
    v5 = (uint64_t)&this[94][24 * a2];
    v6 = *(int **)v5;
    v7 = *(int **)(v5 + 8);
    if (v6 != v7)
    {
      v8 = this[97];
      do
      {
        v9 = *v6++;
        --*(_DWORD *)&v8[4 * v9];
      }
      while (v6 != v7);
    }
    operations_research::sat::UsedIntervals(v4, (unint64_t *)v72);
    v10 = v2[94];
    v11 = &v10[24 * (int)v3];
    v12 = *(void **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)&v10[24 * (int)v3 + 8] = v12;
      operator delete(v12);
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
    *(_OWORD *)v11 = *(_OWORD *)v72;
    *(_QWORD *)&v10[24 * v3 + 16] = *(_QWORD *)&v72[16];
    v13 = (uint64_t)&v2[94][24 * v3];
    v14 = *(int **)v13;
    v15 = *(int **)(v13 + 8);
    if (v14 != v15)
    {
      v16 = v2[97];
      do
      {
        v17 = *v14++;
        ++*(_DWORD *)&v16[4 * v17];
      }
      while (v14 != v15);
    }
    operations_research::sat::UsedVariables(v4, v72);
    v18 = v2[168];
    if (v18)
    {
      v2[169] = v18;
      operator delete(v18);
    }
    v19 = *(int **)v72;
    v2[168] = *(char **)v72;
    v20 = *(int **)&v72[8];
    *(_OWORD *)(v2 + 169) = *(_OWORD *)&v72[8];
    v21 = &v2[82][24 * (int)v3];
    v22 = (*((_QWORD *)v21 + 1) - *(_QWORD *)v21) >> 2;
    v23 = v20;
    v68 = v3;
    v69 = v4;
    v67 = v2 + 168;
    LODWORD(v24) = 0;
    if (v19 != v20)
    {
      v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v3));
      v26 = v25 >> 7;
      v70 = v25;
      v27 = 0x101010101010101 * (v25 & 0x7F);
      v28 = a2;
      do
      {
        while (1)
        {
          v35 = *v19;
          if ((int)v24 < (int)v22)
            break;
LABEL_51:
          v32 = 0;
          v58 = (uint64_t *)&v2[85][48 * v35];
          v33 = v26 ^ ((unint64_t)*v58 >> 12);
          v59 = v58[3];
          while (1)
          {
            v29 = v33 & v59;
            v30 = *(_QWORD *)(*v58 + v29);
            v31 = ((v30 ^ v27) - 0x101010101010101) & ~(v30 ^ v27) & 0x8080808080808080;
            if (v31)
              break;
LABEL_17:
            if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
            {
              v34 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v58, v70);
              v28 = a2;
              *(_DWORD *)(v58[1] + 4 * v34) = a2;
              goto LABEL_20;
            }
            v32 += 8;
            v33 = v32 + v29;
          }
          while (*(_DWORD *)(v58[1] + 4 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v59)) != v28)
          {
            v31 &= v31 - 1;
            if (!v31)
              goto LABEL_17;
          }
LABEL_20:
          if (++v19 == v23)
            goto LABEL_52;
        }
        v24 = (int)v24;
        while (1)
        {
          v50 = *(_DWORD *)(*(_QWORD *)v21 + 4 * v24);
          if (v50 >= v35)
            break;
          v40 = 0;
          v51 = &v2[85][48 * v50];
          v52 = *(_QWORD *)v51;
          v41 = v26 ^ (*(_QWORD *)v51 >> 12);
          v53 = *((_QWORD *)v51 + 3);
          while (1)
          {
            v36 = v41 & v53;
            v37 = *(_QWORD *)(v52 + (v41 & v53));
            v38 = ((v37 ^ v27) - 0x101010101010101) & ~(v37 ^ v27) & 0x8080808080808080;
            if (v38)
              break;
LABEL_26:
            if ((v37 & (~v37 << 6) & 0x8080808080808080) != 0)
              goto LABEL_39;
            v40 += 8;
            v41 = v40 + v36;
          }
          while (1)
          {
            v39 = (v36 + (__clz(__rbit64(v38)) >> 3)) & v53;
            if (*(_DWORD *)(*((_QWORD *)v51 + 1) + 4 * v39) == v28)
              break;
            v38 &= v38 - 1;
            if (!v38)
              goto LABEL_26;
          }
          if (v39 != v53)
          {
            --*((_QWORD *)v51 + 2);
            v42 = *(_QWORD *)(v52 + v39) & (~*(_QWORD *)(v52 + v39) << 6) & 0x8080808080808080;
            v43 = *(_QWORD *)(v52 + ((v39 - 8) & v53)) & (~*(_QWORD *)(v52 + ((v39 - 8) & v53)) << 6) & 0x8080808080808080;
            if (!v43 || v42 == 0)
            {
              v48 = 0;
              v45 = -2;
            }
            else
            {
              v46 = (__clz(v43) >> 3) + (__clz(__rbit64(v42)) >> 3);
              v47 = v46 >= 8;
              v48 = v46 < 8;
              v45 = v47 ? -2 : 0x80;
            }
            *(_BYTE *)(v52 + v39) = v45;
            *(_BYTE *)((*((_QWORD *)v51 + 3) & (v39 - 8)) + (*((_QWORD *)v51 + 3) & 7) + *(_QWORD *)v51 + 1) = v45;
            v49 = *((_QWORD *)v51 + 4);
            *((_QWORD *)v51 + 5) += v48;
            if (v49)
            {
              v54 = (unint64_t *)(v49 + 8);
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 - 1, v54));
              v56 = (unint64_t *)(v49 + 16);
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
          }
LABEL_39:
          if ((_DWORD)++v24 == (_DWORD)v22)
          {
            LODWORD(v24) = v22;
            goto LABEL_51;
          }
        }
        if (v50 != v35)
          goto LABEL_51;
        LODWORD(v24) = v24 + 1;
        ++v19;
      }
      while (v19 != v23);
    }
LABEL_52:
    v60 = v22 - v24;
    v61 = v68;
    if ((int)v22 > (int)v24)
    {
      v62 = 4 * (int)v24;
      do
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)&v2[85][48 * *(int *)(*(_QWORD *)v21 + v62)], &v73);
        v62 += 4;
        --v60;
      }
      while (v60);
      v61 = v73;
    }
    this = (char **)&v2[82][24 * (int)v61];
    if (this != v67)
    {
      this = (char **)std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(this, *v67, v2[169], (v2[169] - *v67) >> 2);
      v61 = v73;
    }
    v63 = v2[88];
    v64 = *(unsigned int *)&v63[4 * v61];
    if ((v64 & 0x80000000) == 0)
      --*(_DWORD *)&v2[91][4 * v64];
    if (*((_DWORD *)v69 + 15) == 12)
    {
      v65 = *((_QWORD *)v69 + 6);
      if (*(_DWORD *)(v65 + 16) == 1)
      {
        v66 = **(_DWORD **)(v65 + 24);
        if (~v66 > v66)
          v66 = ~v66;
        *(_DWORD *)&v63[4 * v61] = v66;
        ++*(_DWORD *)&v2[91][4 * v66];
      }
    }
  }
  return this;
}

void operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(operations_research::sat::PresolveContext *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  std::vector<int>::value_type __x[4];
  uint64_t *v25;

  if (*((_BYTE *)this + 504))
    return;
  v2 = *((_QWORD *)this + 83);
  v3 = *((_QWORD *)this + 82);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
  v5 = *(int *)(*((_QWORD *)this + 6) + 48);
  __x[0] = v4;
  LODWORD(v25) = v5;
  if ((int)v5 < (int)v4)
  {
    v25 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__x, (int)&v25, "old_size <= new_size");
    if (v25)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 360, &v25);
      google::LogMessage::stream((google::LogMessage *)__x);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
    }
    v2 = *((_QWORD *)this + 83);
    v3 = *((_QWORD *)this + 82);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
    v6 = v5 >= v8;
    v7 = v5 - v8;
    if (v5 > v8)
      goto LABEL_4;
LABEL_7:
    if (!v6)
    {
      v9 = v3 + 24 * (int)v5;
      if (v2 != v9)
      {
        v10 = v2;
        do
        {
          v12 = *(void **)(v10 - 24);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *(_QWORD *)(v2 - 16) = v11;
            operator delete(v11);
          }
          v2 = v10;
        }
        while (v10 != v9);
      }
      *((_QWORD *)this + 83) = v9;
    }
    goto LABEL_14;
  }
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v5 <= v4)
    goto LABEL_7;
LABEL_4:
  std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 656, v7);
LABEL_14:
  __x[0] = -1;
  v13 = *((_QWORD *)this + 88);
  v14 = (*((_QWORD *)this + 89) - v13) >> 2;
  if (v5 <= v14)
  {
    if (v5 < v14)
      *((_QWORD *)this + 89) = v13 + 4 * v5;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 704), v5 - v14, __x);
  }
  v15 = *((_QWORD *)this + 95);
  v16 = *((_QWORD *)this + 94);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
  if (v5 <= v17)
  {
    if (v5 < v17)
    {
      v18 = v16 + 24 * (int)v5;
      if (v15 != v18)
      {
        v19 = *((_QWORD *)this + 95);
        do
        {
          v21 = *(void **)(v19 - 24);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v15 - 16) = v20;
            operator delete(v20);
          }
          v15 = v19;
        }
        while (v19 != v18);
      }
      *((_QWORD *)this + 95) = v18;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 752, v5 - v17);
  }
  v22 = *((_QWORD *)this + 97);
  v23 = (*((_QWORD *)this + 98) - v22) >> 2;
  if (v5 <= v23)
  {
    if (v5 < v23)
      *((_QWORD *)this + 98) = v22 + 4 * v5;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 776), v5 - v23);
  }
  if ((int)v5 > (int)v4)
  {
    do
    {
      operations_research::sat::PresolveContext::AddVariableUsage(this, v4);
      LODWORD(v4) = v4 + 1;
    }
    while ((_DWORD)v5 != (_DWORD)v4);
  }
}

void sub_22DBC1B64(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::AddRelation(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5, operations_research::AffineRelation *a6)
{
  int v10;
  uint64_t v11;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  const char *v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  operations_research::AffineRelation *v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE v31[16];

  v10 = (int)a2;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (v11 != 1)
    goto LABEL_25;
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 421);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: !VariableWasRemoved(x) ", 37);
    goto LABEL_29;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 422);
    v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !VariableWasRemoved(y) ", 37);
LABEL_29:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v31);
  }
  v14 = *((_QWORD *)a6 + 1);
  v15 = (*((_QWORD *)a6 + 2) - v14) >> 2;
  if (v15 <= v10)
  {
    v16 = v10;
  }
  else
  {
    v16 = v10;
    if (*(_DWORD *)(v14 + 4 * v10) != v10)
    {
      operations_research::AffineRelation::CompressPath(a6, v10);
      v14 = *((_QWORD *)a6 + 1);
      v16 = *(_DWORD *)(v14 + 4 * v10);
      v15 = (*((_QWORD *)a6 + 2) - v14) >> 2;
    }
  }
  v17 = (int)a3;
  if (v15 > (int)a3)
  {
    v17 = (int)a3;
    if (*(_DWORD *)(v14 + 4 * (int)a3) != (_DWORD)a3)
    {
      operations_research::AffineRelation::CompressPath(a6, (int)a3);
      v17 = *(_DWORD *)(*((_QWORD *)a6 + 1) + 4 * (int)a3);
    }
  }
  if (~v16 > v16)
    v16 = ~v16;
  v19 = (operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v16), v13) & 0x8000000000000000) == 0
     && operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v16), v18) < 2;
  if (~v17 > v17)
    v17 = ~v17;
  if (operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v17), v18) < 0)
  {
    v21 = 0;
    if (v19)
      goto LABEL_23;
LABEL_25:
    v22 = a6;
    v23 = v10;
    v24 = (int)a3;
    v25 = a4;
    v26 = a5;
    v27 = 1;
    v21 = 1;
    return operations_research::AffineRelation::TryAdd(v22, v23, v24, v25, v26, v27, v21);
  }
  v21 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v17), v20) < 2;
  if (!v19 && !v21)
    goto LABEL_25;
LABEL_23:
  v22 = a6;
  v23 = v10;
  v24 = (int)a3;
  v25 = a4;
  v26 = a5;
  v27 = v19;
  return operations_research::AffineRelation::TryAdd(v22, v23, v24, v25, v26, v27, v21);
}

void sub_22DBC1DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC1DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::AffineRelation::TryAdd(operations_research::AffineRelation *this, int a2, int a3, unint64_t a4, uint64_t a5, int a6, int a7)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33[2];
  int v34;
  uint64_t *v35;

  v33[0] = a4;
  v34 = 0;
  if (!a4)
  {
    v35 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v33, (int)&v34, "coeff != 0");
    if (v35)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 170, &v35);
      google::LogMessage::stream((google::LogMessage *)v33);
      goto LABEL_40;
    }
  }
  LODWORD(v33[0]) = a2;
  LODWORD(v35) = a3;
  if (a2 == a3)
  {
    v35 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v35, "x != y");
    if (v35)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 171, &v35);
      google::LogMessage::stream((google::LogMessage *)v33);
      goto LABEL_40;
    }
  }
  LODWORD(v33[0]) = a2;
  LODWORD(v35) = 0;
  if (a2 < 0)
  {
    v35 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v35, "x >= 0");
    if (v35)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 172, &v35);
      google::LogMessage::stream((google::LogMessage *)v33);
      goto LABEL_40;
    }
  }
  LODWORD(v33[0]) = a3;
  LODWORD(v35) = 0;
  if (a3 < 0)
  {
    v35 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v35, "y >= 0");
    if (v35)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 173, &v35);
      google::LogMessage::stream((google::LogMessage *)v33);
      goto LABEL_40;
    }
  }
  if (a2 <= a3)
    v14 = a3;
  else
    v14 = a2;
  operations_research::AffineRelation::IncreaseSizeOfMemberVectors(this, v14 + 1);
  v15 = *((_QWORD *)this + 10);
  v16 = *(_DWORD *)this;
  LODWORD(v33[0]) = *(_DWORD *)(v15 + 4 * a2);
  LODWORD(v35) = v16;
  if (LODWORD(v33[0]) != v16)
  {
    LODWORD(v33[0]) = *(_DWORD *)(v15 + 4 * a3);
    LODWORD(v35) = v16;
    if (LODWORD(v33[0]) != v16)
      goto LABEL_10;
LABEL_37:
    v35 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v35, "size_[y] != kSizeForRemovedEntry");
    if (v35)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 176, &v35);
      google::LogMessage::stream((google::LogMessage *)v33);
      std::ostream::operator<<();
      goto LABEL_40;
    }
    goto LABEL_10;
  }
  v35 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v35, "size_[x] != kSizeForRemovedEntry");
  if (v35)
  {
    google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 175, &v35);
    google::LogMessage::stream((google::LogMessage *)v33);
    std::ostream::operator<<();
LABEL_40:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v33);
  }
  v32 = *(_DWORD *)this;
  LODWORD(v33[0]) = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a3);
  LODWORD(v35) = v32;
  if (LODWORD(v33[0]) == v32)
    goto LABEL_37;
LABEL_10:
  operations_research::AffineRelation::CompressPath(this, a2);
  operations_research::AffineRelation::CompressPath(this, a3);
  v17 = *((_QWORD *)this + 1);
  v18 = *(_DWORD *)(v17 + 4 * a2);
  v19 = *(_DWORD *)(v17 + 4 * a3);
  if (v18 == v19)
    return 0;
  v21 = *((_QWORD *)this + 4);
  v22 = *(_QWORD *)(v21 + 8 * a2);
  v23 = *(_QWORD *)(v21 + 8 * a3) * a4;
  v24 = *((_QWORD *)this + 7);
  v25 = a5 + *(_QWORD *)(v24 + 8 * a3) * a4 - *(_QWORD *)(v24 + 8 * a2);
  if (a7 && !(v23 % v22))
  {
    v26 = v25 % v22 == 0;
    if (!a6)
    {
LABEL_20:
      v27 = 0;
      v28 = v18;
      v29 = v19;
      if (!v26)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else
  {
    v26 = 0;
    if (!a6)
      goto LABEL_20;
  }
  if (v22 % v23)
    goto LABEL_20;
  v27 = v25 % v23 == 0;
  v28 = v18;
  v29 = v19;
  if (!v26)
  {
LABEL_17:
    if (!v27)
      return 0;
    v30 = *((_QWORD *)this + 10);
    goto LABEL_23;
  }
LABEL_21:
  v30 = *((_QWORD *)this + 10);
  if (!v27 || *(_DWORD *)(v30 + 4 * a2) <= *(_DWORD *)(v30 + 4 * a3))
  {
    *(_DWORD *)(v17 + 4 * v28) = v19;
    *(_DWORD *)(v30 + 4 * v29) += *(_DWORD *)(v30 + 4 * v28);
    *(_QWORD *)(v21 + 8 * v28) = v23 / v22;
    v31 = v25 / v22;
    goto LABEL_25;
  }
LABEL_23:
  *(_DWORD *)(v17 + 4 * v29) = v18;
  *(_DWORD *)(v30 + 4 * v28) += *(_DWORD *)(v30 + 4 * v29);
  *(_QWORD *)(v21 + 8 * v29) = v22 / v23;
  v31 = -(v25 / v23);
  v28 = v29;
LABEL_25:
  *(_QWORD *)(v24 + 8 * v28) = v31;
  ++*((_DWORD *)this + 1);
  return 1;
}

void sub_22DBC2198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC21A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC21A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC21B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC21B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC21C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

unint64_t operations_research::sat::PresolveContext::ExploitFixedDomain(operations_research::sat::PresolveContext *this, const char *a2)
{
  const char *v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t k;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t j;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  operations_research::AffineRelation *v32;
  operations_research::sat::PresolveContext *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  unint64_t v41[2];

  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 438);
    v38 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_37;
  }
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 439);
    v39 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: IsFixed(var) ", 27);
    goto LABEL_37;
  }
  v5 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * a2), v4);
  v6 = 0;
  result = (unint64_t)this + 848;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v5));
  v9 = *((_QWORD *)this + 106);
  v10 = (v8 >> 7) ^ (v9 >> 12);
  v11 = *((_QWORD *)this + 109);
  v12 = 0x101010101010101 * (v8 & 0x7F);
  v13 = *((_QWORD *)this + 107);
  for (i = v10; ; i = v6 + v15)
  {
    v15 = i & v11;
    v16 = *(_QWORD *)(v9 + v15);
    v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17)
      break;
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
      goto LABEL_10;
    v6 += 8;
  }
  while (1)
  {
    v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    if (*(_QWORD *)(v13 + 16 * v18) == v5)
      break;
    v17 &= v17 - 1;
    if (!v17)
      goto LABEL_7;
  }
  if (v18 != v11)
  {
    for (j = 0; ; v10 = j + v25)
    {
      v25 = v10 & v11;
      v26 = *(_QWORD *)(v9 + (v10 & v11));
      v27 = ((v26 ^ v12) - 0x101010101010101) & ~(v26 ^ v12) & 0x8080808080808080;
      if (v27)
        break;
LABEL_20:
      if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
      {
        v28 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert((uint64_t *)result, v8);
        v13 = *((_QWORD *)this + 107);
        v30 = v13 + 16 * v28;
        *(_QWORD *)v30 = v5;
        *(_DWORD *)(v30 + 8) = 0;
        goto LABEL_26;
      }
      j += 8;
    }
    while (1)
    {
      v28 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v11;
      if (*(_QWORD *)(v13 + 16 * v28) == v5)
        break;
      v27 &= v27 - 1;
      if (!v27)
        goto LABEL_20;
    }
LABEL_26:
    result = operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v13 + 16 * v28 + 8));
    v31 = result;
    if ((result & 0x80000000) == 0)
    {
      if ((_DWORD)result == (_DWORD)a2)
        return result;
      operations_research::sat::PresolveContext::AddRelation(this, a2, (const char *)result, 1, 0, (operations_research::sat::PresolveContext *)((char *)this + 1088));
      v32 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
      v33 = this;
      v34 = a2;
      v35 = (const char *)v31;
      v36 = 1;
      return operations_research::sat::PresolveContext::AddRelation(v33, v34, v35, v36, 0, v32);
    }
    v37 = (const char *)~(_DWORD)result;
    if ((_DWORD)v37 != (_DWORD)a2)
    {
      operations_research::sat::PresolveContext::AddRelation(this, a2, v37, -1, 0, (operations_research::sat::PresolveContext *)((char *)this + 1088));
      v32 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
      v33 = this;
      v34 = a2;
      v35 = v37;
      v36 = -1;
      return operations_research::sat::PresolveContext::AddRelation(v33, v34, v35, v36, 0, v32);
    }
    LODWORD(v41[0]) = v5;
    LODWORD(v40) = 0;
    if (!v5)
      return result;
    result = google::MakeCheckOpString<int,int>((int)v41, (int)&v40, "min == 0");
    v40 = (uint64_t *)result;
    if (!result)
      return result;
    google::LogMessageFatal::LogMessageFatal(v41, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 450, &v40);
    google::LogMessage::stream((google::LogMessage *)v41);
LABEL_37:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v41);
  }
LABEL_10:
  for (k = 0; ; v10 = k + v20)
  {
    v20 = v10 & v11;
    v21 = *(_QWORD *)(v9 + (v10 & v11));
    v22 = ((v21 ^ v12) - 0x101010101010101) & ~(v21 ^ v12) & 0x8080808080808080;
    if (v22)
      break;
LABEL_14:
    if ((v21 & (~v21 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert((uint64_t *)result, v8);
      v23 = result;
      v13 = *((_QWORD *)this + 107);
      v29 = v13 + 16 * result;
      *(_QWORD *)v29 = v5;
      *(_DWORD *)(v29 + 8) = 0;
      goto LABEL_23;
    }
    k += 8;
  }
  while (1)
  {
    v23 = (v20 + (__clz(__rbit64(v22)) >> 3)) & v11;
    if (*(_QWORD *)(v13 + 16 * v23) == v5)
      break;
    v22 &= v22 - 1;
    if (!v22)
      goto LABEL_14;
  }
LABEL_23:
  *(_DWORD *)(v13 + 16 * v23 + 8) = (_DWORD)a2;
  return result;
}

void sub_22DBC2564(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC256C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC2574(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::PropagateAffineRelation(operations_research::sat::PresolveContext *this, int a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  char v13;
  int8x16_t v14;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *__p;

  if (~a2 <= a2)
    v3 = a2;
  else
    v3 = ~a2;
  if (~(_DWORD)v3 <= (int)v3)
    v4 = v3;
  else
    v4 = ~(_DWORD)v3;
  v5 = (int)v4;
  v6 = *((_QWORD *)this + 137);
  if ((int)v4 >= (unint64_t)((*((_QWORD *)this + 138) - v6) >> 2)
    || *(_DWORD *)(v6 + 4 * (int)v4) == (_DWORD)v4)
  {
    v7 = 0;
    v8 = 1;
    v9 = *((_QWORD *)this + 153);
    if ((int)v4 >= (unint64_t)((*((_QWORD *)this + 154) - v9) >> 2))
      goto LABEL_15;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v4);
    v4 = *(unsigned int *)(*((_QWORD *)this + 137) + 4 * (int)v4);
    v8 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v5);
    v7 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v5);
    v5 = (int)v4;
    v9 = *((_QWORD *)this + 153);
    if ((int)v4 >= (unint64_t)((*((_QWORD *)this + 154) - v9) >> 2))
      goto LABEL_15;
  }
  if (*(_DWORD *)(v9 + 4 * v5) != (_DWORD)v4)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v4);
    v4 = *(unsigned int *)(*((_QWORD *)this + 153) + 4 * v5);
    if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v5) == -1)
      v8 = -v8;
  }
LABEL_15:
  if ((v3 & 0x80000000) == 0)
  {
    v10 = v7;
  }
  else
  {
    v8 = -v8;
    v10 = -v7;
  }
  if ((_DWORD)v4 != (_DWORD)v3)
  {
    operations_research::sat::PresolveContext::DomainOf(this, (const char *)v3, &v18);
    operations_research::Domain::Domain(&v16, -v10);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v18, (const operations_research::Domain *)&v16, &v20, v12);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v20, v8, &v22);
    v13 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v4, (const operations_research::Domain *)&v22, 0);
    if ((v22 & 1) != 0)
    {
      operator delete(__p);
      if ((v20 & 1) == 0)
      {
LABEL_22:
        if ((v16 & 1) == 0)
          goto LABEL_23;
        goto LABEL_32;
      }
    }
    else if ((v20 & 1) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v21);
    if ((v16 & 1) == 0)
    {
LABEL_23:
      if ((v18 & 1) == 0)
        goto LABEL_24;
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v17);
    if ((v18 & 1) == 0)
    {
LABEL_24:
      if ((v13 & 1) != 0)
        goto LABEL_25;
      return 0;
    }
LABEL_33:
    operator delete(v19);
    if ((v13 & 1) != 0)
    {
LABEL_25:
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)v4, &v18);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v18, 0, v8, &v20);
      operations_research::Domain::Domain(&v16, v10);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v20, (const operations_research::Domain *)&v16, &v22, v14);
      v11 = operations_research::sat::PresolveContext::IntersectDomainWith(this, (const char *)v3, (const operations_research::Domain *)&v22, 0);
      if ((v22 & 1) != 0)
      {
        operator delete(__p);
        if ((v16 & 1) == 0)
        {
LABEL_27:
          if ((v20 & 1) == 0)
            goto LABEL_28;
          goto LABEL_37;
        }
      }
      else if ((v16 & 1) == 0)
      {
        goto LABEL_27;
      }
      operator delete(v17);
      if ((v20 & 1) == 0)
      {
LABEL_28:
        if ((v18 & 1) == 0)
          return v11;
        goto LABEL_38;
      }
LABEL_37:
      operator delete(v21);
      if ((v18 & 1) == 0)
        return v11;
LABEL_38:
      operator delete(v19);
      return v11;
    }
    return 0;
  }
  return 1;
}

void sub_22DBC280C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *__p)
{
  if ((a18 & 1) != 0)
  {
    operator delete(__p);
    if ((a9 & 1) == 0)
    {
LABEL_3:
      if ((a15 & 1) == 0)
      {
LABEL_8:
        if ((a12 & 1) != 0)
          operator delete(a13);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a9 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a15 & 1) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;

  v1 = *(uint64_t **)(this + 680);
  for (i = *(uint64_t **)(this + 688); v1 != i; v1 += 6)
    this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>(v1, operations_research::sat::kAffineRelationConstraint);
  return this;
}

void operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(operations_research::sat::PresolveContext *this, const char *a2)
{
  operations_research::AffineRelation *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59[3];
  unint64_t v60[3];
  _DWORD v61[4];

  v4 = (operations_research::sat::PresolveContext *)((char *)this + 1088);
  if (~(_DWORD)a2 <= (int)a2)
    v5 = a2;
  else
    v5 = ~(_DWORD)a2;
  v6 = (int)v5;
  v7 = *((_QWORD *)this + 137);
  v8 = (int)v5;
  v9 = v5;
  if ((int)v5 < (unint64_t)((*((_QWORD *)this + 138) - v7) >> 2))
  {
    v8 = (int)v5;
    v9 = v5;
    if (*(_DWORD *)(v7 + 4 * (int)v5) != (_DWORD)v5)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v5);
      v9 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * (int)v5);
      v8 = v9;
    }
  }
  v10 = *((_QWORD *)this + 153);
  if (v8 < (*((_QWORD *)this + 154) - v10) >> 2 && *(_DWORD *)(v10 + 4 * v8) != v9)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v9);
    v9 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v8);
  }
  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 495);
    v58 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_35;
  }
  LODWORD(v60[0]) = (_DWORD)a2;
  LODWORD(v59[0]) = v9;
  if (v9 == (_DWORD)a2)
  {
    v59[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v60, (int)v59, "var != rep");
    if (v59[0])
    {
      google::LogMessageFatal::LogMessageFatal(v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 496, v59);
      google::LogMessage::stream((google::LogMessage *)v60);
      goto LABEL_35;
    }
  }
  v11 = *((_QWORD *)this + 85);
  v60[0] = *(_QWORD *)(v11 + 48 * a2 + 16);
  v61[0] = 1;
  if (v60[0] != 1)
  {
    v59[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v60, (int)v61, "var_to_constraints_[var].size() == 1");
    if (v59[0])
    {
      google::LogMessageFatal::LogMessageFatal(v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 497, v59);
      google::LogMessage::stream((google::LogMessage *)v60);
LABEL_35:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v60);
    }
    v11 = *((_QWORD *)this + 85);
  }
  v12 = 0;
  v13 = (_QWORD *)(v11 + 48 * a2);
  v14 = ((((unint64_t)&off_24F97F560 + 6) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 6));
  v15 = v14 >> 7;
  v16 = (v14 >> 7) ^ (*v13 >> 12);
  v17 = 0x101010101010101 * (v14 & 0x7F);
  v18 = v13[3];
  while (1)
  {
    v19 = v16 & v18;
    v20 = *(_QWORD *)(*v13 + v19);
    v21 = ((v20 ^ v17) - 0x101010101010101) & ~(v20 ^ v17) & 0x8080808080808080;
    if (v21)
      break;
LABEL_17:
    if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0)
      goto LABEL_33;
    v12 += 8;
    v16 = v12 + v19;
  }
  while (1)
  {
    v22 = (v19 + (__clz(__rbit64(v21)) >> 3)) & v18;
    if (*(_DWORD *)(v13[1] + 4 * v22) == -2)
      break;
    v21 &= v21 - 1;
    if (!v21)
      goto LABEL_17;
  }
  if (v22 == v18)
  {
LABEL_33:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 498);
    v39 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: var_to_constraints_[var].contains(kAffineRelationConstraint) ", 75);
    goto LABEL_35;
  }
  v23 = 0;
  v24 = (_QWORD *)(v11 + 48 * v9);
  v25 = v15 ^ (*v24 >> 12);
  v26 = v24[3];
  while (1)
  {
    v27 = v25 & v26;
    v28 = *(_QWORD *)(*v24 + v27);
    v29 = ((v28 ^ v17) - 0x101010101010101) & ~(v28 ^ v17) & 0x8080808080808080;
    if (v29)
      break;
LABEL_24:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      goto LABEL_34;
    v23 += 8;
    v25 = v23 + v27;
  }
  while (1)
  {
    v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v26;
    if (*(_DWORD *)(v24[1] + 4 * v30) == -2)
      break;
    v29 &= v29 - 1;
    if (!v29)
      goto LABEL_24;
  }
  if (v30 == v26)
  {
LABEL_34:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v60, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 499);
    v40 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: var_to_constraints_[rep].contains(kAffineRelationConstraint) ", 75);
    goto LABEL_35;
  }
  v31 = 0;
  v32 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v5)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (int)v5));
  v33 = *((_QWORD *)this + 171);
  v34 = (v33 >> 12) ^ (v32 >> 7);
  v35 = *((_QWORD *)this + 174);
  while (1)
  {
    v36 = v34 & v35;
    v37 = *(_QWORD *)(v33 + v36);
    v38 = ((v37 ^ (0x101010101010101 * (v32 & 0x7F))) - 0x101010101010101) & ~(v37 ^ (0x101010101010101
                                                                                        * (v32 & 0x7F))) & 0x8080808080808080;
    if (v38)
      break;
LABEL_31:
    if ((v37 & (~v37 << 6) & 0x8080808080808080) != 0)
    {
      *(_DWORD *)(*((_QWORD *)this + 172)
                + 4
                * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)this + 171, v32)) = v5;
      v11 = *((_QWORD *)this + 85);
      goto LABEL_37;
    }
    v31 += 8;
    v34 = v31 + v36;
  }
  while (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * ((v36 + (__clz(__rbit64(v38)) >> 3)) & v35)) != (_DWORD)v5)
  {
    v38 &= v38 - 1;
    if (!v38)
      goto LABEL_31;
  }
LABEL_37:
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(v11 + 48 * a2), operations_research::sat::kAffineRelationConstraint);
  operations_research::AffineRelation::IgnoreFromClassSize(v4, (int)a2);
  operations_research::AffineRelation::IgnoreFromClassSize((operations_research::sat::PresolveContext *)((char *)this + 1216), (int)a2);
  v41 = *((_QWORD *)this + 137);
  if (v9 >= (unint64_t)((*((_QWORD *)this + 138) - v41) >> 2))
    goto LABEL_41;
  v42 = *(_DWORD *)(v41 + 4 * v9);
  v43 = v9;
  if (v42 != v9)
  {
    operations_research::AffineRelation::CompressPath(v4, v9);
    v43 = *(int *)(*((_QWORD *)this + 137) + 4 * v9);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 146) + 4 * v43) == 1)
  {
LABEL_41:
    v44 = *((_QWORD *)this + 153);
    if (v9 >= (unint64_t)((*((_QWORD *)this + 154) - v44) >> 2))
      goto LABEL_45;
    v45 = *(_DWORD *)(v44 + 4 * v9);
    v46 = v9;
    if (v45 != v9)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v9);
      v46 = *(int *)(*((_QWORD *)this + 153) + 4 * v9);
    }
    if (*(_DWORD *)(*((_QWORD *)this + 162) + 4 * v46) == 1)
LABEL_45:
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * v9), operations_research::sat::kAffineRelationConstraint);
  }
  if (*operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__ >= 2
    && (operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(int)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
  {
    v47 = *((_QWORD *)this + 137);
    if ((int)v5 >= (unint64_t)((*((_QWORD *)this + 138) - v47) >> 2)
      || *(_DWORD *)(v47 + 4 * (int)v5) == (_DWORD)v5)
    {
      v48 = *((_QWORD *)this + 153);
      if ((int)v5 >= (unint64_t)((*((_QWORD *)this + 154) - v48) >> 2))
        goto LABEL_56;
    }
    else
    {
      operations_research::AffineRelation::CompressPath(v4, v5);
      v5 = *(unsigned int *)(*((_QWORD *)this + 137) + 4 * (int)v5);
      v6 = (int)v5;
      v48 = *((_QWORD *)this + 153);
      if ((int)v5 >= (unint64_t)((*((_QWORD *)this + 154) - v48) >> 2))
      {
LABEL_56:
        google::LogMessage::LogMessage((google::LogMessage *)v61, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 517);
        v49 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Removing affine relation for ", 29);
        v50 = (_QWORD *)std::ostream::operator<<();
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" : ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v60);
        v52 = operations_research::operator<<(v51, v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" =  ", 4);
        v53 = (_QWORD *)std::ostream::operator<<();
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, (const char *)v5, (unint64_t *)v59);
        v55 = operations_research::operator<<(v54, (unint64_t *)v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" + ", 3);
        v56 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(rep : ", 9);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        if (((uint64_t)v59[0] & 1) != 0)
          operator delete(v59[1]);
        if ((v60[0] & 1) != 0)
          operator delete((void *)v60[1]);
        google::LogMessage::~LogMessage((google::LogMessage *)v61);
        return;
      }
    }
    if (*(_DWORD *)(v48 + 4 * v6) != (_DWORD)v5)
    {
      operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v5);
      v5 = *(unsigned int *)(*((_QWORD *)this + 153) + 4 * v6);
    }
    goto LABEL_56;
  }
}

void sub_22DBC3060(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC3068(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC3070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *__p, uint64_t a14, char a15)
{
  if ((a12 & 1) == 0)
  {
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void sub_22DBC3104(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC310C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC3114(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::AffineRelation::IgnoreFromClassSize(operations_research::AffineRelation *this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12[2];
  uint64_t *v13;
  int v14;

  v3 = a2;
  v4 = *((_QWORD *)this + 10);
  if (a2 < (unint64_t)((*((_QWORD *)this + 11) - v4) >> 2))
  {
    v6 = *(_DWORD *)this;
    LODWORD(v12[0]) = *(_DWORD *)(v4 + 4 * a2);
    LODWORD(v13) = v6;
    if (LODWORD(v12[0]) == v6)
    {
      v13 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v12, (int)&v13, "size_[x] != kSizeForRemovedEntry");
      if (v13)
      {
        google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 95, &v13);
        google::LogMessage::stream((google::LogMessage *)v12);
        std::ostream::operator<<();
        goto LABEL_18;
      }
    }
    v7 = *((_QWORD *)this + 1);
    if (v3 >= (*((_QWORD *)this + 2) - v7) >> 2
      || *(_DWORD *)(v7 + 4 * v3) == a2
      || (operations_research::AffineRelation::CompressPath(this, a2),
          v8 = *(int *)(*((_QWORD *)this + 1) + 4 * v3),
          (_DWORD)v8 == a2))
    {
      v9 = *((_QWORD *)this + 10);
      LODWORD(v12[0]) = *(_DWORD *)(v9 + 4 * v3);
      v14 = 1;
      if (LODWORD(v12[0]) == 1)
      {
LABEL_7:
        *(_DWORD *)(v9 + 4 * v3) = *(_DWORD *)this;
        return;
      }
      v13 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v12, (int)&v14, "size_[r] == 1");
      if (!v13)
      {
        v9 = *((_QWORD *)this + 10);
        goto LABEL_7;
      }
      google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 101, &v13);
      google::LogMessage::stream((google::LogMessage *)v12);
LABEL_18:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
    }
    v9 = *((_QWORD *)this + 10);
    v10 = *(_DWORD *)(v9 + 4 * v8);
    LODWORD(v12[0]) = v10;
    LODWORD(v13) = 1;
    if (v10 < 2)
    {
      v11 = v8;
      v13 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v12, (int)&v13, "size_[r] > 1");
      if (v13)
      {
        google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/util/affine_relation.h", 98, &v13);
        google::LogMessage::stream((google::LogMessage *)v12);
        goto LABEL_18;
      }
      v9 = *((_QWORD *)this + 10);
      v8 = v11;
      v10 = *(_DWORD *)(v9 + 4 * v11);
    }
    *(_DWORD *)(v9 + 4 * v8) = v10 - 1;
    goto LABEL_7;
  }
}

void sub_22DBC32E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC32EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBC32F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

BOOL operations_research::sat::PresolveContext::StoreAffineRelation(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  void *v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BOOL4 v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  operations_research::AffineRelation *v87;
  operations_research::AffineRelation *v88;
  const char *v89;
  const char *v90;
  uint64_t *v91;
  void *v92;
  _DWORD v93[4];
  int v94;
  int v95;
  unint64_t v96[2];
  char v97;

  v96[0] = a4;
  v93[0] = 0;
  if (!a4)
  {
    v91 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v96, (int)v93, "coeff != 0");
    if (v91)
    {
      google::LogMessageFatal::LogMessageFatal(v96, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 526, &v91);
      google::LogMessage::stream((google::LogMessage *)v96);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v96);
    }
  }
  if (*((_BYTE *)this + 504))
    return 0;
  if (!operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a2)
    || !operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a3))
  {
    return 1;
  }
  if (~(_DWORD)a2 <= (int)a2)
    v12 = a2;
  else
    v12 = ~(_DWORD)a2;
  v90 = (const char *)v12;
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v12), v11))
  {
    operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
    v15 = operations_research::Domain::Min((operations_research::Domain *)v96, v14) - a5;
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    if (a4 >= 0)
      v16 = a4;
    else
      v16 = -a4;
    if (v15 % v16)
      goto LABEL_16;
    operations_research::Domain::Domain(v96, v15 / a4);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a3, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: fixed");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    goto LABEL_32;
  }
  if (~(_DWORD)a3 <= (int)a3)
    v17 = a3;
  else
    v17 = ~(_DWORD)a3;
  v89 = (const char *)v17;
  if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v17), v13))
  {
    operations_research::sat::PresolveContext::DomainOf(this, a3, v96);
    v19 = a5 + operations_research::Domain::Min((operations_research::Domain *)v96, v18) * a4;
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    operations_research::Domain::Domain(v96, v19);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a2, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    v97 = 13;
    strcpy((char *)v96, "affine: fixed");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
LABEL_32:
    if ((v97 & 0x80000000) == 0)
      return 1;
    v26 = (void *)v96[0];
LABEL_34:
    operator delete(v26);
    return 1;
  }
  v20 = (int)v90;
  v88 = (operations_research::sat::PresolveContext *)((char *)this + 1088);
  v21 = *((_QWORD *)this + 137);
  if ((int)v90 >= (unint64_t)((*((_QWORD *)this + 138) - v21) >> 2)
    || *(_DWORD *)(v21 + 4 * (int)v90) == (_DWORD)v90)
  {
    v22 = 0;
    v23 = 1;
    v24 = (int)v90;
    v25 = v90;
  }
  else
  {
    operations_research::AffineRelation::CompressPath(v88, (int)v90);
    v21 = *((_QWORD *)this + 137);
    v25 = (const char *)*(unsigned int *)(v21 + 4 * (int)v90);
    v23 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * (int)v90);
    v22 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * (int)v90);
    v24 = (int)v25;
  }
  v27 = v89;
  v28 = (int)v89;
  v87 = (operations_research::sat::PresolveContext *)((char *)this + 1216);
  v29 = *((_QWORD *)this + 153);
  if (v24 < (*((_QWORD *)this + 154) - v29) >> 2 && *(_DWORD *)(v29 + 4 * v24) != (_DWORD)v25)
  {
    operations_research::AffineRelation::CompressPath(v87, (int)v25);
    v28 = (int)v89;
    v27 = v89;
    v29 = *((_QWORD *)this + 153);
    v25 = (const char *)*(unsigned int *)(v29 + 4 * v24);
    if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v24) == -1)
      v23 = -v23;
    v21 = *((_QWORD *)this + 137);
  }
  if ((int)a2 >= 0)
    v30 = v23;
  else
    v30 = -v23;
  if ((int)a2 >= 0)
    v31 = v22;
  else
    v31 = -v22;
  if (v28 >= (*((_QWORD *)this + 138) - v21) >> 2 || *(_DWORD *)(v21 + 4 * v28) == (_DWORD)v27)
  {
    v32 = 0;
    v33 = 1;
    v34 = v28;
    v35 = (int)v27;
  }
  else
  {
    v36 = v28;
    v37 = v25;
    v38 = v31;
    v39 = v30;
    operations_research::AffineRelation::CompressPath(v88, (int)v89);
    v30 = v39;
    v31 = v38;
    v25 = v37;
    v28 = v36;
    v27 = v89;
    v35 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v36);
    v33 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v36);
    v32 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v36);
    v34 = v35;
    v29 = *((_QWORD *)this + 153);
  }
  if (v34 < (*((_QWORD *)this + 154) - v29) >> 2 && *(_DWORD *)(v29 + 4 * v34) != v35)
  {
    v85 = v28;
    v84 = v31;
    v40 = v30;
    operations_research::AffineRelation::CompressPath(v87, v35);
    v30 = v40;
    v31 = v84;
    v20 = (int)v90;
    v28 = v85;
    v27 = v89;
    v35 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v34);
    if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v34) == -1)
      v33 = -v33;
  }
  if ((int)a3 < 0)
  {
    v33 = -v33;
    v32 = -v32;
  }
  if ((_DWORD)v25 != v35)
  {
    v43 = v20;
    v86 = v28;
    v94 = (int)v27;
    v95 = (int)v90;
    if ((int)a2 >= 0)
      v44 = a5;
    else
      v44 = -a5;
    if ((int)a2 >= 0 != (int)a3 >= 0)
      v45 = -a4;
    else
      v45 = a4;
    v46 = operations_research::sat::PresolveContext::AddRelation(this, v90, v27, v45, v44, v88);
    v48 = v45 == 1 || v45 == -1;
    if (v44 || !v48)
    {
      if (!v46)
        goto LABEL_78;
    }
    else if (((v46 | operations_research::sat::PresolveContext::AddRelation(this, v90, v89, v45, 0, v87)) & 1) == 0)
    {
LABEL_78:
      std::string::basic_string[abi:ne180100]<0>(v96, "affine: incompatible relation");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
      if (v97 < 0)
        operator delete((void *)v96[0]);
      if (*operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__[0] < 1)
        return 0;
      if (operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__[0] != &google::kLogSiteUninitialized
        || (result = google::InitVLOG3__((google *)operations_research::sat::PresolveContext::StoreAffineRelation(int,int,long long,long long)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 626);
        v49 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Cannot add relation ", 20);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
        v51 = operations_research::operator<<(v50, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" = ", 3);
        v52 = (_QWORD *)std::ostream::operator<<();
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, a3, (unint64_t *)&v91);
        v54 = operations_research::operator<<(v53, (unint64_t *)&v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" + ", 3);
        v55 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" because of incompatibilities with existing relation: ", 54);
        if ((v91 & 1) != 0)
          operator delete(v92);
        if ((v96[0] & 1) != 0)
          operator delete((void *)v96[1]);
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        v56 = *((_QWORD *)this + 137);
        if (v43 < (*((_QWORD *)this + 138) - v56) >> 2 && *(_DWORD *)(v56 + 4 * v43) != (_DWORD)v90)
        {
          operations_research::AffineRelation::CompressPath(v88, (int)v90);
          v67 = (const char *)*(unsigned int *)(*((_QWORD *)this + 137) + 4 * v43);
          v43 = (int)v67;
          v90 = v67;
        }
        v68 = *((_QWORD *)this + 153);
        if (v43 < (*((_QWORD *)this + 154) - v68) >> 2 && *(_DWORD *)(v68 + 4 * v43) != (_DWORD)v90)
        {
          operations_research::AffineRelation::CompressPath(v87, (int)v90);
          v90 = (const char *)*(unsigned int *)(*((_QWORD *)this + 153) + 4 * v43);
        }
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 631);
        v69 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
        operations_research::sat::PresolveContext::DomainOf(this, a2, v96);
        v70 = operations_research::operator<<(v69, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" =  ", 4);
        v71 = (_QWORD *)std::ostream::operator<<();
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, v90, (unint64_t *)&v91);
        v73 = operations_research::operator<<(v72, (unint64_t *)&v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" + ", 3);
        std::ostream::operator<<();
        if ((v91 & 1) != 0)
          operator delete(v92);
        if ((v96[0] & 1) != 0)
          operator delete((void *)v96[1]);
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        v74 = *((_QWORD *)this + 137);
        v75 = v86;
        if (v86 >= (*((_QWORD *)this + 138) - v74) >> 2)
        {
          v76 = v89;
        }
        else
        {
          v76 = v89;
          if (*(_DWORD *)(v74 + 4 * v86) != (_DWORD)v89)
          {
            operations_research::AffineRelation::CompressPath(v88, (int)v89);
            v75 = *(int *)(*((_QWORD *)this + 137) + 4 * v86);
            v76 = (const char *)*(unsigned int *)(*((_QWORD *)this + 137) + 4 * v86);
          }
        }
        v77 = *((_QWORD *)this + 153);
        if (v75 < (*((_QWORD *)this + 154) - v77) >> 2 && *(_DWORD *)(v77 + 4 * v75) != (_DWORD)v76)
        {
          v78 = v75;
          operations_research::AffineRelation::CompressPath(v87, (int)v76);
          v76 = (const char *)*(unsigned int *)(*((_QWORD *)this + 153) + 4 * v78);
        }
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 631);
        v79 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
        operations_research::sat::PresolveContext::DomainOf(this, a3, v96);
        v80 = operations_research::operator<<(v79, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" =  ", 4);
        v81 = (_QWORD *)std::ostream::operator<<();
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" * ", 3);
        operations_research::sat::PresolveContext::DomainOf(this, v76, (unint64_t *)&v91);
        v83 = operations_research::operator<<(v82, (unint64_t *)&v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" + ", 3);
        std::ostream::operator<<();
        if ((v91 & 1) != 0)
          operator delete(v92);
        if ((v96[0] & 1) != 0)
          operator delete((void *)v96[1]);
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        return 0;
      }
      return result;
    }
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: new relation");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    if (v97 < 0)
      operator delete((void *)v96[0]);
    if ((operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a2) & 1) == 0
      || !operations_research::sat::PresolveContext::PropagateAffineRelation(this, (int)a3))
    {
      return 1;
    }
    operations_research::sat::PresolveContext::GetAffineRelation(this, (int)v90, (uint64_t)v96);
    v64 = v96[0];
    if ((_DWORD)v90 == LODWORD(v96[0]))
    {
      if ((_DWORD)v89 == LODWORD(v96[0]))
        goto LABEL_108;
    }
    else
    {
      std::deque<int>::push_back((_QWORD *)this + 112, &v95);
      if ((_DWORD)v89 == v64)
      {
LABEL_108:
        v65 = v95;
        if (v95 == v64)
          goto LABEL_109;
        goto LABEL_135;
      }
    }
    std::deque<int>::push_back((_QWORD *)this + 112, &v94);
    v65 = v95;
    if (v95 == v64)
    {
LABEL_109:
      v66 = v94;
      if (v94 == v64)
      {
LABEL_111:
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>((uint64_t *)(*((_QWORD *)this + 85) + 48 * v95), operations_research::sat::kAffineRelationConstraint, (uint64_t)v96);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::insert<int,0,0>((uint64_t *)(*((_QWORD *)this + 85) + 48 * v94), operations_research::sat::kAffineRelationConstraint, (uint64_t)v96);
        return 1;
      }
LABEL_110:
      operations_research::SparseBitset<long long>::Set((_QWORD *)this + 31, v66);
      goto LABEL_111;
    }
LABEL_135:
    operations_research::SparseBitset<long long>::Set((_QWORD *)this + 31, v65);
    v66 = v94;
    if (v94 == v64)
      goto LABEL_111;
    goto LABEL_110;
  }
  v41 = a5 + v32 * a4;
  v42 = v33 * a4 - v30;
  if (v33 * a4 != v30)
  {
    v57 = v41 - v31;
    v58 = v57 / v42;
    if (v57 % v42)
    {
LABEL_16:
      result = 1;
      *((_BYTE *)this + 504) = 1;
      return result;
    }
    v59 = v30;
    v60 = v31;
    std::string::basic_string[abi:ne180100]<0>(v96, "affine: unique solution");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)v96);
    if (v97 < 0)
      operator delete((void *)v96[0]);
    v61 = -v58;
    operations_research::Domain::Domain(v96, v61);
    v62 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v25, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    if ((v62 & 1) == 0)
      return 1;
    operations_research::Domain::Domain(v96, v60 + v59 * v61);
    v63 = operations_research::sat::PresolveContext::IntersectDomainWith(this, a2, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) != 0)
      operator delete((void *)v96[1]);
    if ((v63 & 1) == 0)
      return 1;
    operations_research::Domain::Domain(v96, v32 + v33 * v61);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, a3, (const operations_research::Domain *)v96, 0);
    if ((v96[0] & 1) == 0)
      return 1;
    v26 = (void *)v96[1];
    goto LABEL_34;
  }
  result = 1;
  if (v41 != v31)
    *((_BYTE *)this + 504) = 1;
  return result;
}

void sub_22DBC3E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC3E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,void *__p,int a24,__int16 a25,char a26,char a27)
{
  if ((a22 & 1) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(uint64_t this, const char *a2, const char *a3)
{
  operations_research::sat::PresolveContext *v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE v20[16];
  unint64_t v21;
  void *__p;

  if (*(_BYTE *)(this + 504))
    return this;
  v5 = (operations_research::sat::PresolveContext *)this;
  if (operations_research::sat::PresolveContext::VariableWasRemoved((operations_research::sat::PresolveContext *)this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 642);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: !VariableWasRemoved(ref_a) ", 41);
    goto LABEL_35;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(v5, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 643);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: !VariableWasRemoved(ref_b) ", 41);
    goto LABEL_35;
  }
  operations_research::sat::PresolveContext::DomainOf(v5, a2, &v21);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v21))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 644);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: !DomainOf(ref_a).IsEmpty() ", 41);
    goto LABEL_32;
  }
  if ((v21 & 1) != 0)
    operator delete(__p);
  operations_research::sat::PresolveContext::DomainOf(v5, a3, &v21);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v21))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 645);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: !DomainOf(ref_b).IsEmpty() ", 41);
LABEL_32:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v20);
  }
  if ((v21 & 1) != 0)
    operator delete(__p);
  if (~(_DWORD)a2 <= (int)a2)
    v7 = (int)a2;
  else
    v7 = ~(_DWORD)a2;
  if (operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)v5 + 64) + 24 * v7), v6) < 0
    || operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)v5 + 64) + 24 * v7), v8) >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 646);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref_a) ", 40);
    goto LABEL_35;
  }
  if (~(_DWORD)a3 <= (int)a3)
    v10 = (int)a3;
  else
    v10 = ~(_DWORD)a3;
  if (operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)v5 + 64) + 24 * v10), v9) < 0
    || (this = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)v5 + 64) + 24 * v10), v11),
        this >= 2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 647);
    v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: CanBeUsedAsLiteral(ref_b) ", 40);
    goto LABEL_35;
  }
  if ((_DWORD)a2 == (_DWORD)a3)
    return this;
  if (~(_DWORD)a3 == (_DWORD)a2)
  {
    *((_BYTE *)v5 + 504) = 1;
    return this;
  }
  if (((a3 ^ a2) & 0x80000000) != 0)
  {
    this = operations_research::sat::PresolveContext::StoreAffineRelation(v5, (const char *)v7, (const char *)v10, -1, 1);
    if ((this & 1) != 0)
      return this;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 661);
    v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: StoreAffineRelation(var_a, var_b, -1, 1) ", 55);
LABEL_35:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v21);
  }
  this = operations_research::sat::PresolveContext::StoreAffineRelation(v5, (const char *)v7, (const char *)v10, 1, 0);
  if ((this & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 658);
    v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: StoreAffineRelation(var_a, var_b, 1, 0) ", 54);
    goto LABEL_35;
  }
  return this;
}

void sub_22DBC42DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p)
{
  if ((a12 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DBC4324(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC432C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC4334(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC433C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::StoreAbsRelation(operations_research::sat::PresolveContext *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int VariableRepresentative;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v32;

  v5 = 0;
  v6 = (uint64_t *)((char *)this + 800);
  if (~a3 <= a3)
    v7 = a3;
  else
    v7 = ~a3;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v9 = *((_QWORD *)this + 100);
  v10 = (v8 >> 7) ^ (v9 >> 12);
  v11 = *((_QWORD *)this + 103);
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + v12);
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_9:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      v32 = (_DWORD *)(*((_QWORD *)this + 101)
                     + 8
                     * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::prepare_insert(v6, v8));
      *v32 = a2;
      v18 = v32 + 1;
      goto LABEL_20;
    }
    v5 += 8;
    v10 = v5 + v12;
  }
  v15 = *((_QWORD *)this + 101);
  while (1)
  {
    v16 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 8 * v16) == a2)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_9;
  }
  v17 = v15 + 8 * v16;
  v19 = *(_DWORD *)(v17 + 4);
  v18 = (int *)(v17 + 4);
  VariableRepresentative = operations_research::sat::PresolveContext::GetVariableRepresentative(this, v19);
  v21 = 0;
  v22 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + VariableRepresentative)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + VariableRepresentative));
  v23 = *((_QWORD *)this + 171);
  v24 = (v22 >> 7) ^ (v23 >> 12);
  v25 = *((_QWORD *)this + 174);
  v26 = 0x101010101010101 * (v22 & 0x7F);
  while (1)
  {
    v27 = v24 & v25;
    v28 = *(_QWORD *)(v23 + v27);
    v29 = ((v28 ^ v26) - 0x101010101010101) & ~(v28 ^ v26) & 0x8080808080808080;
    if (v29)
      break;
LABEL_15:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      return 0;
    v21 += 8;
    v24 = v21 + v27;
  }
  while (1)
  {
    v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v25;
    if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v30) == VariableRepresentative)
      break;
    v29 &= v29 - 1;
    if (!v29)
      goto LABEL_15;
  }
  if (v30 == v25)
    return 0;
LABEL_20:
  *v18 = v7;
  return 1;
}

uint64_t operations_research::sat::PresolveContext::GetAbsRelation(operations_research::sat::PresolveContext *this, int a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  _QWORD *v17;
  int VariableRepresentative;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;

  v5 = 0;
  v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v7 = *((_QWORD *)this + 100);
  v8 = (v6 >> 7) ^ (v7 >> 12);
  v9 = 0x101010101010101 * (v6 & 0x7F);
  v10 = *((_QWORD *)this + 103);
  while (1)
  {
    v11 = v8 & v10;
    v12 = *(_QWORD *)(v7 + v11);
    v13 = ((v12 ^ v9) - 0x101010101010101) & ~(v12 ^ v9) & 0x8080808080808080;
    if (v13)
      break;
LABEL_6:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
      return 0;
    v5 += 8;
    v8 = v5 + v11;
  }
  v14 = *((_QWORD *)this + 101);
  while (1)
  {
    v15 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v10;
    if (*(_DWORD *)(v14 + 8 * v15) == a2)
      break;
    v13 &= v13 - 1;
    if (!v13)
      goto LABEL_6;
  }
  if (v15 == v10)
    return 0;
  v17 = (_QWORD *)(v7 + v15);
  VariableRepresentative = operations_research::sat::PresolveContext::GetVariableRepresentative(this, *(_DWORD *)(v14 + 8 * v15 + 4));
  v19 = 0;
  v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + VariableRepresentative)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + VariableRepresentative));
  v21 = *((_QWORD *)this + 171);
  v22 = (v20 >> 7) ^ (v21 >> 12);
  v23 = *((_QWORD *)this + 174);
  v24 = 0x101010101010101 * (v20 & 0x7F);
  while (1)
  {
    v25 = v22 & v23;
    v26 = *(_QWORD *)(v21 + v25);
    v27 = ((v26 ^ v24) - 0x101010101010101) & ~(v26 ^ v24) & 0x8080808080808080;
    if (v27)
      break;
LABEL_14:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
      goto LABEL_17;
    v19 += 8;
    v22 = v19 + v25;
  }
  while (1)
  {
    v28 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v23;
    if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v28) == VariableRepresentative)
      break;
    v27 &= v27 - 1;
    if (!v27)
      goto LABEL_14;
  }
  if (v28 == v23)
  {
LABEL_17:
    *a3 = VariableRepresentative;
    return 1;
  }
  --*((_QWORD *)this + 102);
  v29 = *((_QWORD *)this + 100);
  v30 = (uint64_t)v17 - v29 - 8;
  v31 = *(_QWORD *)(v29 + (v30 & *((_QWORD *)this + 103)));
  v32 = *v17 & (~*v17 << 6) & 0x8080808080808080;
  v33 = v31 & (~v31 << 6) & 0x8080808080808080;
  if (v33)
    v34 = v32 == 0;
  else
    v34 = 1;
  if (v34)
  {
    v38 = 0;
    v35 = -2;
  }
  else
  {
    v36 = (__clz(v33) >> 3) + (__clz(__rbit64(v32)) >> 3);
    v37 = v36 >= 8;
    v38 = v36 < 8;
    if (v37)
      v35 = -2;
    else
      v35 = 0x80;
  }
  *(_BYTE *)v17 = v35;
  *(_BYTE *)((*((_QWORD *)this + 103) & v30) + (*((_QWORD *)this + 103) & 7) + *((_QWORD *)this + 100) + 1) = v35;
  *((_QWORD *)this + 105) += v38;
  v39 = *((_QWORD *)this + 104);
  if (!v39)
    return 0;
  v40 = (unint64_t *)(v39 + 8);
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 - 1, v40));
  v42 = (unint64_t *)(v39 + 16);
  result = 0;
  do
    v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  return result;
}

BOOL operations_research::sat::PresolveContext::RemapEncodingMaps(operations_research::sat::PresolveContext *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  int v19;
  const char *LiteralRepresentative;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  char *v56;
  unsigned int *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  char *v73;
  unsigned int *v74;
  _QWORD *v75;
  unint64_t v76;
  char *v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  google::LogMessage *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  google::LogMessage *v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int *v92;
  void **v93;
  uint64_t *v94;
  _BOOL4 v95;
  uint64_t *v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  int v103;
  char v104[8];
  _QWORD *v105;

  v2 = (void **)*((_QWORD *)this + 113);
  v3 = (void **)*((_QWORD *)this + 114);
  *((_QWORD *)this + 117) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*((_QWORD *)this + 113) + 8);
      *((_QWORD *)this + 113) = v2;
      v3 = (void **)*((_QWORD *)this + 114);
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      v6 = 1024;
      *((_QWORD *)this + 116) = 1024;
      if (v3 == v2)
        goto LABEL_99;
    }
    else
    {
      v6 = *((_QWORD *)this + 116);
      if (v3 == v2)
        goto LABEL_99;
    }
    goto LABEL_10;
  }
  v6 = 512;
  *((_QWORD *)this + 116) = 512;
  if (v3 != v2)
  {
LABEL_10:
    v7 = &v2[v6 >> 10];
    v8 = (unsigned int *)((char *)*v7 + 4 * (v6 & 0x3FF));
    if (v8 == (unsigned int *)(*(char **)((char *)v2 + (((*((_QWORD *)this + 117) + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((*((_QWORD *)this + 117) + v6) & 0x3FF)))
      goto LABEL_99;
    v96 = (uint64_t *)((char *)this + 944);
    v97 = (uint64_t *)((char *)this + 992);
    v94 = (uint64_t *)((char *)this + 1040);
    v91 = *(uint64_t *)((char *)v2 + (((*((_QWORD *)this + 117) + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((_QWORD *)this + 117) + v6) & 0x3FF);
    while (1)
    {
      v103 = 0;
      v9 = *v8;
      v103 = v9;
      if ((v9 & 0x80000000) != 0)
      {
        v89 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 782);
        v90 = (_QWORD *)google::LogMessage::stream(v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v104);
      }
      v10 = *((_QWORD *)this + 137);
      if (v9 >= (*((_QWORD *)this + 138) - v10) >> 2 || *(_DWORD *)(v10 + 4 * v9) == (_DWORD)v9)
      {
        v100 = 0;
        v11 = v9;
        v101 = 1;
        v12 = *((_QWORD *)this + 153);
        v92 = v8;
        v93 = v7;
        if (v9 >= (*((_QWORD *)this + 154) - v12) >> 2)
          goto LABEL_22;
      }
      else
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v9);
        v11 = *(unsigned int *)(*((_QWORD *)this + 137) + 4 * v9);
        v101 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v9);
        v100 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v9);
        v9 = (int)v11;
        v12 = *((_QWORD *)this + 153);
        v92 = v8;
        v93 = v7;
        if ((int)v11 >= (unint64_t)((*((_QWORD *)this + 154) - v12) >> 2))
          goto LABEL_22;
      }
      if (*(_DWORD *)(v12 + 4 * v9) != (_DWORD)v11)
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v11);
        v11 = *(unsigned int *)(*((_QWORD *)this + 153) + 4 * v9);
        v13 = v101;
        if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v9) == -1)
          v13 = -v101;
        v101 = v13;
      }
LABEL_22:
      v102 = (const char *)v11;
      v95 = v11 == v103;
      if ((_DWORD)v11 == v103)
        return v95;
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>(v96, &v103, (uint64_t)v104);
      v14 = (char *)v105[1];
      v15 = v105[2];
      v16 = v14;
      if (*v14 <= -2)
      {
        do
        {
          v17 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v16 = (_QWORD *)((char *)v16 + v17);
          v15 += 16 * v17;
        }
        while (*(char *)v16 < -1);
      }
      v18 = &v14[v105[4]];
      if (v16 != (_QWORD *)v18)
      {
        v19 = 0;
        while (2)
        {
          LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v15 + 8));
          v21 = 0;
          if (~(_DWORD)LiteralRepresentative <= (int)LiteralRepresentative)
            v22 = (int)LiteralRepresentative;
          else
            v22 = ~(_DWORD)LiteralRepresentative;
          v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v22));
          v24 = *((_QWORD *)this + 171);
          v25 = (v23 >> 7) ^ (v24 >> 12);
          v26 = *((_QWORD *)this + 174);
          v27 = 0x101010101010101 * (v23 & 0x7F);
          while (1)
          {
            v28 = v25 & v26;
            v29 = *(_QWORD *)(v24 + v28);
            v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
            if (v30)
              break;
LABEL_35:
            if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
              goto LABEL_38;
            v21 += 8;
            v25 = v21 + v28;
          }
          while (1)
          {
            v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v26;
            if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v31) == v22)
              break;
            v30 &= v30 - 1;
            if (!v30)
              goto LABEL_35;
          }
          if (v31 == v26)
          {
LABEL_38:
            v32 = *(_QWORD *)v15 - v100;
            if (v32 % v101)
              goto LABEL_39;
            operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, LiteralRepresentative, v102, v32 / v101, 0);
            if (*((_BYTE *)this + 504))
              return v95;
            ++v19;
            v34 = *((char *)v16 + 1);
            v16 = (_QWORD *)((char *)v16 + 1);
            v15 += 16;
            if (v34 <= -2)
            {
              do
              {
LABEL_43:
                v35 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v16 = (_QWORD *)((char *)v16 + v35);
                v15 += 16 * v35;
              }
              while (*(char *)v16 < -1);
            }
          }
          else
          {
LABEL_39:
            v33 = *((char *)v16 + 1);
            v16 = (_QWORD *)((char *)v16 + 1);
            v15 += 16;
            if (v33 <= -2)
              goto LABEL_43;
          }
          if (v16 == (_QWORD *)v18)
            goto LABEL_46;
          continue;
        }
      }
      v19 = 0;
LABEL_46:
      v36 = 0;
      v37 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v103)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v103));
      v38 = *((_QWORD *)this + 118);
      v39 = (v37 >> 7) ^ (v38 >> 12);
      v40 = *((_QWORD *)this + 121);
      v41 = 0x101010101010101 * (v37 & 0x7F);
      while (1)
      {
        v42 = v39 & v40;
        v43 = *(_QWORD *)(v38 + v42);
        v44 = ((v43 ^ v41) - 0x101010101010101) & ~(v43 ^ v41) & 0x8080808080808080;
        if (v44)
          break;
LABEL_50:
        if ((v43 & (~v43 << 6) & 0x8080808080808080) != 0)
          goto LABEL_54;
        v36 += 8;
        v39 = v36 + v42;
      }
      while (1)
      {
        v45 = (v42 + (__clz(__rbit64(v44)) >> 3)) & v40;
        v46 = (_DWORD *)(*((_QWORD *)this + 119) + 56 * v45);
        if (*v46 == v103)
          break;
        v44 &= v44 - 1;
        if (!v44)
          goto LABEL_50;
      }
      if (v45 != v40)
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::erase(v96, (_QWORD *)(v38 + v45), (uint64_t)v46);
LABEL_54:
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v97, &v103, (uint64_t)v104);
      v47 = (char *)v105[1];
      v48 = (_QWORD *)v105[2];
      v49 = v47;
      if (*v47 <= -2)
      {
        do
        {
          v50 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v49 = (_QWORD *)((char *)v49 + v50);
          v48 += 7 * v50;
        }
        while (*(char *)v49 < -1);
      }
      v51 = &v47[v105[4]];
      v98 = v51;
      while (v49 != (_QWORD *)v51)
      {
        v52 = *v48 - v100;
        v53 = v52 / v101;
        if (!(v52 % v101))
        {
          v56 = (char *)v48[1];
          v57 = (unsigned int *)v48[2];
          v58 = v56;
          if (*v56 <= -2)
          {
            do
            {
              v59 = (__clz(__rbit64(((*v58 >> 7) & ~*v58 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v58 = (_QWORD *)((char *)v58 + v59);
              v57 += v59;
            }
            while (*(char *)v58 < -1);
          }
          v60 = &v56[v48[4]];
          while (v58 != (_QWORD *)v60)
          {
            v61 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v57);
            operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, v61, (int)v102, v53, 1);
            if (*((_BYTE *)this + 504))
              return v95;
            v62 = *((char *)v58 + 1);
            v58 = (_QWORD *)((char *)v58 + 1);
            ++v57;
            if (v62 <= -2)
            {
              do
              {
                v63 = (__clz(__rbit64(((*v58 >> 7) & ~*v58 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v58 = (_QWORD *)((char *)v58 + v63);
                v57 += v63;
              }
              while (*(char *)v58 < -1);
            }
            ++v19;
          }
        }
        v54 = *((char *)v49 + 1);
        v49 = (_QWORD *)((char *)v49 + 1);
        v48 += 7;
        if (v54 <= -2)
        {
          do
          {
            v55 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v49 = (_QWORD *)((char *)v49 + v55);
            v48 += 7 * v55;
          }
          while (*(char *)v49 < -1);
        }
        v51 = v98;
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(v97, &v103);
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v94, &v103, (uint64_t)v104);
      v64 = (char *)v105[1];
      v65 = (_QWORD *)v105[2];
      v66 = v64;
      if (*v64 <= -2)
      {
        do
        {
          v67 = (__clz(__rbit64(((*v66 >> 7) & ~*v66 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v66 = (_QWORD *)((char *)v66 + v67);
          v65 += 7 * v67;
        }
        while (*(char *)v66 < -1);
      }
      v68 = &v64[v105[4]];
      v99 = v68;
      while (v66 != (_QWORD *)v68)
      {
        v69 = *v65 - v100;
        v70 = v69 / v101;
        if (!(v69 % v101))
        {
          v73 = (char *)v65[1];
          v74 = (unsigned int *)v65[2];
          v75 = v73;
          if (*v73 <= -2)
          {
            do
            {
              v76 = (__clz(__rbit64(((*v75 >> 7) & ~*v75 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v75 = (_QWORD *)((char *)v75 + v76);
              v74 += v76;
            }
            while (*(char *)v75 < -1);
          }
          v77 = &v73[v65[4]];
          while (v75 != (_QWORD *)v77)
          {
            v78 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v74);
            operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, v78, (int)v102, v70, 0);
            if (*((_BYTE *)this + 504))
              return v95;
            v79 = *((char *)v75 + 1);
            v75 = (_QWORD *)((char *)v75 + 1);
            ++v74;
            if (v79 <= -2)
            {
              do
              {
                v80 = (__clz(__rbit64(((*v75 >> 7) & ~*v75 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v75 = (_QWORD *)((char *)v75 + v80);
                v74 += v80;
              }
              while (*(char *)v75 < -1);
            }
            ++v19;
          }
        }
        v71 = *((char *)v66 + 1);
        v66 = (_QWORD *)((char *)v66 + 1);
        v65 += 7;
        if (v71 <= -2)
        {
          do
          {
            v72 = (__clz(__rbit64(((*v66 >> 7) & ~*v66 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v66 = (_QWORD *)((char *)v66 + v72);
            v65 += 7 * v72;
          }
          while (*(char *)v66 < -1);
        }
        v68 = v99;
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(v94, &v103);
      if (v19 >= 1
        && *operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__[0] >= 1
        && (operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::RemapEncodingMaps(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)1)))
      {
        v81 = google::LogMessage::LogMessage((google::LogMessage *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 840);
        v82 = (_QWORD *)google::LogMessage::stream(v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Remapped ", 9);
        v83 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" encodings due to ", 18);
        v84 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" -> ", 4);
        v85 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)".", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)v104);
      }
      v7 = v93;
      v8 = v92 + 1;
      if ((char *)(v92 + 1) - (_BYTE *)*v93 == 4096)
      {
        v7 = v93 + 1;
        v8 = (unsigned int *)v93[1];
      }
      if (v8 == (unsigned int *)v91)
      {
        v2 = (void **)*((_QWORD *)this + 113);
        v3 = (void **)*((_QWORD *)this + 114);
        break;
      }
    }
  }
LABEL_99:
  *((_QWORD *)this + 117) = 0;
  v86 = (char *)v3 - (char *)v2;
  if (v86 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*((_QWORD *)this + 113) + 8);
      *((_QWORD *)this + 113) = v2;
      v86 = *((_QWORD *)this + 114) - (_QWORD)v2;
    }
    while (v86 > 0x10);
  }
  if (v86 >> 3 == 1)
  {
    v87 = 512;
    goto LABEL_106;
  }
  if (v86 >> 3 == 2)
  {
    v87 = 1024;
LABEL_106:
    *((_QWORD *)this + 116) = v87;
  }
  return *((_BYTE *)this + 504) == 0;
}

void sub_22DBC5208(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_22DBC521C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

void operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(operations_research::sat::PresolveContext *this, const char *a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int LiteralRepresentative;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  BOOL v40;
  _BOOL8 v41;
  char v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v73[3];
  int v74;
  void *__p;
  void *v76[2];

  v74 = (int)a3;
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 937);
    v64 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: !VariableWasRemoved(literal) ", 43);
    goto LABEL_67;
  }
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 938);
    v65 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: !VariableWasRemoved(var) ", 39);
    goto LABEL_67;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v74, (uint64_t)&__p);
  v9 = 0;
  v10 = v76[0];
  v12 = (uint64_t *)((char *)v76[0] + 8);
  v11 = *((_QWORD *)v76[0] + 1);
  v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a4)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a4));
  v14 = (v13 >> 7) ^ (v11 >> 12);
  v15 = 0x101010101010101 * (v13 & 0x7F);
  v16 = *((_QWORD *)v76[0] + 4);
  while (1)
  {
    v17 = v14 & v16;
    v18 = *(_QWORD *)(v11 + v17);
    v19 = ((v18 ^ v15) - 0x101010101010101) & ~(v18 ^ v15) & 0x8080808080808080;
    if (v19)
      break;
LABEL_8:
    if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
      goto LABEL_34;
    v9 += 8;
    v14 = v9 + v17;
  }
  v20 = *((_QWORD *)v76[0] + 2);
  while (1)
  {
    v21 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v16;
    if (*(_QWORD *)(v20 + 16 * v21) == a4)
      break;
    v19 &= v19 - 1;
    if (!v19)
      goto LABEL_8;
  }
  if (v21 != v16)
  {
    v71 = (_QWORD *)(v11 + v21);
    LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v20 + 16 * v21 + 8));
    v23 = 0;
    if (~LiteralRepresentative <= LiteralRepresentative)
      v24 = LiteralRepresentative;
    else
      v24 = ~LiteralRepresentative;
    v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v24));
    v26 = *((_QWORD *)this + 171);
    v27 = (v25 >> 7) ^ (v26 >> 12);
    v28 = 0x101010101010101 * (v25 & 0x7F);
    v29 = *((_QWORD *)this + 174);
    while (1)
    {
      v30 = v27 & v29;
      v31 = *(_QWORD *)(v26 + v30);
      v32 = ((v31 ^ v28) - 0x101010101010101) & ~(v31 ^ v28) & 0x8080808080808080;
      if (v32)
        break;
LABEL_18:
      if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
        goto LABEL_34;
      v23 += 8;
      v27 = v23 + v30;
    }
    while (1)
    {
      v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v29;
      if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v33) == v24)
        break;
      v32 &= v32 - 1;
      if (!v32)
        goto LABEL_18;
    }
    if (v33 != v29)
    {
      v34 = v10[4];
      --v10[3];
      v35 = v10[1];
      v36 = (uint64_t)v71 - v35 - 8;
      v37 = *v71 & (~*v71 << 6) & 0x8080808080808080;
      v38 = *(_QWORD *)(v35 + (v36 & v34)) & (~*(_QWORD *)(v35 + (v36 & v34)) << 6) & 0x8080808080808080;
      v39 = (__clz(v38) >> 3) + (__clz(__rbit64(v37)) >> 3);
      v40 = v39 >= 8;
      v41 = v39 < 8;
      v42 = v40 ? -2 : 0x80;
      v43 = !v38 || v37 == 0;
      v44 = v43 ? -2 : v42;
      *(_BYTE *)v71 = v44;
      v45 = !v43 && v41;
      *(_BYTE *)((v10[4] & v36) + (v10[4] & 7) + v10[1] + 1) = v44;
      v46 = v10[5];
      v10[6] += v45;
      if (v46)
      {
        v67 = (unint64_t *)(v46 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 - 1, v67));
        v69 = (unint64_t *)(v46 + 16);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
    }
  }
LABEL_34:
  v47 = 0;
  v48 = v10[1];
  v49 = (v13 >> 7) ^ (v48 >> 12);
  v50 = v10[4];
  while (1)
  {
    v51 = v49 & v50;
    v52 = *(_QWORD *)(v48 + v51);
    v53 = ((v52 ^ v15) - 0x101010101010101) & ~(v52 ^ v15) & 0x8080808080808080;
    if (v53)
      break;
LABEL_39:
    if ((v52 & (~v52 << 6) & 0x8080808080808080) != 0)
    {
      v57 = v10[2]
          + 16
          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v12, v13);
      *(_QWORD *)v57 = a4;
      *(_DWORD *)(v57 + 8) = (_DWORD)a2;
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)v74, (unint64_t *)&__p);
      v58 = operations_research::Domain::Size((operations_research::Domain *)&__p);
      if ((__p & 1) != 0)
        operator delete(v76[0]);
      if (v58 == 2)
      {
        operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(this, (const char *)v74);
      }
      else
      {
        if (*operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__[0] >= 2
          && (operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(int,int,long long,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 970);
          v59 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Insert lit(", 11);
          v60 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)") <=> var(", 10);
          v61 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") == ", 5);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        if (a5)
        {
          __p = operator new(0x28uLL);
          *(_OWORD *)v76 = xmmword_22DCEB050;
          strcpy((char *)__p, "variables: add encoding constraint");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
          if (SHIBYTE(v76[1]) < 0)
            operator delete(__p);
          v62 = v74;
          operations_research::Domain::Domain(&__p, a4);
          operations_research::sat::PresolveContext::AddImplyInDomain(this, a2, v62, (const operations_research::Domain *)&__p);
          if ((__p & 1) != 0)
            operator delete(v76[0]);
          v63 = v74;
          operations_research::Domain::Domain(v73, a4);
          operations_research::Domain::Complement((operations_research::Domain *)v73, (unint64_t *)&__p);
          operations_research::sat::PresolveContext::AddImplyInDomain(this, ~(_DWORD)a2, v63, (const operations_research::Domain *)&__p);
          if ((__p & 1) != 0)
            operator delete(v76[0]);
          if (((uint64_t)v73[0] & 1) != 0)
            operator delete(v73[1]);
        }
      }
      return;
    }
    v47 += 8;
    v49 = v47 + v51;
  }
  v54 = v10[2];
  while (1)
  {
    v55 = (v51 + (__clz(__rbit64(v53)) >> 3)) & v50;
    if (*(_QWORD *)(v54 + 16 * v55) == a4)
      break;
    v53 &= v53 - 1;
    if (!v53)
      goto LABEL_39;
  }
  __p = operator new(0x38uLL);
  *(_OWORD *)v76 = xmmword_22DCF6170;
  strcpy((char *)__p, "variables: merge equivalent var value encoding literals");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
  if (SHIBYTE(v76[1]) < 0)
    operator delete(__p);
  v56 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v54 + 16 * v55 + 8));
  if (operations_research::sat::PresolveContext::VariableWasRemoved(this, v56))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 960);
    v66 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: !VariableWasRemoved(previous_literal) ", 52);
LABEL_67:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  if ((_DWORD)v56 != (_DWORD)a2)
    operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)this, a2, v56);
}

void sub_22DBC58AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21)
{
  if ((a16 & 1) != 0)
    operator delete(__p);
  if ((a12 & 1) != 0)
  {
    operator delete(a13);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DBC5934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC5944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(operations_research::sat::PresolveContext *this, unsigned int a2, int a3, uint64_t a4, int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t *v23;
  char *v24;
  unsigned int *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  void *__p;
  __int128 v37;

  v35 = a3;
  v34 = a4;
  if (!*((_BYTE *)this + 504))
  {
    if (a3 < 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 985);
      v33 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
    }
    if (a5)
      v9 = (uint64_t *)((char *)this + 992);
    else
      v9 = (uint64_t *)((char *)this + 1040);
    absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v9, &v35, (uint64_t)&__p);
    absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>((uint64_t *)(v37 + 8), &v34, (uint64_t)&__p);
    v10 = v37;
    v11 = 0;
    v12 = *(_QWORD *)(v37 + 8);
    v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a2)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (int)a2));
    v14 = (v13 >> 7) ^ (v12 >> 12);
    v15 = *(_QWORD *)(v37 + 32);
    while (1)
    {
      v16 = v14 & v15;
      v17 = *(_QWORD *)(v12 + v16);
      v18 = ((v17 ^ (0x101010101010101 * (v13 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                          * (v13 & 0x7F))) & 0x8080808080808080;
      if (v18)
        break;
LABEL_11:
      if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(v10 + 16)
                  + 4
                  * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(v37 + 8), v13)) = a2;
        if (*operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__ >= 2
          && (operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__ != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)&operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(int,int,long long,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 993);
          v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Collect lit(", 12);
          v20 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") implies var(", 14);
          v21 = (_QWORD *)std::ostream::operator<<();
          if (a5)
            v22 = ") == ";
          else
            v22 = ") != ";
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, 5);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        __p = operator new(0x30uLL);
        v37 = xmmword_22DCED9D0;
        strcpy((char *)__p, "variables: detect half reified value encoding");
        operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
        if (SHIBYTE(v37) < 0)
        {
          operator delete(__p);
          if (!a5)
            goto LABEL_24;
LABEL_22:
          v23 = (uint64_t *)((char *)this + 1040);
        }
        else
        {
          if (a5)
            goto LABEL_22;
LABEL_24:
          v23 = (uint64_t *)((char *)this + 992);
        }
        absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>(v23, &v35, (uint64_t)&__p);
        absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>((uint64_t *)(v37 + 8), &v34, (uint64_t)&__p);
        v24 = *(char **)(v37 + 8);
        v25 = *(unsigned int **)(v37 + 16);
        v26 = v24;
        if (*v24 <= -2)
        {
          do
          {
            v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v26 = (_QWORD *)((char *)v26 + v27);
            v25 += v27;
          }
          while (*(char *)v26 < -1);
        }
        v28 = &v24[*(_QWORD *)(v37 + 32)];
        if (v26 != (_QWORD *)v28)
        {
          v29 = ~a2;
          while (operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*v25) != v29)
          {
            v30 = *((char *)v26 + 1);
            v26 = (_QWORD *)((char *)v26 + 1);
            ++v25;
            if (v30 <= -2)
            {
              do
              {
                v31 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v26 = (_QWORD *)((char *)v26 + v31);
                v25 += v31;
              }
              while (*(char *)v26 < -1);
            }
            if (v26 == (_QWORD *)v28)
              return 1;
          }
          __p = operator new(0x30uLL);
          v37 = xmmword_22DCE5C60;
          strcpy((char *)__p, "variables: detect fully reified value encoding");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&__p);
          if (SHIBYTE(v37) < 0)
            operator delete(__p);
          if (a5)
            v32 = a2;
          else
            v32 = v29;
          operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, (const char *)v32, (const char *)v35, v34, 0);
        }
        return 1;
      }
      v11 += 8;
      v14 = v11 + v16;
    }
    while (*(_DWORD *)(*(_QWORD *)(v37 + 16) + 4 * ((v16 + (__clz(__rbit64(v18)) >> 3)) & v15)) != a2)
    {
      v18 &= v18 - 1;
      if (!v18)
        goto LABEL_11;
    }
  }
  return 0;
}

void sub_22DBC5D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DBC5DA0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v3 = 0;
  v4 = *a2;
  v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v4));
  v6 = *a1;
  v7 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v6 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      return 0;
    v3 += 8;
    v7 = v3 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    v14 = (_DWORD *)(a1[1] + 56 * v13);
    if (*v14 == (_DWORD)v4)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
    return 0;
  v16 = (_QWORD *)(v6 + v13);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)(v14 + 2));
  v17 = a1[3];
  --a1[2];
  v18 = (char *)v16 - *a1;
  v19 = *(_QWORD *)(*a1 + ((unint64_t)(v18 - 8) & v17));
  v20 = *v16 & (~*v16 << 6) & 0x8080808080808080;
  v21 = v19 & (~v19 << 6) & 0x8080808080808080;
  if (v21)
    v22 = v20 == 0;
  else
    v22 = 1;
  if (v22)
  {
    v26 = 0;
    v23 = -2;
  }
  else
  {
    v24 = (__clz(v21) >> 3) + (__clz(__rbit64(v20)) >> 3);
    v25 = v24 >= 8;
    v26 = v24 < 8;
    if (v25)
      v23 = -2;
    else
      v23 = 0x80;
  }
  *(_BYTE *)v16 = v23;
  *(_BYTE *)((a1[3] & (unint64_t)(v18 - 8)) + (a1[3] & 7) + *a1 + 1) = v23;
  v27 = a1[4];
  a1[5] += v26;
  if (!v27)
    return 1;
  v28 = (unint64_t *)(v27 + 8);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 - 1, v28));
  v30 = (unint64_t *)(v27 + 16);
  result = 1;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  return result;
}

void operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(operations_research::sat::PresolveContext *this, const char *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int LiteralRepresentative;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  BOOL v38;
  _BOOL8 v39;
  char v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  signed int v59;
  uint64_t v60;
  signed int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  const char *v73;
  signed int v74;
  uint64_t v75;
  signed int v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _BOOL8 v90;
  char v91;
  BOOL v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  const char *v106;
  const char *v107;
  const char *v108;
  const char *v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  const char *v130;
  const char *v131;
  const char *v132;
  int v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  const char *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t *v163;
  int v164;
  void *v165;
  void *__p[2];

  v164 = (int)a2;
  if ((a2 & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 849);
    v143 = google::LogMessage::stream((google::LogMessage *)&v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v143, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_176;
  }
  operations_research::sat::PresolveContext::DomainOf(this, a2, (unint64_t *)&v165);
  v162 = operations_research::Domain::Size((operations_research::Domain *)&v165);
  v161 = 2;
  if (v162 == 2)
  {
    v4 = 0;
    v163 = 0;
    if ((v165 & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = google::MakeCheckOpString<long long,int>((int)&v162, (int)&v161, "DomainOf(var).Size() == 2");
  v163 = (uint64_t *)v4;
  if ((v165 & 1) != 0)
LABEL_4:
    operator delete(__p[0]);
LABEL_5:
  if (v4)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 850, &v163);
    google::LogMessage::stream((google::LogMessage *)&v165);
    goto LABEL_176;
  }
  if (v164 < 0)
  {
    v6 = -operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v164), v3);
    v7 = v164;
    if ((v164 & 0x80000000) == 0)
    {
LABEL_8:
      v160 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v7), v5);
      if (*((_BYTE *)this + 504))
        return;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v164), v3);
    v7 = v164;
    if ((v164 & 0x80000000) == 0)
      goto LABEL_8;
  }
  v160 = -operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~v7), v5);
  if (*((_BYTE *)this + 504))
    return;
LABEL_12:
  absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v164, (uint64_t)&v165);
  v8 = 0;
  v9 = __p[0];
  v11 = (uint64_t *)((char *)__p[0] + 8);
  v10 = *((_QWORD *)__p[0] + 1);
  v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v6)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v6));
  v158 = v12 >> 7;
  v159 = v6;
  v13 = (v12 >> 7) ^ (v10 >> 12);
  v155 = v12;
  v14 = 0x101010101010101 * (v12 & 0x7F);
  v15 = *((_QWORD *)__p[0] + 4);
  while (1)
  {
    v16 = v13 & v15;
    v17 = *(_QWORD *)(v10 + v16);
    v18 = ((v17 ^ v14) - 0x101010101010101) & ~(v17 ^ v14) & 0x8080808080808080;
    if (v18)
      break;
LABEL_17:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
    {
      v21 = (_QWORD *)(v10 + v15);
      goto LABEL_46;
    }
    v8 += 8;
    v13 = v8 + v16;
  }
  v19 = *((_QWORD *)__p[0] + 2);
  while (1)
  {
    v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v15;
    if (*(_QWORD *)(v19 + 16 * v20) == v6)
      break;
    v18 &= v18 - 1;
    if (!v18)
      goto LABEL_17;
  }
  v21 = (_QWORD *)(v10 + v20);
  v156 = v19 + 16 * v20;
  if (v20 != v15)
  {
    LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v19 + 16 * v20 + 8));
    v23 = 0;
    if (~LiteralRepresentative <= LiteralRepresentative)
      v24 = LiteralRepresentative;
    else
      v24 = ~LiteralRepresentative;
    v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v24));
    v26 = *((_QWORD *)this + 171);
    v27 = (v25 >> 7) ^ (v26 >> 12);
    v28 = 0x101010101010101 * (v25 & 0x7F);
    v29 = *((_QWORD *)this + 174);
    while (1)
    {
      v30 = v27 & v29;
      v31 = *(_QWORD *)(v26 + v30);
      v32 = ((v31 ^ v28) - 0x101010101010101) & ~(v31 ^ v28) & 0x8080808080808080;
      if (v32)
        break;
LABEL_27:
      if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
      {
        v10 = v9[1];
        v15 = v9[4];
        goto LABEL_46;
      }
      v23 += 8;
      v27 = v23 + v30;
    }
    while (1)
    {
      v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v29;
      if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v33) == v24)
        break;
      v32 &= v32 - 1;
      if (!v32)
        goto LABEL_27;
    }
    v10 = v9[1];
    v15 = v9[4];
    if (v33 != v29)
    {
      --v9[3];
      v34 = (uint64_t)v21 - v10 - 8;
      v35 = *v21 & (~*v21 << 6) & 0x8080808080808080;
      v36 = *(_QWORD *)(v10 + (v34 & v15)) & (~*(_QWORD *)(v10 + (v34 & v15)) << 6) & 0x8080808080808080;
      v37 = (__clz(v36) >> 3) + (__clz(__rbit64(v35)) >> 3);
      v38 = v37 >= 8;
      v39 = v37 < 8;
      if (v38)
        v40 = -2;
      else
        v40 = 0x80;
      if (v36)
        v41 = v35 == 0;
      else
        v41 = 1;
      if (v41)
        v42 = -2;
      else
        v42 = v40;
      *(_BYTE *)v21 = v42;
      v43 = !v41 && v39;
      *(_BYTE *)((v9[4] & v34) + (v9[4] & 7) + v9[1] + 1) = v42;
      v44 = v9[5];
      v9[6] += v43;
      if (v44)
      {
        v146 = (unint64_t *)(v44 + 8);
        do
          v147 = __ldxr(v146);
        while (__stxr(v147 - 1, v146));
        v148 = (unint64_t *)(v44 + 16);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      v10 = v9[1];
      v15 = v9[4];
      v21 = (_QWORD *)(v10 + v15);
    }
  }
LABEL_46:
  v45 = 0;
  v46 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v160)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v160));
  v47 = v46 >> 7;
  v48 = (v46 >> 7) ^ (v10 >> 12);
  v49 = 0x101010101010101 * (v46 & 0x7F);
  while (1)
  {
    v50 = v48 & v15;
    v51 = *(_QWORD *)(v10 + v50);
    v52 = ((v51 ^ v49) - 0x101010101010101) & ~(v51 ^ v49) & 0x8080808080808080;
    if (v52)
    {
      v53 = v9[2];
      while (1)
      {
        v54 = (v50 + (__clz(__rbit64(v52)) >> 3)) & v15;
        if (*(_QWORD *)(v53 + 16 * v54) == v160)
          break;
        v52 &= v52 - 1;
        if (!v52)
          goto LABEL_51;
      }
      v157 = v47;
      v55 = v49;
      v56 = v14;
      v57 = v11;
      v11 = (uint64_t *)(v53 + 16 * v54);
      v58 = (_QWORD *)(v10 + v54);
      if (v54 == v15)
        goto LABEL_101;
      v59 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*((unsigned int *)v11 + 2));
      v60 = 0;
      v61 = ~v59 <= v59 ? v59 : ~v59;
      v62 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v61)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v61));
      v63 = *((_QWORD *)this + 171);
      v64 = (v62 >> 7) ^ (v63 >> 12);
      v65 = 0x101010101010101 * (v62 & 0x7F);
      v66 = *((_QWORD *)this + 174);
      while (1)
      {
        v67 = v64 & v66;
        v68 = *(_QWORD *)(v63 + v67);
        v69 = ((v68 ^ v65) - 0x101010101010101) & ~(v68 ^ v65) & 0x8080808080808080;
        if (v69)
          break;
LABEL_61:
        if ((v68 & (~v68 << 6) & 0x8080808080808080) != 0)
        {
          v10 = v9[1];
          v15 = v9[4];
          goto LABEL_101;
        }
        v60 += 8;
        v64 = v60 + v67;
      }
      while (1)
      {
        v70 = (v67 + (__clz(__rbit64(v69)) >> 3)) & v66;
        if (*(_DWORD *)(*((_QWORD *)this + 172) + 4 * v70) == v61)
          break;
        v69 &= v69 - 1;
        if (!v69)
          goto LABEL_61;
      }
      v10 = v9[1];
      v15 = v9[4];
      if (v70 == v66)
      {
LABEL_101:
        v71 = v57;
      }
      else
      {
        --v9[3];
        v86 = (uint64_t)v58 - v10 - 8;
        v87 = *v58 & (~*v58 << 6) & 0x8080808080808080;
        v88 = *(_QWORD *)(v10 + (v86 & v15)) & (~*(_QWORD *)(v10 + (v86 & v15)) << 6) & 0x8080808080808080;
        v89 = (__clz(v88) >> 3) + (__clz(__rbit64(v87)) >> 3);
        v38 = v89 >= 8;
        v90 = v89 < 8;
        if (v38)
          v91 = -2;
        else
          v91 = 0x80;
        if (v88)
          v92 = v87 == 0;
        else
          v92 = 1;
        if (v92)
          v93 = -2;
        else
          v93 = v91;
        *(_BYTE *)v58 = v93;
        v94 = !v92 && v90;
        *(_BYTE *)((v9[4] & v86) + (v9[4] & 7) + v9[1] + 1) = v93;
        v95 = v9[5];
        v9[6] += v94;
        v71 = v57;
        if (v95)
        {
          v150 = (unint64_t *)(v95 + 8);
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 - 1, v150));
          v152 = (unint64_t *)(v95 + 16);
          v71 = v57;
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
        }
        v10 = v9[1];
        v15 = v9[4];
        v58 = (_QWORD *)(v10 + v15);
      }
      v14 = v56;
      v49 = v55;
      v47 = v157;
      v72 = (_QWORD *)(v10 + v15);
      if (v21 != v72)
        goto LABEL_103;
LABEL_64:
      if (v58 != v21)
      {
        v165 = operator new(0x38uLL);
        *(_OWORD *)__p = xmmword_22DCE5C40;
        strcpy((char *)v165, "variables with 2 values: register other encoding");
        operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
        if (SHIBYTE(__p[1]) < 0)
          operator delete(v165);
        v74 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*((unsigned int *)v11 + 2));
        v75 = 0;
        v76 = ~v74;
        v77 = v9[1];
        v78 = v159;
        v79 = v158 ^ (v77 >> 12);
        v80 = v9[4];
        while (1)
        {
          v81 = v79 & v80;
          v82 = *(_QWORD *)(v77 + v81);
          v83 = ((v82 ^ v14) - 0x101010101010101) & ~(v82 ^ v14) & 0x8080808080808080;
          if (v83)
            break;
LABEL_72:
          if ((v82 & (~v82 << 6) & 0x8080808080808080) != 0)
          {
            v85 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v71, v155);
            v84 = v9[2];
            v120 = v84 + 16 * v85;
            *(_QWORD *)v120 = v159;
            *(_DWORD *)(v120 + 8) = 0;
            goto LABEL_125;
          }
          v75 += 8;
          v79 = v75 + v81;
        }
        v84 = v9[2];
        while (1)
        {
          v85 = (v81 + (__clz(__rbit64(v83)) >> 3)) & v80;
          if (*(_QWORD *)(v84 + 16 * v85) == v159)
            break;
          v83 &= v83 - 1;
          if (!v83)
            goto LABEL_72;
        }
LABEL_125:
        *(_DWORD *)(v84 + 16 * v85 + 8) = v76;
        goto LABEL_136;
      }
      v165 = operator new(0x38uLL);
      *(_OWORD *)__p = xmmword_22DCE5C40;
      strcpy((char *)v165, "variables with 2 values: create encoding literal");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
      v78 = v159;
      if (SHIBYTE(__p[1]) < 0)
        operator delete(v165);
      operations_research::Domain::Domain(&v165, 0, 1);
      v74 = operations_research::sat::PresolveContext::NewIntVar(this, (const operations_research::Domain *)&v165);
      if ((v165 & 1) != 0)
        operator delete(__p[0]);
      v96 = 0;
      v76 = ~v74;
      v97 = v9[1];
      v98 = v97 >> 12;
      v99 = (v97 >> 12) ^ v158;
      v100 = v9[4];
      while (1)
      {
        v101 = v99 & v100;
        v102 = *(_QWORD *)(v97 + (v99 & v100));
        v103 = ((v102 ^ v14) - 0x101010101010101) & ~(v102 ^ v14) & 0x8080808080808080;
        if (v103)
          break;
LABEL_98:
        if ((v102 & (~v102 << 6) & 0x8080808080808080) != 0)
        {
          v105 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v71, v155);
          v104 = v9[2];
          v121 = v104 + 16 * v105;
          *(_QWORD *)v121 = v159;
          *(_DWORD *)(v121 + 8) = 0;
          v97 = v9[1];
          v100 = v9[4];
          v98 = v97 >> 12;
          goto LABEL_127;
        }
        v96 += 8;
        v99 = v96 + v101;
      }
      v104 = v9[2];
      while (1)
      {
        v105 = (v101 + (__clz(__rbit64(v103)) >> 3)) & v100;
        if (*(_QWORD *)(v104 + 16 * v105) == v159)
          break;
        v103 &= v103 - 1;
        if (!v103)
          goto LABEL_98;
      }
LABEL_127:
      v122 = 0;
      *(_DWORD *)(v104 + 16 * v105 + 8) = v76;
      for (i = v98 ^ v47; ; i = v122 + v124)
      {
        v124 = i & v100;
        v125 = *(_QWORD *)(v97 + v124);
        v126 = ((v125 ^ v49) - 0x101010101010101) & ~(v125 ^ v49) & 0x8080808080808080;
        if (v126)
          break;
LABEL_132:
        if ((v125 & (~v125 << 6) & 0x8080808080808080) != 0)
          goto LABEL_134;
        v122 += 8;
      }
      v118 = v9[2];
      while (1)
      {
        v119 = (v124 + (__clz(__rbit64(v126)) >> 3)) & v100;
        if (*(_QWORD *)(v118 + 16 * v119) == v160)
          break;
        v126 &= v126 - 1;
        if (!v126)
          goto LABEL_132;
      }
LABEL_135:
      *(_DWORD *)(v118 + 16 * v119 + 8) = v74;
      goto LABEL_136;
    }
LABEL_51:
    if ((v51 & (~v51 << 6) & 0x8080808080808080) != 0)
      break;
    v45 += 8;
    v48 = v45 + v50;
  }
  v71 = v11;
  v58 = (_QWORD *)(v10 + v15);
  v72 = (_QWORD *)(v10 + v15);
  if (v21 == v72)
    goto LABEL_64;
LABEL_103:
  if (v58 == v72)
  {
    v165 = operator new(0x38uLL);
    *(_OWORD *)__p = xmmword_22DCE5C40;
    strcpy((char *)v165, "variables with 2 values: register other encoding");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
    v78 = v159;
    if (SHIBYTE(__p[1]) < 0)
      operator delete(v165);
    v76 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v156 + 8));
    v111 = 0;
    v74 = ~v76;
    v112 = v9[1];
    v113 = v47 ^ (v112 >> 12);
    v114 = v9[4];
    while (1)
    {
      v115 = v113 & v114;
      v116 = *(_QWORD *)(v112 + v115);
      v117 = ((v116 ^ v49) - 0x101010101010101) & ~(v116 ^ v49) & 0x8080808080808080;
      if (v117)
        break;
LABEL_122:
      if ((v116 & (~v116 << 6) & 0x8080808080808080) != 0)
      {
LABEL_134:
        v119 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v71, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v160)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v160)));
        v118 = v9[2];
        v127 = v118 + 16 * v119;
        *(_QWORD *)v127 = v160;
        *(_DWORD *)(v127 + 8) = 0;
        goto LABEL_135;
      }
      v111 += 8;
      v113 = v111 + v115;
    }
    v118 = v9[2];
    while (1)
    {
      v119 = (v115 + (__clz(__rbit64(v117)) >> 3)) & v114;
      if (*(_QWORD *)(v118 + 16 * v119) == v160)
        goto LABEL_135;
      v117 &= v117 - 1;
      if (!v117)
        goto LABEL_122;
    }
  }
  v106 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v156 + 8));
  v107 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*((unsigned int *)v11 + 2));
  v108 = (const char *)~(_DWORD)v107;
  v78 = v159;
  if ((_DWORD)v106 != (_DWORD)v108)
  {
    v165 = operator new(0x38uLL);
    *(_OWORD *)__p = xmmword_22DCE5C40;
    strcpy((char *)v165, "variables with 2 values: merge encoding literals");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
    if (SHIBYTE(__p[1]) < 0)
      operator delete(v165);
    operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)this, v106, v108);
    if (*((_BYTE *)this + 504))
      return;
  }
  v76 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, v106);
  v74 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, v107);
  if (~v76 <= v76)
    v110 = v76;
  else
    v110 = ~v76;
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v110), v109))
  {
    LODWORD(v165) = v76;
    LODWORD(v163) = ~v74;
    if (v76 != ~v74)
    {
      v163 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v165, (int)&v163, "min_literal == NegatedRef(max_literal)");
      if (v163)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 891, &v163);
        google::LogMessage::stream((google::LogMessage *)&v165);
        goto LABEL_176;
      }
    }
  }
LABEL_136:
  if (~v76 <= v76)
    v128 = v76;
  else
    v128 = ~v76;
  v129 = v128;
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v128), v73))
  {
    v131 = ~v74 <= v74 ? (const char *)v74 : (const char *)~v74;
    if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v131), v130))
    {
      if (~v164 <= v164)
        v138 = v164;
      else
        v138 = ~v164;
      v139 = v138;
      v140 = *((_QWORD *)this + 137);
      if (v138 < (unint64_t)((*((_QWORD *)this + 138) - v140) >> 2) && *(_DWORD *)(v140 + 4 * v138) != v138)
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v138);
        v138 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v139);
        v139 = v138;
      }
      v141 = *((_QWORD *)this + 153);
      if (v139 < (*((_QWORD *)this + 154) - v141) >> 2 && *(_DWORD *)(v141 + 4 * v139) != v138)
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v138);
        v138 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v139);
      }
      if (v138 == v129)
        return;
      v165 = operator new(0x30uLL);
      *(_OWORD *)__p = xmmword_22DCF6180;
      strcpy((char *)v165, "variables with 2 values: new affine relation");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
      if (SHIBYTE(__p[1]) < 0)
        operator delete(v165);
      if (v74 < 0)
      {
        if (operations_research::sat::PresolveContext::StoreAffineRelation(this, (const char *)v164, v131, v78 - v160, v160))
        {
          return;
        }
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 929);
        v154 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v165);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"Check failed: StoreAffineRelation(var, PositiveRef(max_literal), var_min - var_max, var_max) ", 93);
      }
      else
      {
        if (operations_research::sat::PresolveContext::StoreAffineRelation(this, (const char *)v164, v131, v160 - v78, v78))
        {
          return;
        }
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 926);
        v142 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v165);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"Check failed: StoreAffineRelation(var, PositiveRef(max_literal), var_max - var_min, var_min) ", 93);
      }
LABEL_176:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v165);
    }
  }
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v129), v130))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 911);
    v144 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"Check failed: IsFixed(min_literal) ", 35);
    goto LABEL_176;
  }
  if (~v74 <= v74)
    v133 = v74;
  else
    v133 = ~v74;
  if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v133), v132))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v165, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 912);
    v145 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"Check failed: IsFixed(max_literal) ", 35);
    goto LABEL_176;
  }
  v165 = operator new(0x28uLL);
  *(_OWORD *)__p = xmmword_22DCEAFB0;
  strcpy((char *)v165, "variables with 2 values: fixed encoding");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v165);
  if (SHIBYTE(__p[1]) < 0)
  {
    operator delete(v165);
    v135 = *((_QWORD *)this + 64);
    if (v76 < 0)
      goto LABEL_154;
LABEL_151:
    if (operations_research::Domain::Min((operations_research::Domain *)(v135 + 24 * v76), v134) == 1)
      goto LABEL_152;
LABEL_155:
    v137 = (const char *)v164;
    operations_research::Domain::Domain(&v165, v160);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, v137, (const operations_research::Domain *)&v165, 0);
  }
  else
  {
    v135 = *((_QWORD *)this + 64);
    if ((v76 & 0x80000000) == 0)
      goto LABEL_151;
LABEL_154:
    if (operations_research::Domain::Max((operations_research::Domain *)(v135 + 24 * ~v76), v134))
      goto LABEL_155;
LABEL_152:
    v136 = (const char *)v164;
    operations_research::Domain::Domain(&v165, v78);
    operations_research::sat::PresolveContext::IntersectDomainWith(this, v136, (const operations_research::Domain *)&v165, 0);
  }
  if ((v165 & 1) != 0)
    operator delete(__p[0]);
}

void sub_22DBC6EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC6EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,int a22,__int16 a23,char a24,char a25)
{
  if ((a20 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DBC6F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC6F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC6F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC6F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC6F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::find<long long>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = 0;
  v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v4 = *a1;
  v5 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  v6 = a1[3];
  v7 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    v8 = v5 & v6;
    v9 = *(_QWORD *)(v4 + v8);
    v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
      return v4 + v6;
    v2 += 8;
    v5 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_QWORD *)(a1[1] + 16 * v11) == *a2)
      return v4 + v11;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = 0;
  v5 = *a2;
  v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v7 = *a1;
  v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v9 = a1[3];
  while (1)
  {
    v10 = v8 & v9;
    v11 = *(_QWORD *)(v7 + v10);
    v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12)
      break;
LABEL_6:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      v14 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(a1, v6);
      v13 = a1[1];
      v15 = v13 + 16 * v14;
      *(_QWORD *)v15 = *a2;
      *(_DWORD *)(v15 + 8) = 0;
      return v13 + 16 * v14 + 8;
    }
    v4 += 8;
    v8 = v4 + v10;
  }
  v13 = a1[1];
  while (1)
  {
    v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
    if (*(_QWORD *)(v13 + 16 * v14) == v5)
      return v13 + 16 * v14 + 8;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_6;
  }
}

BOOL operations_research::sat::PresolveContext::CanonicalizeEncoding(operations_research::sat::PresolveContext *this, int *a2, uint64_t *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  if (~*a2 <= *a2)
    v7 = *a2;
  else
    v7 = ~v6;
  v8 = v7;
  v9 = *((_QWORD *)this + 137);
  if (v7 >= (unint64_t)((*((_QWORD *)this + 138) - v9) >> 2) || *(_DWORD *)(v9 + 4 * v7) == v7)
  {
    v10 = 0;
    v11 = 1;
    v12 = *((_QWORD *)this + 153);
    if (v7 >= (unint64_t)((*((_QWORD *)this + 154) - v12) >> 2))
      goto LABEL_12;
  }
  else
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), v7);
    v7 = *(_DWORD *)(*((_QWORD *)this + 137) + 4 * v8);
    v11 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v8);
    v10 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v8);
    v8 = v7;
    v12 = *((_QWORD *)this + 153);
    if (v7 >= (unint64_t)((*((_QWORD *)this + 154) - v12) >> 2))
      goto LABEL_12;
  }
  if (*(_DWORD *)(v12 + 4 * v8) != v7)
  {
    operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), v7);
    v7 = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v8);
    if (*(_QWORD *)(*((_QWORD *)this + 156) + 8 * v8) == -1)
      v11 = -v11;
  }
LABEL_12:
  if (v6 >= 0)
    v13 = v11;
  else
    v13 = -v11;
  if (v6 < 0)
    v14 = v10;
  else
    v14 = -v10;
  v15 = *a3 + v14;
  v16 = v15 / v13;
  v17 = v15 % v13;
  if (!v17)
  {
    *a2 = v7;
    *a3 = v16;
  }
  return v17 == 0;
}

void operations_research::sat::PresolveContext::InsertVarValueEncoding(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  const char *LiteralRepresentative;
  uint64_t v7;
  int v8;

  v8 = a3;
  v7 = a4;
  if (operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    && operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v8, &v7))
  {
    LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
    operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, LiteralRepresentative, (const char *)v8, v7, 1);
  }
}

uint64_t operations_research::sat::PresolveContext::StoreLiteralImpliesVarEqValue(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  unsigned int LiteralRepresentative;
  uint64_t v8;
  int v9;

  v9 = a3;
  v8 = a4;
  if (!operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    || !operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v9, &v8))
  {
    return 0;
  }
  LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
  return operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, LiteralRepresentative, v9, v8, 1);
}

uint64_t operations_research::sat::PresolveContext::StoreLiteralImpliesVarNEqValue(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  unsigned int LiteralRepresentative;
  uint64_t v8;
  int v9;

  v9 = a3;
  v8 = a4;
  if (!operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    || !operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v9, &v8))
  {
    return 0;
  }
  LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
  return operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, LiteralRepresentative, v9, v8, 0);
}

BOOL operations_research::sat::PresolveContext::HasVarValueEncoding(operations_research::sat::PresolveContext *this, int a2, uint64_t a3, int *a4)
{
  _BOOL8 result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE v20[8];
  _QWORD *v21;

  v19 = a2;
  v18 = a3;
  result = operations_research::sat::PresolveContext::RemapEncodingMaps(this);
  if (result)
  {
    result = operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v19, &v18);
    if (result)
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v19, (uint64_t)v20);
      v7 = 0;
      v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v18));
      v9 = v21[1];
      v10 = (v8 >> 7) ^ (v9 >> 12);
      v11 = v21[4];
      v12 = 0x101010101010101 * (v8 & 0x7F);
      while (1)
      {
        v13 = v10 & v11;
        v14 = *(_QWORD *)(v9 + v13);
        v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
        if (v15)
          break;
LABEL_8:
        if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
          return 0;
        v7 += 8;
        v10 = v7 + v13;
      }
      v16 = v21[2];
      while (1)
      {
        v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
        if (*(_QWORD *)(v16 + 16 * v17) == v18)
          break;
        v15 &= v15 - 1;
        if (!v15)
          goto LABEL_8;
      }
      result = v17 != v11;
      if (a4)
      {
        if (v17 != v11)
        {
          *a4 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v16 + 16 * v17 + 8));
          return 1;
        }
      }
    }
  }
  return result;
}

const char *operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(operations_research::sat::PresolveContext *this, int a2, uint64_t a3)
{
  uint64_t ConstantVar;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  operations_research::sat::PresolveContext *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  unsigned int LiteralRepresentative;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;

  ConstantVar = (uint64_t)this;
  v46 = a2;
  v45 = a3;
  if (!operations_research::sat::PresolveContext::RemapEncodingMaps(this))
    return (const char *)operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 0, v4);
  if (!operations_research::sat::PresolveContext::CanonicalizeEncoding((operations_research::sat::PresolveContext *)ConstantVar, &v46, &v45))return (const char *)operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 0, v4);
  v44 = v46;
  v5 = v45;
  if (!operations_research::Domain::Contains((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * v46), v45))return (const char *)operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 0, v4);
  absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)(ConstantVar + 944), &v44, (uint64_t)&v47);
  v6 = 0;
  v7 = v48;
  v9 = v48 + 1;
  v8 = v48[1];
  v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v5));
  v11 = (v10 >> 7) ^ (v8 >> 12);
  v12 = 0x101010101010101 * (v10 & 0x7F);
  v13 = v48[4];
  while (1)
  {
    v14 = v11 & v13;
    v15 = *(_QWORD *)(v8 + v14);
    v16 = ((v15 ^ v12) - 0x101010101010101) & ~(v15 ^ v12) & 0x8080808080808080;
    if (v16)
      break;
LABEL_9:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      goto LABEL_13;
    v6 += 8;
    v11 = v6 + v14;
  }
  v17 = v48[2];
  while (1)
  {
    v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    if (*(_QWORD *)(v17 + 16 * v18) == v5)
      break;
    v16 &= v16 - 1;
    if (!v16)
      goto LABEL_9;
  }
  if (v18 != v13)
  {
    v35 = (const char *)*(unsigned int *)(v17 + 16 * v18 + 8);
    v36 = (operations_research::sat::PresolveContext *)ConstantVar;
    return operations_research::sat::PresolveContext::GetLiteralRepresentative(v36, v35);
  }
LABEL_13:
  if (operations_research::Domain::Size((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * v44)) == 1)
  {
    ConstantVar = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 1, v21);
    v22 = 0;
    v23 = v7[1];
    v24 = (v10 >> 7) ^ (v23 >> 12);
    v25 = v7[4];
    while (1)
    {
      v26 = v24 & v25;
      v27 = *(_QWORD *)(v23 + v26);
      v28 = ((v27 ^ v12) - 0x101010101010101) & ~(v27 ^ v12) & 0x8080808080808080;
      if (v28)
        break;
LABEL_19:
      if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
      {
        v30 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v9, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v5)));
        v29 = v7[2];
        v40 = v29 + 16 * v30;
        *(_QWORD *)v40 = v5;
        *(_DWORD *)(v40 + 8) = 0;
        goto LABEL_36;
      }
      v22 += 8;
      v24 = v22 + v26;
    }
    v29 = v7[2];
    while (1)
    {
      v30 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v25;
      if (*(_QWORD *)(v29 + 16 * v30) == v5)
        break;
      v28 &= v28 - 1;
      if (!v28)
        goto LABEL_19;
    }
LABEL_36:
    *(_DWORD *)(v29 + 16 * v30 + 8) = ConstantVar;
    return (const char *)ConstantVar;
  }
  if (v44 < 0)
  {
    v32 = -operations_research::Domain::Max((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * ~v44), v20);
    v33 = v44;
    if ((v44 & 0x80000000) == 0)
      goto LABEL_23;
  }
  else
  {
    v32 = operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * v44), v20);
    v33 = v44;
    if ((v44 & 0x80000000) == 0)
    {
LABEL_23:
      v34 = operations_research::Domain::Max((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * v33), v31);
      goto LABEL_27;
    }
  }
  v34 = -operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * ~v33), v31);
LABEL_27:
  if (operations_research::Domain::Size((operations_research::Domain *)(*(_QWORD *)(ConstantVar + 512) + 24 * v44)) != 2)
  {
    v39 = (const char *)operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)ConstantVar);
    operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)ConstantVar, v39, v44, v5);
    v36 = (operations_research::sat::PresolveContext *)ConstantVar;
    v35 = v39;
    return operations_research::sat::PresolveContext::GetLiteralRepresentative(v36, v35);
  }
  if (v5 == v32)
    v37 = v34;
  else
    v37 = v32;
  v47 = v37;
  if (v7[1] + v7[4] == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::find<long long>(v9, &v47))
  {
    if (v32 || v34 != 1)
    {
      v41 = (const char *)operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)ConstantVar);
      operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)ConstantVar, v41, v44, v34);
      LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, v41);
      if (v5 == v34)
        return (const char *)LiteralRepresentative;
      else
        return (const char *)~LiteralRepresentative;
    }
    else
    {
      LODWORD(ConstantVar) = operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, (const char *)v44);
      v43 = 1;
      *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v43) = ConstantVar;
      v43 = 0;
      *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v43) = ~(_DWORD)ConstantVar;
      if (v5 == 1)
        return (const char *)ConstantVar;
      else
        return (const char *)~(_DWORD)ConstantVar;
    }
  }
  else
  {
    ConstantVar = ~(unint64_t)operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, (const char *)*(unsigned int *)(v38 + 8));
    *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v45) = ConstantVar;
  }
  return (const char *)ConstantVar;
}

void operations_research::sat::PresolveContext::ReadObjectiveFromProto(operations_research::sat::PresolveContext *this, __n128 a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *__p[2];

  if (*(_QWORD *)(*((_QWORD *)this + 6) + 120))
    v3 = *(uint64_t **)(*((_QWORD *)this + 6) + 120);
  else
    v3 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  *((_QWORD *)this + 80) = v3[11];
  a2.n128_u64[0] = v3[12];
  if (a2.n128_f64[0] == 0.0)
    a2.n128_f64[0] = 1.0;
  *((_QWORD *)this + 81) = a2.n128_u64[0];
  v4 = *((int *)v3 + 16);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 608) = 1;
    operations_research::Domain::FromFlatSpanOfIntervals(v3[9], v4, &v43, a2);
    v5 = (_QWORD *)((char *)this + 616);
    if ((unint64_t *)((char *)this + 616) != &v43)
    {
LABEL_8:
      v6 = (void **)((char *)this + 624);
      if ((*((_BYTE *)this + 616) & 1) != 0)
        operator delete(*v6);
      *v5 = v43;
      *(_OWORD *)v6 = *(_OWORD *)__p;
      goto LABEL_11;
    }
  }
  else
  {
    *((_BYTE *)this + 608) = 0;
    operations_research::Domain::AllValues((uint64_t)&v43);
    v5 = (_QWORD *)((char *)this + 616);
    if ((unint64_t *)((char *)this + 616) != &v43)
      goto LABEL_8;
  }
  if ((v43 & 1) != 0)
    operator delete(__p[0]);
LABEL_11:
  v7 = *((_QWORD *)this + 70);
  if (v7 < 0x80)
  {
    if (v7)
    {
      *((_QWORD *)this + 69) = 0;
      memset(*((void **)this + 67), 128, v7 + 8);
      *(_BYTE *)(*((_QWORD *)this + 67) + *((_QWORD *)this + 70)) = -1;
      v7 = *((_QWORD *)this + 70);
      v8 = v7 - (v7 >> 3);
      if (v7 == 7)
        v8 = 6;
      *((_QWORD *)this + 72) = v8 - *((_QWORD *)this + 69);
    }
  }
  else
  {
    operator delete(*((void **)this + 67));
    v7 = 0;
    *((_QWORD *)this + 67) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 72) = 0;
    *((_QWORD *)this + 68) = 0;
    *((_QWORD *)this + 70) = 0;
    *((_QWORD *)this + 69) = 0;
  }
  v9 = (unint64_t *)*((_QWORD *)this + 71);
  if (v9)
  {
    v9[1] = 0;
    *v9 = v7;
    v9[4] = 0;
    v9[2] = 0;
    if (*((int *)v3 + 4) < 1)
      return;
  }
  else if (*((int *)v3 + 4) < 1)
  {
    return;
  }
  v10 = 0;
  v11 = ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7));
  v42 = v11 >> 7;
  v12 = 0x101010101010101 * (v11 & 0x7F);
  do
  {
    v18 = 0;
    v19 = *(_DWORD *)(v3[3] + 4 * v10);
    if (v19 >= 0)
      v20 = *(_QWORD *)(v3[6] + 8 * v10);
    else
      v20 = -*(_QWORD *)(v3[6] + 8 * v10);
    if (~v19 > v19)
      v19 = ~v19;
    LODWORD(v43) = v19;
    v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v19));
    v22 = *((_QWORD *)this + 67);
    v23 = (v21 >> 7) ^ (v22 >> 12);
    v24 = *((_QWORD *)this + 70);
    v25 = 0x101010101010101 * (v21 & 0x7F);
    for (i = v23; ; i = v18 + v27)
    {
      v27 = i & v24;
      v28 = *(_QWORD *)(v22 + (i & v24));
      v29 = ((v28 ^ v25) - 0x101010101010101) & ~(v28 ^ v25) & 0x8080808080808080;
      if (v29)
        break;
LABEL_36:
      if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      {
        v31 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert((uint64_t *)this + 67, v21);
        v30 = *((_QWORD *)this + 68);
        v32 = v30 + 16 * v31;
        *(_DWORD *)v32 = v43;
        *(_QWORD *)(v32 + 8) = 0;
        v19 = v43;
        v22 = *((_QWORD *)this + 67);
        v24 = *((_QWORD *)this + 70);
        v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v43)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + (int)v43));
        v23 = (v21 >> 7) ^ (v22 >> 12);
        v25 = 0x101010101010101 * (v21 & 0x7F);
        goto LABEL_39;
      }
      v18 += 8;
    }
    v30 = *((_QWORD *)this + 68);
    while (1)
    {
      v31 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v24;
      if (*(_DWORD *)(v30 + 16 * v31) == v19)
        break;
      v29 &= v29 - 1;
      if (!v29)
        goto LABEL_36;
    }
LABEL_39:
    v33 = 0;
    *(_QWORD *)(v30 + 16 * v31 + 8) += v20;
    while (1)
    {
      v34 = v23 & v24;
      v35 = *(_QWORD *)(v22 + v34);
      v36 = ((v35 ^ v25) - 0x101010101010101) & ~(v35 ^ v25) & 0x8080808080808080;
      if (v36)
        break;
LABEL_44:
      if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
      {
        v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert((uint64_t *)this + 67, v21);
        v37 = *((_QWORD *)this + 68);
        v39 = v37 + 16 * v38;
        *(_DWORD *)v39 = v43;
        *(_QWORD *)(v39 + 8) = 0;
        goto LABEL_47;
      }
      v33 += 8;
      v23 = v33 + v34;
    }
    v37 = *((_QWORD *)this + 68);
    while (1)
    {
      v38 = (v34 + (__clz(__rbit64(v36)) >> 3)) & v24;
      if (*(_DWORD *)(v37 + 16 * v38) == v19)
        break;
      v36 &= v36 - 1;
      if (!v36)
        goto LABEL_44;
    }
LABEL_47:
    if (*(_QWORD *)(v37 + 16 * v38 + 8))
    {
      v16 = 0;
      v40 = (_QWORD *)(*((_QWORD *)this + 85) + 48 * (int)v43);
      v17 = v42 ^ (*v40 >> 12);
      v41 = v40[3];
      while (1)
      {
        v13 = v17 & v41;
        v14 = *(_QWORD *)(*v40 + v13);
        v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
        if (v15)
          break;
LABEL_23:
        if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v40[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v43), ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7)))) = -1;
          goto LABEL_50;
        }
        v16 += 8;
        v17 = v16 + v13;
      }
      while (*(_DWORD *)(v40[1] + 4 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v41)) != -1)
      {
        v15 &= v15 - 1;
        if (!v15)
          goto LABEL_23;
      }
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>((uint64_t *)this + 67, (int *)&v43);
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v43), &operations_research::sat::kObjectiveConstraint);
    }
LABEL_50:
    ++v10;
  }
  while (v10 < *((int *)v3 + 4));
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v5 + (v6 & v7));
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 16 * v12) == (_DWORD)v3)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
    return 0;
  --a1[2];
  v14 = *(_QWORD *)(v5 + ((v12 - 8) & v7));
  v15 = *(_QWORD *)(v5 + v12) & (~*(_QWORD *)(v5 + v12) << 6) & 0x8080808080808080;
  v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v21 = 0;
    v18 = -2;
  }
  else
  {
    v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    v20 = v19 >= 8;
    v21 = v19 < 8;
    if (v20)
      v18 = -2;
    else
      v18 = 0x80;
  }
  *(_BYTE *)(v5 + v12) = v18;
  *(_BYTE *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  v22 = a1[4];
  a1[5] += v21;
  if (!v22)
    return 1;
  v23 = (unint64_t *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 - 1, v23));
  v25 = (unint64_t *)(v22 + 16);
  result = 1;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  return result;
}

BOOL operations_research::sat::PresolveContext::CanonicalizeObjective(operations_research::sat::PresolveContext *this, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  int *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  char v44;
  int v45;
  const char *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  int *v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int8x16_t v112;
  const char *v113;
  unint64_t *v114;
  int8x16_t v115;
  void **v116;
  void **v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  char *v122;
  int v123;
  unint64_t v124;
  void **v125;
  const char *v126;
  _BOOL4 IsEmpty;
  uint64_t v128;
  _BOOL8 v129;
  const char *v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t *v139;
  unint64_t v140[3];
  unint64_t v141;
  void *v142;
  unint64_t v143;
  void *__p;
  char *v145;
  __int128 v146;
  char *v147;
  __int128 v148;

  v3 = (_QWORD *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 74) = v3;
  v4 = (char *)*((_QWORD *)this + 67);
  v5 = (int *)*((_QWORD *)this + 68);
  v6 = v4;
  if (*v4 <= -2)
  {
    do
    {
      v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v6 = (_QWORD *)((char *)v6 + v7);
      v5 += 4 * v7;
    }
    while (*(char *)v6 < -1);
  }
  v139 = (uint64_t *)((char *)this + 584);
  v8 = &v4[*((_QWORD *)this + 70)];
  if (v6 == (_QWORD *)v8)
    goto LABEL_110;
  v135 = (uint64_t *)((char *)this + 536);
  v137 = &v4[*((_QWORD *)this + 70)];
  do
  {
    v9 = *v5;
    v10 = *((_QWORD *)v5 + 1);
    v11 = *((_QWORD *)this + 75);
    if ((unint64_t)v3 < v11)
    {
      *(_DWORD *)v3 = v9;
      v3[1] = v10;
      v3 += 2;
      *((_QWORD *)this + 74) = v3;
      v12 = *((char *)v6 + 1);
      v6 = (_QWORD *)((char *)v6 + 1);
      v5 += 4;
      if (v12 > -2)
        continue;
      goto LABEL_23;
    }
    v13 = (_DWORD *)*v139;
    v14 = ((uint64_t)v3 - *v139) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(16 * v17);
      v19 = (uint64_t)&v18[16 * v14];
      *(_DWORD *)v19 = v9;
      *(_QWORD *)(v19 + 8) = v10;
      if (v3 == (_QWORD *)v13)
      {
LABEL_26:
        v21 = v3;
        *((_QWORD *)this + 73) = v19;
        v3 = (_QWORD *)(v19 + 16);
        *((_QWORD *)this + 74) = v19 + 16;
        *((_QWORD *)this + 75) = &v18[16 * v17];
        if (v21)
          goto LABEL_21;
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = 16 * v14;
      *(_DWORD *)v19 = v9;
      *(_QWORD *)(v19 + 8) = v10;
      if (v3 == (_QWORD *)v13)
        goto LABEL_26;
    }
    v20 = v19;
    do
    {
      *(_OWORD *)(v20 - 16) = *((_OWORD *)v3 - 1);
      v20 -= 16;
      v3 -= 2;
    }
    while (v3 != (_QWORD *)v13);
    v21 = (void *)*v139;
    *((_QWORD *)this + 73) = v20;
    v3 = (_QWORD *)(v19 + 16);
    *((_QWORD *)this + 74) = v19 + 16;
    *((_QWORD *)this + 75) = &v18[16 * v17];
    if (v21)
LABEL_21:
      operator delete(v21);
LABEL_22:
    v8 = v137;
    *((_QWORD *)this + 74) = v3;
    v22 = *((char *)v6 + 1);
    v6 = (_QWORD *)((char *)v6 + 1);
    v5 += 4;
    if (v22 > -2)
      continue;
    do
    {
LABEL_23:
      v23 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v6 = (_QWORD *)((char *)v6 + v23);
      v5 += 4 * v23;
    }
    while (*(char *)v6 < -1);
  }
  while (v6 != (_QWORD *)v8);
  v24 = (_DWORD *)*v139;
  if ((_QWORD *)*v139 != v3)
  {
    v136 = 0;
    v25 = ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7));
    v133 = v25 >> 7;
    v134 = 0x101010101010101 * (v25 & 0x7F);
    while (1)
    {
      while (1)
      {
        v31 = 0;
        LODWORD(v145) = 0;
        LODWORD(v145) = *v24;
        v53 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v145)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + (int)v145));
        v54 = *((_QWORD *)this + 67);
        v32 = (v53 >> 7) ^ (v54 >> 12);
        v55 = *((_QWORD *)this + 70);
        v56 = 0x101010101010101 * (v53 & 0x7F);
        while (1)
        {
          v26 = v32 & v55;
          v27 = *(_QWORD *)(v54 + v26);
          v28 = ((v27 ^ v56) - 0x101010101010101) & ~(v27 ^ v56) & 0x8080808080808080;
          if (v28)
            break;
LABEL_34:
          if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
            goto LABEL_73;
          v31 += 8;
          v32 = v31 + v26;
        }
        v29 = *((_QWORD *)this + 68);
        while (1)
        {
          v30 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v55;
          if (*(_DWORD *)(v29 + 16 * v30) == (_DWORD)v145)
            break;
          v28 &= v28 - 1;
          if (!v28)
            goto LABEL_34;
        }
        if (v30 == v55)
          goto LABEL_73;
        v33 = *(_QWORD *)(v29 + 16 * v30 + 8);
        if (!*((_BYTE *)this + 64)
          && !*((_BYTE *)this + 608)
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 3) == *(_DWORD *)(*((_QWORD *)this + 6) + 48))
        {
          v34 = (_QWORD *)(*((_QWORD *)this + 85) + 48 * (int)v145);
          if (v34[2] == 1)
          {
            v35 = 0;
            v36 = v133 ^ (*v34 >> 12);
            v37 = v34[3];
            while (1)
            {
              v38 = v36 & v37;
              v39 = *(_QWORD *)(*v34 + v38);
              v40 = ((v39 ^ v134) - 0x101010101010101) & ~(v39 ^ v134) & 0x8080808080808080;
              if (v40)
                break;
LABEL_45:
              if ((v39 & (~v39 << 6) & 0x8080808080808080) != 0)
                goto LABEL_60;
              v35 += 8;
              v36 = v35 + v38;
            }
            while (1)
            {
              v41 = (v38 + (__clz(__rbit64(v40)) >> 3)) & v37;
              if (*(_DWORD *)(v34[1] + 4 * v41) == -1)
                break;
              v40 &= v40 - 1;
              if (!v40)
                goto LABEL_45;
            }
            if (v41 != v37)
            {
              v147 = (char *)operator new(0x28uLL);
              v148 = xmmword_22DCEDA00;
              strcpy(v147, "objective: variable not used elsewhere");
              operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v147);
              if (SHIBYTE(v148) < 0)
                operator delete(v147);
              v131 = (const char *)v145;
              if (v33 < 1)
              {
                if ((v145 & 0x80000000) != 0)
                  v43 = -operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)v145), v42);
                else
                  v43 = operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v145), v42);
              }
              else if ((v145 & 0x80000000) != 0)
              {
                v43 = -operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)v145), v42);
              }
              else
              {
                v43 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v145), v42);
              }
              operations_research::Domain::Domain(&v147, v43);
              v44 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v131, (const operations_research::Domain *)&v147, 0);
              if ((v147 & 1) != 0)
              {
                v132 = v44;
                operator delete((void *)v148);
                v44 = v132;
              }
              if ((v44 & 1) == 0)
                return 0;
            }
          }
        }
LABEL_60:
        v45 = (int)v145;
        if (~(_DWORD)v145 > (int)v145)
          v45 = ~(_DWORD)v145;
        if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v45), (const char *)a2))break;
        if ((v145 & 0x80000000) != 0)
          v47 = -operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)v145), v46);
        else
          v47 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v145), v46);
        v136 += v47 * v33;
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v145), &operations_research::sat::kObjectiveConstraint);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v145);
LABEL_73:
        v24 += 4;
        if (v24 == (_DWORD *)v3)
          goto LABEL_111;
      }
      v48 = (int)v145;
      if (~(_DWORD)v145 <= (int)v145)
        a2 = v145;
      else
        a2 = ~(_DWORD)v145;
      v49 = (int)a2;
      v50 = *((_QWORD *)this + 137);
      if ((int)a2 >= (unint64_t)((*((_QWORD *)this + 138) - v50) >> 2)
        || *(_DWORD *)(v50 + 4 * (int)a2) == (_DWORD)a2)
      {
        v51 = 0;
        v52 = 1;
      }
      else
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
        a2 = *(unsigned int *)(*((_QWORD *)this + 137) + 4 * v49);
        v52 = *(_QWORD *)(*((_QWORD *)this + 140) + 8 * v49);
        v51 = *(_QWORD *)(*((_QWORD *)this + 143) + 8 * v49);
        v49 = (int)a2;
      }
      LODWORD(v147) = a2;
      *(_QWORD *)&v148 = v52;
      *((_QWORD *)&v148 + 1) = v51;
      v57 = *((_QWORD *)this + 153);
      if (v49 < (*((_QWORD *)this + 154) - v57) >> 2
        && *(_DWORD *)(v57 + 4 * v49) != (_DWORD)a2
        && (operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2), a2 = *(unsigned int *)(*((_QWORD *)this + 153) + 4 * v49), v58 = *(_QWORD *)(*((_QWORD *)this + 156) + 8 * v49), LODWORD(v147) = *(_DWORD *)(*((_QWORD *)this + 153) + 4 * v49), v58 == -1))
      {
        v52 = -v52;
        *(_QWORD *)&v148 = v52;
        if ((v48 & 0x80000000) == 0)
        {
LABEL_80:
          if ((_DWORD)a2 != (_DWORD)v145)
            goto LABEL_84;
          goto LABEL_108;
        }
      }
      else if ((v48 & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
      *(_QWORD *)&v148 = -v52;
      *((_QWORD *)&v148 + 1) = -v51;
      if ((_DWORD)a2 != (_DWORD)v145)
      {
LABEL_84:
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v145);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v145), &operations_research::sat::kObjectiveConstraint);
        v59 = 0;
        v136 += *((_QWORD *)&v148 + 1) * v33;
        v60 = v148 * v33;
        v61 = (int)v147;
        v62 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v61)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v61));
        v63 = *((_QWORD *)this + 67);
        v64 = (v62 >> 7) ^ (v63 >> 12);
        v65 = *((_QWORD *)this + 70);
        while (1)
        {
          v66 = v64 & v65;
          v67 = *(_QWORD *)(v63 + (v64 & v65));
          v68 = ((v67 ^ (0x101010101010101 * (v62 & 0x7F))) - 0x101010101010101) & ~(v67 ^ (0x101010101010101
                                                                                              * (v62 & 0x7F))) & 0x8080808080808080;
          if (v68)
            break;
LABEL_89:
          if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0)
          {
            v70 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(v135, v62);
            v69 = *((_QWORD *)this + 68);
            LODWORD(v61) = (_DWORD)v147;
            v71 = v69 + 16 * v70;
            *(_DWORD *)v71 = (_DWORD)v147;
            *(_QWORD *)(v71 + 8) = 0;
            goto LABEL_92;
          }
          v59 += 8;
          v64 = v59 + v66;
        }
        v69 = *((_QWORD *)this + 68);
        while (1)
        {
          v70 = (v66 + (__clz(__rbit64(v68)) >> 3)) & v65;
          if (*(_DWORD *)(v69 + 16 * v70) == (_DWORD)v147)
            break;
          v68 &= v68 - 1;
          if (!v68)
            goto LABEL_89;
        }
LABEL_92:
        v72 = v69 + 16 * v70;
        v73 = *(_QWORD *)(v72 + 8) + v60;
        *(_QWORD *)(v72 + 8) = v73;
        if (v73)
        {
          v74 = 0;
          v75 = (_QWORD *)(*((_QWORD *)this + 85) + 48 * (int)v61);
          v76 = v133 ^ (*v75 >> 12);
          v77 = v75[3];
          while (1)
          {
            v78 = v76 & v77;
            v79 = *(_QWORD *)(*v75 + v78);
            v80 = ((v79 ^ v134) - 0x101010101010101) & ~(v79 ^ v134) & 0x8080808080808080;
            if (v80)
              break;
LABEL_97:
            if ((v79 & (~v79 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)(v75[1]
                        + 4
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v61), ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7)))) = -1;
              LODWORD(v61) = (_DWORD)v147;
              goto LABEL_101;
            }
            v74 += 8;
            v76 = v74 + v78;
          }
          while (*(_DWORD *)(v75[1] + 4 * ((v78 + (__clz(__rbit64(v80)) >> 3)) & v77)) != -1)
          {
            v80 &= v80 - 1;
            if (!v80)
              goto LABEL_97;
          }
LABEL_101:
          if (~(_DWORD)v61 > (int)v61)
            LODWORD(v61) = ~(_DWORD)v61;
          if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * (int)v61), (const char *)v62))
          {
            if ((v147 & 0x80000000) != 0)
              v81 = -operations_research::Domain::Max((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * ~(_DWORD)v147), (const char *)a2);
            else
              v81 = operations_research::Domain::Min((operations_research::Domain *)(*((_QWORD *)this + 64) + 24 * v147), (const char *)a2);
            v136 += v81 * v73;
            absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v147), &operations_research::sat::kObjectiveConstraint);
            absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v147);
          }
        }
        else
        {
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v147);
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)this + 85) + 48 * (int)v147), &operations_research::sat::kObjectiveConstraint);
        }
      }
LABEL_108:
      v24 += 4;
      if (v24 == (_DWORD *)v3)
        goto LABEL_111;
    }
  }
LABEL_110:
  v136 = 0;
LABEL_111:
  operations_research::Domain::Domain(&v147, 0);
  v82 = (_QWORD *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 74) = v82;
  v83 = (char *)*((_QWORD *)this + 67);
  v84 = (int *)*((_QWORD *)this + 68);
  v85 = v83;
  if (*v83 <= -2)
  {
    do
    {
      v86 = (__clz(__rbit64(((*v85 >> 7) & ~*v85 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v85 = (_QWORD *)((char *)v85 + v86);
      v84 += 4 * v86;
    }
    while (*(char *)v85 < -1);
  }
  v87 = &v83[*((_QWORD *)this + 70)];
  if (v85 != (_QWORD *)v87)
  {
    v138 = &v83[*((_QWORD *)this + 70)];
    while (1)
    {
      v88 = *v84;
      v89 = *((_QWORD *)v84 + 1);
      v90 = *((_QWORD *)this + 75);
      if ((unint64_t)v82 < v90)
      {
        *(_DWORD *)v82 = v88;
        v82[1] = v89;
        v82 += 2;
        *((_QWORD *)this + 74) = v82;
        v91 = *((char *)v85 + 1);
        v85 = (_QWORD *)((char *)v85 + 1);
        v84 += 4;
        if (v91 <= -2)
          goto LABEL_133;
        goto LABEL_115;
      }
      v92 = (_QWORD *)*v139;
      v93 = ((uint64_t)v82 - *v139) >> 4;
      v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v95 = v90 - (_QWORD)v92;
      if (v95 >> 3 > v94)
        v94 = v95 >> 3;
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
        v96 = 0xFFFFFFFFFFFFFFFLL;
      else
        v96 = v94;
      if (v96)
      {
        if (v96 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v97 = (char *)operator new(16 * v96);
        v98 = (uint64_t)&v97[16 * v93];
        *(_DWORD *)v98 = v88;
        *(_QWORD *)(v98 + 8) = v89;
        if (v82 == v92)
        {
LABEL_136:
          v100 = v82;
          *((_QWORD *)this + 73) = v98;
          v82 = (_QWORD *)(v98 + 16);
          *((_QWORD *)this + 74) = v98 + 16;
          *((_QWORD *)this + 75) = &v97[16 * v96];
          if (v100)
            goto LABEL_131;
          goto LABEL_132;
        }
      }
      else
      {
        v97 = 0;
        v98 = 16 * v93;
        *(_DWORD *)v98 = v88;
        *(_QWORD *)(v98 + 8) = v89;
        if (v82 == v92)
          goto LABEL_136;
      }
      v99 = v98;
      do
      {
        *(_OWORD *)(v99 - 16) = *((_OWORD *)v82 - 1);
        v99 -= 16;
        v82 -= 2;
      }
      while (v82 != v92);
      v100 = (void *)*v139;
      *((_QWORD *)this + 73) = v99;
      v82 = (_QWORD *)(v98 + 16);
      *((_QWORD *)this + 74) = v98 + 16;
      *((_QWORD *)this + 75) = &v97[16 * v96];
      if (v100)
LABEL_131:
        operator delete(v100);
LABEL_132:
      v87 = v138;
      *((_QWORD *)this + 74) = v82;
      v101 = *((char *)v85 + 1);
      v85 = (_QWORD *)((char *)v85 + 1);
      v84 += 4;
      if (v101 <= -2)
      {
        do
        {
LABEL_133:
          v102 = (__clz(__rbit64(((*v85 >> 7) & ~*v85 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v85 = (_QWORD *)((char *)v85 + v102);
          v84 += 4 * v102;
        }
        while (*(char *)v85 < -1);
      }
LABEL_115:
      if (v85 == (_QWORD *)v87)
      {
        v103 = *v139;
        goto LABEL_140;
      }
    }
  }
  v103 = (uint64_t)v82;
LABEL_140:
  v104 = 126 - 2 * __clz(((uint64_t)v82 - v103) >> 4);
  if (v82 == (_QWORD *)v103)
    v105 = 0;
  else
    v105 = v104;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v103, (int *)v82, (uint64_t)&v145, v105, 1);
  v106 = (unsigned int *)*((_QWORD *)this + 73);
  v107 = (unsigned int *)*((_QWORD *)this + 74);
  if (v106 != v107)
  {
    v108 = 0;
    while (1)
    {
      v109 = *((_QWORD *)v106 + 1);
      if (v109)
      {
        if (v109 >= 0)
          v110 = *((_QWORD *)v106 + 1);
        else
          v110 = -v109;
        v111 = v108;
        do
        {
          v108 = v110;
          v110 = v111 % v110;
          v111 = v108;
        }
        while (v110);
      }
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)*v106, v140);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)v140, 0, v109, &v141);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v147, (const operations_research::Domain *)&v141, &v143, v112);
      operations_research::Domain::RelaxIfTooComplex(&v143, v113, (unint64_t *)&v145);
      if ((v147 & 1) != 0)
        operator delete((void *)v148);
      v147 = v145;
      v148 = v146;
      v145 = 0;
      if ((v143 & 1) != 0)
      {
        operator delete(__p);
        if ((v141 & 1) == 0)
        {
LABEL_156:
          if ((v140[0] & 1) != 0)
            goto LABEL_160;
          goto LABEL_145;
        }
      }
      else if ((v141 & 1) == 0)
      {
        goto LABEL_156;
      }
      operator delete(v142);
      if ((v140[0] & 1) != 0)
LABEL_160:
        operator delete((void *)v140[1]);
LABEL_145:
      v106 += 4;
      if (v106 == v107)
        goto LABEL_162;
    }
  }
  v108 = 0;
LABEL_162:
  operations_research::Domain::Domain(&v141, -v136);
  v114 = (unint64_t *)((char *)this + 616);
  operations_research::Domain::AdditionWith((operations_research::sat::PresolveContext *)((char *)this + 616), (const operations_research::Domain *)&v141, &v143, v115);
  operations_research::Domain::IntersectionWith(&v143, (const operations_research::Domain *)&v147, (unint64_t *)&v145);
  if ((char **)((char *)this + 616) == &v145)
  {
    if ((v145 & 1) != 0)
      operator delete((void *)v146);
  }
  else
  {
    v116 = (void **)((char *)this + 624);
    if ((*((_BYTE *)this + 616) & 1) != 0)
      operator delete(*v116);
    *v114 = (unint64_t)v145;
    *(_OWORD *)v116 = v146;
    v145 = 0;
  }
  if ((v143 & 1) != 0)
  {
    operator delete(__p);
    if ((v141 & 1) != 0)
LABEL_168:
      operator delete(v142);
  }
  else if ((v141 & 1) != 0)
  {
    goto LABEL_168;
  }
  operations_research::Domain::SimplifyUsingImpliedDomain((operations_research::sat::PresolveContext *)((char *)this + 616), (const operations_research::Domain *)&v147, (unint64_t *)&v145);
  if (v114 == (unint64_t *)&v145)
  {
    if ((v145 & 1) != 0)
      operator delete((void *)v146);
  }
  else
  {
    v117 = (void **)((char *)this + 624);
    if ((*((_BYTE *)this + 616) & 1) != 0)
      operator delete(*v117);
    *v114 = (unint64_t)v145;
    *(_OWORD *)v117 = v146;
  }
  *((double *)this + 80) = *((double *)this + 80) + (double)v136;
  if (v108 >= 2)
  {
    v118 = (char *)*((_QWORD *)this + 67);
    v119 = *((_QWORD *)this + 68);
    if (*v118 > -2)
    {
      v120 = (_QWORD *)*((_QWORD *)this + 67);
    }
    else
    {
      v120 = (_QWORD *)*((_QWORD *)this + 67);
      do
      {
        v121 = (__clz(__rbit64(((*v120 >> 7) & ~*v120 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v120 = (_QWORD *)((char *)v120 + v121);
        v119 += 16 * v121;
      }
      while (*(char *)v120 < -1);
    }
    v122 = &v118[*((_QWORD *)this + 70)];
    while (v120 != (_QWORD *)v122)
    {
      *(uint64_t *)(v119 + 8) /= v108;
      v123 = *((char *)v120 + 1);
      v120 = (_QWORD *)((char *)v120 + 1);
      v119 += 16;
      if (v123 <= -2)
      {
        do
        {
          v124 = (__clz(__rbit64(((*v120 >> 7) & ~*v120 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v120 = (_QWORD *)((char *)v120 + v124);
          v119 += 16 * v124;
        }
        while (*(char *)v120 < -1);
      }
    }
    operations_research::Domain::InverseMultiplicationBy((operations_research::sat::PresolveContext *)((char *)this + 616), v108, (unint64_t *)&v145);
    if (v114 == (unint64_t *)&v145)
    {
      if ((v145 & 1) != 0)
        operator delete((void *)v146);
    }
    else
    {
      v125 = (void **)((char *)this + 624);
      if ((*((_BYTE *)this + 616) & 1) != 0)
        operator delete(*v125);
      *v114 = (unint64_t)v145;
      *(_OWORD *)v125 = v146;
    }
    *((double *)this + 80) = *((double *)this + 80) / (double)v108;
    *((double *)this + 81) = *((double *)this + 81) * (double)v108;
  }
  IsEmpty = operations_research::Domain::IsEmpty((operations_research::sat::PresolveContext *)((char *)this + 616));
  if (!IsEmpty)
  {
    v128 = operations_research::Domain::Max((operations_research::sat::PresolveContext *)((char *)this + 616), v126);
    operations_research::Domain::Domain(&v143, 0x8000000000000000, v128);
    operations_research::Domain::IntersectionWith(&v147, (const operations_research::Domain *)&v143, (unint64_t *)&v145);
    *((_BYTE *)this + 608) = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v145, (operations_research::sat::PresolveContext *)((char *)this + 616)) ^ 1;
    if ((v145 & 1) != 0)
      operator delete((void *)v146);
    if ((v143 & 1) != 0)
      operator delete(__p);
  }
  v129 = !IsEmpty;
  if ((v147 & 1) != 0)
    operator delete((void *)v148);
  return v129;
}

void sub_22DBC8EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *__p)
{
  uint64_t v30;

  if ((*(_BYTE *)(v30 - 112) & 1) != 0)
    operator delete(*(void **)(v30 - 104));
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PresolveContext::SubstituteVariableInObjective(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void **a5)
{
  void **v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void **v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __n128 v65;
  uint64_t *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  int8x16_t v70;
  void **v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81[3];
  uint64_t *v82;
  void *v83[2];
  BOOL v84;
  uint64_t *v85;
  __int128 __p;
  int v87[3];

  v87[0] = a2;
  if (*(_DWORD *)(a4 + 16))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1278);
    v72 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Check failed: equality.enforcement_literal().empty() ", 53);
    goto LABEL_77;
  }
  if (a2 < 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1279);
    v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: RefIsPositive(var_in_equality) ", 45);
    goto LABEL_77;
  }
  v5 = a5;
  v6 = a4;
  v8 = a1;
  if (a5)
    a5[1] = *a5;
  v9 = (uint64_t *)(a1 + 536);
  v10 = *(_QWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)(a1 + 536), v87);
  v85 = (uint64_t *)a3;
  LODWORD(v81[0]) = 0;
  if (!a3)
  {
    v82 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)&v85, (int)v81, "coeff_in_equality != 0");
    if (v82)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1287, &v82);
      google::LogMessage::stream((google::LogMessage *)&v85);
      goto LABEL_77;
    }
  }
  v11 = v10 % a3;
  v12 = v10 / a3;
  v85 = (uint64_t *)v11;
  LODWORD(v81[0]) = 0;
  if (v11)
  {
    v82 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)&v85, (int)v81, "coeff_in_objective % coeff_in_equality == 0");
    if (v82)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1288, &v82);
      google::LogMessage::stream((google::LogMessage *)&v85);
LABEL_77:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v85);
    }
  }
  v13 = 0;
  v14 = ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7));
  v79 = v14 >> 7;
  v80 = 0x101010101010101 * (v14 & 0x7F);
  v75 = v6;
  v76 = v8;
  v78 = (uint64_t *)(v8 + 536);
  while (*(_DWORD *)(v6 + 60) == 12)
  {
    v20 = *(_QWORD *)(v6 + 48);
    if (v13 >= *(int *)(v20 + 16))
      goto LABEL_59;
    LODWORD(v85) = 0;
    v21 = *(unsigned int *)(*(_QWORD *)(v20 + 24) + 4 * v13);
    LODWORD(v85) = v21;
    v22 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v13);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_20:
      if (v21 == v87[0])
        goto LABEL_21;
      goto LABEL_23;
    }
LABEL_22:
    v21 ^= 0xFFFFFFFFuLL;
    LODWORD(v85) = v21;
    v22 = -v22;
    if (v21 == v87[0])
      goto LABEL_21;
LABEL_23:
    v23 = 0;
    v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v21)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v21));
    v25 = *(_QWORD *)(v8 + 536);
    v26 = (v24 >> 7) ^ (v25 >> 12);
    v27 = *(_QWORD *)(v8 + 560);
    while (1)
    {
      v28 = v26 & v27;
      v29 = *(_QWORD *)(v25 + v28);
      v30 = ((v29 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v29 ^ (0x101010101010101
                                                                                          * (v24 & 0x7F))) & 0x8080808080808080;
      if (v30)
        break;
LABEL_28:
      if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
      {
        v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(v9, v24);
        v31 = *(_QWORD *)(v8 + 544);
        v33 = v31 + 16 * v32;
        *(_DWORD *)v33 = (_DWORD)v85;
        *(_QWORD *)(v33 + 8) = 0;
        goto LABEL_31;
      }
      v23 += 8;
      v26 = v23 + v28;
    }
    v31 = *(_QWORD *)(v8 + 544);
    while (1)
    {
      v32 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v27;
      if (*(_DWORD *)(v31 + 16 * v32) == v21)
        break;
      v30 &= v30 - 1;
      if (!v30)
        goto LABEL_28;
    }
LABEL_31:
    v34 = v31 + 16 * v32;
    v37 = *(_QWORD *)(v34 + 8);
    v36 = (uint64_t *)(v34 + 8);
    v35 = v37;
    if (!v5 || v35)
      goto LABEL_56;
    v39 = (char *)v5[1];
    v38 = (unint64_t)v5[2];
    if ((unint64_t)v39 >= v38)
    {
      v41 = v5;
      v42 = v12;
      v43 = v41;
      v44 = (char *)*v41;
      v45 = v39 - (_BYTE *)*v41;
      v46 = v45 >> 2;
      v47 = (v45 >> 2) + 1;
      if (v47 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v48 = v38 - (_QWORD)v44;
      if (v48 >> 1 > v47)
        v47 = v48 >> 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      v77 = v47;
      if (v47)
      {
        if (v47 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v49 = operator new(4 * v47);
        v50 = &v49[4 * v46];
        *v50 = (_DWORD)v85;
        v40 = (uint64_t)(v50 + 1);
        if (v39 != v44)
        {
LABEL_43:
          v51 = v39 - 4 - v44;
          v52 = v77;
          if (v51 < 0x2C)
          {
            v12 = v42;
            v5 = v43;
            goto LABEL_51;
          }
          v53 = v39 - &v49[v45];
          v12 = v42;
          v5 = v43;
          if (v53 < 0x20)
            goto LABEL_89;
          v54 = (v51 >> 2) + 1;
          v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          v56 = &v39[-v55];
          v50 = (_DWORD *)((char *)v50 - v55);
          v57 = &v49[4 * v46 - 16];
          v58 = v39 - 16;
          v59 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 8;
          }
          while (v59);
          v39 = v56;
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_89:
            do
            {
LABEL_51:
              v61 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *--v50 = v61;
            }
            while (v39 != v44);
          }
LABEL_52:
          *v5 = v50;
          v5[1] = (void *)v40;
          v5[2] = &v49[4 * v52];
          if (v44)
            operator delete(v44);
          v6 = v75;
          v8 = v76;
          goto LABEL_55;
        }
      }
      else
      {
        v49 = 0;
        v50 = (_DWORD *)(4 * v46);
        *(_DWORD *)(4 * v46) = (_DWORD)v85;
        v40 = 4 * v46 + 4;
        if (v39 != v44)
          goto LABEL_43;
      }
      v12 = v42;
      v5 = v43;
      v52 = v77;
      goto LABEL_52;
    }
    *(_DWORD *)v39 = (_DWORD)v85;
    v40 = (uint64_t)(v39 + 4);
LABEL_55:
    v9 = v78;
    v5[1] = (void *)v40;
    v35 = *v36;
LABEL_56:
    v62 = v35 - v22 * v12;
    *v36 = v62;
    if (v62)
    {
      v18 = 0;
      v63 = (_QWORD *)(*(_QWORD *)(v8 + 680) + 48 * (int)v85);
      v19 = v79 ^ (*v63 >> 12);
      v64 = v63[3];
      while (1)
      {
        v15 = v19 & v64;
        v16 = *(_QWORD *)(*v63 + v15);
        v17 = ((v16 ^ v80) - 0x101010101010101) & ~(v16 ^ v80) & 0x8080808080808080;
        if (v17)
          break;
LABEL_11:
        if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v63[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*(_QWORD *)(v8 + 680) + 48 * (int)v85), ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7)))) = -1;
          goto LABEL_21;
        }
        v18 += 8;
        v19 = v18 + v15;
      }
      while (*(_DWORD *)(v63[1] + 4 * ((v15 + (__clz(__rbit64(v17)) >> 3)) & v64)) != -1)
      {
        v17 &= v17 - 1;
        if (!v17)
          goto LABEL_11;
      }
LABEL_21:
      ++v13;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v9, (int *)&v85);
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(_QWORD *)(v8 + 680) + 48 * (int)v85), &operations_research::sat::kObjectiveConstraint);
      ++v13;
    }
  }
  if (v13 < (int)qword_25408AC60)
  {
    LODWORD(v85) = 0;
    v21 = *(unsigned int *)(qword_25408AC68 + 4 * v13);
    LODWORD(v85) = v21;
    v22 = *(_QWORD *)(qword_25408AC80 + 8 * v13);
    if ((v21 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_22;
  }
LABEL_59:
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v9, v87);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(_QWORD *)(v8 + 680) + 48 * v87[0]), &operations_research::sat::kObjectiveConstraint);
  if (*(_DWORD *)(v6 + 60) == 12)
    v66 = *(uint64_t **)(v6 + 48);
  else
    v66 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  operations_research::Domain::FromFlatSpanOfIntervals(v66[9], *((int *)v66 + 16), (unint64_t *)&v85, v65);
  v84 = 1;
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v85, &v84, v12, (unint64_t *)&v82);
  if ((v85 & 1) != 0)
    operator delete((void *)__p);
  v85 = v82;
  __p = *(_OWORD *)v83;
  if (!v84)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v82, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1322);
    v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: exact ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v82);
  }
  *(double *)(v8 + 640) = *(double *)(v8 + 640)
                        + (double)operations_research::Domain::Min((operations_research::Domain *)&v85, v67);
  v69 = operations_research::Domain::Min((operations_research::Domain *)&v85, v68);
  operations_research::Domain::Domain(v81, -v69);
  operations_research::Domain::AdditionWith((operations_research::Domain *)(v8 + 616), (const operations_research::Domain *)v81, &v82, v70);
  if ((uint64_t **)(v8 + 616) == &v82)
  {
    if ((v82 & 1) != 0)
      operator delete(v83[0]);
  }
  else
  {
    v71 = (void **)(v8 + 624);
    if ((*(_BYTE *)(v8 + 616) & 1) != 0)
      operator delete(*v71);
    *(_QWORD *)(v8 + 616) = v82;
    *(_OWORD *)v71 = *(_OWORD *)v83;
    v82 = 0;
  }
  if (((uint64_t)v81[0] & 1) != 0)
  {
    operator delete(v81[1]);
    *(_BYTE *)(v8 + 608) = 1;
    if ((v85 & 1) != 0)
LABEL_71:
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(v8 + 608) = 1;
    if ((v85 & 1) != 0)
      goto LABEL_71;
  }
}

void sub_22DBC9778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC9780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC9788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  if ((a17 & 1) != 0)
  {
    operator delete(__p);
    if ((a24 & 1) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_22DBC980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBC9814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PresolveContext::WriteObjectiveToProto(operations_research::sat::PresolveContext *this)
{
  char *v2;
  char *v3;
  int *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::Arena *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  operations_research::sat::PresolveContext *v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;

  if (operations_research::Domain::IsEmpty((operations_research::sat::PresolveContext *)((char *)this + 616)))
  {
    HIBYTE(v48) = 0;
    LOBYTE(v46) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)this, (uint64_t)&v46);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      return;
    v2 = v46;
    goto LABEL_53;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v3 = (char *)*((_QWORD *)this + 67);
  v4 = (int *)*((_QWORD *)this + 68);
  v5 = v3;
  if (*v3 <= -2)
  {
    do
    {
      v6 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v5 = (_QWORD *)((char *)v5 + v6);
      v4 += 4 * v6;
    }
    while (*(char *)v5 < -1);
  }
  v45 = this;
  v7 = &v3[*((_QWORD *)this + 70)];
  if (v5 != (_QWORD *)v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v4;
      v12 = *((_QWORD *)v4 + 1);
      if (v8 < v9)
      {
        *(_DWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        v8 += 16;
        v47 = v8;
        v13 = *((char *)v5 + 1);
        v5 = (_QWORD *)((char *)v5 + 1);
        v4 += 4;
        if (v13 <= -2)
          goto LABEL_26;
        goto LABEL_8;
      }
      v14 = (v8 - v10) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v9 - v10) >> 3 > v15)
        v15 = (v9 - v10) >> 3;
      if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        if (v16 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (char *)operator new(16 * v16);
        v18 = (uint64_t)&v17[16 * v14];
        *(_DWORD *)v18 = v11;
        *(_QWORD *)(v18 + 8) = v12;
        if (v8 == v10)
        {
LABEL_29:
          v20 = (char *)v18;
          v9 = &v17[16 * v16];
          v8 = (char *)(v18 + 16);
          v46 = (char *)v18;
          v48 = v9;
          if (v10)
            goto LABEL_24;
          goto LABEL_25;
        }
      }
      else
      {
        v17 = 0;
        v18 = 16 * v14;
        *(_DWORD *)v18 = v11;
        *(_QWORD *)(v18 + 8) = v12;
        if (v8 == v10)
          goto LABEL_29;
      }
      v19 = v18;
      do
      {
        v20 = (char *)(v19 - 16);
        *(_OWORD *)(v19 - 16) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v19 -= 16;
      }
      while (v8 != v10);
      v9 = &v17[16 * v16];
      v8 = (char *)(v18 + 16);
      v46 = v20;
      v48 = v9;
      if (v10)
LABEL_24:
        operator delete(v10);
LABEL_25:
      v10 = v20;
      v47 = v8;
      v21 = *((char *)v5 + 1);
      v5 = (_QWORD *)((char *)v5 + 1);
      v4 += 4;
      if (v21 <= -2)
      {
        do
        {
LABEL_26:
          v22 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v5 = (_QWORD *)((char *)v5 + v22);
          v4 += 4 * v22;
        }
        while (*(char *)v5 < -1);
      }
LABEL_8:
      if (v5 == (_QWORD *)v7)
        goto LABEL_32;
    }
  }
  v8 = 0;
  v10 = 0;
LABEL_32:
  v23 = 126 - 2 * __clz((v8 - v10) >> 4);
  if (v8 == v10)
    v24 = 0;
  else
    v24 = v23;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>((uint64_t)v10, (int *)v8, (uint64_t)&v49, v24, 1);
  v25 = *((_QWORD *)v45 + 6);
  v26 = *(_QWORD *)(v25 + 120);
  if (!v26)
  {
    v27 = *(_QWORD *)(v25 + 8);
    v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
    if ((v27 & 1) != 0)
      v28 = *(google::protobuf::Arena **)v28;
    v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v28);
    *(_QWORD *)(v25 + 120) = v26;
  }
  v29 = *((_OWORD *)v45 + 40);
  *(_DWORD *)(v26 + 64) = 0;
  *(_OWORD *)(v26 + 88) = v29;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), *((_QWORD *)v45 + 77) >> 1);
  v30 = *((_QWORD *)v45 + 77);
  if ((v30 & 1) != 0)
    v31 = (uint64_t *)*((_QWORD *)v45 + 78);
  else
    v31 = (uint64_t *)((char *)v45 + 624);
  if (v30 >= 2)
  {
    v38 = &v31[2 * (v30 >> 1)];
    v39 = *(_DWORD *)(v26 + 64);
    do
    {
      v40 = *v31;
      v41 = *(_DWORD *)(v26 + 68);
      v42 = v39 + 1;
      if (v39 == v41)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v39 + 1);
        v41 = *(_DWORD *)(v26 + 68);
      }
      v43 = *(_QWORD *)(v26 + 72);
      *(_QWORD *)(v43 + 8 * v39) = v40;
      *(_DWORD *)(v26 + 64) = v42;
      v44 = v31[1];
      v39 += 2;
      if (v42 == v41)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v39);
        v43 = *(_QWORD *)(v26 + 72);
      }
      *(_QWORD *)(v43 + 8 * v42) = v44;
      *(_DWORD *)(v26 + 64) = v39;
      v31 += 2;
    }
    while (v31 != v38);
  }
  *(_DWORD *)(v26 + 16) = 0;
  *(_DWORD *)(v26 + 40) = 0;
  v32 = v46;
  v33 = v47;
  if (v46 == v47)
  {
    if (!v46)
      return;
    goto LABEL_52;
  }
  do
  {
    v34 = *(_DWORD *)v32;
    v35 = *(unsigned int *)(v26 + 16);
    if ((_DWORD)v35 == *(_DWORD *)(v26 + 20))
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v26 + 16), v35 + 1);
    *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v35) = v34;
    *(_DWORD *)(v26 + 16) = v35 + 1;
    v36 = *((_QWORD *)v32 + 1);
    v37 = *(unsigned int *)(v26 + 40);
    if ((_DWORD)v37 == *(_DWORD *)(v26 + 44))
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 40), v37 + 1);
    *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * v37) = v36;
    *(_DWORD *)(v26 + 40) = v37 + 1;
    v32 += 16;
  }
  while (v32 != v33);
  v32 = v46;
  if (v46)
  {
LABEL_52:
    v2 = v32;
LABEL_53:
    operator delete(v2);
  }
}

void sub_22DBC9C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::AffineRelation::CompressPath(operations_research::AffineRelation *this, int a2)
{
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;

  v2 = (char *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 14) = v2;
  v32 = (void **)((char *)this + 104);
  v3 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v3 + 4 * a2) == a2)
    return;
  v4 = a2;
  v6 = a2;
  do
  {
    while (1)
    {
      v7 = *((_QWORD *)this + 15);
      if ((unint64_t)v2 >= v7)
        break;
      *(_DWORD *)v2 = v4;
      v2 += 4;
      *((_QWORD *)this + 14) = v2;
      v4 = *(_DWORD *)(v3 + 4 * v6);
      v6 = v4;
      if (v4 == *(_DWORD *)(v3 + 4 * v4))
        goto LABEL_31;
    }
    v8 = (char *)*v32;
    v9 = v2 - (_BYTE *)*v32;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
      v15 = &v14[4 * v10];
      *v15 = v4;
      v16 = (uint64_t)(v15 + 1);
      if (v2 == v8)
        goto LABEL_28;
    }
    else
    {
      v14 = 0;
      v15 = (_DWORD *)(4 * v10);
      *(_DWORD *)(4 * v10) = v4;
      v16 = 4 * v10 + 4;
      if (v2 == v8)
        goto LABEL_28;
    }
    v17 = v2 - 4 - v8;
    if (v17 < 0xBC)
    {
      v18 = v2;
      goto LABEL_27;
    }
    if (&v14[v9 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v9 - 4])
    {
      v18 = v2;
      goto LABEL_27;
    }
    if (&v2[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v2 - 4)
    {
      v18 = v2;
      do
      {
LABEL_27:
        v25 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v15 = v25;
      }
      while (v18 != v8);
      goto LABEL_28;
    }
    if ((unint64_t)(v2 - v14 - v9) < 0x20)
    {
      v18 = v2;
      goto LABEL_27;
    }
    v19 = (v17 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v18 = &v2[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v21 = &v14[4 * v10 - 16];
    v22 = v2 - 16;
    v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_27;
LABEL_28:
    *((_QWORD *)this + 13) = v15;
    *((_QWORD *)this + 14) = v16;
    *((_QWORD *)this + 15) = &v14[4 * v13];
    if (v8)
    {
      operator delete(v8);
      v3 = *((_QWORD *)this + 1);
    }
    v2 = (char *)v16;
    *((_QWORD *)this + 14) = v16;
    v4 = *(_DWORD *)(v3 + 4 * v6);
    v6 = v4;
  }
  while (v4 != *(_DWORD *)(v3 + 4 * v4));
LABEL_31:
  v26 = (char *)*v32;
  if (v2 != *v32)
  {
    v27 = *((_QWORD *)this + 4);
    v28 = *((_QWORD *)this + 7);
    do
    {
      v29 = *((int *)v2 - 1);
      v2 -= 4;
      v30 = 8 * v29;
      v31 = 8 * *(int *)(v3 + 4 * v29);
      *(_QWORD *)(v28 + v30) = *(_QWORD *)(v28 + 8 * v29) + *(_QWORD *)(v28 + v31) * *(_QWORD *)(v27 + 8 * v29);
      *(_QWORD *)(v27 + v30) = *(_QWORD *)(v27 + 8 * v29) * *(_QWORD *)(v27 + v31);
      *(_DWORD *)(v3 + 4 * v29) = v4;
    }
    while (v2 != v26);
  }
}

void operations_research::AffineRelation::IncreaseSizeOfMemberVectors(operations_research::AffineRelation *this, int a2)
{
  void **v3;
  char *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::vector<int>::value_type __x[2];

  v4 = (char *)*((_QWORD *)this + 2);
  v3 = (void **)((char *)this + 8);
  v5 = (uint64_t)&v4[-*((_QWORD *)this + 1)];
  if (a2 <= (unint64_t)(v5 >> 2))
    return;
  v34 = a2;
  v7 = (unint64_t)v5 >> 2;
  if ((int)((unint64_t)v5 >> 2) < a2)
  {
    while (1)
    {
      v12 = *((_QWORD *)this + 3);
      if ((unint64_t)v4 >= v12)
        break;
      *(_DWORD *)v4 = v7;
      v11 = (uint64_t)(v4 + 4);
LABEL_6:
      *((_QWORD *)this + 2) = v11;
      LODWORD(v7) = v7 + 1;
      v4 = (char *)v11;
      if ((_DWORD)v7 == a2)
        goto LABEL_3;
    }
    v13 = (char *)*v3;
    v14 = v4 - (_BYTE *)*v3;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *v20 = v7;
      v11 = (uint64_t)(v20 + 1);
      if (v4 == v13)
        goto LABEL_31;
    }
    else
    {
      v19 = 0;
      v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v7;
      v11 = 4 * v15 + 4;
      if (v4 == v13)
        goto LABEL_31;
    }
    v21 = v4 - 4 - v13;
    if (v21 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        v22 = v4;
      }
      else if (&v4[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
      {
        v22 = v4;
      }
      else if ((unint64_t)(v4 - v19 - v14) >= 0x20)
      {
        v23 = (v21 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v4[-v24];
        v20 = (_DWORD *)((char *)v20 - v24);
        v25 = &v19[4 * v15 - 16];
        v26 = v4 - 16;
        v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_31:
          *((_QWORD *)this + 1) = v20;
          *((_QWORD *)this + 2) = v11;
          *((_QWORD *)this + 3) = &v19[4 * v18];
          if (v13)
            operator delete(v13);
          goto LABEL_6;
        }
      }
      else
      {
        v22 = v4;
      }
    }
    else
    {
      v22 = v4;
    }
    do
    {
      v29 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--v20 = v29;
    }
    while (v22 != v13);
    goto LABEL_31;
  }
LABEL_3:
  v8 = *((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  *(_QWORD *)__x = 0;
  v10 = (v9 - v8) >> 3;
  if (v34 <= v10)
  {
    if (v34 < v10)
      *((_QWORD *)this + 8) = v8 + 8 * v34;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 56, v34 - v10, (uint64_t *)__x);
  }
  *(_QWORD *)__x = 1;
  v30 = *((_QWORD *)this + 4);
  v31 = (*((_QWORD *)this + 5) - v30) >> 3;
  if (v34 <= v31)
  {
    if (v34 < v31)
      *((_QWORD *)this + 5) = v30 + 8 * v34;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 32, v34 - v31, (uint64_t *)__x);
  }
  __x[0] = 1;
  v32 = *((_QWORD *)this + 10);
  v33 = (*((_QWORD *)this + 11) - v32) >> 2;
  if (v34 <= v33)
  {
    if (v34 < v33)
      *((_QWORD *)this + 11) = v32 + 4 * v34;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v34 - v33, __x);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::find_or_prepare_insert<std::string>(uint64_t *a1, unsigned __int8 *a2)
{
  const void **v2;
  unint64_t v4;
  unint64_t v5;
  absl::lts_2020_02_25::hash_internal::CityHashState *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  size_t v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  const void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = (const void **)a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v5 = v4;
  }
  v6 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)a2, v5);
  v7 = 0;
  v8 = ((((unint64_t)v6 + v5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((_QWORD)v6 + v5));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = 0x101010101010101 * (v8 & 0x7F);
  v12 = *((_BYTE *)v2 + 23);
  if (v12 >= 0)
    v13 = *((unsigned __int8 *)v2 + 23);
  else
    v13 = (size_t)v2[1];
  v14 = a1[3];
  if (v12 >= 0)
    v15 = v2;
  else
    v15 = *v2;
  while (1)
  {
    v16 = v10 & v14;
    v17 = *(_QWORD *)(v9 + (v10 & v14));
    v18 = ((v17 ^ v11) - 0x101010101010101) & ~(v17 ^ v11) & 0x8080808080808080;
    if (v18)
      break;
LABEL_20:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::prepare_insert(a1, v8);
    v7 += 8;
    v10 = v7 + v16;
  }
  v19 = a1[1];
  v27 = v11;
  v28 = v7;
  v26 = v19;
  while (1)
  {
    v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    v21 = v19 + 32 * v20;
    v22 = *(unsigned __int8 *)(v21 + 23);
    v23 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(v21 + 8);
    if (v22 == v13)
    {
      v24 = v23 >= 0 ? (const void *)v21 : *(const void **)v21;
      if (!memcmp(v24, v15, v13))
        return v20;
    }
    v18 &= v18 - 1;
    v11 = v27;
    v7 = v28;
    v19 = v26;
    if (!v18)
      goto LABEL_20;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  absl::lts_2020_02_25::hash_internal *v17;
  unint64_t v18;
  absl::lts_2020_02_25::hash_internal::CityHashState *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  char *v30;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v30 = a1[4];
    if (!v30)
      return;
LABEL_27:
    *((_QWORD *)v30 + 4) = v14 >> 3;
    *((_QWORD *)v30 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v15 = &v5[32 * (_QWORD)v13];
      v16 = v15[23];
      if (v16 >= 0)
        v17 = (absl::lts_2020_02_25::hash_internal *)&v5[32 * (_QWORD)v13];
      else
        v17 = *(absl::lts_2020_02_25::hash_internal **)v15;
      if (v16 >= 0)
        v18 = v15[23];
      else
        v18 = *((_QWORD *)v15 + 1);
      v19 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v17, v18);
      v20 = ((((unint64_t)v19 + v18) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((_QWORD)v19 + v18));
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v25 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          v25 += 8;
          v23 = (v25 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v26 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v25;
      v27 = v20 & 0x7F;
      v21[v26] = v27;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v26 - 8) & (unint64_t)a1[3])] = v27;
      v28 = (uint64_t)&a1[1][32 * v26];
      v29 = *(_OWORD *)v15;
      *(_QWORD *)(v28 + 16) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v28 = v29;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v28 + 24) = *((_DWORD *)v15 + 6);
      if (v15[23] < 0)
        operator delete(*(void **)v15);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v30 = a1[4];
  if (v30)
    goto LABEL_27;
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  absl::lts_2020_02_25::hash_internal::CityHashState *v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  absl::lts_2020_02_25::hash_internal *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;

  v1 = result;
  v2 = *(int8x16_t **)result;
  v3 = *((_QWORD *)result + 3);
  v4 = *(_QWORD *)result + v3;
  if (v4 + 1 != *(_QWORD *)result)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)result;
    if (v5 < 0x18)
      goto LABEL_35;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  if (!*((_QWORD *)result + 3))
  {
    v15 = 0;
    *((_QWORD *)result + 5) = -*((_QWORD *)result + 2);
    v46 = *((_QWORD *)result + 4);
    if (!v46)
      return result;
LABEL_32:
    *(_QWORD *)(v46 + 32) = v15 >> 3;
    *(_QWORD *)(v46 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)v1 + v14) == 254)
    {
      v19 = *((_QWORD *)v1 + 1) + 32 * v14;
      v20 = *(char *)(v19 + 23);
      if (v20 >= 0)
        v21 = (absl::lts_2020_02_25::hash_internal *)(*((_QWORD *)v1 + 1) + 32 * v14);
      else
        v21 = *(absl::lts_2020_02_25::hash_internal **)v19;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v19 + 23);
      else
        v22 = *(_QWORD *)(v19 + 8);
      result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v21, v22);
      v23 = ((((unint64_t)result + v22) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((_QWORD)result + v22));
      v24 = *(_QWORD *)v1;
      v25 = *((_QWORD *)v1 + 3);
      v26 = ((v23 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v25;
      v27 = 0;
      v28 = *(_QWORD *)(*(_QWORD *)v1 + v26) & (~*(_QWORD *)(*(_QWORD *)v1 + v26) << 7) & 0x8080808080808080;
      if (v28)
      {
        v16 = ((v23 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v25;
      }
      else
      {
        v16 = ((v23 >> 7) ^ (*(_QWORD *)v1 >> 12)) & v25;
        do
        {
          v27 += 8;
          v16 = (v27 + v16) & v25;
          v28 = *(_QWORD *)(v24 + v16) & (~*(_QWORD *)(v24 + v16) << 7) & 0x8080808080808080;
        }
        while (!v28);
      }
      v17 = (v16 + (__clz(__rbit64(v28)) >> 3)) & v25;
      v15 += v27;
      if ((((v17 - v26) ^ (v14 - v26)) & v25) > 7)
      {
        v29 = *(unsigned __int8 *)(v24 + v17);
        v30 = v23 & 0x7F;
        *(_BYTE *)(v24 + v17) = v30;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v17 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v30;
        v31 = *((_QWORD *)v1 + 1);
        if (v29 == 128)
        {
          v32 = v31 + 32 * v17;
          v33 = (__int128 *)(v31 + 32 * v14);
          v34 = *v33;
          *(_QWORD *)(v32 + 16) = *((_QWORD *)v33 + 2);
          *(_OWORD *)v32 = v34;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = 0;
          *(_QWORD *)v33 = 0;
          *(_DWORD *)(v32 + 24) = *((_DWORD *)v33 + 6);
          *(_BYTE *)(*(_QWORD *)v1 + v14) = 0x80;
          *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = 0x80;
        }
        else
        {
          v35 = (uint64_t *)(v31 + 32 * v14);
          v36 = *v35;
          *(_QWORD *)&v47 = v35[1];
          *(_QWORD *)((char *)&v47 + 7) = *(uint64_t *)((char *)v35 + 15);
          v37 = *((_BYTE *)v35 + 23);
          v35[1] = 0;
          v35[2] = 0;
          *v35 = 0;
          LODWORD(v35) = *((_DWORD *)v35 + 6);
          v38 = *((_QWORD *)v1 + 1);
          v39 = 32 * v17;
          v40 = v38 + v39;
          v41 = *(_DWORD *)(v38 + v39 + 24);
          v42 = v38 + 32 * v14;
          v43 = *(_QWORD *)(v38 + v39 + 16);
          *(_OWORD *)v42 = *(_OWORD *)v40;
          *(_QWORD *)(v42 + 16) = v43;
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = 0;
          *(_QWORD *)v40 = 0;
          *(_DWORD *)(v42 + 24) = v41;
          v44 = *((_QWORD *)v1 + 1) + v39;
          *(_QWORD *)v44 = v36;
          *(_QWORD *)(v44 + 8) = v47;
          *(_QWORD *)(v44 + 15) = *(_QWORD *)((char *)&v47 + 7);
          *(_BYTE *)(v44 + 23) = v37;
          *(_DWORD *)(v44 + 24) = (_DWORD)v35;
          --v14;
        }
      }
      else
      {
        v18 = v23 & 0x7F;
        *(_BYTE *)(v24 + v14) = v18;
        *(_BYTE *)((*((_QWORD *)v1 + 3) & (v14 - 8)) + (*((_QWORD *)v1 + 3) & 7) + *(_QWORD *)v1 + 1) = v18;
      }
    }
    ++v14;
  }
  while (v14 != *((_QWORD *)v1 + 3));
  v45 = v14 - (v14 >> 3);
  if (v14 == 7)
    v45 = 6;
  *((_QWORD *)v1 + 5) = v45 - *((_QWORD *)v1 + 2);
  v46 = *((_QWORD *)v1 + 4);
  if (v46)
    goto LABEL_32;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[8 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t std::vector<operations_research::Domain>::__emplace_back_slow_path<operations_research::Domain>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void **v14;
  char v15;
  uint64_t v17;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v17 = (uint64_t)&v9[24 * v5];
  v10 = &v9[24 * v8];
  *(_QWORD *)v17 = *(_QWORD *)a2;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v17, v17);
  v12 = (void **)*a1;
  v11 = (void **)a1[1];
  *a1 = v13;
  a1[1] = v17 + 24;
  a1[2] = (uint64_t)v10;
  if (v11 != v12)
  {
    v14 = v11;
    do
    {
      v15 = *((_BYTE *)v14 - 24);
      v14 -= 3;
      if ((v15 & 1) != 0)
        operator delete(*(v11 - 2));
      v11 = v14;
    }
    while (v14 != v12);
  }
  if (v12)
    operator delete(v12);
  return v17 + 24;
}

void sub_22DBCB2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[48 * a2];
      do
      {
        *(_QWORD *)v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v4 + 8) = 0uLL;
        *(_OWORD *)(v4 + 24) = 0uLL;
        *((_QWORD *)v4 + 5) = 0;
        v4 += 48;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(48 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[48 * v6];
    v13 = &v10[48 * v9];
    v14 = &v12[48 * a2];
    v15 = v12;
    do
    {
      *(_QWORD *)v15 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_OWORD *)(v15 + 24) = 0uLL;
      *((_QWORD *)v15 + 5) = 0;
      v15 += 48;
    }
    while (v15 != v14);
    v16 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (v17)
LABEL_29:
        operator delete(v17);
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v17 - 6);
        v17 -= 48;
        *(_QWORD *)v17 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((_QWORD *)v12 - 6) = v18;
        v12 -= 48;
        v19 = *((_QWORD *)v17 + 1);
        v20 = *((_QWORD *)v17 + 2);
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v12 + 1) = v19;
        *((_QWORD *)v12 + 2) = v20;
        v21 = *((_QWORD *)v17 + 3);
        v22 = *((_QWORD *)v17 + 4);
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v12 + 3) = v21;
        *((_QWORD *)v12 + 4) = v22;
        *((_QWORD *)v17 + 4) = 0;
        *((_QWORD *)v12 + 5) = *((_QWORD *)v17 + 5);
        *((_QWORD *)v17 + 5) = 0;
      }
      while (v17 != v16);
      v23 = *a1;
      v17 = a1[1];
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (v17 != v23)
      {
        do
        {
          if (*((_QWORD *)v17 - 3))
          {
            operator delete(*((void **)v17 - 6));
            *((_QWORD *)v17 - 1) = 0;
            *((_QWORD *)v17 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            *((_QWORD *)v17 - 5) = 0;
            *((_QWORD *)v17 - 4) = 0;
            *((_QWORD *)v17 - 3) = 0;
          }
          v24 = (_QWORD *)*((_QWORD *)v17 - 2);
          if (v24)
            absl::lts_2020_02_25::container_internal::UnsampleSlow(v24);
          v17 -= 48;
        }
        while (v17 != v23);
        v17 = v23;
      }
      if (v17)
        goto LABEL_29;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 56 * result;
      *(_DWORD *)v18 = *a2;
      *(_QWORD *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_QWORD *)(v18 + 48) = 0;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 56 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v2 = (unint64_t)a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v32 = v4;
  if (!v4)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v31 = a1[4];
    if (!v31)
      return;
LABEL_21:
    *((_QWORD *)v31 + 4) = v14 >> 3;
    *((_QWORD *)v31 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v5] & 0x80000000) == 0)
    {
      v16 = &v32[56 * (_QWORD)v13];
      v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      v18 = *a1;
      v19 = a1[3];
      v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      v21 = 0;
      for (i = *(_QWORD *)&(*a1)[v20] & (~*(_QWORD *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            i = *(_QWORD *)&v18[v20] & (~*(_QWORD *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        v20 = (v21 + v20) & (unint64_t)v19;
      }
      v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)v25 = *(_DWORD *)v16;
      v26 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v25 + 8) = v26;
      v27 = *((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 2) = 0;
      v28 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v16 + 3) = 0;
      *(_QWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 24) = v28;
      v29 = *((_QWORD *)v16 + 4);
      v30 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 4) = 0;
      *(_QWORD *)(v25 + 32) = v29;
      *(_QWORD *)(v25 + 40) = v30;
      *((_QWORD *)v16 + 5) = 0;
      *(_QWORD *)(v25 + 48) = *((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 6) = 0;
      if (*((_QWORD *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_QWORD *)v16 + 2) = 0;
      }
      v14 += v21;
      v15 = (_QWORD *)*((_QWORD *)v16 + 5);
      if (v15)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  v31 = a1[4];
  if (v31)
    goto LABEL_21;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];

  v29[7] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 + v3;
  if (v4 + 1 != *(_QWORD *)a1)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)a1;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 40) = -*(_QWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 32);
    if (!v28)
      return;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v15) == 254)
    {
      v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(a1 + 8) + 56 * v15);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      v24 = *(uint64_t *)((_BYTE *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v24 = *(uint64_t *)((_BYTE *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v19 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
          *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v15, *(_QWORD *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    v14 = *(_QWORD *)(a1 + 24);
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  *(_QWORD *)(a1 + 40) = v27 - *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  if (v28)
    goto LABEL_26;
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(a2 + 8) = v4;
  v6 = (_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  if (*(_QWORD *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
  }
  v10 = *(_QWORD **)(a3 + 40);
  if (v10)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::erase(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (*(_QWORD *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  v6 = *(_QWORD **)(a3 + 40);
  if (v6)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
  v7 = a1[3];
  --a1[2];
  v8 = (char *)a2 - *a1;
  v9 = *(_QWORD *)(*a1 + ((unint64_t)(v8 - 8) & v7));
  v10 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  v11 = v9 & (~v9 << 6) & 0x8080808080808080;
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
  {
    v16 = 0;
    v13 = -2;
  }
  else
  {
    v14 = (__clz(v11) >> 3) + (__clz(__rbit64(v10)) >> 3);
    v15 = v14 >= 8;
    v16 = v14 < 8;
    if (v15)
      v13 = -2;
    else
      v13 = 0x80;
  }
  *(_BYTE *)a2 = v13;
  *(_BYTE *)((a1[3] & (unint64_t)(v8 - 8)) + (a1[3] & 7) + *a1 + 1) = v13;
  v17 = a1[4];
  a1[5] += v16;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 - 1, v18));
    v20 = (unint64_t *)(v17 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 56 * result;
      *(_DWORD *)v18 = *a2;
      *(_QWORD *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_QWORD *)(v18 + 48) = 0;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 56 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v30 = a1[4];
    if (!v30)
      return;
LABEL_21:
    *((_QWORD *)v30 + 4) = v14 >> 3;
    *((_QWORD *)v30 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v24 = &v5[56 * (_QWORD)v13];
      v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v24)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v24));
      v26 = *a1;
      v27 = a1[3];
      v28 = ((v25 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v27;
      v29 = *(_QWORD *)&(*a1)[v28] & (~*(_QWORD *)&(*a1)[v28] << 7) & 0x8080808080808080;
      if (v29)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v28 = (v15 + v28) & (unint64_t)v27;
          v29 = *(_QWORD *)&v26[v28] & (~*(_QWORD *)&v26[v28] << 7) & 0x8080808080808080;
        }
        while (!v29);
      }
      v16 = (v28 + (__clz(__rbit64(v29)) >> 3)) & (unint64_t)v27;
      v14 += v15;
      v17 = v25 & 0x7F;
      v26[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = (uint64_t)&a1[1][56 * v16];
      v19 = *((_QWORD *)v24 + 1);
      *(_DWORD *)v18 = *(_DWORD *)v24;
      *((_QWORD *)v24 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = *((_QWORD *)v24 + 2);
      v21 = *((_QWORD *)v24 + 3);
      *((_QWORD *)v24 + 2) = 0;
      *((_QWORD *)v24 + 3) = 0;
      *(_QWORD *)(v18 + 16) = v20;
      *(_QWORD *)(v18 + 24) = v21;
      v22 = *((_QWORD *)v24 + 4);
      v23 = *((_QWORD *)v24 + 5);
      *((_QWORD *)v24 + 4) = 0;
      *(_QWORD *)(v18 + 32) = v22;
      *(_QWORD *)(v18 + 40) = v23;
      *((_QWORD *)v24 + 5) = 0;
      *(_QWORD *)(v18 + 48) = *((_QWORD *)v24 + 6);
      *((_QWORD *)v24 + 6) = 0;
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)(v24 + 8));
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v30 = a1[4];
  if (v30)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t *v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[8];

  v1 = (unint64_t *)result;
  v29[7] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)result;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)result + v3;
  if (v4 + 1 != *(_QWORD *)result)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)result;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(result + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v28 = *(_QWORD *)(result + 32);
    if (!v28)
      return result;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return result;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *v1;
    if (*(unsigned __int8 *)(*v1 + v15) == 254)
    {
      v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)(v1[1] + 56 * v15);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
      v24 = *(_QWORD *)(v20 + v23) & (~*(_QWORD *)(v20 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v24 = *(_QWORD *)(v20 + v18) & (~*(_QWORD *)(v20 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        v25 = *(unsigned __int8 *)(v20 + v19);
        *(_BYTE *)(v20 + v19) = v22 & 0x7F;
        *(_BYTE *)((v1[3] & (v19 - 8)) + (v1[3] & 7) + *v1 + 1) = v22 & 0x7F;
        v26 = v1[1];
        if (v25 == 128)
        {
          result = absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v26 + 56 * v19, v26 + 56 * v15);
          *(_BYTE *)(*v1 + v15) = 0x80;
          *(_BYTE *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v1[1] + 56 * v15, v1[1] + 56 * v19);
          result = absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v1[1] + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        *(_BYTE *)(v20 + v15) = v22 & 0x7F;
        *(_BYTE *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    v14 = v1[3];
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  v1[5] = v27 - v1[2];
  v28 = v1[4];
  if (v28)
    goto LABEL_26;
  return result;
}

uint64_t absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(a3 + 8);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 56 * result;
      *(_QWORD *)v18 = *a2;
      *(_QWORD *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_QWORD *)(v18 + 48) = 0;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_QWORD *)(v15 + 56 * result) == v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 56 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v2 = (unint64_t)a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v33 = v4;
  if (!v4)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v32 = a1[4];
    if (!v32)
      return;
LABEL_21:
    *((_QWORD *)v32 + 4) = v14 >> 3;
    *((_QWORD *)v32 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v5] & 0x80000000) == 0)
    {
      v16 = (uint64_t *)&v33[56 * (_QWORD)v13];
      v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *v16));
      v18 = *a1;
      v19 = a1[3];
      v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      v21 = 0;
      for (i = *(_QWORD *)&(*a1)[v20] & (~*(_QWORD *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            i = *(_QWORD *)&v18[v20] & (~*(_QWORD *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        v20 = (v21 + v20) & (unint64_t)v19;
      }
      v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      v25 = &a1[1][56 * v23];
      v26 = *v16;
      v27 = v16[1];
      v16[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)v25 = v26;
      *((_QWORD *)v25 + 1) = v27;
      v28 = v16[2];
      v16[2] = 0;
      v29 = v16[3];
      v16[3] = 0;
      *((_QWORD *)v25 + 2) = v28;
      *((_QWORD *)v25 + 3) = v29;
      v30 = v16[4];
      v31 = v16[5];
      v16[4] = 0;
      *((_QWORD *)v25 + 4) = v30;
      *((_QWORD *)v25 + 5) = v31;
      v16[5] = 0;
      *((_QWORD *)v25 + 6) = v16[6];
      v16[6] = 0;
      if (v16[4])
      {
        operator delete((void *)v16[1]);
        v16[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v16[6] = 0;
        v16[3] = 0;
        v16[4] = 0;
        v16[2] = 0;
      }
      v14 += v21;
      v15 = (_QWORD *)v16[5];
      if (v15)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  v32 = a1[4];
  if (v32)
    goto LABEL_21;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[8];

  v29[7] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 + v3;
  if (v4 + 1 != *(_QWORD *)a1)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)a1;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 40) = -*(_QWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 32);
    if (!v28)
      return;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v15) == 254)
    {
      v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56 * v15);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      v24 = *(uint64_t *)((_BYTE *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v24 = *(uint64_t *)((_BYTE *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v19 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (_QWORD *)(v26 + 56 * v19), (uint64_t *)(v26 + 56 * v15));
          *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
          *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, v29, (uint64_t *)(v26 + 56 * v15));
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (_QWORD *)(*(_QWORD *)(a1 + 8) + 56 * v15), (uint64_t *)(*(_QWORD *)(a1 + 8) + 56 * v19));
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (_QWORD *)(*(_QWORD *)(a1 + 8) + 56 * v19), v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    v14 = *(_QWORD *)(a1 + 24);
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  *(_QWORD *)(a1 + 40) = v27 - *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  if (v28)
    goto LABEL_26;
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a3;
  v5 = a3[1];
  a3[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *a2 = v4;
  a2[1] = v5;
  v7 = a3 + 2;
  v6 = a3[2];
  a3[2] = 0;
  v8 = a3[3];
  a3[3] = 0;
  a2[2] = v6;
  a2[3] = v8;
  v9 = a3[4];
  v10 = a3[5];
  a3[4] = 0;
  a2[4] = v9;
  a2[5] = v10;
  a3[5] = 0;
  a2[6] = a3[6];
  a3[6] = 0;
  if (a3[4])
  {
    operator delete((void *)a3[1]);
    a3[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a3[6] = 0;
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
  }
  v11 = (_QWORD *)a3[5];
  if (v11)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v11);
}

void operations_research::sat::DomainDeductions::AddDeduction(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 *v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  const operations_research::Domain *v40;
  void **v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  std::vector<int>::value_type __x[2];
  _BYTE __p[24];
  uint64_t *v64;

  __x[0] = a3;
  LODWORD(v64) = 0;
  if ((a3 & 0x80000000) != 0)
  {
    v64 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__x, (int)&v64, "var >= 0");
    if (v64)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 23, &v64);
      google::LogMessage::stream((google::LogMessage *)__x);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
    }
  }
  v8 = (2 * a2) ^ (a2 >> 31);
  if ((int)v8 >= *((_DWORD *)a1 + 6))
  {
    v9 = (int)v8 + 1;
    v10 = v9 & ~((int)v9 >> 31);
    *((_DWORD *)a1 + 6) = v10;
    v11 = a1[4];
    v12 = a1[5];
    v13 = (v10 + 63) >> 6;
    *(_QWORD *)__x = 0;
    v14 = (v12 - v11) >> 3;
    if (v13 <= v14)
    {
      if (v13 < v14)
        a1[5] = v11 + 8 * v13;
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 4), v13 - v14, (uint64_t *)__x);
    }
    v16 = a1[13];
    v15 = a1[14];
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    if (v9 <= v17)
    {
      if (v9 < v17)
      {
        v18 = v16 + 24 * v9;
        if (v15 != v18)
        {
          v19 = a1[14];
          do
          {
            v21 = *(void **)(v19 - 24);
            v19 -= 24;
            v20 = v21;
            if (v21)
            {
              *(_QWORD *)(v15 - 16) = v20;
              operator delete(v20);
            }
            v15 = v19;
          }
          while (v19 != v18);
        }
        a1[14] = v18;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)(a1 + 13), v9 - v17);
    }
  }
  v22 = *a1;
  v23 = (a1[1] - *a1) >> 2;
  if (v23 <= (int)a3)
  {
    v24 = (int)a3 + 1;
    __x[0] = 0;
    if (v24 <= v23)
    {
      if (v24 < v23)
        a1[1] = v22 + 4 * v24;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)a1, v24 - v23, __x);
    }
  }
  *(_QWORD *)__x = v8 | (a3 << 32);
  *(_QWORD *)__p = 0;
  v25 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) == 0)
  {
    *(_QWORD *)__p = *(_QWORD *)a4;
    *(_OWORD *)&__p[8] = *(_OWORD *)(a4 + 8);
    goto LABEL_32;
  }
  v26 = *(__int128 **)(a4 + 8);
  v27 = v25 >> 1;
  if (v25 >= 4)
  {
    if (v25 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v28 = operator new(16 * v27);
    *(_QWORD *)&__p[8] = v28;
    *(_QWORD *)&__p[16] = v25 >> 1;
    *(_QWORD *)__p = 1;
    goto LABEL_29;
  }
  if (v25 >= 2)
  {
    v28 = &__p[8];
    do
    {
LABEL_29:
      v30 = *v26++;
      *v28++ = v30;
      --v27;
    }
    while (v27);
    v29 = *(_QWORD *)__p;
    goto LABEL_31;
  }
  v29 = 0;
LABEL_31:
  *(_QWORD *)__p = v29 + (v25 & 0xFFFFFFFFFFFFFFFELL);
LABEL_32:
  v31 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>(a1 + 16, __x);
  v32 = v31;
  if (v33)
  {
    v34 = a1[17] + 32 * v31;
    *(_QWORD *)v34 = *(_QWORD *)__x;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)__p;
    *(_OWORD *)(v34 + 16) = *(_OWORD *)&__p[8];
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 3, v8);
    v35 = a1[13] + 24 * (int)v8;
    v36 = (uint64_t *)(v35 + 8);
    v37 = *(char **)(v35 + 8);
    v38 = *(_QWORD *)(v35 + 16);
    if ((unint64_t)v37 < v38)
    {
      *(_DWORD *)v37 = a3;
      *v36 = (uint64_t)(v37 + 4);
      return;
    }
    v42 = *(char **)v35;
    v43 = (uint64_t)&v37[-*(_QWORD *)v35];
    v44 = v43 >> 2;
    v45 = (v43 >> 2) + 1;
    if (v45 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v46 = v38 - (_QWORD)v42;
    if (v46 >> 1 > v45)
      v45 = v46 >> 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
      v47 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v48 = operator new(4 * v47);
      v49 = &v48[4 * v44];
      v50 = &v48[4 * v47];
      *v49 = a3;
      v51 = (uint64_t)(v49 + 1);
      v52 = v37 - v42;
      if (v37 == v42)
        goto LABEL_60;
    }
    else
    {
      v48 = 0;
      v49 = (_DWORD *)(4 * v44);
      v50 = 0;
      *(_DWORD *)(4 * v44) = a3;
      v51 = 4 * v44 + 4;
      v52 = v37 - v42;
      if (v37 == v42)
      {
LABEL_60:
        *(_QWORD *)v35 = v49;
        *v36 = v51;
        *(_QWORD *)(v35 + 16) = v50;
        if (v42)
          operator delete(v42);
        *v36 = v51;
        return;
      }
    }
    v53 = v52 - 4;
    if (v53 < 0x2C)
      goto LABEL_73;
    if ((unint64_t)(v37 - v48 - v43) < 0x20)
      goto LABEL_73;
    v54 = (v53 >> 2) + 1;
    v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
    v56 = &v37[-v55];
    v49 = (_DWORD *)((char *)v49 - v55);
    v57 = &v48[4 * v44 - 16];
    v58 = v37 - 16;
    v59 = v54 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 32;
      v59 -= 8;
    }
    while (v59);
    v37 = v56;
    if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_73:
      do
      {
        v61 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--v49 = v61;
      }
      while (v37 != v42);
    }
    goto LABEL_60;
  }
  v39 = a1[17];
  if ((__p[0] & 1) != 0)
    operator delete(*(void **)&__p[8]);
  v40 = (const operations_research::Domain *)(v39 + 32 * v32 + 8);
  if ((operations_research::Domain::IsIncludedIn(v40, (const operations_research::Domain *)a4) & 1) == 0)
  {
    operations_research::Domain::IntersectionWith((_QWORD *)a4, v40, (unint64_t *)__x);
    if (v40 == (const operations_research::Domain *)__x)
    {
      if ((__x[0] & 1) != 0)
        operator delete(*(void **)__p);
    }
    else
    {
      v41 = (void **)((char *)v40 + 8);
      if ((*(_BYTE *)v40 & 1) != 0)
        operator delete(*v41);
      *(_QWORD *)v40 = *(_QWORD *)__x;
      *(_OWORD *)v41 = *(_OWORD *)__p;
    }
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 3, v8);
  }
}

void sub_22DBCD944(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBCD94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p)
{
  if ((a11 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DomainDeductions::ProcessClause(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  int *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  int *v65;
  char *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  unint64_t *v83;
  void **v84;
  uint64_t v85;
  unint64_t v86;
  google::LogMessage *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  void **v94;
  void **v95;
  void *v96;
  void **v97;
  char v98;
  int *v100;
  int *v101;
  int *v102;
  int *v103;
  char *v105;
  char *v106;
  uint64_t v107;
  int *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *__p;
  unint64_t v115;
  _BYTE v116[24];
  void *v117;
  void **v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  _BYTE v125[24];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    v4 = a1;
    v5 = 4 * a3;
    v6 = 1;
    v7 = a2;
    v102 = &a2[a3];
    do
    {
      v8 = (2 * *v7) ^ (*v7 >> 31);
      if (v8 >= *((_DWORD *)a1 + 6))
        return;
      v6 &= ((*(_QWORD *)(a1[4] + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0;
      ++v7;
      v5 -= 4;
    }
    while (v5);
    if ((v6 & 1) == 0)
    {
      v100 = a2;
      v110 = 0;
      v111 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v107 = a3;
      while (1)
      {
        v103 = a2;
        v15 = v4[13] + 24 * ((2 * *a2) ^ (*a2 >> 31));
        v17 = *(int **)v15;
        v16 = *(int **)(v15 + 8);
        v108 = v16;
        if (*(int **)v15 != v16)
          break;
LABEL_9:
        v119 = v13;
        v122 = v14;
        a2 = v103 + 1;
        if (v103 + 1 == v102)
        {
          if (v13 != v11)
          {
            v60 = *v4;
            v61 = v13;
            do
            {
              v62 = *(int *)v61;
              v61 += 4;
              *(_DWORD *)(v60 + 4 * v62) = 0;
            }
            while (v61 != v11);
          }
          v63 = (v10 - v14) >> 2;
          std::vector<operations_research::Domain>::vector(&v117, v63);
          v64 = v10;
          v65 = v100;
          v66 = v13;
          v106 = v10;
          do
          {
            while (v64 == v14)
            {
              v64 = v14;
              if (++v65 == v102)
                goto LABEL_99;
            }
            v67 = 0;
            v101 = v65;
            v68 = (2 * *v65) ^ (*v65 >> 31);
            do
            {
              v70 = 0;
              v71 = *(unsigned int *)&v14[4 * v67];
              v69 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v68)
                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                       * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                        + v68));
              v72 = (((unint64_t)(v69 + v71) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v69 + v71));
              v73 = a1[16];
              v74 = (v72 >> 7) ^ (v73 >> 12);
              v75 = a1[19];
              v76 = 0x101010101010101 * (v72 & 0x7F);
              while (1)
              {
                v77 = v74 & v75;
                v78 = *(_QWORD *)(v73 + v77);
                v79 = ((v78 ^ v76) - 0x101010101010101) & ~(v78 ^ v76) & 0x8080808080808080;
                if (v79)
                  break;
LABEL_85:
                if ((v78 & (~v78 << 6) & 0x8080808080808080) != 0)
                  goto LABEL_101;
                v70 += 8;
                v74 = v70 + v77;
              }
              while (1)
              {
                v80 = (v77 + (__clz(__rbit64(v79)) >> 3)) & v75;
                v81 = (_DWORD *)(a1[17] + 32 * v80);
                if (*v81 == v68 && v81[1] == (_DWORD)v71)
                  break;
                v79 &= v79 - 1;
                if (!v79)
                  goto LABEL_85;
              }
              if (v80 == v75)
              {
LABEL_101:
                v87 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v125, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 200);
                v88 = (_QWORD *)google::LogMessage::stream(v87);
                v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Check failed: it != collection.end() ", 37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Map key not found", 17);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v125);
              }
              operations_research::Domain::UnionWith((operations_research::Domain *)((char *)v117 + 24 * v67), (const operations_research::Domain *)(v81 + 2), &v115);
              v83 = (unint64_t *)((char *)v117 + 24 * v67);
              if (v83 == &v115)
              {
                if ((v115 & 1) != 0)
                  operator delete(*(void **)v116);
              }
              else
              {
                v84 = (void **)(v83 + 1);
                if ((*(_BYTE *)v83 & 1) != 0)
                  operator delete(*v84);
                *v83 = v115;
                *(_OWORD *)v84 = *(_OWORD *)v116;
                v13 = v66;
              }
              ++v67;
            }
            while (v63 > v67);
            v10 = v106;
            v64 = v106;
            v65 = v101 + 1;
          }
          while (v101 + 1 != v102);
LABEL_99:
          if (v10 != v14)
          {
            v85 = 0;
            v86 = 0;
            do
            {
              v90 = *(_DWORD *)&v14[4 * v86];
              LODWORD(v115) = v90;
              *(_QWORD *)v116 = 0;
              *(_QWORD *)v116 = *(_QWORD *)((char *)v117 + v85);
              *(_OWORD *)&v116[8] = *(_OWORD *)((char *)v117 + v85 + 8);
              *(_QWORD *)((char *)v117 + v85) = 0;
              v91 = a4[1];
              if (v91 < a4[2])
              {
                *(_DWORD *)v91 = v90;
                *(_QWORD *)(v91 + 8) = 0;
                *(_QWORD *)(v91 + 8) = *(_QWORD *)v116;
                *(_OWORD *)(v91 + 16) = *(_OWORD *)&v116[8];
                a4[1] = v91 + 32;
              }
              else
              {
                v92 = std::vector<std::pair<int,operations_research::Domain>>::__push_back_slow_path<std::pair<int,operations_research::Domain>>(a4, (uint64_t)&v115);
                v93 = v116[0];
                a4[1] = v92;
                if ((v93 & 1) != 0)
                  operator delete(*(void **)&v116[8]);
              }
              ++v86;
              v85 += 24;
            }
            while (v63 > v86);
          }
          v94 = (void **)v117;
          if (v117)
          {
            v95 = v118;
            v96 = v117;
            if (v118 != v117)
            {
              v97 = v118;
              do
              {
                v98 = *((_BYTE *)v97 - 24);
                v97 -= 3;
                if ((v98 & 1) != 0)
                  operator delete(*(v95 - 2));
                v95 = v97;
              }
              while (v97 != v94);
              v96 = v117;
            }
            v118 = v94;
            operator delete(v96);
          }
          if (v13)
          {
            v120 = v13;
            operator delete(v13);
            v14 = v122;
          }
          if (v14)
          {
            v123 = v14;
            operator delete(v14);
          }
          return;
        }
      }
      while (1)
      {
        v18 = *v17;
        v19 = *v4;
        v20 = *(_DWORD *)(*v4 + 4 * *v17);
        if (v20)
        {
          v21 = v20 + 1;
          *(_DWORD *)(v19 + 4 * v18) = v21;
          if (a3 != v21)
            goto LABEL_13;
          goto LABEL_39;
        }
        if (v11 < v111)
        {
          *(_DWORD *)v11 = v18;
          v11 += 4;
          v9 = v11;
          v22 = *(_DWORD *)(v19 + 4 * v18) + 1;
          *(_DWORD *)(v19 + 4 * v18) = v22;
          if (a3 != v22)
            goto LABEL_13;
          goto LABEL_39;
        }
        v105 = v10;
        v23 = v11 - v13;
        v24 = v13;
        v25 = (v11 - v13) >> 2;
        v26 = v25 + 1;
        __p = v24;
        if ((unint64_t)(v25 + 1) >> 62)
          goto LABEL_120;
        v27 = v111 - v24;
        v28 = (v111 - v24) >> 1;
        if (v28 > v26)
          v26 = v28;
        v29 = v27 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v26;
        v109 = v12;
        if (v29)
        {
          if (v29 >> 62)
            goto LABEL_119;
          v30 = v29;
          v31 = operator new(4 * v29);
          v29 = v30;
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v25];
        *(_DWORD *)v32 = v18;
        v112 = v32 + 4;
        v33 = __p;
        if (v11 != __p)
          break;
        v10 = v105;
        v111 = &v31[4 * v29];
        if (__p)
        {
LABEL_35:
          operator delete(v33);
          v4 = a1;
          v19 = *a1;
          v13 = v32;
          goto LABEL_38;
        }
LABEL_37:
        v13 = v32;
        v4 = a1;
LABEL_38:
        a3 = v107;
        v16 = v108;
        v9 = v112;
        v12 = v109;
        v11 = v112;
        v37 = *(_DWORD *)(v19 + 4 * v18) + 1;
        *(_DWORD *)(v19 + 4 * v18) = v37;
        if (v107 != v37)
          goto LABEL_13;
LABEL_39:
        if (v10 >= v12)
        {
          __p = v13;
          v38 = (v10 - v14) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
          {
LABEL_120:
            v120 = v9;
            v121 = v111;
            v119 = __p;
            v123 = (char *)v110;
            v124 = v12;
            v122 = v14;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v12 - v14) >> 1 > v39)
            v39 = (v12 - v14) >> 1;
          if ((unint64_t)(v12 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          v113 = v9;
          if (v40)
          {
            v109 = v12;
            if (v40 >> 62)
            {
LABEL_119:
              v120 = v9;
              v121 = v111;
              v119 = __p;
              v123 = (char *)v110;
              v124 = v109;
              v122 = v14;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v41 = operator new(4 * v40);
            v4 = a1;
            v42 = &v41[4 * v38];
            *(_DWORD *)v42 = v18;
            v110 = (uint64_t)(v42 + 4);
            if (v10 != v14)
            {
LABEL_49:
              v43 = v10 - 4 - v14;
              if (v43 < 0xBC
                || &v41[v10 - v14 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v10 - v14 - 4]
                || &v10[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4
                || (unint64_t)(v14 - v41) < 0x20)
              {
                v44 = v10;
              }
              else
              {
                v48 = (v43 >> 2) + 1;
                v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
                v44 = &v10[-v49];
                v42 -= v49;
                v50 = &v41[4 * v38 - 16];
                v51 = v10 - 16;
                v52 = v48 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v53 = *(_OWORD *)v51;
                  *(v50 - 1) = *((_OWORD *)v51 - 1);
                  *v50 = v53;
                  v50 -= 2;
                  v51 -= 32;
                  v52 -= 8;
                }
                while (v52);
                if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_52:
                  v12 = &v41[4 * v40];
                  if (v14)
                    goto LABEL_53;
                  goto LABEL_54;
                }
              }
              do
              {
                v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v42 - 1) = v45;
                v42 -= 4;
              }
              while (v44 != v14);
              goto LABEL_52;
            }
          }
          else
          {
            v41 = 0;
            v42 = (char *)(4 * v38);
            *(_DWORD *)(4 * v38) = v18;
            v110 = 4 * v38 + 4;
            if (v10 != v14)
              goto LABEL_49;
          }
          v12 = &v41[4 * v40];
          if (v14)
          {
LABEL_53:
            v46 = v12;
            v47 = v4;
            operator delete(v14);
            v4 = v47;
            v12 = v46;
          }
LABEL_54:
          v10 = (char *)v110;
          v14 = v42;
          a3 = v107;
          v16 = v108;
          v9 = v113;
          goto LABEL_13;
        }
        *(_DWORD *)v10 = v18;
        v10 += 4;
        v110 = (uint64_t)v10;
LABEL_13:
        if (++v17 == v16)
        {
          v120 = v9;
          v121 = v111;
          v123 = (char *)v110;
          v124 = v12;
          goto LABEL_9;
        }
      }
      v34 = v11 - 4 - __p;
      if (v34 < 0xBC
        || &v31[v23 - 4 - (v34 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[v23 - 4]
        || &v11[-(v34 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4
        || (unint64_t)(v11 - &v31[v23]) < 0x20)
      {
        v35 = v11;
        v10 = v105;
        v33 = __p;
      }
      else
      {
        v54 = (v34 >> 2) + 1;
        v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
        v35 = &v11[-v55];
        v32 -= v55;
        v56 = &v31[4 * v25 - 16];
        v57 = v11 - 16;
        v58 = v54 & 0x7FFFFFFFFFFFFFF8;
        v10 = v105;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 8;
        }
        while (v58);
        v33 = __p;
        if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          v111 = &v31[4 * v29];
          if (v33)
            goto LABEL_35;
          goto LABEL_37;
        }
      }
      do
      {
        v36 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v32 - 1) = v36;
        v32 -= 4;
      }
      while (v35 != v33);
      goto LABEL_34;
    }
  }
}

void sub_22DBCE1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t v28;
  void *v30;

  if ((a24 & 1) != 0)
    operator delete(__p);
  std::vector<operations_research::Domain>::~vector[abi:ne180100](&a27);
  if (v27)
  {
    *(_QWORD *)(v28 - 144) = v27;
    operator delete(v27);
    v30 = *(void **)(v28 - 128);
    if (!v30)
    {
LABEL_5:
      std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v30 = *(void **)(v28 - 128);
    if (!v30)
      goto LABEL_5;
  }
  *(_QWORD *)(v28 - 120) = v30;
  operator delete(v30);
  std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SubstituteVariable(operations_research::sat *this, uint64_t a2, uint64_t a3, const operations_research::sat::ConstraintProto *a4, operations_research::sat::ConstraintProto *a5, __n128 a6)
{
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  __n128 *v39;
  unint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  int v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  int8x16_t v64;
  uint64_t v65;
  uint64_t v66;
  google::protobuf::Arena *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  google::protobuf::Arena *v79;
  uint64_t v80;
  int *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __n128 *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  _QWORD *v95;
  google::LogMessage *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  const operations_research::sat::ConstraintProto *v103;
  uint64_t v104;
  int v105;
  unsigned int *v107;
  unint64_t v108;
  void *v109;
  uint64_t *v110;
  void *v111[2];
  uint64_t *v112;
  __int128 __p;
  BOOL v114;
  __n128 *v115;
  __n128 *v116;
  __n128 *v117;

  if ((this & 0x80000000) != 0)
  {
    v96 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v115, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 185);
    v97 = (_QWORD *)google::LogMessage::stream(v96);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_163;
  }
  v8 = (int)this;
  if (a2 >= 0)
    v9 = a2;
  else
    v9 = -a2;
  v115 = (__n128 *)v9;
  LODWORD(v110) = 1;
  if (v9 != 1)
  {
    v112 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)&v115, (int)&v110, "std::abs(var_coeff_in_definition) == 1");
    if (v112)
    {
      v99 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v115, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 186, &v112);
      google::LogMessage::stream((google::LogMessage *)v99);
LABEL_163:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v115);
    }
  }
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  if (*((_DWORD *)a4 + 15) == 12)
    v10 = (uint64_t *)*((_QWORD *)a4 + 6);
  v103 = a4;
  v11 = *((unsigned int *)v10 + 4);
  if ((int)v11 < 1)
  {
LABEL_164:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v112, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 126);
    v98 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: found ", 20);
    goto LABEL_165;
  }
  v102 = a2;
  v12 = 0;
  v13 = 0;
  v105 = v8;
  v104 = *((unsigned int *)v10 + 4);
  do
  {
    while (1)
    {
      v14 = *(_DWORD *)(v10[3] + 4 * v13);
      if (v14 >= 0)
        v15 = *(_QWORD *)(v10[6] + 8 * v13);
      else
        v15 = -*(_QWORD *)(v10[6] + 8 * v13);
      v16 = v14 ^ (v14 >> 31);
      if (v16 == v8)
      {
        v26 = v13 + 1;
        if (v26 == v11)
        {
          v27 = v102;
          goto LABEL_62;
        }
        while (1)
        {
          while (1)
          {
            v28 = *(_DWORD *)(v10[3] + 4 * v26);
            if (v28 >= 0)
              v29 = *(_QWORD *)(v10[6] + 8 * v26);
            else
              v29 = -*(_QWORD *)(v10[6] + 8 * v26);
            v30 = v28 ^ (v28 >> 31);
            if (v30 == v8)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v112, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 118);
              v101 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v112);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: !found ", 21);
LABEL_165:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v112);
            }
            if (v12 >= v117)
              break;
            v12->n128_u32[0] = v30;
            v12->n128_u64[1] = v29;
            v116 = ++v12;
            if (++v26 == v11)
              goto LABEL_61;
          }
          v31 = (unint64_t)v115;
          v32 = v12 - v115;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60)
            goto LABEL_169;
          v34 = (char *)v117 - (char *)v115;
          if (((char *)v117 - (char *)v115) >> 3 > v33)
            v33 = v34 >> 3;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
            v35 = 0xFFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 60)
              goto LABEL_170;
            v36 = (char *)operator new(16 * v35);
            v37 = (uint64_t)&v36[16 * v32];
            *(_DWORD *)v37 = v30;
            *(_QWORD *)(v37 + 8) = v29;
            if (v12 == (__n128 *)v31)
            {
LABEL_58:
              v39 = v12;
              v12 = (__n128 *)(v37 + 16);
              v115 = (__n128 *)v37;
              v116 = (__n128 *)(v37 + 16);
              v117 = (__n128 *)&v36[16 * v35];
              if (!v39)
                goto LABEL_55;
              goto LABEL_54;
            }
          }
          else
          {
            v36 = 0;
            v37 = 16 * v32;
            *(_DWORD *)v37 = v30;
            *(_QWORD *)(v37 + 8) = v29;
            if (v12 == (__n128 *)v31)
              goto LABEL_58;
          }
          v38 = v37;
          do
          {
            a6 = v12[-1];
            *(__n128 *)(v38 - 16) = a6;
            v38 -= 16;
            --v12;
          }
          while (v12 != (__n128 *)v31);
          v39 = v115;
          v12 = (__n128 *)(v37 + 16);
          v115 = (__n128 *)v38;
          v116 = (__n128 *)(v37 + 16);
          v117 = (__n128 *)&v36[16 * v35];
          if (!v39)
            goto LABEL_55;
LABEL_54:
          operator delete(v39);
LABEL_55:
          v8 = v105;
          v11 = v104;
          v116 = v12;
          if (++v26 == v104)
            goto LABEL_61;
        }
      }
      if (v12 >= v117)
        break;
      v12->n128_u32[0] = v16;
      v12->n128_u64[1] = v15;
      v116 = ++v12;
      if (++v13 == v11)
        goto LABEL_60;
    }
    v17 = (unint64_t)v115;
    v18 = v12 - v115;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
LABEL_169:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = (char *)v117 - (char *)v115;
    if (((char *)v117 - (char *)v115) >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
LABEL_170:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = (char *)operator new(16 * v21);
      v23 = (uint64_t)&v22[16 * v18];
      *(_DWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v15;
      if (v12 == (__n128 *)v17)
      {
LABEL_32:
        v25 = v12;
        v12 = (__n128 *)(v23 + 16);
        v115 = (__n128 *)v23;
        v116 = (__n128 *)(v23 + 16);
        v117 = (__n128 *)&v22[16 * v21];
        if (v25)
          goto LABEL_28;
        goto LABEL_29;
      }
    }
    else
    {
      v22 = 0;
      v23 = 16 * v18;
      *(_DWORD *)v23 = v16;
      *(_QWORD *)(v23 + 8) = v15;
      if (v12 == (__n128 *)v17)
        goto LABEL_32;
    }
    v24 = v23;
    do
    {
      a6 = v12[-1];
      *(__n128 *)(v24 - 16) = a6;
      v24 -= 16;
      --v12;
    }
    while (v12 != (__n128 *)v17);
    v25 = v115;
    v12 = (__n128 *)(v23 + 16);
    v115 = (__n128 *)v24;
    v116 = (__n128 *)(v23 + 16);
    v117 = (__n128 *)&v22[16 * v21];
    if (v25)
LABEL_28:
      operator delete(v25);
LABEL_29:
    v8 = v105;
    v11 = v104;
    v116 = v12;
    ++v13;
  }
  while (v13 != v104);
LABEL_60:
  v15 = 0;
LABEL_61:
  v27 = v102;
  if (v16 != v8)
    goto LABEL_164;
LABEL_62:
  if (v27 >= 0)
    v40 = v15;
  else
    v40 = -(uint64_t)v15;
  v41 = *(_DWORD *)(a3 + 60);
  v42 = *(uint64_t **)(a3 + 48);
  if (v41 == 12)
    v43 = *(uint64_t **)(a3 + 48);
  else
    v43 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  v44 = *((unsigned int *)v43 + 4);
  if ((int)v44 >= 1)
  {
    v45 = 0;
    while (2)
    {
      v47 = *(_DWORD *)(a3 + 60);
      if (v47 == 12)
        v48 = *(uint64_t **)(a3 + 48);
      else
        v48 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      v49 = *(_DWORD *)(v48[3] + 4 * v45);
      v50 = v49 ^ (v49 >> 31);
      if (v50 == v8)
        goto LABEL_72;
      if (v47 == 12)
        v51 = *(uint64_t **)(a3 + 48);
      else
        v51 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      v52 = *(_QWORD *)(v51[6] + 8 * v45);
      if (v49 >= 0)
        v52 = -v52;
      v53 = v52 * v40;
      if (v12 < v117)
      {
        v12->n128_u32[0] = v50;
        v12->n128_u64[1] = v53;
        v46 = v12 + 1;
      }
      else
      {
        v54 = (unint64_t)v115;
        v55 = v12 - v115;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60)
          goto LABEL_169;
        v57 = (char *)v117 - (char *)v115;
        if (((char *)v117 - (char *)v115) >> 3 > v56)
          v56 = v57 >> 3;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
          v58 = 0xFFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 60)
            goto LABEL_170;
          v59 = (char *)operator new(16 * v58);
          v60 = (uint64_t)&v59[16 * v55];
          *(_DWORD *)v60 = v50;
          *(_QWORD *)(v60 + 8) = v53;
          v61 = v60;
          if (v12 == (__n128 *)v54)
          {
LABEL_92:
            v46 = (__n128 *)(v60 + 16);
            v115 = (__n128 *)v61;
            v116 = (__n128 *)(v60 + 16);
            v117 = (__n128 *)&v59[16 * v58];
            if (v12)
              goto LABEL_93;
            goto LABEL_94;
          }
        }
        else
        {
          v59 = 0;
          v60 = 16 * v55;
          *(_DWORD *)v60 = v50;
          *(_QWORD *)(v60 + 8) = v53;
          v61 = 16 * v55;
          if (v12 == (__n128 *)v54)
            goto LABEL_92;
        }
        do
        {
          a6 = v12[-1];
          *(__n128 *)(v61 - 16) = a6;
          v61 -= 16;
          --v12;
        }
        while (v12 != (__n128 *)v54);
        v12 = v115;
        v46 = (__n128 *)(v60 + 16);
        v115 = (__n128 *)v61;
        v116 = (__n128 *)(v60 + 16);
        v117 = (__n128 *)&v59[16 * v58];
        if (v12)
LABEL_93:
          operator delete(v12);
LABEL_94:
        v8 = v105;
      }
      v116 = v46;
      v12 = v46;
LABEL_72:
      if (++v45 == v44)
      {
        v41 = *(_DWORD *)(a3 + 60);
        v42 = *(uint64_t **)(a3 + 48);
        break;
      }
      continue;
    }
  }
  v114 = 0;
  if (v41 == 12)
    v62 = v42;
  else
    v62 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  operations_research::Domain::FromFlatSpanOfIntervals(v62[9], *((int *)v62 + 16), (unint64_t *)&v112, a6);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v112, &v114, -(uint64_t)v40, (unint64_t *)&v110);
  if ((v112 & 1) != 0)
    operator delete((void *)__p);
  v112 = v110;
  __p = *(_OWORD *)v111;
  if (!v114)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v110, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 201);
    v100 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v110);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: exact ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v110);
  }
  if (*((_DWORD *)v103 + 15) == 12)
    v63 = (uint64_t *)*((_QWORD *)v103 + 6);
  else
    v63 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  operations_research::Domain::FromFlatSpanOfIntervals(v63[9], *((int *)v63 + 16), (unint64_t *)&v110, *(__n128 *)v111);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v110, (const operations_research::Domain *)&v112, &v108, v64);
  if (*((_DWORD *)v103 + 15) == 12)
  {
    v65 = *((_QWORD *)v103 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v103);
    *((_DWORD *)v103 + 15) = 12;
    v66 = *((_QWORD *)v103 + 1);
    v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
    if ((v66 & 1) != 0)
      v67 = *(google::protobuf::Arena **)v67;
    v65 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v67);
    *((_QWORD *)v103 + 6) = v65;
  }
  *(_DWORD *)(v65 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v108 >> 1);
  v68 = v108 & 1;
  if ((v108 & 1) != 0)
    v69 = (uint64_t *)v109;
  else
    v69 = (uint64_t *)&v109;
  if (v108 >= 2)
  {
    v70 = &v69[2 * (v108 >> 1)];
    v71 = *(_DWORD *)(v65 + 64);
    do
    {
      v72 = *v69;
      v73 = *(_DWORD *)(v65 + 68);
      v74 = v71 + 1;
      if (v71 == v73)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v71 + 1);
        v73 = *(_DWORD *)(v65 + 68);
      }
      v75 = *(_QWORD *)(v65 + 72);
      *(_QWORD *)(v75 + 8 * v71) = v72;
      *(_DWORD *)(v65 + 64) = v74;
      v76 = v69[1];
      v71 += 2;
      if (v74 == v73)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v71);
        v75 = *(_QWORD *)(v65 + 72);
      }
      *(_QWORD *)(v75 + 8 * v74) = v76;
      *(_DWORD *)(v65 + 64) = v71;
      v69 += 2;
    }
    while (v69 != v70);
    v68 = v108 & 1;
  }
  if (v68)
    operator delete(v109);
  if (*((_DWORD *)v103 + 15) == 12)
  {
    v77 = *((_QWORD *)v103 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v103);
    *((_DWORD *)v103 + 15) = 12;
    v78 = *((_QWORD *)v103 + 1);
    v79 = (google::protobuf::Arena *)(v78 & 0xFFFFFFFFFFFFFFFELL);
    if ((v78 & 1) != 0)
      v79 = *(google::protobuf::Arena **)v79;
    v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v79);
    *((_QWORD *)v103 + 6) = v77;
  }
  v80 = (uint64_t)v115;
  v81 = (int *)v116;
  v82 = 126 - 2 * __clz(v116 - v115);
  *(_DWORD *)(v77 + 16) = 0;
  *(_DWORD *)(v77 + 40) = 0;
  v107 = (unsigned int *)(v77 + 40);
  if (v81 == (int *)v80)
    v83 = 0;
  else
    v83 = v82;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v80, v81, (uint64_t)&v108, v83, 1);
  v84 = (unint64_t)v115;
  v85 = v116;
  if (v115 != v116)
  {
    v86 = 0;
    v87 = 0;
    do
    {
      while (1)
      {
        v88 = *(_DWORD *)v84;
        if ((*(_DWORD *)v84 & 0x80000000) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v108, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 141);
          v95 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v108);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: RefIsPositive(entry.first) ", 41);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v108);
        }
        v89 = *(_QWORD *)(v84 + 8);
        if (v88 != v86)
          break;
        v87 += v89;
        v84 += 16;
        if ((__n128 *)v84 == v85)
          goto LABEL_147;
      }
      if (v87)
      {
        v90 = *(unsigned int *)(v77 + 16);
        if ((_DWORD)v90 == *(_DWORD *)(v77 + 20))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v77 + 16), v90 + 1);
        *(_DWORD *)(*(_QWORD *)(v77 + 24) + 4 * v90) = v86;
        *(_DWORD *)(v77 + 16) = v90 + 1;
        v91 = *(unsigned int *)(v77 + 40);
        if ((_DWORD)v91 == *(_DWORD *)(v77 + 44))
          google::protobuf::RepeatedField<long long>::Reserve(v107, v91 + 1);
        *(_QWORD *)(*(_QWORD *)(v77 + 48) + 8 * v91) = v87;
        *(_DWORD *)(v77 + 40) = v91 + 1;
      }
      v87 = v89;
      v86 = v88;
      v84 += 16;
    }
    while ((__n128 *)v84 != v85);
LABEL_147:
    if (v87)
    {
      v92 = *(unsigned int *)(v77 + 16);
      if ((_DWORD)v92 == *(_DWORD *)(v77 + 20))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v77 + 16), v92 + 1);
      *(_DWORD *)(*(_QWORD *)(v77 + 24) + 4 * v92) = v86;
      *(_DWORD *)(v77 + 16) = v92 + 1;
      v93 = *(unsigned int *)(v77 + 40);
      if ((_DWORD)v93 == *(_DWORD *)(v77 + 44))
        google::protobuf::RepeatedField<long long>::Reserve(v107, v93 + 1);
      *(_QWORD *)(*(_QWORD *)(v77 + 48) + 8 * v93) = v87;
      *(_DWORD *)(v77 + 40) = v93 + 1;
    }
  }
  if ((v110 & 1) == 0)
  {
    if ((v112 & 1) == 0)
      goto LABEL_155;
LABEL_159:
    operator delete((void *)__p);
    v94 = v115;
    if (!v115)
      return;
LABEL_156:
    v116 = v94;
    operator delete(v94);
    return;
  }
  operator delete(v111[0]);
  if ((v112 & 1) != 0)
    goto LABEL_159;
LABEL_155:
  v94 = v115;
  if (v115)
    goto LABEL_156;
}

void sub_22DBCEC60()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

void sub_22DBCEC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, char a17, void *__p, uint64_t a19, char a20,void *a21)
{
  uint64_t v21;
  void *v22;

  if ((a17 & 1) != 0)
  {
    operator delete(__p);
    if ((a20 & 1) != 0)
    {
LABEL_7:
      operator delete(a21);
      v22 = *(void **)(v21 - 104);
      if (v22)
      {
LABEL_8:
        *(_QWORD *)(v21 - 96) = v22;
        operator delete(v22);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a20 & 1) != 0)
  {
    goto LABEL_7;
  }
  v22 = *(void **)(v21 - 104);
  if (v22)
    goto LABEL_8;
  goto LABEL_4;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = a2[1];
  v4 = *a2;
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v4)))
     + v3;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (int *)(a1[1] + 32 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == (_DWORD)v4 && v14 == (_DWORD)v3)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v26 = a1[4];
    if (!v26)
      return;
LABEL_21:
    *((_QWORD *)v26 + 4) = v14 >> 3;
    *((_QWORD *)v26 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v19 = &v5[32 * (_QWORD)v13];
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v19)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v19)))
          + *((unsigned int *)v19 + 1);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = *a1;
      v23 = a1[3];
      v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      v25 = *(_QWORD *)&(*a1)[v24] & (~*(_QWORD *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v24 = (v15 + v24) & (unint64_t)v23;
          v25 = *(_QWORD *)&v22[v24] & (~*(_QWORD *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = (uint64_t)&a1[1][32 * v16];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 8) = *((_QWORD *)v19 + 1);
      *(_OWORD *)(v18 + 16) = *((_OWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v26 = a1[4];
  if (v26)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  _OWORD *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v38 = *(_QWORD *)(result + 32);
    if (!v38)
      return result;
LABEL_26:
    *(_QWORD *)(v38 + 32) = v15 >> 3;
    *(_QWORD *)(v38 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(_QWORD *)(result + 8) + 32 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(_QWORD *)(result + 8) + 32 * v14))))
          + *(unsigned int *)(*(_QWORD *)(result + 8) + 32 * v14 + 4);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 32 * v18;
          v27 = v25 + 32 * v14;
          *(_QWORD *)(v26 + 8) = 0;
          v28 = *(_OWORD *)(v27 + 16);
          *(_OWORD *)v26 = *(_OWORD *)v27;
          *(_OWORD *)(v26 + 16) = v28;
          *(_QWORD *)(v27 + 8) = 0;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (__int128 *)(v25 + 32 * v14);
          v31 = *v29;
          v30 = v29[1];
          v32 = (__int128 *)(v25 + 32 * v18);
          *((_QWORD *)v29 + 1) = 0;
          v33 = v32[1];
          *v29 = *v32;
          v29[1] = v33;
          *((_QWORD *)v32 + 1) = 0;
          v34 = (_OWORD *)(*(_QWORD *)(result + 8) + 32 * v18);
          *v34 = v31;
          v34[1] = v30;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v35 = v14 - (v14 >> 3);
  v36 = v14 == 7;
  v37 = 6;
  if (!v36)
    v37 = v35;
  *(_QWORD *)(result + 40) = v37 - *(_QWORD *)(result + 16);
  v38 = *(_QWORD *)(result + 32);
  if (v38)
    goto LABEL_26;
  return result;
}

uint64_t std::vector<std::pair<int,operations_research::Domain>>::__push_back_slow_path<std::pair<int,operations_research::Domain>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v16 = (uint64_t)&v10[32 * v5];
  v11 = &v10[32 * v9];
  *(_DWORD *)v16 = *(_DWORD *)a2;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v16, v16);
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  *a1 = v14;
  a1[1] = v16 + 32;
  a1[2] = (uint64_t)v11;
  while (v13 != v12)
  {
    if ((*(_BYTE *)(v13 - 3) & 1) != 0)
      operator delete(*(v13 - 2));
    v13 -= 4;
  }
  if (v12)
    operator delete(v12);
  return v16 + 32;
}

void sub_22DBCF6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,operations_research::Domain>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<int,operations_research::Domain>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if ((*(_BYTE *)(v2 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v2 - 16));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;

  v7 = a7;
  v18 = a6;
  v19 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    while (1)
    {
      while (1)
      {
        v10 = *(_DWORD *)(v9 - 32);
        v9 -= 32;
        *(_DWORD *)(v7 - 32) = v10;
        *(_QWORD *)(v7 - 24) = 0;
        v11 = *(_QWORD *)(v9 + 8);
        if ((v11 & 1) != 0)
          break;
        *(_QWORD *)(v7 - 24) = v11;
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
        v7 = v19 - 32;
        v19 -= 32;
        a3 = v9;
        if (v9 == a5)
          return v18;
      }
      v12 = *(__int128 **)(a3 - 16);
      v13 = v11 >> 1;
      if (v11 >= 4)
        break;
      if (v11 >= 2)
      {
        v14 = (_OWORD *)(v7 - 16);
        do
        {
LABEL_11:
          v16 = *v12++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        v15 = *(_QWORD *)(v7 - 24);
        goto LABEL_13;
      }
      v15 = 0;
LABEL_13:
      *(_QWORD *)(v7 - 24) = v15 + (v11 & 0xFFFFFFFFFFFFFFFELL);
      v7 = v19 - 32;
      v19 -= 32;
      a3 = v9;
      if (v9 == a5)
        return v18;
    }
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(16 * v13);
    *(_QWORD *)(v7 - 16) = v14;
    *(_QWORD *)(v7 - 8) = v13;
    *(_QWORD *)(v7 - 24) = 1;
    goto LABEL_11;
  }
  return a6;
}

void sub_22DBCF850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if ((*(_BYTE *)(v9 - 24) & 1) != 0)
    operator delete(*(void **)(v9 - 16));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if ((*(_BYTE *)(v3 + 8) & 1) != 0)
        operator delete(*(void **)(v3 + 16));
      v3 += 32;
    }
  }
  return a1;
}

uint64_t operations_research::sat::ProbeBooleanVariables(operations_research::sat *this, double a2, operations_research::sat::Model *a3)
{
  unsigned int v3;
  operations_research::sat *v4;
  uint64_t v6;
  operations_research::sat::BinaryImplicationGraph *v7;
  operations_research::sat::BinaryImplicationGraph *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  operations_research::sat *v33;
  unsigned int v34;
  uint64_t v35;

  v3 = a3;
  v4 = this;
  v6 = *((unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this)
       + 4);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v4);
  if ((int)v6 >= 1)
  {
    v8 = v7;
    v33 = v4;
    v34 = v3;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v35 = v6;
    while (1)
    {
      v13 = *((_QWORD *)v8 + 71);
      if (2 * (int)v10 >= (int)((unint64_t)(*((_QWORD *)v8 + 72) - v13) >> 2)
        || ((v14 = *(unsigned int *)(v13 + (v10 << 33 >> 30)), (_DWORD)v14 != -1) ? (v15 = 2 * v10 == v14) : (v15 = 1),
            v15))
      {
        if (v9 >= v11)
        {
          v16 = (v9 - v12) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v11 - v12) >> 1 > v17)
            v17 = (v11 - v12) >> 1;
          if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
          {
            if (v18 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v19 = operator new(4 * v18);
            v20 = &v19[4 * v16];
            *(_DWORD *)v20 = v10;
            v21 = (uint64_t)(v20 + 4);
            if (v9 == v12)
              goto LABEL_26;
LABEL_23:
            v22 = v9 - 4 - v12;
            if (v22 < 0xBC)
            {
              v23 = v9;
              goto LABEL_25;
            }
            if (&v19[v9 - v12 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v9 - v12 - 4])
            {
              v23 = v9;
              goto LABEL_25;
            }
            if (&v9[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
            {
              v23 = v9;
              goto LABEL_25;
            }
            if ((unint64_t)(v12 - v19) < 0x20)
            {
              v23 = v9;
              goto LABEL_25;
            }
            v25 = (v22 >> 2) + 1;
            v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
            v23 = &v9[-v26];
            v20 -= v26;
            v27 = &v19[4 * v16 - 16];
            v28 = v9 - 16;
            v29 = v25 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_25:
                v24 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v20 - 1) = v24;
                v20 -= 4;
              }
              while (v23 != v12);
            }
          }
          else
          {
            v19 = 0;
            v20 = (char *)(4 * v16);
            *(_DWORD *)(4 * v16) = v10;
            v21 = 4 * v16 + 4;
            if (v9 != v12)
              goto LABEL_23;
          }
LABEL_26:
          v11 = &v19[4 * v18];
          if (v12)
            operator delete(v12);
          v9 = (char *)v21;
          v12 = v20;
          v6 = v35;
          goto LABEL_4;
        }
        *(_DWORD *)v9 = v10;
        v9 += 4;
      }
LABEL_4:
      if (++v10 == v6)
      {
        v3 = v34;
        v4 = v33;
        goto LABEL_41;
      }
    }
  }
  v9 = 0;
  v12 = 0;
LABEL_41:
  v31 = operations_research::sat::ProbeBooleanVariables((_BOOL8)v12, (v9 - v12) >> 2, (uint64_t)v4, v3, a2);
  if (v12)
    operator delete(v12);
  return v31;
}

void sub_22DBCFB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ProbeBooleanVariables(_BOOL8 inited, uint64_t a2, uint64_t a3, unsigned int a4, double a5)
{
  _DWORD *v8;
  int v10;
  operations_research::sat::SatSolver *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  uint64_t v41;
  absl::lts_2020_02_25 *v42;
  double v43;
  double v44;
  char *v45;
  int *v46;
  char *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  int *v127;
  int *v128;
  unint64_t *v129;
  int *v130;
  int *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  int64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  __int128 *v158;
  unint64_t v159;
  _OWORD *v160;
  uint64_t v161;
  __int128 v162;
  unint64_t v163;
  __int128 *v164;
  __int128 *v165;
  unint64_t v166;
  size_t v167;
  __int128 *v168;
  _QWORD *v169;
  char v171;
  __int128 *v172;
  unint64_t v173;
  __int128 v174;
  char updated;
  int64_t v176;
  uint64_t v177;
  int64_t v178;
  unint64_t v179;
  char *v180;
  int v182;
  int v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  absl::lts_2020_02_25 *v187;
  _QWORD *v188;
  _QWORD *v189;
  const char *v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _DWORD *v201;
  int v202;
  _DWORD *v203;
  unint64_t v204;
  int *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  operations_research::sat::SatSolver *v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  int v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  __int128 v221;
  void *v222[3];
  uint64_t *v223[3];
  _BYTE v224[24];
  int v225;
  void *v226;
  char *v227;
  char *v228;
  int *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t *v241;
  unint64_t *v242;
  unint64_t *v243;
  unint64_t v244;
  __int128 v245;
  uint64_t v246;

  v8 = (_DWORD *)inited;
  v246 = *MEMORY[0x24BDAC8D0];
  if (*operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__ < 1)
  {
    v10 = 0;
  }
  else if (operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    inited = google::InitVLOG3__((google *)&operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
    v10 = inited;
  }
  else
  {
    v10 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a3);
  operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t *)v11, 0);
  v12 = 0;
  if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v11))
    return v12;
  v204 = __PAIR64__(a4, v10);
  v13 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a3);
  v14 = *((_QWORD *)v11 + 26);
  v15 = *(_DWORD *)(v14 + 12);
  v16 = *((double *)v13 + 14);
  v241 = 0;
  v242 = 0;
  v243 = 0;
  v17 = (uint64_t)operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a3);
  v207 = v17;
  v217 = *(_DWORD *)(v17 + 32);
  v19 = (_QWORD *)(a3 + 32);
  v18 = *(_QWORD **)(a3 + 32);
  v202 = v15;
  if (!v18)
    goto LABEL_20;
  v20 = (_QWORD *)(a3 + 32);
  do
  {
    v21 = v18[4];
    v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v23 = v18;
    else
      v23 = v18 + 1;
    if (v22)
      v20 = v18;
    v18 = (_QWORD *)*v23;
  }
  while (*v23);
  if (v20 != v19
    && v20[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d
    && (v215 = (_QWORD *)v20[5]) != 0)
  {
    v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(a3);
    v208 = v17;
    v214 = 0;
  }
  else
  {
LABEL_20:
    v215 = 0;
    v208 = 0;
    v214 = 1;
  }
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v236 = 0;
  v237 = 0;
  v235 = 0;
  v24 = *((unsigned int *)v11 + 4);
  if ((int)v24 <= 0)
  {
    v225 = 0;
    v227 = 0;
    v228 = 0;
    v226 = 0;
  }
  else
  {
    v225 = 2 * v24;
    v25 = 8 * ((unint64_t)(2 * v24 + 63) >> 6);
    v226 = operator new(v25);
    v228 = (char *)v226 + v25;
    bzero(v226, v25);
    v227 = (char *)v226 + v25;
  }
  v229 = &v225;
  v231 = 0;
  v232 = 0;
  v230 = 0xFFFFFFFFLL;
  v233 = 0;
  v234 = 0;
  v26 = (_QWORD *)*v19;
  if (!*v19)
    goto LABEL_35;
  v27 = v19;
  do
  {
    v28 = v26[4];
    v29 = v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
      v30 = v26;
    else
      v30 = v26 + 1;
    if (v29)
      v27 = v26;
    v26 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 == v19 || v27[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
  {
LABEL_35:
    v31 = 0;
    if (a2)
      goto LABEL_36;
LABEL_272:
    HIDWORD(v210) = 0;
    v209 = 0;
    v32 = 0;
LABEL_273:
    v182 = 1;
LABEL_274:
    if (v204)
    {
      v183 = *(_DWORD *)(*((_QWORD *)v11 + 26) + 12);
      google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 239);
      v184 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v224);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"Probing deterministic_time: ", 28);
      v185 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" (limit: ", 9);
      v186 = (_QWORD *)std::ostream::operator<<();
      v187 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)") wall_time: ", 13);
      absl::lts_2020_02_25::GetCurrentTimeNanos(v187);
      v188 = (_QWORD *)std::ostream::operator<<();
      v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)" (", 2);
      if (v182)
        v190 = "";
      else
        v190 = "Aborted ";
      if (v182)
        v191 = 0;
      else
        v191 = 8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)v190, v191);
      v192 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"/", 1);
      v193 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)")", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v224);
      if (v183 - v202 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 244);
        v194 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Probing new fixed Boolean: ", 27);
        v195 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)" (", 2);
        v196 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"/", 1);
        v197 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)")", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (v209 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 247);
        v198 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Probing new integer holes: ", 27);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (SHIDWORD(v210) >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 249);
        v199 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Probing new integer bounds: ", 28);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (v32 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 251);
        v200 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"Probing new binary clause: ", 27);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
    }
    v12 = 1;
    v180 = (char *)v232;
    if (!v232)
      goto LABEL_262;
    goto LABEL_261;
  }
  v31 = v27[5];
  if (!a2)
    goto LABEL_272;
LABEL_36:
  v32 = 0;
  v209 = 0;
  v210 = 0;
  v203 = &v8[a2];
  v205 = (int *)(v13 + 4);
  v211 = v14;
  v212 = v13;
  v213 = v11;
  while (1)
  {
    v33 = 2 * *v8;
    v34 = *(_QWORD *)(v207 + 568);
    if (v33 < (int)((unint64_t)(*(_QWORD *)(v207 + 576) - v34) >> 2))
    {
      v35 = *(_DWORD *)(v34 + 4 * v33);
      if (v35 != -1 && v35 != v33)
        goto LABEL_258;
    }
    v37 = (unsigned __int8 *)v13[15];
    if (v37 && (v38 = atomic_load(v37), (v38 & 1) != 0)
      || fmax(*((double *)v13 + 13) - *((double *)v13 + 14), 0.0) <= 0.0)
    {
LABEL_291:
      v182 = 0;
      goto LABEL_274;
    }
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v17);
    v40 = CurrentTimeNanos;
    if (v13[3] <= CurrentTimeNanos - v13[1])
      v41 = CurrentTimeNanos - v13[1];
    else
      v41 = v13[3];
    operations_research::RunningMax<long long>::Add(v205, v41);
    v13[1] = v40;
    if (*(_QWORD *)(v13[5] + 8 * *((int *)v13 + 17)) + v40 >= v13[2])
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_292;
      v43 = *((double *)v13 + 12);
      if (*((_BYTE *)v13 + 72))
      {
        v44 = v43 + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v42) - v13[10] + v13[11]) * -0.000000001;
        if (v44 <= 0.0001)
          goto LABEL_292;
      }
      else
      {
        v44 = v43 + (double)(uint64_t)v13[11] * -0.000000001;
        if (v44 <= 0.0001)
        {
LABEL_292:
          v182 = 0;
          v13[2] = 0;
          goto LABEL_274;
        }
      }
      v13[2] = v13[1] + (uint64_t)(v44 * 1000000000.0);
    }
    if (*((double *)v13 + 14) > v16 + a5)
      goto LABEL_291;
    v239 = v238;
    v45 = (char *)v232;
    v46 = (int *)v233;
    if (v232 != v233)
    {
      v47 = (char *)v226;
      v48 = v233 - (_BYTE *)v232 - 4;
      v49 = (int *)v232;
      if (v48 < 4)
        goto LABEL_304;
      v50 = (v48 >> 2) + 1;
      v49 = (int *)((char *)v232 + 4 * (v50 & 0x7FFFFFFFFFFFFFFELL));
      v51 = (int *)((char *)v232 + 4);
      v52 = v50 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v53 = ((unint64_t)*v51 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)&v47[((unint64_t)*(v51 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        *(_QWORD *)&v47[v53] = 0;
        v51 += 2;
        v52 -= 2;
      }
      while (v52);
      if (v50 != (v50 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_304:
        do
        {
          v54 = *v49++;
          *(_QWORD *)&v47[(v54 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        }
        while (v49 != v46);
      }
    }
    v216 = v32;
    v55 = 0;
    LODWORD(v210) = v210 + 1;
    v233 = v45;
    LODWORD(v244) = v33;
    HIDWORD(v244) = v33 | 1;
    v201 = v8;
    v56 = v217;
    do
    {
      v57 = *((int *)&v244 + v55);
      if (((*(_QWORD *)(*(_QWORD *)(v14 + 24) + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v57 & 0x3E)) & 3) == 0)
      {
        *(_DWORD *)v224 = *((_DWORD *)v11 + 76);
        LODWORD(v222[0]) = 0;
        if (*(_DWORD *)v224)
        {
          v223[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v224, (int)v222, "sat_solver->CurrentDecisionLevel() == 0");
          if (v223[0])
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 114, v223);
            google::LogMessage::stream((google::LogMessage *)v224);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v224);
          }
        }
        v58 = v57;
        v59 = *(int *)(v31 + 12);
        operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)v11, v58);
        v60 = operations_research::sat::SatSolver::deterministic_time(v11);
        *((double *)v13 + 14) = *((double *)v13 + 14) + v60 - *((double *)v11 + 163);
        *((double *)v11 + 163) = v60;
        if (*((_BYTE *)v11 + 496))
          goto LABEL_260;
        if (*((_DWORD *)v11 + 76))
        {
          if ((v214 & 1) == 0)
          {
            operations_research::sat::ImpliedBounds::ProcessIntegerTrail(v208, v58);
            operations_research::sat::IntegerTrail::AppendNewBounds(v215, (void **)&v238);
          }
          v61 = v59 + 1;
          if ((int)v59 + 1 < *(_DWORD *)(v31 + 12))
          {
            v218 = v58;
            v219 = v58 ^ 1;
            do
            {
              v63 = *(int *)(*(_QWORD *)(v31 + 72) + 4 * v61);
              v64 = *((_QWORD *)v226 + (v63 >> 6));
              v65 = v64 & (1 << v63);
              if ((v58 & 1) != 0)
              {
                if (!v65)
                  goto LABEL_126;
                v67 = v236;
                if (v236 < v237)
                {
                  *(_DWORD *)v236 = v63;
                  v68 = (uint64_t)(v67 + 4);
LABEL_115:
                  v236 = (char *)v68;
                  goto LABEL_126;
                }
                v69 = v235;
                v70 = (v236 - v235) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v72 = v237 - v235;
                if ((v237 - v235) >> 1 > v71)
                  v71 = v72 >> 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v73 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  if (v73 >> 62)
                    goto LABEL_296;
                  v74 = operator new(4 * v73);
                  v75 = &v74[4 * v70];
                  *(_DWORD *)v75 = v63;
                  v68 = (uint64_t)(v75 + 4);
                  if (v67 != v69)
                  {
LABEL_92:
                    v76 = v67 - 4 - v69;
                    if (v76 < 0x2C)
                    {
                      v56 = v217;
                      goto LABEL_111;
                    }
                    v56 = v217;
                    if ((unint64_t)(v69 - v74) < 0x20)
                      goto LABEL_305;
                    v87 = (v76 >> 2) + 1;
                    v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
                    v89 = &v67[-v88];
                    v75 -= v88;
                    v90 = &v74[4 * v70 - 16];
                    v91 = v67 - 16;
                    v92 = v87 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v93 = *(_OWORD *)v91;
                      *(v90 - 1) = *((_OWORD *)v91 - 1);
                      *v90 = v93;
                      v90 -= 2;
                      v91 -= 32;
                      v92 -= 8;
                    }
                    while (v92);
                    v67 = v89;
                    if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_305:
                      do
                      {
LABEL_111:
                        v94 = *((_DWORD *)v67 - 1);
                        v67 -= 4;
                        *((_DWORD *)v75 - 1) = v94;
                        v75 -= 4;
                      }
                      while (v67 != v69);
                    }
LABEL_112:
                    v235 = v75;
                    v237 = &v74[4 * v73];
                    if (v69)
                      operator delete(v69);
                    LOBYTE(v58) = v218;
                    goto LABEL_115;
                  }
                }
                else
                {
                  v74 = 0;
                  v75 = (char *)(4 * v70);
                  *(_DWORD *)(4 * v70) = v63;
                  v68 = 4 * v70 + 4;
                  if (v67 != v69)
                    goto LABEL_92;
                }
                v56 = v217;
                goto LABEL_112;
              }
              if (v65)
                goto LABEL_126;
              *((_QWORD *)v226 + (v63 >> 6)) = v64 | (1 << v63);
              v66 = v233;
              if (v233 < v234)
              {
                *(_DWORD *)v233 = v63;
                v233 = v66 + 4;
                goto LABEL_126;
              }
              v77 = (char *)v232;
              v78 = v233 - (_BYTE *)v232;
              v79 = (v233 - (_BYTE *)v232) >> 2;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v81 = v234 - (_BYTE *)v232;
              if ((v234 - (_BYTE *)v232) >> 1 > v80)
                v80 = v81 >> 1;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                v82 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                if (v82 >> 62)
LABEL_296:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(4 * v82);
                v84 = &v83[4 * v79];
                *(_DWORD *)v84 = v63;
                v85 = (uint64_t)(v84 + 4);
                if (v66 == v77)
                {
LABEL_117:
                  v56 = v217;
                  goto LABEL_123;
                }
              }
              else
              {
                v83 = 0;
                v84 = (char *)(4 * v79);
                *(_DWORD *)(4 * v79) = v63;
                v85 = 4 * v79 + 4;
                if (v66 == v77)
                  goto LABEL_117;
              }
              v86 = v66 - 4 - v77;
              if (v86 >= 0x2C)
              {
                v95 = v66 - &v83[v78];
                v56 = v217;
                if (v95 >= 0x20)
                {
                  v96 = (v86 >> 2) + 1;
                  v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                  v98 = &v66[-v97];
                  v84 -= v97;
                  v99 = &v83[4 * v79 - 16];
                  v100 = v66 - 16;
                  v101 = v96 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v102 = *(_OWORD *)v100;
                    *((_OWORD *)v99 - 1) = *((_OWORD *)v100 - 1);
                    *(_OWORD *)v99 = v102;
                    v99 -= 32;
                    v100 -= 32;
                    v101 -= 8;
                  }
                  while (v101);
                  v66 = v98;
                  if (v96 == (v96 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_123;
                }
              }
              else
              {
                v56 = v217;
              }
              do
              {
                v103 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *((_DWORD *)v84 - 1) = v103;
                v84 -= 4;
              }
              while (v66 != v77);
LABEL_123:
              v232 = v84;
              v233 = (char *)v85;
              v234 = &v83[4 * v82];
              if (v77)
                operator delete(v77);
              LOBYTE(v58) = v218;
              v233 = (char *)v85;
LABEL_126:
              v104 = (uint64_t)(int)v63 >> 1;
              v105 = *(_QWORD *)(v31 + 120);
              v106 = *(_DWORD *)(v105 + 8 * ((int)v63 >> 1));
              if (v106 >> 28 == 3)
              {
                v104 = *(int *)(*(_QWORD *)(v31 + 152) + 4 * v104);
                v107 = *(_DWORD *)(v105 + 8 * v104) >> 28;
                if (!v107)
                  goto LABEL_131;
              }
              else
              {
                v107 = v106 >> 28;
                if (!v107)
                {
LABEL_131:
                  if (*(_DWORD *)(*(_QWORD *)(v31 + 248) + 4 * v104) == v56)
                    goto LABEL_75;
                  goto LABEL_132;
                }
              }
              if (v107 == v56)
                goto LABEL_75;
LABEL_132:
              v108 = v63;
              v109 = v242;
              if (v242 < v243)
              {
                *v242 = v219 | ((unint64_t)v63 << 32);
                v62 = v109 + 1;
                goto LABEL_74;
              }
              v110 = v241;
              v111 = ((char *)v242 - (char *)v241) >> 3;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v113 = (char *)v243 - (char *)v241;
              if (((char *)v243 - (char *)v241) >> 2 > v112)
                v112 = v113 >> 2;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                if (v114 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v115 = operator new(8 * v114);
              }
              else
              {
                v115 = 0;
              }
              v116 = (uint64_t *)&v115[8 * v111];
              *v116 = v219 | (v108 << 32);
              v62 = (unint64_t *)(v116 + 1);
              if (v109 == (unint64_t *)v110)
              {
                LOBYTE(v58) = v218;
                v241 = (uint64_t *)&v115[8 * v111];
                v243 = (unint64_t *)&v115[8 * v114];
                if (!v109)
                  goto LABEL_74;
LABEL_154:
                operator delete(v109);
                goto LABEL_74;
              }
              v117 = (char *)(v109 - 1) - (char *)v110;
              if (v117 < 0x58)
              {
                LOBYTE(v58) = v218;
                do
                {
LABEL_152:
                  v125 = *--v109;
                  *--v116 = v125;
                }
                while (v109 != (unint64_t *)v110);
                goto LABEL_153;
              }
              LOBYTE(v58) = v218;
              if ((unint64_t)((char *)v110 - v115) < 0x20)
                goto LABEL_152;
              v118 = (v117 >> 3) + 1;
              v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
              v120 = (char *)&v109[v119 / 0xFFFFFFFFFFFFFFF8];
              v116 = (uint64_t *)((char *)v116 - v119);
              v121 = &v115[8 * v111 - 16];
              v122 = (char *)(v109 - 2);
              v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *v121 = v124;
                v121 -= 2;
                v122 -= 32;
                v123 -= 4;
              }
              while (v123);
              v109 = (unint64_t *)v120;
              if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_152;
LABEL_153:
              v109 = (unint64_t *)v241;
              v241 = v116;
              v243 = (unint64_t *)&v115[8 * v114];
              if (v109)
                goto LABEL_154;
LABEL_74:
              v242 = v62;
LABEL_75:
              ++v61;
            }
            while (v61 < *(int *)(v31 + 12));
          }
          v11 = v213;
          v14 = v211;
          v13 = v212;
          if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v213))
            goto LABEL_260;
          v126 = v235;
          v127 = (int *)v236;
          v128 = (int *)v235;
          if (v235 != v236)
          {
            do
              operations_research::sat::SatSolver::AddUnitClause((uint64_t)v213, *v128++);
            while (v128 != v127);
          }
          v236 = v126;
          if (!operations_research::sat::SatSolver::FinishPropagation(v213))
            goto LABEL_260;
          v129 = (unint64_t *)v241;
          v130 = (int *)v242;
          v131 = (int *)v241;
          v132 = (char *)v242 - (char *)v241;
          if (v242 != (unint64_t *)v241)
          {
            do
            {
              operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v213, *v131, v131[1]);
              v131 += 2;
            }
            while (v131 != v130);
          }
          v242 = v129;
          v56 = v217;
          if (!operations_research::sat::SatSolver::FinishPropagation(v213))
            goto LABEL_260;
          v216 += v132 >> 3;
        }
      }
      ++v55;
    }
    while (v55 != 2);
    v133 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v239 - v238) >> 2));
    if (v239 == v238)
      v134 = 0;
    else
      v134 = v133;
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>((uint64_t)v238, (unint64_t)v239, v134, 1);
    v135 = v239;
    if (v239 >= v240)
    {
      v137 = v238;
      v138 = 0xAAAAAAAAAAAAAAABLL * ((v239 - v238) >> 2);
      v139 = v138 + 1;
      if (v138 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v240 - v238) >> 2) > v139)
        v139 = 0x5555555555555556 * ((v240 - v238) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v240 - v238) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v140 = 0x1555555555555555;
      else
        v140 = v139;
      if (v140)
      {
        if (v140 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v141 = (char *)operator new(12 * v140);
      }
      else
      {
        v141 = 0;
      }
      v142 = &v141[12 * v138];
      *(_DWORD *)v142 = -1;
      *(_QWORD *)(v142 + 4) = 0;
      v143 = v142;
      if (v135 != v137)
      {
        do
        {
          v144 = *(_QWORD *)(v135 - 12);
          v135 -= 12;
          v145 = *((_DWORD *)v135 + 2);
          *(_QWORD *)(v143 - 12) = v144;
          v143 -= 12;
          *((_DWORD *)v143 + 2) = v145;
        }
        while (v135 != v137);
        v135 = v238;
      }
      v136 = v142 + 12;
      v238 = v143;
      v239 = v142 + 12;
      v240 = &v141[12 * v140];
      if (v135)
        operator delete(v135);
    }
    else
    {
      *(_DWORD *)v239 = -1;
      *(_QWORD *)(v135 + 4) = 0;
      v136 = v135 + 12;
    }
    v239 = v136;
    v146 = v238;
    if (v136 != v238)
    {
      v147 = 0;
      v148 = 0x7FFFFFFFFFFFFFFELL;
      v149 = -1;
      v150 = 0x8000000000000002;
      v151 = (uint64_t)v215;
      while (1)
      {
        v152 = *(_DWORD *)&v146[12 * v147];
        if (v147)
        {
          if ((v152 & 0xFFFFFFFE) != v149)
            break;
        }
LABEL_239:
        v146 = v238;
        v176 = *(_QWORD *)&v238[12 * v147 + 4];
        if (v148 >= -v176)
          v177 = -v176;
        else
          v177 = v148;
        if (v150 <= v176)
          v178 = *(_QWORD *)&v238[12 * v147 + 4];
        else
          v178 = v150;
        if ((v152 & 1) != 0)
          v148 = v177;
        else
          v150 = v178;
        if (v147 && *(_DWORD *)&v238[12 * v147 - 12] == v152)
        {
          if (v176 >= *(_QWORD *)&v238[12 * v147 - 8])
            v176 = *(_QWORD *)&v238[12 * v147 - 8];
          if (v176 > *(_QWORD *)(*(_QWORD *)(v151 + 40) + 12 * v152))
          {
            *(_DWORD *)v224 = v152;
            *(_QWORD *)&v224[4] = v176;
            v179 = v206 & 0xFFFFFFFF00000000 | HIDWORD(v176);
            if (!operations_research::sat::IntegerTrail::Enqueue(v151, *(uint64_t *)v224, SHIDWORD(v176), 0, 0, 0, 0))goto LABEL_260;
            v206 = v179;
            ++HIDWORD(v210);
            v146 = v238;
          }
        }
        ++v147;
        v149 = v152 & 0xFFFFFFFE;
        if (0xAAAAAAAAAAAAAAABLL * ((v239 - v146) >> 2) <= v147)
          goto LABEL_257;
      }
      v153 = v148 + 1;
      if (v153 >= v150)
      {
LABEL_238:
        v148 = 0x7FFFFFFFFFFFFFFELL;
        v150 = 0x8000000000000002;
        goto LABEL_239;
      }
      v154 = v151;
      v155 = v149;
      v156 = operations_research::sat::IntegerTrail::InitialVariableDomain(v154, v149);
      *(_QWORD *)v224 = 0;
      v157 = *(_QWORD *)v156;
      if ((*(_QWORD *)v156 & 1) == 0)
      {
        *(_QWORD *)v224 = *(_QWORD *)v156;
        *(_OWORD *)&v224[8] = *(_OWORD *)(v156 + 8);
        goto LABEL_201;
      }
      v158 = *(__int128 **)(v156 + 8);
      v159 = v157 >> 1;
      if (v157 < 4)
      {
        v160 = &v224[8];
        if (v157 >= 2)
          goto LABEL_198;
        v161 = 0;
      }
      else
      {
        if (v157 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v160 = operator new(16 * v159);
        *(_QWORD *)&v224[8] = v160;
        *(_QWORD *)&v224[16] = v157 >> 1;
        *(_QWORD *)v224 = 1;
        do
        {
LABEL_198:
          v162 = *v158++;
          *v160++ = v162;
          --v159;
        }
        while (v159);
        v161 = *(_QWORD *)v224;
      }
      *(_QWORD *)v224 = v161 + (v157 & 0xFFFFFFFFFFFFFFFELL);
LABEL_201:
      operations_research::Domain::Domain(v222, v153, v150 - 1);
      operations_research::Domain::Complement((operations_research::Domain *)v222, (unint64_t *)v223);
      operations_research::Domain::IntersectionWith(v224, (const operations_research::Domain *)v223, &v244);
      if (((uint64_t)v223[0] & 1) != 0)
        operator delete(v223[1]);
      if (((uint64_t)v222[0] & 1) != 0)
        operator delete(v222[1]);
      v163 = v244;
      v164 = (__int128 *)v245;
      v165 = &v245;
      if ((v244 & 1) != 0)
        v165 = (__int128 *)v245;
      v166 = v244 >> 1;
      v167 = v244 >> 1;
      if (v167 == *(_QWORD *)v224 >> 1)
      {
        if (v244 >= 2)
        {
          v168 = &v165[v167];
          v169 = &v224[8];
          if ((v224[0] & 1) != 0)
            v169 = *(_QWORD **)&v224[8];
          while (*(_QWORD *)v165 == *v169 && *((_QWORD *)v165 + 1) == v169[1])
          {
            ++v165;
            v169 += 2;
            if (v165 == v168)
              goto LABEL_217;
          }
          goto LABEL_219;
        }
LABEL_217:
        v151 = (uint64_t)v215;
        v171 = 1;
        if ((v244 & 1) == 0)
        {
LABEL_234:
          if ((v224[0] & 1) != 0)
          {
            operator delete(*(void **)&v224[8]);
            if ((v171 & 1) == 0)
              break;
          }
          else if ((v171 & 1) == 0)
          {
            break;
          }
          goto LABEL_238;
        }
LABEL_233:
        operator delete((void *)v245);
        goto LABEL_234;
      }
LABEL_219:
      v220 = 0;
      if ((v244 & 1) == 0)
      {
        v220 = v244;
        v221 = v245;
        goto LABEL_229;
      }
      if (v244 < 4)
      {
        v172 = &v221;
        if (v244 >= 2)
          goto LABEL_226;
        v173 = 0;
      }
      else
      {
        if (v244 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v172 = (__int128 *)operator new(v167 * 16);
        *(_QWORD *)&v221 = v172;
        *((_QWORD *)&v221 + 1) = v163 >> 1;
        v220 = 1;
        do
        {
LABEL_226:
          v174 = *v164++;
          *v172++ = v174;
          --v166;
        }
        while (v166);
        v173 = v220;
      }
      v220 = v173 + (v163 & 0xFFFFFFFFFFFFFFFELL);
LABEL_229:
      updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v215, v155, (operations_research::Domain *)&v220);
      if ((v220 & 1) != 0)
        operator delete((void *)v221);
      ++v209;
      v151 = (uint64_t)v215;
      if ((updated & 1) != 0)
      {
        v171 = 1;
        if ((v244 & 1) == 0)
          goto LABEL_234;
      }
      else
      {
        v171 = 0;
        if ((v244 & 1) == 0)
          goto LABEL_234;
      }
      goto LABEL_233;
    }
LABEL_257:
    v11 = v213;
    v17 = operations_research::sat::SatSolver::FinishPropagation(v213);
    v32 = v216;
    v8 = v201;
    v14 = v211;
    v13 = v212;
    if ((v17 & 1) == 0)
      break;
LABEL_258:
    if (++v8 == v203)
      goto LABEL_273;
  }
LABEL_260:
  v12 = 0;
  v180 = (char *)v232;
  if (!v232)
    goto LABEL_262;
LABEL_261:
  v233 = v180;
  operator delete(v180);
LABEL_262:
  if (v226)
  {
    v227 = (char *)v226;
    operator delete(v226);
  }
  if (v235)
    operator delete(v235);
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v241)
    operator delete(v241);
  return v12;
}

void sub_22DBD0F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a44);
}

void sub_22DBD0F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,char a44,void *a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;
  void *v49;
  void *v51;

  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(&a47);
  v51 = *(void **)(v47 - 256);
  if (v51)
  {
    *(_QWORD *)(v47 - 248) = v51;
    operator delete(v51);
    v48 = *(void **)(v47 - 232);
    if (v48)
    {
LABEL_7:
      *(_QWORD *)(v47 - 224) = v48;
      operator delete(v48);
      v49 = *(void **)(v47 - 208);
      if (v49)
      {
LABEL_8:
        *(_QWORD *)(v47 - 200) = v49;
        operator delete(v49);
        _Unwind_Resume(a1);
      }
LABEL_4:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v48 = *(void **)(v47 - 232);
    if (v48)
      goto LABEL_7;
  }
  v49 = *(void **)(v47 - 208);
  if (v49)
    goto LABEL_8;
  goto LABEL_4;
}

uint64_t operations_research::sat::LookForTrivialSatSolution(_BOOL8 this, double a2, operations_research::sat::Model *a3)
{
  int v3;
  operations_research::sat *v4;
  int v6;
  operations_research::sat::SatSolver *v7;
  uint64_t v8;
  _QWORD *v9;
  operations_research::sat::SatParameters *v10;
  absl::lts_2020_02_25 *v11;
  operations_research::sat *v12;
  int v13;
  int v14;
  double v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19;
  uint64_t v20;
  absl::lts_2020_02_25 *v21;
  double v22;
  double v23;
  int v24;
  double v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  absl::lts_2020_02_25 *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *__s;
  _BYTE v41[16];
  _BYTE v42[16];
  _BYTE v43[12];
  char v44;
  int v45;
  uint64_t v46;
  double v47;
  _BYTE v48[584];

  v3 = (int)a3;
  v4 = (operations_research::sat *)this;
  if (*operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__[0] < 1)
  {
    v6 = 0;
  }
  else if (operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__[0] == &google::kLogSiteUninitialized)
  {
    this = google::InitVLOG3__((google *)operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
    v6 = this;
  }
  else
  {
    v6 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v4);
  operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t *)v7, 0);
  v8 = 0;
  if (operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v7))
  {
    v9 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v4);
    v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v48, v10);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v42, (const operations_research::sat::SatParameters *)v48);
    v44 = 0;
    *(int8x8_t *)v43 = vorr_s8(*(int8x8_t *)v43, (int8x8_t)0x4000000000000400);
    v46 = 1;
    *(_DWORD *)&v43[8] |= 0x8000u;
    v47 = a2;
    v11 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)v4);
    v12 = v11;
    v13 = 0;
    v14 = v6 | v3;
    __s = " (Aborted)";
    v15 = 0.0;
    do
    {
      v16 = (unsigned __int8 *)v9[15];
      if (v16)
      {
        v17 = atomic_load(v16);
        if ((v17 & 1) != 0)
          goto LABEL_26;
      }
      if (fmax(*((double *)v9 + 13) - *((double *)v9 + 14), 0.0) <= 0.0)
        goto LABEL_26;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v11);
      v19 = CurrentTimeNanos;
      if (v9[3] <= CurrentTimeNanos - v9[1])
        v20 = CurrentTimeNanos - v9[1];
      else
        v20 = v9[3];
      operations_research::RunningMax<long long>::Add((int *)v9 + 8, v20);
      v9[1] = v19;
      if (*(_QWORD *)(v9[5] + 8 * *((int *)v9 + 17)) + v19 >= v9[2])
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_18;
        v22 = *((double *)v9 + 12);
        if (*((_BYTE *)v9 + 72))
        {
          v23 = v22 + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v21) - v9[10] + v9[11]) * -0.000000001;
          if (v23 <= 0.0001)
            goto LABEL_18;
        }
        else
        {
          v23 = v22 + (double)(uint64_t)v9[11] * -0.000000001;
          if (v23 <= 0.0001)
          {
LABEL_18:
            v9[2] = 0;
            goto LABEL_26;
          }
        }
        v9[2] = v9[1] + (uint64_t)(v23 * 1000000000.0);
      }
      if (v15 > a2)
        goto LABEL_26;
      operations_research::sat::SatSolver::SetParameters((operations_research::sat::SatParameters **)v7, (const operations_research::sat::SatParameters *)v42);
      operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(*((operations_research::sat::SatDecisionPolicy **)v7
                                                                          + 30));
      v24 = operations_research::sat::SatSolver::SolveWithTimeLimit(v7, (operations_research::TimeLimit *)v9);
      v25 = *((double *)v9 + 14);
      v15 = v15 + v25;
      v8 = v24 == 2;
      if (v24 == 2)
      {
        if (v14)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 299);
          v37 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Trivial exploration found feasible solution!", 44);
          goto LABEL_35;
        }
LABEL_37:
        *((double *)v9 + 14) = v15 + v25;
        goto LABEL_38;
      }
      if ((operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v7) & 1) == 0)
      {
        if (v14)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 305);
          v38 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"UNSAT during trivial exploration heuristic.", 43);
LABEL_35:
          google::LogMessage::~LogMessage((google::LogMessage *)v41);
        }
        v25 = *((double *)v9 + 14);
        goto LABEL_37;
      }
      operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(v12, (uint64_t)v42);
      v45 = v13;
      *(int8x8_t *)&v43[4] = vorr_s8(*(int8x8_t *)&v43[4], (int8x8_t)0x800008000000);
      v47 = a2 - v15;
      ++v13;
    }
    while (v13 != 1000);
    __s = "";
LABEL_26:
    operations_research::sat::SatSolver::SetParameters((operations_research::sat::SatParameters **)v7, (const operations_research::sat::SatParameters *)v48);
    operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(*((operations_research::sat::SatDecisionPolicy **)v7
                                                                        + 30));
    *((double *)v9 + 14) = v15 + *((double *)v9 + 14);
    if (operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v7))
    {
      if (v14)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 328);
        v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Random exploration.", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" num_fixed: +", 13);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (", 2);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
        v30 = (_QWORD *)std::ostream::operator<<();
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" dtime: ", 8);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"/", 1);
        v33 = (_QWORD *)std::ostream::operator<<();
        v34 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v34);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = strlen(__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)__s, v36);
        google::LogMessage::~LogMessage((google::LogMessage *)v41);
      }
      v8 = operations_research::sat::SatSolver::FinishPropagation(v7);
    }
    else
    {
      v8 = 0;
    }
LABEL_38:
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v42);
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v48);
  }
  return v8;
}

void sub_22DBD15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)va);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::FailedLiteralProbingRound(absl::lts_2020_02_25 *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  operations_research::sat::SatSolver *v6;
  uint64_t v7;
  operations_research::sat::BinaryImplicationGraph *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  absl::lts_2020_02_25 *v19;
  operations_research::sat::LiteralWatchers *v20;
  operations_research::sat::BinaryImplicationGraph *v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  std::vector<int>::pointer begin;
  int8x16_t *v33;
  uint64_t v34;
  double v35;
  double *v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t *v40;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41;
  uint64_t v42;
  absl::lts_2020_02_25 *v43;
  double v44;
  double v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  int8x16_t *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int *v61;
  int *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  double *v68;
  unint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  int8x16_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int8x16_t *v94;
  int8x16_t *v95;
  uint64_t v96;
  int8x16_t v97;
  int8x16_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  signed int v102;
  signed int v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  int *v107;
  int *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  int *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  char *v121;
  int *v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  int *v131;
  int *v132;
  unint64_t v133;
  unint64_t v134;
  int8x16_t *v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  int8x16_t *v143;
  unint64_t v144;
  int8x16_t *v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  double v150;
  int8x16_t *v151;
  int v152;
  __int32 v153;
  unsigned int v154;
  int *v155;
  uint64_t v156;
  int *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  int v169;
  _QWORD *v170;
  unint64_t v171;
  int *v172;
  uint64_t v173;
  int *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void *v181;
  char *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  char *v188;
  int *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  _OWORD *v197;
  int *v198;
  uint64_t v199;
  __int128 v200;
  unsigned int v201;
  int8x16_t *v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  absl::lts_2020_02_25 **v219;
  absl::lts_2020_02_25 *v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  int v227;
  int *v228;
  int *v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  int *v233;
  unint64_t v234;
  uint64_t v235;
  int32x4_t v236;
  int32x4_t *v237;
  int32x4_t v238;
  uint64_t v239;
  int32x4_t v240;
  int *v241;
  int v242;
  int v243;
  int v244;
  _DWORD *v245;
  uint64_t v246;
  std::vector<int>::value_type v247;
  uint64_t v248;
  int *v249;
  int *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t *v262;
  uint64_t v263;
  __int128 v264;
  unint64_t *v265;
  int *v266;
  int *v267;
  absl::lts_2020_02_25 *v268;
  double *v269;
  unsigned __int8 *v270;
  double v271;
  unsigned __int8 v272;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v273;
  double *v274;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v275;
  uint64_t v276;
  absl::lts_2020_02_25 *v277;
  double v278;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v279;
  void *v280;
  _BOOL4 v282;
  google::LogMessage *v283;
  _QWORD *v284;
  double v285;
  google::LogMessage *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  absl::lts_2020_02_25 *v299;
  _QWORD *v300;
  const char *v301;
  uint64_t v302;
  google::LogMessage *v303;
  _QWORD *v304;
  unint64_t *v305;
  unint64_t *v306;
  unint64_t *v307;
  int v308;
  int v309;
  int v310[2];
  char *v311;
  uint64_t v312;
  unsigned int *v313;
  unint64_t *v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  operations_research::sat::LiteralWatchers *v319;
  uint64_t v320;
  int v321;
  _QWORD *v322;
  int8x16_t *v323;
  int8x16_t *v324;
  uint64_t *v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  operations_research::sat::SatSolver *v330;
  uint64_t v331;
  int8x16_t *v332;
  int8x16_t *v333;
  int8x16_t *v334;
  int32x4_t v335;
  uint64_t *v337;
  signed int v338;
  void *__p;
  char *v340;
  char *v341;
  std::vector<int>::value_type __x[2];
  int *v343;
  char *v344;
  std::vector<int> v345;
  std::vector<int> v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  void *v355;
  uint64_t v356;
  std::vector<int>::value_type __u[5];
  _DWORD v358[3];

  absl::lts_2020_02_25::GetCurrentTimeNanos(a1);
  if (*operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__ < 1)
    v5 = 0;
  else
    v5 = operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
      || google::InitVLOG3__((google *)&operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a3);
  operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t *)v6, 0);
  v330 = v6;
  v7 = 0;
  if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v6))
    return v7;
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a3);
  v7 = 0;
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v8, 0))
    return v7;
  v9 = (uint64_t)v6;
  if (!operations_research::sat::SatSolver::FinishPropagation(v6))
    return 0;
  v322 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a3);
  v10 = *((double *)v322 + 14);
  v11 = *((int *)v6 + 4);
  v12 = 2 * v11;
  v309 = *((_DWORD *)v6 + 4);
  v326 = (uint64_t)v8;
  if ((int)v11 <= 0)
  {
    LODWORD(v347) = 0;
    v349 = 0;
    v350 = 0;
    v348 = 0;
  }
  else
  {
    LODWORD(v347) = 2 * v11;
    v349 = 0;
    v350 = 0;
    v348 = 0;
    if ((unint64_t)(v12 + 63) >= 0x40)
    {
      v348 = (char *)operator new(((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      v350 = &v348[((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8];
      bzero(v348, ((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      v349 = v350;
    }
  }
  v351 = &v347;
  v352 = 0xFFFFFFFFLL;
  v353 = 0;
  v354 = 0;
  v355 = 0;
  v356 = 0;
  v13 = *(_QWORD **)(a3 + 32);
  if (!v13)
    goto LABEL_25;
  v14 = a3 + 32;
  do
  {
    v15 = v13[4];
    v16 = v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
      v17 = v13;
    else
      v17 = v13 + 1;
    if (v16)
      v14 = (uint64_t)v13;
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 != a3 + 32
    && *(_QWORD *)(v14 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
  {
    v18 = *(_QWORD *)(v14 + 40);
  }
  else
  {
LABEL_25:
    v18 = 0;
  }
  v19 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(a3);
  v20 = v19;
  v327 = *((_DWORD *)v8 + 8);
  v321 = *((_DWORD *)v19 + 8);
  memset(&v346, 0, sizeof(v346));
  memset(&v345, 0, sizeof(v345));
  if ((a2 & 0x10000) == 0)
  {
    __x[0] = 0;
    if (v309)
      std::vector<int>::__append(&v345, (int)v12, __x);
  }
  *(_QWORD *)__x = 0;
  v343 = 0;
  v344 = 0;
  if (!*((_BYTE *)v8 + 512))
  {
    v303 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 546);
    v304 = (_QWORD *)google::LogMessage::stream(v303);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"Check failed: is_dag_ ", 22);
    goto LABEL_400;
  }
  __p = 0;
  v340 = 0;
  v341 = 0;
  v21 = v8;
  v22 = (_BYTE *)*((_QWORD *)v8 + 65);
  v23 = (_BYTE *)*((_QWORD *)v21 + 66);
  v24 = v23 - v22;
  if (v23 != v22)
  {
    if (v24 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v23 - v22);
    v26 = &v25[4 * (v24 >> 2)];
    __p = v25;
    v341 = v26;
    v19 = (absl::lts_2020_02_25 *)memcpy(v25, v22, v24);
    v340 = v26;
    if ((a2 & 0x101) != 0)
      goto LABEL_40;
    goto LABEL_35;
  }
  v26 = 0;
  v25 = 0;
  if ((a2 & 0x101) == 0)
  {
LABEL_35:
    if (v25 != v26)
    {
      v27 = v26 - 4;
      if (v26 - 4 > v25)
      {
        v28 = v25 + 4;
        do
        {
          v29 = *((_DWORD *)v28 - 1);
          *((_DWORD *)v28 - 1) = *(_DWORD *)v27;
          *(_DWORD *)v27 = v29;
          v27 -= 4;
          v16 = v28 >= v27;
          v28 += 4;
        }
        while (!v16);
      }
    }
  }
LABEL_40:
  if ((a2 & 0x10000) != 0)
  {
    __u[0] = -1;
    std::vector<int>::assign(&v346, (int)v12, __u);
    if (v26 != v25)
    {
      v30 = 0;
      v31 = (v26 - v25) >> 2;
      begin = v346.__begin_;
      if (v31 <= 1)
        v31 = 1;
      do
      {
        begin[*(int *)&v25[4 * v30]] = v30;
        ++v30;
      }
      while (v31 != v30);
    }
  }
  v323 = 0;
  v324 = 0;
  v33 = 0;
  v315 = 0;
  v316 = 0;
  v331 = 0;
  v34 = 0;
  v320 = 0;
  v308 = BYTE4(a2) & 1 | v5;
  v35 = v10 + *(double *)&a1;
  v36 = (double *)v322;
  v317 = 0;
  v318 = (int *)(v322 + 4);
  v319 = v20;
  while (1)
  {
    v37 = (unsigned __int8 *)*((_QWORD *)v36 + 15);
    if (v37)
    {
      v38 = atomic_load(v37);
      if ((v38 & 1) != 0)
        goto LABEL_367;
    }
    if (fmax(v36[13] - v36[14], 0.0) <= 0.0)
      goto LABEL_367;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v19);
    v40 = (uint64_t *)v324;
    v41 = CurrentTimeNanos;
    if (*((_QWORD *)v36 + 3) <= CurrentTimeNanos - *((_QWORD *)v36 + 1))
      v42 = CurrentTimeNanos - *((_QWORD *)v36 + 1);
    else
      v42 = *((_QWORD *)v36 + 3);
    operations_research::RunningMax<long long>::Add(v318, v42);
    *((_QWORD *)v36 + 1) = v41;
    if (*(_QWORD *)(*((_QWORD *)v36 + 5) + 8 * *((int *)v36 + 17)) + v41 >= *((_QWORD *)v36 + 2))
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_366;
      v44 = v36[12];
      if (*((_BYTE *)v36 + 72))
      {
        v45 = v44
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v43) - *((_QWORD *)v36 + 10) + *((_QWORD *)v36 + 11))
            * -0.000000001;
        if (v45 <= 0.0001)
          goto LABEL_366;
      }
      else
      {
        v45 = v44 + (double)*((uint64_t *)v36 + 11) * -0.000000001;
        if (v45 <= 0.0001)
        {
LABEL_366:
          v36[2] = 0.0;
          goto LABEL_367;
        }
      }
      *((_QWORD *)v36 + 2) = *((_QWORD *)v36 + 1) + (uint64_t)(v45 * 1000000000.0);
    }
    if (v36[14] > v35)
      goto LABEL_367;
    if ((a2 & 0x100) == 0)
      operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, 0);
    v338 = -1;
    v328 = v34;
    if ((a2 & 0x10000) == 0)
    {
      v46 = v324;
      v47 = v33;
      goto LABEL_167;
    }
    v48 = *(_DWORD *)(v9 + 304);
    if (v48 < 1)
      goto LABEL_168;
    v332 = v33;
    v49 = (_QWORD *)(*(_QWORD *)(v326 + 192)
                   + 32 * (*(int *)(*(_QWORD *)(v9 + 312) + 8 * (v48 - 1) + 4) ^ 1));
    v52 = *v49;
    v51 = (unsigned int *)(v49 + 1);
    v50 = v52;
    if ((v52 & 1) != 0)
      v51 = *(unsigned int **)v51;
    if (v50 >= 2)
    {
      v54 = &v51[v50 >> 1];
      v47 = v332;
      v46 = v324;
      v313 = v54;
      while (1)
      {
        v55 = *v51;
        v56 = v55 ^ 1;
        v57 = (int)(v55 ^ 1);
        v58 = v57 >> 6;
        if (((*(_QWORD *)&v348[8 * (v57 >> 6)] >> (v55 ^ 1u)) & 1) != 0)
          goto LABEL_72;
        v59 = v346.__begin_[v57];
        if (v59 == -1)
          goto LABEL_72;
        v60 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * v58);
        if (((v60 >> (v56 & 0x3E)) & 3) != 0)
        {
          if (((v60 >> (v56 & 0x3F ^ 1)) & 1) != 0)
          {
            v61 = v343;
            if (v343 >= (int *)v344)
            {
              v62 = *(int **)__x;
              v63 = (char *)v343 - *(_QWORD *)__x;
              v64 = ((uint64_t)v343 - *(_QWORD *)__x) >> 2;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v66 = (uint64_t)&v344[-*(_QWORD *)__x];
              if ((uint64_t)&v344[-*(_QWORD *)__x] >> 1 > v65)
                v65 = v66 >> 1;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                v67 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
              {
                v311 = (char *)v343 - *(_QWORD *)__x;
                if (v67 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v68 = v36;
                v69 = v67;
                v70 = operator new(4 * v67);
                v67 = v69;
                v36 = v68;
                v63 = v311;
                v71 = (char *)v70 + 4 * v64;
                *(_DWORD *)v71 = v55;
                v72 = (uint64_t)(v71 + 4);
                if (v61 == v62)
                  goto LABEL_112;
LABEL_106:
                v83 = (char *)(v61 - 1) - (char *)v62;
                if (v83 < 0x2C)
                  goto LABEL_433;
                if ((unint64_t)((char *)v61 - &v63[(_QWORD)v70]) < 0x20)
                  goto LABEL_433;
                v84 = (v83 >> 2) + 1;
                v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
                v86 = &v61[v85 / 0xFFFFFFFFFFFFFFFCLL];
                v71 -= v85;
                v87 = (char *)v70 + 4 * v64 - 16;
                v88 = v61 - 4;
                v89 = v84 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v90 = *(_OWORD *)v88;
                  *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                  *(_OWORD *)v87 = v90;
                  v87 -= 32;
                  v88 -= 8;
                  v89 -= 8;
                }
                while (v89);
                v61 = v86;
                if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_433:
                  do
                  {
                    v91 = *--v61;
                    *((_DWORD *)v71 - 1) = v91;
                    v71 -= 4;
                  }
                  while (v61 != v62);
                }
              }
              else
              {
                v70 = 0;
                v71 = (char *)(4 * v64);
                *(_DWORD *)(4 * v64) = v55;
                v72 = 4 * v64 + 4;
                if (v61 != v62)
                  goto LABEL_106;
              }
LABEL_112:
              *(_QWORD *)__x = v71;
              v343 = (int *)v72;
              v344 = (char *)v70 + 4 * v67;
              if (v62)
                operator delete(v62);
              v40 = (uint64_t *)v324;
              v54 = v313;
              v343 = (int *)v72;
              goto LABEL_72;
            }
            *v343 = v55;
            v343 = v61 + 1;
          }
        }
        else
        {
          v73 = v56 | ((unint64_t)-v59 << 32);
          if (v46 >= v323)
          {
            v74 = ((char *)v46 - (char *)v47) >> 3;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (((char *)v323 - (char *)v47) >> 2 > v75)
              v75 = ((char *)v323 - (char *)v47) >> 2;
            if ((unint64_t)((char *)v323 - (char *)v47) >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
            {
              if (v76 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v77 = operator new(8 * v76);
              v78 = (unint64_t *)&v77[8 * v74];
              *v78 = v73;
              v79 = (uint64_t)(v78 + 1);
              if (v46 != v47)
              {
LABEL_99:
                v80 = (char *)&v46[-1].u64[1] - (char *)v47;
                v36 = (double *)v322;
                if (v80 < 0x168)
                {
                  v81 = v46;
                  goto LABEL_101;
                }
                if (&v77[(char *)v46 - (char *)v47 - 8 - (v80 & 0xFFFFFFFFFFFFFFF8)] > &v77[(char *)v46
                                                                                             - (char *)v47
                                                                                             - 8])
                {
                  v81 = v46;
                  goto LABEL_101;
                }
                if ((unint64_t *)((char *)&v46[-1].u64[1] - (v80 & 0xFFFFFFFFFFFFFFF8)) > &v46[-1].u64[1])
                {
                  v81 = v46;
                  goto LABEL_101;
                }
                if ((unint64_t)((char *)v47 - v77) < 0x20)
                {
                  v81 = v46;
                  goto LABEL_101;
                }
                v92 = (v80 >> 3) + 1;
                v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
                v81 = (int8x16_t *)((char *)v46 - v93);
                v78 = (unint64_t *)((char *)v78 - v93);
                v94 = (int8x16_t *)&v77[8 * v74 - 16];
                v95 = v46 - 1;
                v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v97 = *v95;
                  v94[-1] = v95[-1];
                  *v94 = v97;
                  v94 -= 2;
                  v95 -= 2;
                  v96 -= 4;
                }
                while (v96);
                if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_101:
                    v82 = v81[-1].u64[1];
                    v81 = (int8x16_t *)((char *)v81 - 8);
                    *--v78 = v82;
                  }
                  while (v81 != v47);
                }
                v323 = (int8x16_t *)&v77[8 * v76];
                if (v47)
LABEL_103:
                  operator delete(v47);
LABEL_104:
                v46 = (int8x16_t *)v79;
                v47 = (int8x16_t *)v78;
                v40 = (uint64_t *)v324;
                v54 = v313;
                goto LABEL_72;
              }
            }
            else
            {
              v77 = 0;
              v78 = (unint64_t *)(8 * v74);
              *(_QWORD *)(8 * v74) = v73;
              v79 = 8 * v74 + 8;
              if (v46 != v47)
                goto LABEL_99;
            }
            v36 = (double *)v322;
            v323 = (int8x16_t *)&v77[8 * v76];
            if (v47)
              goto LABEL_103;
            goto LABEL_104;
          }
          v46->i64[0] = v73;
          v46 = (int8x16_t *)((char *)v46 + 8);
          v36 = (double *)v322;
        }
LABEL_72:
        if (++v51 == v54)
        {
          v9 = (uint64_t)v330;
          v53 = v332;
          goto LABEL_129;
        }
      }
    }
    v46 = v324;
    v53 = v332;
    v47 = v332;
LABEL_129:
    v98 = (int8x16_t *)((char *)v47 + (((char *)v40 - (char *)v53) << 29 >> 29));
    v99 = 126 - 2 * __clz(((char *)v46 - (char *)v98) >> 3);
    if (v46 == v98)
      v100 = 0;
    else
      v100 = v99;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(v98, v46, v100, 1);
    if (v47 == v46)
    {
      v47 = v46;
      goto LABEL_167;
    }
    while (1)
    {
      v103 = v46[-1].i32[2];
      v46 = (int8x16_t *)((char *)v46 - 8);
      v102 = v103;
      if (v103 == -1)
      {
        v116 = *(_DWORD *)(v9 + 304);
        __u[0] = v116;
        v358[0] = 0;
        if (v116 < 1)
        {
          v337 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__u, (int)v358, "sat_solver->CurrentDecisionLevel() > 0");
          if (v337)
          {
            v306 = google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 457, &v337);
            google::LogMessage::stream((google::LogMessage *)v306);
            goto LABEL_400;
          }
          v116 = *(_DWORD *)(v9 + 304);
        }
        operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, v116 - 1);
        goto LABEL_136;
      }
      v104 = (unint64_t)v102 >> 6;
      if (((*(_QWORD *)&v348[8 * v104] >> v102) & 1) == 0)
        break;
LABEL_136:
      if (v47 == v46)
      {
        v46 = v47;
        goto LABEL_167;
      }
    }
    v105 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * v104);
    if (((v105 >> (v102 & 0x3E)) & 3) != 0)
    {
      if (((v105 >> (v102 & 0x3F ^ 1u)) & 1) == 0)
        goto LABEL_136;
      v106 = v102 ^ 1;
      v107 = v343;
      if (v343 < (int *)v344)
      {
        *v343 = v106;
        v101 = (uint64_t)(v107 + 1);
        v9 = (uint64_t)v330;
LABEL_135:
        v343 = (int *)v101;
        goto LABEL_136;
      }
      v108 = *(int **)__x;
      v109 = (char *)v343 - *(_QWORD *)__x;
      v110 = ((uint64_t)v343 - *(_QWORD *)__x) >> 2;
      v111 = v110 + 1;
      if ((unint64_t)(v110 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v112 = (uint64_t)&v344[-*(_QWORD *)__x];
      if ((uint64_t)&v344[-*(_QWORD *)__x] >> 1 > v111)
        v111 = v112 >> 1;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
        v113 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v113 = v111;
      if (v113)
      {
        if (v113 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v114 = operator new(4 * v113);
        v115 = (int *)((char *)v114 + 4 * v110);
        *v115 = v106;
        v101 = (uint64_t)(v115 + 1);
        if (v107 == v108)
          goto LABEL_161;
      }
      else
      {
        v114 = 0;
        v115 = (int *)(4 * v110);
        *(_DWORD *)(4 * v110) = v106;
        v101 = 4 * v110 + 4;
        if (v107 == v108)
        {
LABEL_161:
          *(_QWORD *)__x = v115;
          v343 = (int *)v101;
          v344 = (char *)v114 + 4 * v113;
          if (v108)
            operator delete(v108);
          v9 = (uint64_t)v330;
          v36 = (double *)v322;
          goto LABEL_135;
        }
      }
      v117 = (char *)(v107 - 1) - (char *)v108;
      if (v117 < 0x2C)
        goto LABEL_434;
      if ((unint64_t)((char *)v107 - &v109[(_QWORD)v114]) < 0x20)
        goto LABEL_434;
      v118 = (v117 >> 2) + 1;
      v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
      v120 = &v107[v119 / 0xFFFFFFFFFFFFFFFCLL];
      v115 = (int *)((char *)v115 - v119);
      v121 = (char *)v114 + 4 * v110 - 16;
      v122 = v107 - 4;
      v123 = v118 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v124 = *(_OWORD *)v122;
        *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
        *(_OWORD *)v121 = v124;
        v121 -= 32;
        v122 -= 8;
        v123 -= 8;
      }
      while (v123);
      v107 = v120;
      if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_434:
        do
        {
          v125 = *--v107;
          *--v115 = v125;
        }
        while (v107 != v108);
      }
      goto LABEL_161;
    }
    v338 = v102;
LABEL_167:
    v48 = *(_DWORD *)(v9 + 304);
    v40 = (uint64_t *)v46;
    v33 = v47;
    v34 = v328;
LABEL_168:
    v333 = v33;
    if (!v48)
      break;
    LODWORD(v126) = v338;
    if (v338 != -1)
      goto LABEL_189;
    *(_QWORD *)v310 = v48 - 1;
    v127 = *(int *)(*(_QWORD *)(v9 + 312) + 8 * *(_QWORD *)v310 + 4) ^ 1;
    v128 = (unint64_t *)(*(_QWORD *)(v326 + 192) + 32 * v127);
    v312 = v127;
    LODWORD(v129) = v345.__begin_[v127];
    v130 = *v128;
    if (*v128 < 2)
      goto LABEL_171;
    v165 = 0;
    v166 = v130 >> 1;
    v167 = v128 + 1;
    v314 = v128;
    v325 = v40;
    while (2)
    {
      v170 = v167;
      if ((v130 & 1) != 0)
        v170 = (_QWORD *)*v167;
      v129 = (int)v129 % v166;
      v168 = *((int *)v170 + (int)v129);
      v169 = *((_DWORD *)v170 + (int)v129) ^ 1;
      if (((1 << v169) & *(_QWORD *)&v348[8 * (v168 >> 6)]) != 0)
      {
        v33 = v333;
        goto LABEL_241;
      }
      v171 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * (v168 >> 6));
      if (((v171 >> (v169 & 0x3F ^ 1u)) & 1) != 0)
      {
        v172 = v343;
        if (v343 < (int *)v344)
        {
          *v343 = v168;
          v173 = (uint64_t)(v172 + 1);
          v33 = v333;
          v34 = v328;
          goto LABEL_270;
        }
        v174 = *(int **)__x;
        v175 = (char *)v343 - *(_QWORD *)__x;
        v176 = ((uint64_t)v343 - *(_QWORD *)__x) >> 2;
        v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v178 = (uint64_t)&v344[-*(_QWORD *)__x];
        if ((uint64_t)&v344[-*(_QWORD *)__x] >> 1 > v177)
          v177 = v178 >> 1;
        if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
          v179 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v179 = v177;
        if (v179)
        {
          if (v179 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v180 = v179;
          v181 = operator new(4 * v179);
          v179 = v180;
          v182 = (char *)v181 + 4 * v176;
          *(_DWORD *)v182 = v168;
          v173 = (uint64_t)(v182 + 4);
          if (v172 != v174)
          {
LABEL_258:
            v183 = (char *)(v172 - 1) - (char *)v174;
            v33 = v333;
            if (v183 < 0x2C)
            {
              v36 = (double *)v322;
              goto LABEL_266;
            }
            v184 = (char *)v172 - &v175[(_QWORD)v181];
            v36 = (double *)v322;
            if (v184 < 0x20)
              goto LABEL_435;
            v185 = (v183 >> 2) + 1;
            v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
            v187 = &v172[v186 / 0xFFFFFFFFFFFFFFFCLL];
            v182 -= v186;
            v188 = (char *)v181 + 4 * v176 - 16;
            v189 = v172 - 4;
            v190 = v185 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v191 = *(_OWORD *)v189;
              *((_OWORD *)v188 - 1) = *((_OWORD *)v189 - 1);
              *(_OWORD *)v188 = v191;
              v188 -= 32;
              v189 -= 8;
              v190 -= 8;
            }
            while (v190);
            v172 = v187;
            if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_435:
              do
              {
LABEL_266:
                v192 = *--v172;
                *((_DWORD *)v182 - 1) = v192;
                v182 -= 4;
              }
              while (v172 != v174);
            }
LABEL_267:
            *(_QWORD *)__x = v182;
            v343 = (int *)v173;
            v344 = (char *)v181 + 4 * v179;
            if (v174)
              operator delete(v174);
            v34 = v328;
            v9 = (uint64_t)v330;
            v40 = v325;
            v128 = v314;
LABEL_270:
            v343 = (int *)v173;
            v130 = *v128;
LABEL_241:
            ++v165;
            LODWORD(v129) = v129 + 1;
            v166 = v130 >> 1;
            if (v130 >> 1 <= v165)
              goto LABEL_171;
            continue;
          }
        }
        else
        {
          v181 = 0;
          v182 = (char *)(4 * v176);
          *(_DWORD *)(4 * v176) = v168;
          v173 = 4 * v176 + 4;
          if (v172 != v174)
            goto LABEL_258;
        }
        v33 = v333;
        v36 = (double *)v322;
        goto LABEL_267;
      }
      break;
    }
    v33 = v333;
    if ((v171 & (1 << v169)) != 0)
      goto LABEL_241;
    v338 = *((_DWORD *)v170 + (int)v129) ^ 1;
LABEL_171:
    v345.__begin_[v312] = v129;
    LODWORD(v126) = v338;
    if (v338 == -1)
    {
      v324 = (int8x16_t *)v40;
      operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, v310[0]);
      continue;
    }
LABEL_189:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(&v347, v126);
    if (v338 == -1)
    {
      v337 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>((int)&v338, (int)&operations_research::sat::kNoLiteralIndex, "next_decision != kNoLiteralIndex");
      if (v337)
      {
        v265 = google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 531, &v337);
        google::LogMessage::stream((google::LogMessage *)v265);
        goto LABEL_400;
      }
    }
    if (v40 < (uint64_t *)v323)
    {
      *v40 = 0xFFFFFFFFLL;
      v135 = (int8x16_t *)(v40 + 1);
      goto LABEL_214;
    }
    v136 = (char *)v40 - (char *)v33;
    v137 = ((char *)v40 - (char *)v33) >> 3;
    v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v139 = v40;
    if (((char *)v323 - (char *)v33) >> 2 > v138)
      v138 = ((char *)v323 - (char *)v33) >> 2;
    if ((unint64_t)((char *)v323 - (char *)v33) >= 0x7FFFFFFFFFFFFFF8)
      v140 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    if (v140)
    {
      if (v140 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v141 = (char *)operator new(8 * v140);
    }
    else
    {
      v141 = 0;
    }
    v142 = &v141[8 * v137];
    *(_QWORD *)v142 = 0xFFFFFFFFLL;
    v135 = (int8x16_t *)(v142 + 8);
    v143 = (int8x16_t *)v139;
    if (v139 == (uint64_t *)v33)
    {
      v33 = (int8x16_t *)&v141[8 * v137];
      v9 = (uint64_t)v330;
      v323 = (int8x16_t *)&v141[8 * v140];
      if (v139)
        goto LABEL_213;
    }
    else
    {
      v144 = (char *)(v139 - 1) - (char *)v33;
      if (v144 < 0x168)
      {
        v145 = (int8x16_t *)v139;
        v9 = (uint64_t)v330;
        goto LABEL_211;
      }
      if (&v141[v136 - 8 - (v144 & 0xFFFFFFFFFFFFFFF8)] > &v141[v136 - 8]
        || (uint64_t *)((char *)v139 - (v144 & 0xFFFFFFFFFFFFFFF8) - 8) > v139 - 1
        || (unint64_t)((char *)v139 - &v141[v136]) < 0x20)
      {
        v145 = (int8x16_t *)v139;
        v9 = (uint64_t)v330;
        goto LABEL_211;
      }
      v259 = (v144 >> 3) + 1;
      v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
      v145 = (int8x16_t *)&v139[v260 / 0xFFFFFFFFFFFFFFF8];
      v142 -= v260;
      v261 = &v141[8 * v137 - 16];
      v262 = v139 - 2;
      v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
      v9 = (uint64_t)v330;
      do
      {
        v264 = *(_OWORD *)v262;
        *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
        *(_OWORD *)v261 = v264;
        v261 -= 32;
        v262 -= 4;
        v263 -= 4;
      }
      while (v263);
      if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_211:
          v146 = v145[-1].i64[1];
          v145 = (int8x16_t *)((char *)v145 - 8);
          *((_QWORD *)v142 - 1) = v146;
          v142 -= 8;
        }
        while (v145 != v33);
      }
      v143 = v33;
      v33 = (int8x16_t *)v142;
      v323 = (int8x16_t *)&v141[8 * v140];
      if (v143)
LABEL_213:
        operator delete(v143);
    }
LABEL_214:
    v329 = v34;
    v147 = *(_DWORD *)(v9 + 304);
    v148 = operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v9, v338);
    v149 = *(_DWORD *)(v9 + 304);
    v150 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)v9);
    v36[14] = v36[14] + v150 - *(double *)(v9 + 1304);
    *(double *)(v9 + 1304) = v150;
    if (*(_BYTE *)(v9 + 496))
      goto LABEL_383;
    if (v149 > v147)
    {
      v324 = v135;
      goto LABEL_282;
    }
    if ((a2 & 0x10000) != 0)
    {
      v151 = v33;
      if (!v149)
        goto LABEL_223;
      v152 = v147 + 1;
      v151 = v135;
      while (v151 != v33)
      {
        v153 = v151[-1].i32[2];
        v151 = (int8x16_t *)((char *)v151 - 8);
        v152 -= v153 == -1;
        if (v152 <= v149)
          goto LABEL_223;
      }
      v283 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 550);
      v284 = (_QWORD *)google::LogMessage::stream(v283);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)"Check failed: !queue.empty() ", 29);
LABEL_400:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__u);
    }
    v151 = v135;
LABEL_223:
    v324 = v151;
    ++v317;
    if (!*(_DWORD *)(v9 + 304)
      && ((*(_QWORD *)(*(_QWORD *)(v18 + 24) + (((unint64_t)v338 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v338 & 0x3F ^ 1u)) & 1) == 0)
    {
      goto LABEL_282;
    }
    v334 = v33;
    v154 = v338 ^ 1;
    v155 = v343;
    if (v343 < (int *)v344)
    {
      *v343 = v154;
      v156 = (uint64_t)(v155 + 1);
      goto LABEL_281;
    }
    v157 = *(int **)__x;
    v158 = (char *)v343 - *(_QWORD *)__x;
    v159 = ((uint64_t)v343 - *(_QWORD *)__x) >> 2;
    v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v161 = (uint64_t)&v344[-*(_QWORD *)__x];
    if ((uint64_t)&v344[-*(_QWORD *)__x] >> 1 > v160)
      v160 = v161 >> 1;
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
      v162 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v162 = v160;
    if (!v162)
    {
      v19 = 0;
      v163 = (unsigned int *)(4 * v159);
      *(_DWORD *)(4 * v159) = v154;
      v156 = 4 * v159 + 4;
      if (v155 != v157)
        goto LABEL_236;
LABEL_272:
      v36 = (double *)v322;
      goto LABEL_278;
    }
    if (v162 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (absl::lts_2020_02_25 *)operator new(4 * v162);
    v163 = (unsigned int *)((char *)v19 + 4 * v159);
    *v163 = v154;
    v156 = (uint64_t)(v163 + 1);
    if (v155 == v157)
      goto LABEL_272;
LABEL_236:
    v164 = (char *)(v155 - 1) - (char *)v157;
    if (v164 < 0x2C)
    {
      v36 = (double *)v322;
      goto LABEL_277;
    }
    v193 = (char *)v155 - &v158[(_QWORD)v19];
    v36 = (double *)v322;
    if (v193 < 0x20)
      goto LABEL_436;
    v194 = (v164 >> 2) + 1;
    v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
    v196 = &v155[v195 / 0xFFFFFFFFFFFFFFFCLL];
    v163 = (unsigned int *)((char *)v163 - v195);
    v197 = (_OWORD *)((char *)v19 + 4 * v159 - 16);
    v198 = v155 - 4;
    v199 = v194 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v200 = *(_OWORD *)v198;
      *(v197 - 1) = *((_OWORD *)v198 - 1);
      *v197 = v200;
      v197 -= 2;
      v198 -= 8;
      v199 -= 8;
    }
    while (v199);
    v155 = v196;
    if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_436:
      do
      {
LABEL_277:
        v201 = *--v155;
        *--v163 = v201;
      }
      while (v155 != v157);
    }
LABEL_278:
    *(_QWORD *)__x = v163;
    v343 = (int *)v156;
    v344 = (char *)v19 + 4 * v162;
    if (v157)
      operator delete(v157);
    v9 = (uint64_t)v330;
LABEL_281:
    v33 = v334;
    v343 = (int *)v156;
LABEL_282:
    ++v320;
    if (!v149)
    {
      v34 = v329;
      continue;
    }
    v202 = v33;
    v203 = *(_DWORD *)(*(_QWORD *)(v9 + 312) + 8 * (v149 - 1) + 4);
    if (v148 < *(_DWORD *)(v18 + 12))
    {
      v204 = 0;
      v205 = v203 ^ 1;
      v206 = v148;
      v335 = vdupq_n_s32(v203 ^ 1u);
      while (1)
      {
        v207 = *(_DWORD *)(*(_QWORD *)(v18 + 72) + 4 * v206);
        if (v207 == v203)
          goto LABEL_286;
        if ((a2 & 0x1000000) == 0)
          goto LABEL_307;
        v208 = (uint64_t)v207 >> 1;
        v209 = *(_QWORD *)(v18 + 120);
        v210 = *(_DWORD *)(v209 + 8 * (v207 >> 1));
        v211 = v208;
        if ((v210 & 0xF0000000) == 0x30000000)
        {
          v211 = *(int *)(*(_QWORD *)(v18 + 152) + 4 * v208);
          v212 = *(_DWORD *)(v209 + 8 * v211) >> 28;
          if (!v212)
            goto LABEL_294;
        }
        else
        {
          v212 = *(_DWORD *)(v209 + 8 * (v207 >> 1)) >> 28;
          if (!v212)
          {
LABEL_294:
            if (*(_DWORD *)(*(_QWORD *)(v18 + 248) + 4 * v211) != v321)
              goto LABEL_307;
            goto LABEL_295;
          }
        }
        if (v212 != v321)
          goto LABEL_307;
LABEL_295:
        if ((v210 & 0xF0000000) == 0x30000000)
        {
          v213 = *(int *)(*(_QWORD *)(v18 + 152) + 4 * v208);
          v214 = *(_DWORD *)(v209 + 8 * v213) >> 28;
          if (!v214)
            goto LABEL_300;
        }
        else
        {
          v213 = (uint64_t)v207 >> 1;
          v214 = v210 >> 28;
          if (!v214)
          {
LABEL_300:
            v216 = *(_QWORD *)(v18 + 224) + 16 * v213;
            v217 = *(_QWORD *)(v216 + 8);
            v9 = (uint64_t)v330;
            if (v217)
              goto LABEL_304;
            goto LABEL_307;
          }
        }
        if (v214 - 1 > 1)
        {
          v218 = *(_QWORD *)(*(_QWORD *)(v18 + 272) + 8 * v214);
          v19 = (absl::lts_2020_02_25 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, v18, *(unsigned int *)(v209 + 8 * v213 + 4));
          v219 = (absl::lts_2020_02_25 **)(*(_QWORD *)(v18 + 224) + 16 * v213);
          *v219 = v19;
          v219[1] = v220;
        }
        else
        {
          v215 = (_QWORD *)(*(_QWORD *)(v18 + 224) + 16 * v213);
          *v215 = 0;
          v215[1] = 0;
        }
        *(_DWORD *)(*(_QWORD *)(v18 + 248) + 4 * v213) = *(_DWORD *)(v209 + 8 * v213) >> 28;
        *(_DWORD *)(*(_QWORD *)(v18 + 120) + 8 * v213) &= 0xFFFFFFFu;
        v216 = *(_QWORD *)(v18 + 224) + 16 * v213;
        v217 = *(_QWORD *)(v216 + 8);
        v9 = (uint64_t)v330;
        if (v217)
        {
LABEL_304:
          v221 = *(_DWORD **)v216;
          v222 = 4 * v217;
          while (*v221 != v205)
          {
            ++v221;
            v222 -= 4;
            if (!v222)
              goto LABEL_307;
          }
          operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v326, v203 ^ 1, v207);
          v227 = *(_DWORD *)(*(_QWORD *)(v18 + 120) + 8 * v208 + 4);
          v228 = (int *)operations_research::sat::LiteralWatchers::ReasonClause(v319, v227);
          v229 = v228 + 1;
          v230 = *v228;
          if ((_DWORD)v230)
          {
            v231 = (v230 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v231 >= 7)
            {
              v234 = v231 + 1;
              v235 = (v231 + 1) & 0x7FFFFFFFFFFFFFF8;
              v233 = &v229[v235];
              v236 = vdupq_n_s32(v207);
              v237 = (int32x4_t *)(v228 + 5);
              v238 = 0uLL;
              v239 = v235;
              v240 = 0uLL;
              do
              {
                v238 = vsubq_s32(vsubq_s32(v238, vceqq_s32(v237[-1], v236)), vceqq_s32(v237[-1], v335));
                v240 = vsubq_s32(vsubq_s32(v240, vceqq_s32(*v237, v236)), vceqq_s32(*v237, v335));
                v237 += 2;
                v239 -= 8;
              }
              while (v239);
              v232 = vaddvq_s32(vaddq_s32(v240, v238));
              if (v234 != v235)
                goto LABEL_324;
            }
            else
            {
              v232 = 0;
              v233 = v228 + 1;
LABEL_324:
              v241 = &v229[v230];
              do
              {
                v243 = *v233++;
                v242 = v243;
                if (v243 == v207)
                  v244 = v232 + 1;
                else
                  v244 = v232;
                if (v242 == v205)
                  v232 = v244 + 1;
                else
                  v232 = v244;
              }
              while (v233 != v241);
            }
            __u[0] = v232;
            v358[0] = 2;
            if (v232 == 2)
            {
LABEL_333:
              v245 = (_DWORD *)operations_research::sat::LiteralWatchers::ReasonClause(v319, v227);
              operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v319, v245);
              v19 = (absl::lts_2020_02_25 *)operations_research::sat::BinaryImplicationGraph::ChangeReason(v326, v227, v203);
              ++v204;
              ++v331;
              if ((a2 & 1) != 0)
                goto LABEL_286;
LABEL_285:
              operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(&v347, v207);
              goto LABEL_286;
            }
          }
          else
          {
            __u[0] = 0;
            v358[0] = 2;
          }
          v337 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__u, (int)v358, "test == 2");
          if (v337)
          {
            v305 = google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 615, &v337);
            google::LogMessage::stream((google::LogMessage *)v305);
            goto LABEL_400;
          }
          goto LABEL_333;
        }
LABEL_307:
        if ((a2 & 1) == 0)
          goto LABEL_285;
        v223 = (uint64_t)v207 >> 1;
        v224 = *(_QWORD *)(v18 + 120);
        v225 = *(_DWORD *)(v224 + 8 * (v207 >> 1));
        if (v225 >> 28 == 3)
        {
          v223 = *(int *)(*(_QWORD *)(v18 + 152) + 4 * v223);
          v226 = *(_DWORD *)(v224 + 8 * v223) >> 28;
          if (v226)
            goto LABEL_310;
        }
        else
        {
          v226 = v225 >> 28;
          if (v226)
          {
LABEL_310:
            if (v226 != v327)
              goto LABEL_314;
            goto LABEL_286;
          }
        }
        if (*(_DWORD *)(*(_QWORD *)(v18 + 248) + 4 * v223) != v327)
        {
LABEL_314:
          operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v326, v203 ^ 1, v207);
          ++v331;
        }
LABEL_286:
        if (++v206 >= *(int *)(v18 + 12))
          goto LABEL_336;
      }
    }
    v204 = 0;
LABEL_336:
    if ((a2 & 0x1000000) != 0)
    {
      v247 = v203 ^ 1;
      v246 = (uint64_t)v319;
      v248 = *((_QWORD *)v319 + 5) + 24 * v247;
      v249 = *(int **)v248;
      v250 = *(int **)(v248 + 8);
      v33 = v202;
      if (*(int **)v248 == v250)
        goto LABEL_339;
      while (2)
      {
        if (((*(_QWORD *)(*(_QWORD *)(v18 + 24) + (((unint64_t)*v249 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v249) & 1) != 0
          && **((_DWORD **)v249 + 1))
        {
          __u[0] = v247;
          if (*v249 == v247)
          {
            v337 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(v249, __u, "w.blocking_literal != last_decision.Negated()");
            if (v337)
            {
              v307 = google::LogMessageFatal::LogMessageFatal((unint64_t *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 666, &v337);
              google::LogMessage::stream((google::LogMessage *)v307);
              goto LABEL_400;
            }
          }
          v251 = (uint64_t)*v249 >> 1;
          v252 = *(_QWORD *)(v18 + 120);
          v253 = *(_DWORD *)(v252 + 8 * (*v249 >> 1));
          if (v253 >> 28 == 3)
          {
            v251 = *(int *)(*(_QWORD *)(v18 + 152) + 4 * v251);
            v254 = *(_DWORD *)(v252 + 8 * v251) >> 28;
            if (v254)
              goto LABEL_348;
LABEL_351:
            if (*(_DWORD *)(*(_QWORD *)(v18 + 248) + 4 * v251) != v327)
              goto LABEL_352;
          }
          else
          {
            v254 = v253 >> 28;
            if (!v254)
              goto LABEL_351;
LABEL_348:
            if (v254 != v327)
            {
LABEL_352:
              operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v326, v247, *v249);
              ++v331;
              v255 = *v249;
              v256 = *(_QWORD *)(v18 + 120);
              v257 = *(unsigned int *)(v256 + 8 * (*v249 >> 1));
              if ((v257 & 0xFFFFFFE) != 0)
              {
                v258 = *(_DWORD *)(*(_QWORD *)(v9 + 312) + 8 * ((v257 >> 1) & 0x7FFFFFF) - 4);
                if (v258 != v255)
                  operations_research::sat::BinaryImplicationGraph::ChangeReason(v326, *(_DWORD *)(v256 + 8 * ((uint64_t)v255 >> 1) + 4), v258);
              }
            }
          }
          operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v319, *((_DWORD **)v249 + 1));
          ++v204;
        }
        v249 += 4;
        if (v249 == v250)
          goto LABEL_339;
        continue;
      }
    }
    v33 = v202;
    v246 = (uint64_t)v319;
LABEL_339:
    if (v204 < 1)
    {
      v36 = (double *)v322;
      v34 = v329;
    }
    else
    {
      v19 = (absl::lts_2020_02_25 *)operations_research::sat::LiteralWatchers::CleanUpWatchers(v246);
      v36 = (double *)v322;
      v34 = v329;
      v316 += v204;
    }
  }
  v131 = *(int **)__x;
  v132 = v343;
  if (*(int **)__x != v343)
  {
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(v18 + 24) + (((unint64_t)*v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v131) & 1) == 0)
      {
        operations_research::sat::SatSolver::AddUnitClause(v9, *v131);
        ++v34;
      }
      ++v131;
    }
    while (v131 != v132);
    v131 = *(int **)__x;
  }
  v343 = v131;
  v36 = (double *)v322;
  if (!operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9))
    goto LABEL_383;
  v133 = (v340 - (_BYTE *)__p) >> 2;
  v134 = v315;
  if (v133 > v315)
  {
    do
    {
      v126 = *((int *)__p + v134);
      if (((*(_QWORD *)&v348[8 * (v126 >> 6)] >> v126) & 1) == 0
        && ((*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8 * (v126 >> 6)) >> (v126 & 0x3E)) & 3) == 0)
      {
        v338 = *((_DWORD *)__p + v134);
        v315 = v134;
        goto LABEL_188;
      }
      ++v134;
    }
    while (v133 > v134);
    v315 = v134;
  }
  LODWORD(v126) = v338;
LABEL_188:
  if ((_DWORD)v126 != -1)
    goto LABEL_189;
LABEL_367:
  if (!operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)v9))
    goto LABEL_383;
  v266 = *(int **)__x;
  v267 = v343;
  if (*(int **)__x != v343)
  {
    do
    {
      operations_research::sat::SatSolver::AddUnitClause(v9, *v266);
      ++v34;
      ++v266;
    }
    while (v266 != v267);
    v266 = *(int **)__x;
  }
  v343 = v266;
  v268 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9);
  if (!(_DWORD)v268)
  {
LABEL_383:
    v7 = 0;
    v280 = __p;
    if (!__p)
      goto LABEL_385;
    goto LABEL_384;
  }
  v269 = (double *)v322;
  v270 = (unsigned __int8 *)v322[15];
  v271 = *((double *)v322 + 14);
  if (!v270)
    goto LABEL_375;
  v272 = atomic_load(v270);
  if ((v272 & 1) != 0)
    goto LABEL_398;
  v269 = (double *)v322;
  v271 = *((double *)v322 + 14);
LABEL_375:
  if (fmax(v269[13] - v271, 0.0) <= 0.0)
  {
LABEL_398:
    v282 = 1;
    goto LABEL_406;
  }
  v273 = absl::lts_2020_02_25::GetCurrentTimeNanos(v268);
  v274 = (double *)v322;
  v275 = v273;
  if (v322[3] <= v273 - v322[1])
    v276 = v273 - v322[1];
  else
    v276 = v322[3];
  operations_research::RunningMax<long long>::Add(v318, v276);
  v322[1] = v275;
  if (*(_QWORD *)(v322[5] + 8 * *((int *)v322 + 17)) + v275 >= v322[2])
  {
    if (!FLAGS_time_limit_use_usertime
      || ((v278 = *((double *)v322 + 12), !*((_BYTE *)v322 + 72))
        ? (v279 = v322[11])
        : (v279 = absl::lts_2020_02_25::GetCurrentTimeNanos(v277) - v322[10] + v322[11]),
          v285 = v278 + (double)v279 * -0.000000001,
          v285 <= 0.0001))
    {
      v322[2] = 0;
      v282 = 1;
      goto LABEL_406;
    }
    v274 = (double *)v322;
    v322[2] = v322[1] + (uint64_t)(v285 * 1000000000.0);
  }
  v282 = v274[14] > v35;
LABEL_406:
  if (v308)
  {
    v286 = google::LogMessage::LogMessage((google::LogMessage *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 720);
    v287 = (_QWORD *)google::LogMessage::stream(v286);
    v288 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)"Probing. ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)" num_probed: ", 13);
    v289 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)" num_fixed: +", 13);
    v290 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v290, (uint64_t)" (", 2);
    v291 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"/", 1);
    v292 = (_QWORD *)std::ostream::operator<<();
    v293 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)" explicit_fix:", 14);
    v294 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)" num_conflicts:", 15);
    v295 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)" new_binary_clauses: ", 21);
    v296 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)" subsumed: ", 11);
    v297 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)" dtime: ", 8);
    v298 = (_QWORD *)std::ostream::operator<<();
    v299 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v299);
    v300 = (_QWORD *)std::ostream::operator<<();
    if (v282)
      v301 = " (Aborted)";
    else
      v301 = "";
    if (v282)
      v302 = 10;
    else
      v302 = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v300, (uint64_t)v301, v302);
    google::LogMessage::~LogMessage((google::LogMessage *)__u);
  }
  v7 = operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9);
  v280 = __p;
  if (__p)
LABEL_384:
    operator delete(v280);
LABEL_385:
  if (*(_QWORD *)__x)
  {
    v343 = *(int **)__x;
    operator delete(*(void **)__x);
  }
  if (v345.__begin_)
  {
    v345.__end_ = v345.__begin_;
    operator delete(v345.__begin_);
  }
  if (v346.__begin_)
  {
    v346.__end_ = v346.__begin_;
    operator delete(v346.__begin_);
  }
  if (v33)
    operator delete(v33);
  if (v354)
  {
    v355 = v354;
    operator delete(v354);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  return v7;
}

void sub_22DBD32D8()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_22DBD32E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;

  if (__p)
  {
    operator delete(__p);
    v49 = a40;
    if (!a40)
    {
LABEL_3:
      v50 = a43;
      if (!a43)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v49 = a40;
    if (!a40)
      goto LABEL_3;
  }
  operator delete(v49);
  v50 = a43;
  if (!a43)
  {
LABEL_4:
    v51 = a46;
    if (!a46)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v50);
  v51 = a46;
  if (!a46)
  {
LABEL_5:
    if (!a31)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v51);
  if (!a31)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset((_QWORD *)(v47 - 240));
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a31);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset((_QWORD *)(v47 - 240));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BinaryImplicationGraph::ChangeReason(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  int v4;
  int v5;
  _QWORD *v6;
  _BYTE v7[16];

  v3 = *(_QWORD **)(result + 128);
  if (((*(_QWORD *)(v3[3] + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 660);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: trail_->Assignment().LiteralIsTrue(new_reason) ", 61);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 152)
                        + (((unint64_t)(*(_QWORD *)(result + 176) + a2) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*(_QWORD *)(result + 176) + a2) & 0x3FFLL)) = a3 ^ 1;
  v4 = *(_DWORD *)(result + 32);
  v5 = *(int *)(v3[9] + 4 * a2) >> 1;
  *(_DWORD *)(v3[15] + 8 * v5) = *(_DWORD *)(v3[15] + 8 * v5) & 0xFFFFFFF | (v4 << 28);
  *(_DWORD *)(v3[31] + 4 * v5) = v4;
  return result;
}

void sub_22DBD357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t *v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  int64_t v119;
  BOOL v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 12);
  v9 = (int *)(a2 - 24);
  v10 = (int *)(a2 - 36);
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = a2 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 2);
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *(_DWORD *)(a2 - 12);
        v88 = (uint64_t *)(a2 - 12);
        if (v89 < *(_DWORD *)v11)
          goto LABEL_99;
        return result;
      case 3:
        v90 = (uint64_t *)(v11 + 12);
        v91 = *(_DWORD *)(v11 + 12);
        v93 = *(_DWORD *)(a2 - 12);
        v88 = (uint64_t *)(a2 - 12);
        v92 = v93;
        if (v91 >= *(_DWORD *)v11)
        {
          if (v92 < v91)
          {
            v146 = *v90;
            v147 = *(_DWORD *)(v11 + 20);
            v148 = *((_DWORD *)v88 + 2);
            *v90 = *v88;
            *(_DWORD *)(v11 + 20) = v148;
            *((_DWORD *)v88 + 2) = v147;
            *v88 = v146;
            if (*(_DWORD *)(v11 + 12) < *(_DWORD *)v11)
            {
              v204 = *(_DWORD *)(v11 + 8);
              v180 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *v90;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
              *v90 = v180;
              *(_DWORD *)(v11 + 20) = v204;
            }
          }
        }
        else if (v92 >= v91)
        {
          v205 = *(_DWORD *)(v11 + 8);
          v181 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *v90;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
          *v90 = v181;
          *(_DWORD *)(v11 + 20) = v205;
          if (*(_DWORD *)v88 < *(_DWORD *)(v11 + 12))
          {
            v155 = *v90;
            v156 = *(_DWORD *)(v11 + 20);
            v157 = *((_DWORD *)v88 + 2);
            *v90 = *v88;
            *(_DWORD *)(v11 + 20) = v157;
            *((_DWORD *)v88 + 2) = v156;
            *v88 = v155;
          }
        }
        else
        {
LABEL_99:
          v201 = *(_DWORD *)(v11 + 8);
          v177 = *(_QWORD *)v11;
          v94 = *v88;
          *(_DWORD *)(v11 + 8) = *((_DWORD *)v88 + 2);
          *(_QWORD *)v11 = v94;
          *((_DWORD *)v88 + 2) = v201;
          *v88 = v177;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v11, (int *)(v11 + 12), (int *)(v11 + 24), a2 - 12);
      case 5:
        v95 = (uint64_t *)(v11 + 12);
        v96 = (uint64_t *)(v11 + 24);
        v97 = (uint64_t *)(v11 + 36);
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v11, (int *)(v11 + 12), (int *)(v11 + 24), v11 + 36);
        v99 = *(_DWORD *)(a2 - 12);
        v98 = a2 - 12;
        if (v99 < *(_DWORD *)(v11 + 36))
        {
          v100 = *v97;
          v101 = *(_DWORD *)(v11 + 44);
          v102 = *(_DWORD *)(v98 + 8);
          *v97 = *(_QWORD *)v98;
          *(_DWORD *)(v11 + 44) = v102;
          *(_DWORD *)(v98 + 8) = v101;
          *(_QWORD *)v98 = v100;
          if (*(_DWORD *)v97 < *(_DWORD *)v96)
          {
            v103 = *(_DWORD *)(v11 + 32);
            v104 = *v96;
            *v96 = *v97;
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 44);
            *v97 = v104;
            *(_DWORD *)(v11 + 44) = v103;
            if (*(_DWORD *)v96 < *(_DWORD *)v95)
            {
              v105 = *(_DWORD *)(v11 + 20);
              v106 = *v95;
              *v95 = *v96;
              *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
              *v96 = v106;
              *(_DWORD *)(v11 + 32) = v105;
              if (*(_DWORD *)(v11 + 12) < *(_DWORD *)v11)
              {
                v202 = *(_DWORD *)(v11 + 8);
                v178 = *(_QWORD *)v11;
                *(_QWORD *)v11 = *v95;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
                *v95 = v178;
                *(_DWORD *)(v11 + 20) = v202;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 287)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v118 = (unint64_t)(v13 - 2) >> 1;
              v119 = v118;
              do
              {
                if (v118 >= v119)
                {
                  v121 = (2 * v119) | 1;
                  v122 = (_QWORD *)(v11 + 12 * v121);
                  v123 = *v122;
                  if (2 * v119 + 2 < v13)
                  {
                    result = *(_QWORD *)((char *)v122 + 12);
                    if ((int)v123 < (int)result)
                    {
                      v123 = *(_QWORD *)((char *)v122 + 12);
                      v122 = (_QWORD *)((char *)v122 + 12);
                      v121 = 2 * v119 + 2;
                    }
                  }
                  v124 = (_QWORD *)(v11 + 12 * v119);
                  v125 = *v124;
                  if ((int)v123 >= (int)*v124)
                  {
                    v126 = *((_DWORD *)v124 + 2);
                    do
                    {
                      v127 = v122;
                      v128 = *v122;
                      result = *((unsigned int *)v127 + 2);
                      *((_DWORD *)v124 + 2) = result;
                      *v124 = v128;
                      if (v118 < v121)
                        break;
                      result = (2 * v121) | 1;
                      v122 = (_QWORD *)(v11 + 12 * result);
                      v129 = 2 * v121 + 2;
                      v130 = *v122;
                      if (v129 < v13 && (int)v130 < (int)*(_QWORD *)((char *)v122 + 12))
                      {
                        v130 = *(_QWORD *)((char *)v122 + 12);
                        v122 = (_QWORD *)((char *)v122 + 12);
                        result = v129;
                      }
                      v124 = v127;
                      v121 = result;
                    }
                    while ((int)v130 >= (int)v125);
                    *v127 = v125;
                    *((_DWORD *)v127 + 2) = v126;
                  }
                }
                v120 = v119-- <= 0;
              }
              while (!v120);
              v131 = v12 / 0xCuLL;
              do
              {
                v132 = 0;
                v203 = *(_DWORD *)(v11 + 8);
                v179 = *(_QWORD *)v11;
                v133 = (_DWORD *)v11;
                do
                {
                  v135 = &v133[3 * v132 + 3];
                  v136 = (2 * v132) | 1;
                  v137 = 2 * v132 + 2;
                  if (v137 < v131)
                  {
                    result = v135[3];
                    if (*v135 < (int)result)
                    {
                      v135 += 3;
                      v136 = v137;
                    }
                  }
                  v134 = *(_QWORD *)v135;
                  v133[2] = v135[2];
                  *(_QWORD *)v133 = v134;
                  v133 = v135;
                  v132 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                a2 -= 12;
                if (v135 == (_DWORD *)a2)
                {
                  v135[2] = v203;
                  *(_QWORD *)v135 = v179;
                }
                else
                {
                  v138 = *(_QWORD *)a2;
                  v135[2] = *(_DWORD *)(a2 + 8);
                  *(_QWORD *)v135 = v138;
                  *(_DWORD *)(a2 + 8) = v203;
                  *(_QWORD *)a2 = v179;
                  v139 = (uint64_t)v135 - v11 + 12;
                  if (v139 >= 13)
                  {
                    v140 = (v139 / 0xCuLL - 2) >> 1;
                    v141 = (_QWORD *)(v11 + 12 * v140);
                    v142 = *(_QWORD *)v135;
                    if (*(_DWORD *)v141 < (int)*(_QWORD *)v135)
                    {
                      v143 = v135[2];
                      do
                      {
                        v144 = v141;
                        v145 = *v141;
                        v135[2] = v144[2];
                        *(_QWORD *)v135 = v145;
                        if (!v140)
                          break;
                        v140 = (v140 - 1) >> 1;
                        v141 = (_QWORD *)(v11 + 12 * v140);
                        v135 = v144;
                      }
                      while (*(_DWORD *)v141 < (int)v142);
                      *(_QWORD *)v144 = v142;
                      v144[2] = v143;
                    }
                  }
                }
                v120 = v131-- <= 2;
              }
              while (!v120);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = v11 + 12 * ((unint64_t)v13 >> 1);
          v16 = *v8;
          if ((unint64_t)v12 < 0x601)
          {
            v19 = *(_DWORD *)v11;
            if (*(_DWORD *)v11 >= *(_DWORD *)v15)
            {
              if (v16 < v19)
              {
                v186 = *(_DWORD *)(v11 + 8);
                v162 = *(_QWORD *)v11;
                v23 = *(_QWORD *)v8;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v11 = v23;
                *(_DWORD *)(a2 - 4) = v186;
                *(_QWORD *)v8 = v162;
                if (*(_DWORD *)v11 < *(_DWORD *)v15)
                {
                  v187 = *(_DWORD *)(v15 + 8);
                  v163 = *(_QWORD *)v15;
                  v24 = *(_QWORD *)v11;
                  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                  *(_QWORD *)v15 = v24;
                  v25 = v163;
                  *(_DWORD *)(v11 + 8) = v187;
                  *(_QWORD *)v11 = v163;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v16 >= v19)
              {
                v190 = *(_DWORD *)(v15 + 8);
                v166 = *(_QWORD *)v15;
                v41 = *(_QWORD *)v11;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                *(_QWORD *)v15 = v41;
                *(_DWORD *)(v11 + 8) = v190;
                *(_QWORD *)v11 = v166;
                if (*v8 >= *(_DWORD *)v11)
                  goto LABEL_32;
                v183 = *(_DWORD *)(v11 + 8);
                v159 = *(_QWORD *)v11;
                v42 = *(_QWORD *)v8;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v11 = v42;
              }
              else
              {
                v183 = *(_DWORD *)(v15 + 8);
                v159 = *(_QWORD *)v15;
                v20 = *(_QWORD *)v8;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v15 = v20;
              }
              *(_DWORD *)(a2 - 4) = v183;
              *(_QWORD *)v8 = v159;
            }
LABEL_32:
            --a3;
            v25 = *(_QWORD *)v11;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v43 = *(_DWORD *)(v11 + 8);
            if (*(_DWORD *)(v11 - 12) < (int)v25)
              goto LABEL_55;
            if ((int)v25 >= *v8)
            {
              v81 = v11 + 12;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                v81 += 12;
              }
              while ((int)v25 >= *(_DWORD *)v11);
            }
            else
            {
              do
              {
                v80 = *(_DWORD *)(v11 + 12);
                v11 += 12;
              }
              while ((int)v25 >= v80);
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
              {
                v83 = *(_DWORD *)(v82 - 12);
                v82 -= 12;
              }
              while ((int)v25 < v83);
            }
            while (v11 < v82)
            {
              v200 = *(_DWORD *)(v11 + 8);
              v176 = *(_QWORD *)v11;
              v84 = *(_QWORD *)v82;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v82 + 8);
              *(_QWORD *)v11 = v84;
              *(_DWORD *)(v82 + 8) = v200;
              *(_QWORD *)v82 = v176;
              do
              {
                v85 = *(_DWORD *)(v11 + 12);
                v11 += 12;
              }
              while ((int)v25 >= v85);
              do
              {
                v86 = *(_DWORD *)(v82 - 12);
                v82 -= 12;
              }
              while ((int)v25 < v86);
            }
            if (v11 - 12 != v7)
            {
              v87 = *(_QWORD *)(v11 - 12);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v11 - 4);
              *(_QWORD *)v7 = v87;
            }
            a4 = 0;
            *(_QWORD *)(v11 - 12) = v25;
            *(_DWORD *)(v11 - 4) = v43;
            continue;
          }
          v17 = *(_DWORD *)v15;
          if (*(_DWORD *)v15 >= *(_DWORD *)v11)
          {
            if (v16 < v17)
            {
              v184 = *(_DWORD *)(v15 + 8);
              v160 = *(_QWORD *)v15;
              v21 = *(_QWORD *)v8;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v15 = v21;
              *(_DWORD *)(a2 - 4) = v184;
              *(_QWORD *)v8 = v160;
              if (*(_DWORD *)v15 < *(_DWORD *)v11)
              {
                v185 = *(_DWORD *)(v11 + 8);
                v161 = *(_QWORD *)v11;
                v22 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v22;
                *(_DWORD *)(v15 + 8) = v185;
                *(_QWORD *)v15 = v161;
              }
            }
          }
          else
          {
            if (v16 >= v17)
            {
              v188 = *(_DWORD *)(v11 + 8);
              v164 = *(_QWORD *)v11;
              v26 = *(_QWORD *)v15;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
              *(_QWORD *)v11 = v26;
              *(_DWORD *)(v15 + 8) = v188;
              *(_QWORD *)v15 = v164;
              if (*v8 >= *(_DWORD *)v15)
                goto LABEL_23;
              v182 = *(_DWORD *)(v15 + 8);
              v158 = *(_QWORD *)v15;
              v27 = *(_QWORD *)v8;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v15 = v27;
            }
            else
            {
              v182 = *(_DWORD *)(v11 + 8);
              v158 = *(_QWORD *)v11;
              v18 = *(_QWORD *)v8;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v11 = v18;
            }
            *(_DWORD *)(a2 - 4) = v182;
            *(_QWORD *)v8 = v158;
          }
LABEL_23:
          v28 = (uint64_t *)(v11 + 12);
          v29 = v11 + 12 * v14;
          v32 = *(_DWORD *)(v29 - 12);
          v30 = (uint64_t *)(v29 - 12);
          v31 = v32;
          v33 = *v9;
          if (v32 >= *(_DWORD *)(v11 + 12))
          {
            if (v33 < v31)
            {
              v189 = *((_DWORD *)v30 + 2);
              v165 = *v30;
              v37 = *(_QWORD *)v9;
              *((_DWORD *)v30 + 2) = *(_DWORD *)(a2 - 16);
              *v30 = v37;
              *(_DWORD *)(a2 - 16) = v189;
              *(_QWORD *)v9 = v165;
              if (*(_DWORD *)v30 < *(_DWORD *)v28)
              {
                v38 = *v28;
                v39 = *(_DWORD *)(v11 + 20);
                v40 = *((_DWORD *)v30 + 2);
                *v28 = *v30;
                *(_DWORD *)(v11 + 20) = v40;
                *((_DWORD *)v30 + 2) = v39;
                *v30 = v38;
              }
            }
          }
          else if (v33 >= v31)
          {
            v44 = *v28;
            v45 = *(_DWORD *)(v11 + 20);
            v46 = *((_DWORD *)v30 + 2);
            *v28 = *v30;
            *(_DWORD *)(v11 + 20) = v46;
            *((_DWORD *)v30 + 2) = v45;
            *v30 = v44;
            if (*v9 < (int)v44)
            {
              v191 = *((_DWORD *)v30 + 2);
              v167 = *v30;
              v47 = *(_QWORD *)v9;
              *((_DWORD *)v30 + 2) = *(_DWORD *)(a2 - 16);
              *v30 = v47;
              *(_DWORD *)(a2 - 16) = v191;
              *(_QWORD *)v9 = v167;
            }
          }
          else
          {
            v34 = *v28;
            v35 = *(_DWORD *)(v11 + 20);
            v36 = *(_DWORD *)(a2 - 16);
            *v28 = *(_QWORD *)v9;
            *(_DWORD *)(v11 + 20) = v36;
            *(_DWORD *)(a2 - 16) = v35;
            *(_QWORD *)v9 = v34;
          }
          v48 = (uint64_t *)(v11 + 24);
          v49 = v11 + 12 * v14;
          v52 = *(_DWORD *)(v49 + 12);
          v50 = (uint64_t *)(v49 + 12);
          v51 = v52;
          v53 = *v10;
          if (v52 >= *(_DWORD *)(v11 + 24))
          {
            if (v53 < v51)
            {
              v192 = *((_DWORD *)v50 + 2);
              v168 = *v50;
              v57 = *(_QWORD *)v10;
              *((_DWORD *)v50 + 2) = *(_DWORD *)(a2 - 28);
              *v50 = v57;
              *(_DWORD *)(a2 - 28) = v192;
              *(_QWORD *)v10 = v168;
              if (*(_DWORD *)v50 < *(_DWORD *)v48)
              {
                v58 = *v48;
                v59 = *(_DWORD *)(v11 + 32);
                v60 = *((_DWORD *)v50 + 2);
                *v48 = *v50;
                *(_DWORD *)(v11 + 32) = v60;
                *((_DWORD *)v50 + 2) = v59;
                *v50 = v58;
              }
            }
          }
          else if (v53 >= v51)
          {
            v61 = *v48;
            v62 = *(_DWORD *)(v11 + 32);
            v63 = *((_DWORD *)v50 + 2);
            *v48 = *v50;
            *(_DWORD *)(v11 + 32) = v63;
            *((_DWORD *)v50 + 2) = v62;
            *v50 = v61;
            if (*v10 < (int)v61)
            {
              v193 = *((_DWORD *)v50 + 2);
              v169 = *v50;
              v64 = *(_QWORD *)v10;
              *((_DWORD *)v50 + 2) = *(_DWORD *)(a2 - 28);
              *v50 = v64;
              *(_DWORD *)(a2 - 28) = v193;
              *(_QWORD *)v10 = v169;
            }
          }
          else
          {
            v54 = *v48;
            v55 = *(_DWORD *)(v11 + 32);
            v56 = *(_DWORD *)(a2 - 28);
            *v48 = *(_QWORD *)v10;
            *(_DWORD *)(v11 + 32) = v56;
            *(_DWORD *)(a2 - 28) = v55;
            *(_QWORD *)v10 = v54;
          }
          v65 = *(_DWORD *)v15;
          v66 = *(_DWORD *)v50;
          if (*(_DWORD *)v15 >= *(_DWORD *)v30)
          {
            if (v66 < v65)
            {
              v195 = *(_DWORD *)(v15 + 8);
              v171 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v50;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)v50 + 2);
              *((_DWORD *)v50 + 2) = v195;
              *v50 = v171;
              if (*(_DWORD *)v15 < *(_DWORD *)v30)
              {
                v196 = *((_DWORD *)v30 + 2);
                v172 = *v30;
                *v30 = *(_QWORD *)v15;
                *((_DWORD *)v30 + 2) = *(_DWORD *)(v15 + 8);
                *(_DWORD *)(v15 + 8) = v196;
                *(_QWORD *)v15 = v172;
              }
            }
          }
          else
          {
            if (v66 >= v65)
            {
              v197 = *((_DWORD *)v30 + 2);
              v173 = *v30;
              *v30 = *(_QWORD *)v15;
              *((_DWORD *)v30 + 2) = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v197;
              *(_QWORD *)v15 = v173;
              if (*(_DWORD *)v50 >= *(_DWORD *)v15)
                goto LABEL_53;
              v194 = *(_DWORD *)(v15 + 8);
              v170 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *v50;
              *(_DWORD *)(v15 + 8) = *((_DWORD *)v50 + 2);
            }
            else
            {
              v194 = *((_DWORD *)v30 + 2);
              v170 = *v30;
              *v30 = *v50;
              *((_DWORD *)v30 + 2) = *((_DWORD *)v50 + 2);
            }
            *((_DWORD *)v50 + 2) = v194;
            *v50 = v170;
          }
LABEL_53:
          v198 = *(_DWORD *)(v11 + 8);
          v174 = *(_QWORD *)v11;
          v67 = *(_QWORD *)v15;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v11 = v67;
          *(_DWORD *)(v15 + 8) = v198;
          *(_QWORD *)v15 = v174;
          --a3;
          v25 = *(_QWORD *)v11;
          if ((a4 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v43 = *(_DWORD *)(v11 + 8);
LABEL_55:
          v68 = 0;
          do
          {
            v69 = *(_DWORD *)(v11 + v68 + 12);
            v68 += 12;
          }
          while ((int)v25 > v69);
          v70 = v11 + v68;
          v71 = a2;
          if (v68 == 12)
          {
            v71 = a2;
            do
            {
              if (v70 >= v71)
                break;
              v73 = *(_DWORD *)(v71 - 12);
              v71 -= 12;
            }
            while ((int)v25 <= v73);
          }
          else
          {
            do
            {
              v72 = *(_DWORD *)(v71 - 12);
              v71 -= 12;
            }
            while ((int)v25 <= v72);
          }
          v11 += v68;
          if (v70 < v71)
          {
            v74 = v71;
            do
            {
              v199 = *(_DWORD *)(v11 + 8);
              v175 = *(_QWORD *)v11;
              v75 = *(_QWORD *)v74;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v74 + 8);
              *(_QWORD *)v11 = v75;
              *(_DWORD *)(v74 + 8) = v199;
              *(_QWORD *)v74 = v175;
              do
              {
                v76 = *(_DWORD *)(v11 + 12);
                v11 += 12;
              }
              while ((int)v25 > v76);
              do
              {
                v77 = *(_DWORD *)(v74 - 12);
                v74 -= 12;
              }
              while ((int)v25 <= v77);
            }
            while (v11 < v74);
          }
          if (v11 - 12 != v7)
          {
            v78 = *(_QWORD *)(v11 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v11 - 4);
            *(_QWORD *)v7 = v78;
          }
          *(_QWORD *)(v11 - 12) = v25;
          *(_DWORD *)(v11 - 4) = v43;
          if (v70 < v71)
            goto LABEL_74;
          v79 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v7, (uint64_t *)(v11 - 12));
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v11, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_74:
            result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>(v7, v11 - 12, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 12;
          if (v79)
            return result;
          goto LABEL_2;
        }
        v107 = v11 + 12;
        v109 = v11 == a2 || v107 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v109)
          {
            v110 = 0;
            v111 = v11;
            do
            {
              v113 = v107;
              v114 = *(_QWORD *)(v111 + 12);
              if ((int)v114 < *(_DWORD *)v111)
              {
                v115 = *(_DWORD *)(v111 + 20);
                v116 = v110;
                do
                {
                  v117 = v11 + v116;
                  *(_QWORD *)(v117 + 12) = *(_QWORD *)(v11 + v116);
                  *(_DWORD *)(v117 + 20) = *(_DWORD *)(v11 + v116 + 8);
                  if (!v116)
                  {
                    v112 = v11;
                    goto LABEL_116;
                  }
                  v116 -= 12;
                }
                while ((int)v114 < *(_DWORD *)(v117 - 12));
                v112 = v11 + v116 + 12;
LABEL_116:
                *(_QWORD *)v112 = v114;
                *(_DWORD *)(v112 + 8) = v115;
              }
              v107 = v113 + 12;
              v110 += 12;
              v111 = v113;
            }
            while (v113 + 12 != a2);
          }
        }
        else if (!v109)
        {
          do
          {
            v149 = v107;
            v150 = *(_QWORD *)(v7 + 12);
            if ((int)v150 < *(_DWORD *)v7)
            {
              v151 = *(_DWORD *)(v7 + 20);
              v152 = v149;
              do
              {
                v153 = v152;
                v154 = *(_QWORD *)(v152 - 12);
                v152 -= 12;
                *(_QWORD *)v153 = v154;
                *(_DWORD *)(v153 + 8) = *(_DWORD *)(v153 - 4);
              }
              while ((int)v150 < *(_DWORD *)(v153 - 24));
              *(_QWORD *)v152 = v150;
              *(_DWORD *)(v152 + 8) = v151;
            }
            v107 = v149 + 12;
            v7 = v149;
          }
          while (v149 + 12 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t *)((char *)a2 - 12);
      if (*((_DWORD *)a2 - 3) < *(_DWORD *)a1)
        goto LABEL_7;
      return result;
    case 3uLL:
      v7 = (uint64_t *)((char *)a1 + 12);
      v8 = *((_DWORD *)a1 + 3);
      v6 = (uint64_t *)((char *)a2 - 12);
      v9 = *((_DWORD *)a2 - 3);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v9 < v8)
        {
          v34 = *((_DWORD *)a1 + 5);
          v35 = *v7;
          v36 = *((_DWORD *)a2 - 1);
          *v7 = *v6;
          *((_DWORD *)a1 + 5) = v36;
          *v6 = v35;
          *((_DWORD *)a2 - 1) = v34;
          if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
          {
            v37 = *((_DWORD *)a1 + 2);
            v38 = *a1;
            *a1 = *v7;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *v7 = v38;
            *((_DWORD *)a1 + 5) = v37;
          }
        }
      }
      else if (v9 >= v8)
      {
        v43 = *((_DWORD *)a1 + 2);
        v44 = *a1;
        *a1 = *v7;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *v7 = v44;
        *((_DWORD *)a1 + 5) = v43;
        if (*(_DWORD *)v6 < *((_DWORD *)a1 + 3))
        {
          v45 = *((_DWORD *)a1 + 5);
          v46 = *v7;
          v47 = *((_DWORD *)a2 - 1);
          *v7 = *v6;
          *((_DWORD *)a1 + 5) = v47;
          *v6 = v46;
          *((_DWORD *)a2 - 1) = v45;
        }
      }
      else
      {
LABEL_7:
        v10 = *((_DWORD *)a1 + 2);
        v11 = *a1;
        v12 = *((_DWORD *)v6 + 2);
        *a1 = *v6;
        *((_DWORD *)a1 + 2) = v12;
        *v6 = v11;
        *((_DWORD *)v6 + 2) = v10;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(a1, (int *)a1 + 3, (int *)a1 + 6, (uint64_t)a2 - 12);
      return 1;
    case 5uLL:
      v20 = (uint64_t *)((char *)a1 + 12);
      v21 = a1 + 3;
      v22 = (uint64_t *)((char *)a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(a1, (int *)a1 + 3, (int *)a1 + 6, (uint64_t)a1 + 36);
      v24 = *((_DWORD *)a2 - 3);
      v23 = (uint64_t)a2 - 12;
      if (v24 < *((_DWORD *)a1 + 9))
      {
        v25 = *((_DWORD *)a1 + 11);
        v26 = *v22;
        v27 = *(_DWORD *)(v23 + 8);
        *v22 = *(_QWORD *)v23;
        *((_DWORD *)a1 + 11) = v27;
        *(_QWORD *)v23 = v26;
        *(_DWORD *)(v23 + 8) = v25;
        if (*(_DWORD *)v22 < *(_DWORD *)v21)
        {
          v28 = *((_DWORD *)a1 + 8);
          v29 = *v21;
          *v21 = *v22;
          *((_DWORD *)a1 + 8) = *((_DWORD *)a1 + 11);
          *v22 = v29;
          *((_DWORD *)a1 + 11) = v28;
          if (*(_DWORD *)v21 < *(_DWORD *)v20)
          {
            v30 = *((_DWORD *)a1 + 5);
            v31 = *v20;
            *v20 = *v21;
            *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
            *v21 = v31;
            *((_DWORD *)a1 + 8) = v30;
            if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
            {
              v32 = *((_DWORD *)a1 + 2);
              v33 = *a1;
              *a1 = *v20;
              *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
              *v20 = v33;
              *((_DWORD *)a1 + 5) = v32;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 3;
      v14 = *((_DWORD *)a1 + 6);
      v15 = (uint64_t *)((char *)a1 + 12);
      v16 = *((_DWORD *)a1 + 3);
      v17 = *(_DWORD *)a1;
      if (v16 >= *(_DWORD *)a1)
      {
        if (v14 < v16)
        {
          v39 = *((_DWORD *)a1 + 5);
          v40 = *v15;
          *v15 = *v13;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *v13 = v40;
          *((_DWORD *)a1 + 8) = v39;
          if (*(_DWORD *)v15 < v17)
          {
            v41 = *((_DWORD *)a1 + 2);
            v42 = *a1;
            *a1 = *v15;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *v15 = v42;
            *((_DWORD *)a1 + 5) = v41;
          }
        }
      }
      else if (v14 >= v16)
      {
        v48 = *((_DWORD *)a1 + 2);
        v49 = *a1;
        *a1 = *v15;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *v15 = v49;
        *((_DWORD *)a1 + 5) = v48;
        if (v14 < *((_DWORD *)a1 + 3))
        {
          v50 = *((_DWORD *)a1 + 5);
          v51 = *v15;
          *v15 = *v13;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *v13 = v51;
          *((_DWORD *)a1 + 8) = v50;
        }
      }
      else
      {
        v18 = *((_DWORD *)a1 + 2);
        v19 = *a1;
        *a1 = *v13;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        *v13 = v19;
        *((_DWORD *)a1 + 8) = v18;
      }
      v52 = (uint64_t)a1 + 36;
      if ((uint64_t *)((char *)a1 + 36) == a2)
        return 1;
      v53 = 0;
      v54 = 0;
      break;
  }
  while (1)
  {
    v55 = *(_QWORD *)v52;
    if ((int)*(_QWORD *)v52 < *(_DWORD *)v13)
      break;
LABEL_36:
    v13 = (uint64_t *)v52;
    v53 += 12;
    v52 += 12;
    if ((uint64_t *)v52 == a2)
      return 1;
  }
  v56 = *(_DWORD *)(v52 + 8);
  v57 = v53;
  do
  {
    v58 = (uint64_t)a1 + v57;
    *(_QWORD *)(v58 + 36) = *(uint64_t *)((char *)a1 + v57 + 24);
    *(_DWORD *)(v58 + 44) = *(_DWORD *)((char *)a1 + v57 + 32);
    if (v57 == -24)
    {
      *a1 = v55;
      *((_DWORD *)a1 + 2) = v56;
      if (++v54 != 8)
        goto LABEL_36;
      return v52 + 12 == (_QWORD)a2;
    }
    v57 -= 12;
  }
  while ((int)v55 < *(_DWORD *)(v58 + 12));
  v59 = (uint64_t)a1 + v57;
  *(_QWORD *)(v59 + 36) = v55;
  *(_DWORD *)(v59 + 44) = v56;
  if (++v54 != 8)
    goto LABEL_36;
  return v52 + 12 == (_QWORD)a2;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(uint64_t *result, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;

  v4 = *a2;
  v5 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v5 < v4)
    {
      v9 = a2[2];
      v10 = *(_QWORD *)a2;
      v11 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v11;
      *(_QWORD *)a3 = v10;
      a3[2] = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v12 = *((_DWORD *)result + 2);
        v13 = *result;
        v14 = a2[2];
        *result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v14;
        *(_QWORD *)a2 = v13;
        a2[2] = v12;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *result;
      v8 = a3[2];
      *result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_9:
      *(_QWORD *)a3 = v7;
      a3[2] = v6;
      goto LABEL_10;
    }
    v15 = *((_DWORD *)result + 2);
    v16 = *result;
    v17 = a2[2];
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = v17;
    *(_QWORD *)a2 = v16;
    a2[2] = v15;
    if (*a3 < (int)v16)
    {
      v6 = a2[2];
      v7 = *(_QWORD *)a2;
      v18 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *a3)
  {
    v19 = a3[2];
    v20 = *(_QWORD *)a3;
    v21 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v21;
    *(_QWORD *)a4 = v20;
    *(_DWORD *)(a4 + 8) = v19;
    if (*a3 < *a2)
    {
      v22 = a2[2];
      v23 = *(_QWORD *)a2;
      v24 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v24;
      *(_QWORD *)a3 = v23;
      a3[2] = v22;
      if (*a2 < *(_DWORD *)result)
      {
        v25 = *((_DWORD *)result + 2);
        v26 = *result;
        v27 = a2[2];
        *result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v27;
        *(_QWORD *)a2 = v26;
        a2[2] = v25;
      }
    }
  }
  return result;
}

int8x16_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int8 *v12;
  __int32 v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  char *v23;
  __int32 v24;
  __int32 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int8 *v30;
  char *v31;
  __int32 v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  int8x16_t *v50;
  uint64_t *v51;
  int v52;
  int8x16_t *v53;
  int v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  int8x16_t *v63;
  int v64;
  int8x16_t *v65;
  int v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  __int32 v75;
  __int32 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t *v82;
  BOOL v84;
  uint64_t v85;
  int8x16_t *v86;
  uint64_t *v87;
  __int32 v88;
  __int32 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int64_t v94;
  int64_t v95;
  BOOL v96;
  uint64_t v97;
  __int8 *v98;
  __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *i64;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  __int32 v119;
  __int32 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[3] < v8->i32[1])
        {
          v74 = v8->i64[0];
          goto LABEL_108;
        }
        return result;
      case 3:
        v75 = v8->i32[3];
        v76 = a2[-1].i32[3];
        if (v75 >= v8->i32[1])
        {
          if (v76 < v75)
          {
            v118 = v8->i64[1];
            v8->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v118;
            if (v8->i32[3] < v8->i32[1])
              *v8 = vextq_s8(*v8, *v8, 8uLL);
          }
        }
        else
        {
          v74 = v8->i64[0];
          if (v76 < v75)
          {
LABEL_108:
            v8->i64[0] = a2[-1].i64[1];
LABEL_109:
            a2[-1].i64[1] = v74;
            return result;
          }
          v8->i64[0] = v8->i64[1];
          v8->i64[1] = v74;
          if (a2[-1].i32[3] < SHIDWORD(v74))
          {
            v8->i64[1] = a2[-1].i64[1];
            goto LABEL_109;
          }
        }
        return result;
      case 4:
        return (int8x16_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &a2[-1].u64[1]);
      case 5:
        result = (int8x16_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &v8[1].u64[1]);
        if (a2[-1].i32[3] < v8[1].i32[3])
        {
          v77 = v8[1].i64[1];
          v8[1].i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v77;
          if (v8[1].i32[3] < v8[1].i32[1])
          {
            v79 = v8[1].i64[0];
            v78 = v8[1].i64[1];
            v8[1].i64[0] = v78;
            v8[1].i64[1] = v79;
            if (v8->i32[3] > SHIDWORD(v78))
            {
              v80 = v8->i64[1];
              v8->i64[1] = v78;
              v8[1].i64[0] = v80;
              if (v8->i32[1] > SHIDWORD(v78))
              {
                v81 = v8->i64[0];
                v8->i64[0] = v78;
                v8->i64[1] = v81;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v94 = (unint64_t)(v10 - 2) >> 1;
              v95 = v94;
              do
              {
                if (v94 >= v95)
                {
                  v97 = (2 * v95) | 1;
                  v98 = &v8->i8[8 * v97];
                  if (2 * v95 + 2 < v10)
                  {
                    v96 = *((_DWORD *)v98 + 1) < *((_DWORD *)v98 + 3);
                    v98 += 8 * v96;
                    if (v96)
                      v97 = 2 * v95 + 2;
                  }
                  v99 = &v8->i8[8 * v95];
                  if (*((_DWORD *)v98 + 1) >= *((_DWORD *)v99 + 1))
                  {
                    v100 = *(_QWORD *)v99;
                    v101 = HIDWORD(*(_QWORD *)v99);
                    do
                    {
                      v102 = v99;
                      v99 = v98;
                      *(_QWORD *)v102 = *(_QWORD *)v98;
                      if (v94 < v97)
                        break;
                      v103 = (2 * v97) | 1;
                      v98 = &v8->i8[8 * v103];
                      v104 = 2 * v97 + 2;
                      if (v104 < v10)
                      {
                        v96 = *((_DWORD *)v98 + 1) < *((_DWORD *)v98 + 3);
                        v98 += 8 * v96;
                        if (v96)
                          v103 = v104;
                      }
                      result = (int8x16_t *)*((unsigned int *)v98 + 1);
                      v97 = v103;
                    }
                    while ((int)result >= (int)v101);
                    *(_QWORD *)v99 = v100;
                  }
                }
                v96 = v95-- <= 0;
              }
              while (!v96);
              v105 = (unint64_t)v9 >> 3;
              do
              {
                v106 = 0;
                v107 = v8->i64[0];
                i64 = v8->i64;
                do
                {
                  v109 = (uint64_t)&i64[v106 + 1];
                  v110 = (2 * v106) | 1;
                  v111 = 2 * v106 + 2;
                  if (v111 < v105)
                  {
                    v96 = *(_DWORD *)(v109 + 4) < *(_DWORD *)(v109 + 12);
                    v109 += 8 * v96;
                    if (v96)
                      v110 = v111;
                  }
                  *i64 = *(_QWORD *)v109;
                  i64 = (_QWORD *)v109;
                  v106 = v110;
                }
                while (v110 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                a2 = (int8x16_t *)((char *)a2 - 8);
                if ((int8x16_t *)v109 == a2)
                {
                  *(_QWORD *)v109 = v107;
                }
                else
                {
                  *(_QWORD *)v109 = a2->i64[0];
                  a2->i64[0] = v107;
                  v112 = v109 - (_QWORD)v8 + 8;
                  if (v112 >= 9)
                  {
                    v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                    v114 = &v8->i8[8 * v113];
                    if (*((_DWORD *)v114 + 1) < *(_DWORD *)(v109 + 4))
                    {
                      v115 = *(_QWORD *)v109;
                      v116 = HIDWORD(*(_QWORD *)v109);
                      do
                      {
                        v117 = (_QWORD *)v109;
                        v109 = (uint64_t)v114;
                        *v117 = *(_QWORD *)v114;
                        if (!v113)
                          break;
                        v113 = (v113 - 1) >> 1;
                        v114 = &v8->i8[8 * v113];
                      }
                      while (*((_DWORD *)v114 + 1) < (int)v116);
                      *(_QWORD *)v109 = v115;
                    }
                  }
                }
                v96 = v105-- <= 2;
              }
              while (!v96);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i8[8 * ((unint64_t)v10 >> 1)];
          v13 = a2[-1].i32[3];
          if ((unint64_t)v9 < 0x401)
          {
            v16 = v8->i32[1];
            if (v16 >= *((_DWORD *)v12 + 1))
            {
              if (v13 < v16)
              {
                v20 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v20;
                if (v8->i32[1] < *((_DWORD *)v12 + 1))
                {
                  v21 = *(_QWORD *)v12;
                  *(_QWORD *)v12 = v8->i64[0];
                  v8->i64[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *(_QWORD *)v12;
            if (v13 >= v16)
            {
              *(_QWORD *)v12 = v8->i64[0];
              v8->i64[0] = v17;
              if (a2[-1].i32[3] >= SHIDWORD(v17))
                goto LABEL_32;
              v8->i64[0] = a2[-1].i64[1];
            }
            else
            {
              *(_QWORD *)v12 = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *((_DWORD *)v12 + 1);
          if (v14 >= v8->i32[1])
          {
            if (v13 < v14)
            {
              v18 = *(_QWORD *)v12;
              *(_QWORD *)v12 = a2[-1].i64[1];
              a2[-1].i64[1] = v18;
              if (*((_DWORD *)v12 + 1) < v8->i32[1])
              {
                v19 = v8->i64[0];
                v8->i64[0] = *(_QWORD *)v12;
                *(_QWORD *)v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i64[0];
            if (v13 >= v14)
            {
              v8->i64[0] = *(_QWORD *)v12;
              *(_QWORD *)v12 = v15;
              if (a2[-1].i32[3] >= SHIDWORD(v15))
                goto LABEL_23;
              *(_QWORD *)v12 = a2[-1].i64[1];
            }
            else
            {
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v15;
          }
LABEL_23:
          v22 = &v8->i8[8 * v11];
          v23 = v22 - 8;
          v24 = *((_DWORD *)v22 - 1);
          v25 = a2[-1].i32[1];
          if (v24 >= v8->i32[3])
          {
            if (v25 < v24)
            {
              v27 = *(_QWORD *)v23;
              *(_QWORD *)v23 = a2[-1].i64[0];
              a2[-1].i64[0] = v27;
              if (*((_DWORD *)v23 + 1) < v8->i32[3])
              {
                v28 = v8->i64[1];
                v8->i64[1] = *(_QWORD *)v23;
                *(_QWORD *)v23 = v28;
              }
            }
          }
          else
          {
            v26 = v8->i64[1];
            if (v25 >= v24)
            {
              v8->i64[1] = *(_QWORD *)v23;
              *(_QWORD *)v23 = v26;
              if (a2[-1].i32[1] >= SHIDWORD(v26))
                goto LABEL_37;
              *(_QWORD *)v23 = a2[-1].i64[0];
            }
            else
            {
              v8->i64[1] = a2[-1].i64[0];
            }
            a2[-1].i64[0] = v26;
          }
LABEL_37:
          v30 = &v8->i8[8 * v11];
          v31 = v30 + 8;
          v32 = *((_DWORD *)v30 + 3);
          v33 = a2[-2].i32[3];
          if (v32 >= v8[1].i32[1])
          {
            if (v33 < v32)
            {
              v35 = *(_QWORD *)v31;
              *(_QWORD *)v31 = a2[-2].i64[1];
              a2[-2].i64[1] = v35;
              if (*((_DWORD *)v31 + 1) < v8[1].i32[1])
              {
                v36 = v8[1].i64[0];
                v8[1].i64[0] = *(_QWORD *)v31;
                *(_QWORD *)v31 = v36;
              }
            }
          }
          else
          {
            v34 = v8[1].i64[0];
            if (v33 >= v32)
            {
              v8[1].i64[0] = *(_QWORD *)v31;
              *(_QWORD *)v31 = v34;
              if (a2[-2].i32[3] >= SHIDWORD(v34))
                goto LABEL_46;
              *(_QWORD *)v31 = a2[-2].i64[1];
            }
            else
            {
              v8[1].i64[0] = a2[-2].i64[1];
            }
            a2[-2].i64[1] = v34;
          }
LABEL_46:
          v37 = *((_DWORD *)v12 + 1);
          v38 = *((_DWORD *)v23 + 1);
          v39 = *((_DWORD *)v31 + 1);
          if (v37 < v38)
          {
            v40 = *(_QWORD *)v23;
            if (v39 < v37)
            {
              *(_QWORD *)v23 = *(_QWORD *)v31;
              *(_QWORD *)v31 = v40;
              v41 = v8->i64[0];
              v8->i64[0] = *(_QWORD *)v12;
              *(_QWORD *)v12 = v41;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *(_QWORD *)v23 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v40;
            if (v39 < SHIDWORD(v40))
            {
              v45 = *(_QWORD *)v31;
              *(_QWORD *)v12 = *(_QWORD *)v31;
              *(_QWORD *)v31 = v40;
              v40 = v45;
            }
            goto LABEL_56;
          }
          v40 = *(_QWORD *)v12;
          if (v39 >= v37)
          {
LABEL_56:
            v46 = v8->i64[0];
            v8->i64[0] = v40;
            *(_QWORD *)v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v29 = v8->i64[0];
            if (v8[-1].i32[3] < v8->i32[1])
              goto LABEL_58;
            if (a2[-1].i32[3] <= SHIDWORD(v29))
            {
              v65 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v65;
                if (v65 >= a2)
                  break;
                v66 = v65->i32[1];
                v65 = (int8x16_t *)((char *)v65 + 8);
              }
              while (v66 <= SHIDWORD(v29));
            }
            else
            {
              v63 = v8;
              do
              {
                v8 = (int8x16_t *)&v63->u64[1];
                v64 = v63->i32[3];
                v63 = (int8x16_t *)((char *)v63 + 8);
              }
              while (v64 <= SHIDWORD(v29));
            }
            v67 = a2;
            if (v8 < a2)
            {
              v68 = a2;
              do
              {
                v67 = (int8x16_t *)((char *)v68 - 8);
                v69 = v68[-1].i32[3];
                v68 = (int8x16_t *)((char *)v68 - 8);
              }
              while (v69 > SHIDWORD(v29));
            }
            while (v8 < v67)
            {
              v70 = v8->i64[0];
              v8->i64[0] = v67->i64[0];
              v67->i64[0] = v70;
              do
              {
                v71 = v8->i32[3];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v71 <= SHIDWORD(v29));
              do
              {
                v72 = v67[-1].i32[3];
                v67 = (int8x16_t *)((char *)v67 - 8);
              }
              while (v72 > SHIDWORD(v29));
            }
            v73 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v73;
            a4 = 0;
            *v73 = v29;
            continue;
          }
          v42 = *(_QWORD *)v31;
          *(_QWORD *)v12 = *(_QWORD *)v31;
          *(_QWORD *)v31 = v40;
          if (v38 > SHIDWORD(v42))
          {
            v43 = *(_QWORD *)v23;
            *(_QWORD *)v23 = v42;
            *(_QWORD *)v12 = v43;
            v44 = v8->i64[0];
            v8->i64[0] = v43;
            *(_QWORD *)v12 = v44;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v62 = v8->i64[0];
          v8->i64[0] = v42;
          *(_QWORD *)v12 = v62;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v29 = v8->i64[0];
LABEL_58:
          v47 = 0;
          do
          {
            v48 = v8->i32[v47 + 3];
            v47 += 2;
          }
          while (v48 < SHIDWORD(v29));
          v49 = &v8->i8[v47 * 4];
          v50 = a2;
          if (v47 == 2)
          {
            v53 = a2;
            while (v49 < (char *)v53)
            {
              v51 = &v53[-1].i64[1];
              v54 = v53[-1].i32[3];
              v53 = (int8x16_t *)((char *)v53 - 8);
              if (v54 < SHIDWORD(v29))
                goto LABEL_66;
            }
            v51 = (uint64_t *)v53;
LABEL_75:
            v60 = v49 - 8;
            if (v49 - 8 != (char *)v8)
              goto LABEL_76;
            goto LABEL_77;
          }
          do
          {
            v51 = &v50[-1].i64[1];
            v52 = v50[-1].i32[3];
            v50 = (int8x16_t *)((char *)v50 - 8);
          }
          while (v52 >= SHIDWORD(v29));
LABEL_66:
          if (v49 >= (char *)v51)
            goto LABEL_75;
          v55 = (unint64_t)v49;
          v56 = v51;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *v56;
            *v56 = v57;
            do
            {
              v58 = *(_DWORD *)(v55 + 12);
              v55 += 8;
            }
            while (v58 < SHIDWORD(v29));
            do
              v59 = *((_DWORD *)v56-- - 1);
            while (v59 >= SHIDWORD(v29));
          }
          while (v55 < (unint64_t)v56);
          v60 = (char *)(v55 - 8);
          if ((int8x16_t *)(v55 - 8) == v8)
            goto LABEL_77;
LABEL_76:
          v8->i64[0] = *(_QWORD *)v60;
LABEL_77:
          *(_QWORD *)v60 = v29;
          if (v49 < (char *)v51)
            goto LABEL_80;
          v61 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(v8, (int8x16_t *)v60);
          v8 = (int8x16_t *)(v60 + 8);
          result = (int8x16_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((int8x16_t *)(v60 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_80:
            result = (int8x16_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(v7, v60, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v60 + 8);
            continue;
          }
          a2 = (int8x16_t *)v60;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v82 = (int8x16_t *)&v8->u64[1];
        v84 = v8 == a2 || v82 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v84)
          {
            v85 = 0;
            v86 = v8;
            do
            {
              v88 = v86->i32[3];
              v89 = v86->i32[1];
              v86 = v82;
              if (v88 < v89)
              {
                v90 = v82->i64[0];
                v91 = HIDWORD(v86->i64[0]);
                v92 = v85;
                do
                {
                  *(uint64_t *)((char *)&v8->i64[1] + v92) = *(uint64_t *)((char *)v8->i64 + v92);
                  if (!v92)
                  {
                    v87 = (uint64_t *)v8;
                    goto LABEL_126;
                  }
                  v93 = *(__int32 *)((char *)&v8->i32[-1] + v92);
                  v92 -= 8;
                }
                while (v93 > (int)v91);
                v87 = (uint64_t *)((char *)&v8->i64[1] + v92);
LABEL_126:
                *v87 = v90;
              }
              v82 = (int8x16_t *)&v86->u64[1];
              v85 += 8;
            }
            while (&v86->u64[1] != (unint64_t *)a2);
          }
        }
        else if (!v84)
        {
          do
          {
            v119 = v7->i32[3];
            v120 = v7->i32[1];
            v7 = v82;
            if (v119 < v120)
            {
              v121 = v82->i64[0];
              v122 = HIDWORD(v82->i64[0]);
              v123 = (uint64_t *)v7;
              do
              {
                v124 = v123;
                v125 = *--v123;
                *v124 = v125;
              }
              while (*((_DWORD *)v124 - 3) > (int)v122);
              *v123 = v121;
            }
            v82 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int32 v7;
  __int32 v8;
  uint64_t v9;
  __int32 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  int v25;
  int8x16_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] < a1->i32[1])
      {
        v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return result;
    case 3:
      v7 = a1->i32[3];
      v8 = a2[-1].i32[3];
      if (v7 >= a1->i32[1])
      {
        if (v8 < v7)
        {
          v19 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v19;
          if (a1->i32[3] < a1->i32[1])
            *a1 = vextq_s8(*a1, *a1, 8uLL);
        }
      }
      else
      {
        v9 = a1->i64[0];
        if (v8 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v9;
          if (a2[-1].i32[3] < SHIDWORD(v9))
          {
            a1->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v9;
          }
        }
        else
        {
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v9;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a2[-1].u64[1]);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1]);
      if (a2[-1].i32[3] >= a1[1].i32[3])
        return 1;
      v14 = a1[1].i64[1];
      a1[1].i64[1] = a2[-1].i64[1];
      a2[-1].i64[1] = v14;
      if (a1[1].i32[3] >= a1[1].i32[1])
        return 1;
      v16 = a1[1].i64[0];
      v15 = a1[1].i64[1];
      a1[1].i64[0] = v15;
      a1[1].i64[1] = v16;
      if (a1->i32[3] <= SHIDWORD(v15))
        return 1;
      v17 = a1->i64[1];
      a1->i64[1] = v15;
      a1[1].i64[0] = v17;
      if (a1->i32[1] <= SHIDWORD(v15))
        return 1;
      v18 = a1->i64[0];
      a1->i64[0] = v15;
      a1->i64[1] = v18;
      return 1;
    default:
      v10 = a1->i32[3];
      v11 = a1->i32[1];
      v12 = a1[1].i32[1];
      if (v10 >= v11)
      {
        if (v12 < v10)
        {
          v21 = a1->i64[1];
          v20 = a1[1].i64[0];
          a1->i64[1] = v20;
          a1[1].i64[0] = v21;
          if (v11 > SHIDWORD(v20))
          {
            v22 = a1->i64[0];
            a1->i64[0] = v20;
            a1->i64[1] = v22;
          }
        }
      }
      else
      {
        v13 = a1->i64[0];
        if (v12 >= v10)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v13;
          if (v12 >= SHIDWORD(v13))
            goto LABEL_29;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v13;
      }
LABEL_29:
      v23 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      v26 = a1 + 1;
      break;
  }
  while (v23->i32[1] >= v26->i32[1])
  {
LABEL_38:
    v26 = v23;
    v24 += 8;
    v23 = (int8x16_t *)((char *)v23 + 8);
    if (v23 == a2)
      return 1;
  }
  v27 = v23->i64[0];
  v28 = HIDWORD(v23->i64[0]);
  v29 = v24;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v29) = *(uint64_t *)((char *)a1[1].i64 + v29);
    if (v29 == -16)
    {
      a1->i64[0] = v27;
      if (++v25 != 8)
        goto LABEL_38;
      return &v23->u64[1] == (unint64_t *)a2;
    }
    v30 = *(__int32 *)((char *)&a1->i32[3] + v29);
    v29 -= 8;
  }
  while (v30 > (int)v28);
  *(uint64_t *)((char *)&a1[1].i64[1] + v29) = v27;
  if (++v25 != 8)
    goto LABEL_38;
  return &v23->u64[1] == (unint64_t *)a2;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *((_DWORD *)a3 + 1);
  if (v4 < *((_DWORD *)result + 1))
  {
    v6 = *result;
    if ((int)v5 < v4)
    {
      *result = *a3;
      *a3 = v6;
      if (*((_DWORD *)a4 + 1) >= SHIDWORD(v6))
        return result;
      goto LABEL_12;
    }
    *result = *a2;
    *a2 = v6;
    LODWORD(v5) = *((_DWORD *)a3 + 1);
    if ((int)v5 < SHIDWORD(v6))
    {
      *a2 = *a3;
      *a3 = v6;
      v5 = HIDWORD(v6);
    }
    goto LABEL_11;
  }
  if ((int)v5 >= v4)
  {
LABEL_11:
    if (*((_DWORD *)a4 + 1) >= (int)v5)
      return result;
    goto LABEL_12;
  }
  v7 = *a2;
  *a2 = *a3;
  *a3 = v7;
  if (*((_DWORD *)a2 + 1) >= *((_DWORD *)result + 1))
  {
    if (*((_DWORD *)a4 + 1) >= SHIDWORD(v7))
      return result;
  }
  else
  {
    v8 = *result;
    *result = *a2;
    *a2 = v8;
    if (*((_DWORD *)a4 + 1) >= *((_DWORD *)a3 + 1))
      return result;
  }
LABEL_12:
  v9 = *a3;
  *a3 = *a4;
  *a4 = v9;
  if (*((_DWORD *)a3 + 1) < *((_DWORD *)a2 + 1))
  {
    v10 = *a2;
    *a2 = *a3;
    *a3 = v10;
    if (*((_DWORD *)a2 + 1) < *((_DWORD *)result + 1))
    {
      v11 = *result;
      *result = *a2;
      *a2 = v11;
    }
  }
  return result;
}

operations_research::sat::PseudoCosts *operations_research::sat::PseudoCosts::PseudoCosts(operations_research::sat::PseudoCosts *this, operations_research::sat::Model *a2)
{
  *(_QWORD *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((_QWORD *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((unint64_t)(-1431655765
                        * ((*(_QWORD *)(*(_QWORD *)this + 48) - *(_QWORD *)(*(_QWORD *)this + 40)) >> 2)) << 32)
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 3, (int)(-1431655765 * ((*(_QWORD *)(*(_QWORD *)this + 48) - *(_QWORD *)(*(_QWORD *)this + 40)) >> 2)));
  return this;
}

void sub_22DBD5934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PseudoCosts::InitializeCosts(operations_research::sat::PseudoCosts *this, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[16];

  if (!*((_BYTE *)this + 16))
  {
    if (*operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__ >= 1
      && (operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/pseudo_costs.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/pseudo_costs.cc", 36);
      v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Initializing pseudo costs", 25);
      google::LogMessage::~LogMessage((google::LogMessage *)v8);
    }
    v5 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 4) != v5)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        operations_research::sat::IncrementalAverage::Reset(v5 + v6, a2);
        ++v7;
        v5 = *((_QWORD *)this + 3);
        v6 += 16;
      }
      while (v7 < (*((_QWORD *)this + 4) - v5) >> 4);
    }
    *((_BYTE *)this + 16) = 1;
  }
}

void sub_22DBD5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::PseudoCosts::UpdateCostForVar(uint64_t a1, uint64_t a2, double a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  __int128 v12;
  int v13;

  v4 = a2;
  v13 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (uint64_t *)(a1 + 24);
  v8 = (v6 - v5) >> 4;
  if ((int)a2 >= (int)v8)
  {
    v10 = (((a2 << 32) | 0x100000000) + 0x100000000) >> 32;
    v12 = 0uLL;
    if (v10 <= v8)
    {
      if (v10 < v8)
      {
        v6 = v5 + 16 * v10;
        *(_QWORD *)(a1 + 32) = v6;
      }
    }
    else
    {
      std::vector<operations_research::sat::IncrementalAverage>::__append((char **)(a1 + 24), v10 - v8, &v12);
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
    }
    v8 = (v6 - v5) >> 4;
  }
  *(_QWORD *)&v12 = v8;
  if ((int)v8 <= v4)
  {
    v11 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v13, (int)&v12, "var < pseudo_costs_.size()");
    if (v11)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v12, (google::glog_internal_namespace_ *)"./ortools/sat/pseudo_costs.cc", 49, &v11);
      google::LogMessage::stream((google::LogMessage *)&v12);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v12);
    }
    v4 = v13;
    v5 = *v7;
  }
  operations_research::sat::IncrementalAverage::AddData((operations_research::sat::IncrementalAverage *)(v5 + 16 * v4), a3);
}

void sub_22DBD5B80(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PseudoCosts::UpdateCost(operations_research::sat::PseudoCosts *this, int **a2, uint64_t a3)
{
  int *v3;
  int *v4;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;

  if (a3)
  {
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v6 = (double)a3;
      if (a3 < (uint64_t)0x8000000000000003)
        v6 = -INFINITY;
      if (a3 <= 0x7FFFFFFFFFFFFFFDLL)
        v7 = v6;
      else
        v7 = INFINITY;
      do
      {
        v8 = *v3;
        v9 = *(int *)(*(_QWORD *)(*(_QWORD *)this + 408) + 4 * v8);
        if ((_DWORD)v9 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 936) + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 408) + 4 * v8)) & 1) == 0)
        {
          v10 = *(_QWORD *)(v3 + 1);
          if (v10 >= 1)
          {
            if ((unint64_t)v10 <= 0x7FFFFFFFFFFFFFFDLL)
              v11 = (double)v10;
            else
              v11 = INFINITY;
            if (!*((_BYTE *)this + 16))
            {
              operations_research::sat::PseudoCosts::InitializeCosts(this, 0.0);
              LODWORD(v8) = *v3;
            }
            operations_research::sat::PseudoCosts::UpdateCostForVar((uint64_t)this, v8, v7 / v11);
          }
        }
        v3 += 3;
      }
      while (v3 != v4);
    }
  }
}

uint64_t operations_research::sat::PseudoCosts::GetBestDecisionVar(operations_research::sat::PseudoCosts *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  int Recordings;
  double Cost;
  double v10;
  double v11;
  double v12;
  double v13;

  if (!*((_BYTE *)this + 16) || (int)((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4) < 1)
    return 0xFFFFFFFFLL;
  v2 = 0;
  v3 = 0;
  v4 = -1;
  v5 = -INFINITY;
  do
  {
    v6 = *(_QWORD *)this;
    v7 = *(int *)(*(_QWORD *)(*(_QWORD *)this + 408) + 4 * v3);
    if (((_DWORD)v7 == -1
       || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 936) + 24) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      && *(_QWORD *)(*(_QWORD *)(v6 + 40) + v2) < -*(_QWORD *)(*(_QWORD *)(v6 + 40) + v2 + 12))
    {
      Recordings = operations_research::sat::PseudoCosts::GetRecordings((uint64_t)this, v3);
      if (*(_QWORD *)(*((_QWORD *)this + 1) + 464) <= (int)(operations_research::sat::PseudoCosts::GetRecordings((uint64_t)this, (int)v3 + 1)+ Recordings))
      {
        Cost = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v3);
        if (Cost >= 0.000001)
          v10 = Cost;
        else
          v10 = 0.000001;
        v11 = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, (int)v3 + 1);
        if (v11 < 0.000001)
          v11 = 0.000001;
        v12 = v10 * v11;
        if (v12 > v5)
        {
          v5 = v12;
          v4 = v3;
        }
      }
    }
    v3 += 2;
    v2 += 24;
  }
  while ((int)v3 < (int)((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4));
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v13 = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v4);
  if (v13 < operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v4 ^ 1))
    return v4 ^ 1;
  else
    return v4;
}

uint64_t operations_research::sat::PseudoCosts::GetRecordings(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v5[2];
  uint64_t *v6;
  int v7;

  v7 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v5[0] = (*(_QWORD *)(a1 + 32) - v2) >> 4;
  if (a2 < SLODWORD(v5[0]))
    return *(unsigned int *)(v2 + 16 * a2 + 8);
  v6 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v7, (int)v5, "var < pseudo_costs_.size()");
  if (v6)
  {
    google::LogMessageFatal::LogMessageFatal(v5, (google::glog_internal_namespace_ *)"./ortools/sat/pseudo_costs.h", 53, &v6);
    google::LogMessage::stream((google::LogMessage *)v5);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16 * v7 + 8);
}

void sub_22DBD5EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

double operations_research::sat::PseudoCosts::GetCost(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v5[2];
  uint64_t *v6;
  int v7;

  v7 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v5[0] = (*(_QWORD *)(a1 + 32) - v2) >> 4;
  if (a2 < SLODWORD(v5[0]))
    return *(double *)(v2 + 16 * a2);
  v6 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v7, (int)v5, "var < pseudo_costs_.size()");
  if (v6)
  {
    google::LogMessageFatal::LogMessageFatal(v5, (google::glog_internal_namespace_ *)"./ortools/sat/pseudo_costs.h", 46, &v6);
    google::LogMessage::stream((google::LogMessage *)v5);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  return *(double *)(*(_QWORD *)(a1 + 24) + 16 * v7);
}

void sub_22DBD5F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::GetBoundChanges(int a1@<W0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  operations_research::sat::IntegerTrail *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 != -1)
  {
    v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
    v8 = *(_QWORD *)(v6 + 112);
    v9 = (unint64_t)(*(_QWORD *)(v6 + 120) - v8) >> 5;
    v10 = (unint64_t *)(v8 + 32 * a1);
    if (a1 >= (int)v9)
      v11 = (unint64_t *)(v6 + 56);
    else
      v11 = v10;
    v14 = *v11;
    v13 = v11 + 1;
    v12 = v14;
    if ((v14 & 1) != 0)
      v13 = (_QWORD *)*v13;
    if (v12 >= 2)
    {
      v15 = 0;
      v16 = (_QWORD *)((char *)v13 + 12 * (v12 >> 1));
      do
      {
        v18 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 != -1)
        {
          v19 = *(_QWORD *)((char *)v13 + 4);
          v20 = *(int *)(*((_QWORD *)v7 + 51) + 4 * v18);
          v21 = __OFADD__((_DWORD)v20, 1);
          if ((_DWORD)v20 == -1
            || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 117) + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          {
            v22 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 12 * v18);
            v23 = v19 - v22;
            v24 = (v19 - v22) ^ v19;
            v25 = v22 ^ v19;
            v26 = (v19 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if ((v24 & v25) < 0 == v21)
              v26 = v23;
            if (v26 >= 0x7FFFFFFFFFFFFFFELL)
              v26 = 0x7FFFFFFFFFFFFFFELL;
            if (v26 <= (uint64_t)0x8000000000000002)
              v27 = 0x8000000000000002;
            else
              v27 = v26;
            v28 = (unint64_t)a3[2];
            if ((unint64_t)v15 < v28)
            {
              *(_DWORD *)v15 = v18;
              *(_QWORD *)(v15 + 4) = v27;
              v17 = v15 + 12;
            }
            else
            {
              v29 = (char *)*a3;
              v30 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*a3) >> 2);
              v31 = v30 + 1;
              if (v30 + 1 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v29) >> 2);
              if (2 * v32 > v31)
                v31 = 2 * v32;
              if (v32 >= 0xAAAAAAAAAAAAAAALL)
                v33 = 0x1555555555555555;
              else
                v33 = v31;
              if (v33)
              {
                if (v33 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v34 = (char *)operator new(12 * v33);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[12 * v30];
              *(_DWORD *)v35 = v18;
              *(_QWORD *)(v35 + 4) = v27;
              v36 = v35;
              if (v15 != v29)
              {
                do
                {
                  v37 = *(_QWORD *)(v15 - 12);
                  v15 -= 12;
                  v38 = *((_DWORD *)v15 + 2);
                  *(_QWORD *)(v36 - 12) = v37;
                  v36 -= 12;
                  *((_DWORD *)v36 + 2) = v38;
                }
                while (v15 != v29);
                v15 = (char *)*a3;
              }
              v17 = v35 + 12;
              *a3 = v36;
              a3[1] = v35 + 12;
              a3[2] = &v34[12 * v33];
              if (v15)
                operator delete(v15);
            }
            a3[1] = v17;
            v15 = v17;
          }
        }
        v13 = (_QWORD *)((char *)v13 + 12);
      }
      while (v13 != v16);
    }
  }
}

void sub_22DBD61F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DBD6280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::IncrementalAverage>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v6 - *a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[16 * v8];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    v18 = v15;
    do
    {
      *(_OWORD *)v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
      operator delete(v7);
  }
}

void operations_research::sat::RestartPolicy::Reset(operations_research::sat::RestartPolicy *this)
{
  uint64_t v2;
  int v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  void **v42;
  unint64_t v43;
  void *v44;
  operations_research::sat *v45;
  uint64_t *v46;
  uint64_t *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t *restarted;
  int v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  uint64_t *v76;
  unint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD *v85;
  void **v86;
  void *v87[2];
  uint64_t v88;
  __int128 v89;
  void *v90[2];
  uint64_t v91;
  __int128 v92;
  char v93;
  void *v94;
  uint64_t *v95;
  void *__p[2];
  _QWORD v97[3];

  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = 0;
  v2 = *(_QWORD *)this;
  v3 = *(_DWORD *)(*(_QWORD *)this + 100);
  *((_DWORD *)this + 3) = v3;
  *((_DWORD *)this + 4) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = *(_DWORD *)(v2 + 268);
  *((_DWORD *)this + 14) = *(_DWORD *)(v2 + 352);
  *((_DWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  v4 = (void **)*((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 15) = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = *((_QWORD *)this + 12);
      v4 = (void **)(*((_QWORD *)this + 11) + 8);
      *((_QWORD *)this + 11) = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 512;
  }
  else
  {
    if (v6 >> 3 != 2)
      goto LABEL_8;
    v8 = 1024;
  }
  *((_QWORD *)this + 14) = v8;
LABEL_8:
  *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)this + 352);
  *(_QWORD *)((char *)this + 140) = 0;
  *(_QWORD *)((char *)this + 132) = 0;
  *((_DWORD *)this + 37) = 0;
  v9 = (void **)*((_QWORD *)this + 20);
  v10 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 24) = 0;
  v11 = v10 - (_QWORD)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v12 = *((_QWORD *)this + 21);
      v9 = (void **)(*((_QWORD *)this + 20) + 8);
      *((_QWORD *)this + 20) = v9;
      v11 = v12 - (_QWORD)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 512;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_15;
    v13 = 1024;
  }
  *((_QWORD *)this + 23) = v13;
LABEL_15:
  *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)this + 356);
  *(_QWORD *)((char *)this + 212) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *((_DWORD *)this + 55) = 0;
  v14 = (void **)*((_QWORD *)this + 29);
  v15 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 33) = 0;
  v16 = v15 - (_QWORD)v14;
  if (v16 >= 0x11)
  {
    do
    {
      operator delete(*v14);
      v17 = *((_QWORD *)this + 30);
      v14 = (void **)(*((_QWORD *)this + 29) + 8);
      *((_QWORD *)this + 29) = v14;
      v16 = v17 - (_QWORD)v14;
    }
    while (v16 > 0x10);
  }
  if (v16 >> 3 == 1)
  {
    v18 = 512;
    goto LABEL_21;
  }
  if (v16 >> 3 == 2)
  {
    v18 = 1024;
LABEL_21:
    *((_QWORD *)this + 32) = v18;
  }
  v19 = (char *)*((_QWORD *)this + 3);
  v86 = (void **)((char *)this + 24);
  *((_QWORD *)this + 4) = v19;
  v20 = *(_QWORD *)this;
  if (*(int *)(*(_QWORD *)this + 40) < 1)
    goto LABEL_55;
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = *(_DWORD *)(*(_QWORD *)(v20 + 48) + 4 * v21);
      v23 = *((_QWORD *)this + 5);
      if ((unint64_t)v19 >= v23)
        break;
      *(_DWORD *)v19 = v22;
      v19 += 4;
      *((_QWORD *)this + 4) = v19;
      if (++v21 >= *(int *)(v20 + 40))
        goto LABEL_54;
    }
    v24 = (char *)*v86;
    v25 = v19 - (_BYTE *)*v86;
    v26 = v25 >> 2;
    v27 = (v25 >> 2) + 1;
    if (v27 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v28 = v23 - (_QWORD)v24;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 62)
        goto LABEL_122;
      v30 = operator new(4 * v29);
      v31 = &v30[4 * v26];
      *v31 = v22;
      v32 = (uint64_t)(v31 + 1);
      if (v19 == v24)
        goto LABEL_40;
    }
    else
    {
      v30 = 0;
      v31 = (_DWORD *)(4 * v26);
      *(_DWORD *)(4 * v26) = v22;
      v32 = 4 * v26 + 4;
      if (v19 == v24)
        goto LABEL_40;
    }
    v33 = v19 - 4 - v24;
    if (v33 < 0xBC)
    {
      v34 = v19;
      goto LABEL_39;
    }
    if (&v30[v25 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v25 - 4])
    {
      v34 = v19;
      do
      {
LABEL_39:
        v35 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--v31 = v35;
      }
      while (v34 != v24);
      goto LABEL_40;
    }
    if (&v19[-(v33 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4)
    {
      v34 = v19;
      goto LABEL_39;
    }
    if ((unint64_t)(v19 - &v30[v25]) < 0x20)
    {
      v34 = v19;
      goto LABEL_39;
    }
    v36 = (v33 >> 2) + 1;
    v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
    v34 = &v19[-v37];
    v31 = (_DWORD *)((char *)v31 - v37);
    v38 = &v30[4 * v26 - 16];
    v39 = v19 - 16;
    v40 = v36 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 8;
    }
    while (v40);
    if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_39;
LABEL_40:
    *((_QWORD *)this + 3) = v31;
    *((_QWORD *)this + 4) = v32;
    *((_QWORD *)this + 5) = &v30[4 * v29];
    if (v24)
    {
      operator delete(v24);
      v20 = *(_QWORD *)this;
    }
    v19 = (char *)v32;
    *((_QWORD *)this + 4) = v32;
    ++v21;
  }
  while (v21 < *(int *)(v20 + 40));
LABEL_54:
  if (*v86 != v19)
    return;
LABEL_55:
  v42 = *(void ***)(v20 + 56);
  v87[1] = 0;
  v88 = 0;
  v87[0] = 0;
  v43 = *((unsigned __int8 *)v42 + 23);
  v44 = v42[1];
  if ((v43 & 0x80u) != 0)
  {
    v42 = (void **)*v42;
    v43 = (unint64_t)v44;
  }
  *(_QWORD *)&v89 = v42;
  *((_QWORD *)&v89 + 1) = v43;
  memset(v97, 0, sizeof(v97));
  *(_OWORD *)__p = 0u;
  if (v42 == v87)
  {
    *(_OWORD *)__p = 0uLL;
    v97[0] = 0;
    HIBYTE(v88) = 0;
    LOBYTE(v87[0]) = 0;
    *(_QWORD *)&v89 = v87;
    *((_QWORD *)&v89 + 1) = 0;
    *(_OWORD *)v90 = 0uLL;
    v91 = 0;
    *(_QWORD *)&v92 = v90;
    *((_QWORD *)&v92 + 1) = 0;
  }
  else
  {
    *(_OWORD *)&v97[1] = v89;
    *(_OWORD *)v90 = 0uLL;
    v91 = 0;
    v92 = v89;
  }
  v93 = 44;
  absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()((uint64_t)v90, (uint64_t)__p);
  std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>(&v94, (uint64_t)__p[0], (uint64_t)__p[1]);
  v45 = (operations_research::sat *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v91) < 0)
  {
    operator delete(v90[0]);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
      goto LABEL_64;
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_64:
    v46 = (uint64_t *)v94;
    v47 = v95;
    if (v94 != v95)
      goto LABEL_73;
    goto LABEL_65;
  }
  operator delete(v87[0]);
  v46 = (uint64_t *)v94;
  v47 = v95;
  if (v94 == v95)
  {
LABEL_65:
    if (v46)
      goto LABEL_103;
LABEL_66:
    v48 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_DWORD **)this + 3) == v48)
      goto LABEL_110;
    return;
  }
LABEL_73:
  while (2)
  {
    while (1)
    {
      restarted = (uint64_t *)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(v45);
      LODWORD(v90[0]) = 0;
      v45 = (operations_research::sat *)google::protobuf::internal::ParseNamedEnum(restarted, (uint64_t)v46, v90);
      if ((v45 & 1) == 0)
        break;
      v51 = (int)v90[0];
      v53 = (char *)*((_QWORD *)this + 4);
      v52 = *((_QWORD *)this + 5);
      if ((unint64_t)v53 < v52)
      {
        *(_DWORD *)v53 = v90[0];
        v49 = (uint64_t)(v53 + 4);
LABEL_72:
        *((_QWORD *)this + 4) = v49;
        v46 += 3;
        if (v46 == v47)
          goto LABEL_102;
        continue;
      }
      v54 = (char *)*v86;
      v55 = v53 - (_BYTE *)*v86;
      v56 = v55 >> 2;
      v57 = (v55 >> 2) + 1;
      if (v57 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v58 = v52 - (_QWORD)v54;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (!v59)
      {
        v45 = 0;
        v60 = (_DWORD *)(4 * v56);
        *(_DWORD *)(4 * v56) = v90[0];
        v49 = 4 * v56 + 4;
        if (v53 == v54)
          goto LABEL_100;
LABEL_94:
        v67 = v53 - 4 - v54;
        if (v67 < 0x2C)
          goto LABEL_127;
        if ((unint64_t)(v53 - ((char *)v45 + v55)) < 0x20)
          goto LABEL_127;
        v68 = (v67 >> 2) + 1;
        v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        v70 = &v53[-v69];
        v60 = (_DWORD *)((char *)v60 - v69);
        v71 = (_OWORD *)((char *)v45 + 4 * v56 - 16);
        v72 = v53 - 16;
        v73 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v74 = *(_OWORD *)v72;
          *(v71 - 1) = *((_OWORD *)v72 - 1);
          *v71 = v74;
          v71 -= 2;
          v72 -= 32;
          v73 -= 8;
        }
        while (v73);
        v53 = v70;
        if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_127:
          do
          {
            v75 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            *--v60 = v75;
          }
          while (v53 != v54);
        }
        goto LABEL_100;
      }
      if (v59 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = (operations_research::sat *)operator new(4 * v59);
      v60 = (_DWORD *)((char *)v45 + 4 * v56);
      *v60 = v51;
      v49 = (uint64_t)(v60 + 1);
      if (v53 != v54)
        goto LABEL_94;
LABEL_100:
      *((_QWORD *)this + 3) = v60;
      *((_QWORD *)this + 4) = v49;
      *((_QWORD *)this + 5) = (char *)v45 + 4 * v59;
      if (!v54)
        goto LABEL_72;
      operator delete(v54);
      *((_QWORD *)this + 4) = v49;
      v46 += 3;
      if (v46 == v47)
        goto LABEL_102;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v90, (google::glog_internal_namespace_ *)"./ortools/sat/restart.cc", 68, 1);
    v61 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v90);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Couldn't parse the RestartAlgorithm name: '", 43);
    v63 = *((char *)v46 + 23);
    if (v63 >= 0)
      v64 = (uint64_t)v46;
    else
      v64 = *v46;
    if (v63 >= 0)
      v65 = *((unsigned __int8 *)v46 + 23);
    else
      v65 = v46[1];
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"'.", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v90);
    v46 += 3;
    if (v46 != v47)
      continue;
    break;
  }
LABEL_102:
  v46 = (uint64_t *)v94;
  if (!v94)
    goto LABEL_66;
LABEL_103:
  v76 = v95;
  if (v95 != v46)
  {
    do
    {
      if (*((char *)v76 - 1) < 0)
        operator delete((void *)*(v76 - 3));
      v76 -= 3;
    }
    while (v76 != v46);
    v95 = v46;
    operator delete(v94);
    v48 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_DWORD **)this + 3) != v48)
      return;
LABEL_110:
    v77 = *((_QWORD *)this + 5);
    if ((unint64_t)v48 >= v77)
    {
      v79 = v77 - (_QWORD)v48;
      v80 = v79 >> 1;
      if ((unint64_t)(v79 >> 1) <= 1)
        v80 = 1;
      v81 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL;
      v82 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v81)
        v82 = v80;
      if (v82 >> 62)
LABEL_122:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v83 = v82;
      v84 = operator new(4 * v82);
      v85 = &v84[v83];
      *v84 = 0;
      v78 = v84 + 1;
      *((_QWORD *)this + 3) = v84;
      *((_QWORD *)this + 4) = v84 + 1;
      *((_QWORD *)this + 5) = v85;
      if (v48)
        operator delete(v48);
    }
    else
    {
      *v48 = 0;
      v78 = v48 + 1;
    }
    *((_QWORD *)this + 4) = v78;
    return;
  }
  v95 = v46;
  operator delete(v46);
  v48 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_DWORD **)this + 3) == v48)
    goto LABEL_110;
}

void sub_22DBD6B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t operations_research::sat::RestartPolicy::ShouldRestart(operations_research::sat::RestartPolicy *this)
{
  unint64_t v1;
  uint64_t result;
  unint64_t v4;
  int v5;
  double v6;
  double v7;
  unint64_t v8;
  int v9;
  double v10;
  double v11;
  int v12;
  int v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  char v27;

  v1 = *((int *)this + 5);
  switch(*(_DWORD *)(*((_QWORD *)this + 3) + 4
                                             * (v1 % ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2))))
  {
    case 1:
      if (!*((_DWORD *)this + 13))
      {
        ++*((_DWORD *)this + 12);
        goto LABEL_22;
      }
      return 0;
    case 2:
      v8 = *((_QWORD *)this + 15);
      if (v8 != *((_DWORD *)this + 14))
        return 0;
      v9 = *((_DWORD *)this + 15);
      v10 = 0.0;
      v11 = 0.0;
      if (v9)
        v11 = *((double *)this + 8) / (double)v9;
      if (v8)
        v10 = *((double *)this + 9) / (double)v8;
      if (v11 < *(double *)(*(_QWORD *)this + 344) * v10)
        goto LABEL_22;
      return 0;
    case 3:
      v4 = *((_QWORD *)this + 24);
      if (v4 != *((_DWORD *)this + 32))
        return 0;
      v5 = *((_DWORD *)this + 33);
      v6 = 0.0;
      v7 = 0.0;
      if (v5)
        v7 = *((double *)this + 17) / (double)v5;
      if (v4)
        v6 = *((double *)this + 18) / (double)v4;
      if (v7 < *(double *)(*(_QWORD *)this + 376) * v6)
        goto LABEL_22;
      return 0;
    case 4:
      if (*((_DWORD *)this + 13))
        return 0;
LABEL_22:
      v12 = *((_DWORD *)this + 3);
      ++*((_DWORD *)this + 2);
      if (!v12)
      {
        *((_DWORD *)this + 5) = v1 + 1;
        v13 = *((_DWORD *)this + 4) + (int)(*(double *)(*(_QWORD *)this + 104) * (double)*((int *)this + 4));
        *((_DWORD *)this + 3) = v13;
        *((_DWORD *)this + 4) = v13;
      }
      *((_QWORD *)this + 9) = 0;
      v14 = (void **)*((_QWORD *)this + 11);
      v15 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 15) = 0;
      v16 = v15 - (_QWORD)v14;
      if (v16 >= 0x11)
      {
        do
        {
          operator delete(*v14);
          v17 = *((_QWORD *)this + 12);
          v14 = (void **)(*((_QWORD *)this + 11) + 8);
          *((_QWORD *)this + 11) = v14;
          v16 = v17 - (_QWORD)v14;
        }
        while (v16 > 0x10);
      }
      if (v16 >> 3 == 1)
      {
        v18 = 512;
      }
      else
      {
        if (v16 >> 3 != 2)
          goto LABEL_31;
        v18 = 1024;
      }
      *((_QWORD *)this + 14) = v18;
LABEL_31:
      *((_QWORD *)this + 18) = 0;
      v19 = (void **)*((_QWORD *)this + 20);
      v20 = *((_QWORD *)this + 21);
      *((_QWORD *)this + 24) = 0;
      v21 = v20 - (_QWORD)v19;
      if (v21 >= 0x11)
      {
        do
        {
          operator delete(*v19);
          v22 = *((_QWORD *)this + 21);
          v19 = (void **)(*((_QWORD *)this + 20) + 8);
          *((_QWORD *)this + 20) = v19;
          v21 = v22 - (_QWORD)v19;
        }
        while (v21 > 0x10);
      }
      if (v21 >> 3 == 1)
      {
        v23 = 512;
      }
      else
      {
        if (v21 >> 3 != 2)
          goto LABEL_38;
        v23 = 1024;
      }
      *((_QWORD *)this + 23) = v23;
LABEL_38:
      v24 = *(_DWORD *)(*(_QWORD *)this + 268);
      *((_DWORD *)this + 13) = v24;
      result = 1;
      if (*(_DWORD *)(*((_QWORD *)this + 3)
                     + 4
                     * (*((int *)this + 5)
                      % (unint64_t)((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2))) == 1)
      {
        v25 = *((_DWORD *)this + 12) + 1;
        while (v25 >= 3)
        {
          v26 = v25 + 1;
          v27 = __clz(v26);
          v25 = v26 - (1 << (v27 ^ 0x1F));
          if (!v25)
          {
            *((_DWORD *)this + 13) = (1 << (30 - v27)) * v24;
            return 1;
          }
        }
        *((_DWORD *)this + 13) = v24;
        return 1;
      }
      return result;
    default:
      return 0;
  }
}

void operations_research::sat::RestartPolicy::OnConflict(operations_research::sat::RestartPolicy *this, int a2, int a3, int a4)
{
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  void **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  double v45;

  v8 = *((_DWORD *)this + 13);
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v10 < 0 == v9)
    *((_DWORD *)this + 13) = v10;
  v11 = *((_DWORD *)this + 3);
  v9 = __OFSUB__(v11, 1);
  v12 = v11 - 1;
  if (v12 < 0 == v9)
    *((_DWORD *)this + 3) = v12;
  v13 = (void **)*((_QWORD *)this + 30);
  v14 = (void **)*((_QWORD *)this + 29);
  ++*((_DWORD *)this + 51);
  *((float64x2_t *)this + 13) = vaddq_f64(*((float64x2_t *)this + 13), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  if (v13 == v14)
    v15 = 0;
  else
    v15 = (((char *)v13 - (char *)v14) << 7) - 1;
  v17 = *((_QWORD *)this + 32);
  v16 = *((_QWORD *)this + 33);
  v18 = v16 + v17;
  v45 = (double)a2;
  if (v15 == v16 + v17)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 224);
    v14 = (void **)*((_QWORD *)this + 29);
    v17 = *((_QWORD *)this + 32);
    v16 = *((_QWORD *)this + 33);
    v18 = v17 + v16;
  }
  (*(_DWORD **)((char *)v14 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)))[v18 & 0x3FF] = a2;
  *((_QWORD *)this + 33) = v16 + 1;
  if (v16 + 1 > (unint64_t)*((int *)this + 50))
  {
    *((double *)this + 27) = *((double *)this + 27)
                           - (double)(*(int **)((char *)v14 + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)))[v17 & 0x3FF];
    v19 = v17 + 1;
    *((_QWORD *)this + 32) = v19;
    *((_QWORD *)this + 33) = v16;
    if (v19 >= 0x800)
    {
      operator delete(*v14);
      *((_QWORD *)this + 29) += 8;
      *((_QWORD *)this + 32) -= 1024;
    }
  }
  v20 = (void **)*((_QWORD *)this + 12);
  v21 = (void **)*((_QWORD *)this + 11);
  ++*((_DWORD *)this + 15);
  *((float64x2_t *)this + 4) = vaddq_f64(*((float64x2_t *)this + 4), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0));
  if (v20 == v21)
    v22 = 0;
  else
    v22 = (((char *)v20 - (char *)v21) << 7) - 1;
  v24 = *((_QWORD *)this + 14);
  v23 = *((_QWORD *)this + 15);
  v25 = v23 + v24;
  if (v22 == v23 + v24)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 80);
    v21 = (void **)*((_QWORD *)this + 11);
    v24 = *((_QWORD *)this + 14);
    v23 = *((_QWORD *)this + 15);
    v25 = v24 + v23;
  }
  (*(_DWORD **)((char *)v21 + ((v25 >> 7) & 0x1FFFFFFFFFFFFF8)))[v25 & 0x3FF] = a3;
  *((_QWORD *)this + 15) = v23 + 1;
  if (v23 + 1 > (unint64_t)*((int *)this + 14))
  {
    *((double *)this + 9) = *((double *)this + 9)
                          - (double)(*(int **)((char *)v21 + ((v24 >> 7) & 0x1FFFFFFFFFFFFF8)))[v24 & 0x3FF];
    v26 = v24 + 1;
    *((_QWORD *)this + 14) = v26;
    *((_QWORD *)this + 15) = v23;
    if (v26 >= 0x800)
    {
      operator delete(*v21);
      *((_QWORD *)this + 11) += 8;
      *((_QWORD *)this + 14) -= 1024;
    }
  }
  v27 = (void **)*((_QWORD *)this + 21);
  v28 = (void **)*((_QWORD *)this + 20);
  ++*((_DWORD *)this + 33);
  *(float64x2_t *)((char *)this + 136) = vaddq_f64(*(float64x2_t *)((char *)this + 136), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a4), 0));
  if (v27 == v28)
    v29 = 0;
  else
    v29 = (((char *)v27 - (char *)v28) << 7) - 1;
  v31 = *((_QWORD *)this + 23);
  v30 = *((_QWORD *)this + 24);
  v32 = v30 + v31;
  if (v29 == v30 + v31)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 152);
    v28 = (void **)*((_QWORD *)this + 20);
    v31 = *((_QWORD *)this + 23);
    v30 = *((_QWORD *)this + 24);
    v32 = v31 + v30;
  }
  (*(_DWORD **)((char *)v28 + ((v32 >> 7) & 0x1FFFFFFFFFFFFF8)))[v32 & 0x3FF] = a4;
  *((_QWORD *)this + 24) = v30 + 1;
  if (v30 + 1 > (unint64_t)*((int *)this + 32))
  {
    *((double *)this + 18) = *((double *)this + 18)
                           - (double)(*(int **)((char *)v28 + ((v31 >> 7) & 0x1FFFFFFFFFFFFF8)))[v31 & 0x3FF];
    v33 = v31 + 1;
    *((_QWORD *)this + 23) = v33;
    *((_QWORD *)this + 24) = v30;
    if (v33 >= 0x800)
    {
      operator delete(*v28);
      *((_QWORD *)this + 20) += 8;
      *((_QWORD *)this + 23) -= 1024;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)this + 98))
  {
    if (*((_QWORD *)this + 24) == *((_DWORD *)this + 32) && *((_QWORD *)this + 15) == *((_DWORD *)this + 14))
    {
      v34 = *((_QWORD *)this + 33);
      if (v34 == *((_DWORD *)this + 50))
      {
        v35 = *(double *)(*(_QWORD *)this + 360);
        if (v34)
        {
          if (v35 * (*((double *)this + 27) / (double)v34) >= v45)
            return;
        }
        else if (v35 * 0.0 >= v45)
        {
          return;
        }
        *((_QWORD *)this + 9) = 0;
        v36 = (void **)*((_QWORD *)this + 11);
        v37 = *((_QWORD *)this + 12);
        *((_QWORD *)this + 15) = 0;
        v38 = v37 - (_QWORD)v36;
        if (v38 >= 0x11)
        {
          do
          {
            operator delete(*v36);
            v39 = *((_QWORD *)this + 12);
            v36 = (void **)(*((_QWORD *)this + 11) + 8);
            *((_QWORD *)this + 11) = v36;
            v38 = v39 - (_QWORD)v36;
          }
          while (v38 > 0x10);
        }
        if (v38 >> 3 == 1)
        {
          v40 = 512;
        }
        else
        {
          if (v38 >> 3 != 2)
          {
LABEL_44:
            *((_QWORD *)this + 18) = 0;
            v41 = (void **)*((_QWORD *)this + 20);
            v42 = *((_QWORD *)this + 21);
            *((_QWORD *)this + 24) = 0;
            v43 = v42 - (_QWORD)v41;
            if (v43 >= 0x11)
            {
              do
              {
                operator delete(*v41);
                v44 = *((_QWORD *)this + 21);
                v41 = (void **)(*((_QWORD *)this + 20) + 8);
                *((_QWORD *)this + 20) = v41;
                v43 = v44 - (_QWORD)v41;
              }
              while (v43 > 0x10);
            }
            if (v43 >> 3 == 1)
            {
              *((_QWORD *)this + 23) = 512;
            }
            else if (v43 >> 3 == 2)
            {
              *((_QWORD *)this + 23) = 1024;
            }
            return;
          }
          v40 = 1024;
        }
        *((_QWORD *)this + 14) = v40;
        goto LABEL_44;
      }
    }
  }
}

void operations_research::sat::RestartPolicy::InfoString(operations_research::sat::RestartPolicy *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  int v8;
  double v9;
  double v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  double v17;
  double v18;
  unint64_t v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  int v24;
  double v25;
  double v26;
  unint64_t v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  void *__p[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  std::string v37;
  void *v38[2];
  unsigned __int8 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  double v44;
  void *v45;
  double v46;
  BOOL (*v47)(uint64_t, uint64_t, int, char *);
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v44 = *((unsigned int *)this + 2);
  v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num restarts: %d\n", 19, (uint64_t)&v44, 1, (uint64_t)&v40);
  operations_research::ProtoEnumToString<operations_research::sat::SatParameters_RestartAlgorithm>((operations_research::sat *)*(unsigned int *)(*((_QWORD *)this + 3)+ 4* (*((int *)this + 5)% (unint64_t)((uint64_t)(*((_QWORD *)this + 4)- *((_QWORD *)this + 3)) >> 2))), &v37);
  v44 = COERCE_DOUBLE(&v37);
  v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  current_strategy: %s\n", 23, (uint64_t)&v44, 1, (uint64_t)v38);
  if ((v39 & 0x80u) == 0)
    v4 = v38;
  else
    v4 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v5 = v39;
  else
    v5 = (std::string::size_type)v38[1];
  v6 = std::string::append(&v40, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *((_DWORD *)this + 15);
  v9 = 0.0;
  v10 = 0.0;
  if (v8)
    v10 = *((double *)this + 8) / (double)v8;
  v11 = *((_QWORD *)this + 15);
  if (v11)
    v9 = *((double *)this + 9) / (double)v11;
  v44 = v10;
  v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v46 = v9;
  v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict decision level avg: %f window: %f\n", 45, (uint64_t)&v44, 2, (uint64_t)v35);
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v41, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *((_DWORD *)this + 33);
  v17 = 0.0;
  v18 = 0.0;
  if (v16)
    v18 = *((double *)this + 17) / (double)v16;
  v19 = *((_QWORD *)this + 24);
  if (v19)
    v17 = *((double *)this + 18) / (double)v19;
  v44 = v18;
  v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v46 = v17;
  v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict lbd avg: %f window: %f\n", 34, (uint64_t)&v44, 2, (uint64_t)v33);
  if ((v34 & 0x80u) == 0)
    v20 = v33;
  else
    v20 = (void **)v33[0];
  if ((v34 & 0x80u) == 0)
    v21 = v34;
  else
    v21 = (std::string::size_type)v33[1];
  v22 = std::string::append(&v42, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *((_DWORD *)this + 51);
  v25 = 0.0;
  v26 = 0.0;
  if (v24)
    v26 = *((double *)this + 26) / (double)v24;
  v27 = *((_QWORD *)this + 33);
  if (v27)
    v25 = *((double *)this + 27) / (double)v27;
  v44 = v26;
  v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v46 = v25;
  v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict trail size avg: %f window: %f\n", 41, (uint64_t)&v44, 2, (uint64_t)__p);
  if ((v32 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v32 & 0x80u) == 0)
    v29 = v32;
  else
    v29 = (std::string::size_type)__p[1];
  v30 = std::string::append(&v43, (const std::string::value_type *)v28, v29);
  *a2 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if (((char)v34 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v43.__r_.__value_.__l.__data_);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v33[0]);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if (((char)v36 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v42.__r_.__value_.__l.__data_);
  if (((char)v36 & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v35[0]);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if (((char)v39 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v41.__r_.__value_.__l.__data_);
  if (((char)v39 & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v38[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_55:
    operator delete(v40.__r_.__value_.__l.__data_);
    return;
  }
LABEL_54:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_55;
}

void sub_22DBD770C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v50 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 112));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 121) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a15);
  if ((*(char *)(v50 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v50 - 144));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a21);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a44 & 0x80000000) == 0)
LABEL_20:
      _Unwind_Resume(exception_object);
LABEL_19:
    operator delete(a39);
    _Unwind_Resume(exception_object);
  }
LABEL_18:
  operator delete(a27);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_20;
  goto LABEL_19;
}

void operations_research::ProtoEnumToString<operations_research::sat::SatParameters_RestartAlgorithm>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  google::protobuf::EnumDescriptor *restarted;
  uint64_t ValueByNumber;
  char *v6;
  __int128 *v7;
  __int128 v8;
  operations_research::sat *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  restarted = (google::protobuf::EnumDescriptor *)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(a1);
  ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(restarted, (int)a1);
  if (ValueByNumber)
  {
    v7 = *(__int128 **)ValueByNumber;
    if (*(char *)(*(_QWORD *)ValueByNumber + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v17[0] = "Invalid enum value of: ";
    v17[1] = 23;
    v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)a1, v16, v6);
    v15[0] = v16;
    v15[1] = v9 - (operations_research::sat *)v16;
    v14[0] = " for enum type: ";
    v14[1] = 16;
    v10 = (_QWORD **)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(v9);
    v11 = *v10;
    v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      v11 = (_QWORD *)**v10;
      v12 = (*v10)[1];
    }
    v13[0] = v11;
    v13[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v17, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, a2);
  }
}

void absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  char v22[8];
  uint64_t v23[32];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[0] = *(_BYTE *)(a1 + 40);
  if (*(_QWORD *)(a1 + 24))
  {
    v3 = 0;
    while (v18 != 1)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a1 + 32);
      v6 = absl::lts_2020_02_25::ByChar::Find(v22, v4, v5, v3);
      if ((char *)(v4 + v5) == v6)
        v18 = 1;
      v8 = (char *)(v5 - v17);
      if (v5 < v17)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      if (v8 >= &v6[-v4 - v17])
        v8 = &v6[-v4 - v17];
      v19 = v4 + v17;
      v20 = v8;
      v3 = (unint64_t)&v8[v17 + v7];
      v17 = v3;
      if (v8)
        goto LABEL_13;
    }
    v18 = 2;
  }
  else
  {
    v18 = 2;
    v17 = *(_QWORD *)(a1 + 32);
  }
LABEL_13:
  while (v18 != 2)
  {
    v9 = 0;
    v10 = v19;
    v11 = v20;
LABEL_15:
    v12 = (unint64_t *)&v23[2 * v9];
    *v12 = v10;
    v12[1] = (unint64_t)v11;
    while (v18 != 1)
    {
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = absl::lts_2020_02_25::ByChar::Find(v22, v13, v14, v17);
      if ((char *)(v13 + v14) == v15)
        v18 = 1;
      v11 = (char *)(v14 - v17);
      if (v14 < v17)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v10 = v13 + v17;
      if (v11 >= &v15[-v13 - v17])
        v11 = &v15[-v13 - v17];
      v19 = v13 + v17;
      v20 = v11;
      v17 += (unint64_t)&v11[v16];
      if (v11)
      {
        if (++v9 == 16)
          goto LABEL_26;
        goto LABEL_15;
      }
    }
    v18 = 2;
    ++v9;
LABEL_26:
    std::vector<std::string_view>::__insert_with_size[abi:ne180100]<absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *,absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *>((char **)a2, *(_QWORD *)(a2 + 8), (unint64_t)v23, &v23[2 * v9], v9);
  }
}

void sub_22DBD7BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::string_view>::__insert_with_size[abi:ne180100]<absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *,absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *>(char **a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  const double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  const double *v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  const double *v75;
  double *v76;
  uint64_t v77;
  const double *v78;
  double *v79;
  float64x2x2_t v80;
  float64x2x2_t v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v12 = v6 >> 4;
  v13 = (unint64_t)a1[1];
  v14 = a1[2];
  if (a5 <= (uint64_t)&v14[-v13] >> 4)
  {
    v22 = v13 - (_QWORD)v7;
    v23 = (uint64_t)(v13 - (_QWORD)v7) >> 4;
    if (v23 >= a5)
    {
      v24 = a3 + 16 * a5;
      v27 = a1[1];
LABEL_45:
      v57 = &v7[16 * a5];
      v58 = &v27[-16 * a5];
      v59 = v27;
      if ((unint64_t)v58 < v13)
      {
        v59 = v27;
        do
        {
          v60 = *(_OWORD *)v58;
          v58 += 16;
          *(_OWORD *)v59 = v60;
          v59 += 16;
        }
        while ((unint64_t)v58 < v13);
      }
      a1[1] = v59;
      if (v27 != v57)
        memmove(&v27[-16 * ((v27 - v57) >> 4)], v7, v27 - v57);
      if (v24 == a3)
        return v7;
      v61 = v24 - a3 - 16;
      if (v61 < 0x150
        || ((v67 = &v5[(v6 & 0xFFFFFFFFFFFFFFF0) + (v61 & 0xFFFFFFFFFFFFFFF0)],
             v68 = (unint64_t)(v67 + 8),
             v69 = (unint64_t)(v67 + 16),
             (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFF0) + 8] < (v61 & 0xFFFFFFFFFFFFFFF0) + a3 + 16)
          ? (v70 = a3 + 8 >= v69)
          : (v70 = 1),
            v70 ? (v71 = 0) : (v71 = 1),
            v68 > a3 ? (v72 = (unint64_t)v7 >= a3 + 8 + (v61 & 0xFFFFFFFFFFFFFFF0)) : (v72 = 1),
            !v72 || (v71 & 1) != 0))
      {
        v62 = v7;
        v63 = (uint64_t *)a3;
      }
      else
      {
        v73 = (v61 >> 4) + 1;
        v74 = 16 * (v73 & 0x1FFFFFFFFFFFFFFCLL);
        v62 = &v7[v74];
        v63 = (uint64_t *)(a3 + v74);
        v75 = (const double *)(a3 + 32);
        v76 = (double *)&v5[16 * v12 + 32];
        v77 = v73 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = v75 - 4;
          v82 = vld2q_f64(v78);
          v85 = vld2q_f64(v75);
          v79 = v76 - 4;
          vst2q_f64(v79, v82);
          vst2q_f64(v76, v85);
          v75 += 8;
          v76 += 8;
          v77 -= 4;
        }
        while (v77);
        if (v73 == (v73 & 0x1FFFFFFFFFFFFFFCLL))
          return v7;
      }
      do
      {
        v64 = *v63;
        v65 = v63[1];
        v63 += 2;
        *(_QWORD *)v62 = v64;
        *((_QWORD *)v62 + 1) = v65;
        v62 += 16;
      }
      while (v63 != (uint64_t *)v24);
      return v7;
    }
    v24 = a3 + 16 * v23;
    if ((uint64_t *)v24 == a4)
    {
      v27 = a1[1];
      goto LABEL_44;
    }
    v25 = (unint64_t)a4 + -v22 - a3 - 16;
    if (v25 >= 0xD0)
    {
      v47 = v13 >= v22 + a3 + (v25 & 0xFFFFFFFFFFFFFFF0) + 16 || v24 >= (v25 & 0xFFFFFFFFFFFFFFF0) + v13 + 16;
      v26 = (uint64_t *)(a3 + 16 * v23);
      v27 = a1[1];
      if (v47)
      {
        v48 = (v25 >> 4) + 1;
        v49 = 16 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
        v26 = (uint64_t *)(v24 + v49);
        v27 = (char *)(v13 + v49);
        v50 = (double *)(v13 + 32);
        v51 = (const double *)(a3 + 16 * v23 + 32);
        v52 = v48 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = v51 - 4;
          v81 = vld2q_f64(v53);
          v84 = vld2q_f64(v51);
          v54 = v50 - 4;
          vst2q_f64(v54, v81);
          vst2q_f64(v50, v84);
          v50 += 8;
          v51 += 8;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          a1[1] = v27;
          if (v22 < 1)
            return v7;
          goto LABEL_45;
        }
      }
    }
    else
    {
      v26 = (uint64_t *)(a3 + 16 * v23);
      v27 = a1[1];
    }
    do
    {
      v55 = *v26;
      v56 = v26[1];
      v26 += 2;
      *(_QWORD *)v27 = v55;
      *((_QWORD *)v27 + 1) = v56;
      v27 += 16;
    }
    while (v26 != a4);
    goto LABEL_44;
  }
  v15 = a5 + ((uint64_t)(v13 - (_QWORD)v5) >> 4);
  if (v15 >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v14 - v5;
  if (v16 >> 3 > v15)
    v15 = v16 >> 3;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(16 * v17);
    v19 = (unint64_t)&v18[16 * v12];
    v20 = (char *)(v19 + 16 * a5);
    v21 = v8 & 0xFFFFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFFFFuLL) < 0xD)
      goto LABEL_21;
  }
  else
  {
    v18 = 0;
    v19 = 16 * v12;
    v20 = (char *)(16 * v12 + 16 * a5);
    v21 = v8 & 0xFFFFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFFFFuLL) < 0xD)
      goto LABEL_21;
  }
  if (v19 >= a3 + 16 * a5 || (unint64_t)&v18[16 * a5 + (v6 & 0xFFFFFFFFFFFFFFF0)] <= a3)
  {
    v40 = v21 + 1;
    v41 = (v21 + 1) & 0x1FFFFFFFFFFFFFFCLL;
    v28 = (uint64_t *)(a3 + 16 * v41);
    v29 = (char *)(v19 + 16 * v41);
    v42 = (double *)&v18[16 * v12 + 32];
    v43 = (const double *)(a3 + 32);
    v44 = v41;
    do
    {
      v45 = v43 - 4;
      v80 = vld2q_f64(v45);
      v83 = vld2q_f64(v43);
      v46 = v42 - 4;
      vst2q_f64(v46, v80);
      vst2q_f64(v42, v83);
      v42 += 8;
      v43 += 8;
      v44 -= 4;
    }
    while (v44);
    if (v40 == v41)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_21:
  v28 = (uint64_t *)a3;
  v29 = (char *)v19;
  do
  {
LABEL_22:
    v30 = *v28;
    v31 = v28[1];
    v28 += 2;
    *(_QWORD *)v29 = v30;
    *((_QWORD *)v29 + 1) = v31;
    v29 += 16;
  }
  while (v29 != v20);
LABEL_23:
  v32 = *a1;
  v33 = v19;
  if (*a1 != v7)
  {
    v34 = v7;
    v35 = v19;
    do
    {
      v33 = v35 - 16;
      *(_OWORD *)(v35 - 16) = *((_OWORD *)v34 - 1);
      v34 -= 16;
      v35 -= 16;
    }
    while (v34 != v32);
  }
  v36 = &v18[16 * v17];
  v37 = a1[1];
  v38 = v37 - v7;
  if (v37 != v7)
    memmove(v20, v7, v37 - v7);
  v39 = *a1;
  *a1 = (char *)v33;
  a1[1] = &v20[v38];
  a1[2] = v36;
  if (v39)
    operator delete(v39);
  return (char *)v19;
}

_QWORD *std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  _BYTE *v9;

  a1[2] = 0;
  v4 = (_DWORD)a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  v5 = a3 - a2;
  if (a3 != a2)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = v5 >> 4;
    v9 = operator new(24 * (v5 >> 4));
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[24 * v8];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view const*,std::string_view const*,std::string*>(v4, a2, a3, v9);
  }
  return a1;
}

void sub_22DBD8078(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view const*,std::string_view const*,std::string*>(int a1, uint64_t a2, uint64_t a3, _BYTE *__dst)
{
  _BYTE *v4;
  uint64_t v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v13;

  v4 = __dst;
  v13 = __dst;
  if (a2 != a3)
  {
    v6 = a2;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v8 = *(const void **)v6;
      if (v7 >= 0x17)
        break;
      v4[23] = v7;
      if (v7)
        goto LABEL_4;
LABEL_5:
      v4[v7] = 0;
      v4 = v13 + 24;
      v13 += 24;
      v6 += 16;
      if (v6 == a3)
        return v4;
    }
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v11;
    v4 = v11;
LABEL_4:
    memmove(v4, v8, v7);
    goto LABEL_5;
  }
  return v4;
}

void sub_22DBD81A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DBD81B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void operations_research::sat::RecordLPRelaxationValues(operations_research::sat *this, operations_research::sat::Model *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  operations_research::sat::IntegerTrail *v11;
  uint64_t v12;
  uint64_t v13;
  operations_research::sat::IntegerTrail *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *__p;
  void *v21;
  char *v22;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v4 = (_QWORD *)((char *)this + 32);
    do
    {
      v5 = v2[4];
      v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
      if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
        v7 = v2;
      else
        v7 = v2 + 1;
      if (v6)
        v4 = v2;
      v2 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v4 != (_QWORD *)((char *)this + 32)
      && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
    {
      v8 = (_QWORD *)v4[5];
      if (v8)
      {
        v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>((uint64_t)this);
        v10 = *((int *)v9 + 6);
        v21 = 0;
        v22 = 0;
        __p = 0;
        if ((_DWORD)v10)
        {
          if ((v10 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          __p = operator new(8 * v10);
          v22 = (char *)__p + 8 * v10;
          memset_pattern16(__p, &unk_22DCE6720, 8 * v10);
          v21 = v22;
        }
        v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
        v12 = *(_QWORD *)v9;
        v13 = *((_QWORD *)v9 + 1);
        if (v12 != v13)
        {
          v14 = v11;
          v15 = v12 + 8;
          do
          {
            v16 = v15 - 8;
            v18 = *(int *)(*((_QWORD *)v14 + 51) + 4 * *(int *)(v15 - 8));
            if ((_DWORD)v18 == -1
              || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 117) + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            {
              v19 = *(_QWORD *)v15;
              if (*(_QWORD *)v15 && *(_BYTE *)(v19 + 20316))
              {
                v17 = *(int *)(v15 + 8);
                *((double *)__p + v17) = operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(v19, *(_DWORD *)(v15 - 8));
              }
            }
            v15 += 24;
          }
          while (v16 + 24 != v13);
        }
        operations_research::sat::SharedLPSolutionRepository::NewLPSolution(v8, (char **)&__p);
        if (__p)
        {
          v21 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_22DBD83BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GetRINSNeighborhood(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, operations_research::sat::SharedIncompleteSolutionManager *a4@<X3>, absl::lts_2020_02_25::Mutex *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  absl::lts_2020_02_25::Mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  absl::lts_2020_02_25::Mutex *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  absl::lts_2020_02_25::Mutex *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  double *v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  double *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  double *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  absl::lts_2020_02_25::Mutex *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  double *v65;
  unint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  double *v83;
  uint64_t v84;
  __int128 v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  _QWORD *v116;
  _BYTE *v117;
  double v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  BOOL v135;
  BOOL v136;
  _QWORD *v137;
  void **v140;
  double *v141;
  double *v142;
  double *v143;
  void *__p;
  _BYTE *v145;

  v10 = a6;
  *((_OWORD *)a6 + 1) = 0u;
  *((_OWORD *)a6 + 2) = 0u;
  *(_OWORD *)a6 = 0u;
  if (a1)
  {
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 39), (absl::lts_2020_02_25::Mutex *)a2);
    v12 = a1[44];
    v11 = a1[45];
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a1 + 39), v13, v14, v15, v16, v17, v18, v19);
    v20 = -858993459 * ((unint64_t)(v11 - v12) >> 3) == 0;
    if (a3)
      goto LABEL_7;
  }
  else
  {
    v20 = 1;
    if (a3)
      goto LABEL_7;
  }
  if (!a4 && v20)
    return;
LABEL_7:
  v137 = a1;
  if (a4)
  {
    if (operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(a4, (absl::lts_2020_02_25::Mutex *)a2))
    {
      operations_research::sat::SharedIncompleteSolutionManager::GetNewSolution(a4, v21, &v143);
      v22 = v143;
      v23 = (double *)__p;
      goto LABEL_81;
    }
    goto LABEL_78;
  }
  if (!a3)
  {
    if (!a2)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v143, (google::glog_internal_namespace_ *)"./ortools/sat/rins.cc", 127);
      v133 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v143);
      v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Check failed: relaxation_solutions != nullptr ", 46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"No relaxation solutions repository or lp solutions repository provided.", 71);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v143);
    }
    v141 = 0;
    v142 = 0;
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 1), (absl::lts_2020_02_25::Mutex *)a2);
    v56 = a2[6];
    v55 = a2[7];
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a2 + 1), v57, v58, v59, v60, v61, v62, v63);
    if (!(-858993459 * ((unint64_t)(v55 - v56) >> 3)))
      goto LABEL_78;
    operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(a2, a5, (uint64_t)&v143);
    v64 = (uint64_t *)__p;
    v33 = v145;
    if (v145 == __p)
    {
LABEL_156:
      v23 = 0;
      v22 = 0;
      if (!v33)
        goto LABEL_81;
      goto LABEL_80;
    }
    v136 = v20;
    v23 = 0;
    v22 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    while (1)
    {
      while (1)
      {
        v68 = (double)v64[v67];
        if ((unint64_t)v23 >= v66)
          break;
        *v23++ = v68;
        if (++v67 >= (unint64_t)((v33 - (_BYTE *)v64) >> 3))
          goto LABEL_158;
      }
      v69 = v23 - v65;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v71 = v66 - (_QWORD)v65;
      if (v71 >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v73 = v33;
        v74 = operator new(8 * v72);
        v33 = v73;
        v22 = (double *)&v74[8 * v69];
        *v22 = v68;
        v75 = (uint64_t)(v22 + 1);
        if (v23 == v65)
          goto LABEL_64;
      }
      else
      {
        v74 = 0;
        v22 = (double *)(8 * v69);
        *(double *)(8 * v69) = v68;
        v75 = 8 * v69 + 8;
        if (v23 == v65)
          goto LABEL_64;
      }
      v76 = (char *)(v23 - 1) - (char *)v65;
      if (v76 >= 0x168)
      {
        if (&v74[(char *)v23 - (char *)v65 - 8 - (v76 & 0xFFFFFFFFFFFFFFF8)] > &v74[(char *)v23 - (char *)v65 - 8])
        {
          v77 = v23;
        }
        else if ((double *)((char *)v23 - (v76 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1)
        {
          v77 = v23;
        }
        else if ((unint64_t)((char *)v65 - v74) >= 0x20)
        {
          v80 = (v76 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v77 = &v23[v81 / 0xFFFFFFFFFFFFFFF8];
          v22 = (double *)((char *)v22 - v81);
          v82 = &v74[8 * v69 - 16];
          v83 = v23 - 2;
          v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v85 = *(_OWORD *)v83;
            *(v82 - 1) = *((_OWORD *)v83 - 1);
            *v82 = v85;
            v82 -= 2;
            v83 -= 4;
            v84 -= 4;
          }
          while (v84);
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_64;
        }
        else
        {
          v77 = v23;
        }
      }
      else
      {
        v77 = v23;
      }
      do
      {
        v78 = *((_QWORD *)v77-- - 1);
        *((_QWORD *)v22-- - 1) = v78;
      }
      while (v77 != v65);
LABEL_64:
      v79 = &v74[8 * v72];
      if (v65)
      {
        operator delete(v65);
        v64 = (uint64_t *)__p;
        v33 = v145;
      }
      v65 = v22;
      v66 = (unint64_t)v79;
      v23 = (double *)v75;
      if (++v67 >= (unint64_t)((v33 - (_BYTE *)v64) >> 3))
      {
LABEL_158:
        v141 = v22;
        v142 = v23;
        v33 = v64;
        v10 = a6;
        v20 = v136;
        if (!v64)
          goto LABEL_81;
LABEL_80:
        v145 = v33;
        operator delete(v33);
        v22 = v141;
        v23 = v142;
        goto LABEL_81;
      }
    }
  }
  v141 = 0;
  v142 = 0;
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a3 + 1), (absl::lts_2020_02_25::Mutex *)a2);
  v25 = a3[6];
  v24 = a3[7];
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a3 + 1), v26, v27, v28, v29, v30, v31, v32);
  if (!(-858993459 * ((unint64_t)(v24 - v25) >> 3)))
  {
LABEL_78:
    v23 = 0;
    v22 = 0;
    goto LABEL_81;
  }
  operations_research::sat::SharedSolutionRepository<double>::GetRandomBiasedSolution(a3, a5, (uint64_t)&v143);
  v34 = (double *)__p;
  v33 = v145;
  if (v145 == __p)
    goto LABEL_156;
  v135 = v20;
  v23 = 0;
  v22 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  do
  {
    while ((unint64_t)v23 < v36)
    {
      *v23++ = v34[v37];
      if (++v37 >= (v33 - (_BYTE *)v34) >> 3)
        goto LABEL_79;
    }
    v38 = v23 - v35;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v40 = v36 - (_QWORD)v35;
    if (v40 >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v42 = v33;
      v43 = operator new(8 * v41);
      v33 = v42;
      v22 = (double *)&v43[8 * v38];
      *v22 = v34[v37];
      v44 = (uint64_t)(v22 + 1);
      if (v23 == v35)
        goto LABEL_30;
    }
    else
    {
      v43 = 0;
      v22 = (double *)(8 * v38);
      *(double *)(8 * v38) = v34[v37];
      v44 = 8 * v38 + 8;
      if (v23 == v35)
        goto LABEL_30;
    }
    v45 = (char *)(v23 - 1) - (char *)v35;
    if (v45 < 0x168)
    {
      v46 = v23;
      goto LABEL_29;
    }
    if (&v43[(char *)v23 - (char *)v35 - 8 - (v45 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v23 - (char *)v35 - 8])
    {
      v46 = v23;
      do
      {
LABEL_29:
        v47 = *((_QWORD *)v46-- - 1);
        *((_QWORD *)v22-- - 1) = v47;
      }
      while (v46 != v35);
      goto LABEL_30;
    }
    if ((double *)((char *)v23 - (v45 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1)
    {
      v46 = v23;
      goto LABEL_29;
    }
    if ((unint64_t)((char *)v35 - v43) < 0x20)
    {
      v46 = v23;
      goto LABEL_29;
    }
    v49 = (v45 >> 3) + 1;
    v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    v46 = &v23[v50 / 0xFFFFFFFFFFFFFFF8];
    v22 = (double *)((char *)v22 - v50);
    v51 = &v43[8 * v38 - 16];
    v52 = v23 - 2;
    v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_29;
LABEL_30:
    v48 = &v43[8 * v41];
    if (v35)
    {
      operator delete(v35);
      v34 = (double *)__p;
      v33 = v145;
    }
    v35 = v22;
    v36 = (unint64_t)v48;
    v23 = (double *)v44;
    ++v37;
  }
  while (v37 < (v33 - (_BYTE *)v34) >> 3);
LABEL_79:
  v141 = v22;
  v142 = v23;
  v33 = v34;
  v10 = a6;
  v20 = v135;
  if (v34)
    goto LABEL_80;
LABEL_81:
  if (v22 != v23)
  {
    v86 = v20;
    if ((unint64_t)(v23 - v22) <= 1)
      v87 = 1;
    else
      v87 = v23 - v22;
    if (v86)
    {
      v88 = 0;
      v140 = (void **)(v10 + 3);
      while (1)
      {
        v90 = v22[v88];
        if (v90 != INFINITY)
          break;
LABEL_89:
        if (++v88 == v87)
          goto LABEL_153;
      }
      v91 = vcvtmd_s64_f64(v90 + 0.000001);
      v92 = vcvtpd_s64_f64(v90 + -0.000001);
      if (v91 != v92)
      {
        v97 = (char *)v10[4];
        v96 = v10[5];
        if ((unint64_t)v97 < v96)
        {
          *(_DWORD *)v97 = v88;
          v89 = v97 + 24;
          *((_QWORD *)v97 + 1) = v91;
          *((_QWORD *)v97 + 2) = v92;
        }
        else
        {
          v98 = (char *)*v140;
          v99 = 0xAAAAAAAAAAAAAAABLL * ((v97 - (_BYTE *)*v140) >> 3);
          v100 = v99 + 1;
          if (v99 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (_QWORD)v98) >> 3);
          if (2 * v101 > v100)
            v100 = 2 * v101;
          if (v101 >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v100;
          if (v102)
          {
            if (v102 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v103 = (char *)operator new(24 * v102);
          }
          else
          {
            v103 = 0;
          }
          v112 = &v103[24 * v99];
          *(_DWORD *)v112 = v88;
          *((_QWORD *)v112 + 1) = v91;
          *((_QWORD *)v112 + 2) = v92;
          v113 = v112;
          if (v97 != v98)
          {
            do
            {
              v114 = *(_OWORD *)(v97 - 24);
              *((_QWORD *)v113 - 1) = *((_QWORD *)v97 - 1);
              *(_OWORD *)(v113 - 24) = v114;
              v113 -= 24;
              v97 -= 24;
            }
            while (v97 != v98);
            v97 = (char *)*v140;
          }
          v89 = v112 + 24;
          v10 = a6;
          a6[3] = (uint64_t)v113;
          a6[4] = (uint64_t)(v112 + 24);
          a6[5] = (uint64_t)&v103[24 * v102];
          if (v97)
            operator delete(v97);
        }
        v10[4] = (uint64_t)v89;
        goto LABEL_89;
      }
      v94 = (char *)v10[1];
      v93 = v10[2];
      if ((unint64_t)v94 < v93)
      {
        *(_DWORD *)v94 = v88;
        *((_QWORD *)v94 + 1) = v91;
        v95 = v94 + 16;
LABEL_127:
        v10[1] = (uint64_t)v95;
        goto LABEL_89;
      }
      v104 = (char *)*v10;
      v105 = (uint64_t)&v94[-*v10] >> 4;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v107 = v93 - (_QWORD)v104;
      if (v107 >> 3 > v106)
        v106 = v107 >> 3;
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
        v108 = 0xFFFFFFFFFFFFFFFLL;
      else
        v108 = v106;
      if (v108)
      {
        if (v108 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v109 = (char *)operator new(16 * v108);
        v110 = (uint64_t)&v109[16 * v105];
        *(_DWORD *)v110 = v88;
        *(_QWORD *)(v110 + 8) = v91;
        v111 = v110;
        if (v94 == v104)
          goto LABEL_125;
        do
        {
LABEL_122:
          *(_OWORD *)(v111 - 16) = *((_OWORD *)v94 - 1);
          v111 -= 16;
          v94 -= 16;
        }
        while (v94 != v104);
        v94 = (char *)*v10;
        v95 = (char *)(v110 + 16);
        *v10 = v111;
        v10[1] = v110 + 16;
        v10[2] = (uint64_t)&v109[16 * v108];
        if (!v94)
          goto LABEL_127;
      }
      else
      {
        v109 = 0;
        v110 = 16 * v105;
        *(_DWORD *)v110 = v88;
        *(_QWORD *)(v110 + 8) = v91;
        v111 = 16 * v105;
        if (v94 != v104)
          goto LABEL_122;
LABEL_125:
        v95 = (char *)(v110 + 16);
        *v10 = v111;
        v10[1] = v110 + 16;
        v10[2] = (uint64_t)&v109[16 * v108];
        if (!v94)
          goto LABEL_127;
      }
      operator delete(v94);
      goto LABEL_127;
    }
    v115 = 0;
    v116 = v137 + 38;
    while (2)
    {
      v118 = v22[v115];
      if (v118 == INFINITY)
        goto LABEL_131;
      operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(v116, a5, (uint64_t)&v143);
      v117 = __p;
      v119 = *((_QWORD *)__p + v115);
      if (vabdd_f64((double)v119, v118) < 0.0001)
      {
        v121 = (char *)v10[1];
        v120 = v10[2];
        if ((unint64_t)v121 < v120)
        {
          *(_DWORD *)v121 = v115;
          *((_QWORD *)v121 + 1) = v119;
          v10[1] = (uint64_t)(v121 + 16);
          v117 = __p;
          if (!__p)
            goto LABEL_131;
        }
        else
        {
          v122 = v116;
          v123 = (char *)*v10;
          v124 = (uint64_t)&v121[-*v10] >> 4;
          v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v126 = v120 - (_QWORD)v123;
          if (v126 >> 3 > v125)
            v125 = v126 >> 3;
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0)
            v127 = 0xFFFFFFFFFFFFFFFLL;
          else
            v127 = v125;
          if (v127)
          {
            if (v127 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v128 = (char *)operator new(16 * v127);
            v129 = (uint64_t)&v128[16 * v124];
            *(_DWORD *)v129 = v115;
            *(_QWORD *)(v129 + 8) = v119;
            v130 = v129;
            if (v121 == v123)
            {
LABEL_148:
              v131 = a6;
              goto LABEL_149;
            }
          }
          else
          {
            v128 = 0;
            v129 = 16 * v124;
            *(_DWORD *)v129 = v115;
            *(_QWORD *)(v129 + 8) = v119;
            v130 = 16 * v124;
            if (v121 == v123)
              goto LABEL_148;
          }
          do
          {
            *(_OWORD *)(v130 - 16) = *((_OWORD *)v121 - 1);
            v130 -= 16;
            v121 -= 16;
          }
          while (v121 != v123);
          v131 = a6;
          v121 = (char *)*a6;
LABEL_149:
          v132 = v129 + 16;
          *v131 = v130;
          v131[1] = v129 + 16;
          v131[2] = (uint64_t)&v128[16 * v127];
          v10 = v131;
          v116 = v122;
          if (v121)
            operator delete(v121);
          v10[1] = v132;
          v117 = __p;
          if (!__p)
          {
LABEL_131:
            if (++v115 == v87)
              goto LABEL_153;
            continue;
          }
        }
      }
      break;
    }
    v145 = v117;
    operator delete(v117);
    goto LABEL_131;
  }
LABEL_153:
  if (v22)
    operator delete(v22);
}

void sub_22DBD8E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, operations_research::sat::LinearExpr *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::sat::LinearExpr::~LinearExpr(a11);
    _Unwind_Resume(a1);
  }
  operations_research::sat::LinearExpr::~LinearExpr(a11);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<double>::GetRandomBiasedSolution(_QWORD *a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  unint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  _BYTE *v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  absl::lts_2020_02_25::Mutex *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (uint64_t)a2;
  v6 = (absl::lts_2020_02_25::Mutex *)(a1 + 1);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), a2);
  v14 = (char *)a1[3];
  v16 = (uint64_t *)a1[6];
  v15 = (_QWORD *)a1[7];
  v17 = *v16;
  v60 = (void **)(a1 + 3);
  a1[4] = v14;
  if (v15 == v16)
  {
    v45 = -858993459 * (v15 - v16);
    v42 = __OFSUB__(v45, 1);
    v46 = v45 - 1;
    if (v46 < 0 == v42)
    {
LABEL_40:
      LODWORD(v61) = 0;
      HIDWORD(v61) = v46;
      v62 = v61;
      v47 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v3, (int *)&v62);
      goto LABEL_46;
    }
LABEL_43:
    v47 = 0;
    goto LABEL_46;
  }
  v56 = v3;
  v57 = a3;
  v58 = v6;
  v59 = v17;
  v18 = 0;
  do
  {
    v21 = (int *)&v16[5 * v18];
    if (*(_QWORD *)v21 == v17 && v21[8] <= 100)
    {
      v22 = a1[5];
      if ((unint64_t)v14 < v22)
      {
        *(_DWORD *)v14 = v18;
        v19 = (uint64_t)(v14 + 4);
LABEL_4:
        a1[4] = v19;
        v14 = (char *)v19;
        goto LABEL_5;
      }
      v23 = (char *)*v60;
      v24 = v14 - (_BYTE *)*v60;
      v25 = v24 >> 2;
      v26 = (v24 >> 2) + 1;
      if (v26 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)v23;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = operator new(4 * v28);
        v30 = &v29[4 * v25];
        *v30 = v18;
        v19 = (uint64_t)(v30 + 1);
        if (v14 == v23)
          goto LABEL_23;
      }
      else
      {
        v29 = 0;
        v30 = (_DWORD *)(4 * v25);
        *(_DWORD *)(4 * v25) = v18;
        v19 = 4 * v25 + 4;
        if (v14 == v23)
          goto LABEL_23;
      }
      v31 = v14 - 4 - v23;
      if (v31 >= 0xBC)
      {
        if (&v29[v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v24 - 4])
        {
          v32 = v14;
        }
        else if (&v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          v32 = v14;
        }
        else if ((unint64_t)(v14 - &v29[v24]) >= 0x20)
        {
          v34 = (v31 >> 2) + 1;
          v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v32 = &v14[-v35];
          v30 = (_DWORD *)((char *)v30 - v35);
          v36 = &v29[4 * v25 - 16];
          v37 = v14 - 16;
          v38 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 8;
          }
          while (v38);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_23;
        }
        else
        {
          v32 = v14;
        }
      }
      else
      {
        v32 = v14;
      }
      do
      {
        v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--v30 = v33;
      }
      while (v32 != v23);
LABEL_23:
      a1[3] = v30;
      a1[4] = v19;
      a1[5] = &v29[4 * v28];
      if (v23)
      {
        operator delete(v23);
        v16 = (uint64_t *)a1[6];
        v15 = (_QWORD *)a1[7];
      }
      v17 = v59;
      goto LABEL_4;
    }
LABEL_5:
    ++v18;
    v20 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v16);
  }
  while (v20 > v18);
  v40 = *v60;
  if (*v60 == v14)
  {
    a3 = v57;
    v6 = v58;
    v3 = v56;
    v42 = __OFSUB__((_DWORD)v20, 1);
    v46 = v20 - 1;
    if (v46 < 0 == v42)
      goto LABEL_40;
    goto LABEL_43;
  }
  v41 = (unint64_t)(v14 - v40) >> 2;
  v42 = __OFSUB__((_DWORD)v41, 1);
  v43 = v41 - 1;
  a3 = v57;
  v6 = v58;
  v7 = (absl::lts_2020_02_25::Mutex *)v56;
  if (v43 < 0 != v42)
  {
    v44 = 0;
  }
  else
  {
    LODWORD(v61) = 0;
    HIDWORD(v61) = v43;
    v62 = v61;
    v44 = (int)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v56, (int *)&v62);
    v40 = *v60;
  }
  v47 = *(_DWORD *)&v40[4 * v44];
LABEL_46:
  v48 = a1[6] + 40 * v47;
  v49 = *(_DWORD *)(v48 + 32) + 1;
  *(_DWORD *)(v48 + 32) = v49;
  v50 = *(_QWORD *)v48;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v50;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v52 = *(_BYTE **)(v48 + 8);
  v51 = *(_BYTE **)(v48 + 16);
  v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = (char *)operator new(v51 - v52);
    *(_QWORD *)(a3 + 8) = v54;
    v55 = &v54[8 * (v53 >> 3)];
    *(_QWORD *)(a3 + 24) = v55;
    memcpy(v54, v52, v53);
    *(_QWORD *)(a3 + 16) = v55;
  }
  *(_DWORD *)(a3 + 32) = v49;
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_22DBD9300(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, absl::lts_2020_02_25::Mutex *a12)
{
  absl::lts_2020_02_25::Mutex *v12;

  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

operations_research::sat::SatDecisionPolicy *operations_research::sat::SatDecisionPolicy::SatDecisionPolicy(operations_research::sat::SatDecisionPolicy *this, operations_research::sat::Model *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_QWORD *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)a2);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 2) = v4;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 5, 1uLL);
  v5 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v5)
    *((_QWORD *)this + 9) = v5;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0xFFFFFFFF00000000;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0x3FF0000000000000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  return this;
}

void sub_22DBD93FC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[8];
  if (v4)
  {
    v1[9] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[6] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatDecisionPolicy::IncreaseNumVariables(operations_research::sat::SatDecisionPolicy *this, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  signed int v27;
  uint64_t v28;
  double v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  std::vector<int>::value_type __x[2];

  v6 = *((_QWORD *)this + 20);
  v4 = (char *)this + 160;
  v5 = v6;
  v7 = *((_QWORD *)this + 21) - v6;
  v8 = a2;
  *(_QWORD *)__x = *(_QWORD *)(*(_QWORD *)this + 112);
  v9 = a2 >= (unint64_t)(v7 >> 3);
  v10 = a2 - (v7 >> 3);
  if (v10 != 0 && v9)
  {
    std::vector<double>::__append((uint64_t)v4, v10, (uint64_t *)__x);
  }
  else if (!v9)
  {
    *((_QWORD *)this + 21) = v5 + 8 * v8;
  }
  v11 = *((_QWORD *)this + 23);
  v12 = *((_QWORD *)this + 24);
  *(_QWORD *)__x = 0;
  v13 = (v12 - v11) >> 3;
  if (v8 <= v13)
  {
    if (v8 < v13)
      *((_QWORD *)this + 24) = v11 + 8 * v8;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 184, v8 - v13, (uint64_t *)__x);
  }
  v14 = *((_QWORD *)this + 26);
  v15 = *((_QWORD *)this + 27);
  *(_QWORD *)__x = 0;
  v16 = (v15 - v14) >> 3;
  if (v8 <= v16)
  {
    if (v8 < v16)
      *((_QWORD *)this + 27) = v14 + 8 * v8;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 208, v8 - v16, (uint64_t *)__x);
  }
  operations_research::BitQueue64::IncreaseSize((operations_research::sat::SatDecisionPolicy *)((char *)this + 120), a2);
  *(_QWORD *)__x = 0;
  v17 = *((_QWORD *)this + 35);
  v18 = (*((_QWORD *)this + 36) - v17) >> 3;
  if (v8 <= v18)
  {
    if (v8 < v18)
      *((_QWORD *)this + 36) = v17 + 8 * v8;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 280, v8 - v18, (uint64_t *)__x);
  }
  std::vector<BOOL>::resize((uint64_t)this + 256, v8, 0);
  std::vector<BOOL>::resize((uint64_t)this + 232, v8, *(unsigned __int8 *)(*(_QWORD *)this + 304));
  operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(this, v7 >> 3);
  v19 = *((_QWORD *)this + 5);
  v20 = (_QWORD *)((char *)this + 40);
  v21 = (*((_QWORD *)this + 6) - v19) >> 4;
  if (v8 + 1 <= v21)
  {
    if (v8 + 1 < v21)
      *((_QWORD *)this + 6) = v19 + 16 * (v8 + 1);
  }
  else
  {
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 5, v8 + 1 - v21);
  }
  v22 = *((_QWORD *)this + 8);
  v23 = *((_QWORD *)this + 9);
  v24 = (_QWORD *)((char *)this + 64);
  __x[0] = 0;
  v25 = (v23 - v22) >> 2;
  if (v8 <= v25)
  {
    if (v8 < v25)
      *((_QWORD *)this + 9) = v22 + 4 * v8;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 64), v8 - v25, __x);
  }
  if (*((_BYTE *)this + 24) && (int)(v7 >> 3) < a2)
  {
    v26 = (int)(v7 >> 3);
    do
    {
      v29 = *(double *)(*((_QWORD *)this + 20) + 8 * v26);
      v30 = *((_DWORD *)this + 8);
      v31 = v30 + 1;
      *((_DWORD *)this + 8) = v30 + 1;
      if (v30 >= 1)
      {
        while (1)
        {
          v27 = v31 >> 1;
          v34 = (double *)(*v20 + 16 * (v31 >> 1));
          v35 = *(unsigned int *)v34;
          v36 = *((unsigned int *)v34 + 1);
          v37 = v34[1];
          if (v37 >= v29 && (v37 != v29 || *(float *)&v36 >= 0.0))
            break;
          v32 = *v20 + 16 * v31;
          *(_QWORD *)v32 = v35 | (v36 << 32);
          *(double *)(v32 + 8) = v37;
          *(_DWORD *)(*v24 + 4 * (int)v35) = v31;
          v33 = v31 > 3;
          v31 >>= 1;
          if (!v33)
            goto LABEL_30;
        }
      }
      v27 = v31;
LABEL_30:
      v28 = *v20 + 16 * v27;
      *(_QWORD *)v28 = v26;
      *(double *)(v28 + 8) = v29;
      *(_DWORD *)(*v24 + 4 * v26++) = v27;
    }
    while (v26 != v8);
  }
}

void operations_research::BitQueue64::IncreaseSize(operations_research::BitQueue64 *this, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9[2];
  uint64_t *v10;

  v4 = *(_DWORD *)this;
  LODWORD(v9[0]) = a2;
  LODWORD(v10) = v4;
  if (v4 > a2)
  {
    v10 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v9, (int)&v10, "size >= size_");
    if (v10)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v9, (google::glog_internal_namespace_ *)"./ortools/util/bitset.h", 692, &v10);
      google::LogMessage::stream((google::LogMessage *)v9);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v9);
    }
  }
  *(_DWORD *)this = a2;
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = (unint64_t)(a2 + 63) >> 6;
  v9[0] = 0;
  v8 = (v6 - v5) >> 3;
  if (v7 <= v8)
  {
    if (v7 < v8)
      *((_QWORD *)this + 2) = v5 + 8 * v7;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 8, v7 - v8, v9);
  }
}

void sub_22DBD978C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

_QWORD *operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(_QWORD *this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (this[21] - this[20]) >> 3;
  if ((int)v2 > a2)
  {
    v3 = this;
    v4 = a2;
    do
    {
      switch(*(_DWORD *)(*v3 + 196))
      {
        case 0:
          v5 = v3[32];
          v6 = v4 >> 6;
          v7 = 8 * (v4 >> 6);
          v8 = 1 << v4;
          goto LABEL_16;
        case 1:
          v5 = v3[32];
          v6 = v4 >> 6;
          v7 = 8 * (v4 >> 6);
          v8 = 1 << v4;
          goto LABEL_4;
        case 2:
          v11 = 0x100000000;
          this = (_QWORD *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v3[2], &v11);
          v5 = v3[32];
          v6 = v4 >> 6;
          v8 = 1 << v4;
          if ((_DWORD)this)
            v10 = *(_QWORD *)(v5 + 8 * v6) | v8;
          else
            v10 = *(_QWORD *)(v5 + 8 * v6) & ~v8;
          *(_QWORD *)(v5 + 8 * v6) = v10;
          break;
        case 3:
          v5 = v3[32];
          v6 = v4 >> 6;
          v8 = 1 << v4;
          v7 = 8 * (v4 >> 6);
          if (*(double *)(v3[35] + 8 * v4) > 0.0)
            goto LABEL_16;
          goto LABEL_4;
        case 4:
          v5 = v3[32];
          v6 = v4 >> 6;
          v8 = 1 << v4;
          v7 = 8 * (v4 >> 6);
          if (*(double *)(v3[35] + 8 * v4) >= 0.0)
LABEL_4:
            v9 = *(_QWORD *)(v5 + v7) & ~v8;
          else
LABEL_16:
            v9 = *(_QWORD *)(v5 + v7) | v8;
          *(_QWORD *)(v5 + v7) = v9;
          break;
        default:
          v5 = v3[32];
          v6 = v4 >> 6;
          v8 = 1 << v4;
          break;
      }
      *(_DWORD *)(*(_QWORD *)(v3[1] + 120) + 8 * v4) = *(_DWORD *)(*(_QWORD *)(v3[1] + 120) + 8 * v4) & 0xFFFFFFFE | ((*(_QWORD *)(v5 + 8 * v6) & v8) != 0);
      ++v4;
    }
    while ((_DWORD)v4 != (_DWORD)v2);
  }
  return this;
}

void operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(operations_research::sat::SatDecisionPolicy *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  std::vector<int>::size_type v5;
  std::vector<int>::value_type __u[2];

  v2 = *((_QWORD *)this + 21);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 19) = 0x3FF0000000000000;
  v4 = (int)((v2 - v3) >> 3);
  *(_QWORD *)__u = *(_QWORD *)(*(_QWORD *)this + 112);
  std::vector<double>::assign((uint64_t)this + 160, v4, (uint64_t *)__u);
  *(_QWORD *)__u = 0;
  std::vector<double>::assign((uint64_t)this + 184, v4, (uint64_t *)__u);
  *(_QWORD *)__u = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this + 208, v4, (uint64_t *)__u);
  *((_DWORD *)this + 8) = 0;
  v5 = (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2;
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 64), v5, __u);
  operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(this, 0);
  LOBYTE(__u[0]) = *(_BYTE *)(*(_QWORD *)this + 304);
  std::vector<BOOL>::assign((char **)this + 29, v4, __u);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  *((_BYTE *)this + 24) = 0;
}

void operations_research::sat::SatDecisionPolicy::InitializeVariableOrdering(std::vector<int> *this)
{
  int *value;
  std::__compressed_pair<int *> *p_end_cap;
  unint64_t v4;
  std::vector<int>::size_type v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  int end;
  unsigned int v15;
  int *v16;
  BOOL v17;
  int v18;
  int *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  char *v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  char *v54;
  int v55;
  int *v56;
  uint64_t v57;
  float v58;
  int v59;
  unsigned int v60;
  int *v61;
  int *v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  int v68;
  int begin_high;
  int v70;
  std::vector<int>::pointer v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  std::vector<int>::value_type __u[2];
  uint64_t v76;
  char *v77;
  _QWORD v78[2];
  __int128 v79;

  p_end_cap = &this[2].__end_cap_;
  value = this[2].__end_cap_.__value_;
  v4 = (char *)this[7].__begin_ - (char *)this[6].__end_cap_.__value_;
  LODWORD(this[1].__end_) = 0;
  v5 = this[3].__begin_ - value;
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 64), v5, __u);
  *(_QWORD *)__u = 0;
  v76 = 0;
  v77 = 0;
  v73 = v4 >> 3;
  v74 = v4;
  if ((int)(v4 >> 3) >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (v4 >> 3);
    while (1)
    {
      if (((*(_QWORD *)(*((_QWORD *)this->__end_ + 3) + (((unint64_t)(2 * (int)v9) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v9 & 0x1Fu))) & 3) != 0)
        goto LABEL_5;
      v12 = *(double *)&this[6].__end_cap_.__value_[2 * v9];
      if (v12 > 0.0)
      {
        v13 = *(double *)&this[7].__end_cap_.__value_[2 * v9];
        end = (int)this[1].__end_;
        v15 = end + 1;
        LODWORD(this[1].__end_) = end + 1;
        if (end >= 1)
        {
          while (1)
          {
            v18 = v15 >> 1;
            v19 = this[1].__end_cap_.__value_;
            v20 = (double *)&v19[4 * (v15 >> 1)];
            v21 = *(unsigned int *)v20;
            v22 = *((unsigned int *)v20 + 1);
            v23 = v20[1];
            if (v23 >= v12 && (v23 != v12 || *(float *)&v22 >= v13))
              break;
            v16 = &v19[4 * v15];
            *(_QWORD *)v16 = v21 | (v22 << 32);
            *((double *)v16 + 1) = v23;
            p_end_cap->__value_[(int)v21] = v15;
            v17 = v15 > 3;
            v15 >>= 1;
            if (!v17)
              goto LABEL_18;
          }
        }
        v18 = v15;
LABEL_18:
        v25 = &this[1].__end_cap_.__value_[4 * v18];
        *(_QWORD *)v25 = v9 | ((unint64_t)LODWORD(v13) << 32);
        *((double *)v25 + 1) = v12;
        this[2].__end_cap_.__value_[v9] = v18;
        goto LABEL_5;
      }
      if (v8 >= v7)
        break;
      *(_DWORD *)v8 = v9;
      v11 = (uint64_t)(v8 + 4);
LABEL_4:
      v76 = v11;
      v8 = (char *)v11;
LABEL_5:
      if (++v9 == v10)
        goto LABEL_48;
    }
    v26 = (v8 - v6) >> 2;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v7 - v6) >> 1 > v27)
      v27 = (v7 - v6) >> 1;
    if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
    {
      if (v28 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = v28;
      v30 = operator new(4 * v28);
      v28 = v29;
      v31 = &v30[4 * v26];
      *(_DWORD *)v31 = v9;
      v11 = (uint64_t)(v31 + 4);
      if (v8 == v6)
        goto LABEL_34;
    }
    else
    {
      v30 = 0;
      v31 = (char *)(4 * v26);
      *(_DWORD *)(4 * v26) = v9;
      v11 = 4 * v26 + 4;
      if (v8 == v6)
        goto LABEL_34;
    }
    v32 = v8 - 4 - v6;
    if (v32 >= 0xBC)
    {
      if (&v30[v8 - v6 - 4 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v8 - v6 - 4])
      {
        v33 = v8;
      }
      else if (&v8[-(v32 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
      {
        v33 = v8;
      }
      else if ((unint64_t)(v6 - v30) >= 0x20)
      {
        v36 = (v32 >> 2) + 1;
        v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        v33 = &v8[-v37];
        v31 -= v37;
        v38 = &v30[4 * v26 - 16];
        v39 = v8 - 16;
        v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_34;
      }
      else
      {
        v33 = v8;
      }
    }
    else
    {
      v33 = v8;
    }
    do
    {
      v34 = *((_DWORD *)v33 - 1);
      v33 -= 4;
      *((_DWORD *)v31 - 1) = v34;
      v31 -= 4;
    }
    while (v33 != v6);
LABEL_34:
    v7 = &v30[4 * v28];
    *(_QWORD *)__u = v31;
    v76 = v11;
    v77 = v7;
    if (v6)
    {
      v35 = v7;
      operator delete(v6);
      v7 = v35;
    }
    v6 = v31;
    goto LABEL_4;
  }
  v8 = 0;
LABEL_48:
  v42 = this->__begin_[16];
  if (v42 != 1)
  {
    v43 = v74;
    if (v42 == 2)
    {
      v44 = *(char **)__u;
      if ((uint64_t)&v8[-*(_QWORD *)__u] >= 5)
      {
        v45 = this->__end_cap_.__value_;
        v79 = xmmword_22DCE8C50;
        if ((unint64_t)(v8 - 4) > *(_QWORD *)__u)
        {
          v46 = ((unint64_t)&v8[-*(_QWORD *)__u] >> 2) - 1;
          do
          {
            v78[0] = 0;
            v78[1] = v46;
            v47 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v79, (uint64_t)v45, v78);
            if (v47)
            {
              v48 = *(_DWORD *)v44;
              *(_DWORD *)v44 = *(_DWORD *)&v44[4 * v47];
              *(_DWORD *)&v44[4 * v47] = v48;
            }
            v44 += 4;
            --v46;
          }
          while (v44 < v8 - 4);
        }
      }
    }
    goto LABEL_61;
  }
  v43 = v74;
  v49 = *(char **)__u;
  if (*(char **)__u != v8)
  {
    v50 = v8 - 4;
    if ((unint64_t)(v8 - 4) > *(_QWORD *)__u)
    {
      v51 = *(_QWORD *)__u + 4;
      do
      {
        v52 = *(_DWORD *)(v51 - 4);
        *(_DWORD *)(v51 - 4) = *(_DWORD *)v50;
        *(_DWORD *)v50 = v52;
        v50 -= 4;
        v53 = v51 >= (unint64_t)v50;
        v51 += 4;
      }
      while (!v53);
LABEL_61:
      v49 = *(char **)__u;
    }
  }
  if (v49 != v8)
  {
    v54 = v49;
    do
    {
      v57 = *(int *)v54;
      v58 = *(double *)&this[7].__end_cap_.__value_[2 * v57];
      v59 = (int)this[1].__end_;
      v60 = v59 + 1;
      LODWORD(this[1].__end_) = v59 + 1;
      if (v59 >= 1)
      {
        while (1)
        {
          v55 = v60 >> 1;
          v62 = this[1].__end_cap_.__value_;
          v63 = (double *)&v62[4 * (v60 >> 1)];
          v64 = *(unsigned int *)v63;
          v65 = *((unsigned int *)v63 + 1);
          v66 = v63[1];
          if (v66 >= 0.0 && (v66 != 0.0 || *(float *)&v65 >= v58))
            break;
          v61 = &v62[4 * v60];
          *(_QWORD *)v61 = v64 | (v65 << 32);
          *((double *)v61 + 1) = v66;
          p_end_cap->__value_[(int)v64] = v60;
          v17 = v60 > 3;
          v60 >>= 1;
          if (!v17)
            goto LABEL_65;
        }
      }
      v55 = v60;
LABEL_65:
      v56 = &this[1].__end_cap_.__value_[4 * v55];
      *(_QWORD *)v56 = v57 | ((unint64_t)LODWORD(v58) << 32);
      *((_QWORD *)v56 + 1) = 0;
      this[2].__end_cap_.__value_[v57] = v55;
      v54 += 4;
    }
    while (v54 != v8);
  }
  LODWORD(this[5].__begin_) = v73;
  HIDWORD(this[5].__begin_) = -1;
  *(_QWORD *)&v79 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)&this[5].__end_, (unint64_t)((int)(v43 >> 3) + 63) >> 6, (uint64_t *)&v79);
  v68 = this->__end_[3];
  begin_high = v68 - 1;
  if (SHIDWORD(this[5].__begin_) > v68 - 1)
    begin_high = HIDWORD(this[5].__begin_);
  HIDWORD(this[5].__begin_) = begin_high;
  v70 = v68 >> 6;
  v71 = this[5].__end_;
  *(_QWORD *)&v71[2 * (v68 >> 6)] |= ~(-1 << v68);
  if (v68 >= 64)
  {
    if (v70 >= 1)
      v72 = 1;
    else
      v72 = v68 >> 6;
    memset(&v71[2 * ((v70 - 1) - (unint64_t)(v70 - v72))], 255, 8 * (v70 - v72) + 8);
  }
  LOBYTE(this[1].__begin_) = 1;
  if (v49)
    operator delete(v49);
}

void sub_22DBD9F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatDecisionPolicy::SetAssignmentPreference(uint64_t result, int a2, double a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)result + 455))
  {
    v3 = a2 >> 1;
    v4 = ((unint64_t)((uint64_t)a2 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_QWORD *)(*(_QWORD *)(result + 232) + v4) &= ~(1 << (a2 >> 1));
    v5 = *(_QWORD *)(result + 256);
    v6 = *(_QWORD *)(v5 + v4);
    v7 = v6 | (1 << (a2 >> 1));
    if ((a2 & 1) != 0)
      v7 = v6 & ~(1 << v3);
    *(_QWORD *)(v5 + v4) = v7;
    *(double *)(*(_QWORD *)(result + 184) + 8 * v3) = a3;
    *(_BYTE *)(result + 24) = 0;
  }
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::UpdateWeightedSign(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = *(_QWORD *)(result + 280);
    do
    {
      v6 = (double)*(uint64_t *)(v3 + 4) / (double)a3;
      v7 = *(_DWORD *)v3;
      v3 += 12;
      v8 = 8 * (v7 >> 1);
      if ((v7 & 1) == 0)
        v6 = -v6;
      *(double *)(v5 + v8) = *(double *)(v5 + v8) + v6;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *operations_research::sat::SatDecisionPolicy::BumpVariableActivities(_QWORD *result, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  int v5;
  int *v6;
  int *v7;
  double v8;
  uint64_t v9;
  double v10;
  float64x2_t *v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  unint64_t v21;
  float64x2_t v22;
  unint64_t v23;
  double *v24;

  if (!*(_BYTE *)(*result + 96))
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 == v7)
      return result;
    v8 = *(double *)(*result + 224);
    v9 = *(_QWORD *)(result[1] + 120);
    v10 = 1.0 / v8;
    while (1)
    {
      if ((*(_DWORD *)(v9 + 8 * (*v6 >> 1)) & 0xFFFFFFE) == 0)
        goto LABEL_9;
      v11 = (float64x2_t *)result[20];
      v12 = (uint64_t)*v6 >> 1;
      v13 = *((double *)result + 19) + v11->f64[v12];
      v11->f64[v12] = v13;
      v14 = *(int *)(v9 + v12 * 8 + 4);
      v15 = *((_DWORD *)result + 31);
      if (v15 <= (int)v14)
        v15 = v14;
      *((_DWORD *)result + 31) = v15;
      *(_QWORD *)(result[16] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (v13 <= v8)
        goto LABEL_9;
      *((double *)result + 19) = v10 * *((double *)result + 19);
      v16 = result[21] - (_QWORD)v11;
      if ((int)(v16 >> 3) >= 1)
      {
        v17 = (v16 >> 3);
        if (v17 >= 4)
        {
          v19 = (v16 >> 3) & 3;
          v18 = v17 - v19;
          v20 = v11 + 1;
          v21 = v17 - v19;
          do
          {
            v22 = vmulq_n_f64(*v20, v10);
            v20[-1] = vmulq_n_f64(v20[-1], v10);
            *v20 = v22;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (!v19)
            goto LABEL_8;
        }
        else
        {
          v18 = 0;
        }
        v23 = v18 - v17;
        v24 = &v11->f64[v18];
        do
        {
          *v24 = v10 * *v24;
          ++v24;
        }
        while (!__CFADD__(v23++, 1));
      }
LABEL_8:
      *((_BYTE *)result + 24) = 0;
LABEL_9:
      if (++v6 == v7)
        return result;
    }
  }
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result[26];
    do
    {
      v5 = *v2++;
      ++*(_QWORD *)(v4 + 8 * (v5 >> 1));
    }
    while (v2 != v3);
  }
  return result;
}

double operations_research::sat::SatDecisionPolicy::UpdateVariableActivityIncrement(operations_research::sat::SatDecisionPolicy *this)
{
  double result;

  result = *((double *)this + 19) * (1.0 / *(double *)(*(_QWORD *)this + 216));
  *((double *)this + 19) = result;
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::NextBranch(std::vector<int> *this)
{
  double v2;
  int *value;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  std::vector<int>::pointer i;
  unint64_t v17;
  int v18;
  int *v19;
  int v20;
  unint64_t v21;
  int begin_high;
  uint64_t end_low;
  uint64_t v24;
  double v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v40;

  if (!LOBYTE(this[1].__begin_))
    operations_research::sat::SatDecisionPolicy::InitializeVariableOrdering(this);
  v2 = *((double *)this->__begin_ + 9);
  if (v2 == 0.0)
    goto LABEL_14;
  value = this->__end_cap_.__value_;
  v4 = *((_QWORD *)value + 312);
  v5 = (v4 + 1) % 0x270uLL;
  v6 = v4;
  v7 = v5;
  LODWORD(v4) = value[(v4 + 397) % 0x270uLL] ^ ((value[v5] & 0x7FFFFFFE | value[v4] & 0x80000000) >> 1) ^ (value[v5] << 31 >> 31) & 0x9908B0DF;
  value[v6] = v4;
  LODWORD(v4) = ((v4 ^ (v4 >> 11)) << 7) & 0x9D2C5680 ^ v4 ^ (v4 >> 11);
  v8 = (double)(((_DWORD)v4 << 15) & 0xEFC60000 ^ v4 ^ ((((_DWORD)v4 << 15) & 0xEFC60000 ^ v4) >> 18));
  if (v5 == 623)
    v9 = 0;
  else
    v9 = v5 + 1;
  v10 = 397;
  if (v5 >= 0xE3)
    v10 = -227;
  v11 = value[v10 + v5] ^ ((value[v9] & 0x7FFFFFFE | value[v5] & 0x80000000) >> 1) ^ (value[v9] << 31 >> 31) & 0x9908B0DF;
  value[v7] = v11;
  v12 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
  *((_QWORD *)value + 312) = v9;
  if ((v8 + (double)((v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18)) * 4294967300.0)
     * 5.42101086e-20
     + 0.0 >= v2)
  {
LABEL_14:
    v19 = this[1].__end_cap_.__value_;
    v20 = *((_QWORD *)v19 + 2);
    for (i = this->__end_;
          ((*(_QWORD *)(*((_QWORD *)i + 3) + (((unint64_t)(2 * v20) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (*((_QWORD *)v19 + 2) & 0x1Fu))) & 3) != 0;
          v20 = *((_QWORD *)v19 + 2))
    {
      this[2].__end_cap_.__value_[v20] = 0;
      end_low = LODWORD(this[1].__end_);
      LODWORD(this[1].__end_) = end_low - 1;
      if ((int)end_low >= 2)
      {
        operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)&this[1].__end_, 1, *(_QWORD *)&v19[4 * end_low], *(_QWORD *)&v19[4 * end_low + 2]);
        i = this->__end_;
        v19 = this[1].__end_cap_.__value_;
      }
      v21 = *(int *)(*((_QWORD *)i + 15) + 8 * v20 + 4);
      begin_high = HIDWORD(this[5].__begin_);
      if (begin_high <= (int)v21)
        begin_high = *(_DWORD *)(*((_QWORD *)i + 15) + 8 * v20 + 4);
      HIDWORD(this[5].__begin_) = begin_high;
      *(_QWORD *)((char *)this[5].__end_ + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    }
    LODWORD(v24) = v20;
    v25 = *((double *)this->__begin_ + 10);
    if (v25 == 0.0)
      goto LABEL_31;
  }
  else
  {
    while (1)
    {
      v13 = LODWORD(this[1].__end_) - 1;
      LODWORD(v40) = 0;
      HIDWORD(v40) = v13;
      v14 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v40, (uint64_t)value, &v40);
      v15 = *(_QWORD *)&this[1].__end_cap_.__value_[4 * v14 + 4];
      i = this->__end_;
      if (((*(_QWORD *)(*((_QWORD *)i + 3) + (((unint64_t)(2 * (int)v15) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v15 & 0x1Fu))) & 3) == 0)
        break;
      v17 = *(int *)(*((_QWORD *)i + 15) + 8 * (int)v15 + 4);
      v18 = HIDWORD(this[5].__begin_);
      if (v18 <= (int)v17)
        v18 = v17;
      HIDWORD(this[5].__begin_) = v18;
      *(_QWORD *)((char *)this[5].__end_ + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::Remove((int *)&this[1].__end_, v15);
      value = this->__end_cap_.__value_;
    }
    v24 = *(_QWORD *)&this[1].__end_cap_.__value_[4 * v14 + 4];
    v25 = *((double *)this->__begin_ + 10);
    if (v25 == 0.0)
      goto LABEL_31;
  }
  v26 = this->__end_cap_.__value_;
  v27 = *((_QWORD *)v26 + 312);
  v28 = (v27 + 1) % 0x270uLL;
  v29 = v27;
  v30 = v28;
  LODWORD(v27) = v26[(v27 + 397) % 0x270uLL] ^ ((v26[v28] & 0x7FFFFFFE | v26[v27] & 0x80000000) >> 1) ^ (v26[v28] << 31 >> 31) & 0x9908B0DF;
  v26[v29] = v27;
  LODWORD(v27) = ((v27 ^ (v27 >> 11)) << 7) & 0x9D2C5680 ^ v27 ^ (v27 >> 11);
  v31 = (double)(((_DWORD)v27 << 15) & 0xEFC60000 ^ v27 ^ ((((_DWORD)v27 << 15) & 0xEFC60000 ^ v27) >> 18));
  if (v28 == 623)
    v32 = 0;
  else
    v32 = v28 + 1;
  v33 = 397;
  if (v28 >= 0xE3)
    v33 = -227;
  v34 = v26[v33 + v28] ^ ((v26[v32] & 0x7FFFFFFE | v26[v28] & 0x80000000) >> 1) ^ (v26[v32] << 31 >> 31) & 0x9908B0DF;
  v26[v30] = v34;
  v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
  *((_QWORD *)v26 + 312) = v32;
  if ((v31 + (double)((v35 << 15) & 0xEFC60000 ^ v35 ^ (((v35 << 15) & 0xEFC60000 ^ v35) >> 18)) * 4294967300.0)
     * 5.42101086e-20
     + 0.0 < v25)
  {
    v40 = 0x100000000;
    v36 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v40, (uint64_t)v26, &v40) == 0;
    return v36 | (2 * v24);
  }
LABEL_31:
  v37 = (unint64_t)(int)v24 >> 6;
  if ((*(_QWORD *)&this[9].__end_cap_.__value_[2 * v37] & (1 << v24)) != 0)
    v38 = *(_BYTE *)(*((_QWORD *)i + 15) + 8 * (int)v24) & 1;
  else
    v38 = (*(_QWORD *)&this[10].__end_cap_.__value_[2 * v37] & (1 << v24)) != 0;
  v36 = v38 ^ 1;
  return v36 | (2 * v24);
}

int *operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::Remove(int *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  uint64_t v22;

  v2 = *((_QWORD *)result + 4);
  v3 = 4 * a2;
  v4 = *(_DWORD *)(v2 + v3);
  *(_DWORD *)(v2 + v3) = 0;
  v5 = *result;
  *result = v5 - 1;
  if (v4 != (_DWORD)v5)
  {
    v6 = (int)v4;
    v7 = *((_QWORD *)result + 1);
    v8 = (unsigned int *)(v7 + 16 * v5);
    v9 = *v8;
    v10 = v8[1];
    v11 = *((double *)v8 + 1);
    v12 = *(double *)(v7 + 16 * (int)v4 + 8);
    if (v11 < v12)
      return (int *)operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)result, v4, v9 | (v10 << 32), *((_QWORD *)v8 + 1));
    v13 = *((float *)v8 + 1);
    if (v11 == v12 && *(float *)(v7 + 16 * (int)v4 + 4) > *(float *)&v10)
    {
      return (int *)operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)result, v4, v9 | (v10 << 32), *((_QWORD *)v8 + 1));
    }
    else
    {
      v14 = v9 | (v10 << 32);
      if ((int)v4 >= 2)
      {
        while (1)
        {
          v16 = v4 >> 1;
          v7 = *((_QWORD *)result + 1);
          v17 = (double *)(v7 + 16 * (v4 >> 1));
          v18 = *(unsigned int *)v17;
          v19 = *((unsigned int *)v17 + 1);
          v20 = v17[1];
          if (v20 >= v11)
          {
            v21 = v20 != v11 || v13 <= *(float *)&v19;
            if (v21)
              break;
          }
          v15 = v7 + 16 * v4;
          *(_QWORD *)v15 = v18 | (v19 << 32);
          *(double *)(v15 + 8) = v20;
          *(_DWORD *)(*((_QWORD *)result + 4) + 4 * (int)v18) = v4;
          v21 = v4 > 3;
          v4 >>= 1;
          if (!v21)
          {
            v7 = *((_QWORD *)result + 1);
            v4 = v16;
            break;
          }
        }
        v6 = v4;
      }
      v22 = v7 + 16 * v6;
      *(_QWORD *)v22 = v14;
      *(double *)(v22 + 8) = v11;
      *(_DWORD *)(*((_QWORD *)result + 4) + 4 * (int)v9) = v4;
    }
  }
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  float v3;
  double v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  signed int v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v24;

  v2 = 8 * (int)a2;
  v3 = *(double *)(*(_QWORD *)(result + 184) + v2);
  v4 = *(double *)(*(_QWORD *)(result + 160) + v2);
  v5 = *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * (int)a2);
  if (v5)
  {
    v6 = a2 | ((unint64_t)LODWORD(v3) << 32);
    if ((int)v5 >= 2)
    {
      while (1)
      {
        v9 = v5 >> 1;
        v10 = *(_QWORD *)(result + 40);
        v11 = (double *)(v10 + 16 * (v5 >> 1));
        v12 = *(unsigned int *)v11;
        v13 = *((unsigned int *)v11 + 1);
        v14 = v11[1];
        if (v14 >= v4 && (v14 != v4 || *(float *)&v13 >= v3))
          break;
        v7 = v10 + 16 * v5;
        *(_QWORD *)v7 = v12 | (v13 << 32);
        *(double *)(v7 + 8) = v14;
        *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * (int)v12) = v5;
        v8 = v5 > 3;
        v5 >>= 1;
        if (!v8)
          goto LABEL_22;
      }
    }
  }
  else
  {
    v6 = a2 | ((unint64_t)LODWORD(v3) << 32);
    v16 = *(_DWORD *)(result + 32);
    v5 = v16 + 1;
    *(_DWORD *)(result + 32) = v16 + 1;
    if (v16 >= 1)
    {
      while (1)
      {
        v9 = v5 >> 1;
        v18 = *(_QWORD *)(result + 40);
        v19 = (double *)(v18 + 16 * (v5 >> 1));
        v20 = *(unsigned int *)v19;
        v21 = *((unsigned int *)v19 + 1);
        v22 = v19[1];
        if (v22 >= v4 && (v22 != v4 || *(float *)&v21 >= v3))
          break;
        v17 = v18 + 16 * v5;
        *(_QWORD *)v17 = v20 | (v21 << 32);
        *(double *)(v17 + 8) = v22;
        *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * (int)v20) = v5;
        v8 = v5 > 3;
        v5 >>= 1;
        if (!v8)
          goto LABEL_22;
      }
    }
  }
  v9 = v5;
LABEL_22:
  v24 = *(_QWORD *)(result + 40) + 16 * v9;
  *(_QWORD *)v24 = v6;
  *(double *)(v24 + 8) = v4;
  *(_DWORD *)(*(_QWORD *)(result + 64) + 4 * (int)a2) = v9;
  return result;
}

void operations_research::sat::SatDecisionPolicy::Untrail(operations_research::sat::SatDecisionPolicy *this, int a2)
{
  uint64_t v4;
  void **v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  signed int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;

  if (*(_BYTE *)(*(_QWORD *)this + 96))
  {
    v4 = *((_QWORD *)this + 13);
    v5 = (void **)((char *)this + 96);
    if (*((_QWORD *)this + 12) == v4)
    {
      v6 = -1;
      v7 = *(int *)(*((_QWORD *)this + 1) + 12);
      if ((int)v7 <= a2)
        return;
    }
    else
    {
      v6 = *(_DWORD *)(v4 - 16);
      v7 = *(int *)(*((_QWORD *)this + 1) + 12);
      if ((int)v7 <= a2)
        return;
    }
    v17 = 0;
    v18 = fmax((double)*((uint64_t *)this + 11) * -0.000001 + 0.4, 0.06);
    do
    {
      if ((_DWORD)v7 == v6)
      {
        v21 = *((_QWORD *)this + 12);
        v20 = *((_QWORD *)this + 13);
        v17 += *(_DWORD *)(v20 - 8);
        *((_QWORD *)this + 13) = v20 - 16;
        if (v21 == v20 - 16)
          v6 = -1;
        else
          v6 = *(_DWORD *)(v20 - 32);
      }
      v22 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 4 * v7 - 4);
      v23 = v22 >> 1;
      v24 = (uint64_t)v22 >> 1;
      v25 = *((_QWORD *)this + 26);
      v26 = *(_QWORD *)(v25 + 8 * v23);
      if (v26 < 1)
      {
        v27 = 0.0;
      }
      else
      {
        *(_QWORD *)(v25 + 8 * v24) = 0;
        v27 = (double)v26 / (double)v17;
      }
      *(double *)(*((_QWORD *)this + 20) + 8 * v24) = (1.0 - v18) * *(double *)(*((_QWORD *)this + 20) + 8 * v24)
                                                    + v18 * v27;
      if (*((_BYTE *)this + 24))
        operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate((uint64_t)this, v23);
      --v7;
    }
    while (v7 > a2);
    if (v17 >= 1)
    {
      v28 = (char *)*((_QWORD *)this + 12);
      v29 = (char *)*((_QWORD *)this + 13);
      v30 = *((_QWORD *)this + 1);
      if (v28 == v29)
      {
        v31 = *(_DWORD *)(v30 + 12);
      }
      else
      {
        v31 = *(_DWORD *)(v30 + 12);
        if (*((_DWORD *)v29 - 4) == v31)
        {
          *((_QWORD *)v29 - 1) += v17;
          return;
        }
      }
      v32 = *((_QWORD *)this + 14);
      if ((unint64_t)v29 >= v32)
      {
        v34 = (v29 - v28) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v36 = v32 - (_QWORD)v28;
        if (v36 >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v38 = (char *)operator new(16 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[16 * v34];
        *(_DWORD *)v39 = v31;
        *((_QWORD *)v39 + 1) = v17;
        v33 = v39 + 16;
        if (v28 != v29)
        {
          do
          {
            *((_OWORD *)v39 - 1) = *((_OWORD *)v29 - 1);
            v39 -= 16;
            v29 -= 16;
          }
          while (v29 != v28);
          v28 = (char *)*v5;
        }
        *((_QWORD *)this + 12) = v39;
        *((_QWORD *)this + 13) = v33;
        *((_QWORD *)this + 14) = &v38[16 * v37];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v29 = v31;
        *((_QWORD *)v29 + 1) = v17;
        v33 = v29 + 16;
      }
      *((_QWORD *)this + 13) = v33;
    }
  }
  else if (*((_BYTE *)this + 24))
  {
    v8 = *((_DWORD *)this + 31);
    if (v8 >= a2)
    {
      do
      {
        while (1)
        {
          operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate((uint64_t)this, *(int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 4 * v8) >> 1);
          v9 = *((_DWORD *)this + 31);
          v10 = v9 >> 6;
          v11 = *((_QWORD *)this + 16);
          v12 = 8 * (v9 >> 6);
          v13 = *(_QWORD *)(v11 + v12) & ~(1 << v9);
          *(_QWORD *)(v11 + v12) = v13;
          if (!v13)
            break;
LABEL_8:
          v8 = (__clz(v13) | (v10 << 6)) ^ 0x3F;
          *((_DWORD *)this + 31) = v8;
          if (v8 < a2)
            return;
        }
        v14 = (uint64_t)v9 >> 6;
        v15 = v11 - 8;
        while (v14)
        {
          v16 = v14 - 1;
          v13 = *(_QWORD *)(v15 + 8 * v14--);
          if (v13)
          {
            v10 = v16;
            goto LABEL_8;
          }
        }
        v8 = -1;
        *((_DWORD *)this + 31) = -1;
      }
      while (a2 <= -1);
    }
  }
}

uint64_t operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  int *v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)result;
  v5 = 2 * a2;
  v6 = (2 * a2) | 1;
  if (v6 <= *(_DWORD *)result)
  {
    while (1)
    {
      v17 = *(_QWORD *)(result + 8);
      v18 = (double *)(v17 + 16 * v5);
      v19 = v18[1];
      v20 = (int *)(v17 + 16 * v6);
      v21 = *v20;
      v14 = v20[1];
      v15 = *((double *)v20 + 1);
      if (v19 < v15 || (v19 == v15 ? (v22 = *((float *)v18 + 1) < *(float *)&v14) : (v22 = 0), v22))
      {
        if (v15 <= *(double *)&a4 && (v15 != *(double *)&a4 || *((float *)&a3 + 1) >= *(float *)&v14))
        {
LABEL_28:
          v5 = a2;
          goto LABEL_30;
        }
      }
      else
      {
        v21 = *(_DWORD *)v18;
        if (v19 > *(double *)&a4)
        {
          v14 = *((unsigned int *)v18 + 1);
          v15 = v18[1];
          v6 = v5;
        }
        else
        {
          v23 = v19 == *(double *)&a4 && *((float *)&a3 + 1) < *((float *)v18 + 1);
          v14 = *((unsigned int *)v18 + 1);
          v15 = v18[1];
          v6 = v5;
          if (!v23)
            goto LABEL_28;
        }
      }
      v7 = v6;
      v16 = v17 + 16 * a2;
      *(_QWORD *)v16 = v21 | (unint64_t)(v14 << 32);
      *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)v21) = a2;
      *(double *)(v16 + 8) = v15;
      v5 = 2 * v7;
      v6 = (2 * v7) | 1;
      a2 = v7;
      if (v6 > v4)
        goto LABEL_3;
    }
  }
  v7 = a2;
LABEL_3:
  if (v5 <= v4
    && ((v8 = *(_QWORD *)(result + 8),
         v9 = (double *)(v8 + 16 * v5),
         v10 = *(unsigned int *)v9,
         v11 = *((unsigned int *)v9 + 1),
         v12 = v9[1],
         v12 > *(double *)&a4)
     || (v12 == *(double *)&a4 ? (v13 = *((float *)&a3 + 1) < *(float *)&v11) : (v13 = 0), v13)))
  {
    v25 = v8 + 16 * v7;
    *(_QWORD *)v25 = v10 | (v11 << 32);
    *(double *)(v25 + 8) = v12;
    *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)v10) = v7;
  }
  else
  {
    v5 = v7;
  }
LABEL_30:
  v26 = *(_QWORD *)(result + 8) + 16 * v5;
  *(_QWORD *)v26 = a3;
  *(double *)(v26 + 8) = *(double *)&a4;
  *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a3) = v5;
  return result;
}

uint64_t operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(_QWORD *a1, int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  const void *v15[2];
  char *v16;

  v15[0] = a3;
  v16 = &a3[4 * a4];
  result = std::deque<std::vector<operations_research::sat::Literal>>::emplace_back<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a1, v15, (const void **)&v16);
  if (!a4)
  {
LABEL_5:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 35);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: found ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v15);
  }
  v9 = 0;
  while (*(_DWORD *)&a3[4 * v9] != a2)
  {
    if (a4 == ++v9)
      goto LABEL_5;
  }
  v11 = a1[5] + a1[4] - 1;
  v12 = *(int **)(*(_QWORD *)(a1[1] + 8 * (v11 / 0xAA)) + 24 * (v11 % 0xAA));
  v13 = v9;
  v14 = *v12;
  *v12 = v12[v13];
  v12[v13] = v14;
  return result;
}

void sub_22DBDAE34(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::deque<std::vector<operations_research::sat::Literal>>::emplace_back<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(_QWORD *a1, const void **a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
    v11 = *a2;
    v14 = *a3;
    MEMORY[0] = 0;
    MEMORY[8] = 0;
    MEMORY[0x10] = 0;
    v13 = v14 - v11;
    if (v14 == v11)
      goto LABEL_11;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (_QWORD *)(*(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
    v11 = *a2;
    v12 = *a3;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    v13 = v12 - v11;
    if (v12 == v11)
      goto LABEL_11;
  }
  if (v13 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = (char *)operator new(v13);
  *v10 = v15;
  v10[1] = v15;
  v16 = &v15[4 * (v13 >> 2)];
  v10[2] = v16;
  memcpy(v15, v11, v13);
  v10[1] = v16;
LABEL_11:
  v17 = a1[4];
  v18 = a1[5] + 1;
  a1[5] = v18;
  v19 = v17 + v18;
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0xAA));
  v22 = *v21 + 24 * (v19 % 0xAA);
  if (a1[2] == v20)
    v22 = 0;
  if (v22 == *v21)
    return *(v21 - 1) + 4056;
  else
    return v22 - 24;
}

void sub_22DBDAFC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Inprocessing::PresolveLoop(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  double v8;
  uint64_t *v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  operations_research::sat::BinaryImplicationGraph ***v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v22;
  absl::lts_2020_02_25 *v23;
  double v24;
  double v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  absl::lts_2020_02_25 *v38;
  _QWORD *v39;
  absl::lts_2020_02_25 *v40;
  unint64_t v41;
  uint64_t v42;
  operations_research::sat::BoundedVariableElimination **v43;
  int64x2_t **v44;
  uint64_t v45;
  double v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49[2];
  unint64_t v50[2];
  int v51;
  uint64_t *v52;

  result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
  v7 = result;
  if ((a3 & 1) != 0)
    goto LABEL_4;
  if (*_MergedGlobals_17[0] < 1)
  {
    v47 = 0;
  }
  else
  {
    if (_MergedGlobals_17[0] != &google::kLogSiteUninitialized)
    {
LABEL_4:
      v47 = 1;
      goto LABEL_7;
    }
    result = google::InitVLOG3__((google *)_MergedGlobals_17, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
    v47 = result;
  }
LABEL_7:
  v8 = *(double *)&a2;
  v45 = v7;
  if (*off_2540796D0[0] <= 0)
  {
    v16 = 0;
    v17 = 0;
    v9 = a1 + 4;
    v10 = *(double *)(a1[4] + 112) + v8;
    v11 = a1 + 5;
    v48 = a1 + 1;
    v12 = (a3 >> 16) & 1;
    v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
    v14 = a1 + 3;
    v15 = a1 + 15;
    v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
    v44 = (int64x2_t **)(a1 + 7);
  }
  else
  {
    if (off_2540796D0[0] == &google::kLogSiteUninitialized)
    {
      result = google::InitVLOG3__((google *)off_2540796D0, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
      v16 = result;
      v9 = a1 + 4;
      v10 = *(double *)(a1[4] + 112) + v8;
      v11 = a1 + 5;
      v48 = a1 + 1;
      v12 = (a3 >> 16) & 1;
      v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
      v14 = a1 + 3;
      v15 = a1 + 15;
      v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
      v44 = (int64x2_t **)(a1 + 7);
      if (!(_DWORD)result)
      {
        v17 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v9 = a1 + 4;
      v10 = *(double *)(a1[4] + 112) + *(double *)&a2;
      v11 = a1 + 5;
      v48 = a1 + 1;
      v12 = (a3 >> 16) & 1;
      v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
      v14 = a1 + 3;
      v15 = a1 + 15;
      v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
      v44 = (int64x2_t **)(a1 + 7);
      v16 = 1;
    }
    v17 = 0x100000000;
  }
LABEL_13:
  v42 = (a3 >> 8) & 1 | v17;
  v46 = 0.0;
  while (1)
  {
    v18 = *v9;
    v19 = *(unsigned __int8 **)(*v9 + 120);
    if (v19)
    {
      v20 = atomic_load(v19);
      if ((v20 & 1) != 0)
        goto LABEL_52;
    }
    if (fmax(*(double *)(v18 + 104) - *(double *)(v18 + 112), 0.0) <= 0.0)
      goto LABEL_52;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    v22 = *(_QWORD *)(v18 + 24) <= CurrentTimeNanos - *(_QWORD *)(v18 + 8)
        ? CurrentTimeNanos - *(_QWORD *)(v18 + 8)
        : *(_QWORD *)(v18 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v18 + 32), v22);
    *(_QWORD *)(v18 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v18 + 40) + 8 * *(int *)(v18 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v18 + 16))
      break;
LABEL_27:
    if (*(double *)(*v9 + 112) > v10)
      goto LABEL_52;
    LODWORD(v50[0]) = *(_DWORD *)(*v11 + 304);
    LODWORD(v49[0]) = 0;
    if (LODWORD(v50[0]))
    {
      v49[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v50, (int)v49, "sat_solver_->CurrentDecisionLevel() == 0");
      if (v49[0])
      {
        google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 60, v49);
        google::LogMessage::stream((google::LogMessage *)v50);
        goto LABEL_50;
      }
    }
    if ((operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1) & 1) == 0)
      return 0;
    operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(a1[1]);
    result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp((operations_research::sat::Inprocessing *)a1, v12, v16);
    if (!(_DWORD)result)
      return result;
    result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables((operations_research::sat::Inprocessing *)a1, v16);
    if (!(_DWORD)result)
      return result;
    result = operations_research::sat::StampingSimplifier::DoOneRound(*v13, v16);
    if (!(_DWORD)result)
      return result;
    if (*v15 >= *(int *)(*v14 + 12))
    {
      result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
      if ((result & 1) == 0)
      {
        if (*(_BYTE *)(*v48 + 512))
        {
          result = operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound((operations_research::sat::Inprocessing *)a1, v16);
          if (!(_DWORD)result)
            return result;
          if (*v15 >= *(int *)(*v14 + 12))
          {
            result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
            if ((result & 1) == 0)
            {
              if (*(_BYTE *)(*v48 + 512))
              {
                operations_research::sat::BlockedClauseSimplifier::DoOneRound(*v44, v16);
                result = operations_research::sat::BoundedVariableElimination::DoOneRound(*v43, v16);
                if (!(_DWORD)result)
                  return result;
                result = operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1);
                if (!(_DWORD)result)
                  return result;
                v26 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
                if (v10 - *(double *)(*v9 + 112) <= 0.0)
                  goto LABEL_52;
                v27 = v26;
                v41 = v42 | v41 & 0xFFFFFF0000000000 | 0x1010100;
                result = operations_research::sat::FailedLiteralProbingRound(COERCE_ABSL_LTS_2020_02_25_(v10 - *(double *)(*v9 + 112)), v41, a1[13]);
                if (!(_DWORD)result)
                  return result;
                result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
                v46 = v46 + (double)(result - v45) * 0.000000001 - (double)(v27 - v45) * 0.000000001;
                if (*v15 >= *(int *)(*v14 + 12))
                {
                  result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
                  if ((result & 1) == 0)
                  {
                    if (*(_BYTE *)(*v48 + 512))
                      goto LABEL_52;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!FLAGS_time_limit_use_usertime)
    goto LABEL_51;
  v24 = *(double *)(v18 + 96);
  if (*(_BYTE *)(v18 + 72))
  {
    v25 = v24
        + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v23) - *(_QWORD *)(v18 + 80) + *(_QWORD *)(v18 + 88))
        * -0.000000001;
    if (v25 <= 0.0001)
      goto LABEL_51;
    goto LABEL_26;
  }
  v25 = v24 + (double)*(uint64_t *)(v18 + 88) * -0.000000001;
  if (v25 > 0.0001)
  {
LABEL_26:
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 + 8) + (uint64_t)(v25 * 1000000000.0);
    goto LABEL_27;
  }
LABEL_51:
  *(_QWORD *)(v18 + 16) = 0;
LABEL_52:
  result = operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1);
  if ((result & v47) == 1)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 122);
    v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v49);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Presolve.", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" num_fixed: ", 12);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" num_redundant: ", 16);
    v31 = *(_QWORD *)(*v48 + 312) & 1;
    if (*(uint64_t *)(*v48 + 312) < 0)
      v31 = -v31;
    v50[0] = v31;
    v51 = 0;
    if (v31)
    {
      v52 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v50, (int)&v51, "num_redundant_literals_ % 2 == 0");
      if (v52)
      {
        google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 607, &v52);
        google::LogMessage::stream((google::LogMessage *)v50);
LABEL_50:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v50);
      }
    }
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"/", 1);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" num_implications: ", 19);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" num_watched_clauses: ", 22);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dtime: ", 8);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/", 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    v38 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v38);
    v39 = (_QWORD *)std::ostream::operator<<();
    v40 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" non-probing time: ", 19);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v40);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
    return 1;
  }
  return result;
}

void sub_22DBDB6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBDB704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBDB70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Inprocessing::LevelZeroPropagate(operations_research::sat::Inprocessing *this)
{
  unint64_t v3[2];
  uint64_t *v4;

  LODWORD(v3[0]) = *(_DWORD *)(*((_QWORD *)this + 5) + 304);
  LODWORD(v4) = 0;
  if (LODWORD(v3[0]))
  {
    v4 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v3, (int)&v4, "sat_solver_->CurrentDecisionLevel() == 0");
    if (v4)
    {
      google::LogMessageFatal::LogMessageFatal(v3, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 219, &v4);
      google::LogMessage::stream((google::LogMessage *)v3);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v3);
    }
  }
  operations_research::sat::LiteralWatchers::AttachAllClauses(*((operations_research::sat::LiteralWatchers **)this + 2));
  return operations_research::sat::SatSolver::Propagate(*((operations_research::sat::SatSolver **)this + 5));
}

void sub_22DBDB7AC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(operations_research::sat::Inprocessing *this, int a2, int a3)
{
  operations_research::sat::BinaryImplicationGraph *v6;

  if (operations_research::sat::Inprocessing::LevelZeroPropagate(this)
    && ((operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(*((_QWORD *)this + 1)),
         v6 = (operations_research::sat::BinaryImplicationGraph *)*((_QWORD *)this + 1),
         *((_BYTE *)v6 + 512))
     || operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v6, a3)
     && operations_research::sat::Inprocessing::LevelZeroPropagate(this)
     && (!a2
      || operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(*((operations_research::sat::BinaryImplicationGraph **)this + 1), a3)&& operations_research::sat::Inprocessing::LevelZeroPropagate(this)))&& operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(*((operations_research::sat::BinaryImplicationGraph ***)this + 6), a3))
  {
    return operations_research::sat::Inprocessing::LevelZeroPropagate(this);
  }
  else
  {
    return 0;
  }
}

uint64_t operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(operations_research::sat::Inprocessing *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  int *v54;
  char *v55;
  int *v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  absl::lts_2020_02_25 *v64;
  int v66;
  uint64_t v67;
  int **v68;
  int **v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  _DWORD v73[4];
  void *__p;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;

  LODWORD(v77) = *(_DWORD *)(*((_QWORD *)this + 5) + 304);
  LODWORD(__p) = 0;
  if ((_DWORD)v77)
  {
    __p = (void *)google::MakeCheckOpString<int,int>((int)&v77, (int)&__p, "sat_solver_->CurrentDecisionLevel() == 0");
    if (__p)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v77, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 254, (uint64_t **)&__p);
      google::LogMessage::stream((google::LogMessage *)&v77);
      goto LABEL_93;
    }
  }
  v4 = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 312);
  v7 = v6 & 1;
  if (v6 < 0)
    v7 = -(uint64_t)v7;
  v77 = (char *)v7;
  v73[0] = 0;
  if (v7)
  {
    v4 = google::MakeCheckOpString<long long,int>((int)&v77, (int)v73, "num_redundant_literals_ % 2 == 0");
    __p = (void *)v4;
    if (v4)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v77, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 607, (uint64_t **)&__p);
      google::LogMessage::stream((google::LogMessage *)&v77);
LABEL_93:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v77);
    }
    v6 = *(_QWORD *)(v5 + 312);
    v8 = *(int *)(*((_QWORD *)this + 3) + 12);
    if (*((_QWORD *)this + 14) != v6)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = *(int *)(*((_QWORD *)this + 3) + 12);
  if (*((_QWORD *)this + 14) == v6)
  {
LABEL_7:
    if (*((_QWORD *)this + 15) == v8)
      return 1;
  }
LABEL_14:
  *((_QWORD *)this + 14) = v6;
  *((_QWORD *)this + 15) = v8;
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v4);
  v78 = 0;
  v79 = 0;
  v10 = *(int *)(*((_QWORD *)this + 5) + 16);
  __p = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if ((_DWORD)v10)
  {
    if ((v10 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = 2 * v10;
    v12 = ((unint64_t)(2 * v10 - 1) >> 6) + 1;
    __p = operator new(8 * v12);
    v75 = 0;
    v76 = v12;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v11, 0);
  }
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)this + 2));
  v66 = a2;
  v13 = *((_QWORD *)this + 2);
  v14 = *(int ***)(v13 + 304);
  v69 = *(int ***)(v13 + 312);
  if (v14 == v69)
  {
    v16 = 0;
    *(double *)(*((_QWORD *)this + 4) + 112) = *(double *)(*((_QWORD *)this + 4) + 112) + 0.0;
    if (!a2)
    {
LABEL_81:
      v9 = 1;
      goto LABEL_82;
    }
LABEL_80:
    google::LogMessage::LogMessage((google::LogMessage *)v73, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 346);
    v61 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Cleanup. num_removed_literals: ", 31);
    v62 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" dtime: ", 8);
    v63 = (_QWORD *)std::ostream::operator<<();
    v64 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v64);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v73);
    goto LABEL_81;
  }
  v15 = 0;
  v16 = 0;
  v67 = 0;
  v17 = 0;
  while (1)
  {
    v18 = *v14;
    v20 = *v14 + 1;
    v19 = **v14;
    if ((_DWORD)v19)
      break;
LABEL_20:
    v17 += v19;
    if (++v14 == v69)
    {
      *(double *)(*((_QWORD *)this + 4) + 112) = *(double *)(*((_QWORD *)this + 4) + 112) + (double)v17 * 0.00000001;
      if (!v66)
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  v72 = v17;
  v21 = 0;
  v22 = &v20[v19];
  while (1)
  {
    v23 = v18[v21 + 1];
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8 * (v23 >> 6));
    if ((v24 & (1 << v23)) != 0)
    {
      v58 = v15;
      if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*((_QWORD **)this + 2), v23))
      {
        v9 = 0;
        goto LABEL_82;
      }
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((_QWORD *)this + 2), v18);
      v19 = *v18;
      v67 += v19;
      v17 = v72;
LABEL_19:
      v15 = v58;
      goto LABEL_20;
    }
    if (((v24 >> (v23 & 0x3F ^ 1)) & 1) != 0
      || (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 544) + 8 * (v23 >> 6)) & (1 << v23)) != 0)
    {
      break;
    }
    if (v19 == ++v21)
      goto LABEL_74;
  }
  v19 *= 2;
  v78 = v16;
  v70 = v19;
  v71 = v18;
  v68 = v14;
  while (2)
  {
    v28 = *((_QWORD *)this + 1);
    v29 = *(_QWORD *)(v28 + 576);
    v30 = *(_QWORD *)(v28 + 568);
    v31 = *v20;
    if (*v20 < (int)((unint64_t)(v29 - v30) >> 2))
    {
      v32 = *(_DWORD *)(v30 + 4 * *v20);
      if (v32 == -1)
        v31 = *v20;
      else
        v31 = v32;
    }
    v25 = (unint64_t)v31 >> 6;
    v26 = 1 << v31;
    v27 = *((_QWORD *)__p + v25);
    if (((1 << v31) & v27) != 0)
      goto LABEL_30;
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8 * v25);
    if (((v33 >> (v31 & 0x3F ^ 1u)) & 1) != 0)
      goto LABEL_30;
    if (!(v27 & (1 << (v31 & 0x3F ^ 1u)) | v33 & v26))
    {
      *((_QWORD *)__p + v25) = v26 | v27;
      if (v16 < v15)
      {
        *(_DWORD *)v16 = v31;
        v34 = (uint64_t)(v16 + 4);
        goto LABEL_54;
      }
      v35 = v77;
      v36 = (char *)(v16 - v77);
      v37 = (v16 - v77) >> 2;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v15 - v77) >> 1 > v38)
        v38 = (v15 - v77) >> 1;
      if ((unint64_t)(v15 - v77) >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
      {
        if (v39 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v40 = v39;
        v41 = operator new(4 * v39);
        v39 = v40;
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = v31;
        v34 = (uint64_t)(v42 + 4);
        if (v16 != v35)
        {
LABEL_48:
          v43 = v16 - 4 - v35;
          if (v43 < 0xBC
            || &v36[(_QWORD)v41 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v36[(_QWORD)v41 - 4]
            || &v16[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v16 - 4
            || (unint64_t)(v16 - v41 - (_QWORD)v36) < 0x20)
          {
            v44 = v16;
            v14 = v68;
            v19 = v70;
          }
          else
          {
            v47 = (v43 >> 2) + 1;
            v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
            v44 = &v16[-v48];
            v42 -= v48;
            v49 = &v41[4 * v37 - 16];
            v50 = v16 - 16;
            v51 = v47 & 0x7FFFFFFFFFFFFFF8;
            v14 = v68;
            do
            {
              v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 8;
            }
            while (v51);
            v19 = v70;
            if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_51:
              v15 = &v41[4 * v39];
              v77 = v42;
              v79 = v15;
              if (v35)
                goto LABEL_52;
              goto LABEL_53;
            }
          }
          do
          {
            v45 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v42 - 1) = v45;
            v42 -= 4;
          }
          while (v44 != v35);
          goto LABEL_51;
        }
      }
      else
      {
        v41 = 0;
        v42 = (char *)(4 * v37);
        *(_DWORD *)(4 * v37) = v31;
        v34 = 4 * v37 + 4;
        if (v16 != v35)
          goto LABEL_48;
      }
      v14 = v68;
      v19 = v70;
      v15 = &v41[4 * v39];
      v77 = v42;
      v79 = v15;
      if (v35)
      {
LABEL_52:
        v46 = v15;
        operator delete(v35);
        v15 = v46;
      }
LABEL_53:
      v18 = v71;
LABEL_54:
      v78 = (char *)v34;
      v16 = (char *)v34;
LABEL_30:
      if (++v20 == v22)
      {
        v53 = 1;
        v54 = (int *)v77;
        if (v77 == v16)
          goto LABEL_68;
        goto LABEL_66;
      }
      continue;
    }
    break;
  }
  v60 = v15;
  operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((_QWORD *)this + 2), v18);
  v53 = 0;
  v67 += *v18;
  v15 = v60;
  v54 = (int *)v77;
  if (v77 == v16)
    goto LABEL_68;
LABEL_66:
  v55 = (char *)__p;
  v56 = v54;
  do
  {
    v57 = *v56++;
    *(_QWORD *)&v55[((unint64_t)v57 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v57);
  }
  while (v56 != (int *)v16);
LABEL_68:
  if ((v53 & 1) == 0)
  {
    v16 = (char *)v54;
LABEL_74:
    v17 = v72;
    goto LABEL_20;
  }
  v58 = v15;
  v59 = *v71;
  if (operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((_QWORD *)this + 2), v71, v54, (v16 - (char *)v54) >> 2))
  {
    v67 += v59 - ((v16 - (char *)v54) >> 2);
    v16 = (char *)v54;
    v17 = v72;
    v19 = v70;
    goto LABEL_19;
  }
  v9 = 0;
  v16 = (char *)v54;
LABEL_82:
  if (__p)
    operator delete(__p);
  if (v16)
  {
    v78 = v16;
    operator delete(v16);
  }
  return v9;
}

void sub_22DBDBF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBDBF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBDBF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v24;

  if (__p)
  {
    operator delete(__p);
    v24 = a22;
    if (!a22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::StampingSimplifier::DoOneRound(operations_research::sat::BinaryImplicationGraph **this, int a2)
{
  operations_research::sat::BinaryImplicationGraph *v4;
  int v5;
  _BOOL8 result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  absl::lts_2020_02_25 *v12;
  _BYTE v13[16];

  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v4 = this[1];
  if (*((_QWORD *)v4 + 25) == *((_QWORD *)v4 + 24) || !*((_QWORD *)v4 + 27))
    return 1;
  if (*((_BYTE *)this + 40))
    goto LABEL_4;
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((uint64_t)v4);
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this[1], a2))
    return 1;
  operations_research::sat::StampingSimplifier::SampleTreeAndFillParent((operations_research::sat::StampingSimplifier *)this);
  result = operations_research::sat::StampingSimplifier::ComputeStamps((operations_research::sat::StampingSimplifier *)this);
  if (result)
  {
LABEL_4:
    *((_BYTE *)this + 40) = 0;
    v5 = operations_research::sat::StampingSimplifier::ProcessClauses(this);
    result = 0;
    if (v5)
    {
      *((double *)this[4] + 14) = *((double *)this + 6) + *((double *)this[4] + 14);
      if (*operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__[0] < 1)
      {
        if (!a2)
          return 1;
        goto LABEL_15;
      }
      if (operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized)
      {
        if (!(a2 | 1))
          return 1;
        goto LABEL_15;
      }
      if (google::InitVLOG3__((google *)operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2)
      {
LABEL_15:
        google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 600);
        v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Stamping. num_removed_literals: ", 32);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" num_subsumed: ", 15);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" num_fixed: ", 12);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" dtime: ", 8);
        v11 = (_QWORD *)std::ostream::operator<<();
        v12 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v12);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v13);
      }
      return 1;
    }
  }
  return result;
}

void sub_22DBDC1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::Inprocessing::MoreRedundantVariableToClean(operations_research::sat::Inprocessing *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6[2];
  int v7;
  uint64_t *v8;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 312);
  v4 = v3 & 1;
  if (v3 < 0)
    v4 = -(uint64_t)v4;
  v6[0] = v4;
  v7 = 0;
  if (v4)
  {
    v8 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v6, (int)&v7, "num_redundant_literals_ % 2 == 0");
    if (v8)
    {
      google::LogMessageFatal::LogMessageFatal(v6, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 607, &v8);
      google::LogMessage::stream((google::LogMessage *)v6);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v6);
    }
    v3 = *(_QWORD *)(v2 + 312);
  }
  return *((_QWORD *)this + 14) < v3;
}

void sub_22DBDC294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(operations_research::sat::Inprocessing *this, int a2)
{
  operations_research::sat::Inprocessing *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  int **v7;
  int **v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  int8x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int8x8_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  int *v45;
  unint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int *v58;
  int **v59;
  _QWORD *v60;
  unint64_t v61;
  int *v62;
  unint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  int *v85;
  unint64_t v86;
  char *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int *v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int *v99;
  int *v100;
  int v101;
  int *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  int *v108;
  uint64_t v109;
  unint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  int *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  _DWORD *v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  unint64_t v127;
  uint64_t v128;
  int *v129;
  _QWORD *v130;
  unint64_t v131;
  int *v132;
  unint64_t v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  int64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  _DWORD *v150;
  unint64_t v151;
  char *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  char *v157;
  uint64_t v158;
  __int128 v159;
  int *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int *v166;
  unint64_t v167;
  uint64_t v168;
  int32x2_t *v169;
  int8x16_t v170;
  uint64_t v171;
  int8x16_t v172;
  int32x2_t v173;
  int32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  uint64x2_t v180;
  int8x16_t v181;
  int *v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  int v202;
  int v203;
  int *v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  unint64_t v216;
  char *v217;
  _OWORD *v218;
  __int128 *v219;
  unint64_t v220;
  __int128 v221;
  unint64_t v222;
  char *v223;
  int v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  absl::lts_2020_02_25 *v229;
  uint64_t v230;
  char *v231;
  void **v232;
  void **v233;
  void *v234;
  void **v235;
  char v236;
  uint64_t v239;
  int *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int *v244;
  int *v245;
  operations_research::sat::Inprocessing *v246;
  int *v247;
  unint64_t v248;
  int *v249;
  uint64_t v250;
  int *v251;
  uint64_t v252;
  int8x8_t *v253;
  int **v254;
  uint64_t v255;
  int *v256;
  uint64_t v257;
  unint64_t v258[2];
  uint64_t *v259;
  int v260;
  void *__p;
  char *v262;
  char *v263;
  int8x8_t *v264;
  int8x8_t *v265;
  int8x8_t *v266;
  void *v267;
  void **v268;
  int v269;
  char *v270;
  char *v271;
  char *v272;
  int *v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  char *v277;
  char *v278;
  int **v279;
  int **v280;
  int **v281;
  int *v282;
  int *v283;
  int *v284;

  v2 = this;
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  v282 = 0;
  v283 = 0;
  v284 = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2 + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)v2 + 2));
  v3 = *((_QWORD *)v2 + 2);
  v280 = 0;
  v281 = 0;
  v279 = 0;
  v5 = *(_BYTE **)(v3 + 304);
  v4 = *(_BYTE **)(v3 + 312);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (int **)operator new(v4 - v5);
    v8 = &v7[v6 >> 3];
    v279 = v7;
    v281 = v8;
    memcpy(v7, v5, v6);
    v280 = v8;
  }
  v241 = v8 - v7;
  v9 = 126 - 2 * __clz(v241);
  v10 = (char *)v8 - (char *)v7;
  if (v8 == v7)
    v11 = 0;
  else
    v11 = v9;
  v254 = v7;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(v7, v8, v11, 1);
  v12 = *(int *)(*((_QWORD *)v2 + 5) + 16);
  v13 = 2 * v12;
  if ((int)v12 <= 0)
  {
    v269 = 0;
    v271 = 0;
    v272 = 0;
    v270 = 0;
  }
  else
  {
    v269 = 2 * v12;
    v13 = (int)v13;
    v14 = (int)v13 + 63;
    v271 = 0;
    v272 = 0;
    v270 = 0;
    if (v14 >= 0x40)
    {
      v15 = v14 >> 6;
      v16 = 8 * (v14 >> 6);
      v270 = (char *)operator new(v16);
      v272 = &v270[8 * v15];
      bzero(v270, v16);
      v271 = &v270[v16];
    }
  }
  v273 = &v269;
  v274 = 0xFFFFFFFFLL;
  v275 = 0;
  v276 = 0;
  v277 = 0;
  v278 = 0;
  std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector(&v267, v13);
  v264 = 0;
  v265 = 0;
  v266 = 0;
  if (v8 != v254)
  {
    if ((v10 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = (int8x8_t *)operator new(v10);
    v264 = v17;
    v266 = &v17[v241];
    bzero(v17, v10);
    v18 = 0;
    v239 = 0;
    v242 = 0;
    v252 = 0;
    v19 = 0;
    v265 = (int8x8_t *)((char *)v17 + v10);
    __p = 0;
    v262 = 0;
    v263 = 0;
    v253 = v17;
    v246 = v2;
    while (1)
    {
      if (v252 + v19 > 1000000000)
        goto LABEL_252;
      v255 = v19;
      v248 = v18;
      v251 = v254[v18];
      v21 = (char *)v276;
      v20 = v277;
      if (v276 != (int *)v277)
      {
        v22 = v270;
        v23 = v277 - (char *)v276 - 4;
        v24 = (char *)v276;
        if (v23 < 4)
          goto LABEL_294;
        v25 = (v23 >> 2) + 1;
        v24 = (char *)&v276[v25 & 0x7FFFFFFFFFFFFFFELL];
        v26 = v276 + 1;
        v27 = v25 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v28 = ((unint64_t)*v26 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *(_QWORD *)&v22[((unint64_t)*(v26 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
          *(_QWORD *)&v22[v28] = 0;
          v26 += 2;
          v27 -= 2;
        }
        while (v27);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFFELL))
        {
LABEL_294:
          do
          {
            v29 = *(int *)v24;
            v24 += 4;
            *(_QWORD *)&v22[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
          }
          while (v24 != v20);
        }
      }
      v277 = v21;
      v31 = v251 + 1;
      v30 = *v251;
      v247 = v251 + 1;
      v32 = 0;
      if (!(_DWORD)v30)
      {
        v262 = (char *)__p;
        v19 = v255;
        goto LABEL_199;
      }
      v33 = &v31[v30];
      do
      {
        v36 = *v31;
        v37 = (unint64_t)*v31 >> 6;
        v38 = *(_QWORD *)&v270[8 * v37];
        if (((1 << *v31) & v38) == 0)
        {
          *(_QWORD *)&v270[8 * v37] = (1 << v36) | v38;
          if (v21 < v278)
          {
            *(_DWORD *)v21 = v36;
            v34 = (uint64_t)(v21 + 4);
            goto LABEL_28;
          }
          v39 = v276;
          v40 = (v21 - (char *)v276) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v42 = v278 - (char *)v276;
          if ((v278 - (char *)v276) >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v44 = operator new(4 * v43);
            v45 = (int *)&v44[4 * v40];
            *v45 = v36;
            v34 = (uint64_t)(v45 + 1);
            if (v21 != (char *)v39)
            {
LABEL_43:
              v46 = v21 - 4 - (char *)v39;
              if (v46 < 0xBC
                || &v44[v21 - (char *)v39 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] > &v44[v21 - (char *)v39 - 4]
                || &v21[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4
                || (unint64_t)((char *)v39 - v44) < 0x20)
              {
                v47 = v21;
                v17 = v253;
              }
              else
              {
                v49 = (v46 >> 2) + 1;
                v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
                v47 = &v21[-v50];
                v45 = (int *)((char *)v45 - v50);
                v51 = &v44[4 * v40 - 16];
                v52 = (__int128 *)(v21 - 16);
                v53 = v49 & 0x7FFFFFFFFFFFFFF8;
                v17 = v253;
                do
                {
                  v54 = *v52;
                  *(v51 - 1) = *(v52 - 1);
                  *v51 = v54;
                  v51 -= 2;
                  v52 -= 2;
                  v53 -= 8;
                }
                while (v53);
                if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_46:
                  v276 = v45;
                  v277 = (char *)v34;
                  v278 = &v44[4 * v43];
                  if (!v39)
                    goto LABEL_28;
LABEL_50:
                  operator delete(v39);
LABEL_28:
                  v277 = (char *)v34;
                  v21 = (char *)v34;
                  goto LABEL_29;
                }
              }
              do
              {
                v48 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *--v45 = v48;
              }
              while (v47 != (char *)v39);
              goto LABEL_46;
            }
          }
          else
          {
            v44 = 0;
            v45 = (int *)(4 * v40);
            *(_DWORD *)(4 * v40) = v36;
            v34 = 4 * v40 + 4;
            if (v21 != (char *)v39)
              goto LABEL_43;
          }
          v17 = v253;
          v276 = v45;
          v277 = (char *)v34;
          v278 = &v44[4 * v43];
          if (v39)
            goto LABEL_50;
          goto LABEL_28;
        }
LABEL_29:
        v35 = (v36 >> 1) & 0x3F;
        if (v36 >> 1 <= 0)
          v35 = -(-(v36 >> 1) & 0x3F);
        *(_QWORD *)&v32 |= 1 << v35;
        ++v31;
      }
      while (v31 != v33);
      v55 = *v251;
      v56 = (char *)__p;
      v262 = (char *)__p;
      if (!(_DWORD)v55)
      {
LABEL_198:
        v19 = v255;
        v160 = v251 + 1;
        if (__p == v56)
          goto LABEL_199;
        goto LABEL_111;
      }
      v57 = ~*(_QWORD *)&v32;
      v58 = v251 + 1;
      v244 = &v247[v55];
      v59 = v254;
      v19 = v255;
      while (2)
      {
        v249 = v58;
        v60 = (char *)v267 + 32 * *v58;
        v63 = *v60;
        v62 = (int *)(v60 + 1);
        v61 = v63;
        if ((v63 & 1) != 0)
          v62 = *(int **)v62;
        v252 += v61 >> 1;
        if (v61 < 2)
          goto LABEL_60;
        v64 = &v62[v61 >> 1];
        v256 = v64;
        while (2)
        {
          v66 = *v62;
          if ((*(_QWORD *)&v17[v66] & v57) != 0)
            goto LABEL_67;
          v260 = -1;
          v67 = v59[v66];
          v70 = *v67;
          v68 = v67 + 1;
          v69 = v70;
          v19 += v70;
          if (!(_DWORD)v70)
            goto LABEL_144;
          v71 = &v68[v69];
          v72 = -1;
          v73 = 1;
          while (2)
          {
            while (2)
            {
              v74 = *v68;
              v75 = *(_QWORD *)&v270[(v74 >> 3) & 0x1FFFFFFFFFFFFFF8];
              if (((v75 >> v74) & 1) != 0)
              {
                if (++v68 != v71)
                  continue;
                if ((v73 & 1) != 0)
                {
LABEL_144:
                  v119 = *v251;
                  v2 = v246;
                  operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((_QWORD *)v246 + 2), v251);
                  v242 += v119;
                  ++v239;
                  v120 = v248;
                  goto LABEL_17;
                }
LABEL_79:
                if (v72 != -1)
                {
                  v76 = v263;
                  if (v56 >= v263)
                    goto LABEL_81;
LABEL_65:
                  *(_DWORD *)v56 = v72;
                  v65 = (uint64_t)(v56 + 4);
                  v59 = v254;
LABEL_66:
                  v262 = (char *)v65;
                  v56 = (char *)v65;
                  goto LABEL_67;
                }
                v259 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>((int)&operations_research::sat::kNoLiteralIndex, (int)&v260, "kNoLiteralIndex != to_remove");
                if (!v259)
                {
                  v72 = v260;
                  v56 = v262;
                  v76 = v263;
                  if (v262 < v263)
                    goto LABEL_65;
LABEL_81:
                  v77 = (char *)__p;
                  v78 = v56 - (_BYTE *)__p;
                  v79 = (v56 - (_BYTE *)__p) >> 2;
                  v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 62)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v81 = v19;
                  v82 = v76 - (_BYTE *)__p;
                  if (v82 >> 1 > v80)
                    v80 = v82 >> 1;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                    v83 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v80;
                  if (v83)
                  {
                    if (v83 >> 62)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v84 = operator new(4 * v83);
                    v85 = (int *)&v84[4 * v79];
                    *v85 = v72;
                    v65 = (uint64_t)(v85 + 1);
                    if (v56 != v77)
                    {
LABEL_90:
                      v86 = v56 - 4 - v77;
                      v59 = v254;
                      if (v86 < 0xBC
                        || &v84[v78 - 4 - (v86 & 0xFFFFFFFFFFFFFFFCLL)] > &v84[v78 - 4]
                        || &v56[-(v86 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                        || (unint64_t)(v56 - v84 - v78) < 0x20)
                      {
                        v87 = v56;
                        v17 = v253;
                        v57 = ~*(_QWORD *)&v32;
                      }
                      else
                      {
                        v89 = (v86 >> 2) + 1;
                        v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
                        v87 = &v56[-v90];
                        v85 = (int *)((char *)v85 - v90);
                        v91 = &v84[4 * v79 - 16];
                        v92 = v56 - 16;
                        v93 = v89 & 0x7FFFFFFFFFFFFFF8;
                        v57 = ~*(_QWORD *)&v32;
                        do
                        {
                          v94 = *(_OWORD *)v92;
                          *(v91 - 1) = *((_OWORD *)v92 - 1);
                          *v91 = v94;
                          v91 -= 2;
                          v92 -= 32;
                          v93 -= 8;
                        }
                        while (v93);
                        v17 = v253;
                        if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_93:
                          __p = v85;
                          v262 = (char *)v65;
                          v263 = &v84[4 * v83];
                          if (v77)
                            goto LABEL_94;
                          goto LABEL_95;
                        }
                      }
                      do
                      {
                        v88 = *((_DWORD *)v87 - 1);
                        v87 -= 4;
                        *--v85 = v88;
                      }
                      while (v87 != v77);
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    v84 = 0;
                    v85 = (int *)(4 * v79);
                    *(_DWORD *)(4 * v79) = v72;
                    v65 = 4 * v79 + 4;
                    if (v56 != v77)
                      goto LABEL_90;
                  }
                  v17 = v253;
                  v59 = v254;
                  v57 = ~*(_QWORD *)&v32;
                  __p = v85;
                  v262 = (char *)v65;
                  v263 = &v84[4 * v83];
                  if (v77)
LABEL_94:
                    operator delete(v77);
LABEL_95:
                  v19 = v81;
                  v64 = v256;
                  goto LABEL_66;
                }
                google::LogMessageFatal::LogMessageFatal(v258, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 461, &v259);
                google::LogMessage::stream((google::LogMessage *)v258);
LABEL_290:
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v258);
              }
              break;
            }
            if (v72 == -1)
            {
              v72 = v74 ^ 1;
              if (((v75 >> (v74 ^ 1u)) & 1) != 0)
              {
                v73 = 0;
                v260 = v74 ^ 1;
                if (++v68 == v71)
                  goto LABEL_79;
                continue;
              }
            }
            break;
          }
          v59 = v254;
LABEL_67:
          if (++v62 != v64)
            continue;
          break;
        }
LABEL_60:
        v58 = v249 + 1;
        if (v249 + 1 != v244)
          continue;
        break;
      }
      v128 = *v251;
      v129 = v251 + 1;
      v240 = &v247[v128];
      if ((_DWORD)v128)
      {
        v255 = v19;
        while (1)
        {
          v245 = v129;
          v250 = *v129;
          v130 = (char *)v267 + 32 * (v250 ^ 1);
          v133 = *v130;
          v132 = (int *)(v130 + 1);
          v131 = v133;
          if ((v133 & 1) != 0)
            v132 = *(int **)v132;
          v243 = v131 >> 1;
          if (v131 >= 2)
            break;
LABEL_157:
          v252 += v243;
          v129 = v245 + 1;
          if (v245 + 1 == v240)
            goto LABEL_198;
        }
        v134 = &v132[v131 >> 1];
        while (2)
        {
          v136 = *v132;
          if ((*(_QWORD *)&v17[v136] & v57) != 0)
          {
LABEL_164:
            if (++v132 == v134)
              goto LABEL_157;
            continue;
          }
          break;
        }
        v137 = v59[v136];
        v140 = *v137;
        v138 = v137 + 1;
        v139 = v140;
        v255 += v140;
        if ((_DWORD)v140)
        {
          v141 = 4 * v139;
          do
          {
            v142 = *v138;
            if ((_DWORD)v142 != (v250 ^ 1)
              && ((*(_QWORD *)&v270[(v142 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v142) & 1) == 0)
            {
              goto LABEL_164;
            }
            ++v138;
            v141 -= 4;
          }
          while (v141);
        }
        if (v56 < v263)
        {
          *(_DWORD *)v56 = v250;
          v135 = (uint64_t)(v56 + 4);
        }
        else
        {
          v143 = (char *)__p;
          v144 = v56 - (_BYTE *)__p;
          v145 = (v56 - (_BYTE *)__p) >> 2;
          v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v147 = v263 - (_BYTE *)__p;
          if ((v263 - (_BYTE *)__p) >> 1 > v146)
            v146 = v147 >> 1;
          if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
            v148 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v148 = v146;
          if (v148)
          {
            if (v148 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v149 = operator new(4 * v148);
            v150 = &v149[4 * v145];
            *v150 = v250;
            v135 = (uint64_t)(v150 + 1);
            if (v56 != v143)
            {
LABEL_182:
              v151 = v56 - 4 - v143;
              if (v151 < 0xBC
                || &v149[v144 - 4 - (v151 & 0xFFFFFFFFFFFFFFFCLL)] > &v149[v144 - 4]
                || &v56[-(v151 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                || (unint64_t)(v56 - v149 - v144) < 0x20)
              {
                v152 = v56;
                v17 = v253;
                v57 = ~*(_QWORD *)&v32;
              }
              else
              {
                v154 = (v151 >> 2) + 1;
                v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
                v152 = &v56[-v155];
                v150 = (_DWORD *)((char *)v150 - v155);
                v156 = &v149[4 * v145 - 16];
                v157 = v56 - 16;
                v158 = v154 & 0x7FFFFFFFFFFFFFF8;
                v57 = ~*(_QWORD *)&v32;
                do
                {
                  v159 = *(_OWORD *)v157;
                  *(v156 - 1) = *((_OWORD *)v157 - 1);
                  *v156 = v159;
                  v156 -= 2;
                  v157 -= 32;
                  v158 -= 8;
                }
                while (v158);
                v17 = v253;
                if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_185:
                  __p = v150;
                  v262 = (char *)v135;
                  v263 = &v149[4 * v148];
                  if (v143)
                    goto LABEL_186;
                  goto LABEL_187;
                }
              }
              do
              {
                v153 = *((_DWORD *)v152 - 1);
                v152 -= 4;
                *--v150 = v153;
              }
              while (v152 != v143);
              goto LABEL_185;
            }
          }
          else
          {
            v149 = 0;
            v150 = (_DWORD *)(4 * v145);
            *(_DWORD *)(4 * v145) = v250;
            v135 = 4 * v145 + 4;
            if (v56 != v143)
              goto LABEL_182;
          }
          v17 = v253;
          v57 = ~*(_QWORD *)&v32;
          __p = v150;
          v262 = (char *)v135;
          v263 = &v149[4 * v148];
          if (v143)
LABEL_186:
            operator delete(v143);
LABEL_187:
          v59 = v254;
        }
        v262 = (char *)v135;
        v56 = (char *)v135;
        goto LABEL_164;
      }
      v160 = v251 + 1;
      if (__p == v56)
      {
LABEL_199:
        v2 = v246;
        goto LABEL_218;
      }
LABEL_111:
      v95 = v282;
      v283 = v282;
      v96 = *v251;
      v97 = v160;
      v98 = &v160[v96];
      if (!(_DWORD)v96)
      {
        v121 = 0;
        v99 = v282;
        goto LABEL_152;
      }
      v257 = v19;
      v99 = v282;
      v100 = v97;
      while (2)
      {
        while (1)
        {
          v101 = *v100;
          if (v99 >= v284)
            break;
          *v99++ = v101;
          v283 = v99;
          if (++v100 == v98)
            goto LABEL_145;
        }
        v102 = v282;
        v103 = v99 - v282;
        v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v105 = (char *)v284 - (char *)v282;
        if (((char *)v284 - (char *)v282) >> 1 > v104)
          v104 = v105 >> 1;
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
          v106 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v106 = v104;
        if (!v106)
        {
          v107 = 0;
          v108 = (int *)(4 * v103);
          *(_DWORD *)(4 * v103) = v101;
          v109 = 4 * v103 + 4;
          if (v99 != v102)
            goto LABEL_124;
LABEL_132:
          v282 = v108;
          v283 = (int *)v109;
          v284 = (int *)&v107[4 * v106];
          if (v102)
            goto LABEL_128;
          goto LABEL_129;
        }
        if (v106 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v107 = operator new(4 * v106);
        v108 = (int *)&v107[4 * v103];
        *v108 = v101;
        v109 = (uint64_t)(v108 + 1);
        if (v99 == v102)
          goto LABEL_132;
LABEL_124:
        v110 = (char *)(v99 - 1) - (char *)v102;
        if (v110 < 0xBC)
        {
          v111 = v99;
          goto LABEL_126;
        }
        if (&v107[(char *)v99 - (char *)v102 - 4 - (v110 & 0xFFFFFFFFFFFFFFFCLL)] > &v107[(char *)v99
                                                                                         - (char *)v102
                                                                                         - 4])
        {
          v111 = v99;
          goto LABEL_126;
        }
        if ((int *)((char *)v99 - (v110 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v99 - 1)
        {
          v111 = v99;
          goto LABEL_126;
        }
        if ((unint64_t)((char *)v102 - v107) < 0x20)
        {
          v111 = v99;
          goto LABEL_126;
        }
        v113 = (v110 >> 2) + 1;
        v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
        v111 = &v99[v114 / 0xFFFFFFFFFFFFFFFCLL];
        v108 = (int *)((char *)v108 - v114);
        v115 = &v107[4 * v103 - 16];
        v116 = v99 - 4;
        v117 = v113 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v118 = *(_OWORD *)v116;
          *(v115 - 1) = *((_OWORD *)v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 8;
          v117 -= 8;
        }
        while (v117);
        if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_126:
            v112 = *--v111;
            *--v108 = v112;
          }
          while (v111 != v102);
        }
        v282 = v108;
        v283 = (int *)v109;
        v284 = (int *)&v107[4 * v106];
        if (v102)
LABEL_128:
          operator delete(v102);
LABEL_129:
        v99 = (int *)v109;
        v283 = (int *)v109;
        if (++v100 != v98)
          continue;
        break;
      }
LABEL_145:
      v95 = v282;
      if (v282 == v99)
      {
        v121 = 0;
        v19 = v257;
      }
      else
      {
        v121 = 0;
        v122 = __p;
        v123 = v282;
        v19 = v257;
        do
        {
          if (*v123 != *v122)
            v95[v121++] = *v123;
          ++v123;
        }
        while (v123 != v99);
      }
LABEL_152:
      v260 = v121 + 1;
      v124 = v99 - v95;
      v258[0] = v124;
      if (v124 == v121 + 1)
      {
        v125 = v121;
        v126 = v121 >= v124;
        v127 = v121 - v124;
        if (v121 > v124)
          goto LABEL_154;
LABEL_204:
        if (!v126)
        {
          v99 = &v95[v125];
          v283 = v99;
        }
        goto LABEL_206;
      }
      v259 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v260, (int)v258, "new_size + 1 == new_clause.size()");
      if (v259)
      {
        google::LogMessageFatal::LogMessageFatal(v258, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 507, &v259);
        google::LogMessage::stream((google::LogMessage *)v258);
        goto LABEL_290;
      }
      v95 = v282;
      v99 = v283;
      v161 = v283 - v282;
      v125 = v121;
      v126 = v121 >= v161;
      v127 = v121 - v161;
      if (v121 <= v161)
        goto LABEL_204;
LABEL_154:
      std::vector<operations_research::sat::Literal>::__append((uint64_t)&v282, v127);
      v95 = v282;
      v99 = v283;
LABEL_206:
      v162 = *v251;
      v163 = v99 - v95;
      if (!operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((_QWORD *)v246 + 2), v251, v95, v163))
        goto LABEL_257;
      v242 = v242 - v163 + v162;
      v164 = *v251;
      if ((_DWORD)v164)
      {
        v165 = (v164 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v2 = v246;
        if (v165 >= 3)
        {
          v167 = v165 + 1;
          v168 = (v165 + 1) & 0x7FFFFFFFFFFFFFFCLL;
          v166 = &v247[v168];
          v169 = (int32x2_t *)(v251 + 3);
          v170 = 0uLL;
          v171 = v168;
          v172 = 0uLL;
          do
          {
            v173 = v169[-1];
            v174 = vshr_n_s32(v173, 1uLL);
            v175 = vshr_n_s32(*v169, 1uLL);
            v176 = vsub_s32(v174, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v174, (uint32x2_t)vcltz_s32(v173), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
            v177 = vsub_s32(v175, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v175, (uint32x2_t)vcltz_s32(*v169), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
            v178.i64[0] = v176.u32[0];
            v178.i64[1] = v176.u32[1];
            v179 = v178;
            v178.i64[0] = v177.u32[0];
            v178.i64[1] = v177.u32[1];
            v180 = (uint64x2_t)vdupq_n_s64(1uLL);
            v170 = vorrq_s8((int8x16_t)vshlq_u64(v180, v179), v170);
            v172 = vorrq_s8((int8x16_t)vshlq_u64(v180, v178), v172);
            v169 += 2;
            v171 -= 4;
          }
          while (v171);
          v181 = vorrq_s8(v172, v170);
          v32 = vorr_s8(*(int8x8_t *)v181.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL));
          if (v167 != v168)
            goto LABEL_214;
        }
        else
        {
          v32 = 0;
          v166 = v251 + 1;
LABEL_214:
          v182 = &v247[v164];
          do
          {
            v183 = *v166++;
            v184 = -(v183 >> 1) & 0x3F;
            v185 = (v183 >> 1) & 0x3F;
            if (v183 >> 1 <= 0)
              v185 = -v184;
            *(_QWORD *)&v32 |= 1 << v185;
          }
          while (v166 != v182);
        }
LABEL_218:
        v186 = 0;
        v187 = (_QWORD *)*((_QWORD *)v2 + 2);
        v188 = (unint64_t)v251
             + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v251)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + (_QWORD)v251)));
        v189 = ((v188 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v188);
        v190 = v187[42];
        v191 = v187[43];
        v192 = (v189 >> 7) ^ (v190 >> 12);
        v193 = v187[45];
        v194 = 0x101010101010101 * (v189 & 0x7F);
        while (1)
        {
          v195 = v192 & v193;
          v196 = *(_QWORD *)(v190 + v195);
          v197 = ((v196 ^ v194) - 0x101010101010101) & ~(v196 ^ v194) & 0x8080808080808080;
          if (v197)
            break;
LABEL_222:
          if ((v196 & (~v196 << 6) & 0x8080808080808080) != 0)
            goto LABEL_225;
          v186 += 8;
          v192 = v186 + v195;
        }
        while (1)
        {
          v198 = (v195 + (__clz(__rbit64(v197)) >> 3)) & v193;
          if (*(int **)(v191 + 24 * v198) == v251)
            break;
          v197 &= v197 - 1;
          if (!v197)
            goto LABEL_222;
        }
        if (v198 == v193)
        {
LABEL_225:
          v199 = *v251;
          v200 = (char *)v267;
          if ((_DWORD)v199)
          {
            v201 = 4 * v199;
            v202 = 0x7FFFFFFF;
            v203 = -1;
            v204 = v251 + 1;
            do
            {
              v206 = *v204++;
              v205 = v206;
              v207 = *((_QWORD *)v267 + 4 * v206) >> 1;
              if (v207 < v202)
              {
                v202 = v207;
                v203 = v205;
              }
              v201 -= 4;
            }
            while (v201);
          }
          else
          {
            v203 = -1;
          }
          v208 = v19;
          v17[v248] = v32;
          v209 = &v200[32 * v203];
          v211 = v209 + 8;
          v210 = *(_QWORD *)v209;
          if ((*(_QWORD *)v209 & 1) != 0)
          {
            v211 = (char *)*((_QWORD *)v209 + 1);
            v212 = *((_QWORD *)v209 + 2);
            v213 = v210 >> 1;
            v120 = v248;
            if (v210 >> 1 == v212)
              goto LABEL_237;
          }
          else
          {
            v212 = 6;
            v213 = v210 >> 1;
            v120 = v248;
            if (v210 >> 1 == 6)
            {
LABEL_237:
              if (((v212 >> 61) & 3) != 0)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v214 = (char *)operator new(8 * v212);
              v215 = v214;
              *(_DWORD *)&v214[4 * v212] = v248;
              if (v210 >= 2)
              {
                v216 = 0;
                if (v212 < 8 || (unint64_t)(v214 - v211) < 0x20)
                {
                  v217 = v211;
                }
                else
                {
                  v216 = v212 & 0xFFFFFFFFFFFFFFF8;
                  v217 = &v211[4 * (v212 & 0xFFFFFFFFFFFFFFF8)];
                  v218 = v214 + 16;
                  v219 = (__int128 *)(v211 + 16);
                  v220 = v212 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v221 = *v219;
                    *(v218 - 1) = *(v219 - 1);
                    *v218 = v221;
                    v218 += 2;
                    v219 += 2;
                    v220 -= 8;
                  }
                  while (v220);
                  if (v212 == v216)
                    goto LABEL_248;
                }
                v222 = v212 - v216;
                v223 = &v214[4 * v216];
                do
                {
                  v224 = *(_DWORD *)v217;
                  v217 += 4;
                  *(_DWORD *)v223 = v224;
                  v223 += 4;
                  --v222;
                }
                while (v222);
              }
LABEL_248:
              if ((v210 & 1) != 0)
              {
                operator delete(*((void **)v209 + 1));
                v210 = *(_QWORD *)v209;
              }
              *((_QWORD *)v209 + 1) = v215;
              *((_QWORD *)v209 + 2) = 2 * v212;
              v210 |= 1uLL;
              v120 = v248;
LABEL_16:
              *(_QWORD *)v209 = v210 + 2;
              v2 = v246;
              v19 = v208;
              goto LABEL_17;
            }
          }
          *(_DWORD *)&v211[4 * v213] = v120;
          goto LABEL_16;
        }
        v120 = v248;
      }
      else
      {
        v2 = v246;
        v120 = v248;
      }
LABEL_17:
      v18 = v120 + 1;
      if (v241 <= v18)
        goto LABEL_252;
    }
  }
  v17 = 0;
  v19 = 0;
  v252 = 0;
  __p = 0;
  v262 = 0;
  v263 = 0;
LABEL_252:
  if ((operations_research::sat::Inprocessing::LevelZeroPropagate(v2) & 1) == 0)
  {
LABEL_257:
    v230 = 0;
    v231 = (char *)__p;
    if (!__p)
      goto LABEL_259;
    goto LABEL_258;
  }
  *(double *)(*((_QWORD *)v2 + 4) + 112) = (double)v19 * 0.000000005
                                           + (double)v252 * 0.00000001
                                           + *(double *)(*((_QWORD *)v2 + 4) + 112);
  if (a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v258, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 564);
    v225 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v258);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)"Subsume. num_removed_literals: ", 31);
    v226 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)" num_subsumed: ", 15);
    v227 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)" dtime: ", 8);
    v228 = (_QWORD *)std::ostream::operator<<();
    v229 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v229);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v258);
  }
  v230 = 1;
  v231 = (char *)__p;
  if (__p)
  {
LABEL_258:
    v262 = v231;
    operator delete(v231);
  }
LABEL_259:
  if (v17)
  {
    v265 = v17;
    operator delete(v17);
  }
  v232 = (void **)v267;
  if (v267)
  {
    v233 = v268;
    v234 = v267;
    if (v268 != v267)
    {
      v235 = v268;
      do
      {
        v236 = *((_BYTE *)v235 - 32);
        v235 -= 4;
        if ((v236 & 1) != 0)
          operator delete(*(v233 - 3));
        v233 = v235;
      }
      while (v235 != v232);
      v234 = v267;
    }
    v268 = v232;
    operator delete(v234);
  }
  if (v276)
  {
    v277 = (char *)v276;
    operator delete(v276);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v279)
    operator delete(v279);
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  return v230;
}

void sub_22DBDD61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a29);
}

void sub_22DBDD624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void **a39,void **a40)
{
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void **v46;
  void **v47;
  void **v48;
  char v49;

  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  if (a39)
  {
    v46 = a40;
    v47 = a39;
    if (a40 != a39)
    {
      v48 = a40;
      do
      {
        v49 = *((_BYTE *)v48 - 32);
        v48 -= 4;
        if ((v49 & 1) != 0)
          operator delete(*(v46 - 3));
        v46 = v48;
      }
      while (v48 != a39);
      v47 = a39;
    }
    operator delete(v47);
    v42 = *(void **)(v40 - 176);
    if (!v42)
    {
LABEL_7:
      v43 = *(void **)(v40 - 224);
      if (!v43)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else
  {
    v42 = *(void **)(v40 - 176);
    if (!v42)
      goto LABEL_7;
  }
  *(_QWORD *)(v40 - 168) = v42;
  operator delete(v42);
  v43 = *(void **)(v40 - 224);
  if (!v43)
  {
LABEL_8:
    v44 = *(void **)(v40 - 152);
    if (!v44)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_21:
  *(_QWORD *)(v40 - 216) = v43;
  operator delete(v43);
  v44 = *(void **)(v40 - 152);
  if (!v44)
  {
LABEL_10:
    v45 = *(void **)(v40 - 128);
    if (v45)
    {
      *(_QWORD *)(v40 - 120) = v45;
      operator delete(v45);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  operator delete(v44);
  goto LABEL_10;
}

void operations_research::sat::BlockedClauseSimplifier::DoOneRound(int64x2_t *this, int a2)
{
  absl::lts_2020_02_25 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v9;
  absl::lts_2020_02_25 *v10;
  double v11;
  double v12;
  void **v13;
  unint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  double v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  absl::lts_2020_02_25 *v25;
  _BYTE v26[16];

  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  this[2].i64[1] = 0;
  this[3].i32[0] = 0;
  this[3].i64[1] = 0;
  operations_research::sat::BlockedClauseSimplifier::InitializeForNewRound((operations_research::sat::BlockedClauseSimplifier *)this);
  while (1)
  {
    v5 = this[2].i64[0];
    v6 = *(unsigned __int8 **)(v5 + 120);
    if (v6)
    {
      v7 = atomic_load(v6);
      if ((v7 & 1) != 0)
        break;
    }
    if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0)
      break;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v4);
    if (*(_QWORD *)(v5 + 24) <= CurrentTimeNanos - *(_QWORD *)(v5 + 8))
      v9 = CurrentTimeNanos - *(_QWORD *)(v5 + 8);
    else
      v9 = *(_QWORD *)(v5 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v5 + 32), v9);
    *(_QWORD *)(v5 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v5 + 16))
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_19;
      v11 = *(double *)(v5 + 96);
      if (*(_BYTE *)(v5 + 72))
      {
        v12 = v11
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v10) - *(_QWORD *)(v5 + 80) + *(_QWORD *)(v5 + 88))
            * -0.000000001;
        if (v12 <= 0.0001)
          goto LABEL_19;
      }
      else
      {
        v12 = v11 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
        if (v12 <= 0.0001)
        {
LABEL_19:
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
      }
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 8) + (uint64_t)(v12 * 1000000000.0);
    }
    if (!this[9].i64[1])
      break;
    v13 = (void **)this[7].i64[1];
    v14 = (*(int **)((char *)v13 + (((unint64_t)this[9].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8)))[this[9].i64[0] & 0x3FF];
    *(_QWORD *)(this[5].i64[1] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v14);
    v15 = vaddq_s64(this[9], (int64x2_t)xmmword_22DCE5B10);
    this[9] = v15;
    if (v15.i64[0] >= 0x800uLL)
    {
      operator delete(*v13);
      this[7].i64[1] += 8;
      this[9].i64[0] -= 1024;
    }
    operations_research::sat::BlockedClauseSimplifier::ProcessLiteral((uint64_t)this, v14);
  }
  v17 = this[11].i64[1];
  v16 = this[12].i64[0];
  if (v16 != v17)
  {
    v18 = this[12].i64[0];
    do
    {
      v20 = *(void **)(v18 - 24);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *(_QWORD *)(v16 - 16) = v19;
        operator delete(v19);
      }
      v16 = v18;
    }
    while (v18 != v17);
  }
  this[12].i64[0] = v17;
  v21 = *(double *)&this[2].i64[1] + (double)this[3].i64[1] * 0.00000001;
  *(double *)&this[2].i64[1] = v21;
  *(double *)(this[2].i64[0] + 112) = v21 + *(double *)(this[2].i64[0] + 112);
  if (*operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__[0] >= 1)
  {
    if (operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__[0] == &google::kLogSiteUninitialized)
    {
      if (!(google::InitVLOG3__((google *)operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2))return;
    }
    else if (!(a2 | 1))
    {
      return;
    }
LABEL_32:
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 910);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Blocked clause. num_blocked_clauses: ", 37);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" dtime: ", 8);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v25);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
    return;
  }
  if (a2)
    goto LABEL_32;
}

void sub_22DBDDB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BoundedVariableElimination::DoOneRound(operations_research::sat::BoundedVariableElimination *this, int a2)
{
  operations_research::sat::BoundedVariableElimination *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::vector<int>::size_type v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _DWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  absl::lts_2020_02_25 *updated;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 v80;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v82;
  absl::lts_2020_02_25 *v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int *v99;
  int *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v104;
  int **v105;
  int **i;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  double v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  absl::lts_2020_02_25 *v138;
  int v140;
  unint64_t v141;
  operations_research::sat::BoundedVariableElimination *v142;
  _QWORD *v143;
  int *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  std::vector<int>::value_type __u[4];

  v2 = this;
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 37) = *((_QWORD *)v2 + 36);
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2 + 3));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)v2 + 3));
  v3 = *((_QWORD *)v2 + 3);
  v4 = *(uint64_t **)(v3 + 304);
  v5 = *(uint64_t **)(v3 + 312);
  if (v4 != v5)
  {
    do
    {
      v10 = 0;
      v12 = *v4;
      *(_QWORD *)__u = v12;
      v13 = (_QWORD *)*((_QWORD *)v2 + 3);
      v14 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v12)))
          + v12;
      v15 = ((v14 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v14);
      v16 = v13[42];
      v17 = v13[43];
      v11 = (v15 >> 7) ^ (v16 >> 12);
      v18 = v13[45];
      v19 = 0x101010101010101 * (v15 & 0x7F);
      while (1)
      {
        v6 = v11 & v18;
        v7 = *(_QWORD *)(v16 + v6);
        v8 = ((v7 ^ v19) - 0x101010101010101) & ~(v7 ^ v19) & 0x8080808080808080;
        if (v8)
          break;
LABEL_6:
        if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0)
          goto LABEL_9;
        v10 += 8;
        v11 = v10 + v6;
      }
      while (1)
      {
        v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v18;
        if (*(_QWORD *)(v17 + 24 * v9) == v12)
          break;
        v8 &= v8 - 1;
        if (!v8)
          goto LABEL_6;
      }
      if (v9 == v18)
LABEL_9:
        gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back((void **)v2 + 36, __u);
      ++v4;
    }
    while (v4 != v5);
    v3 = *((_QWORD *)v2 + 3);
  }
  v20 = *(int *)(v3 + 88);
  if ((v20 & 0x80000000) == 0)
    v21 = *(_DWORD *)(v3 + 88);
  else
    v21 = v20 + 1;
  v140 = v21;
  v22 = (uint64_t *)((char *)v2 + 312);
  v24 = *((_QWORD *)v2 + 39);
  v23 = *((_QWORD *)v2 + 40);
  if (v23 != v24)
  {
    v25 = *((_QWORD *)v2 + 40);
    do
    {
      v27 = *(void **)(v25 - 24);
      v25 -= 24;
      v26 = v27;
      if (v27)
      {
        *(_QWORD *)(v23 - 16) = v26;
        operator delete(v26);
      }
      v23 = v25;
    }
    while (v25 != v24);
    v23 = *v22;
  }
  *((_QWORD *)v2 + 40) = v24;
  v28 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
  if (v20 <= v28)
  {
    if (v20 < v28)
    {
      v29 = v23 + 24 * (int)v20;
      if (v24 != v29)
      {
        v30 = v24;
        do
        {
          v32 = *(void **)(v30 - 24);
          v30 -= 24;
          v31 = v32;
          if (v32)
          {
            *(_QWORD *)(v24 - 16) = v31;
            operator delete(v31);
          }
          v24 = v30;
        }
        while (v30 != v29);
      }
      *((_QWORD *)v2 + 40) = v29;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v2 + 312, v20 - v28);
  }
  v33 = (_QWORD *)((char *)v2 + 336);
  __u[0] = 0;
  v141 = v20;
  std::vector<int>::assign((std::vector<int> *)v2 + 14, v20, __u);
  v34 = *((_QWORD *)v2 + 36);
  v35 = *((_QWORD *)v2 + 37);
  v142 = v2;
  if ((int)((unint64_t)(v35 - v34) >> 3) >= 1)
  {
    v36 = 0;
    v143 = (_QWORD *)((char *)v2 + 336);
    while (1)
    {
      v38 = *(int **)(v34 + 8 * v36);
      v40 = *v38;
      v39 = v38 + 1;
      v37 = v40;
      if ((_DWORD)v40)
        break;
LABEL_34:
      *((_QWORD *)v2 + 9) += (int)v37;
      if (++v36 >= (int)((unint64_t)(v35 - v34) >> 3))
        goto LABEL_59;
    }
    v41 = &v39[v37];
    v144 = v41;
    v145 = v36;
    while (1)
    {
      v43 = *v39;
      v44 = *v22 + 24 * (int)v43;
      v46 = (uint64_t *)(v44 + 8);
      v45 = *(char **)(v44 + 8);
      v47 = *(_QWORD *)(v44 + 16);
      if ((unint64_t)v45 >= v47)
        break;
      *(_DWORD *)v45 = v36;
      v42 = (uint64_t)(v45 + 4);
LABEL_38:
      *v46 = v42;
      ++*(_DWORD *)(*v33 + 4 * v43);
      if (++v39 == v41)
      {
        v2 = v142;
        v34 = *((_QWORD *)v142 + 36);
        v35 = *((_QWORD *)v142 + 37);
        LODWORD(v37) = **(_DWORD **)(v34 + 8 * v36);
        goto LABEL_34;
      }
    }
    v48 = *(char **)v44;
    v49 = (uint64_t)&v45[-*(_QWORD *)v44];
    v50 = v49 >> 2;
    v51 = (v49 >> 2) + 1;
    if (v51 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v52 = v47 - (_QWORD)v48;
    if (v52 >> 1 > v51)
      v51 = v52 >> 1;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    v146 = v51;
    v147 = *v39;
    if (v51)
    {
      if (v51 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v53 = operator new(4 * v51);
      v36 = v145;
      v54 = &v53[4 * v50];
      *v54 = v145;
      v42 = (uint64_t)(v54 + 1);
      if (v45 == v48)
        goto LABEL_56;
    }
    else
    {
      v53 = 0;
      v54 = (_DWORD *)(4 * v50);
      *(_DWORD *)(4 * v50) = v36;
      v42 = 4 * v50 + 4;
      if (v45 == v48)
      {
LABEL_56:
        *(_QWORD *)v44 = v54;
        *v46 = v42;
        *(_QWORD *)(v44 + 16) = &v53[4 * v146];
        if (v48)
        {
          operator delete(v48);
          v36 = v145;
        }
        v33 = v143;
        v41 = v144;
        v43 = v147;
        goto LABEL_38;
      }
    }
    v55 = v45 - 4 - v48;
    if (v55 < 0x2C)
      goto LABEL_150;
    if ((unint64_t)(v45 - &v53[v49]) < 0x20)
      goto LABEL_150;
    v56 = (v55 >> 2) + 1;
    v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    v58 = &v45[-v57];
    v54 = (_DWORD *)((char *)v54 - v57);
    v59 = &v53[4 * v50 - 16];
    v60 = v45 - 16;
    v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 8;
    }
    while (v61);
    v45 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_150:
      do
      {
        v63 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v54 = v63;
      }
      while (v45 != v48);
    }
    goto LABEL_56;
  }
LABEL_59:
  v64 = (v140 >> 1);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(*((_QWORD *)v2 + 5) + 12);
  *((_QWORD *)v2 + 34) = *((_QWORD *)v2 + 33);
  v65 = (_QWORD *)((char *)v2 + 240);
  std::vector<BOOL>::resize((uint64_t)v2 + 240, (int)v64, 0);
  v66 = *((_QWORD *)v2 + 24);
  v67 = (uint64_t *)((char *)v2 + 192);
  v68 = (*((_QWORD *)v2 + 25) - v66) >> 3;
  if ((int)v64 + 1 <= v68)
  {
    v69 = v141;
    if ((int)v64 + 1 < v68)
      *((_QWORD *)v142 + 25) = v66 + 8 * ((int)v64 + 1);
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)v2 + 24, (int)v64 + 1 - v68);
    v69 = v141;
  }
  v70 = *((_QWORD *)v142 + 27);
  v71 = *((_QWORD *)v142 + 28);
  v72 = (_QWORD *)((char *)v142 + 216);
  __u[0] = 0;
  v73 = (v71 - v70) >> 2;
  if ((int)v64 <= v73)
  {
    if ((int)v64 < v73)
      *((_QWORD *)v142 + 28) = v70 + 4 * (int)v64;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)v142 + 9, (int)v64 - v73, __u);
  }
  if (v69 >= 2)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v142 + 1) + 8)
                       + (((unint64_t)(v74 >> 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v75 & 0x3E)) & 3) == 0
        && ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v142 + 2) + 664) + ((v76 >> 2) & 0x3FFFFFFFFFFFFFF8)) >> (v75 & 0x3E)) & 1) == 0)
      {
        operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(v142, v76);
      }
      ++v76;
      v75 += 2;
      v74 += 0x200000000;
    }
    while (v64 != v76);
  }
  std::vector<BOOL>::resize((uint64_t)v142 + 136, v141, 0);
  v78 = *((_QWORD *)v142 + 6);
  v79 = *(unsigned __int8 **)(v78 + 120);
  if (!v79)
  {
    while (1)
    {
LABEL_75:
      if (fmax(*(double *)(v78 + 104) - *(double *)(v78 + 112), 0.0) <= 0.0)
        goto LABEL_119;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(updated);
      if (*(_QWORD *)(v78 + 24) <= CurrentTimeNanos - *(_QWORD *)(v78 + 8))
        v82 = CurrentTimeNanos - *(_QWORD *)(v78 + 8);
      else
        v82 = *(_QWORD *)(v78 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v78 + 32), v82);
      *(_QWORD *)(v78 + 8) = CurrentTimeNanos;
      if (*(_QWORD *)(*(_QWORD *)(v78 + 40) + 8 * *(int *)(v78 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v78 + 16))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_118;
        v84 = *(double *)(v78 + 96);
        if (*(_BYTE *)(v78 + 72))
        {
          v85 = v84
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v83) - *(_QWORD *)(v78 + 80) + *(_QWORD *)(v78 + 88))
              * -0.000000001;
          if (v85 <= 0.0001)
            goto LABEL_118;
        }
        else
        {
          v85 = v84 + (double)*(uint64_t *)(v78 + 88) * -0.000000001;
          if (v85 <= 0.0001)
          {
LABEL_118:
            *(_QWORD *)(v78 + 16) = 0;
            goto LABEL_119;
          }
        }
        *(_QWORD *)(v78 + 16) = *(_QWORD *)(v78 + 8) + (uint64_t)(v85 * 1000000000.0);
      }
      if (!*((_DWORD *)v142 + 46))
        goto LABEL_119;
      v86 = *((_QWORD *)v142 + 24);
      v87 = *(_QWORD *)(v86 + 8);
      *(_DWORD *)(*((_QWORD *)v142 + 27) + 4 * (int)v87) = 0;
      v88 = *((unsigned int *)v142 + 46);
      *((_DWORD *)v142 + 46) = v88 - 1;
      if ((int)v88 >= 2)
        break;
LABEL_102:
      LOBYTE(__u[0]) = 0;
      if (!operations_research::sat::BoundedVariableElimination::Propagate(v142))
        return 0;
      v98 = v87;
      while (operations_research::sat::BinaryImplicationGraph::FindFailedLiteralAroundVar(*((_QWORD *)v142 + 2), v87, __u))
      {
        if (!operations_research::sat::BoundedVariableElimination::Propagate(v142))
          return 0;
      }
      if (LOBYTE(__u[0]))
        return 0;
      updated = (absl::lts_2020_02_25 *)operations_research::sat::BoundedVariableElimination::CrossProduct((uint64_t)v142, v87);
      if (!(_DWORD)updated)
        return 0;
      v99 = (int *)*((_QWORD *)v142 + 33);
      v100 = (int *)*((_QWORD *)v142 + 34);
      if (v99 == v100)
      {
        *((_QWORD *)v142 + 31) = 0;
        *((_QWORD *)v142 + 34) = v99;
        v78 = *((_QWORD *)v142 + 6);
        v79 = *(unsigned __int8 **)(v78 + 120);
        if (v79)
          goto LABEL_74;
      }
      else
      {
        do
        {
          v101 = *v99;
          *(_QWORD *)(*v65 + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          if ((_DWORD)v101 != v98)
            updated = (absl::lts_2020_02_25 *)operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(v142, v101);
          ++v99;
        }
        while (v99 != v100);
        v102 = *((_QWORD *)v142 + 33);
        *((_QWORD *)v142 + 31) = 0;
        *((_QWORD *)v142 + 34) = v102;
        v78 = *((_QWORD *)v142 + 6);
        v79 = *(unsigned __int8 **)(v78 + 120);
        if (v79)
          goto LABEL_74;
      }
    }
    v89 = *(_QWORD *)(v86 + 8 * v88);
    if (v88 >= 4)
    {
      v92 = 1;
      v90 = 2;
      v93 = 3;
      do
      {
        v86 = *v67;
        v95 = *(_QWORD *)(*v67 + 8 * v90);
        v96 = HIDWORD(v95);
        v94 = *(_QWORD *)(*v67 + 8 * v93);
        if (SHIDWORD(v95) >= SHIDWORD(v94))
        {
          v94 = *(_QWORD *)(*v67 + 8 * v90);
          v91 = v90;
          if (SHIDWORD(v89) >= (int)v96)
            goto LABEL_96;
        }
        else
        {
          v91 = v93;
          if (SHIDWORD(v89) >= SHIDWORD(v94))
          {
LABEL_96:
            v90 = v92;
            goto LABEL_101;
          }
        }
        *(_QWORD *)(v86 + 8 * v92) = v94;
        *(_DWORD *)(*v72 + 4 * (int)v94) = v92;
        v90 = 2 * v91;
        v93 = (2 * v91) | 1;
        v92 = v91;
      }
      while (v93 < (int)v88);
      v86 = *v67;
      if (v90 >= (int)v88)
        goto LABEL_100;
    }
    else
    {
      v90 = 2;
      v91 = 1;
      if ((int)v88 <= 2)
        goto LABEL_100;
    }
    v97 = *(_QWORD *)(v86 + 8 * v90);
    if (SHIDWORD(v89) < SHIDWORD(v97))
    {
      *(_QWORD *)(v86 + 8 * v91) = v97;
      *(_DWORD *)(*v72 + 4 * (int)v97) = v91;
      v86 = *v67;
LABEL_101:
      *(_QWORD *)(v86 + 8 * v90) = v89;
      *(_DWORD *)(*v72 + 4 * (int)v89) = v90;
      goto LABEL_102;
    }
LABEL_100:
    v90 = v91;
    goto LABEL_101;
  }
LABEL_74:
  v80 = atomic_load(v79);
  if ((v80 & 1) == 0)
    goto LABEL_75;
LABEL_119:
  operations_research::sat::BinaryImplicationGraph::CleanupAllRemovedVariables(*((operations_research::sat::BinaryImplicationGraph **)v142
                                                                               + 2));
  v104 = *((_QWORD *)v142 + 3);
  v105 = *(int ***)(v104 + 304);
  for (i = *(int ***)(v104 + 312); v105 != i; ++v105)
  {
    v111 = 0;
    v116 = *v105;
    v117 = (_QWORD *)*((_QWORD *)v142 + 3);
    v118 = (unint64_t)*v105
         + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v105)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + (_QWORD)*v105)));
    v119 = ((v118 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v118);
    v120 = v117[42];
    v112 = (v119 >> 7) ^ (v120 >> 12);
    v121 = v117[45];
    v122 = 0x101010101010101 * (v119 & 0x7F);
    while (1)
    {
      v107 = v112 & v121;
      v108 = *(_QWORD *)(v120 + v107);
      v109 = ((v108 ^ v122) - 0x101010101010101) & ~(v108 ^ v122) & 0x8080808080808080;
      if (v109)
        break;
LABEL_124:
      if ((v108 & (~v108 << 6) & 0x8080808080808080) != 0)
        goto LABEL_133;
      v111 += 8;
      v112 = v111 + v107;
    }
    while (1)
    {
      v110 = (v107 + (__clz(__rbit64(v109)) >> 3)) & v121;
      if (*(int **)(v117[43] + 24 * v110) == v116)
        break;
      v109 &= v109 - 1;
      if (!v109)
        goto LABEL_124;
    }
    if (v110 != v121)
    {
      v113 = *v116;
      if ((_DWORD)v113)
      {
        v114 = 0;
        v115 = 4 * v113;
        while (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v142 + 2) + 664)
                            + (((unint64_t)v116[v114 / 4 + 1] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116[v114 / 4 + 1]) & 1) == 0)
        {
          v114 += 4;
          if (v115 == v114)
            goto LABEL_133;
        }
        operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)v117, v116);
      }
    }
LABEL_133:
    ;
  }
  v124 = *((_QWORD *)v142 + 39);
  v123 = *((_QWORD *)v142 + 40);
  if (v123 != v124)
  {
    v125 = *((_QWORD *)v142 + 40);
    do
    {
      v127 = *(void **)(v125 - 24);
      v125 -= 24;
      v126 = v127;
      if (v127)
      {
        *(_QWORD *)(v123 - 16) = v126;
        operator delete(v126);
      }
      v123 = v125;
    }
    while (v125 != v124);
  }
  *((_QWORD *)v142 + 40) = v124;
  *((_QWORD *)v142 + 43) = *((_QWORD *)v142 + 42);
  v128 = *((double *)v142 + 8) + (double)*((uint64_t *)v142 + 9) * 0.00000001;
  *((double *)v142 + 8) = v128;
  *(double *)(*((_QWORD *)v142 + 6) + 112) = v128 + *(double *)(*((_QWORD *)v142 + 6) + 112);
  if (*operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__[0] > 0
    && (operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1))|| a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1179);
    v129 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__u);
    v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"BVE.", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" num_fixed: ", 12);
    v131 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" num_simplified_literals: ", 26);
    v132 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" num_blocked_clauses_: ", 23);
    v133 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)" num_eliminations: ", 19);
    v134 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)" num_literals_diff: ", 20);
    v135 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" num_clause_diff: ", 18);
    v136 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)" dtime: ", 8);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v138);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__u);
  }
  return 1;
}

void sub_22DBDE754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BinaryImplicationGraph::num_redundant_literals(operations_research::sat::BinaryImplicationGraph *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4[2];
  int v5;
  uint64_t *v6;

  result = *((_QWORD *)this + 39);
  v3 = result & 1;
  if (result < 0)
    v3 = -v3;
  v4[0] = v3;
  v5 = 0;
  if (v3)
  {
    v6 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v4, (int)&v5, "num_redundant_literals_ % 2 == 0");
    if (v6)
    {
      google::LogMessageFatal::LogMessageFatal(v4, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 607, &v6);
      google::LogMessage::stream((google::LogMessage *)v4);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v4);
    }
    return *((_QWORD *)this + 39);
  }
  return result;
}

void sub_22DBDE800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::Inprocessing::InprocessingRound(operations_research::sat::Inprocessing *this)
{
  int v2;
  double v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  absl::lts_2020_02_25 *v23;
  _QWORD *v24;
  absl::lts_2020_02_25 *v25;
  _BYTE v26[16];

  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  if (*operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__[0] < 1)
    v2 = 0;
  else
    v2 = operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__[0] != &google::kLogSiteUninitialized
      || google::InitVLOG3__((google *)operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
  v3 = *(double *)(*((_QWORD *)this + 4) + 112);
  if (*((double *)this + 9) > v3 * 0.1)
    return 1;
  v5 = *((_QWORD *)this + 3);
  std::vector<BOOL>::resize((uint64_t)this + 80, (uint64_t)(*(_QWORD *)(v5 + 128) - *(_QWORD *)(v5 + 120)) >> 3, 0);
  v6 = *(char **)(v5 + 120);
  v7 = *(_QWORD *)(v5 + 128) - (_QWORD)v6;
  if ((int)(v7 >> 3) >= 1)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 10);
    v10 = (v7 >> 3);
    do
    {
      while (1)
      {
        v11 = v8 >> 6;
        v12 = 1 << v8;
        v13 = *v6;
        v6 += 8;
        if ((v13 & 1) != 0)
          break;
        *(_QWORD *)(v9 + 8 * v11) &= ~v12;
        if (v10 == ++v8)
          goto LABEL_13;
      }
      *(_QWORD *)(v9 + 8 * v11) |= v12;
      ++v8;
    }
    while (v10 != v8);
  }
LABEL_13:
  result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(this, 1, v2);
  if ((_DWORD)result)
  {
    result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
    if ((_DWORD)result)
    {
      result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
      if ((_DWORD)result)
      {
        absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        v14 = v2 ? 0x101010101 : 16843009;
        result = operations_research::sat::FailedLiteralProbingRound((absl::lts_2020_02_25 *)0x4014000000000000, v14, *((_QWORD *)this + 13));
        if ((_DWORD)result)
        {
          absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
          result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(this, 1, v2);
          if ((_DWORD)result)
          {
            result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
            if ((_DWORD)result)
            {
              result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
              if ((_DWORD)result)
              {
                result = operations_research::sat::StampingSimplifier::DoOneRound(*((operations_research::sat::BinaryImplicationGraph ***)this + 6), v2);
                if ((_DWORD)result)
                {
                  result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
                  if ((_DWORD)result)
                  {
                    result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                    if ((_DWORD)result)
                    {
                      operations_research::sat::SatSolver::MinimizeSomeClauses(*((operations_research::sat::SatSolver **)this + 5), 1000);
                      result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                      if ((_DWORD)result)
                      {
                        result = operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(this, v2);
                        if ((_DWORD)result)
                        {
                          result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
                          if ((_DWORD)result)
                          {
                            operations_research::sat::BlockedClauseSimplifier::DoOneRound(*((int64x2_t **)this + 7), v2);
                            result = operations_research::sat::BoundedVariableElimination::DoOneRound(*((operations_research::sat::BoundedVariableElimination **)this + 8), v2);
                            if ((_DWORD)result)
                            {
                              result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                              if ((_DWORD)result)
                              {
                                *((double *)this + 9) = *((double *)this + 9)
                                                      + *(double *)(*((_QWORD *)this + 4) + 112)
                                                      - v3;
                                google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 190);
                                v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
                                v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Presolve.", 9);
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" num_fixed: ", 12);
                                v17 = (_QWORD *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" num_redundant: ", 16);
                                operations_research::sat::BinaryImplicationGraph::num_redundant_literals(*((operations_research::sat::BinaryImplicationGraph **)this + 1));
                                v18 = (_QWORD *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
                                v19 = (_QWORD *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" num_implications: ", 19);
                                v20 = (_QWORD *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" num_watched_clauses: ", 22);
                                v21 = (_QWORD *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" dtime: ", 8);
                                v22 = (_QWORD *)std::ostream::operator<<();
                                v23 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" wtime: ", 8);
                                absl::lts_2020_02_25::GetCurrentTimeNanos(v23);
                                v24 = (_QWORD *)std::ostream::operator<<();
                                v25 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" non-probing time: ", 19);
                                absl::lts_2020_02_25::GetCurrentTimeNanos(v25);
                                std::ostream::operator<<();
                                google::LogMessage::~LogMessage((google::LogMessage *)v26);
                                operations_research::sat::Trail::RestorePolarities(*((_QWORD *)this + 3), (uint64_t)this + 80);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_22DBDEC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Trail::RestorePolarities(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (*(int *)(a2 + 8) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(result + 120) + v2) = *(_DWORD *)(*(_QWORD *)(result + 120) + v2) & 0xFFFFFFFE | (*(_QWORD *)(*(_QWORD *)a2 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1;
      ++v3;
      v2 += 8;
    }
    while ((uint64_t)v3 < *(int *)(a2 + 8));
  }
  return result;
}

BOOL operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(operations_research::sat::BinaryImplicationGraph **this, int a2)
{
  operations_research::sat::BinaryImplicationGraph *v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  absl::lts_2020_02_25 *v10;
  _BYTE v11[16];

  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  this[6] = 0;
  this[9] = 0;
  v4 = this[1];
  if (*((_QWORD *)v4 + 25) == *((_QWORD *)v4 + 24))
    return 1;
  if (!*((_QWORD *)v4 + 27))
    return 1;
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((uint64_t)v4);
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this[1], a2))
    return 1;
  operations_research::sat::StampingSimplifier::SampleTreeAndFillParent((operations_research::sat::StampingSimplifier *)this);
  result = operations_research::sat::StampingSimplifier::ComputeStamps((operations_research::sat::StampingSimplifier *)this);
  if (!result)
    return result;
  *((_BYTE *)this + 40) = 1;
  *((double *)this[4] + 14) = *((double *)this + 6) + *((double *)this[4] + 14);
  if (*operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__[0] < 1)
  {
    if (!a2)
      return 1;
    goto LABEL_12;
  }
  if (operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized)
  {
    if (!(a2 | 1))
      return 1;
    goto LABEL_12;
  }
  if (google::InitVLOG3__((google *)operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2)
  {
LABEL_12:
    google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 626);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Prestamping.", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" num_fixed: ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" dtime: ", 8);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v10);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v11);
  }
  return 1;
}

void sub_22DBDEE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::StampingSimplifier::SampleTreeAndFillParent(operations_research::sat::StampingSimplifier *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  _BYTE *v12;
  void **v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v22;
  int v23[4];
  uint64_t v24;

  v1 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v1 + 512))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v23, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 634);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: implication_graph_->IsDag() ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v23);
  }
  v3 = *(_QWORD *)(v1 + 200) - *(_QWORD *)(v1 + 192);
  v4 = *((_QWORD *)this + 10);
  v5 = (_QWORD *)((char *)this + 80);
  v6 = (int)(v3 >> 5);
  v7 = (*((_QWORD *)this + 11) - v4) >> 2;
  if (v6 <= v7)
  {
    if (v6 < v7)
      *((_QWORD *)this + 11) = v4 + 4 * v6;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v6 - v7);
  }
  if ((int)((unint64_t)v3 >> 5) >= 1)
  {
    v8 = 0;
    v9 = ((unint64_t)v3 >> 5);
    do
    {
      *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v8) = v8;
      v10 = (_QWORD *)*((_QWORD *)this + 1);
      if (((*(_QWORD *)(v10[68] + 8 * (v8 >> 6)) >> v8) & 1) == 0
        && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8 * (v8 >> 6)) >> (v8 & 0x3E)) & 3) == 0)
      {
        v11 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v10, v8 ^ 1);
        v12 = *v11;
        if (*v11 != v11[1])
        {
          v13 = v11;
          v14 = 10;
          while (1)
          {
            v15 = (unint64_t)((_BYTE *)v13[1] - v12) >> 2;
            v16 = __OFSUB__((_DWORD)v15, 1);
            v17 = v15 - 1;
            if (v17 < 0 != v16)
            {
              v19 = 0;
            }
            else
            {
              v18 = *((_QWORD *)this + 3);
              LODWORD(v24) = 0;
              HIDWORD(v24) = v17;
              *(_QWORD *)v23 = v24;
              v19 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, v18, v23);
              v12 = *v13;
            }
            v20 = *(unsigned int *)&v12[4 * v19] ^ 1;
            if (v8 != v20
              && ((1 << v20) & *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 544)
                                           + (((unint64_t)*(int *)&v12[4 * v19] >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
            {
              break;
            }
            if (!--v14)
              goto LABEL_9;
          }
          *(_DWORD *)(*v5 + 4 * v8) = v20;
        }
      }
LABEL_9:
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_22DBDEFF4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::StampingSimplifier::ComputeStamps(operations_research::sat::StampingSimplifier *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  int32x4_t *v29;
  int32x4_t *v30;
  unint64_t v31;
  int32x4_t v32;
  _DWORD *v33;
  int *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _DWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  unint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  BOOL v98;
  uint64_t v99;
  std::vector<int>::size_type v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  void **v105;
  char v106;
  std::vector<int>::value_type __u;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 200) - *(_QWORD *)(*((_QWORD *)this + 1) + 192);
  v3 = v2 >> 5;
  v4 = (unint64_t *)((char *)this + 104);
  __u = 0;
  v100 = (int)((uint64_t)v2 >> 5);
  std::vector<int>::assign((std::vector<int> *)((char *)this + 104), v100, &__u);
  v5 = (v2 >> 5);
  if ((int)(v2 >> 5) >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 10);
    do
    {
      v8 = *(unsigned int *)(v7 + 4 * v6);
      if (v6 != v8)
        ++*(_DWORD *)(*v4 + 4 * (int)v8);
      ++v6;
    }
    while (v5 != v6);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 16);
  v10 = (unint64_t *)((char *)this + 128);
  v11 = (uint64_t)((v2 << 27) + 0x100000000) >> 32;
  v12 = (uint64_t)(*((_QWORD *)this + 17) - (_QWORD)v9) >> 2;
  if (v11 <= v12)
  {
    if (v11 < v12)
      *((_QWORD *)this + 17) = &v9[v11];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 128), v11 - v12);
    v9 = (_DWORD *)*v10;
  }
  *v9 = 0;
  if ((int)v3 >= 1)
  {
    v13 = 0;
    v14 = (int *)*v4;
    v15 = v9 + 1;
    v16 = (v3 + 1) - 1;
    do
    {
      v17 = *v14++;
      v13 += v17;
      *v15++ = v13;
      --v16;
    }
    while (v16);
  }
  v18 = *((_QWORD *)this + 19);
  v19 = (*((_QWORD *)this + 20) - v18) >> 2;
  if (v100 <= v19)
  {
    if (v100 < v19)
      *((_QWORD *)this + 20) = v18 + 4 * v100;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), v100 - v19);
  }
  if ((int)v3 < 1)
    goto LABEL_36;
  v20 = 0;
  v21 = *((_QWORD *)this + 10);
  do
  {
    v22 = *(unsigned int *)(v21 + 4 * v20);
    if (v20 != v22)
    {
      v23 = 4 * (int)v22;
      v24 = *(int *)(*v10 + v23);
      *(_DWORD *)(*v10 + v23) = v24 + 1;
      *(_DWORD *)(*((_QWORD *)this + 19) + 4 * v24) = v20;
    }
    ++v20;
  }
  while (v5 != v20);
  v25 = *v4;
  v26 = *v10;
  if (v5 >= 8 && (v26 < v25 + 4 * v5 ? (v27 = v25 >= v26 + 4 * v5) : (v27 = 1), v27))
  {
    v28 = v5 - (v2 >> 5);
    v29 = (int32x4_t *)(v25 + 16);
    v30 = (int32x4_t *)(v26 + 16);
    v31 = v28;
    do
    {
      v32 = vsubq_s32(*v30, *v29);
      v30[-1] = vsubq_s32(v30[-1], v29[-1]);
      *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (!(v2 >> 5))
      goto LABEL_36;
  }
  else
  {
    v28 = 0;
  }
  v33 = (_DWORD *)(v26 + 4 * v28);
  v34 = (int *)(v25 + 4 * v28);
  v35 = v28 - v5;
  do
  {
    v36 = *v34++;
    *v33++ -= v36;
    v27 = __CFADD__(v35++, 1);
  }
  while (!v27);
LABEL_36:
  v37 = *((_QWORD *)this + 28);
  v38 = (*((_QWORD *)this + 29) - v37) >> 2;
  if (v100 <= v38)
  {
    if (v100 < v38)
      *((_QWORD *)this + 29) = v37 + 4 * v100;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 224), v100 - v38);
  }
  v39 = *((_QWORD *)this + 31);
  v40 = (*((_QWORD *)this + 32) - v39) >> 2;
  if (v100 <= v40)
  {
    if (v100 < v40)
      *((_QWORD *)this + 32) = v39 + 4 * v100;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 248), v100 - v40);
  }
  v106 = 0;
  v104 = (uint64_t *)((char *)this + 176);
  std::vector<BOOL>::assign((char **)this + 22, v100, &v106);
  if ((int)v3 < 1)
    return 1;
  v101 = (_QWORD *)((char *)this + 128);
  v102 = (uint64_t *)((char *)this + 224);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v105 = (void **)((char *)this + 200);
  v99 = (v2 >> 5);
  while (1)
  {
    v103 = v41;
    if (v41 == *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v41))
      break;
LABEL_46:
    v41 = v103 + 1;
    v42 = v103 + 1 >= (uint64_t)v100;
    if (v103 + 1 == v99)
      return v42;
  }
  v98 = v42;
  v45 = (char *)*((_QWORD *)this + 26);
  v44 = *((_QWORD *)this + 27);
  if ((unint64_t)v45 < v44)
  {
    *(_DWORD *)v45 = v41;
    v46 = v45 + 4;
    goto LABEL_69;
  }
  v47 = (char *)*v105;
  v48 = v45 - (_BYTE *)*v105;
  v49 = v48 >> 2;
  v50 = (v48 >> 2) + 1;
  if (v50 >> 62)
LABEL_116:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v51 = v44 - (_QWORD)v47;
  if (v51 >> 1 > v50)
    v50 = v51 >> 1;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
    v52 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 >> 62)
LABEL_117:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v53 = operator new(4 * v52);
    v54 = &v53[4 * v49];
    *v54 = v103;
    v46 = (char *)(v54 + 1);
    if (v45 == v47)
      goto LABEL_67;
    goto LABEL_61;
  }
  v53 = 0;
  v54 = (_DWORD *)(4 * v49);
  *(_DWORD *)(4 * v49) = v41;
  v46 = (char *)(4 * v49 + 4);
  if (v45 != v47)
  {
LABEL_61:
    v55 = v45 - 4 - v47;
    if (v55 < 0x2C)
      goto LABEL_120;
    if ((unint64_t)(v45 - &v53[v48]) < 0x20)
      goto LABEL_120;
    v56 = (v55 >> 2) + 1;
    v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    v58 = &v45[-v57];
    v54 = (_DWORD *)((char *)v54 - v57);
    v59 = &v53[4 * v49 - 16];
    v60 = v45 - 16;
    v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 8;
    }
    while (v61);
    v45 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_120:
      do
      {
        v63 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v54 = v63;
      }
      while (v45 != v47);
    }
  }
LABEL_67:
  *((_QWORD *)this + 25) = v54;
  *((_QWORD *)this + 26) = v46;
  *((_QWORD *)this + 27) = &v53[4 * v52];
  if (v47)
    operator delete(v47);
LABEL_69:
  *((_QWORD *)this + 26) = v46;
  if (*((char **)this + 25) == v46)
    goto LABEL_46;
  v64 = (uint64_t)v46;
  while (1)
  {
    v65 = *(_DWORD *)(v64 - 4);
    v64 -= 4;
    v66 = v65;
    v67 = *v104;
    v68 = (unint64_t)v65 >> 6;
    v69 = 1 << v65;
    v70 = *(_QWORD *)(*v104 + 8 * v68);
    if (((1 << v65) & v70) == 0)
      break;
    *((_QWORD *)this + 26) = v64;
    *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v66) = v43;
LABEL_72:
    ++v43;
    v46 = (char *)v64;
    if (*v105 == (void *)v64)
      goto LABEL_46;
  }
  v71 = *v102;
  *(_DWORD *)(*v102 + 4 * v66) = v43;
  *(_QWORD *)(v67 + 8 * v68) = v69 | v70;
  v72 = v66 ^ 1;
  if (((*(_QWORD *)(v67 + (((unint64_t)(int)(v66 ^ 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v66 ^ 1u)) & 1) == 0)
    goto LABEL_82;
  v73 = *(_DWORD *)(v71 + 4 * v72);
  if (v73 < *(_DWORD *)(v71 + 4 * v103))
    goto LABEL_82;
  if (v73 < v43)
  {
    v74 = v66;
    do
    {
      v75 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v74);
      v74 = v75;
    }
    while (*(_DWORD *)(v71 + 4 * v75) > v73);
    v72 = v75 ^ 1;
  }
  ++*((_QWORD *)this + 9);
  if (operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*((_QWORD **)this + 2), v72))
  {
    v46 = (char *)*((_QWORD *)this + 26);
LABEL_82:
    v76 = *(_DWORD *)(*v101 + 4 * ((int)v66 + 1));
    v77 = *(int *)(*v101 + 4 * v66);
    if ((int)v77 >= v76)
    {
      v64 = (uint64_t)v46;
      goto LABEL_72;
    }
    while (2)
    {
      v78 = *((_QWORD *)this + 19);
      v79 = *((_QWORD *)this + 27);
      if ((unint64_t)v46 < v79)
      {
        *(_DWORD *)v46 = *(_DWORD *)(v78 + 4 * v77);
        v64 = (uint64_t)(v46 + 4);
      }
      else
      {
        v80 = (char *)*v105;
        v81 = v46 - (_BYTE *)*v105;
        v82 = v81 >> 2;
        v83 = (v81 >> 2) + 1;
        if (v83 >> 62)
          goto LABEL_116;
        v84 = v79 - (_QWORD)v80;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          if (v85 >> 62)
            goto LABEL_117;
          v86 = operator new(4 * v85);
          v87 = &v86[4 * v82];
          *v87 = *(_DWORD *)(v78 + 4 * v77);
          v64 = (uint64_t)(v87 + 1);
          if (v46 == v80)
            goto LABEL_101;
        }
        else
        {
          v86 = 0;
          v87 = (_DWORD *)(4 * v82);
          *(_DWORD *)(4 * v82) = *(_DWORD *)(v78 + 4 * v77);
          v64 = 4 * v82 + 4;
          if (v46 == v80)
            goto LABEL_101;
        }
        v88 = v46 - 4 - v80;
        if (v88 >= 0xBC)
        {
          if (&v86[v81 - 4 - (v88 & 0xFFFFFFFFFFFFFFFCLL)] > &v86[v81 - 4])
          {
            v89 = v46;
          }
          else if (&v46[-(v88 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4)
          {
            v89 = v46;
          }
          else if ((unint64_t)(v46 - &v86[v81]) >= 0x20)
          {
            v91 = (v88 >> 2) + 1;
            v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
            v89 = &v46[-v92];
            v87 = (_DWORD *)((char *)v87 - v92);
            v93 = &v86[4 * v82 - 16];
            v94 = v46 - 16;
            v95 = v91 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v96 = *(_OWORD *)v94;
              *(v93 - 1) = *((_OWORD *)v94 - 1);
              *v93 = v96;
              v93 -= 2;
              v94 -= 32;
              v95 -= 8;
            }
            while (v95);
            if (v91 == (v91 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_101;
          }
          else
          {
            v89 = v46;
          }
        }
        else
        {
          v89 = v46;
        }
        do
        {
          v90 = *((_DWORD *)v89 - 1);
          v89 -= 4;
          *--v87 = v90;
        }
        while (v89 != v80);
LABEL_101:
        *((_QWORD *)this + 25) = v87;
        *((_QWORD *)this + 26) = v64;
        *((_QWORD *)this + 27) = &v86[4 * v85];
        if (v80)
          operator delete(v80);
      }
      *((_QWORD *)this + 26) = v64;
      ++v77;
      v46 = (char *)v64;
      if (v76 == (_DWORD)v77)
        goto LABEL_72;
      continue;
    }
  }
  return v98;
}

uint64_t operations_research::sat::StampingSimplifier::ProcessClauses(operations_research::sat::LiteralWatchers **this)
{
  signed __int32 v1;
  operations_research::sat::LiteralWatchers *v3;
  __n128 *v4;
  int v5;
  int **v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  __n128 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;
  uint64_t v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __n128 *v31;
  int *v32;
  unint64_t v33;
  __n128 v34;
  int v35;
  __n128 *v36;
  unsigned __int32 v37;
  signed __int32 *v38;
  operations_research::sat::LiteralWatchers *v39;
  int v40;
  uint64_t v41;
  signed __int32 *v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  signed __int32 *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  signed __int32 *v61;
  signed __int32 *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  signed __int32 *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  signed __int32 *v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  signed __int32 *v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  signed __int32 *v93;
  _OWORD *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  int v102;
  char *v103;
  int v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int *v132;
  uint64_t v133;
  _BOOL4 v134;
  unsigned int v136;
  int **v137;
  unint64_t v138;
  int **v139;
  int *v140;
  int v141;
  int v142;
  int v143;
  signed __int32 v144;
  signed __int32 v145;
  int v146;
  int v147;
  char *v148;
  uint64_t v149;
  __n128 *v150;
  unint64_t v151[2];
  uint64_t *v152;
  void *__p;
  _BYTE *v154;
  char *v155;
  void *v156;
  char *v157;
  char *v158;
  unsigned __int32 v159;

  v156 = 0;
  v157 = 0;
  v158 = 0;
  __p = 0;
  v154 = 0;
  v155 = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(this[2]);
  operations_research::sat::LiteralWatchers::DetachAllClauses(this[2]);
  v3 = this[2];
  v136 = 1;
  v137 = (int **)*((_QWORD *)v3 + 39);
  if (*((int ***)v3 + 38) != v137)
  {
    v4 = 0;
    v150 = 0;
    v5 = 0;
    v6 = (int **)*((_QWORD *)v3 + 38);
    while (1)
    {
      v149 = (uint64_t)(*v6 + 1);
      if (!**v6)
        goto LABEL_4;
      v141 = v5;
      v144 = v1;
      v139 = v6;
      v140 = *v6;
      v7 = 0;
      v138 = **v6;
      v8 = **v6;
      v9 = v4;
      v10 = (uint64_t)(*v6 + 1);
      while (1)
      {
        v11 = *(_DWORD *)(v10 + 4 * v7);
        v12 = *(_QWORD *)(*((_QWORD *)*this + 1) + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v12 >> v11) & 1) != 0)
          break;
        if (((v12 >> (v11 & 0x3F ^ 1u)) & 1) != 0)
          goto LABEL_8;
        v13 = 4 * v11;
        v14 = *(_DWORD *)((char *)this[28] + v13);
        v15 = *(_DWORD *)((char *)this[31] + v13);
        if (v9 >= v150)
        {
          v17 = v9 - v4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v150 - (char *)v4) >> 3 > v18)
            v18 = ((char *)v150 - (char *)v4) >> 3;
          if ((unint64_t)((char *)v150 - (char *)v4) >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = (char *)operator new(16 * v19);
            v21 = (uint64_t)&v20[16 * v17];
            *(_DWORD *)v21 = v7;
            *(_BYTE *)(v21 + 4) = 0;
            *(_DWORD *)(v21 + 8) = v14;
            *(_DWORD *)(v21 + 12) = v15;
            if (v9 != v4)
            {
LABEL_22:
              v22 = v21;
              do
              {
                v23 = (__n128 *)(v22 - 16);
                *(__n128 *)(v22 - 16) = v9[-1];
                --v9;
                v22 -= 16;
              }
              while (v9 != v4);
              v150 = (__n128 *)&v20[16 * v19];
              v16 = (__n128 *)(v21 + 16);
              if (v4)
LABEL_25:
                operator delete(v4);
LABEL_26:
              v4 = v23;
              v10 = v149;
              goto LABEL_27;
            }
          }
          else
          {
            v20 = 0;
            v21 = 16 * v17;
            *(_DWORD *)v21 = v7;
            *(_BYTE *)(v21 + 4) = 0;
            *(_DWORD *)(v21 + 8) = v14;
            *(_DWORD *)(v21 + 12) = v15;
            if (v9 != v4)
              goto LABEL_22;
          }
          v23 = (__n128 *)v21;
          v150 = (__n128 *)&v20[16 * v19];
          v16 = (__n128 *)(v21 + 16);
          if (v4)
            goto LABEL_25;
          goto LABEL_26;
        }
        v9->n128_u32[0] = v7;
        v9->n128_u8[4] = 0;
        v16 = v9 + 1;
        v9->n128_u32[2] = v14;
        v9->n128_u32[3] = v15;
LABEL_27:
        v24 = 4 * (*(int *)(v10 + 4 * v7) ^ 1);
        v25 = *(_DWORD *)((char *)this[28] + v24);
        v26 = *(_DWORD *)((char *)this[31] + v24);
        if (v16 >= v150)
        {
          v27 = v16 - v4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v150 - (char *)v4) >> 3 > v28)
            v28 = ((char *)v150 - (char *)v4) >> 3;
          if ((unint64_t)((char *)v150 - (char *)v4) >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
          {
            if (v29 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v30 = (char *)operator new(16 * v29);
          }
          else
          {
            v30 = 0;
          }
          v31 = (__n128 *)&v30[16 * v27];
          v31->n128_u32[0] = v7;
          v31->n128_u8[4] = 1;
          v150 = (__n128 *)&v30[16 * v29];
          v31->n128_u32[2] = v25;
          v31->n128_u32[3] = v26;
          v9 = v31 + 1;
          if (v16 == v4)
          {
            v10 = v149;
          }
          else
          {
            v10 = v149;
            do
            {
              v31[-1] = v16[-1];
              --v31;
              --v16;
            }
            while (v16 != v4);
            if (!v4)
              goto LABEL_48;
          }
          operator delete(v4);
LABEL_48:
          v4 = v31;
          goto LABEL_8;
        }
        v16->n128_u32[0] = v7;
        v16->n128_u8[4] = 1;
        v9 = v16 + 1;
        v16->n128_u32[2] = v25;
        v16->n128_u32[3] = v26;
LABEL_8:
        if (++v7 == v8)
          goto LABEL_50;
      }
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v140);
LABEL_50:
      v32 = v140;
      if (!*v140)
      {
        v6 = v139;
        v5 = v141;
        v1 = v144;
        goto LABEL_4;
      }
      v5 = v141;
      v1 = v144;
      if (v4 == v9)
      {
        v157 = (char *)v156;
        goto LABEL_138;
      }
      v33 = v9 - v4;
      v34.n128_f64[0] = *((double *)this + 6) + (double)v33 * 0.000000015 * log((double)v33);
      this[6] = (operations_research::sat::LiteralWatchers *)v34.n128_u64[0];
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(v4, v9, 126 - 2 * __clz(v33), 1, v34);
      v157 = (char *)v156;
      v35 = -1;
      v36 = v4;
      while (2)
      {
        if ((signed __int32)v36->n128_u32[3] >= v35)
        {
          v1 = v36->n128_u32[0];
          v5 = v36->n128_u8[4];
          v35 = v36->n128_i32[3];
          goto LABEL_54;
        }
        if (v5 == v36->n128_u8[4])
        {
          v37 = v36->n128_u32[0];
          LODWORD(v151[0]) = v1;
          v159 = v37;
          if (v1 == v37)
          {
            v152 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v151, (int)&v159, "top_entry.i != e.i");
            if (v152)
            {
              google::LogMessageFatal::LogMessageFatal(v151, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 838, &v152);
              google::LogMessage::stream((google::LogMessage *)v151);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v151);
            }
          }
          v38 = (signed __int32 *)v157;
          if (v5)
          {
            if (v157 < v158)
            {
              *(_DWORD *)v157 = v36->n128_u32[0];
              v157 = (char *)(v38 + 1);
              goto LABEL_54;
            }
            v142 = v5;
            v146 = v35;
            v42 = (signed __int32 *)v156;
            v43 = v157 - (_BYTE *)v156;
            v44 = (v157 - (_BYTE *)v156) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              goto LABEL_209;
            v46 = v158 - (_BYTE *)v156;
            if ((v158 - (_BYTE *)v156) >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              if (v47 >> 62)
                goto LABEL_210;
              v48 = v47;
              v49 = operator new(4 * v47);
              v47 = v48;
              v50 = &v49[4 * v44];
              *v50 = v36->n128_u32[0];
              v51 = (uint64_t)(v50 + 1);
              if (v38 != v42)
              {
LABEL_79:
                v52 = (char *)(v38 - 1) - (char *)v42;
                if (v52 < 0x2C)
                {
                  v35 = v146;
                  goto LABEL_108;
                }
                v72 = (char *)v38 - &v49[v43];
                v35 = v146;
                if (v72 < 0x20)
                  goto LABEL_215;
                v73 = (v52 >> 2) + 1;
                v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                v75 = &v38[v74 / 0xFFFFFFFFFFFFFFFCLL];
                v50 = (_DWORD *)((char *)v50 - v74);
                v76 = &v49[4 * v44 - 16];
                v77 = (__int128 *)(v38 - 4);
                v78 = v73 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v79 = *v77;
                  *(v76 - 1) = *(v77 - 1);
                  *v76 = v79;
                  v76 -= 2;
                  v77 -= 2;
                  v78 -= 8;
                }
                while (v78);
                v38 = v75;
                if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_215:
                  do
                  {
LABEL_108:
                    v80 = *--v38;
                    *--v50 = v80;
                  }
                  while (v38 != v42);
                }
LABEL_109:
                v156 = v50;
                v157 = (char *)v51;
                v158 = &v49[4 * v47];
                if (v42)
                  operator delete(v42);
                v5 = v142;
                v157 = (char *)v51;
LABEL_54:
                if (++v36 == v9)
                {
                  v32 = v140;
                  goto LABEL_138;
                }
                continue;
              }
            }
            else
            {
              v49 = 0;
              v50 = (_DWORD *)(4 * v44);
              *(_DWORD *)(4 * v44) = v36->n128_u32[0];
              v51 = 4 * v44 + 4;
              if (v38 != v42)
                goto LABEL_79;
            }
            v35 = v146;
            goto LABEL_109;
          }
          if (v157 < v158)
          {
LABEL_69:
            *v38 = v1;
            v41 = (uint64_t)(v38 + 1);
LABEL_131:
            v5 = 0;
            v157 = (char *)v41;
            goto LABEL_54;
          }
          v147 = v35;
          v62 = (signed __int32 *)v156;
          v63 = v157 - (_BYTE *)v156;
          v64 = (v157 - (_BYTE *)v156) >> 2;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62)
LABEL_209:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v66 = v158 - (_BYTE *)v156;
          if ((v158 - (_BYTE *)v156) >> 1 > v65)
            v65 = v66 >> 1;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
            v67 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
          {
            if (v67 >> 62)
LABEL_210:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v68 = v67;
            v69 = operator new(4 * v67);
            v67 = v68;
            v70 = (signed __int32 *)&v69[4 * v64];
            *v70 = v1;
            v41 = (uint64_t)(v70 + 1);
            if (v38 != v62)
            {
LABEL_100:
              v71 = (char *)(v38 - 1) - (char *)v62;
              if (v71 < 0x2C)
              {
                v35 = v147;
                goto LABEL_128;
              }
              v90 = (char *)v38 - &v69[v63];
              v35 = v147;
              if (v90 < 0x20)
                goto LABEL_216;
              v91 = (v71 >> 2) + 1;
              v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
              v93 = &v38[v92 / 0xFFFFFFFFFFFFFFFCLL];
              v70 = (signed __int32 *)((char *)v70 - v92);
              v94 = &v69[4 * v64 - 16];
              v95 = (__int128 *)(v38 - 4);
              v96 = v91 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v97 = *v95;
                *(v94 - 1) = *(v95 - 1);
                *v94 = v97;
                v94 -= 2;
                v95 -= 2;
                v96 -= 8;
              }
              while (v96);
              v38 = v93;
              if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_216:
                do
                {
LABEL_128:
                  v98 = *--v38;
                  *--v70 = v98;
                }
                while (v38 != v62);
              }
LABEL_129:
              v156 = v70;
              v157 = (char *)v41;
              v158 = &v69[4 * v67];
              if (v62)
                operator delete(v62);
              goto LABEL_131;
            }
          }
          else
          {
            v69 = 0;
            v70 = (signed __int32 *)(4 * v64);
            *(_DWORD *)(4 * v64) = v1;
            v41 = 4 * v64 + 4;
            if (v38 != v62)
              goto LABEL_100;
          }
          v35 = v147;
          goto LABEL_129;
        }
        break;
      }
      if (v1 != v36->n128_u32[0])
      {
        if (v5)
          goto LABEL_137;
        goto LABEL_54;
      }
      this[9] = (operations_research::sat::LiteralWatchers *)((char *)this[9] + 1);
      v39 = this[2];
      v40 = *(_DWORD *)(v149 + 4 * v1);
      if (!v5)
      {
        v145 = v1;
        if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(v39, v40 ^ 1))
          goto LABEL_196;
        v38 = (signed __int32 *)v157;
        if (v157 < v158)
          goto LABEL_69;
        v53 = (signed __int32 *)v156;
        v54 = v157 - (_BYTE *)v156;
        v55 = (v157 - (_BYTE *)v156) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          goto LABEL_209;
        v57 = v158 - (_BYTE *)v156;
        if ((v158 - (_BYTE *)v156) >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 62)
            goto LABEL_210;
          v59 = v58;
          v60 = operator new(4 * v58);
          v58 = v59;
          v61 = (signed __int32 *)&v60[4 * v55];
          *v61 = v145;
          v41 = (uint64_t)(v61 + 1);
          if (v38 == v53)
            goto LABEL_119;
LABEL_113:
          v81 = (char *)(v38 - 1) - (char *)v53;
          if (v81 < 0x2C)
            goto LABEL_217;
          if ((unint64_t)((char *)v38 - &v60[v54]) < 0x20)
            goto LABEL_217;
          v82 = (v81 >> 2) + 1;
          v83 = 4 * (v82 & 0x7FFFFFFFFFFFFFF8);
          v84 = &v38[v83 / 0xFFFFFFFFFFFFFFFCLL];
          v61 = (signed __int32 *)((char *)v61 - v83);
          v85 = &v60[4 * v55 - 16];
          v86 = (__int128 *)(v38 - 4);
          v87 = v82 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v88 = *v86;
            *(v85 - 1) = *(v86 - 1);
            *v85 = v88;
            v85 -= 2;
            v86 -= 2;
            v87 -= 8;
          }
          while (v87);
          v38 = v84;
          if (v82 != (v82 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_217:
            do
            {
              v89 = *--v38;
              *--v61 = v89;
            }
            while (v38 != v53);
          }
        }
        else
        {
          v60 = 0;
          v61 = (signed __int32 *)(4 * v55);
          *(_DWORD *)(4 * v55) = v145;
          v41 = 4 * v55 + 4;
          if (v38 != v53)
            goto LABEL_113;
        }
LABEL_119:
        v156 = v61;
        v157 = (char *)v41;
        v158 = &v60[4 * v58];
        if (v53)
          operator delete(v53);
        v1 = v145;
        goto LABEL_131;
      }
      if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(v39, v40))
        goto LABEL_196;
LABEL_137:
      this[7] = (operations_research::sat::LiteralWatchers *)((char *)this[7] + 1);
      v32 = v140;
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v140);
LABEL_138:
      if (!*v32 || v156 == v157 && v138 <= v9 - v4)
      {
        v6 = v139;
        goto LABEL_4;
      }
      v148 = (char *)__p;
      v154 = __p;
      std::__sort<std::__less<int,int> &,int *>();
      v99 = v157;
      if (v156 == v157)
      {
LABEL_151:
        v143 = v5;
      }
      else
      {
        v100 = (char *)v156 + 4;
        do
        {
          if (v100 == v157)
            goto LABEL_151;
          v101 = *((_DWORD *)v100 - 1);
          v102 = *(_DWORD *)v100;
          v100 += 4;
        }
        while (v101 != v102);
        v103 = v100 - 8;
        while (v100 != v99)
        {
          v104 = v101;
          v101 = *(_DWORD *)v100;
          if (v104 != *(_DWORD *)v100)
          {
            *((_DWORD *)v103 + 1) = v101;
            v103 += 4;
          }
          v100 += 4;
        }
        v105 = v103 + 4;
        v143 = v5;
        v106 = v99 - (v103 + 4);
        if (v99 != v103 + 4)
        {
          if (v99 != &v105[v106])
            memmove(v103 + 4, &v105[v106], 0);
          v157 = v105;
        }
      }
      v107 = 0;
      v108 = 0;
      if (v138 <= 1)
        v109 = 1;
      else
        v109 = v138;
      while (2)
      {
        if (v108 < (unint64_t)((v157 - (_BYTE *)v156) >> 2) && v107 == *((_DWORD *)v156 + v108))
        {
          ++v108;
          goto LABEL_161;
        }
        v110 = *(_DWORD *)(v149 + 4 * v107);
        v111 = *(_QWORD *)(*((_QWORD *)*this + 1) + (((unint64_t)v110 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v111 >> v110) & 1) != 0)
        {
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v32);
          goto LABEL_161;
        }
        if (((v111 >> (v110 & 0x3F ^ 1u)) & 1) == 0)
        {
          if (v148 < v155)
          {
            *(_DWORD *)v148 = v110;
            v112 = (uint64_t)(v148 + 4);
            goto LABEL_184;
          }
          v113 = (char *)__p;
          v114 = v148 - (_BYTE *)__p;
          v115 = (v148 - (_BYTE *)__p) >> 2;
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v117 = v155 - (_BYTE *)__p;
          if ((v155 - (_BYTE *)__p) >> 1 > v116)
            v116 = v117 >> 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
            v118 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            if (v118 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v119 = v118;
            v120 = (char *)operator new(4 * v118);
            v121 = v148;
            v118 = v119;
            v122 = &v120[4 * v115];
            *(_DWORD *)v122 = *(_DWORD *)(v149 + 4 * v107);
            v112 = (uint64_t)(v122 + 4);
            if (v148 == v113)
              goto LABEL_182;
LABEL_179:
            v123 = v121 - 4 - v113;
            if (v123 < 0xBC)
            {
              v124 = v121;
              goto LABEL_181;
            }
            if (&v120[v114 - 4 - (v123 & 0xFFFFFFFFFFFFFFFCLL)] > &v120[v114 - 4])
            {
              v124 = v148;
              goto LABEL_181;
            }
            if (&v121[-(v123 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v121 - 4)
            {
              v124 = v148;
              goto LABEL_181;
            }
            if ((unint64_t)(v121 - v120 - v114) < 0x20)
            {
              v124 = v148;
              goto LABEL_181;
            }
            v126 = (v123 >> 2) + 1;
            v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
            v124 = &v148[-v127];
            v122 -= v127;
            v128 = &v120[4 * v115 - 16];
            v129 = v148 - 16;
            v130 = v126 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v131 = *(_OWORD *)v129;
              *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
              *(_OWORD *)v128 = v131;
              v128 -= 32;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_181:
                v125 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v122 - 1) = v125;
                v122 -= 4;
              }
              while (v124 != v113);
            }
          }
          else
          {
            v120 = 0;
            v122 = (char *)(4 * v115);
            *(_DWORD *)(4 * v115) = v110;
            v112 = 4 * v115 + 4;
            v121 = v148;
            if (v148 != v113)
              goto LABEL_179;
          }
LABEL_182:
          __p = v122;
          v155 = &v120[4 * v118];
          if (v113)
            operator delete(v113);
LABEL_184:
          v154 = (_BYTE *)v112;
          v148 = (char *)v112;
          v32 = v140;
        }
LABEL_161:
        if (++v107 != v109)
          continue;
        break;
      }
      v132 = (int *)__p;
      v133 = (v154 - (_BYTE *)__p) >> 2;
      this[8] = (operations_research::sat::LiteralWatchers *)((char *)this[8] + v138 - v133);
      v134 = operations_research::sat::LiteralWatchers::InprocessingRewriteClause((uint64_t)this[2], v32, v132, v133);
      v6 = v139;
      v5 = v143;
      if (!v134)
      {
LABEL_196:
        v136 = 0;
        if (!v4)
          break;
LABEL_199:
        operator delete(v4);
        break;
      }
LABEL_4:
      if (++v6 == v137)
      {
        v136 = 1;
        if (!v4)
          break;
        goto LABEL_199;
      }
    }
  }
  if (__p)
    operator delete(__p);
  if (v156)
  {
    v157 = (char *)v156;
    operator delete(v156);
  }
  return v136;
}

void sub_22DBE038C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBE0394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  void *v27;
  void *v28;

  if (v25)
  {
    operator delete(v25);
    v27 = __p;
    if (!__p)
    {
LABEL_3:
      v28 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v27 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v27);
  v28 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::BlockedClauseSimplifier::InitializeForNewRound(operations_research::sat::BlockedClauseSimplifier *this)
{
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  operations_research::sat::BlockedClauseSimplifier *v42;
  int *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  operations_research::sat::BlockedClauseSimplifier *v70;
  char *v71;
  int *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v2 = (void **)((char *)this + 160);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses((operations_research::sat::LiteralWatchers *)*(v2 - 18));
  v3 = (uint64_t)*(v2 - 18);
  v4 = *(uint64_t **)(v3 + 304);
  v5 = *(uint64_t **)(v3 + 312);
  if (v4 != v5)
  {
    do
    {
      v10 = 0;
      v12 = *v4;
      v75 = v12;
      v13 = (_QWORD *)*((_QWORD *)this + 2);
      v14 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v12)))
          + v12;
      v15 = ((v14 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v14);
      v16 = v13[42];
      v17 = v13[43];
      v11 = (v15 >> 7) ^ (v16 >> 12);
      v18 = v13[45];
      v19 = 0x101010101010101 * (v15 & 0x7F);
      while (1)
      {
        v6 = v11 & v18;
        v7 = *(_QWORD *)(v16 + v6);
        v8 = ((v7 ^ v19) - 0x101010101010101) & ~(v7 ^ v19) & 0x8080808080808080;
        if (v8)
          break;
LABEL_6:
        if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0)
          goto LABEL_9;
        v10 += 8;
        v11 = v10 + v6;
      }
      while (1)
      {
        v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v18;
        if (*(_QWORD *)(v17 + 24 * v9) == v12)
          break;
        v8 &= v8 - 1;
        if (!v8)
          goto LABEL_6;
      }
      if (v9 == v18)
LABEL_9:
        gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back(v2, &v75);
      ++v4;
    }
    while (v4 != v5);
    v3 = *((_QWORD *)this + 2);
  }
  v20 = *(int *)(v3 + 88);
  v74 = 1;
  std::vector<BOOL>::assign((char **)this + 11, v20, &v74);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    v22 = *((_QWORD *)this + 15);
    v23 = *((_QWORD *)this + 16);
    v24 = *((_QWORD *)this + 18);
    v25 = *((_QWORD *)this + 19);
    do
    {
      if (v23 == v22)
        v26 = 0;
      else
        v26 = ((v23 - v22) << 7) - 1;
      v27 = v25 + v24;
      if (v26 == v25 + v24)
      {
        std::deque<operations_research::sat::Literal>::__add_back_capacity((uint64_t)this + 112);
        v22 = *((_QWORD *)this + 15);
        v23 = *((_QWORD *)this + 16);
        v24 = *((_QWORD *)this + 18);
        v25 = *((_QWORD *)this + 19);
        v27 = v24 + v25;
      }
      *(_DWORD *)(*(_QWORD *)(v22 + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v27 & 0x3FF)) = v21;
      *((_QWORD *)this + 19) = ++v25;
      ++v21;
    }
    while ((_DWORD)v20 != v21);
  }
  std::vector<BOOL>::resize((uint64_t)this + 64, v20, 0);
  v29 = *((_QWORD *)this + 23);
  v28 = *((_QWORD *)this + 24);
  v30 = (uint64_t *)((char *)this + 184);
  if (v28 != v29)
  {
    v31 = *((_QWORD *)this + 24);
    do
    {
      v33 = *(void **)(v31 - 24);
      v31 -= 24;
      v32 = v33;
      if (v33)
      {
        *(_QWORD *)(v28 - 16) = v32;
        operator delete(v32);
      }
      v28 = v31;
    }
    while (v31 != v29);
    v28 = *v30;
  }
  *((_QWORD *)this + 24) = v29;
  v34 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
  if (v20 <= v34)
  {
    if (v20 < v34)
    {
      v35 = v28 + 24 * (int)v20;
      if (v29 != v35)
      {
        v36 = v29;
        do
        {
          v38 = *(void **)(v36 - 24);
          v36 -= 24;
          v37 = v38;
          if (v38)
          {
            *(_QWORD *)(v29 - 16) = v37;
            operator delete(v37);
          }
          v29 = v36;
        }
        while (v36 != v35);
      }
      *((_QWORD *)this + 24) = v35;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 184, v20 - v34);
  }
  v39 = *((_QWORD *)this + 20);
  v40 = *((_QWORD *)this + 21);
  if ((int)((unint64_t)(v40 - v39) >> 3) >= 1)
  {
    v41 = 0;
    v70 = this;
    v71 = (char *)this + 184;
    do
    {
      v43 = *(int **)(v39 + 8 * v41);
      v46 = *v43;
      v45 = v43 + 1;
      v44 = v46;
      if (!(_DWORD)v46)
      {
        v42 = v70;
        goto LABEL_39;
      }
      v47 = &v45[v44];
      v72 = v47;
      v73 = v41;
      do
      {
        while (1)
        {
          v48 = *v30 + 24 * *v45;
          v49 = (uint64_t *)(v48 + 8);
          v50 = *(char **)(v48 + 8);
          v51 = *(_QWORD *)(v48 + 16);
          if ((unint64_t)v50 >= v51)
            break;
          *(_DWORD *)v50 = v41;
          *v49 = (uint64_t)(v50 + 4);
          if (++v45 == v47)
            goto LABEL_64;
        }
        v52 = *(char **)v48;
        v53 = (uint64_t)&v50[-*(_QWORD *)v48];
        v54 = v53 >> 2;
        v55 = (v53 >> 2) + 1;
        if (v55 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v56 = v51 - (_QWORD)v52;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (!v57)
        {
          v58 = 0;
          v59 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v41;
          v60 = 4 * v54 + 4;
          if (v50 == v52)
            goto LABEL_61;
LABEL_55:
          v61 = v50 - 4 - v52;
          if (v61 < 0x2C)
            goto LABEL_70;
          if ((unint64_t)(v50 - &v58[v53]) < 0x20)
            goto LABEL_70;
          v62 = (v61 >> 2) + 1;
          v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          v64 = &v50[-v63];
          v59 = (_DWORD *)((char *)v59 - v63);
          v65 = &v58[4 * v54 - 16];
          v66 = v50 - 16;
          v67 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 32;
            v67 -= 8;
          }
          while (v67);
          v50 = v64;
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            do
            {
              v69 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *--v59 = v69;
            }
            while (v50 != v52);
          }
          goto LABEL_61;
        }
        if (v57 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v58 = operator new(4 * v57);
        v41 = v73;
        v59 = &v58[4 * v54];
        *v59 = v73;
        v60 = (uint64_t)(v59 + 1);
        if (v50 != v52)
          goto LABEL_55;
LABEL_61:
        *(_QWORD *)v48 = v59;
        *v49 = v60;
        *(_QWORD *)(v48 + 16) = &v58[4 * v57];
        if (v52)
        {
          operator delete(v52);
          v41 = v73;
        }
        v30 = (uint64_t *)v71;
        v47 = v72;
        *v49 = v60;
        ++v45;
      }
      while (v45 != v72);
LABEL_64:
      v42 = v70;
      v39 = *((_QWORD *)v70 + 20);
      v40 = *((_QWORD *)v70 + 21);
      LODWORD(v44) = **(_DWORD **)(v39 + 8 * v41);
LABEL_39:
      *((_QWORD *)v42 + 7) += (int)v44;
      ++v41;
    }
    while (v41 < (int)((unint64_t)(v40 - v39) >> 3));
  }
}

void operations_research::sat::BlockedClauseSimplifier::ProcessLiteral(uint64_t a1, int a2)
{
  unint64_t v3;
  _QWORD *v5;
  void **v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  int v47;
  char *i;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  int *v61;
  int *v62;
  int *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void **v85;
  char *v86;
  int *v87;
  char *v88;

  v3 = ((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + v3) >> (a2 & 0x3E)) & 3) == 0)
  {
    v5 = *(_QWORD **)(a1 + 8);
    if (((*(_QWORD *)(v5[83] + v3) >> a2) & 1) == 0)
    {
      v6 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v5, a2);
      v7 = (int *)*v6;
      v8 = (int *)v6[1];
      if (*v6 == v8)
      {
        v9 = 0;
      }
      else
      {
        v9 = 0;
        v10 = (int *)*v6;
        do
        {
          v11 = *v10;
          if ((_DWORD)v11 != a2)
          {
            ++v9;
            *(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v10;
          }
          ++v10;
        }
        while (v10 != v8);
      }
      v88 = 0;
      v12 = *(_QWORD *)(a1 + 184) + 24 * a2;
      v14 = *(int **)v12;
      v13 = *(int **)(v12 + 8);
      if (*(int **)v12 != v13)
      {
        v85 = v6;
        v87 = *(int **)(v12 + 8);
        v15 = 0;
        v16 = 0;
        v17 = 0;
        while (1)
        {
          v18 = *v14;
          v19 = *(int **)(*(_QWORD *)(a1 + 160) + 8 * v18);
          v20 = *v19;
          if (!(_DWORD)v20)
            goto LABEL_12;
          if (v9 >= 1)
          {
            if ((int)v20 <= v9)
              goto LABEL_12;
            v21 = 0;
            v22 = v19 + 1;
            v23 = 4 * v20;
            do
            {
              v24 = *v22;
              if ((_DWORD)v24 != a2)
                v21 += (*(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v24 & 0x3F ^ 1)) & 1;
              ++v22;
              v23 -= 4;
            }
            while (v23);
            *(_QWORD *)(a1 + 56) += v20;
            if (v21 < v9)
              goto LABEL_12;
          }
          if (v15 >= v16)
            break;
          *(_DWORD *)v15 = v18;
          v15 += 4;
LABEL_12:
          if (++v14 == v13)
          {
            v7 = (int *)*v85;
            v8 = (int *)v85[1];
            if (*v85 == v8)
              goto LABEL_54;
            goto LABEL_52;
          }
        }
        v25 = v15 - v17;
        v26 = (v15 - v17) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v16 - v17) >> 1 > v27)
          v27 = (v16 - v17) >> 1;
        if ((unint64_t)(v16 - v17) >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = v28;
          v30 = (char *)operator new(4 * v28);
          v31 = v15;
          v28 = v29;
          v32 = &v30[4 * v26];
          *(_DWORD *)v32 = v18;
          v15 = v32 + 4;
          if (v31 == v17)
            goto LABEL_36;
        }
        else
        {
          v31 = v15;
          v30 = 0;
          v32 = (char *)(4 * v26);
          *(_DWORD *)(4 * v26) = v18;
          v15 = (char *)(4 * v26 + 4);
          if (v31 == v17)
            goto LABEL_36;
        }
        v33 = v31;
        v34 = v31 - 4;
        v35 = v31 - 4 - v17;
        if (v35 >= 0xBC)
        {
          if (&v30[v25 - 4 - (v35 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v25 - 4])
          {
            v36 = v33;
          }
          else if (&v34[-(v35 & 0xFFFFFFFFFFFFFFFCLL)] > v34)
          {
            v36 = v33;
          }
          else if ((unint64_t)(v34 - &v30[v25] + 4) >= 0x20)
          {
            v39 = (v35 >> 2) + 1;
            v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
            v36 = &v33[-v40];
            v32 -= v40;
            v41 = &v30[4 * v26 - 16];
            v42 = v33 - 16;
            v43 = v39 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v44 = *(_OWORD *)v42;
              *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
              *(_OWORD *)v41 = v44;
              v41 -= 32;
              v42 -= 32;
              v43 -= 8;
            }
            while (v43);
            if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_36;
          }
          else
          {
            v36 = v33;
          }
        }
        else
        {
          v36 = v33;
        }
        do
        {
          v37 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v32 - 1) = v37;
          v32 -= 4;
        }
        while (v36 != v17);
LABEL_36:
        v16 = &v30[4 * v28];
        v88 = v32;
        if (v17)
        {
          v38 = &v30[4 * v28];
          operator delete(v17);
          v16 = v38;
        }
        v17 = v32;
        v13 = v87;
        goto LABEL_12;
      }
      v15 = 0;
      if (v7 == v8)
        goto LABEL_54;
LABEL_52:
      v45 = *(_QWORD *)(a1 + 64);
      do
      {
        v46 = *v7++;
        *(_QWORD *)(v45 + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
      }
      while (v7 != v8);
LABEL_54:
      if (v88 != v15)
      {
        v47 = a2 ^ 1;
        v86 = v15;
        for (i = v88; i != v15; i += 4)
        {
          v49 = *(int *)i;
          v50 = *(_QWORD *)(a1 + 160);
          v51 = *(int **)(v50 + 8 * v49);
          v54 = *v51;
          v52 = (char *)(v51 + 1);
          v53 = v54;
          v55 = 4 * v54;
          if ((_DWORD)v54)
          {
            v56 = *(_QWORD *)(a1 + 64);
            v57 = v55;
            v58 = v52;
            do
            {
              v59 = *(_DWORD *)v58;
              v58 += 4;
              *(_QWORD *)(v56 + (((unint64_t)v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
              v57 -= 4;
            }
            while (v57);
          }
          v60 = *(_QWORD *)(a1 + 184) + 24 * v47;
          v61 = *(int **)v60;
          v62 = *(int **)(v60 + 8);
          if (v61 == v62)
          {
LABEL_68:
            if (!(_DWORD)v53)
              goto LABEL_76;
            v69 = 1;
            v15 = v86;
          }
          else
          {
            while (1)
            {
              v63 = *(int **)(v50 + 8 * *v61);
              v64 = *v63;
              if ((_DWORD)v64)
                break;
LABEL_67:
              if (++v61 == v62)
                goto LABEL_68;
            }
            v65 = v63 + 1;
            v66 = *(_QWORD *)(a1 + 56);
            v67 = 4 * v64;
            do
            {
              v68 = *v65;
              if ((_DWORD)v68 != v47
                && ((*(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v68 & 0x3F ^ 1)) & 1) != 0)
              {
                *(_QWORD *)(a1 + 56) = v66 + 1;
                goto LABEL_67;
              }
              ++v65;
              ++v66;
              v67 -= 4;
            }
            while (v67);
            *(_QWORD *)(a1 + 56) = v66;
            if (!(_DWORD)v53)
              continue;
            v69 = 0;
          }
          v70 = *(_QWORD *)(a1 + 64);
          v71 = v55;
          v72 = v52;
          do
          {
            v73 = *(_DWORD *)v72;
            v72 += 4;
            *(_QWORD *)(v70 + (((unint64_t)v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v73);
            v71 -= 4;
          }
          while (v71);
          if (!v69)
            continue;
          v74 = v52;
          do
          {
            v75 = *(_DWORD *)v74 ^ 1;
            v76 = *(_QWORD *)(a1 + 88);
            v77 = (unint64_t)*(int *)v74 >> 6;
            v78 = *(_QWORD *)(v76 + 8 * v77);
            if (((1 << v75) & v78) == 0)
            {
              v79 = *(_QWORD *)(a1 + 128);
              v80 = *(_QWORD *)(a1 + 120);
              *(_QWORD *)(v76 + 8 * v77) = (1 << v75) | v78;
              if (v79 == v80)
                v81 = 0;
              else
                v81 = ((v79 - v80) << 7) - 1;
              v82 = *(_QWORD *)(a1 + 152);
              v83 = v82 + *(_QWORD *)(a1 + 144);
              if (v81 == v83)
              {
                std::deque<operations_research::sat::Literal>::__add_back_capacity(a1 + 112);
                v80 = *(_QWORD *)(a1 + 120);
                v82 = *(_QWORD *)(a1 + 152);
                v83 = *(_QWORD *)(a1 + 144) + v82;
              }
              *(_DWORD *)(*(_QWORD *)(v80 + ((v83 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v83 & 0x3FF)) = v75;
              *(_QWORD *)(a1 + 152) = v82 + 1;
            }
            v74 += 4;
            v55 -= 4;
          }
          while (v55);
LABEL_76:
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(_QWORD **)(a1 + 24), a2, v52, v53);
          v15 = v86;
          ++*(_DWORD *)(a1 + 48);
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*(_QWORD *)(a1 + 16), *(int **)(*(_QWORD *)(a1 + 160) + 8 * v49));
        }
      }
      if (v88)
        operator delete(v88);
    }
  }
}

void sub_22DBE0EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back(void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

_QWORD *operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(_QWORD *result, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  signed int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if (((*(_QWORD *)(*(_QWORD *)(result[1] + 8) + (((unint64_t)(int)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1F))) & 3) == 0)
  {
    v3 = (int)(2 * a2);
    v4 = -(*(_DWORD *)(result[42] + 4 * v3)
         + *(_DWORD *)(*(_QWORD *)(result[2] + 688) + 4 * (v3 | 1))
         + *(_DWORD *)(result[42] + 4 * (v3 | 1))
         + *(_DWORD *)(*(_QWORD *)(result[2] + 688) + 4 * (v3 & 0x3FFFFFFFFFFFFFFELL)));
    v5 = (int *)(result + 23);
    v6 = *(_DWORD *)(result[27] + 4 * (int)a2);
    v7 = a2 | ((unint64_t)v4 << 32);
    if (v6)
    {
      return (_QWORD *)operations_research::IntegerPriorityQueue<operations_research::sat::BoundedVariableElimination::VariableWithPriority,std::less<operations_research::sat::BoundedVariableElimination::VariableWithPriority>>::ChangePriority((uint64_t)(result + 23), v7);
    }
    else
    {
      v8 = *v5;
      v9 = *v5 + 1;
      *v5 = v9;
      if (v8 >= 1)
      {
        while (1)
        {
          v10 = v9 >> 1;
          v11 = result[24];
          v12 = *(_QWORD *)(v11 + 8 * (v9 >> 1));
          if (SHIDWORD(v12) >= v4)
            break;
          *(_QWORD *)(v11 + 8 * v9) = v12;
          *(_DWORD *)(result[27] + 4 * (int)v12) = v9;
          v13 = v9 > 3;
          v9 >>= 1;
          if (!v13)
          {
            *(_QWORD *)(result[24] + 8 * v10) = v7;
            *(_DWORD *)(result[27] + 4 * (int)a2) = v10;
            return result;
          }
        }
      }
      *(_QWORD *)(result[24] + 8 * (int)v9) = v7;
      *(_DWORD *)(result[27] + 4 * (int)a2) = v9;
    }
  }
  return result;
}

BOOL operations_research::sat::BoundedVariableElimination::Propagate(operations_research::sat::BoundedVariableElimination *this)
{
  operations_research::sat::Trail *v1;
  uint64_t v3;
  int *v4;
  int v5;
  _BOOL8 v6;
  int v7;
  int **v8;
  int *v9;
  int *v10;
  int *v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int v15;
  int **v16;
  int *v17;
  int *v18;

  v1 = (operations_research::sat::Trail *)*((_QWORD *)this + 5);
  if (*((_DWORD *)this + 14) >= *((_DWORD *)v1 + 3))
    return 1;
  do
  {
    v6 = operations_research::sat::BinaryImplicationGraph::Propagate(*((operations_research::sat::BinaryImplicationGraph **)this + 2), v1);
    if (!v6)
      break;
    v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 72) + 4 * *((int *)this + 14));
    v3 = *((_QWORD *)this + 39);
    v8 = (int **)(v3 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        v11 = *(int **)(*((_QWORD *)this + 36) + 8 * *v9);
        if (*v11)
        {
          v12 = *(int64x2_t *)((char *)this + 104);
          v13.i64[1] = -1;
          v13.i64[0] = *v11;
          v13.i64[0] = vsubq_s64(v12, v13).u64[0];
          v14.i64[0] = -1;
          v14.i64[1] = -1;
          v13.i64[1] = vaddq_s64(v12, v14).i64[1];
          *(int64x2_t *)((char *)this + 104) = v13;
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((_QWORD *)this + 3), v11);
        }
        ++v9;
      }
      while (v9 != v10);
      v3 = *((_QWORD *)this + 39);
      v9 = *(int **)(v3 + 24 * v7);
    }
    *(_QWORD *)(v3 + 24 * v7 + 8) = v9;
    v15 = v7 ^ 1;
    v16 = (int **)(v3 + 24 * (v7 ^ 1));
    v4 = *v16;
    v17 = v16[1];
    if (*v16 != v17)
    {
      while (1)
      {
        v18 = *(int **)(*((_QWORD *)this + 36) + 8 * *v4);
        if (*v18)
        {
          if (!operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(this, v15, v18))
            return 0;
        }
        if (++v4 == v17)
        {
          v3 = *((_QWORD *)this + 39);
          v4 = *(int **)(v3 + 24 * v15);
          break;
        }
      }
    }
    *(_QWORD *)(v3 + 24 * v15 + 8) = v4;
    v5 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v5;
    v1 = (operations_research::sat::Trail *)*((_QWORD *)this + 5);
  }
  while (v5 < *((_DWORD *)v1 + 3));
  return v6;
}

uint64_t operations_research::sat::BoundedVariableElimination::CrossProduct(uint64_t a1, int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  BOOL v14;
  uint64_t v16;
  int **v17;
  int *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int **v24;
  int *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  int **v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int **v56;
  int *v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76[2];
  uint64_t *v77;

  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) != 0)
    return 1;
  v3 = 2 * a2;
  v4 = 2 * a2;
  v5 = (2 * a2) | 1;
  v6 = *(_QWORD *)(a1 + 336);
  v7 = *(_QWORD **)(a1 + 16);
  v8 = v7[86];
  v9 = *(_DWORD *)(v6 + 4 * v5);
  v10 = *(_DWORD *)(v8 + 4 * v5) + *(_DWORD *)(v6 + 8 * a2);
  v11 = *(_DWORD *)(v8 + 4 * ((2 * a2) & 0x3FFFFFFFFFFFFFFELL)) + v9;
  if (!(v10 | v11))
    return 1;
  if (v10 >= 1 && v11 == 0)
  {
    ++*(_QWORD *)(a1 + 96);
    result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*(_QWORD **)(a1 + 24), 2 * a2);
    if ((_DWORD)result)
    {
      v16 = *(_QWORD *)(a1 + 312);
      v17 = (int **)(v16 + 24 * v4);
      v18 = *v17;
      v19 = v17[1];
      if (*v17 != v19)
      {
        do
        {
          v20 = *v18;
          v21 = *(char **)(*(_QWORD *)(a1 + 288) + 8 * v20);
          v22 = *(int *)v21;
          if ((_DWORD)v22)
          {
            operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(_QWORD **)(a1 + 32), v3, v21 + 4, v22);
            operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v20));
          }
          ++v18;
        }
        while (v18 != v19);
        v16 = *(_QWORD *)(a1 + 312);
        v18 = *(int **)(v16 + 24 * v4);
      }
      *(_QWORD *)(v16 + 24 * v4 + 8) = v18;
      return 1;
    }
    return result;
  }
  if (v10)
    v14 = 1;
  else
    v14 = v11 < 1;
  if (v14)
  {
    if (((*(_QWORD *)(v7[68] + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)) & 1) != 0)
    {
      LODWORD(v76[0]) = v10;
      LODWORD(v77) = 1;
      if (v10 != 1)
      {
        v77 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v76, (int)&v77, "s1 == 1");
        if (v77)
        {
          google::LogMessageFatal::LogMessageFatal(v76, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1490, &v77);
          google::LogMessage::stream((google::LogMessage *)v76);
          goto LABEL_87;
        }
      }
      LODWORD(v76[0]) = v11;
      LODWORD(v77) = 1;
      if (v11 != 1)
      {
        v77 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v76, (int)&v77, "s2 == 1");
        if (v77)
        {
          google::LogMessageFatal::LogMessageFatal(v76, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1491, &v77);
          google::LogMessage::stream((google::LogMessage *)v76);
          goto LABEL_87;
        }
      }
      v76[0] = operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(*(_QWORD **)(a1 + 16), a2);
      v75 = 0;
      if (v76[0])
      {
        v77 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v76, (int)&v75, "implication_graph_->NumImplicationOnVariableRemoval(var) == 0");
        if (v77)
        {
          google::LogMessageFatal::LogMessageFatal(v76, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1492, &v77);
          google::LogMessage::stream((google::LogMessage *)v76);
LABEL_87:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v76);
        }
      }
      ++*(_QWORD *)(a1 + 96);
      operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(*(_QWORD **)(a1 + 16), a2, *(_QWORD **)(a1 + 32));
      return 1;
    }
    v30 = *(_QWORD *)a1;
    v31 = v10 < 2 || v11 < 2;
    if (!v31 && v11 * v10 > *(_DWORD *)(v30 + 324))
      return 1;
    v32 = *(int *)(v30 + 336);
    v33 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v7, 2 * a2);
    v34 = (_BYTE *)v33[1] - (_BYTE *)*v33;
    v35 = v32 + 2;
    v36 = operations_research::sat::BinaryImplicationGraph::DirectImplications(*(_QWORD **)(a1 + 16), v5);
    v37 = ((((_BYTE *)v36[1] - (_BYTE *)*v36) >> 2) + (v34 >> 2)) * (v32 + 2);
    v38 = *(_QWORD *)(a1 + 312);
    v39 = (int **)(v38 + 24 * v4);
    v41 = *v39;
    v40 = v39[1];
    if (v41 != v40)
    {
      v42 = *(_QWORD *)(a1 + 288);
      v43 = (char *)v40 - (char *)v41 - 4;
      if (v43 < 4)
      {
        v44 = v41;
        do
        {
LABEL_52:
          v53 = *v44++;
          v54 = **(int **)(v42 + 8 * v53);
          if ((_DWORD)v54)
            v55 = v54 + v32;
          else
            v55 = 0;
          v37 += v55;
        }
        while (v44 != v40);
        goto LABEL_56;
      }
      v45 = 0;
      v46 = (v43 >> 2) + 1;
      v44 = &v41[v46 & 0x7FFFFFFFFFFFFFFELL];
      v47 = v41 + 1;
      v48 = v46 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v49 = **(int **)(v42 + 8 * *(v47 - 1));
        v50 = **(int **)(v42 + 8 * *v47);
        if ((_DWORD)v49)
          v51 = v49 + v32;
        else
          v51 = 0;
        if ((_DWORD)v50)
          v52 = v50 + v32;
        else
          v52 = 0;
        v37 += v51;
        v45 += v52;
        v47 += 2;
        v48 -= 2;
      }
      while (v48);
      v37 += v45;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFFELL))
        goto LABEL_52;
    }
LABEL_56:
    v56 = (int **)(v38 + 24 * (int)v5);
    v58 = *v56;
    v57 = v56[1];
    if (v58 == v57)
      goto LABEL_72;
    v59 = *(_QWORD *)(a1 + 288);
    v60 = (char *)v57 - (char *)v58 - 4;
    if (v60 >= 4)
    {
      v62 = 0;
      v63 = (v60 >> 2) + 1;
      v61 = &v58[v63 & 0x7FFFFFFFFFFFFFFELL];
      v64 = v58 + 1;
      v65 = v63 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v66 = **(int **)(v59 + 8 * *(v64 - 1));
        v67 = **(int **)(v59 + 8 * *v64);
        if ((_DWORD)v66)
          v68 = v66 + v32;
        else
          v68 = 0;
        if ((_DWORD)v67)
          v69 = v67 + v32;
        else
          v69 = 0;
        v37 += v68;
        v62 += v69;
        v64 += 2;
        v65 -= 2;
      }
      while (v65);
      v37 += v62;
      if (v63 == (v63 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_72:
        *(_QWORD *)(a1 + 128) = v37;
        v73 = operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(*(_QWORD **)(a1 + 16), a2);
        *(_QWORD *)(a1 + 120) = v73 * v35;
        if (v73 * v35 <= *(_QWORD *)(a1 + 128))
        {
          result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,true>((_QWORD *)a1, v5);
          if (!(_DWORD)result)
            return result;
          if (*(_QWORD *)(a1 + 120) <= *(_QWORD *)(a1 + 128))
          {
            result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,false>(a1, v3);
            if (!(_DWORD)result)
              return result;
            v74 = *(_QWORD *)(a1 + 120);
            if (v74 <= *(_QWORD *)(a1 + 128))
            {
              if (v74 >= 1)
              {
                result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,false>((char **)a1, v3);
                if (!(_DWORD)result)
                  return result;
                result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,true>((void **)a1, v5);
                if (!(_DWORD)result)
                  return result;
              }
              ++*(_QWORD *)(a1 + 96);
              operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(*(_QWORD **)(a1 + 16), a2, *(_QWORD **)(a1 + 32));
              operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(a1, v3);
              operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(a1, v5);
            }
          }
        }
        return 1;
      }
    }
    else
    {
      v61 = v58;
    }
    do
    {
      v70 = *v61++;
      v71 = **(int **)(v59 + 8 * v70);
      if ((_DWORD)v71)
        v72 = v71 + v32;
      else
        v72 = 0;
      v37 += v72;
    }
    while (v61 != v57);
    goto LABEL_72;
  }
  ++*(_QWORD *)(a1 + 96);
  result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*(_QWORD **)(a1 + 24), v5);
  if ((_DWORD)result)
  {
    v23 = *(_QWORD *)(a1 + 312);
    v24 = (int **)(v23 + 24 * (int)v5);
    v25 = *v24;
    v26 = v24[1];
    if (*v24 != v26)
    {
      do
      {
        v27 = *v25;
        v28 = *(char **)(*(_QWORD *)(a1 + 288) + 8 * v27);
        v29 = *(int *)v28;
        if ((_DWORD)v29)
        {
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(_QWORD **)(a1 + 32), v5, v28 + 4, v29);
          operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v27));
        }
        ++v25;
      }
      while (v25 != v26);
      v23 = *(_QWORD *)(a1 + 312);
      v25 = *(int **)(v23 + 24 * (int)v5);
    }
    *(_QWORD *)(v23 + 24 * (int)v5 + 8) = v25;
    return 1;
  }
  return result;
}

void sub_22DBE18B4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBE18BC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBE18C4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(_QWORD *a1, int a2, int *a3)
{
  int *v3;
  uint64_t v5;
  int *v6;
  int *v7;
  int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int *v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  int *v28;
  uint64_t v29;
  __int128 v30;
  _BOOL8 result;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int **v38;
  unint64_t v39;

  v3 = a3;
  v6 = a3 + 1;
  v5 = *a3;
  v7 = (int *)a1[20];
  a1[13] -= v5;
  v38 = (int **)(a1 + 20);
  a1[21] = v7;
  if ((_DWORD)v5)
  {
    v9 = &v6[v5];
    while (1)
    {
      while (1)
      {
        v10 = *v6;
        if (*v6 != a2)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1[1] + 8) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v11 >> (v10 & 0x3F ^ 1u)) & 1) == 0)
            break;
        }
        --*(_DWORD *)(a1[42] + 4 * v10);
        if (++v6 == v9)
          goto LABEL_34;
      }
      if (((v11 >> (v10 & 0x3F)) & 1) != 0)
      {
        --a1[14];
        operations_research::sat::LiteralWatchers::InprocessingRemoveClause(a1[3], a3);
        return 1;
      }
      v12 = a1[22];
      if ((unint64_t)v7 < v12)
      {
        *v7 = v10;
        v13 = (uint64_t)(v7 + 1);
        goto LABEL_22;
      }
      v14 = *v38;
      v15 = (char *)v7 - (char *)*v38;
      v16 = v15 >> 2;
      v17 = (v15 >> 2) + 1;
      if (v17 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v14;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      v39 = v17;
      if (v17)
      {
        if (v17 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = operator new(4 * v17);
        v20 = (int *)&v19[4 * v16];
        *v20 = v10;
        v13 = (uint64_t)(v20 + 1);
        if (v7 == v14)
        {
LABEL_25:
          a1[20] = v20;
          a1[21] = v13;
          a1[22] = &v19[4 * v39];
          if (!v14)
            goto LABEL_22;
LABEL_21:
          operator delete(v14);
          goto LABEL_22;
        }
      }
      else
      {
        v19 = 0;
        v20 = (int *)(4 * v16);
        *(_DWORD *)(4 * v16) = v10;
        v13 = 4 * v16 + 4;
        if (v7 == v14)
          goto LABEL_25;
      }
      v21 = (char *)(v7 - 1) - (char *)v14;
      if (v21 < 0xBC
        || &v19[v15 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v15 - 4]
        || (int *)((char *)v7 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1
        || (unint64_t)((char *)v7 - &v19[v15]) < 0x20)
      {
        break;
      }
      v25 = (v21 >> 2) + 1;
      v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      v22 = &v7[v26 / 0xFFFFFFFFFFFFFFFCLL];
      v20 = (int *)((char *)v20 - v26);
      v27 = &v19[4 * v16 - 16];
      v28 = v7 - 4;
      v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 8;
        v29 -= 8;
      }
      while (v29);
      v23 = v39;
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
LABEL_20:
      a1[20] = v20;
      a1[21] = v13;
      a1[22] = &v19[4 * v23];
      if (v14)
        goto LABEL_21;
LABEL_22:
      a1[21] = v13;
      v7 = (int *)v13;
      if (++v6 == v9)
      {
LABEL_34:
        v3 = a3;
        result = operations_research::sat::LiteralWatchers::InprocessingRewriteClause(a1[3], a3, *v38, v7 - *v38);
        if (result)
          goto LABEL_37;
        return result;
      }
    }
    v22 = v7;
    v23 = v39;
    do
    {
LABEL_19:
      v24 = *--v22;
      *--v20 = v24;
    }
    while (v22 != v14);
    goto LABEL_20;
  }
  result = operations_research::sat::LiteralWatchers::InprocessingRewriteClause(a1[3], a3, v7, 0);
  if (result)
  {
LABEL_37:
    v32 = *v3;
    if ((_DWORD)v32)
    {
      a1[13] += v32;
    }
    else
    {
      --a1[14];
      v33 = (int *)a1[20];
      v34 = (int *)a1[21];
      if (v33 != v34)
      {
        v35 = a1[42];
        do
        {
          v36 = *v33++;
          --*(_DWORD *)(v35 + 4 * v36);
        }
        while (v33 != v34);
      }
    }
    return 1;
  }
  return result;
}

uint64_t operations_research::IntegerPriorityQueue<operations_research::sat::BoundedVariableElimination::VariableWithPriority,std::less<operations_research::sat::BoundedVariableElimination::VariableWithPriority>>::ChangePriority(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(*(_QWORD *)(result + 32) + 4 * (int)a2);
  if ((int)v2 < 2 || *(_DWORD *)(*(_QWORD *)(result + 8) + ((4 * v2) & 0x3FFFFFFF8) + 4) >= SHIDWORD(a2))
  {
    v7 = *(_DWORD *)result;
    v8 = 2 * v2;
    v9 = (2 * v2) | 1;
    if (v9 <= *(_DWORD *)result)
    {
      while (1)
      {
        v14 = *(_QWORD *)(result + 8);
        v15 = *(_QWORD *)(v14 + 8 * v8);
        v13 = *(_QWORD *)(v14 + 8 * v9);
        if (SHIDWORD(v15) >= SHIDWORD(v13))
        {
          v13 = *(_QWORD *)(v14 + 8 * v8);
          v9 = v8;
          if (SHIDWORD(a2) >= SHIDWORD(v15))
            goto LABEL_15;
        }
        else if (SHIDWORD(a2) >= SHIDWORD(v13))
        {
LABEL_15:
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * (int)v2) = a2;
          *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2) = v2;
          return result;
        }
        *(_QWORD *)(v14 + 8 * (int)v2) = v13;
        *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)v13) = v2;
        v10 = v9;
        v8 = 2 * v9;
        v9 = (2 * v9) | 1;
        LODWORD(v2) = v10;
        if (v9 > v7)
          goto LABEL_8;
      }
    }
    v10 = *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2);
LABEL_8:
    if (v8 > v7 || (v11 = *(_QWORD *)(result + 8), v12 = *(_QWORD *)(v11 + 8 * v8), SHIDWORD(a2) >= SHIDWORD(v12)))
    {
      *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v10) = a2;
      *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2) = v10;
    }
    else
    {
      *(_QWORD *)(v11 + 8 * v10) = v12;
      *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)v12) = v10;
      *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v8) = a2;
      *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2) = v8;
    }
  }
  else
  {
    while (1)
    {
      v3 = v2 >> 1;
      v4 = *(_QWORD *)(result + 8);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (SHIDWORD(v5) >= SHIDWORD(a2))
        break;
      *(_QWORD *)(v4 + 8 * v2) = v5;
      *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)v5) = v2;
      v6 = v2 > 3;
      LODWORD(v2) = v2 >> 1;
      if (!v6)
      {
        *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v3) = a2;
        *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2) = v3;
        return result;
      }
    }
    *(_QWORD *)(v4 + 8 * v2) = a2;
    *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (int)a2) = v2;
  }
  return result;
}

uint64_t operations_research::sat::BoundedVariableElimination::DeleteClause(uint64_t a1, int *a2)
{
  uint64_t v3;
  int *v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  void **v37;

  v4 = a2 + 1;
  v3 = *a2;
  v5 = *(int64x2_t *)(a1 + 104);
  v6.i64[1] = -1;
  v6.i64[0] = v3;
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  v6.i64[0] = vsubq_s64(v5, v6).u64[0];
  v6.i64[1] = vaddq_s64(v5, v7).i64[1];
  *(int64x2_t *)(a1 + 104) = v6;
  if ((_DWORD)v3)
  {
    v37 = (void **)(a1 + 264);
    v8 = &v4[v3];
    while (1)
    {
      v10 = *v4;
      v11 = (int)v10 >> 1;
      --*(_DWORD *)(*(_QWORD *)(a1 + 336) + 4 * v10);
      v12 = (uint64_t)(int)v10 >> 1;
      v13 = *(_QWORD *)(a1 + 240);
      v14 = v12 >> 6;
      v15 = *(_QWORD *)(v13 + 8 * v14);
      if ((v15 & (1 << v11)) != 0)
        goto LABEL_5;
      *(_QWORD *)(v13 + 8 * v14) = v15 | (1 << v11);
      v17 = *(int **)(a1 + 272);
      v16 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v17 >= v16)
        break;
      *v17 = v11;
      v9 = (uint64_t)(v17 + 1);
LABEL_4:
      *(_QWORD *)(a1 + 272) = v9;
LABEL_5:
      if (++v4 == v8)
        return operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*(_QWORD *)(a1 + 24), a2);
    }
    v18 = (int *)*v37;
    v19 = (char *)v17 - (_BYTE *)*v37;
    v20 = v19 >> 2;
    v21 = (v19 >> 2) + 1;
    if (v21 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = v16 - (_QWORD)v18;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(4 * v23);
      v25 = (int *)&v24[4 * v20];
      *v25 = v11;
      v9 = (uint64_t)(v25 + 1);
      if (v17 == v18)
        goto LABEL_25;
    }
    else
    {
      v24 = 0;
      v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v11;
      v9 = 4 * v20 + 4;
      if (v17 == v18)
      {
LABEL_25:
        *(_QWORD *)(a1 + 264) = v25;
        *(_QWORD *)(a1 + 272) = v9;
        *(_QWORD *)(a1 + 280) = &v24[4 * v23];
        if (v18)
          operator delete(v18);
        goto LABEL_4;
      }
    }
    v26 = (char *)(v17 - 1) - (char *)v18;
    if (v26 < 0x2C)
      goto LABEL_33;
    if ((unint64_t)((char *)v17 - &v24[v19]) < 0x20)
      goto LABEL_33;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v17[v28 / 0xFFFFFFFFFFFFFFFCLL];
    v25 = (int *)((char *)v25 - v28);
    v30 = &v24[4 * v20 - 16];
    v31 = v17 - 4;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 8;
      v32 -= 8;
    }
    while (v32);
    v17 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_33:
      do
      {
        v34 = *--v17;
        *--v25 = v34;
      }
      while (v17 != v18);
    }
    goto LABEL_25;
  }
  return operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*(_QWORD *)(a1 + 24), a2);
}

uint64_t operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(uint64_t result, int a2)
{
  uint64_t v3;
  int **v4;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v3 = *(_QWORD *)(result + 312);
  v4 = (int **)(v3 + 24 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    v7 = result;
    do
    {
      v9 = *v5;
      v10 = *(char **)(*(_QWORD *)(v7 + 288) + 8 * v9);
      v11 = *(int *)v10;
      if ((_DWORD)v11)
      {
        operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(_QWORD **)(v7 + 32), a2, v10 + 4, v11);
        result = operations_research::sat::BoundedVariableElimination::DeleteClause(v7, *(int **)(*(_QWORD *)(v7 + 288) + 8 * v9));
      }
      ++v5;
    }
    while (v5 != v6);
    v3 = *(_QWORD *)(v7 + 312);
    v5 = *(int **)(v3 + 24 * a2);
  }
  *(_QWORD *)(v3 + 24 * a2 + 8) = v5;
  return result;
}

void operations_research::sat::BoundedVariableElimination::AddClause(uint64_t a1, int *a2, unint64_t a3)
{
  int *v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _OWORD *v52;
  int *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  void **v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  unint64_t v61;
  _DWORD *v62;

  v4 = a2;
  v5 = a1;
  v62 = operations_research::sat::LiteralWatchers::InprocessingAddClause(*(_QWORD *)(a1 + 24), a2, a3);
  if (v62)
  {
    v6 = vdupq_n_s64(1uLL);
    v6.i64[0] = a3;
    *(int64x2_t *)(v5 + 104) = vaddq_s64(*(int64x2_t *)(v5 + 104), v6);
    v8 = *(_QWORD *)(v5 + 288);
    v7 = *(_QWORD *)(v5 + 296);
    gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back((void **)(v5 + 288), &v62);
    if (a3)
    {
      v57 = (void **)(v5 + 264);
      v58 = v5;
      v60 = &v4[a3];
      v61 = (unint64_t)(v7 - v8) >> 3;
      while (1)
      {
        v10 = *v4;
        ++*(_DWORD *)(*(_QWORD *)(v5 + 336) + 4 * v10);
        v11 = *(_QWORD *)(v5 + 312) + 24 * (int)v10;
        v12 = (uint64_t *)(v11 + 8);
        v13 = *(char **)(v11 + 8);
        v14 = *(_QWORD *)(v11 + 16);
        if ((unint64_t)v13 < v14)
        {
          *(_DWORD *)v13 = v61;
          v15 = (uint64_t)(v13 + 4);
          goto LABEL_28;
        }
        v16 = *(char **)v11;
        v17 = (uint64_t)&v13[-*(_QWORD *)v11];
        v18 = v17 >> 2;
        v19 = (v17 >> 2) + 1;
        if (v19 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v16;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        v59 = v19;
        if (v19)
        {
          if (v19 >> 62)
            goto LABEL_52;
          v21 = operator new(4 * v19);
          v22 = &v21[4 * v18];
          *v22 = v61;
          v15 = (uint64_t)(v22 + 1);
          if (v13 == v16)
          {
LABEL_20:
            v5 = v58;
            goto LABEL_26;
          }
        }
        else
        {
          v21 = 0;
          v22 = (_DWORD *)(4 * v18);
          *(_DWORD *)(4 * v18) = v61;
          v15 = 4 * v18 + 4;
          if (v13 == v16)
            goto LABEL_20;
        }
        v23 = v13 - 4 - v16;
        if (v23 < 0x2C)
          break;
        v24 = v13 - &v21[v17];
        v5 = v58;
        if (v24 < 0x20)
          goto LABEL_25;
        v25 = (v23 >> 2) + 1;
        v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        v27 = &v13[-v26];
        v22 = (_DWORD *)((char *)v22 - v26);
        v28 = &v21[4 * v18 - 16];
        v29 = v13 - 16;
        v30 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        v13 = v27;
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_25;
LABEL_26:
        *(_QWORD *)v11 = v22;
        *v12 = v15;
        *(_QWORD *)(v11 + 16) = &v21[4 * v59];
        if (v16)
          operator delete(v16);
LABEL_28:
        *v12 = v15;
        v33 = (int)v10 >> 1;
        v34 = *(_QWORD *)(v5 + 240);
        v35 = (unint64_t)((uint64_t)(int)v10 >> 1) >> 6;
        v36 = *(_QWORD *)(v34 + 8 * v35);
        if ((v36 & (1 << ((int)v10 >> 1))) != 0)
          goto LABEL_6;
        *(_QWORD *)(v34 + 8 * v35) = v36 | (1 << v33);
        v38 = *(int **)(v5 + 272);
        v37 = *(_QWORD *)(v5 + 280);
        if ((unint64_t)v38 >= v37)
        {
          v39 = (int *)*v57;
          v40 = (char *)v38 - (_BYTE *)*v57;
          v41 = v40 >> 2;
          v42 = (v40 >> 2) + 1;
          if (v42 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v43 = v37 - (_QWORD)v39;
          if (v43 >> 1 > v42)
            v42 = v43 >> 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            if (v44 >> 62)
LABEL_52:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v45 = operator new(4 * v44);
            v46 = (int *)&v45[4 * v41];
            *v46 = v33;
            v9 = (uint64_t)(v46 + 1);
            if (v38 != v39)
            {
LABEL_39:
              v47 = (char *)(v38 - 1) - (char *)v39;
              if (v47 < 0x2C)
              {
                v5 = v58;
                goto LABEL_47;
              }
              v48 = (char *)v38 - &v45[v40];
              v5 = v58;
              if (v48 < 0x20)
                goto LABEL_56;
              v49 = (v47 >> 2) + 1;
              v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              v51 = &v38[v50 / 0xFFFFFFFFFFFFFFFCLL];
              v46 = (int *)((char *)v46 - v50);
              v52 = &v45[4 * v41 - 16];
              v53 = v38 - 4;
              v54 = v49 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 8;
                v54 -= 8;
              }
              while (v54);
              v38 = v51;
              if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_56:
                do
                {
LABEL_47:
                  v56 = *--v38;
                  *--v46 = v56;
                }
                while (v38 != v39);
              }
LABEL_48:
              *(_QWORD *)(v5 + 264) = v46;
              *(_QWORD *)(v5 + 272) = v9;
              *(_QWORD *)(v5 + 280) = &v45[4 * v44];
              if (v39)
                operator delete(v39);
              goto LABEL_5;
            }
          }
          else
          {
            v45 = 0;
            v46 = (int *)(4 * v41);
            *(_DWORD *)(4 * v41) = v33;
            v9 = 4 * v41 + 4;
            if (v38 != v39)
              goto LABEL_39;
          }
          v5 = v58;
          goto LABEL_48;
        }
        *v38 = v33;
        v9 = (uint64_t)(v38 + 1);
LABEL_5:
        *(_QWORD *)(v5 + 272) = v9;
LABEL_6:
        if (++v4 == v60)
          return;
      }
      v5 = v58;
      do
      {
LABEL_25:
        v32 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v32;
      }
      while (v13 != v16);
      goto LABEL_26;
    }
  }
}

uint64_t operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,true>(_QWORD *a1, int a2)
{
  void **v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  _DWORD *v38;
  char v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  uint64_t v47;
  unint64_t v48[2];
  uint64_t *v49;
  int v50;
  int v51;

  v51 = a2;
  v47 = *(int *)(*a1 + 336);
  v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications((_QWORD *)a1[2], a2);
  v5 = (_QWORD *)(a1[39] + 24 * a2);
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = *v5;
  if (v6 == *v5)
  {
    v39 = 1;
    return v39 & 1;
  }
  v9 = 0;
  v10 = 0;
  v11 = v47;
  v46 = v4;
  while (1)
  {
    v12 = *(int *)(v8 + 4 * v9);
    v13 = *(int **)(a1[36] + 8 * v12);
    v16 = *v13;
    v15 = v13 + 1;
    v14 = v16;
    if (!(_DWORD)v16)
      goto LABEL_3;
    v17 = a1[17];
    v18 = 4 * v14;
    v19 = 4 * v14;
    v20 = v15;
    do
    {
      v21 = *v20++;
      *(_QWORD *)(v17 + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v19 -= 4;
    }
    while (v19);
    v22 = (int *)*v4;
    v23 = (int *)v4[1];
    v24 = a1[15];
    v25 = v23 == *v4;
    a1[9] += v14 + (((char *)v23 - (_BYTE *)*v4) >> 2);
    if (!v25)
    {
      v26 = v14 + v11;
      do
      {
        v27 = *v22;
        v50 = v27;
        if (v27 == v51)
        {
          v42 = v24;
          v43 = v12;
          v44 = v7;
          v45 = v5;
          v49 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(&v50, &v51, "l != lit");
          if (v49)
          {
            google::LogMessageFatal::LogMessageFatal(v48, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1335, &v49);
            google::LogMessage::stream((google::LogMessage *)v48);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v48);
          }
          v27 = v50;
          v4 = v46;
          v11 = v47;
          v7 = v44;
          v5 = v45;
          v24 = v42;
          v12 = v43;
        }
        v28 = ((unint64_t)v27 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v29 = v27 & 0x3F;
        v30 = *(_QWORD *)(a1[17] + v28);
        if (((v30 >> (v29 ^ 1u)) & 1) == 0)
        {
          if (((v30 >> v29) & 1) != 0)
          {
            v31 = 0;
            goto LABEL_17;
          }
          a1[15] += v26;
        }
        ++v22;
      }
      while (v22 != v23);
    }
    v31 = 1;
LABEL_17:
    v32 = a1[17];
    do
    {
      v33 = *v15++;
      *(_QWORD *)(v32 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v33);
      v18 -= 4;
    }
    while (v18);
    v34 = a1[16];
    if ((v31 & 1) == 0)
      break;
LABEL_22:
    if (a1[15] > v34)
    {
      v40 = 0;
      LOBYTE(v8) = 1;
      goto LABEL_29;
    }
    v6 = *v7;
    v8 = *v5;
LABEL_3:
    v9 = ++v10;
    if (v10 >= (unint64_t)((v6 - v8) >> 2))
    {
      v40 = 1;
      goto LABEL_29;
    }
  }
  v35 = v7;
  v36 = v5;
  ++a1[10];
  a1[15] = v24;
  a1[16] = v34 - (v14 + v11);
  if (operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v51, *(int **)(a1[36] + 8 * v12)))
  {
    v5 = v36;
    v7 = v35;
    v37 = *(_DWORD *)(*v36 + 4 * v9);
    v38 = (_DWORD *)(*v35 - 4);
    *(_DWORD *)(*v36 + 4 * v9) = *v38;
    *v38 = v37;
    *v35 = v38;
    --v10;
    v34 = a1[16];
    v4 = v46;
    v11 = v47;
    goto LABEL_22;
  }
  v40 = 0;
  LOBYTE(v8) = 0;
LABEL_29:
  v39 = v40 | v8;
  return v39 & 1;
}

void sub_22DBE26EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,false>(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  int v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  char v58;
  int v59;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73[2];
  uint64_t *v74;
  int v75;

  v75 = a2;
  v4 = *(int *)(*(_QWORD *)a1 + 336);
  v64 = operations_research::sat::BinaryImplicationGraph::DirectImplications(*(_QWORD **)(a1 + 16), a2);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 24 * a2);
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = *v5;
  if (v6 != *v5)
  {
    v9 = 0;
    v10 = 0;
    v61 = v4 - 1;
    v62 = v5 + 1;
    v11 = v4;
    v69 = v4;
    v63 = v5;
    do
    {
      v12 = *(int **)(*(_QWORD *)(a1 + 288) + 8 * *(int *)(v8 + 4 * v9));
      v15 = *v12;
      v13 = (char *)(v12 + 1);
      v14 = v15;
      if ((_DWORD)v15)
      {
        v65 = v9;
        v66 = *(int *)(v8 + 4 * v9);
        v16 = *(_QWORD *)(a1 + 136);
        v17 = 4 * v14;
        v18 = 4 * v14;
        v19 = v13;
        do
        {
          v20 = *(_DWORD *)v19;
          v19 += 4;
          *(_QWORD *)(v16 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          v18 -= 4;
        }
        while (v18);
        v22 = (char *)*v64;
        v21 = (char *)v64[1];
        v70 = *(_QWORD *)(a1 + 120);
        v71 = v13;
        *(_QWORD *)(a1 + 72) += v14 + ((v21 - (_BYTE *)*v64) >> 2);
        if (v21 != v22)
        {
          v23 = v14 + v11;
          do
          {
            v24 = *(_DWORD *)v22;
            LODWORD(v72) = v24;
            if (v24 == v75)
            {
              v74 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int *)&v72, &v75, "l != lit");
              if (v74)
              {
                google::LogMessageFatal::LogMessageFatal(v73, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1335, &v74);
                google::LogMessage::stream((google::LogMessage *)v73);
                goto LABEL_62;
              }
              v24 = v72;
              v11 = v69;
              v13 = v71;
            }
            v25 = ((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v26 = v24 & 0x3F;
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + v25);
            if (((v27 >> (v26 ^ 1u)) & 1) == 0)
            {
              if (((v27 >> v26) & 1) != 0)
              {
LABEL_42:
                v49 = 1;
                goto LABEL_43;
              }
              *(_QWORD *)(a1 + 120) += v23;
            }
            v22 += 4;
          }
          while (v22 != v21);
        }
        v28 = (uint64_t *)(*(_QWORD *)(a1 + 312) + 24 * (v75 ^ 1));
        v29 = (_DWORD *)v28[1];
        v67 = v28 + 1;
        v68 = v28;
        v30 = *v28;
        if (v29 != (_DWORD *)*v28)
        {
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v35 = *(_QWORD *)(a1 + 120);
            v34 = *(_QWORD *)(a1 + 128);
            if (v35 > v34)
              goto LABEL_41;
            v36 = *(int *)(v30 + 4 * v31);
            v37 = *(int **)(*(_QWORD *)(a1 + 288) + 8 * v36);
            v38 = *v37;
            if (!(_DWORD)v38)
              goto LABEL_20;
            v39 = 0;
            v40 = v37 + 1;
            v41 = *(_QWORD *)(a1 + 72);
            v42 = 4 * v38;
            do
            {
              v43 = *v40;
              if ((_DWORD)v43 != (v75 ^ 1))
              {
                v44 = (v43 >> 3) & 0x1FFFFFFFFFFFFFF8;
                v45 = v43 & 0x3F;
                v46 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + v44);
                if (((v46 >> (v45 ^ 1u)) & 1) != 0)
                {
                  *(_QWORD *)(a1 + 72) = v41 + 1;
                  goto LABEL_20;
                }
                if (((v46 >> v45) & 1) == 0)
                  ++v39;
              }
              ++v40;
              ++v41;
              v42 -= 4;
            }
            while (v42);
            *(_QWORD *)(a1 + 72) = v41;
            v47 = v39 + v14;
            if (v47 <= v38)
              break;
            if (!v39)
              goto LABEL_42;
            if ((unint64_t)(v14 - 1 + v39) >= 0x65)
            {
              v49 = 0;
              *(_QWORD *)(a1 + 120) = v34 + 1;
              goto LABEL_43;
            }
            *(_QWORD *)(a1 + 120) = v61 + v14 + v39 + v35;
LABEL_20:
            v31 = ++v32;
            if (v32 >= (unint64_t)(((uint64_t)v29 - v30) >> 2))
              goto LABEL_41;
          }
          v72 = v38;
          v73[0] = v39 + v14;
          if (v47 != v38)
          {
            v48 = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v73, (int)&v72, "clause.size() + extra_size == other.size()");
            v74 = v48;
            if (v48)
            {
              google::LogMessageFatal::LogMessageFatal(v73, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1382, &v74);
              google::LogMessage::stream((google::LogMessage *)v73);
LABEL_62:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v73);
            }
            v34 = *(_QWORD *)(a1 + 128);
            v11 = v69;
          }
          ++*(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 128) = v34 - (v38 + v11);
          if (!v39)
          {
            operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v36));
            v49 = 1;
            v11 = v69;
            v13 = v71;
            goto LABEL_43;
          }
          if (operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause((_QWORD *)a1, v75 ^ 1, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v36)))
          {
            v30 = *v68;
            v29 = (_DWORD *)(*v67 - 4);
            v33 = *(_DWORD *)(*v68 + 4 * v31);
            *(_DWORD *)(*v68 + 4 * v31) = *v29;
            *v29 = v33;
            *v67 = v29;
            --v32;
            v11 = v69;
            v13 = v71;
            goto LABEL_20;
          }
LABEL_58:
          v59 = 0;
          LODWORD(v6) = 0;
          return (v59 | v6) & 1;
        }
LABEL_41:
        v49 = 0;
LABEL_43:
        v50 = *(_QWORD *)(a1 + 136);
        v51 = v13;
        v7 = v62;
        v5 = v63;
        do
        {
          v52 = *(_DWORD *)v51;
          v51 += 4;
          *(_QWORD *)(v50 + (((unint64_t)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v52);
          v17 -= 4;
        }
        while (v17);
        v53 = *(_QWORD *)(a1 + 128);
        if ((v49 & 1) != 0)
        {
          ++*(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 120) = v70;
          *(_QWORD *)(a1 + 128) = v53 - (v14 + v11);
          v54 = v66;
          if (!operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause((_QWORD *)a1, v75, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v66)))goto LABEL_58;
          v55 = *(_DWORD *)(*v63 + 4 * v65);
          v56 = (_DWORD *)(*v62 - 4);
          *(_DWORD *)(*v63 + 4 * v65) = *v56;
          *v56 = v55;
          *v62 = v56;
          --v10;
          v57 = *(_QWORD *)(a1 + 120);
          v53 = *(_QWORD *)(a1 + 128);
          v11 = v69;
          v13 = v71;
          if (v57 > v53)
          {
LABEL_59:
            v59 = 0;
            LODWORD(v6) = 1;
            return (v59 | v6) & 1;
          }
        }
        else
        {
          v54 = v66;
          v57 = *(_QWORD *)(a1 + 120);
          if (v57 > v53)
            goto LABEL_59;
        }
        if (v57 == v70)
          v58 = v49;
        else
          v58 = 1;
        if ((v58 & 1) == 0)
        {
          ++*(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 128) = v53 - v14 - v11;
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(_QWORD **)(a1 + 32), v75, v13, v14);
          operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(_QWORD *)(a1 + 288) + 8 * v54));
          v11 = v69;
        }
      }
      v9 = ++v10;
      v8 = *v5;
      v6 = *v7 - *v5;
    }
    while (v10 < (unint64_t)(v6 >> 2));
  }
  v59 = 1;
  return (v59 | v6) & 1;
}

void sub_22DBE2C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBE2C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,false>(char **a1, int a2)
{
  void **v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  int *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  _OWORD *v59;
  int *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  int *v64;
  uint64_t v65;
  int v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  char *v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  char v100;
  char *v101;
  uint64_t v102;
  int v103;
  char *v104;
  _BOOL8 result;
  int v106;
  uint64_t v107;
  _DWORD **v108;
  char *v109;
  void **v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  int *v119;
  char **v120;
  int v121;
  unint64_t v122[2];
  uint64_t *v123;
  int v124;
  int v125[3];

  v125[0] = a2;
  v107 = *((int *)*a1 + 84);
  v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1[2], a2);
  v5 = &a1[39][24 * a2];
  v6 = (_DWORD *)*((_QWORD *)v5 + 1);
  v108 = (_DWORD **)(v5 + 8);
  v109 = v5;
  v110 = v4;
  v7 = *(_QWORD *)v5;
  if (v6 == *(_DWORD **)v5)
    return 1;
  v114 = 0;
  v120 = a1 + 20;
  v8 = 0;
  while (2)
  {
    v112 = v8;
    v113 = *(int *)(v7 + 4 * v8);
    v10 = *(int **)&a1[36][8 * v113];
    v13 = *v10;
    v12 = v10 + 1;
    v11 = v13;
    if (!(_DWORD)v13)
    {
LABEL_4:
      v9 = v114;
      goto LABEL_5;
    }
    v14 = a1[20];
    a1[21] = v14;
    v115 = v11;
    v15 = &v12[v11];
    v119 = v12;
    do
    {
      v17 = *v12;
      if (*v12 != v125[0])
      {
        v18 = (unint64_t)a1[22];
        if ((unint64_t)v14 < v18)
        {
          *(_DWORD *)v14 = v17;
          v16 = (uint64_t)(v14 + 4);
LABEL_9:
          a1[21] = (char *)v16;
          v14 = (char *)v16;
          goto LABEL_10;
        }
        v19 = *v120;
        v20 = v14 - *v120;
        v21 = v20 >> 2;
        v22 = (v20 >> 2) + 1;
        if (v22 >> 62)
LABEL_124:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v23 = v18 - (_QWORD)v19;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 62)
LABEL_125:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(4 * v24);
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = v17;
          v16 = (uint64_t)(v26 + 4);
          if (v14 == v19)
            goto LABEL_27;
        }
        else
        {
          v25 = 0;
          v26 = (char *)(4 * v21);
          *(_DWORD *)(4 * v21) = v17;
          v16 = 4 * v21 + 4;
          if (v14 == v19)
            goto LABEL_27;
        }
        v27 = v14 - 4 - v19;
        if (v27 >= 0xBC)
        {
          if (&v25[v20 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v20 - 4])
          {
            v28 = v14;
          }
          else if (&v14[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
          {
            v28 = v14;
          }
          else if ((unint64_t)(v14 - v25 - v20) >= 0x20)
          {
            v30 = (v27 >> 2) + 1;
            v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            v28 = &v14[-v31];
            v26 -= v31;
            v32 = &v25[4 * v21 - 16];
            v33 = v14 - 16;
            v34 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 8;
            }
            while (v34);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_27:
              a1[20] = v26;
              a1[21] = (char *)v16;
              a1[22] = &v25[4 * v24];
              if (v19)
                operator delete(v19);
              goto LABEL_9;
            }
          }
          else
          {
            v28 = v14;
          }
        }
        else
        {
          v28 = v14;
        }
        do
        {
          v29 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v26 - 1) = v29;
          v26 -= 4;
        }
        while (v28 != v19);
        goto LABEL_27;
      }
LABEL_10:
      *(_QWORD *)&a1[17][((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
      ++v12;
    }
    while (v12 != v15);
    v37 = (int *)*v110;
    v36 = (int *)v110[1];
    v38 = v115;
    v111 = a1[15];
    a1[9] += v115 + (((char *)v36 - (_BYTE *)*v110) >> 2);
    if (v36 != v37)
    {
      while (1)
      {
        v43 = *v37;
        v124 = v43;
        if (v43 == v125[0])
        {
          v123 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(&v124, v125, "l != lit");
          if (v123)
          {
            google::LogMessageFatal::LogMessageFatal(v122, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1335, &v123);
            google::LogMessage::stream((google::LogMessage *)v122);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v122);
          }
          v43 = v124;
        }
        v44 = *(_QWORD *)&a1[17][((unint64_t)v43 >> 3) & 0x1FFFFFFFFFFFFFF8];
        if (((v44 >> (v43 & 0x3F ^ 1u)) & 1) != 0)
          goto LABEL_45;
        if (((v44 >> (v43 & 0x3F)) & 1) != 0)
        {
          v100 = 1;
          v41 = v119;
          goto LABEL_117;
        }
        v46 = (int *)a1[21];
        v45 = (unint64_t)a1[22];
        if ((unint64_t)v46 >= v45)
          break;
        *v46 = v43;
        v42 = (uint64_t)(v46 + 1);
LABEL_44:
        a1[21] = (char *)v42;
        operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (v42 - (uint64_t)a1[20]) >> 2);
        a1[21] -= 4;
LABEL_45:
        if (++v37 == v36)
          goto LABEL_41;
      }
      v47 = (int *)*v120;
      v48 = (char *)v46 - *v120;
      v49 = v48 >> 2;
      v50 = (v48 >> 2) + 1;
      if (v50 >> 62)
        goto LABEL_124;
      v51 = v45 - (_QWORD)v47;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 62)
          goto LABEL_125;
        v53 = operator new(4 * v52);
        v54 = (int *)&v53[4 * v49];
        *v54 = v43;
        v42 = (uint64_t)(v54 + 1);
        if (v46 == v47)
          goto LABEL_67;
      }
      else
      {
        v53 = 0;
        v54 = (int *)(4 * v49);
        *(_DWORD *)(4 * v49) = v43;
        v42 = 4 * v49 + 4;
        if (v46 == v47)
        {
LABEL_67:
          a1[20] = (char *)v54;
          a1[21] = (char *)v42;
          a1[22] = &v53[4 * v52];
          if (v47)
            operator delete(v47);
          v38 = v115;
          goto LABEL_44;
        }
      }
      v55 = (char *)(v46 - 1) - (char *)v47;
      if (v55 < 0x2C)
        goto LABEL_129;
      if ((unint64_t)((char *)v46 - &v53[v48]) < 0x20)
        goto LABEL_129;
      v56 = (v55 >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v58 = &v46[v57 / 0xFFFFFFFFFFFFFFFCLL];
      v54 = (int *)((char *)v54 - v57);
      v59 = &v53[4 * v49 - 16];
      v60 = v46 - 4;
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 8;
        v61 -= 8;
      }
      while (v61);
      v46 = v58;
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_129:
        do
        {
          v63 = *--v46;
          *--v54 = v63;
        }
        while (v46 != v47);
      }
      goto LABEL_67;
    }
LABEL_41:
    v116 = &a1[39][24 * (v125[0] ^ 1) + 8];
    v117 = &a1[39][24 * (v125[0] ^ 1)];
    v39 = *(_QWORD *)v117;
    if (*(_QWORD *)v116 == *(_QWORD *)v117)
    {
      v100 = 0;
      v41 = v119;
      goto LABEL_117;
    }
    v40 = 0;
    v41 = v119;
    while (2)
    {
      v64 = *(int **)&a1[36][8 * *(int *)(v39 + 4 * v40)];
      v65 = *v64;
      if (!(_DWORD)v65)
        goto LABEL_74;
      v118 = v40;
      v66 = 0;
      v67 = v64 + 1;
      v68 = (uint64_t)&v64[v65 + 1];
      while (2)
      {
        v70 = *v67;
        ++a1[9];
        if (v70 == (v125[0] ^ 1))
          goto LABEL_79;
        v71 = *(_QWORD *)&a1[17][((unint64_t)v70 >> 3) & 0x1FFFFFFFFFFFFFF8];
        if (((v71 >> (v70 & 0x3F ^ 1u)) & 1) == 0)
        {
          if (((v71 >> (v70 & 0x3F)) & 1) != 0)
            goto LABEL_79;
          v73 = a1[21];
          v72 = (unint64_t)a1[22];
          if ((unint64_t)v73 < v72)
          {
            *(_DWORD *)v73 = v70;
            v69 = (uint64_t)(v73 + 4);
            goto LABEL_78;
          }
          v74 = *v120;
          v75 = v73 - *v120;
          v76 = v75 >> 2;
          v77 = (v75 >> 2) + 1;
          if (v77 >> 62)
            goto LABEL_124;
          v121 = v66;
          v78 = v72 - (_QWORD)v74;
          if (v78 >> 1 > v77)
            v77 = v78 >> 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            if (v79 >> 62)
              goto LABEL_125;
            v80 = operator new(4 * v79);
            v81 = &v80[4 * v76];
            *(_DWORD *)v81 = v70;
            v69 = (uint64_t)(v81 + 4);
            if (v73 != v74)
            {
LABEL_93:
              v82 = v73 - 4 - v74;
              if (v82 < 0x2C)
              {
                v41 = v119;
                goto LABEL_101;
              }
              v83 = v73 - &v80[v75];
              v41 = v119;
              if (v83 < 0x20)
                goto LABEL_130;
              v84 = (v82 >> 2) + 1;
              v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
              v86 = &v73[-v85];
              v81 -= v85;
              v87 = &v80[4 * v76 - 16];
              v88 = v73 - 16;
              v89 = v84 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v90 = *(_OWORD *)v88;
                *(v87 - 1) = *((_OWORD *)v88 - 1);
                *v87 = v90;
                v87 -= 2;
                v88 -= 32;
                v89 -= 8;
              }
              while (v89);
              v73 = v86;
              if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_130:
                do
                {
LABEL_101:
                  v91 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v91;
                  v81 -= 4;
                }
                while (v73 != v74);
              }
LABEL_102:
              a1[20] = v81;
              a1[21] = (char *)v69;
              a1[22] = &v80[4 * v79];
              if (v74)
                operator delete(v74);
              v66 = v121;
LABEL_78:
              ++v66;
              a1[21] = (char *)v69;
LABEL_79:
              if (++v67 == (int *)v68)
              {
                if (v66)
                {
                  operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (a1[21] - a1[20]) >> 2);
                  v92 = a1[20];
                  v93 = (a1[21] - v92) >> 2;
                  v94 = v93 >= v66;
                  v95 = v93 - v66;
                  v38 = v115;
                  if (v94)
                    a1[21] = &v92[4 * v95];
                  else
                    std::vector<operations_research::sat::Literal>::__append((uint64_t)v120, -(uint64_t)v66);
                  goto LABEL_73;
                }
                v100 = 1;
                v38 = v115;
                goto LABEL_117;
              }
              continue;
            }
          }
          else
          {
            v80 = 0;
            v81 = (char *)(4 * v76);
            *(_DWORD *)(4 * v76) = v70;
            v69 = 4 * v76 + 4;
            if (v73 != v74)
              goto LABEL_93;
          }
          v41 = v119;
          goto LABEL_102;
        }
        break;
      }
      v96 = a1[20];
      v97 = (a1[21] - v96) >> 2;
      v98 = v97 - v66;
      if (v97 < v66)
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)v120, -(uint64_t)v66);
        v38 = v115;
LABEL_73:
        v40 = v118;
        goto LABEL_74;
      }
      v99 = v97 > v98;
      v38 = v115;
      v40 = v118;
      if (v99)
        a1[21] = &v96[4 * v98];
LABEL_74:
      ++v40;
      v39 = *(_QWORD *)v117;
      if (v40 < (uint64_t)(*(_QWORD *)v116 - *(_QWORD *)v117) >> 2)
        continue;
      break;
    }
    v100 = 0;
LABEL_117:
    v101 = a1[17];
    v102 = 4 * v38;
    do
    {
      v103 = *v41++;
      *(_QWORD *)&v101[((unint64_t)v103 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v103);
      v102 -= 4;
    }
    while (v102);
    if ((v100 & 1) == 0)
    {
      v6 = *v108;
      v7 = *(_QWORD *)v109;
      goto LABEL_4;
    }
    ++a1[10];
    v104 = &a1[16][-v38 - v107];
    a1[15] = v111;
    a1[16] = v104;
    result = operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v125[0], *(int **)&a1[36][8 * v113]);
    if (!result)
      return result;
    v7 = *(_QWORD *)v109;
    v6 = *v108 - 1;
    v106 = *(_DWORD *)(*(_QWORD *)v109 + 4 * v112);
    *(_DWORD *)(*(_QWORD *)v109 + 4 * v112) = *v6;
    *v6 = v106;
    *v108 = v6;
    v9 = v114 - 1;
LABEL_5:
    v114 = v9 + 1;
    v8 = v114;
    if (v114 < (unint64_t)(((uint64_t)v6 - v7) >> 2))
      continue;
    return 1;
  }
}

void sub_22DBE34F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,true>(void **a1, int a2)
{
  void **v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  unint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int *v37;
  int *v38;
  int v39;
  char *v40;
  uint64_t v41;
  int v42;
  char *v43;
  _BOOL8 result;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  int *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  _OWORD *v63;
  int *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  _DWORD **v69;
  uint64_t *v70;
  void **v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int *v77;
  int *v78;
  void **v79;
  unint64_t v80[2];
  uint64_t *v81;
  int v82;
  int v83;

  v83 = a2;
  v68 = *((int *)*a1 + 84);
  v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1[2], a2);
  v5 = (char *)a1[39] + 24 * a2;
  v6 = (_DWORD *)v5[1];
  v69 = (_DWORD **)(v5 + 1);
  v70 = v5;
  v71 = v4;
  v7 = *v5;
  if (v6 == (_DWORD *)*v5)
    return 1;
  v8 = 0;
  v9 = 0;
  v79 = a1 + 20;
  while (2)
  {
    v10 = (int *)*((_QWORD *)a1[36] + *(int *)(v7 + 4 * v8));
    v13 = *v10;
    v12 = v10 + 1;
    v11 = v13;
    if (!(_DWORD)v13)
      goto LABEL_4;
    v73 = *(int *)(v7 + 4 * v8);
    v74 = v8;
    v75 = v9;
    v76 = v11;
    v14 = (char *)a1[20];
    a1[21] = v14;
    v15 = &v12[v11];
    v16 = v12;
    v77 = v15;
    do
    {
      v18 = *v16;
      if (*v16 != v83)
      {
        v19 = (unint64_t)a1[22];
        if ((unint64_t)v14 < v19)
        {
          *(_DWORD *)v14 = v18;
          v17 = (uint64_t)(v14 + 4);
LABEL_8:
          a1[21] = (void *)v17;
          v14 = (char *)v17;
          goto LABEL_9;
        }
        v20 = (char *)*v79;
        v21 = v14 - (_BYTE *)*v79;
        v22 = v21 >> 2;
        v23 = (v21 >> 2) + 1;
        if (v23 >> 62)
LABEL_77:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v24 = v19 - (_QWORD)v20;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 62)
LABEL_78:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(4 * v25);
          v27 = &v26[4 * v22];
          *v27 = v18;
          v17 = (uint64_t)(v27 + 1);
          if (v14 != v20)
          {
LABEL_21:
            v28 = v14 - 4 - v20;
            if (v28 < 0xBC
              || &v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4]
              || &v14[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
              || (unint64_t)(v14 - v26 - v21) < 0x20)
            {
              v29 = v14;
            }
            else
            {
              v31 = (v28 >> 2) + 1;
              v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
              v29 = &v14[-v32];
              v27 = (_DWORD *)((char *)v27 - v32);
              v33 = &v26[4 * v22 - 16];
              v34 = v14 - 16;
              v35 = v31 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 8;
              }
              while (v35);
              if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_24:
                a1[20] = v27;
                a1[21] = (void *)v17;
                a1[22] = &v26[4 * v25];
                if (!v20)
                {
LABEL_26:
                  v15 = v77;
                  goto LABEL_8;
                }
LABEL_25:
                operator delete(v20);
                goto LABEL_26;
              }
            }
            do
            {
              v30 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *--v27 = v30;
            }
            while (v29 != v20);
            goto LABEL_24;
          }
        }
        else
        {
          v26 = 0;
          v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v18;
          v17 = 4 * v22 + 4;
          if (v14 != v20)
            goto LABEL_21;
        }
        a1[20] = v27;
        a1[21] = (void *)v17;
        a1[22] = &v26[4 * v25];
        if (!v20)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_9:
      *(_QWORD *)((char *)a1[17] + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      ++v16;
    }
    while (v16 != v15);
    v38 = (int *)*v71;
    v37 = (int *)v71[1];
    v72 = a1[15];
    a1[9] = (char *)a1[9] + v76 + (((char *)v37 - (_BYTE *)*v71) >> 2);
    v78 = v37;
    if (v37 != v38)
    {
      while (1)
      {
        v47 = *v38;
        v82 = v47;
        if (v47 == v83)
        {
          v81 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(&v82, &v83, "l != lit");
          if (v81)
          {
            google::LogMessageFatal::LogMessageFatal(v80, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1335, &v81);
            google::LogMessage::stream((google::LogMessage *)v80);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v80);
          }
          v47 = v82;
        }
        v48 = *(_QWORD *)((char *)a1[17] + (((unint64_t)v47 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v48 >> (v47 & 0x3F ^ 1u)) & 1) != 0)
          goto LABEL_46;
        if (((v48 >> (v47 & 0x3F)) & 1) != 0)
        {
          v39 = 0;
          goto LABEL_39;
        }
        v50 = (int *)a1[21];
        v49 = (unint64_t)a1[22];
        if ((unint64_t)v50 >= v49)
          break;
        *v50 = v47;
        v46 = (uint64_t)(v50 + 1);
LABEL_45:
        a1[21] = (void *)v46;
        operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (v46 - (uint64_t)a1[20]) >> 2);
        a1[21] = (char *)a1[21] - 4;
LABEL_46:
        if (++v38 == v37)
          goto LABEL_38;
      }
      v51 = (int *)*v79;
      v52 = (char *)v50 - (_BYTE *)*v79;
      v53 = v52 >> 2;
      v54 = (v52 >> 2) + 1;
      if (v54 >> 62)
        goto LABEL_77;
      v55 = v49 - (_QWORD)v51;
      if (v55 >> 1 > v54)
        v54 = v55 >> 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
        v56 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 62)
          goto LABEL_78;
        v57 = operator new(4 * v56);
        v58 = (int *)&v57[4 * v53];
        *v58 = v47;
        v46 = (uint64_t)(v58 + 1);
        if (v50 == v51)
          goto LABEL_69;
      }
      else
      {
        v57 = 0;
        v58 = (int *)(4 * v53);
        *(_DWORD *)(4 * v53) = v47;
        v46 = 4 * v53 + 4;
        if (v50 == v51)
        {
LABEL_69:
          a1[20] = v58;
          a1[21] = (void *)v46;
          a1[22] = &v57[4 * v56];
          if (v51)
            operator delete(v51);
          v37 = v78;
          goto LABEL_45;
        }
      }
      v59 = (char *)(v50 - 1) - (char *)v51;
      if (v59 < 0x2C)
        goto LABEL_82;
      if ((unint64_t)((char *)v50 - &v57[v52]) < 0x20)
        goto LABEL_82;
      v60 = (v59 >> 2) + 1;
      v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
      v62 = &v50[v61 / 0xFFFFFFFFFFFFFFFCLL];
      v58 = (int *)((char *)v58 - v61);
      v63 = &v57[4 * v53 - 16];
      v64 = v50 - 4;
      v65 = v60 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v66 = *(_OWORD *)v64;
        *(v63 - 1) = *((_OWORD *)v64 - 1);
        *v63 = v66;
        v63 -= 2;
        v64 -= 8;
        v65 -= 8;
      }
      while (v65);
      v50 = v62;
      if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_82:
        do
        {
          v67 = *--v50;
          *--v58 = v67;
        }
        while (v50 != v51);
      }
      goto LABEL_69;
    }
LABEL_38:
    v39 = 1;
LABEL_39:
    v9 = v75;
    v40 = (char *)a1[17];
    v41 = 4 * v76;
    do
    {
      v42 = *v12++;
      *(_QWORD *)&v40[((unint64_t)v42 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v42);
      v41 -= 4;
    }
    while (v41);
    if (v39)
    {
      v6 = *v69;
      v7 = *v70;
      goto LABEL_4;
    }
    a1[10] = (char *)a1[10] + 1;
    v43 = (char *)a1[16] - v76 - v68;
    a1[15] = v72;
    a1[16] = v43;
    result = operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v83, *((int **)a1[36] + v73));
    if (result)
    {
      v7 = *v70;
      v6 = *v69 - 1;
      v45 = *(_DWORD *)(*v70 + 4 * v74);
      *(_DWORD *)(*v70 + 4 * v74) = *v6;
      *v6 = v45;
      *v69 = v6;
      v9 = v75 - 1;
LABEL_4:
      v8 = ++v9;
      if (v9 < (unint64_t)(((uint64_t)v6 - v7) >> 2))
        continue;
      return 1;
    }
    return result;
  }
}

void sub_22DBE3AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

int **std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(int **result, int **a2, uint64_t a3, char a4)
{
  int **v7;
  int **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int **v12;
  int *v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  int *v27;
  int **v28;
  int **v29;
  int *v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int *v37;
  int *v38;
  int *v39;
  int **v40;
  int **v41;
  int *v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  int *v49;
  int *v50;
  int *v51;
  int *v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  int *v57;
  uint64_t v58;
  int *v59;
  int **v60;
  int **v61;
  int *v62;
  int *v63;
  int *v64;
  int **v65;
  int **v66;
  int *v67;
  int *v68;
  int **v69;
  BOOL v70;
  int *v71;
  int **v72;
  int **v73;
  int *v74;
  int *v75;
  int *v76;
  int *v77;
  int *v78;
  int **v79;
  int *v80;
  int *v81;
  int *v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  int v87;
  int **v88;
  int *v89;
  int **v90;
  int *v91;
  int *v92;
  int v93;
  int v94;
  int v95;
  int **v96;
  int **v97;
  int **v98;
  BOOL v100;
  uint64_t v101;
  int **v102;
  int **v103;
  int *v104;
  int *v105;
  int v106;
  uint64_t v107;
  int64_t v108;
  int64_t v109;
  BOOL v110;
  uint64_t v111;
  int **v112;
  int *v113;
  int v114;
  int v115;
  int *v116;
  int v117;
  int v118;
  int v119;
  int **v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  int **v125;
  int **v126;
  int **v127;
  int *v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int **v134;
  int *v135;
  int *v136;
  int v137;
  int **v138;
  int *v139;
  int *v140;
  int *v141;
  int *v142;
  int *v143;
  int v144;
  int *v145;
  int *v146;
  int v147;
  int *v148;
  int *v149;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v80 = *(a2 - 1);
        v81 = *v8;
        if (*v80 < **v8)
        {
          *v8 = v80;
          *(a2 - 1) = v81;
        }
        return result;
      case 3:
        v82 = *v8;
        v83 = v8[1];
        v84 = *v83;
        v85 = **v8;
        v86 = *(a2 - 1);
        v87 = *v86;
        if (*v83 >= v85)
        {
          if (v87 < v84)
          {
            v8[1] = v86;
            *(a2 - 1) = v83;
            v140 = *v8;
            v139 = v8[1];
            if (*v139 < **v8)
            {
              *v8 = v139;
              v8[1] = v140;
            }
          }
        }
        else
        {
          if (v87 >= v84)
          {
            *v8 = v83;
            v8[1] = v82;
            v149 = *(a2 - 1);
            if (*v149 >= v85)
              return result;
            v8[1] = v149;
          }
          else
          {
            *v8 = v86;
          }
          *(a2 - 1) = v82;
        }
        return result;
      case 4:
        v88 = v8 + 1;
        v89 = v8[1];
        v90 = v8 + 2;
        v91 = v8[2];
        v92 = *v8;
        v93 = *v89;
        v94 = **v8;
        v95 = *v91;
        if (*v89 >= v94)
        {
          if (v95 >= v93)
          {
LABEL_179:
            v89 = v91;
            v141 = *(a2 - 1);
            if (*v141 >= *v89)
              return result;
LABEL_180:
            *v90 = v141;
            *(a2 - 1) = v89;
            v145 = *v90;
            v146 = *v88;
            v147 = *v145;
            if (*v145 < *v146)
            {
              v8[1] = v145;
              v8[2] = v146;
              v148 = *v8;
              if (v147 < **v8)
              {
                *v8 = v145;
                v8[1] = v148;
              }
            }
            return result;
          }
          *v88 = v91;
          *v90 = v89;
          v96 = v8;
          v97 = v8 + 1;
          result = (int **)v89;
          if (v95 >= v94)
          {
LABEL_171:
            v141 = *(a2 - 1);
            if (*v141 >= *v89)
              return result;
            goto LABEL_180;
          }
        }
        else
        {
          v96 = v8;
          v97 = v8 + 2;
          result = (int **)*v8;
          if (v95 >= v93)
          {
            *v8 = v89;
            v8[1] = v92;
            v96 = v8 + 1;
            v97 = v8 + 2;
            result = (int **)v92;
            if (v95 >= v94)
              goto LABEL_179;
          }
        }
        *v96 = v91;
        *v97 = v92;
        v89 = (int *)result;
        goto LABEL_171;
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v108 = (unint64_t)(v10 - 2) >> 1;
              v109 = v108;
              do
              {
                if (v108 >= v109)
                {
                  v111 = (2 * v109) | 1;
                  v112 = &v8[v111];
                  v113 = *v112;
                  if (2 * v109 + 2 >= v10)
                  {
                    result = &v8[v109];
                    v116 = *result;
                    v117 = **result;
                    if (*v113 >= v117)
                      goto LABEL_146;
                  }
                  else
                  {
                    v114 = *v113;
                    v115 = *v112[1];
                    if (*v113 <= v115)
                      v114 = *v112[1];
                    if (*v113 < v115)
                    {
                      v113 = v112[1];
                      ++v112;
                      v111 = 2 * v109 + 2;
                    }
                    result = &v8[v109];
                    v116 = *result;
                    v117 = **result;
                    if (v114 >= v117)
                    {
LABEL_146:
                      while (1)
                      {
                        v120 = v112;
                        *result = v113;
                        if (v108 < v111)
                          break;
                        v121 = (2 * v111) | 1;
                        v112 = &v8[v121];
                        v111 = 2 * v111 + 2;
                        v113 = *v112;
                        if (v111 < v10)
                        {
                          v118 = *v113;
                          v119 = *v112[1];
                          if (*v113 <= v119)
                            v118 = *v112[1];
                          if (*v113 >= v119)
                          {
                            v111 = v121;
                          }
                          else
                          {
                            v113 = v112[1];
                            ++v112;
                          }
                          result = v120;
                          if (v118 < v117)
                            break;
                        }
                        else
                        {
                          v111 = v121;
                          result = v120;
                          if (*v113 < v117)
                            break;
                        }
                      }
                      *v120 = v116;
                    }
                  }
                }
                v110 = v109-- <= 0;
              }
              while (!v110);
              v122 = (unint64_t)v9 >> 3;
              do
              {
                v123 = 0;
                v124 = *v8;
                v125 = v8;
                do
                {
                  v126 = &v125[v123];
                  v129 = (unsigned int *)v126[1];
                  v127 = v126 + 1;
                  v128 = (int *)v129;
                  v130 = (2 * v123) | 1;
                  v131 = 2 * v123 + 2;
                  if (v131 < v122)
                  {
                    result = (int **)*v128;
                    if ((int)result < *v127[1])
                    {
                      v128 = v127[1];
                      ++v127;
                      v130 = v131;
                    }
                  }
                  *v125 = v128;
                  v125 = v127;
                  v123 = v130;
                }
                while (v130 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
                if (v127 == --a2)
                {
                  *v127 = v124;
                }
                else
                {
                  *v127 = *a2;
                  *a2 = v124;
                  v132 = (char *)v127 - (char *)v8 + 8;
                  if (v132 >= 9)
                  {
                    v133 = (((unint64_t)v132 >> 3) - 2) >> 1;
                    v134 = &v8[v133];
                    v135 = *v134;
                    v136 = *v127;
                    v137 = **v127;
                    if (**v134 < v137)
                    {
                      do
                      {
                        v138 = v134;
                        *v127 = v135;
                        if (!v133)
                          break;
                        v133 = (v133 - 1) >> 1;
                        v134 = &v8[v133];
                        v135 = *v134;
                        v127 = v138;
                      }
                      while (**v134 < v137);
                      *v138 = v136;
                    }
                  }
                }
                v110 = v122-- <= 2;
              }
              while (!v110);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          v14 = *v13;
          if ((unint64_t)v9 < 0x401)
          {
            v19 = *v8;
            v20 = *v12;
            v21 = **v8;
            v22 = **v12;
            if (v21 >= v22)
            {
              if (v14 < v21)
              {
                *v8 = v13;
                *(a2 - 1) = v19;
                v24 = *v12;
                if (**v8 < **v12)
                {
                  *v12 = *v8;
                  *v8 = v24;
                  --a3;
                  v25 = v24;
                  v26 = *v24;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v14 >= v21)
            {
              *v12 = v19;
              *v8 = v20;
              v38 = *(a2 - 1);
              if (*v38 >= v22)
                goto LABEL_32;
              *v8 = v38;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v20;
LABEL_32:
            --a3;
            v25 = *v8;
            v26 = **v8;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v15 = *v12;
          v16 = *v8;
          v17 = **v12;
          v18 = **v8;
          if (v17 >= v18)
          {
            if (v14 < v17)
            {
              *v12 = v13;
              *(a2 - 1) = v15;
              v23 = *v8;
              if (**v12 < **v8)
              {
                *v8 = *v12;
                *v12 = v23;
              }
            }
          }
          else
          {
            if (v14 >= v17)
            {
              *v8 = v15;
              *v12 = v16;
              v27 = *(a2 - 1);
              if (*v27 >= v18)
                goto LABEL_23;
              *v12 = v27;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v16;
          }
LABEL_23:
          v28 = &v8[v11];
          v31 = *(v28 - 1);
          v29 = v28 - 1;
          v30 = v31;
          v32 = v8[1];
          v33 = *v31;
          v34 = *v32;
          v35 = *(a2 - 2);
          v36 = *v35;
          if (*v31 >= *v32)
          {
            if (v36 < v33)
            {
              *v29 = v35;
              *(a2 - 2) = v30;
              v37 = v8[1];
              if (**v29 < *v37)
              {
                v8[1] = *v29;
                *v29 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[1] = v30;
              *v29 = v32;
              v39 = *(a2 - 2);
              if (*v39 >= v34)
                goto LABEL_37;
              *v29 = v39;
            }
            else
            {
              v8[1] = v35;
            }
            *(a2 - 2) = v32;
          }
LABEL_37:
          v40 = &v8[v11];
          v43 = v40[1];
          v41 = v40 + 1;
          v42 = v43;
          v44 = v8[2];
          v45 = *v43;
          v46 = *v44;
          v47 = *(a2 - 3);
          v48 = *v47;
          if (*v43 >= *v44)
          {
            if (v48 < v45)
            {
              *v41 = v47;
              *(a2 - 3) = v42;
              v49 = v8[2];
              if (**v41 < *v49)
              {
                v8[2] = *v41;
                *v41 = v49;
              }
            }
          }
          else
          {
            if (v48 >= v45)
            {
              v8[2] = v42;
              *v41 = v44;
              v50 = *(a2 - 3);
              if (*v50 >= v46)
                goto LABEL_46;
              *v41 = v50;
            }
            else
            {
              v8[2] = v47;
            }
            *(a2 - 3) = v44;
          }
LABEL_46:
          v51 = *v12;
          v52 = *v29;
          v53 = **v12;
          v54 = **v29;
          v55 = *v41;
          v56 = **v41;
          if (v53 < v54)
          {
            if (v56 >= v53)
            {
              *v29 = v51;
              *v12 = v52;
              v29 = v12;
              v51 = v55;
              if (v56 >= v54)
              {
                v51 = v52;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v29 = v55;
            *v41 = v52;
            goto LABEL_53;
          }
          if (v56 >= v53)
            goto LABEL_53;
          *v12 = v55;
          *v41 = v51;
          v41 = v12;
          v51 = v52;
          if (v56 < v54)
            goto LABEL_52;
          v51 = v55;
LABEL_53:
          v57 = *v8;
          *v8 = v51;
          *v12 = v57;
          --a3;
          v25 = *v8;
          v26 = **v8;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (**(v8 - 1) >= v26)
          {
            if (v26 >= **(a2 - 1))
            {
              v72 = v8 + 1;
              do
              {
                v8 = v72;
                if (v72 >= a2)
                  break;
                ++v72;
              }
              while (v26 >= **v8);
            }
            else
            {
              do
              {
                v71 = v8[1];
                ++v8;
              }
              while (v26 >= *v71);
            }
            v73 = a2;
            if (v8 < a2)
            {
              v73 = a2;
              do
                v74 = *--v73;
              while (v26 < *v74);
            }
            if (v8 < v73)
            {
              v75 = *v8;
              v76 = *v73;
              do
              {
                *v8 = v76;
                *v73 = v75;
                do
                {
                  v77 = v8[1];
                  ++v8;
                  v75 = v77;
                }
                while (v26 >= *v77);
                do
                {
                  v78 = *--v73;
                  v76 = v78;
                }
                while (v26 < *v78);
              }
              while (v8 < v73);
            }
            v79 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v79;
            a4 = 0;
            *v79 = v25;
            continue;
          }
LABEL_55:
          v58 = 0;
          do
            v59 = v8[++v58];
          while (*v59 < v26);
          v60 = &v8[v58];
          v61 = a2;
          if (v58 == 1)
          {
            v61 = a2;
            do
            {
              if (v60 >= v61)
                break;
              v63 = *--v61;
            }
            while (*v63 >= v26);
          }
          else
          {
            do
              v62 = *--v61;
            while (*v62 >= v26);
          }
          if (v60 < v61)
          {
            v64 = *v61;
            v65 = &v8[v58];
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*v67 < v26);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*v68 >= v26);
            }
            while (v65 < v66);
            v69 = v65 - 1;
            if (v65 - 1 == v8)
              goto LABEL_73;
LABEL_72:
            *v8 = *v69;
            goto LABEL_73;
          }
          v69 = v60 - 1;
          if (v60 - 1 != v8)
            goto LABEL_72;
LABEL_73:
          *v69 = v25;
          if (v60 < v61)
            goto LABEL_76;
          v70 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(v8, v69);
          v8 = v69 + 1;
          result = (int **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(v69 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_76:
            result = (int **)std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(v7, v69, a3, a4 & 1);
            a4 = 0;
            v8 = v69 + 1;
            continue;
          }
          a2 = v69;
          if (v70)
            return result;
          goto LABEL_2;
        }
        v98 = v8 + 1;
        v100 = v8 == a2 || v98 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v100)
          {
            v101 = 0;
            v102 = v8;
            do
            {
              v105 = *v102;
              v104 = v102[1];
              v102 = v98;
              v106 = *v104;
              if (*v104 < *v105)
              {
                v107 = v101;
                do
                {
                  *(int **)((char *)v8 + v107 + 8) = v105;
                  if (!v107)
                  {
                    v103 = v8;
                    goto LABEL_119;
                  }
                  v105 = *(int **)((char *)v8 + v107 - 8);
                  v107 -= 8;
                }
                while (v106 < *v105);
                v103 = (int **)((char *)v8 + v107 + 8);
LABEL_119:
                *v103 = v104;
              }
              v98 = v102 + 1;
              v101 += 8;
            }
            while (v102 + 1 != a2);
          }
        }
        else if (!v100)
        {
          do
          {
            v143 = *v7;
            v142 = v7[1];
            v7 = v98;
            v144 = *v142;
            if (*v142 < *v143)
            {
              do
              {
                *v98 = v143;
                v143 = *(v98 - 2);
                --v98;
              }
              while (v144 < *v143);
              *v98 = v142;
            }
            v98 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

int **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(int **result, int **a2, int **a3, int **a4, int **a5)
{
  int *v5;
  int *v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;

  v5 = *a2;
  v6 = *result;
  v7 = **a2;
  v8 = **result;
  v9 = *a3;
  v10 = **a3;
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
      v12 = *a4;
      if (**a4 >= *v9)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *result;
    if (**a2 < **result)
    {
      *result = *a2;
      *a2 = v11;
      v5 = *a3;
      v12 = *a4;
      if (**a4 >= **a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (**a3 >= v8)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v12 = *a4;
  if (**a4 >= *v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v12;
  *a4 = v5;
  v13 = *a2;
  if (**a3 < **a2)
  {
    *a2 = *a3;
    *a3 = v13;
    v14 = *result;
    if (**a2 < **result)
    {
      *result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  v15 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = *result;
        if (**a2 < **result)
        {
          *result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(int **a1, int **a2)
{
  int *v3;
  int **v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int **v10;
  int **v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  int **v20;
  int *v21;
  int **v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int **v28;
  int **v29;
  int *v30;
  int **v31;
  int v32;
  uint64_t i;
  int *v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int v44;
  int *v45;
  int *v46;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v12 = *(a2 - 1);
      v13 = *a1;
      if (*v12 >= **a1)
        return 1;
      *a1 = v12;
      *(a2 - 1) = v13;
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *v15;
      v17 = **a1;
      v18 = *(a2 - 1);
      v19 = *v18;
      if (*v15 >= v17)
      {
        if (v19 >= v16)
          return 1;
        a1[1] = v18;
        *(a2 - 1) = v15;
        v40 = *a1;
        v39 = a1[1];
        if (*v39 >= **a1)
          return 1;
        *a1 = v39;
        a1[1] = v40;
        return 1;
      }
      else if (v19 >= v16)
      {
        *a1 = v15;
        a1[1] = v14;
        v46 = *(a2 - 1);
        if (*v46 >= v17)
          return 1;
        a1[1] = v46;
        *(a2 - 1) = v14;
        return 1;
      }
      else
      {
        *a1 = v18;
        *(a2 - 1) = v14;
        return 1;
      }
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *v21;
      v26 = **a1;
      v27 = *v23;
      if (*v21 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_38;
        }
LABEL_35:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
LABEL_36:
        v41 = *(a2 - 1);
        if (*v41 >= *v21)
          return 1;
        goto LABEL_39;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v21 = v23;
      v41 = *(a2 - 1);
      if (*v41 >= *v21)
        return 1;
LABEL_39:
      *v22 = v41;
      *(a2 - 1) = v21;
      v42 = *v22;
      v43 = *v20;
      v44 = *v42;
      if (*v42 >= *v43)
        return 1;
      a1[1] = v42;
      a1[2] = v43;
      v45 = *a1;
      if (v44 >= **a1)
        return 1;
      *a1 = v42;
      a1[1] = v45;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      v7 = *v5;
      v8 = **a1;
      v9 = *v3;
      if (*v5 >= v8)
      {
        if (v9 >= v7)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v10 = a1;
        v11 = a1 + 1;
      }
      else
      {
        v10 = a1;
        v11 = a1 + 2;
        if (v9 < v7)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v10 = a1 + 1;
        v11 = a1 + 2;
      }
      if (v9 >= v8)
        goto LABEL_20;
LABEL_19:
      *v10 = v3;
      *v11 = v6;
LABEL_20:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v34 = *v31;
        v35 = *v4;
        v36 = **v31;
        if (v36 < *v35)
          break;
LABEL_23:
        v4 = v31++;
        if (v31 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(int **)((char *)a1 + v37) = v35;
        v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v34;
          if (++v32 != 8)
            goto LABEL_23;
          return v31 + 1 == a2;
        }
        v35 = *(int **)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v36 < *v35);
      *(int **)((char *)a1 + v38) = v34;
      if (++v32 != 8)
        goto LABEL_23;
      return v31 + 1 == a2;
  }
}

_QWORD *std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[4 * a2];
    a1[2] = v5;
    v6 = v4;
    if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_13;
    v7 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v6 = &v4[4 * (v7 & 0xFFFFFFFFFFFFFFELL)];
    v8 = v4 + 4;
    v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v8 - 4) = 0;
      *v8 = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_13:
      do
      {
        *v6 = 0;
        v6 += 4;
      }
      while (v6 != v5);
    }
    a1[1] = v5;
  }
  return a1;
}

void sub_22DBE4AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  signed __int32 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  signed __int32 v23;
  signed __int32 v24;
  __n128 v25;
  __n128 v26;
  signed __int32 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  signed __int32 v32;
  signed __int32 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  signed __int32 v37;
  signed __int32 v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int32 v41;
  signed __int32 v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  signed __int32 v46;
  __n128 *v47;
  signed __int32 v48;
  __n128 *v49;
  signed __int32 v50;
  signed __int32 v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  __n128 *v55;
  signed __int32 v56;
  __n128 *v57;
  signed __int32 v58;
  __n128 *v59;
  __n128 *v60;
  signed __int32 v61;
  unint64_t v62;
  unsigned __int32 v63;
  signed __int32 v64;
  signed __int32 v65;
  __n128 *v66;
  __n128 *v67;
  signed __int32 v68;
  signed __int32 v69;
  __n128 v70;
  __n128 *v71;
  __n128 *v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 *v76;
  BOOL v78;
  uint64_t v79;
  __n128 *v80;
  uint64_t v81;
  __n128 *v82;
  signed __int32 v83;
  unint64_t v84;
  unsigned __int32 v85;
  uint64_t v86;
  signed __int32 v87;
  int64_t v88;
  int64_t v89;
  BOOL v90;
  uint64_t v91;
  __n128 *v92;
  signed __int32 v93;
  signed __int32 v94;
  __n128 *v95;
  signed __int32 v96;
  unint64_t v97;
  unsigned __int32 v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  signed __int32 v102;
  signed __int32 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  __n128 *v114;
  signed __int32 v115;
  uint64_t v116;
  int v117;
  _OWORD *v118;
  __n128 v119;
  __n128 *v120;
  signed __int32 v121;
  unint64_t v122;
  unsigned __int32 v123;
  __n128 *v124;
  signed __int32 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  signed __int32 v10;
  signed __int32 v11;
  __n128 v12;
  __n128 *v13;
  __n128 *v14;
  signed __int32 v15;
  signed __int32 v16;
  signed __int32 v17;
  __n128 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  int v34;
  signed __int32 v35;
  unint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  signed __int32 v39;
  char *v40;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a2 - 1;
      v10 = a1[1].n128_i32[2];
      v11 = a2[-1].n128_i32[2];
      if (v10 >= (signed __int32)a1->n128_u32[2])
      {
        if (v11 < v10)
        {
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if ((signed __int32)a1[1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
          {
            v27 = *a1;
            *a1 = *v8;
            *v8 = v27;
          }
        }
      }
      else
      {
        if (v11 >= v10)
        {
          v30 = *a1;
          *a1 = *v8;
          *v8 = v30;
          if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)a1[1].n128_u32[2])
            return result;
          v12 = *v8;
          *v8 = *v9;
        }
        else
        {
          v12 = *a1;
          *a1 = *v9;
        }
        *v9 = v12;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 1;
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)a1[3].n128_u32[2])
      {
        v22 = *v21;
        *v21 = a2[-1];
        a2[-1] = v22;
        if ((signed __int32)a1[3].n128_u32[2] < (signed __int32)a1[2].n128_u32[2])
        {
          v23 = *v20;
          *v20 = *v21;
          *v21 = v23;
          if ((signed __int32)a1[2].n128_u32[2] < (signed __int32)a1[1].n128_u32[2])
          {
            v24 = *v19;
            *v19 = *v20;
            *v20 = v24;
            if ((signed __int32)a1[1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
            {
              v25 = *a1;
              *a1 = *v19;
              *v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 1;
      v15 = a1[1].n128_i32[2];
      v16 = a1->n128_i32[2];
      v17 = a1[2].n128_i32[2];
      if (v15 >= v16)
      {
        if (v17 < v15)
        {
          v28 = *v14;
          *v14 = *v13;
          *v13 = v28;
          if ((signed __int32)a1[1].n128_u32[2] < v16)
          {
            v29 = *a1;
            *a1 = *v14;
            *v14 = v29;
          }
        }
      }
      else
      {
        if (v17 >= v15)
        {
          v31 = *a1;
          *a1 = *v14;
          *v14 = v31;
          if (v17 >= (signed __int32)a1[1].n128_u32[2])
            goto LABEL_29;
          v18 = *v14;
          *v14 = *v13;
        }
        else
        {
          v18 = *a1;
          *a1 = *v13;
        }
        *v13 = v18;
      }
LABEL_29:
      v32 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v35 = v32->n128_i32[2];
    if (v35 < (signed __int32)v13->n128_u32[2])
      break;
LABEL_32:
    v13 = v32;
    v33 += 16;
    if (++v32 == a2)
      return 1;
  }
  v36 = v32->n128_u64[0];
  v37 = v32->n128_u32[3];
  v38 = v33;
  do
  {
    *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
    if (v38 == -32)
    {
      a1->n128_u64[0] = v36;
      a1->n128_u32[2] = v35;
      a1->n128_u32[3] = v37;
      if (++v34 != 8)
        goto LABEL_32;
      return &v32[1] == a2;
    }
    v39 = *(__int32 *)((char *)&a1[1].n128_i32[2] + v38);
    v38 -= 16;
  }
  while (v35 < v39);
  v40 = (char *)a1 + v38;
  *((_QWORD *)v40 + 6) = v36;
  v40 += 48;
  *((_DWORD *)v40 + 2) = v35;
  *((_DWORD *)v40 + 3) = v37;
  if (++v34 != 8)
    goto LABEL_32;
  return &v32[1] == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;

  v5 = a2->n128_i32[2];
  v6 = a3->n128_i32[2];
  if (v5 >= (signed __int32)a1->n128_u32[2])
  {
    if (v6 < v5)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if ((signed __int32)a3->n128_u32[2] < (signed __int32)a2->n128_u32[2])
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[2] < (signed __int32)a3->n128_u32[2])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if ((signed __int32)a3->n128_u32[2] < (signed __int32)a2->n128_u32[2])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void std::deque<operations_research::sat::Literal>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_22DBE6030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22DBE604C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBE6060(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBE6078(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  char *v4;
  const void *v5;
  const void *v6;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/sat_parameters.pb.cc", a4);
  operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_ = 0;
  *(_QWORD *)algn_25408A4C8 = 0;
  qword_25408A4D0 = 0;
  v4 = (char *)operator new(0x48uLL);
  strcpy(v4, "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART");
  operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_ = (uint64_t)v4;
  *(_OWORD *)algn_25408A4C8 = xmmword_22DCEAFC0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyString, (void (*)(const void *))&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_, v5);
  operations_research::sat::_SatParameters_default_instance_ = (uint64_t)&off_24F9878E8;
  unk_25408A570 = 0;
  xmmword_25408A578 = 0u;
  unk_25408A588 = 0u;
  qword_25408A598 = 0;
  operations_research::sat::SatParameters::SharedCtor((operations_research::sat::SatParameters *)&operations_research::sat::_SatParameters_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_SatParameters_default_instance_, v6);
}

void sub_22DBE6154(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&unk_25408A590);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatParameters_VariableOrder_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto;
}

uint64_t operations_research::sat::SatParameters_Polarity_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0);
  return qword_254082DB0;
}

uint64_t operations_research::sat::SatParameters_RestartAlgorithm_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0);
  return qword_254082DD8;
}

BOOL operations_research::sat::SatParameters_RestartAlgorithm_IsValid(operations_research::sat *this)
{
  return this < 5;
}

double operations_research::sat::SatParameters::SharedCtor(operations_research::sat::SatParameters *this)
{
  char *v2;
  double result;

  v2 = (char *)this + 264;
  if (atomic_load(scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto);
  *((_QWORD *)this + 7) = &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = xmmword_22DCF6240;
  *((_DWORD *)this + 52) = 10000;
  *(_OWORD *)((char *)this + 216) = xmmword_22DCF6250;
  *(_OWORD *)((char *)this + 232) = xmmword_22DCF6260;
  *(_OWORD *)((char *)this + 248) = xmmword_22DCF6270;
  *(_OWORD *)v2 = xmmword_22DCF6280;
  *((_QWORD *)this + 35) = 0x7FF0000000000000;
  *((_OWORD *)this + 18) = xmmword_22DCF6290;
  *((_QWORD *)this + 38) = 0xC801010101;
  *((_QWORD *)this + 39) = 0x3FE0000000000000;
  *((_QWORD *)this + 40) = 0x1F400000001;
  *((_QWORD *)this + 41) = 0x403E000000000000;
  *((_QWORD *)this + 42) = 0x500000003;
  *((_QWORD *)this + 43) = 0x3FF0000000000000;
  *((_QWORD *)this + 44) = 0x138800000032;
  *((_QWORD *)this + 45) = 0x3FF6666666666666;
  *((_OWORD *)this + 23) = xmmword_22DCF62A0;
  *((_DWORD *)this + 96) = 1;
  *(_QWORD *)(v2 + 124) = 0x101010101010101;
  *(_OWORD *)(v2 + 132) = xmmword_22DCF62B0;
  *(_OWORD *)(v2 + 148) = xmmword_22DCF62C0;
  *((_DWORD *)this + 107) = 2;
  *((_QWORD *)this + 54) = 0x3FA999999999999ALL;
  *((_QWORD *)this + 55) = 0x101010101010101;
  *((_OWORD *)this + 28) = xmmword_22DCF62D0;
  *((_QWORD *)this + 58) = 100;
  *((_QWORD *)this + 59) = 0x416312D000000000;
  *((_OWORD *)this + 30) = xmmword_22DCF62E0;
  *((_QWORD *)this + 62) = 0x101010100000035;
  *((_QWORD *)this + 63) = 0x3F1A36E2EB1C432DLL;
  *((_QWORD *)this + 64) = 0x300000001;
  *((_QWORD *)this + 65) = 0x426D1A94A2000000;
  *((_QWORD *)this + 66) = 0x4197D78400000000;
  *((_QWORD *)this + 67) = 0x700000001;
  *((_WORD *)this + 272) = 257;
  *((_BYTE *)this + 546) = 1;
  *((_DWORD *)this + 137) = 10;
  *((_QWORD *)this + 69) = 0x4202A05F20000000;
  *(_QWORD *)&result = 0x3E800000001;
  *((_QWORD *)this + 70) = 0x3E800000001;
  *((_QWORD *)this + 71) = 0x3FE999999999999ALL;
  return result;
}

operations_research::sat::SatParameters *operations_research::sat::SatParameters::SatParameters(operations_research::sat::SatParameters *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F9878E8;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = a2;
  operations_research::sat::SatParameters::SharedCtor(this);
  return this;
}

void sub_22DBE6440(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  _Unwind_Resume(a1);
}

operations_research::sat::SatParameters *operations_research::sat::SatParameters::SatParameters(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  uint64_t *v4;
  __int128 v5;
  int v6;
  void *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  google::protobuf::Arena *v10;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_24F9878E8;
  v5 = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_OWORD *)this + 1) = v5;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v6);
    v7 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v7, *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  v8 = *((_QWORD *)a2 + 1);
  if ((v8 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v9 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, (const google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 7) = &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((*v4 & 1) != 0)
      v10 = *(google::protobuf::Arena **)v10;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, v10, *((__int128 **)a2 + 7));
  }
  memcpy((char *)this + 64, (char *)a2 + 64, 0x200uLL);
  return this;
}

void sub_22DBE6568(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatParameters::~SatParameters(operations_research::sat::SatParameters *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;

  v2 = *((_QWORD *)this + 7);
  if ((uint64_t *)v2 != &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_
    && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
}

{
  operations_research::sat::SatParameters::~SatParameters(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::SatParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::SatParameters::Clear(operations_research::sat::SatParameters *this)
{
  char *v2;
  unsigned int v3;
  std::string *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;

  v2 = (char *)this + 16;
  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 10) = 0;
  if ((v3 & 1) != 0)
  {
    v4 = (std::string *)*((_QWORD *)this + 7);
    if (v4 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
      std::string::operator=(v4, (const std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_);
  }
  if ((v3 & 0xFE) != 0)
  {
    *((_BYTE *)this + 96) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
  }
  if ((v3 & 0xFF00) != 0)
  {
    *(_QWORD *)((char *)this + 105) = 0;
    *(_QWORD *)((char *)this + 97) = 0;
    *((_BYTE *)this + 121) = 0;
    *(_QWORD *)((char *)this + 113) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_DWORD *)((char *)this + 129) = 0;
    *(_QWORD *)((char *)this + 122) = 0;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)((char *)this + 140) = 0;
    *(_QWORD *)((char *)this + 133) = 0;
  }
  v5 = *((_DWORD *)this + 5);
  if ((_BYTE)v5)
    *(_QWORD *)((char *)this + 148) = 0;
  if ((v5 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 47) = 0;
    *(_OWORD *)((char *)this + 172) = 0u;
    *(_OWORD *)((char *)this + 156) = 0u;
    *((_QWORD *)this + 24) = 0x100000002;
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *((_QWORD *)this + 25) = 0x271000000002;
    *((_DWORD *)this + 52) = 10000;
    *(_OWORD *)((char *)this + 216) = xmmword_22DCF6250;
    *(_OWORD *)((char *)this + 232) = xmmword_22DCF6260;
    *((_QWORD *)this + 31) = 0x3FEE666666666666;
  }
  if (HIBYTE(v5))
  {
    *((_QWORD *)this + 32) = 0x3F847AE147AE147BLL;
    *(_OWORD *)(v2 + 248) = xmmword_22DCF6280;
    *((_QWORD *)this + 35) = 0x7FF0000000000000;
    *((_OWORD *)this + 18) = xmmword_22DCF6290;
  }
  v6 = *((_DWORD *)this + 6);
  if ((_BYTE)v6)
  {
    *((_QWORD *)this + 38) = 0xC801010101;
    *((_QWORD *)this + 39) = 0x3FE0000000000000;
    *((_QWORD *)this + 40) = 0x1F400000001;
  }
  if ((v6 & 0xFF00) != 0)
  {
    *((_QWORD *)this + 41) = 0x403E000000000000;
    *((_QWORD *)this + 42) = 0x500000003;
    *((_QWORD *)this + 43) = 0x3FF0000000000000;
    *((_QWORD *)this + 44) = 0x138800000032;
    *((_QWORD *)this + 45) = 0x3FF6666666666666;
    *((_QWORD *)this + 46) = 0x7FF0000000000000;
  }
  if ((v6 & 0xFF0000) != 0)
  {
    *((_QWORD *)this + 47) = 0x3FF0000000000000;
    *((_QWORD *)this + 48) = 0x101010100000001;
    *((_WORD *)this + 196) = 257;
  }
  if (HIBYTE(v6))
  {
    *((_WORD *)this + 197) = 257;
    *(_OWORD *)(v2 + 380) = xmmword_22DCF62B0;
    *(_QWORD *)((char *)this + 412) = 0x1FFFFFFFFLL;
  }
  v7 = *((_DWORD *)this + 7);
  if ((_BYTE)v7)
  {
    *((_DWORD *)this + 105) = 1;
    *((_QWORD *)this + 53) = 0x201010101;
    *((_QWORD *)this + 54) = 0x3FA999999999999ALL;
    *((_BYTE *)this + 440) = 1;
  }
  if ((v7 & 0xFF00) != 0)
  {
    *(_DWORD *)((char *)this + 441) = 16843009;
    *(_QWORD *)((char *)this + 444) = 0x25801010101;
  }
  if ((v7 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 113) = 16843009;
    *((_QWORD *)this + 57) = 0x3200000064;
    *((_QWORD *)this + 58) = 100;
    *((_QWORD *)this + 59) = 0x416312D000000000;
  }
  if (HIBYTE(v7))
  {
    *((_OWORD *)this + 30) = xmmword_22DCF62E0;
    *((_QWORD *)this + 62) = 0x101010100000035;
    *((_QWORD *)this + 63) = 0x3F1A36E2EB1C432DLL;
  }
  v8 = *((_DWORD *)this + 8);
  if ((_BYTE)v8)
  {
    *((_QWORD *)this + 64) = 0x300000001;
    *((_QWORD *)this + 65) = 0x426D1A94A2000000;
    *((_QWORD *)this + 66) = 0x4197D78400000000;
    *((_QWORD *)this + 67) = 0x700000001;
    *((_WORD *)this + 272) = 257;
  }
  if ((v8 & 0x3F00) != 0)
  {
    *((_BYTE *)this + 546) = 1;
    *((_DWORD *)this + 137) = 10;
    *((_QWORD *)this + 69) = 0x4202A05F20000000;
    *((_QWORD *)this + 70) = 0x3E800000001;
    *((_QWORD *)this + 71) = 0x3FE999999999999ALL;
  }
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 4) = 0;
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0 && *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::SatParameters::_InternalParse(operations_research::sat::SatParameters *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  std::string **v9;
  unsigned int *v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  google::protobuf::UnknownFieldSet *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t TagFallback;
  unsigned int v20;
  BOOL v21;
  google::protobuf::UnknownFieldSet *v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  google::protobuf::UnknownFieldSet *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  const char *v66;
  const char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  const char *v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  const char *v107;
  const char *v108;
  const char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  const char *v119;
  unint64_t v120;
  const char *v121;
  const char *v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  const char *v126;
  unint64_t v127;
  const char *v128;
  const char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  google::protobuf::UnknownFieldSet *v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  google::protobuf::UnknownFieldSet *v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  google::protobuf::UnknownFieldSet *v250;
  uint64_t v251;
  uint64_t v252;
  google::protobuf::UnknownFieldSet *v253;
  uint64_t v254;
  google::protobuf::UnknownFieldSet *v255;
  uint64_t v256;
  google::protobuf::UnknownFieldSet *v257;
  uint64_t v258;
  google::protobuf::UnknownFieldSet *v259;
  uint64_t v260;
  google::protobuf::UnknownFieldSet *v261;
  uint64_t v262;
  google::protobuf::UnknownFieldSet *v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  unsigned int *v268[3];
  int v269;

  v8 = (uint64_t *)((char *)this + 8);
  v9 = (std::string **)((char *)this + 56);
  v10 = (unsigned int *)((char *)this + 40);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
        return a2;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
      if ((v266 & 1) != 0)
        return a2;
    }
    v14 = (char *)a2 + 1;
    v15 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
    {
      v16 = (v15 >> 3) - 1;
      goto LABEL_8;
    }
    v18 = v15 + (*v14 << 7);
    v15 = v18 - 128;
    if (*v14 < 0)
      break;
    v14 = (char *)a2 + 2;
    v16 = (v15 >> 3) - 1;
    if (v16 <= 0xA5)
      goto LABEL_8;
LABEL_18:
    if (v15)
      v21 = (v15 & 7) == 4;
    else
      v21 = 1;
    if (v21)
    {
      a3[10].i32[0] = v15 - 1;
      return (google::protobuf::UnknownFieldSet *)v14;
    }
    if ((*v8 & 1) != 0)
      v22 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
    v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v22, (google::protobuf::UnknownFieldSet *)v14, a3, a5);
LABEL_4:
    a2 = v13;
    if (!v13)
      return a2;
  }
  TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v18 - 128));
  if (!TagFallback)
    return 0;
  v14 = (char *)TagFallback;
  v15 = v20;
  v16 = (v20 >> 3) - 1;
  if (v16 > 0xA5)
    goto LABEL_18;
LABEL_8:
  switch(v16)
  {
    case 0u:
      if (v15 != 8)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v133 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v133 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v133 - 128));
          if (!a2)
            return a2;
          v17 = v249;
          if (v249 <= 2)
          {
LABEL_12:
            *((_DWORD *)this + 4) |= 2u;
            *((_DWORD *)this + 16) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2)
            goto LABEL_12;
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_12;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 1;
      goto LABEL_705;
    case 1u:
      if (v15 != 16)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v137 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v137 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v137 - 128));
          if (!a2)
            return a2;
          v17 = v252;
          if (v252 <= 4)
          {
LABEL_44:
            *((_DWORD *)this + 5) |= 0x8000u;
            *((_DWORD *)this + 49) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 4)
            goto LABEL_44;
        }
      }
      else if (v17 <= 4)
      {
        goto LABEL_44;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 2;
      goto LABEL_705;
    case 3u:
      if (v15 != 32)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v145 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v145 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v145 - 128));
          if (!a2)
            return a2;
          v17 = v265;
          if (v265 <= 3)
          {
LABEL_556:
            *((_DWORD *)this + 5) |= 0x10000u;
            *((_DWORD *)this + 50) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 3)
            goto LABEL_556;
        }
      }
      else if (v17 <= 3)
      {
        goto LABEL_556;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 4;
      goto LABEL_705;
    case 0xAu:
      if (v15 != 88)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v25) = *v14;
      if ((v25 & 0x80) == 0)
        goto LABEL_49;
      v25 = (const char *)(v25 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v25);
        *((_DWORD *)this + 51) = v148;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_49:
        *((_DWORD *)this + 51) = (_DWORD)v25;
      }
      goto LABEL_5;
    case 0xCu:
      if (v15 != 104)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v26) = *v14;
      if ((v26 & 0x80) == 0)
        goto LABEL_54;
      v26 = (const char *)(v26 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v26);
        *((_DWORD *)this + 52) = v149;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_54:
        *((_DWORD *)this + 52) = (_DWORD)v26;
      }
      goto LABEL_5;
    case 0xEu:
      if (v15 != 121)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x80000u;
      *((_QWORD *)this + 27) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0xFu:
      if (v15 != 129)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x100000u;
      *((_QWORD *)this + 28) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x10u:
      if (v15 != 137)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x200000u;
      *((_QWORD *)this + 29) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x11u:
      if (v15 != 145)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x400000u;
      *((_QWORD *)this + 30) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x15u:
      if (v15 != 177)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x800000u;
      *((_QWORD *)this + 31) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x16u:
      if (v15 != 185)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x1000000u;
      *((_QWORD *)this + 32) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x17u:
      if (v15 != 192)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v23) = *v14;
      if ((v23 & 0x80) == 0)
        goto LABEL_31;
      v23 = (const char *)(v23 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v23);
        *((_DWORD *)this + 66) = v146;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_31:
        *((_DWORD *)this + 66) = (_DWORD)v23;
      }
      goto LABEL_5;
    case 0x1Du:
      if (v15 != 240)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v27) = *v14;
      if ((v27 & 0x80) == 0)
        goto LABEL_63;
      v27 = (const char *)(v27 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v27);
        *((_DWORD *)this + 67) = v150;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_63:
        *((_DWORD *)this + 67) = (_DWORD)v27;
      }
      goto LABEL_5;
    case 0x1Eu:
      if (v15 != 248)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v28) = *v14;
      if ((v28 & 0x80) == 0)
        goto LABEL_68;
      v28 = (const char *)(v28 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v28);
        *((_DWORD *)this + 68) = v151;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_68:
        *((_DWORD *)this + 68) = (_DWORD)v28;
      }
      goto LABEL_5;
    case 0x1Fu:
      if (v15 != 1)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 8u;
      *((_QWORD *)this + 9) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x20u:
      if (v15 != 8)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v29 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_75;
      v29 = v29 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v29);
        *((_BYTE *)this + 306) = v152 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_75:
        *((_BYTE *)this + 306) = v29 != 0;
      }
      goto LABEL_5;
    case 0x21u:
      if (v15 != 16)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v138 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v138 - 128);
        if (*(char *)a2 < 0)
        {
          v253 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v138 - 128));
          if (!v253)
            return 0;
          v17 = v254;
          a2 = v253;
          if (v254 <= 4)
          {
LABEL_79:
            *((_DWORD *)this + 5) |= 0x10000000u;
            *((_DWORD *)this + 69) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 4)
            goto LABEL_79;
        }
      }
      else if (v17 <= 4)
      {
        goto LABEL_79;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 34;
      goto LABEL_705;
    case 0x22u:
      if (v15 != 24)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v30 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_84;
      v30 = v30 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v30);
        *((_BYTE *)this + 455) = v153 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_84:
        *((_BYTE *)this + 455) = v30 != 0;
      }
      goto LABEL_5;
    case 0x23u:
      if (v15 != 33)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x20000000u;
      *((_QWORD *)this + 35) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x24u:
      if (v15 != 40)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v24 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_36;
      v24 = v24 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v24);
        *((_QWORD *)this + 36) = v147;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_36:
        *((_QWORD *)this + 36) = v24;
      }
      goto LABEL_5;
    case 0x27u:
      if (v15 != 64)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v31 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_89;
      v31 = v31 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v31);
        *((_QWORD *)this + 37) = v154;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_89:
        *((_QWORD *)this + 37) = v31;
      }
      goto LABEL_5;
    case 0x28u:
      if (v15 != 72)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v32 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_94;
      v32 = v32 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v32);
        *((_BYTE *)this + 99) = v155 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_94:
        *((_BYTE *)this + 99) = v32 != 0;
      }
      goto LABEL_5;
    case 0x2Au:
      if (v15 != 88)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x800000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v33 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_99;
      v33 = v33 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v33);
        *((_BYTE *)this + 132) = v156 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_99:
        *((_BYTE *)this + 132) = v33 != 0;
      }
      goto LABEL_5;
    case 0x2Bu:
      if (v15 != 96)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v34 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_104;
      v34 = v34 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v34);
        *((_BYTE *)this + 304) = v157 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_104:
        *((_BYTE *)this + 304) = v34 != 0;
      }
      goto LABEL_5;
    case 0x2Cu:
      if (v15 != 105)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x10u;
      *((_QWORD *)this + 10) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x2Du:
      if (v15 != 112)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v35) = *v14;
      if ((v35 & 0x80) == 0)
        goto LABEL_111;
      v35 = (const char *)(v35 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v35);
        *((_DWORD *)this + 77) = v158;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_111:
        *((_DWORD *)this + 77) = (_DWORD)v35;
      }
      goto LABEL_5;
    case 0x2Eu:
      if (v15 != 121)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x20u;
      *((_QWORD *)this + 39) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x2Fu:
      if (v15 != 128)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x1000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v36 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_118;
      v36 = v36 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v36);
        *((_BYTE *)this + 133) = v159 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_118:
        *((_BYTE *)this + 133) = v36 != 0;
      }
      goto LABEL_5;
    case 0x30u:
      if (v15 != 136)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v37 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_123;
      v37 = v37 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v37);
        *((_BYTE *)this + 307) = v160 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_123:
        *((_BYTE *)this + 307) = v37 != 0;
      }
      goto LABEL_5;
    case 0x31u:
      if (v15 != 144)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v38 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_128;
      v38 = v38 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v38);
        *((_BYTE *)this + 388) = v161 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_128:
        *((_BYTE *)this + 388) = v38 != 0;
      }
      goto LABEL_5;
    case 0x32u:
      if (v15 != 152)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v139 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v139 - 128);
        if (*(char *)a2 < 0)
        {
          v255 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v139 - 128));
          if (!v255)
            return 0;
          v17 = v256;
          a2 = v255;
          if (v256 <= 2)
          {
LABEL_132:
            *((_DWORD *)this + 4) |= 4u;
            *((_DWORD *)this + 17) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2)
            goto LABEL_132;
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_132;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 51;
      goto LABEL_705;
    case 0x33u:
      if (v15 != 160)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x4000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v117 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_569;
      v117 = v117 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v117);
        *((_BYTE *)this + 120) = v233 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_569:
        *((_BYTE *)this + 120) = v117 != 0;
      }
      goto LABEL_5;
    case 0x34u:
      if (v15 != 168)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v136 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v136 - 128);
        if (*(char *)a2 < 0)
        {
          v250 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v136 - 128));
          if (!v250)
            return 0;
          v17 = v251;
          a2 = v250;
          if (v251 <= 2)
          {
LABEL_40:
            *((_DWORD *)this + 6) |= 0x40u;
            *((_DWORD *)this + 80) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2)
            goto LABEL_40;
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_40;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 53;
      goto LABEL_705;
    case 0x35u:
      if (v15 != 176)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v39) = *v14;
      if ((v39 & 0x80) == 0)
        goto LABEL_137;
      v39 = (const char *)(v39 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v39);
        *((_DWORD *)this + 81) = v162;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_137:
        *((_DWORD *)this + 81) = (_DWORD)v39;
      }
      goto LABEL_5;
    case 0x36u:
      if (v15 != 184)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v40) = *v14;
      if ((v40 & 0x80) == 0)
        goto LABEL_142;
      v40 = (const char *)(v40 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v40);
        *((_DWORD *)this + 84) = v163;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_142:
        *((_DWORD *)this + 84) = (_DWORD)v40;
      }
      goto LABEL_5;
    case 0x37u:
      if (v15 != 192)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v41 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_147;
      v41 = v41 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v41);
        *((_BYTE *)this + 305) = v164 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_147:
        *((_BYTE *)this + 305) = v41 != 0;
      }
      goto LABEL_5;
    case 0x38u:
      if (v15 != 201)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x100u;
      *((_QWORD *)this + 41) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x39u:
      if (v15 != 208)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v140 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v140 - 128);
        if (*(char *)a2 < 0)
        {
          v257 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v140 - 128));
          if (!v257)
            return 0;
          v17 = v258;
          a2 = v257;
          if (v258 <= 2)
          {
LABEL_153:
            *((_DWORD *)this + 4) |= 0x20u;
            *((_DWORD *)this + 22) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2)
            goto LABEL_153;
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_153;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 58;
      goto LABEL_705;
    case 0x3Au:
      if (v15 != 216)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v118) = *v14;
      if ((v118 & 0x80) == 0)
        goto LABEL_574;
      v118 = (const char *)(v118 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v118);
        *((_DWORD *)this + 85) = v234;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_574:
        *((_DWORD *)this + 85) = (_DWORD)v118;
      }
      goto LABEL_5;
    case 0x3Bu:
      if (v15 != 224)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if ((*v14 & 0x80000000) == 0)
      {
        if (v17 <= 1)
          goto LABEL_578;
LABEL_697:
        if ((*v8 & 1) != 0)
          v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v135 = 60;
LABEL_705:
        google::protobuf::UnknownFieldSet::AddVarint(v134, v135, v17);
        goto LABEL_5;
      }
      v144 = v17 + (*(unsigned __int8 *)a2 << 7);
      v17 = (v144 - 128);
      if ((*(char *)a2 & 0x80000000) == 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
        if (v17 > 1)
          goto LABEL_697;
LABEL_578:
        *((_DWORD *)this + 4) |= 0x40u;
        *((_DWORD *)this + 23) = v17;
        goto LABEL_5;
      }
      v263 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v144 - 128));
      if (v263)
      {
        v17 = v264;
        a2 = v263;
        if (v264 > 1)
          goto LABEL_697;
        goto LABEL_578;
      }
      return 0;
    case 0x3Cu:
      if (v15 == 232)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 - 2);
        while (1)
        {
          v42 = *((unsigned __int8 *)a2 + 2);
          if (*((char *)a2 + 2) < 0)
          {
            v44 = v42 + (*((unsigned __int8 *)a2 + 3) << 7);
            v42 = (v44 - 128);
            if (*((char *)a2 + 3) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 2), (const char *)(v44 - 128));
              if (!a2)
                return a2;
              v42 = v46;
              if (v46 > 4)
              {
LABEL_165:
                if ((*v8 & 1) != 0)
                  v45 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
                else
                  v45 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
                google::protobuf::UnknownFieldSet::AddVarint(v45, 0x3Du, v42);
                if (*(_QWORD *)a3 <= (unint64_t)a2)
                  goto LABEL_5;
                goto LABEL_161;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 4);
              if (v42 > 4)
                goto LABEL_165;
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            if (v42 > 4)
              goto LABEL_165;
          }
          v43 = *((unsigned int *)this + 10);
          if ((_DWORD)v43 == *((_DWORD *)this + 11))
            google::protobuf::RepeatedField<int>::Reserve(v10, v43 + 1);
          *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v43) = v42;
          *((_DWORD *)this + 10) = v43 + 1;
          if (*(_QWORD *)a3 <= (unint64_t)a2)
            goto LABEL_5;
LABEL_161:
          if (*(_WORD *)a2 != 1000)
            goto LABEL_5;
        }
      }
      if (v15 != 234)
        goto LABEL_18;
      v268[0] = v10;
      v268[1] = (unsigned int *)operations_research::sat::SatParameters_RestartAlgorithm_IsValid;
      v268[2] = (unsigned int *)v8;
      v269 = 61;
      v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((google::protobuf::internal::EpsCopyInputStream *)a3, (google::protobuf::internal *)v14, v268);
      goto LABEL_4;
    case 0x3Du:
      if (v15 != 240)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v119) = *v14;
      if ((v119 & 0x80) == 0)
        goto LABEL_583;
      v119 = (const char *)(v119 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v119);
        *((_DWORD *)this + 88) = v235;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_583:
        *((_DWORD *)this + 88) = (_DWORD)v119;
      }
      goto LABEL_5;
    case 0x3Eu:
      if (v15 != 249)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x800u;
      *((_QWORD *)this + 43) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x3Fu:
      if ((_BYTE)v15)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v120 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_590;
      v120 = v120 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v120);
        *((_BYTE *)this + 98) = v236 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_590:
        *((_BYTE *)this + 98) = v120 != 0;
      }
      goto LABEL_5;
    case 0x40u:
      if (v15 != 8)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x2000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v47) = *v14;
      if ((v47 & 0x80) == 0)
        goto LABEL_177;
      v47 = (const char *)(v47 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v47);
        *((_DWORD *)this + 89) = v165;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_177:
        *((_DWORD *)this + 89) = (_DWORD)v47;
      }
      goto LABEL_5;
    case 0x41u:
      if (v15 != 17)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x4000u;
      *((_QWORD *)this + 45) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x42u:
      if (v15 != 25)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x8000u;
      *((_QWORD *)this + 46) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x43u:
      if (v15 != 32)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v121) = *v14;
      if ((v121 & 0x80) == 0)
        goto LABEL_597;
      v121 = (const char *)(v121 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v121);
        *((_DWORD *)this + 25) = v237;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_597:
        *((_DWORD *)this + 25) = (_DWORD)v121;
      }
      goto LABEL_5;
    case 0x44u:
      if (v15 != 41)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x1000u;
      *((_QWORD *)this + 13) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x45u:
      if (v15 != 50)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 1u;
      v48 = *((_QWORD *)this + 1);
      v11 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
      if ((v48 & 1) != 0)
      {
        v11 = *(google::protobuf::Arena **)v11;
        v12 = *v9;
        if (*v9 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
          goto LABEL_3;
      }
      else
      {
        v12 = *v9;
        if (*v9 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
          goto LABEL_3;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v9, v11, (__int128 *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_);
      v12 = *v9;
LABEL_3:
      v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v12, v14, (uint64_t)a3);
      goto LABEL_4;
    case 0x46u:
      if (v15 != 57)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x10000u;
      *((_QWORD *)this + 47) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x47u:
      if (v15 != 64)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x800000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v49 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_192;
      v49 = v49 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v49);
        *((_BYTE *)this + 393) = v166 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_192:
        *((_BYTE *)this + 393) = v49 != 0;
      }
      goto LABEL_5;
    case 0x48u:
      if (v15 != 72)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v122) = *v14;
      if ((v122 & 0x80) == 0)
        goto LABEL_602;
      v122 = (const char *)(v122 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v122);
        *((_DWORD *)this + 96) = v238;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_602:
        *((_DWORD *)this + 96) = (_DWORD)v122;
      }
      goto LABEL_5;
    case 0x49u:
      if (v15 != 80)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v123 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_607;
      v123 = v123 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v123);
        *((_BYTE *)this + 391) = v239 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_607:
        *((_BYTE *)this + 391) = v123 != 0;
      }
      goto LABEL_5;
    case 0x4Au:
      if (v15 != 88)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v50 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_197;
      v50 = v50 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v50);
        *((_BYTE *)this + 96) = v167 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_197:
        *((_BYTE *)this + 96) = v50 != 0;
      }
      goto LABEL_5;
    case 0x4Bu:
      if (v15 != 97)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x2000u;
      *((_QWORD *)this + 14) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x4Cu:
      if (v15 != 104)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v51 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_202;
      v51 = v51 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v51);
        *((_BYTE *)this + 97) = v168 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_202:
        *((_BYTE *)this + 97) = v51 != 0;
      }
      goto LABEL_5;
    case 0x4Du:
      if (v15 != 112)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x8000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v52 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_207;
      v52 = v52 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v52);
        *((_BYTE *)this + 121) = v169 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_207:
        *((_BYTE *)this + 121) = v52 != 0;
      }
      goto LABEL_5;
    case 0x4Eu:
      if (v15 != 120)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x10000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v53 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_212;
      v53 = v53 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v53);
        *((_BYTE *)this + 122) = v170 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_212:
        *((_BYTE *)this + 122) = v53 != 0;
      }
      goto LABEL_5;
    case 0x4Fu:
      if (v15 != 128)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v54 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_217;
      v54 = v54 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v54);
        *((_BYTE *)this + 444) = v171 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_217:
        *((_BYTE *)this + 444) = v54 != 0;
      }
      goto LABEL_5;
    case 0x51u:
      if (v15 != 144)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v17 = *v14;
      if (*v14 < 0)
      {
        v141 = v17 + (*(unsigned __int8 *)a2 << 7);
        v17 = (v141 - 128);
        if (*(char *)a2 < 0)
        {
          v259 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v141 - 128));
          if (!v259)
            return 0;
          v17 = v260;
          a2 = v259;
          if (v260 <= 6)
          {
LABEL_221:
            *((_DWORD *)this + 4) |= 0x40000u;
            *((_DWORD *)this + 31) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 6)
            goto LABEL_221;
        }
      }
      else if (v17 <= 6)
      {
        goto LABEL_221;
      }
      if ((*v8 & 1) != 0)
        v134 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v134 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      v135 = 82;
      goto LABEL_705;
    case 0x52u:
      if (v15 != 152)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v55 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_226;
      v55 = v55 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v55);
        *((_BYTE *)this + 147) = v172 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_226:
        *((_BYTE *)this + 147) = v55 != 0;
      }
      goto LABEL_5;
    case 0x53u:
      if (v15 != 160)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v56 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_231;
      v56 = v56 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v56);
        *((_BYTE *)this + 389) = v173 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_231:
        *((_BYTE *)this + 389) = v56 != 0;
      }
      goto LABEL_5;
    case 0x54u:
      if (v15 != 168)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v57 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_236;
      v57 = v57 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v57);
        *((_BYTE *)this + 128) = v174 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_236:
        *((_BYTE *)this + 128) = v57 != 0;
      }
      goto LABEL_5;
    case 0x55u:
      if (v15 != 176)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x1000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v124 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_614;
      v124 = v124 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v124);
        *((_BYTE *)this + 394) = v240 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_614:
        *((_BYTE *)this + 394) = v124 != 0;
      }
      goto LABEL_5;
    case 0x56u:
      if (v15 != 184)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v58 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_241;
      v58 = v58 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v58);
        *((_BYTE *)this + 129) = v175 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_241:
        *((_BYTE *)this + 129) = v58 != 0;
      }
      goto LABEL_5;
    case 0x57u:
      if (v15 != 192)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v59 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_246;
      v59 = v59 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v59);
        *((_BYTE *)this + 392) = v176 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_246:
        *((_BYTE *)this + 392) = v59 != 0;
      }
      goto LABEL_5;
    case 0x58u:
      if (v15 != 200)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v60 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_251;
      v60 = v60 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v60);
        *((_BYTE *)this + 390) = v177 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_251:
        *((_BYTE *)this + 390) = v60 != 0;
      }
      goto LABEL_5;
    case 0x59u:
      if (v15 != 208)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v125) = *v14;
      if ((v125 & 0x80) == 0)
        goto LABEL_619;
      v125 = (const char *)(v125 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v125);
        *((_DWORD *)this + 99) = v241;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_619:
        *((_DWORD *)this + 99) = (_DWORD)v125;
      }
      goto LABEL_5;
    case 0x5Au:
      if (v15 != 216)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v126) = *v14;
      if ((v126 & 0x80) == 0)
        goto LABEL_624;
      v126 = (const char *)(v126 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v126);
        *((_DWORD *)this + 100) = v242;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_624:
        *((_DWORD *)this + 100) = (_DWORD)v126;
      }
      goto LABEL_5;
    case 0x5Bu:
      if (v15 != 224)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v127 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_629;
      v127 = v127 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v127);
        *((_BYTE *)this + 123) = v243 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_629:
        *((_BYTE *)this + 123) = v127 != 0;
      }
      goto LABEL_5;
    case 0x5Cu:
      if (v15 != 232)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v61 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_256;
      v61 = v61 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v61);
        *((_BYTE *)this + 395) = v178 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_256:
        *((_BYTE *)this + 395) = v61 != 0;
      }
      goto LABEL_5;
    case 0x5Du:
      if (v15 != 240)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v62 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_261;
      v62 = v62 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v62);
        *((_BYTE *)this + 441) = v179 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_261:
        *((_BYTE *)this + 441) = v62 != 0;
      }
      goto LABEL_5;
    case 0x5Eu:
      if (v15 != 248)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v63 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_266;
      v63 = v63 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v63);
        *((_BYTE *)this + 425) = v180 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_266:
        *((_BYTE *)this + 425) = v63 != 0;
      }
      goto LABEL_5;
    case 0x5Fu:
      if ((_BYTE)v15)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v128) = *v14;
      if ((v128 & 0x80) == 0)
        goto LABEL_634;
      v128 = (const char *)(v128 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v128);
        *((_DWORD *)this + 101) = v244;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_634:
        *((_DWORD *)this + 101) = (_DWORD)v128;
      }
      goto LABEL_5;
    case 0x60u:
      if (v15 != 8)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v64) = *v14;
      if ((v64 & 0x80) == 0)
        goto LABEL_271;
      v64 = (const char *)(v64 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v64);
        *((_DWORD *)this + 102) = v181;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_271:
        *((_DWORD *)this + 102) = (_DWORD)v64;
      }
      goto LABEL_5;
    case 0x61u:
      if (v15 != 16)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v65 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_276;
      v65 = v65 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v65);
        *((_BYTE *)this + 131) = v182 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_276:
        *((_BYTE *)this + 131) = v65 != 0;
      }
      goto LABEL_5;
    case 0x62u:
      if (v15 != 24)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v66) = *v14;
      if ((v66 & 0x80) == 0)
        goto LABEL_281;
      v66 = (const char *)(v66 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v66);
        *((_DWORD *)this + 103) = v183;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_281:
        *((_DWORD *)this + 103) = (_DWORD)v66;
      }
      goto LABEL_5;
    case 0x63u:
      if (v15 != 32)
        goto LABEL_18;
      *((_DWORD *)this + 6) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v67) = *v14;
      if ((v67 & 0x80) == 0)
        goto LABEL_286;
      v67 = (const char *)(v67 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v67);
        *((_DWORD *)this + 104) = v184;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_286:
        *((_DWORD *)this + 104) = (_DWORD)v67;
      }
      goto LABEL_5;
    case 0x64u:
      if (v15 != 40)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v68 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_291;
      v68 = v68 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v68);
        *((_BYTE *)this + 155) = v185 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_291:
        *((_BYTE *)this + 155) = v68 != 0;
      }
      goto LABEL_5;
    case 0x66u:
      if (v15 != 56)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v69 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_296;
      v69 = v69 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v69);
        *((_BYTE *)this + 151) = v186 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_296:
        *((_BYTE *)this + 151) = v69 != 0;
      }
      goto LABEL_5;
    case 0x67u:
      if (v15 != 64)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v70 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_301;
      v70 = v70 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v70);
        *((_QWORD *)this + 17) = v187;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_301:
        *((_QWORD *)this + 17) = v70;
      }
      goto LABEL_5;
    case 0x68u:
      if (v15 != 72)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v71 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_306;
      v71 = v71 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v71);
        *((_BYTE *)this + 148) = v188 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_306:
        *((_BYTE *)this + 148) = v71 != 0;
      }
      goto LABEL_5;
    case 0x69u:
      if (v15 != 80)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v72 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_311;
      v72 = v72 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v72);
        *((_BYTE *)this + 424) = v189 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_311:
        *((_BYTE *)this + 424) = v72 != 0;
      }
      goto LABEL_5;
    case 0x6Au:
      if (v15 != 88)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v73) = *v14;
      if ((v73 & 0x80) == 0)
        goto LABEL_316;
      v73 = (const char *)(v73 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v73);
        *((_DWORD *)this + 105) = v190;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_316:
        *((_DWORD *)this + 105) = (_DWORD)v73;
      }
      goto LABEL_5;
    case 0x6Bu:
      if (v15 != 96)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v74 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_321;
      v74 = v74 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v74);
        *((_BYTE *)this + 502) = v191 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_321:
        *((_BYTE *)this + 502) = v74 != 0;
      }
      goto LABEL_5;
    case 0x6Cu:
      if (v15 != 104)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v75 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_326;
      v75 = v75 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v75);
        *((_BYTE *)this + 503) = v192 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_326:
        *((_BYTE *)this + 503) = v75 != 0;
      }
      goto LABEL_5;
    case 0x6Du:
      if (v15 != 112)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v129) = *v14;
      if ((v129 & 0x80) == 0)
        goto LABEL_639;
      v129 = (const char *)(v129 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v129);
        *((_DWORD *)this + 107) = v245;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_639:
        *((_DWORD *)this + 107) = (_DWORD)v129;
      }
      goto LABEL_5;
    case 0x6Eu:
      if (v15 != 120)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v76 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_331;
      v76 = v76 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v76);
        *((_BYTE *)this + 144) = v193 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_331:
        *((_BYTE *)this + 144) = v76 != 0;
      }
      goto LABEL_5;
    case 0x6Fu:
      if (v15 != 128)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v77 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_336;
      v77 = v77 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v77);
        *((_BYTE *)this + 440) = v194 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_336:
        *((_BYTE *)this + 440) = v77 != 0;
      }
      goto LABEL_5;
    case 0x70u:
      if (v15 != 136)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v130 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_644;
      v130 = v130 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v130);
        *((_BYTE *)this + 426) = v246 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_644:
        *((_BYTE *)this + 426) = v130 != 0;
      }
      goto LABEL_5;
    case 0x71u:
      if (v15 != 144)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v131 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_649;
      v131 = v131 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v131);
        *((_BYTE *)this + 427) = v247 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_649:
        *((_BYTE *)this + 427) = v131 != 0;
      }
      goto LABEL_5;
    case 0x72u:
      if (v15 != 153)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x40u;
      *((_QWORD *)this + 54) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x73u:
      if (v15 != 160)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v78 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_343;
      v78 = v78 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v78);
        *((_BYTE *)this + 442) = v195 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_343:
        *((_BYTE *)this + 442) = v78 != 0;
      }
      goto LABEL_5;
    case 0x74u:
      if (v15 != 168)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v79 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_348;
      v79 = v79 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v79);
        *((_BYTE *)this + 445) = v196 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_348:
        *((_BYTE *)this + 445) = v79 != 0;
      }
      goto LABEL_5;
    case 0x76u:
      if (v15 != 184)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x8000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v80) = *v14;
      if ((v80 & 0x80) == 0)
        goto LABEL_353;
      v80 = (const char *)(v80 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v80);
        *((_DWORD *)this + 112) = v197;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_353:
        *((_DWORD *)this + 112) = (_DWORD)v80;
      }
      goto LABEL_5;
    case 0x77u:
      if (v15 != 192)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x2000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v132 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_654;
      v132 = v132 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v132);
        *((_BYTE *)this + 446) = v248 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_654:
        *((_BYTE *)this + 446) = v132 != 0;
      }
      goto LABEL_5;
    case 0x78u:
      if (v15 != 200)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v81) = *v14;
      if ((v81 & 0x80) == 0)
        goto LABEL_358;
      v81 = (const char *)(v81 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v81);
        *((_DWORD *)this + 114) = v198;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_358:
        *((_DWORD *)this + 114) = (_DWORD)v81;
      }
      goto LABEL_5;
    case 0x79u:
      if (v15 != 208)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v82) = *v14;
      if ((v82 & 0x80) == 0)
        goto LABEL_363;
      v82 = (const char *)(v82 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v82);
        *((_DWORD *)this + 115) = v199;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_363:
        *((_DWORD *)this + 115) = (_DWORD)v82;
      }
      goto LABEL_5;
    case 0x7Au:
      if (v15 != 216)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v83 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_368;
      v83 = v83 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v83);
        *((_QWORD *)this + 58) = v200;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_368:
        *((_QWORD *)this + 58) = v83;
      }
      goto LABEL_5;
    case 0x7Bu:
      if (v15 != 225)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x800000u;
      *((_QWORD *)this + 59) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Cu:
      if (v15 != 233)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x1000000u;
      *((_QWORD *)this + 60) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Du:
      if (v15 != 241)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x2000000u;
      *((_QWORD *)this + 61) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Eu:
      if (v15 != 248)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v84) = *v14;
      if ((v84 & 0x80) == 0)
        goto LABEL_379;
      v84 = (const char *)(v84 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v84);
        *((_DWORD *)this + 124) = v201;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_379:
        *((_DWORD *)this + 124) = (_DWORD)v84;
      }
      goto LABEL_5;
    case 0x7Fu:
      if (v15 != 1)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x80000000;
      *((_QWORD *)this + 63) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x80u:
      if (v15 != 8)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v85 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_386;
      v85 = v85 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v85);
        *((_BYTE *)this + 500) = v202 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_386:
        *((_BYTE *)this + 500) = v85 != 0;
      }
      goto LABEL_5;
    case 0x81u:
      if (v15 != 16)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v86 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_391;
      v86 = v86 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v86);
        *((_BYTE *)this + 145) = v203 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_391:
        *((_BYTE *)this + 145) = v86 != 0;
      }
      goto LABEL_5;
    case 0x82u:
      if (v15 != 24)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v87 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_396;
      v87 = v87 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v87);
        *((_BYTE *)this + 443) = v204 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_396:
        *((_BYTE *)this + 443) = v87 != 0;
      }
      goto LABEL_5;
    case 0x83u:
      if (v15 != 32)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v88 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_401;
      v88 = v88 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v88);
        *((_BYTE *)this + 130) = v205 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_401:
        *((_BYTE *)this + 130) = v88 != 0;
      }
      goto LABEL_5;
    case 0x84u:
      if (v15 != 40)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v89 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_406;
      v89 = v89 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v89);
        *((_BYTE *)this + 157) = v206 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_406:
        *((_BYTE *)this + 157) = v89 != 0;
      }
      goto LABEL_5;
    case 0x85u:
      if (v15 != 48)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v90) = *v14;
      if ((v90 & 0x80) == 0)
        goto LABEL_411;
      v90 = (const char *)(v90 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v90);
        *((_DWORD *)this + 128) = v207;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_411:
        *((_DWORD *)this + 128) = (_DWORD)v90;
      }
      goto LABEL_5;
    case 0x86u:
      if (v15 != 56)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x40u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v91 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_416;
      v91 = v91 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v91);
        *((_BYTE *)this + 544) = v208 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_416:
        *((_BYTE *)this + 544) = v91 != 0;
      }
      goto LABEL_5;
    case 0x87u:
      if (v15 != 64)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v92 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_421;
      v92 = v92 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v92);
        *((_BYTE *)this + 153) = v209 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_421:
        *((_BYTE *)this + 153) = v92 != 0;
      }
      goto LABEL_5;
    case 0x88u:
      if (v15 != 72)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v93 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_426;
      v93 = v93 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v93);
        *((_BYTE *)this + 150) = v210 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_426:
        *((_BYTE *)this + 150) = v93 != 0;
      }
      goto LABEL_5;
    case 0x89u:
      if (v15 != 80)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v94) = *v14;
      if ((v94 & 0x80) == 0)
        goto LABEL_431;
      v94 = (const char *)(v94 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v94);
        *((_DWORD *)this + 129) = v211;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_431:
        *((_DWORD *)this + 129) = (_DWORD)v94;
      }
      goto LABEL_5;
    case 0x8Au:
      if (v15 != 88)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v95 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_436;
      v95 = v95 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v95);
        *((_BYTE *)this + 156) = v212 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_436:
        *((_BYTE *)this + 156) = v95 != 0;
      }
      goto LABEL_5;
    case 0x8Bu:
      if (v15 != 96)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x10000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v96 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_441;
      v96 = v96 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v96);
        *((_BYTE *)this + 452) = v213 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_441:
        *((_BYTE *)this + 452) = v96 != 0;
      }
      goto LABEL_5;
    case 0x8Cu:
      if (v15 != 104)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x40u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v97 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_446;
      v97 = v97 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v97);
        *((_BYTE *)this + 154) = v214 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_446:
        *((_BYTE *)this + 154) = v97 != 0;
      }
      goto LABEL_5;
    case 0x8Du:
      if (v15 != 112)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v98 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_451;
      v98 = v98 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v98);
        *((_QWORD *)this + 20) = v215;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_451:
        *((_QWORD *)this + 20) = v98;
      }
      goto LABEL_5;
    case 0x8Eu:
      if (v15 != 120)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v99 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_456;
      v99 = v99 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v99);
        *((_BYTE *)this + 453) = v216 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_456:
        *((_BYTE *)this + 453) = v99 != 0;
      }
      goto LABEL_5;
    case 0x8Fu:
      if (v15 != 128)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v100 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_461;
      v100 = v100 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v100);
        *((_BYTE *)this + 545) = v217 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_461:
        *((_BYTE *)this + 545) = v100 != 0;
      }
      goto LABEL_5;
    case 0x90u:
      if (v15 != 137)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 4u;
      *((_QWORD *)this + 65) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x91u:
      if (v15 != 145)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 8u;
      *((_QWORD *)this + 66) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x92u:
      if (v15 != 152)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v101) = *v14;
      if ((v101 & 0x80) == 0)
        goto LABEL_470;
      v101 = (const char *)(v101 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v101);
        *((_DWORD *)this + 134) = v218;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_470:
        *((_DWORD *)this + 134) = (_DWORD)v101;
      }
      goto LABEL_5;
    case 0x93u:
      if (v15 != 160)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v102) = *v14;
      if ((v102 & 0x80) == 0)
        goto LABEL_475;
      v102 = (const char *)(v102 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v102);
        *((_DWORD *)this + 135) = v219;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_475:
        *((_DWORD *)this + 135) = (_DWORD)v102;
      }
      goto LABEL_5;
    case 0x94u:
      if (v15 != 168)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v103 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_480;
      v103 = v103 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v103);
        *((_BYTE *)this + 152) = v220 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_480:
        *((_BYTE *)this + 152) = v103 != 0;
      }
      goto LABEL_5;
    case 0x95u:
      if (v15 != 176)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v104 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_485;
      v104 = v104 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v104);
        *((_BYTE *)this + 149) = v221 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_485:
        *((_BYTE *)this + 149) = v104 != 0;
      }
      goto LABEL_5;
    case 0x96u:
      if (v15 != 184)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v105) = *v14;
      if ((v105 & 0x80) == 0)
        goto LABEL_490;
      v105 = (const char *)(v105 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v105);
        *((_DWORD *)this + 42) = v222;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_490:
        *((_DWORD *)this + 42) = (_DWORD)v105;
      }
      goto LABEL_5;
    case 0x97u:
      if (v15 != 192)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x4000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v106 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_495;
      v106 = v106 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v106);
        *((_BYTE *)this + 447) = v223 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_495:
        *((_BYTE *)this + 447) = v106 != 0;
      }
      goto LABEL_5;
    case 0x98u:
      if (v15 != 200)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v107) = *v14;
      if ((v107 & 0x80) == 0)
        goto LABEL_500;
      v107 = (const char *)(v107 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v107);
        *((_DWORD *)this + 137) = v224;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_500:
        *((_DWORD *)this + 137) = (_DWORD)v107;
      }
      goto LABEL_5;
    case 0x99u:
      if (v15 != 208)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v108) = *v14;
      if ((v108 & 0x80) == 0)
        goto LABEL_505;
      v108 = (const char *)(v108 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v108);
        *((_DWORD *)this + 140) = v225;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_505:
        *((_DWORD *)this + 140) = (_DWORD)v108;
      }
      goto LABEL_5;
    case 0x9Au:
      if (v15 != 217)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x400u;
      *((_QWORD *)this + 69) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Bu:
      if (v15 != 225)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x2000u;
      *((_QWORD *)this + 71) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Cu:
      if (v15 != 232)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v109) = *v14;
      if ((v109 & 0x80) == 0)
        goto LABEL_514;
      v109 = (const char *)(v109 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v109);
        *((_DWORD *)this + 141) = v226;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_514:
        *((_DWORD *)this + 141) = (_DWORD)v109;
      }
      goto LABEL_5;
    case 0x9Du:
      if (v15 != 240)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v110 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_519;
      v110 = v110 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v110);
        *((_BYTE *)this + 454) = v227 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_519:
        *((_BYTE *)this + 454) = v110 != 0;
      }
      goto LABEL_5;
    case 0x9Eu:
      if (v15 != 249)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x1000u;
      *((_QWORD *)this + 22) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Fu:
      if (v15 != 1)
        goto LABEL_18;
      *((_DWORD *)this + 5) |= 0x2000u;
      *((_QWORD *)this + 23) = *(_QWORD *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0xA0u:
      if (v15 != 8)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v111 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_528;
      v111 = v111 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v111);
        *((_BYTE *)this + 146) = v228 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_528:
        *((_BYTE *)this + 146) = v111 != 0;
      }
      goto LABEL_5;
    case 0xA1u:
      if (v15 != 16)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v112 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_533;
      v112 = v112 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v112);
        *((_BYTE *)this + 134) = v229 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_533:
        *((_BYTE *)this + 134) = v112 != 0;
      }
      goto LABEL_5;
    case 0xA2u:
      if (v15 != 24)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v113 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_538;
      v113 = v113 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v113);
        *((_BYTE *)this + 135) = v230 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_538:
        *((_BYTE *)this + 135) = v113 != 0;
      }
      goto LABEL_5;
    case 0xA3u:
      if (v15 != 32)
        goto LABEL_18;
      *((_DWORD *)this + 7) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v114 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_543;
      v114 = v114 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v114);
        *((_BYTE *)this + 501) = v231 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_543:
        *((_BYTE *)this + 501) = v114 != 0;
      }
      goto LABEL_5;
    case 0xA4u:
      if (v15 != 40)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v115 = *v14;
      if (*v14 < 0)
      {
        v142 = v115 + (*(unsigned __int8 *)a2 << 7);
        v115 = (v142 - 128);
        if (*(char *)a2 < 0)
        {
          v261 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v142 - 128));
          if (!v261)
            return 0;
          v115 = v262;
          a2 = v261;
          if (v262 <= 3)
          {
LABEL_547:
            *((_DWORD *)this + 5) |= 0x4000u;
            *((_DWORD *)this + 48) = v115;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v115 <= 3)
            goto LABEL_547;
        }
      }
      else if (v115 <= 3)
      {
        goto LABEL_547;
      }
      if ((*v8 & 1) != 0)
        v143 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v143 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      google::protobuf::UnknownFieldSet::AddVarint(v143, 0xA5u, v115);
      goto LABEL_5;
    case 0xA5u:
      if (v15 != 48)
        goto LABEL_18;
      *((_DWORD *)this + 8) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      v116 = *v14;
      if ((*v14 & 0x80000000) == 0)
        goto LABEL_552;
      v116 = v116 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v116);
        *((_BYTE *)this + 546) = v232 != 0;
        if (!a2)
          return a2;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_552:
        *((_BYTE *)this + 546) = v116 != 0;
      }
      goto LABEL_5;
    default:
      goto LABEL_18;
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::SatParameters::_InternalSerialize(operations_research::sat::SatParameters *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  char *v158;
  const void *v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char v166;
  char v167;
  uint64_t v168;
  char v169;
  char v170;
  char v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  char v193;
  char v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char v219;
  char v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char v225;
  char v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  char v231;
  char v232;
  char v233;
  char v234;
  uint64_t v235;
  char v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char v272;
  char v273;
  char v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char v279;
  char v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  char v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  char v298;
  char v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  char v323;
  char v324;
  char v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  char v330;

  v4 = (char *)a2;
  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = *((int *)this + 16);
      *v4 = 8;
      if (v19 <= 0x7F)
      {
LABEL_56:
        v4[1] = v19;
        v4 += 2;
        v6 = *((_DWORD *)this + 5);
        if ((v6 & 0x8000) != 0)
          goto LABEL_65;
        goto LABEL_3;
      }
    }
    else
    {
      v19 = *((int *)this + 16);
      *(_BYTE *)a2 = 8;
      if (v19 <= 0x7F)
        goto LABEL_56;
    }
    v4[1] = v19 | 0x80;
    v20 = v19 >> 7;
    if (v19 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v20 | 0x80;
        v21 = v20 >> 7;
        ++v4;
        v22 = v20 >> 14;
        v20 >>= 7;
      }
      while (v22);
      *(v4 - 1) = v21;
      v6 = *((_DWORD *)this + 5);
      if ((v6 & 0x8000) != 0)
        goto LABEL_65;
    }
    else
    {
      v4[2] = v20;
      v4 += 3;
      v6 = *((_DWORD *)this + 5);
      if ((v6 & 0x8000) != 0)
        goto LABEL_65;
    }
LABEL_3:
    if ((v6 & 0x10000) == 0)
      goto LABEL_4;
LABEL_76:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v27 = *((int *)this + 50);
      *v4 = 32;
      if (v27 <= 0x7F)
      {
LABEL_78:
        v4[1] = v27;
        v4 += 2;
        if ((v6 & 0x20000) != 0)
          goto LABEL_87;
        goto LABEL_5;
      }
    }
    else
    {
      v27 = *((int *)this + 50);
      *v4 = 32;
      if (v27 <= 0x7F)
        goto LABEL_78;
    }
    v4[1] = v27 | 0x80;
    v28 = v27 >> 7;
    if (v27 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v28 | 0x80;
        v29 = v28 >> 7;
        ++v4;
        v30 = v28 >> 14;
        v28 >>= 7;
      }
      while (v30);
      *(v4 - 1) = v29;
      if ((v6 & 0x20000) != 0)
        goto LABEL_87;
    }
    else
    {
      v4[2] = v28;
      v4 += 3;
      if ((v6 & 0x20000) != 0)
        goto LABEL_87;
    }
LABEL_5:
    if ((v6 & 0x40000) == 0)
      goto LABEL_6;
LABEL_98:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v35 = *((int *)this + 52);
      *v4 = 104;
      if (v35 <= 0x7F)
      {
LABEL_100:
        v4[1] = v35;
        v4 += 2;
        if ((v6 & 0x80000) != 0)
          goto LABEL_109;
        goto LABEL_7;
      }
    }
    else
    {
      v35 = *((int *)this + 52);
      *v4 = 104;
      if (v35 <= 0x7F)
        goto LABEL_100;
    }
    v4[1] = v35 | 0x80;
    v36 = v35 >> 7;
    if (v35 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v36 | 0x80;
        v37 = v36 >> 7;
        ++v4;
        v38 = v36 >> 14;
        v36 >>= 7;
      }
      while (v38);
      *(v4 - 1) = v37;
      if ((v6 & 0x80000) != 0)
        goto LABEL_109;
    }
    else
    {
      v4[2] = v36;
      v4 += 3;
      if ((v6 & 0x80000) != 0)
        goto LABEL_109;
    }
LABEL_7:
    if ((v6 & 0x100000) == 0)
      goto LABEL_8;
    goto LABEL_112;
  }
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x8000) == 0)
    goto LABEL_3;
LABEL_65:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v23 = *((int *)this + 49);
    *v4 = 16;
    if (v23 <= 0x7F)
    {
LABEL_67:
      v4[1] = v23;
      v4 += 2;
      if ((v6 & 0x10000) != 0)
        goto LABEL_76;
      goto LABEL_4;
    }
  }
  else
  {
    v23 = *((int *)this + 49);
    *v4 = 16;
    if (v23 <= 0x7F)
      goto LABEL_67;
  }
  v4[1] = v23 | 0x80;
  v24 = v23 >> 7;
  if (v23 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v24 | 0x80;
      v25 = v24 >> 7;
      ++v4;
      v26 = v24 >> 14;
      v24 >>= 7;
    }
    while (v26);
    *(v4 - 1) = v25;
    if ((v6 & 0x10000) != 0)
      goto LABEL_76;
  }
  else
  {
    v4[2] = v24;
    v4 += 3;
    if ((v6 & 0x10000) != 0)
      goto LABEL_76;
  }
LABEL_4:
  if ((v6 & 0x20000) == 0)
    goto LABEL_5;
LABEL_87:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v31 = *((int *)this + 51);
    *v4 = 88;
    if (v31 <= 0x7F)
    {
LABEL_89:
      v4[1] = v31;
      v4 += 2;
      if ((v6 & 0x40000) != 0)
        goto LABEL_98;
      goto LABEL_6;
    }
  }
  else
  {
    v31 = *((int *)this + 51);
    *v4 = 88;
    if (v31 <= 0x7F)
      goto LABEL_89;
  }
  v4[1] = v31 | 0x80;
  v32 = v31 >> 7;
  if (v31 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v32 | 0x80;
      v33 = v32 >> 7;
      ++v4;
      v34 = v32 >> 14;
      v32 >>= 7;
    }
    while (v34);
    *(v4 - 1) = v33;
    if ((v6 & 0x40000) != 0)
      goto LABEL_98;
  }
  else
  {
    v4[2] = v32;
    v4 += 3;
    if ((v6 & 0x40000) != 0)
      goto LABEL_98;
  }
LABEL_6:
  if ((v6 & 0x80000) == 0)
    goto LABEL_7;
LABEL_109:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v39 = *((_QWORD *)this + 27);
  *v4 = 121;
  *(_QWORD *)(v4 + 1) = v39;
  v4 += 9;
  if ((v6 & 0x100000) == 0)
  {
LABEL_8:
    if ((v6 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_115;
  }
LABEL_112:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v40 = *((_QWORD *)this + 28);
  *(_WORD *)v4 = 385;
  *(_QWORD *)(v4 + 2) = v40;
  v4 += 10;
  if ((v6 & 0x200000) == 0)
  {
LABEL_9:
    if ((v6 & 0x400000) == 0)
      goto LABEL_10;
    goto LABEL_118;
  }
LABEL_115:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v41 = *((_QWORD *)this + 29);
  *(_WORD *)v4 = 393;
  *(_QWORD *)(v4 + 2) = v41;
  v4 += 10;
  if ((v6 & 0x400000) == 0)
  {
LABEL_10:
    if ((v6 & 0x800000) == 0)
      goto LABEL_11;
    goto LABEL_121;
  }
LABEL_118:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v42 = *((_QWORD *)this + 30);
  *(_WORD *)v4 = 401;
  *(_QWORD *)(v4 + 2) = v42;
  v4 += 10;
  if ((v6 & 0x800000) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_12;
    goto LABEL_124;
  }
LABEL_121:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v43 = *((_QWORD *)this + 31);
  *(_WORD *)v4 = 433;
  *(_QWORD *)(v4 + 2) = v43;
  v4 += 10;
  if ((v6 & 0x1000000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_13;
LABEL_127:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v45 = *((int *)this + 66);
      *(_WORD *)v4 = 448;
      if (v45 <= 0x7F)
      {
LABEL_129:
        v4[2] = v45;
        v4 += 3;
        if ((v6 & 0x4000000) != 0)
          goto LABEL_138;
        goto LABEL_14;
      }
    }
    else
    {
      v45 = *((int *)this + 66);
      *(_WORD *)v4 = 448;
      if (v45 <= 0x7F)
        goto LABEL_129;
    }
    v4[2] = v45 | 0x80;
    v46 = v45 >> 7;
    if (v45 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v46 | 0x80;
        v47 = v46 >> 7;
        ++v4;
        v48 = v46 >> 14;
        v46 >>= 7;
      }
      while (v48);
      *(v4 - 1) = v47;
      if ((v6 & 0x4000000) != 0)
        goto LABEL_138;
    }
    else
    {
      v4[3] = v46;
      v4 += 4;
      if ((v6 & 0x4000000) != 0)
        goto LABEL_138;
    }
LABEL_14:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_15;
LABEL_149:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v53 = *((int *)this + 68);
      *(_WORD *)v4 = 504;
      if (v53 <= 0x7F)
      {
LABEL_151:
        v4[2] = v53;
        v4 += 3;
        if ((*((_BYTE *)this + 16) & 8) != 0)
          goto LABEL_160;
        goto LABEL_16;
      }
    }
    else
    {
      v53 = *((int *)this + 68);
      *(_WORD *)v4 = 504;
      if (v53 <= 0x7F)
        goto LABEL_151;
    }
    v4[2] = v53 | 0x80;
    v54 = v53 >> 7;
    if (v53 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v54 | 0x80;
        v55 = v54 >> 7;
        ++v4;
        v56 = v54 >> 14;
        v54 >>= 7;
      }
      while (v56);
      *(v4 - 1) = v55;
      if ((*((_BYTE *)this + 16) & 8) != 0)
        goto LABEL_160;
    }
    else
    {
      v4[3] = v54;
      v4 += 4;
      if ((*((_BYTE *)this + 16) & 8) != 0)
        goto LABEL_160;
    }
LABEL_16:
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_17;
    goto LABEL_163;
  }
LABEL_124:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v44 = *((_QWORD *)this + 32);
  *(_WORD *)v4 = 441;
  *(_QWORD *)(v4 + 2) = v44;
  v4 += 10;
  if ((v6 & 0x2000000) != 0)
    goto LABEL_127;
LABEL_13:
  if ((v6 & 0x4000000) == 0)
    goto LABEL_14;
LABEL_138:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v49 = *((int *)this + 67);
    *(_WORD *)v4 = 496;
    if (v49 <= 0x7F)
    {
LABEL_140:
      v4[2] = v49;
      v4 += 3;
      if ((v6 & 0x8000000) != 0)
        goto LABEL_149;
      goto LABEL_15;
    }
  }
  else
  {
    v49 = *((int *)this + 67);
    *(_WORD *)v4 = 496;
    if (v49 <= 0x7F)
      goto LABEL_140;
  }
  v4[2] = v49 | 0x80;
  v50 = v49 >> 7;
  if (v49 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v50 | 0x80;
      v51 = v50 >> 7;
      ++v4;
      v52 = v50 >> 14;
      v50 >>= 7;
    }
    while (v52);
    *(v4 - 1) = v51;
    if ((v6 & 0x8000000) != 0)
      goto LABEL_149;
  }
  else
  {
    v4[3] = v50;
    v4 += 4;
    if ((v6 & 0x8000000) != 0)
      goto LABEL_149;
  }
LABEL_15:
  if ((*((_BYTE *)this + 16) & 8) == 0)
    goto LABEL_16;
LABEL_160:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v57 = *((_QWORD *)this + 9);
  *(_WORD *)v4 = 641;
  *(_QWORD *)(v4 + 2) = v57;
  v4 += 10;
  if ((*((_BYTE *)this + 24) & 4) == 0)
  {
LABEL_17:
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
      goto LABEL_18;
LABEL_166:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v59 = *((int *)this + 69);
      *(_WORD *)v4 = 656;
      if (v59 <= 0x7F)
      {
LABEL_168:
        v4[2] = v59;
        v4 += 3;
        if ((*((_BYTE *)this + 30) & 8) != 0)
          goto LABEL_177;
        goto LABEL_19;
      }
    }
    else
    {
      v59 = *((int *)this + 69);
      *(_WORD *)v4 = 656;
      if (v59 <= 0x7F)
        goto LABEL_168;
    }
    v4[2] = v59 | 0x80;
    v60 = v59 >> 7;
    if (v59 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v60 | 0x80;
        v61 = v60 >> 7;
        ++v4;
        v62 = v60 >> 14;
        v60 >>= 7;
      }
      while (v62);
      *(v4 - 1) = v61;
      if ((*((_BYTE *)this + 30) & 8) != 0)
        goto LABEL_177;
    }
    else
    {
      v4[3] = v60;
      v4 += 4;
      if ((*((_BYTE *)this + 30) & 8) != 0)
        goto LABEL_177;
    }
LABEL_19:
    v7 = *((_DWORD *)this + 5);
    if ((v7 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_180;
  }
LABEL_163:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v58 = *((_BYTE *)this + 306);
  *(_WORD *)v4 = 648;
  v4[2] = v58;
  v4 += 3;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
    goto LABEL_166;
LABEL_18:
  if ((*((_BYTE *)this + 30) & 8) == 0)
    goto LABEL_19;
LABEL_177:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v63 = *((_BYTE *)this + 455);
  *(_WORD *)v4 = 664;
  v4[2] = v63;
  v4 += 3;
  v7 = *((_DWORD *)this + 5);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_183;
  }
LABEL_180:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v64 = *((_QWORD *)this + 35);
  *(_WORD *)v4 = 673;
  *(_QWORD *)(v4 + 2) = v64;
  v4 += 10;
  if ((v7 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_194:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v69 = *((_QWORD *)this + 37);
      *(_WORD *)v4 = 704;
      if (v69 <= 0x7F)
      {
LABEL_196:
        v4[2] = v69;
        v4 += 3;
        v8 = *((_DWORD *)this + 4);
        if ((v8 & 0x400) != 0)
          goto LABEL_205;
        goto LABEL_23;
      }
    }
    else
    {
      v69 = *((_QWORD *)this + 37);
      *(_WORD *)v4 = 704;
      if (v69 <= 0x7F)
        goto LABEL_196;
    }
    v4[2] = v69 | 0x80;
    v70 = v69 >> 7;
    if (v69 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v70 | 0x80;
        v71 = v70 >> 7;
        ++v4;
        v72 = v70 >> 14;
        v70 >>= 7;
      }
      while (v72);
      *(v4 - 1) = v71;
      v8 = *((_DWORD *)this + 4);
      if ((v8 & 0x400) != 0)
        goto LABEL_205;
    }
    else
    {
      v4[3] = v70;
      v4 += 4;
      v8 = *((_DWORD *)this + 4);
      if ((v8 & 0x400) != 0)
        goto LABEL_205;
    }
LABEL_23:
    if ((v8 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_208;
  }
LABEL_183:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v65 = *((_QWORD *)this + 36);
    *(_WORD *)v4 = 680;
    if (v65 <= 0x7F)
    {
LABEL_185:
      v4[2] = v65;
      v4 += 3;
      if (v7 < 0)
        goto LABEL_194;
      goto LABEL_22;
    }
  }
  else
  {
    v65 = *((_QWORD *)this + 36);
    *(_WORD *)v4 = 680;
    if (v65 <= 0x7F)
      goto LABEL_185;
  }
  v4[2] = v65 | 0x80;
  v66 = v65 >> 7;
  if (v65 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v66 | 0x80;
      v67 = v66 >> 7;
      ++v4;
      v68 = v66 >> 14;
      v66 >>= 7;
    }
    while (v68);
    *(v4 - 1) = v67;
    if (v7 < 0)
      goto LABEL_194;
  }
  else
  {
    v4[3] = v66;
    v4 += 4;
    if (v7 < 0)
      goto LABEL_194;
  }
LABEL_22:
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x400) == 0)
    goto LABEL_23;
LABEL_205:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v73 = *((_BYTE *)this + 99);
  *(_WORD *)v4 = 712;
  v4[2] = v73;
  v4 += 3;
  if ((v8 & 0x800000) == 0)
  {
LABEL_24:
    if ((*((_BYTE *)this + 24) & 1) == 0)
      goto LABEL_25;
    goto LABEL_211;
  }
LABEL_208:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v74 = *((_BYTE *)this + 132);
  *(_WORD *)v4 = 728;
  v4[2] = v74;
  v4 += 3;
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
LABEL_25:
    if ((*((_BYTE *)this + 16) & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_214;
  }
LABEL_211:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v75 = *((_BYTE *)this + 304);
  *(_WORD *)v4 = 736;
  v4[2] = v75;
  v4 += 3;
  if ((*((_BYTE *)this + 16) & 0x10) == 0)
  {
LABEL_26:
    v9 = *((_DWORD *)this + 6);
    if ((v9 & 0x10) == 0)
      goto LABEL_27;
LABEL_217:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v77 = *((int *)this + 77);
      *(_WORD *)v4 = 752;
      if (v77 <= 0x7F)
      {
LABEL_219:
        v4[2] = v77;
        v4 += 3;
        if ((v9 & 0x20) != 0)
          goto LABEL_228;
        goto LABEL_28;
      }
    }
    else
    {
      v77 = *((int *)this + 77);
      *(_WORD *)v4 = 752;
      if (v77 <= 0x7F)
        goto LABEL_219;
    }
    v4[2] = v77 | 0x80;
    v78 = v77 >> 7;
    if (v77 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v78 | 0x80;
        v79 = v78 >> 7;
        ++v4;
        v80 = v78 >> 14;
        v78 >>= 7;
      }
      while (v80);
      *(v4 - 1) = v79;
      if ((v9 & 0x20) != 0)
        goto LABEL_228;
    }
    else
    {
      v4[3] = v78;
      v4 += 4;
      if ((v9 & 0x20) != 0)
        goto LABEL_228;
    }
LABEL_28:
    if ((*((_BYTE *)this + 19) & 1) == 0)
      goto LABEL_29;
    goto LABEL_231;
  }
LABEL_214:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v76 = *((_QWORD *)this + 10);
  *(_WORD *)v4 = 745;
  *(_QWORD *)(v4 + 2) = v76;
  v4 += 10;
  v9 = *((_DWORD *)this + 6);
  if ((v9 & 0x10) != 0)
    goto LABEL_217;
LABEL_27:
  if ((v9 & 0x20) == 0)
    goto LABEL_28;
LABEL_228:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v81 = *((_QWORD *)this + 39);
  *(_WORD *)v4 = 761;
  *(_QWORD *)(v4 + 2) = v81;
  v4 += 10;
  if ((*((_BYTE *)this + 19) & 1) == 0)
  {
LABEL_29:
    v10 = *((_DWORD *)this + 6);
    if ((v10 & 8) == 0)
      goto LABEL_30;
    goto LABEL_234;
  }
LABEL_231:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v82 = *((_BYTE *)this + 133);
  *(_WORD *)v4 = 896;
  v4[2] = v82;
  v4 += 3;
  v10 = *((_DWORD *)this + 6);
  if ((v10 & 8) == 0)
  {
LABEL_30:
    if ((v10 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_237;
  }
LABEL_234:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v83 = *((_BYTE *)this + 307);
  *(_WORD *)v4 = 904;
  v4[2] = v83;
  v4 += 3;
  if ((v10 & 0x40000) == 0)
  {
LABEL_31:
    v11 = *((_DWORD *)this + 4);
    if ((v11 & 4) == 0)
      goto LABEL_32;
LABEL_240:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v85 = *((int *)this + 17);
      *(_WORD *)v4 = 920;
      if (v85 <= 0x7F)
      {
LABEL_242:
        v4[2] = v85;
        v4 += 3;
        if ((v11 & 0x4000) != 0)
          goto LABEL_251;
        goto LABEL_33;
      }
    }
    else
    {
      v85 = *((int *)this + 17);
      *(_WORD *)v4 = 920;
      if (v85 <= 0x7F)
        goto LABEL_242;
    }
    v4[2] = v85 | 0x80;
    v86 = v85 >> 7;
    if (v85 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v86 | 0x80;
        v87 = v86 >> 7;
        ++v4;
        v88 = v86 >> 14;
        v86 >>= 7;
      }
      while (v88);
      *(v4 - 1) = v87;
      if ((v11 & 0x4000) != 0)
        goto LABEL_251;
    }
    else
    {
      v4[3] = v86;
      v4 += 4;
      if ((v11 & 0x4000) != 0)
        goto LABEL_251;
    }
LABEL_33:
    v12 = *((_DWORD *)this + 6);
    if ((v12 & 0x40) == 0)
      goto LABEL_34;
LABEL_254:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v90 = *((int *)this + 80);
      *(_WORD *)v4 = 936;
      if (v90 <= 0x7F)
      {
LABEL_256:
        v4[2] = v90;
        v4 += 3;
        if ((v12 & 0x80) != 0)
          goto LABEL_265;
        goto LABEL_35;
      }
    }
    else
    {
      v90 = *((int *)this + 80);
      *(_WORD *)v4 = 936;
      if (v90 <= 0x7F)
        goto LABEL_256;
    }
    v4[2] = v90 | 0x80;
    v91 = v90 >> 7;
    if (v90 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v91 | 0x80;
        v92 = v91 >> 7;
        ++v4;
        v93 = v91 >> 14;
        v91 >>= 7;
      }
      while (v93);
      *(v4 - 1) = v92;
      if ((v12 & 0x80) != 0)
        goto LABEL_265;
    }
    else
    {
      v4[3] = v91;
      v4 += 4;
      if ((v12 & 0x80) != 0)
        goto LABEL_265;
    }
LABEL_35:
    if ((v12 & 0x200) == 0)
      goto LABEL_36;
LABEL_276:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v98 = *((int *)this + 84);
      *(_WORD *)v4 = 952;
      if (v98 <= 0x7F)
      {
LABEL_278:
        v4[2] = v98;
        v4 += 3;
        if ((v12 & 2) != 0)
          goto LABEL_287;
        goto LABEL_37;
      }
    }
    else
    {
      v98 = *((int *)this + 84);
      *(_WORD *)v4 = 952;
      if (v98 <= 0x7F)
        goto LABEL_278;
    }
    v4[2] = v98 | 0x80;
    v99 = v98 >> 7;
    if (v98 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v99 | 0x80;
        v100 = v99 >> 7;
        ++v4;
        v101 = v99 >> 14;
        v99 >>= 7;
      }
      while (v101);
      *(v4 - 1) = v100;
      if ((v12 & 2) != 0)
        goto LABEL_287;
    }
    else
    {
      v4[3] = v99;
      v4 += 4;
      if ((v12 & 2) != 0)
        goto LABEL_287;
    }
LABEL_37:
    if ((v12 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_290;
  }
LABEL_237:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v84 = *((_BYTE *)this + 388);
  *(_WORD *)v4 = 912;
  v4[2] = v84;
  v4 += 3;
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 4) != 0)
    goto LABEL_240;
LABEL_32:
  if ((v11 & 0x4000) == 0)
    goto LABEL_33;
LABEL_251:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v89 = *((_BYTE *)this + 120);
  *(_WORD *)v4 = 928;
  v4[2] = v89;
  v4 += 3;
  v12 = *((_DWORD *)this + 6);
  if ((v12 & 0x40) != 0)
    goto LABEL_254;
LABEL_34:
  if ((v12 & 0x80) == 0)
    goto LABEL_35;
LABEL_265:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v94 = *((int *)this + 81);
    *(_WORD *)v4 = 944;
    if (v94 <= 0x7F)
    {
LABEL_267:
      v4[2] = v94;
      v4 += 3;
      if ((v12 & 0x200) != 0)
        goto LABEL_276;
      goto LABEL_36;
    }
  }
  else
  {
    v94 = *((int *)this + 81);
    *(_WORD *)v4 = 944;
    if (v94 <= 0x7F)
      goto LABEL_267;
  }
  v4[2] = v94 | 0x80;
  v95 = v94 >> 7;
  if (v94 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v95 | 0x80;
      v96 = v95 >> 7;
      ++v4;
      v97 = v95 >> 14;
      v95 >>= 7;
    }
    while (v97);
    *(v4 - 1) = v96;
    if ((v12 & 0x200) != 0)
      goto LABEL_276;
  }
  else
  {
    v4[3] = v95;
    v4 += 4;
    if ((v12 & 0x200) != 0)
      goto LABEL_276;
  }
LABEL_36:
  if ((v12 & 2) == 0)
    goto LABEL_37;
LABEL_287:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v102 = *((_BYTE *)this + 305);
  *(_WORD *)v4 = 960;
  v4[2] = v102;
  v4 += 3;
  if ((v12 & 0x100) == 0)
  {
LABEL_38:
    if ((*((_BYTE *)this + 16) & 0x20) == 0)
      goto LABEL_39;
LABEL_293:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v104 = *((int *)this + 22);
      *(_WORD *)v4 = 976;
      if (v104 <= 0x7F)
      {
LABEL_295:
        v4[2] = v104;
        v4 += 3;
        if ((*((_BYTE *)this + 25) & 4) != 0)
          goto LABEL_304;
        goto LABEL_40;
      }
    }
    else
    {
      v104 = *((int *)this + 22);
      *(_WORD *)v4 = 976;
      if (v104 <= 0x7F)
        goto LABEL_295;
    }
    v4[2] = v104 | 0x80;
    v105 = v104 >> 7;
    if (v104 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v105 | 0x80;
        v106 = v105 >> 7;
        ++v4;
        v107 = v105 >> 14;
        v105 >>= 7;
      }
      while (v107);
      *(v4 - 1) = v106;
      if ((*((_BYTE *)this + 25) & 4) != 0)
        goto LABEL_304;
    }
    else
    {
      v4[3] = v105;
      v4 += 4;
      if ((*((_BYTE *)this + 25) & 4) != 0)
        goto LABEL_304;
    }
LABEL_40:
    if ((*((_BYTE *)this + 16) & 0x40) == 0)
      goto LABEL_41;
LABEL_315:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v112 = *((int *)this + 23);
      *(_WORD *)v4 = 992;
      if (v112 <= 0x7F)
      {
LABEL_317:
        v4[2] = v112;
        v4 += 3;
        v13 = *((unsigned int *)this + 10);
        if ((int)v13 >= 1)
          goto LABEL_42;
        goto LABEL_326;
      }
    }
    else
    {
      v112 = *((int *)this + 23);
      *(_WORD *)v4 = 992;
      if (v112 <= 0x7F)
        goto LABEL_317;
    }
    v4[2] = v112 | 0x80;
    v113 = v112 >> 7;
    if (v112 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v113 | 0x80;
        v114 = v113 >> 7;
        ++v4;
        v115 = v113 >> 14;
        v113 >>= 7;
      }
      while (v115);
      *(v4 - 1) = v114;
      v13 = *((unsigned int *)this + 10);
      if ((int)v13 >= 1)
        goto LABEL_42;
    }
    else
    {
      v4[3] = v113;
      v4 += 4;
      v13 = *((unsigned int *)this + 10);
      if ((int)v13 >= 1)
        goto LABEL_42;
    }
    goto LABEL_326;
  }
LABEL_290:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v103 = *((_QWORD *)this + 41);
  *(_WORD *)v4 = 969;
  *(_QWORD *)(v4 + 2) = v103;
  v4 += 10;
  if ((*((_BYTE *)this + 16) & 0x20) != 0)
    goto LABEL_293;
LABEL_39:
  if ((*((_BYTE *)this + 25) & 4) == 0)
    goto LABEL_40;
LABEL_304:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v108 = *((int *)this + 85);
    *(_WORD *)v4 = 984;
    if (v108 <= 0x7F)
    {
LABEL_306:
      v4[2] = v108;
      v4 += 3;
      if ((*((_BYTE *)this + 16) & 0x40) != 0)
        goto LABEL_315;
      goto LABEL_41;
    }
  }
  else
  {
    v108 = *((int *)this + 85);
    *(_WORD *)v4 = 984;
    if (v108 <= 0x7F)
      goto LABEL_306;
  }
  v4[2] = v108 | 0x80;
  v109 = v108 >> 7;
  if (v108 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v109 | 0x80;
      v110 = v109 >> 7;
      ++v4;
      v111 = v109 >> 14;
      v109 >>= 7;
    }
    while (v111);
    *(v4 - 1) = v110;
    if ((*((_BYTE *)this + 16) & 0x40) != 0)
      goto LABEL_315;
  }
  else
  {
    v4[3] = v109;
    v4 += 4;
    if ((*((_BYTE *)this + 16) & 0x40) != 0)
      goto LABEL_315;
  }
LABEL_41:
  v13 = *((unsigned int *)this + 10);
  if ((int)v13 >= 1)
  {
LABEL_42:
    for (i = 0; i != v13; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
      {
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        v15 = *(int *)(*((_QWORD *)this + 6) + 4 * i);
        *(_WORD *)v4 = 1000;
        if (v15 > 0x7F)
        {
LABEL_47:
          v4[2] = v15 | 0x80;
          v16 = v15 >> 7;
          if (v15 >> 14)
          {
            v4 += 4;
            do
            {
              *(v4 - 1) = v16 | 0x80;
              v17 = v16 >> 7;
              ++v4;
              v18 = v16 >> 14;
              v16 >>= 7;
            }
            while (v18);
            *(v4 - 1) = v17;
          }
          else
          {
            v4[3] = v16;
            v4 += 4;
          }
          continue;
        }
      }
      else
      {
        v15 = *(int *)(*((_QWORD *)this + 6) + 4 * i);
        *(_WORD *)v4 = 1000;
        if (v15 > 0x7F)
          goto LABEL_47;
      }
      v4[2] = v15;
      v4 += 3;
    }
  }
LABEL_326:
  v116 = *((_DWORD *)this + 6);
  if ((v116 & 0x1000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v139 = *((int *)this + 88);
      *(_WORD *)v4 = 1008;
      if (v139 <= 0x7F)
      {
LABEL_432:
        v4[2] = v139;
        v4 += 3;
        if ((v116 & 0x800) != 0)
          goto LABEL_441;
        goto LABEL_328;
      }
    }
    else
    {
      v139 = *((int *)this + 88);
      *(_WORD *)v4 = 1008;
      if (v139 <= 0x7F)
        goto LABEL_432;
    }
    v4[2] = v139 | 0x80;
    v140 = v139 >> 7;
    if (v139 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v140 | 0x80;
        v141 = v140 >> 7;
        ++v4;
        v142 = v140 >> 14;
        v140 >>= 7;
      }
      while (v142);
      *(v4 - 1) = v141;
      if ((v116 & 0x800) != 0)
        goto LABEL_441;
    }
    else
    {
      v4[3] = v140;
      v4 += 4;
      if ((v116 & 0x800) != 0)
        goto LABEL_441;
    }
LABEL_328:
    if ((*((_BYTE *)this + 17) & 2) == 0)
      goto LABEL_329;
    goto LABEL_444;
  }
  if ((v116 & 0x800) == 0)
    goto LABEL_328;
LABEL_441:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v143 = *((_QWORD *)this + 43);
  *(_WORD *)v4 = 1017;
  *(_QWORD *)(v4 + 2) = v143;
  v4 += 10;
  if ((*((_BYTE *)this + 17) & 2) == 0)
  {
LABEL_329:
    v117 = *((_DWORD *)this + 6);
    if ((v117 & 0x2000) == 0)
      goto LABEL_330;
LABEL_447:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v145 = *((int *)this + 89);
      *(_WORD *)v4 = 1160;
      if (v145 <= 0x7F)
      {
LABEL_449:
        v4[2] = v145;
        v4 += 3;
        if ((v117 & 0x4000) != 0)
          goto LABEL_458;
        goto LABEL_331;
      }
    }
    else
    {
      v145 = *((int *)this + 89);
      *(_WORD *)v4 = 1160;
      if (v145 <= 0x7F)
        goto LABEL_449;
    }
    v4[2] = v145 | 0x80;
    v146 = v145 >> 7;
    if (v145 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v146 | 0x80;
        v147 = v146 >> 7;
        ++v4;
        v148 = v146 >> 14;
        v146 >>= 7;
      }
      while (v148);
      *(v4 - 1) = v147;
      if ((v117 & 0x4000) != 0)
        goto LABEL_458;
    }
    else
    {
      v4[3] = v146;
      v4 += 4;
      if ((v117 & 0x4000) != 0)
        goto LABEL_458;
    }
LABEL_331:
    if ((v117 & 0x8000) == 0)
      goto LABEL_332;
    goto LABEL_461;
  }
LABEL_444:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v144 = *((_BYTE *)this + 98);
  *(_WORD *)v4 = 1152;
  v4[2] = v144;
  v4 += 3;
  v117 = *((_DWORD *)this + 6);
  if ((v117 & 0x2000) != 0)
    goto LABEL_447;
LABEL_330:
  if ((v117 & 0x4000) == 0)
    goto LABEL_331;
LABEL_458:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v149 = *((_QWORD *)this + 45);
  *(_WORD *)v4 = 1169;
  *(_QWORD *)(v4 + 2) = v149;
  v4 += 10;
  if ((v117 & 0x8000) == 0)
  {
LABEL_332:
    v118 = *((_DWORD *)this + 4);
    if ((v118 & 0x800) == 0)
      goto LABEL_333;
LABEL_464:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v151 = *((int *)this + 25);
      *(_WORD *)v4 = 1184;
      if (v151 <= 0x7F)
      {
LABEL_466:
        v4[2] = v151;
        v4 += 3;
        if ((v118 & 0x1000) != 0)
          goto LABEL_475;
        goto LABEL_334;
      }
    }
    else
    {
      v151 = *((int *)this + 25);
      *(_WORD *)v4 = 1184;
      if (v151 <= 0x7F)
        goto LABEL_466;
    }
    v4[2] = v151 | 0x80;
    v152 = v151 >> 7;
    if (v151 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v152 | 0x80;
        v153 = v152 >> 7;
        ++v4;
        v154 = v152 >> 14;
        v152 >>= 7;
      }
      while (v154);
      *(v4 - 1) = v153;
      if ((v118 & 0x1000) != 0)
        goto LABEL_475;
    }
    else
    {
      v4[3] = v152;
      v4 += 4;
      if ((v118 & 0x1000) != 0)
        goto LABEL_475;
    }
LABEL_334:
    if ((v118 & 1) == 0)
      goto LABEL_335;
LABEL_478:
    v156 = *((_QWORD *)this + 7);
    if (*(char *)(v156 + 23) < 0)
    {
      v157 = *(_QWORD *)(v156 + 8);
      if (v157 > 127)
        goto LABEL_496;
    }
    else
    {
      v157 = *(unsigned __int8 *)(v156 + 23);
    }
    if (*(_QWORD *)a3 - (_QWORD)v4 + 13 >= v157)
    {
      *(_WORD *)v4 = 1202;
      v158 = v4 + 3;
      v4[2] = v157;
      if (*(char *)(v156 + 23) >= 0)
        v159 = (const void *)v156;
      else
        v159 = *(const void **)v156;
      memcpy(v4 + 3, v159, v157);
      v4 = &v158[v157];
      v119 = *((_DWORD *)this + 6);
      if ((v119 & 0x10000) != 0)
        goto LABEL_486;
LABEL_336:
      if ((v119 & 0x800000) == 0)
        goto LABEL_337;
      goto LABEL_489;
    }
LABEL_496:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 70, v156, v4);
    v119 = *((_DWORD *)this + 6);
    if ((v119 & 0x10000) != 0)
      goto LABEL_486;
    goto LABEL_336;
  }
LABEL_461:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v150 = *((_QWORD *)this + 46);
  *(_WORD *)v4 = 1177;
  *(_QWORD *)(v4 + 2) = v150;
  v4 += 10;
  v118 = *((_DWORD *)this + 4);
  if ((v118 & 0x800) != 0)
    goto LABEL_464;
LABEL_333:
  if ((v118 & 0x1000) == 0)
    goto LABEL_334;
LABEL_475:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v155 = *((_QWORD *)this + 13);
  *(_WORD *)v4 = 1193;
  *(_QWORD *)(v4 + 2) = v155;
  v4 += 10;
  if ((v118 & 1) != 0)
    goto LABEL_478;
LABEL_335:
  v119 = *((_DWORD *)this + 6);
  if ((v119 & 0x10000) == 0)
    goto LABEL_336;
LABEL_486:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v160 = *((_QWORD *)this + 47);
  *(_WORD *)v4 = 1209;
  *(_QWORD *)(v4 + 2) = v160;
  v4 += 10;
  if ((v119 & 0x800000) == 0)
  {
LABEL_337:
    if ((v119 & 0x20000) == 0)
      goto LABEL_338;
LABEL_492:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v162 = *((int *)this + 96);
      *(_WORD *)v4 = 1224;
      if (v162 <= 0x7F)
      {
LABEL_494:
        v4[2] = v162;
        v4 += 3;
        if ((v119 & 0x200000) != 0)
          goto LABEL_505;
        goto LABEL_339;
      }
    }
    else
    {
      v162 = *((int *)this + 96);
      *(_WORD *)v4 = 1224;
      if (v162 <= 0x7F)
        goto LABEL_494;
    }
    v4[2] = v162 | 0x80;
    v163 = v162 >> 7;
    if (v162 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v163 | 0x80;
        v164 = v163 >> 7;
        ++v4;
        v165 = v163 >> 14;
        v163 >>= 7;
      }
      while (v165);
      *(v4 - 1) = v164;
      if ((v119 & 0x200000) != 0)
        goto LABEL_505;
    }
    else
    {
      v4[3] = v163;
      v4 += 4;
      if ((v119 & 0x200000) != 0)
        goto LABEL_505;
    }
LABEL_339:
    v120 = *((_DWORD *)this + 4);
    if ((v120 & 0x80) == 0)
      goto LABEL_340;
    goto LABEL_508;
  }
LABEL_489:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v161 = *((_BYTE *)this + 393);
  *(_WORD *)v4 = 1216;
  v4[2] = v161;
  v4 += 3;
  if ((v119 & 0x20000) != 0)
    goto LABEL_492;
LABEL_338:
  if ((v119 & 0x200000) == 0)
    goto LABEL_339;
LABEL_505:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v166 = *((_BYTE *)this + 391);
  *(_WORD *)v4 = 1232;
  v4[2] = v166;
  v4 += 3;
  v120 = *((_DWORD *)this + 4);
  if ((v120 & 0x80) == 0)
  {
LABEL_340:
    if ((v120 & 0x2000) == 0)
      goto LABEL_341;
    goto LABEL_511;
  }
LABEL_508:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v167 = *((_BYTE *)this + 96);
  *(_WORD *)v4 = 1240;
  v4[2] = v167;
  v4 += 3;
  if ((v120 & 0x2000) == 0)
  {
LABEL_341:
    if ((v120 & 0x100) == 0)
      goto LABEL_342;
    goto LABEL_514;
  }
LABEL_511:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v168 = *((_QWORD *)this + 14);
  *(_WORD *)v4 = 1249;
  *(_QWORD *)(v4 + 2) = v168;
  v4 += 10;
  if ((v120 & 0x100) == 0)
  {
LABEL_342:
    if ((v120 & 0x8000) == 0)
      goto LABEL_343;
    goto LABEL_517;
  }
LABEL_514:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v169 = *((_BYTE *)this + 97);
  *(_WORD *)v4 = 1256;
  v4[2] = v169;
  v4 += 3;
  if ((v120 & 0x8000) == 0)
  {
LABEL_343:
    if ((v120 & 0x10000) == 0)
      goto LABEL_344;
    goto LABEL_520;
  }
LABEL_517:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v170 = *((_BYTE *)this + 121);
  *(_WORD *)v4 = 1264;
  v4[2] = v170;
  v4 += 3;
  if ((v120 & 0x10000) == 0)
  {
LABEL_344:
    if ((*((_BYTE *)this + 29) & 8) == 0)
      goto LABEL_345;
    goto LABEL_523;
  }
LABEL_520:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v171 = *((_BYTE *)this + 122);
  *(_WORD *)v4 = 1272;
  v4[2] = v171;
  v4 += 3;
  if ((*((_BYTE *)this + 29) & 8) == 0)
  {
LABEL_345:
    v121 = *((_DWORD *)this + 4);
    if ((v121 & 0x40000) == 0)
      goto LABEL_346;
LABEL_526:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v173 = *((int *)this + 31);
      *(_WORD *)v4 = 1424;
      if (v173 <= 0x7F)
      {
LABEL_528:
        v4[2] = v173;
        v4 += 3;
        if (v121 < 0)
          goto LABEL_537;
        goto LABEL_347;
      }
    }
    else
    {
      v173 = *((int *)this + 31);
      *(_WORD *)v4 = 1424;
      if (v173 <= 0x7F)
        goto LABEL_528;
    }
    v4[2] = v173 | 0x80;
    v174 = v173 >> 7;
    if (v173 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v174 | 0x80;
        v175 = v174 >> 7;
        ++v4;
        v176 = v174 >> 14;
        v174 >>= 7;
      }
      while (v176);
      *(v4 - 1) = v175;
      if (v121 < 0)
        goto LABEL_537;
    }
    else
    {
      v4[3] = v174;
      v4 += 4;
      if (v121 < 0)
        goto LABEL_537;
    }
LABEL_347:
    if ((*((_BYTE *)this + 26) & 8) == 0)
      goto LABEL_348;
    goto LABEL_540;
  }
LABEL_523:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v172 = *((_BYTE *)this + 444);
  *(_WORD *)v4 = 1408;
  v4[2] = v172;
  v4 += 3;
  v121 = *((_DWORD *)this + 4);
  if ((v121 & 0x40000) != 0)
    goto LABEL_526;
LABEL_346:
  if ((v121 & 0x80000000) == 0)
    goto LABEL_347;
LABEL_537:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v177 = *((_BYTE *)this + 147);
  *(_WORD *)v4 = 1432;
  v4[2] = v177;
  v4 += 3;
  if ((*((_BYTE *)this + 26) & 8) == 0)
  {
LABEL_348:
    if ((*((_BYTE *)this + 18) & 8) == 0)
      goto LABEL_349;
    goto LABEL_543;
  }
LABEL_540:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v178 = *((_BYTE *)this + 389);
  *(_WORD *)v4 = 1440;
  v4[2] = v178;
  v4 += 3;
  if ((*((_BYTE *)this + 18) & 8) == 0)
  {
LABEL_349:
    if ((*((_BYTE *)this + 27) & 1) == 0)
      goto LABEL_350;
    goto LABEL_546;
  }
LABEL_543:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v179 = *((_BYTE *)this + 128);
  *(_WORD *)v4 = 1448;
  v4[2] = v179;
  v4 += 3;
  if ((*((_BYTE *)this + 27) & 1) == 0)
  {
LABEL_350:
    if ((*((_BYTE *)this + 18) & 0x10) == 0)
      goto LABEL_351;
    goto LABEL_549;
  }
LABEL_546:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v180 = *((_BYTE *)this + 394);
  *(_WORD *)v4 = 1456;
  v4[2] = v180;
  v4 += 3;
  if ((*((_BYTE *)this + 18) & 0x10) == 0)
  {
LABEL_351:
    v122 = *((_DWORD *)this + 6);
    if ((v122 & 0x400000) == 0)
      goto LABEL_352;
    goto LABEL_552;
  }
LABEL_549:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v181 = *((_BYTE *)this + 129);
  *(_WORD *)v4 = 1464;
  v4[2] = v181;
  v4 += 3;
  v122 = *((_DWORD *)this + 6);
  if ((v122 & 0x400000) == 0)
  {
LABEL_352:
    if ((v122 & 0x100000) == 0)
      goto LABEL_353;
    goto LABEL_555;
  }
LABEL_552:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v182 = *((_BYTE *)this + 392);
  *(_WORD *)v4 = 1472;
  v4[2] = v182;
  v4 += 3;
  if ((v122 & 0x100000) == 0)
  {
LABEL_353:
    if ((v122 & 0x4000000) == 0)
      goto LABEL_354;
    goto LABEL_558;
  }
LABEL_555:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v183 = *((_BYTE *)this + 390);
  *(_WORD *)v4 = 1480;
  v4[2] = v183;
  v4 += 3;
  if ((v122 & 0x4000000) == 0)
  {
LABEL_354:
    if ((v122 & 0x8000000) == 0)
      goto LABEL_355;
LABEL_569:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v188 = *((int *)this + 100);
      *(_WORD *)v4 = 1496;
      if (v188 <= 0x7F)
      {
LABEL_571:
        v4[2] = v188;
        v4 += 3;
        if ((*((_BYTE *)this + 18) & 2) != 0)
          goto LABEL_580;
        goto LABEL_356;
      }
    }
    else
    {
      v188 = *((int *)this + 100);
      *(_WORD *)v4 = 1496;
      if (v188 <= 0x7F)
        goto LABEL_571;
    }
    v4[2] = v188 | 0x80;
    v189 = v188 >> 7;
    if (v188 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v189 | 0x80;
        v190 = v189 >> 7;
        ++v4;
        v191 = v189 >> 14;
        v189 >>= 7;
      }
      while (v191);
      *(v4 - 1) = v190;
      if ((*((_BYTE *)this + 18) & 2) != 0)
        goto LABEL_580;
    }
    else
    {
      v4[3] = v189;
      v4 += 4;
      if ((*((_BYTE *)this + 18) & 2) != 0)
        goto LABEL_580;
    }
LABEL_356:
    if ((*((_BYTE *)this + 27) & 2) == 0)
      goto LABEL_357;
    goto LABEL_583;
  }
LABEL_558:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v184 = *((int *)this + 99);
    *(_WORD *)v4 = 1488;
    if (v184 <= 0x7F)
    {
LABEL_560:
      v4[2] = v184;
      v4 += 3;
      if ((v122 & 0x8000000) != 0)
        goto LABEL_569;
      goto LABEL_355;
    }
  }
  else
  {
    v184 = *((int *)this + 99);
    *(_WORD *)v4 = 1488;
    if (v184 <= 0x7F)
      goto LABEL_560;
  }
  v4[2] = v184 | 0x80;
  v185 = v184 >> 7;
  if (v184 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v185 | 0x80;
      v186 = v185 >> 7;
      ++v4;
      v187 = v185 >> 14;
      v185 >>= 7;
    }
    while (v187);
    *(v4 - 1) = v186;
    if ((v122 & 0x8000000) != 0)
      goto LABEL_569;
  }
  else
  {
    v4[3] = v185;
    v4 += 4;
    if ((v122 & 0x8000000) != 0)
      goto LABEL_569;
  }
LABEL_355:
  if ((*((_BYTE *)this + 18) & 2) == 0)
    goto LABEL_356;
LABEL_580:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v192 = *((_BYTE *)this + 123);
  *(_WORD *)v4 = 1504;
  v4[2] = v192;
  v4 += 3;
  if ((*((_BYTE *)this + 27) & 2) == 0)
  {
LABEL_357:
    v123 = *((_DWORD *)this + 7);
    if ((v123 & 0x100) == 0)
      goto LABEL_358;
    goto LABEL_586;
  }
LABEL_583:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v193 = *((_BYTE *)this + 395);
  *(_WORD *)v4 = 1512;
  v4[2] = v193;
  v4 += 3;
  v123 = *((_DWORD *)this + 7);
  if ((v123 & 0x100) == 0)
  {
LABEL_358:
    if ((v123 & 4) == 0)
      goto LABEL_359;
    goto LABEL_589;
  }
LABEL_586:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v194 = *((_BYTE *)this + 441);
  *(_WORD *)v4 = 1520;
  v4[2] = v194;
  v4 += 3;
  if ((v123 & 4) == 0)
  {
LABEL_359:
    v124 = *((_DWORD *)this + 6);
    if ((v124 & 0x10000000) == 0)
      goto LABEL_360;
    goto LABEL_592;
  }
LABEL_589:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v195 = *((_BYTE *)this + 425);
  *(_WORD *)v4 = 1528;
  v4[2] = v195;
  v4 += 3;
  v124 = *((_DWORD *)this + 6);
  if ((v124 & 0x10000000) == 0)
  {
LABEL_360:
    if ((v124 & 0x20000000) == 0)
      goto LABEL_361;
LABEL_603:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v200 = *((int *)this + 102);
      *(_WORD *)v4 = 1672;
      if (v200 <= 0x7F)
      {
LABEL_605:
        v4[2] = v200;
        v4 += 3;
        if ((*((_BYTE *)this + 18) & 0x40) != 0)
          goto LABEL_614;
        goto LABEL_362;
      }
    }
    else
    {
      v200 = *((int *)this + 102);
      *(_WORD *)v4 = 1672;
      if (v200 <= 0x7F)
        goto LABEL_605;
    }
    v4[2] = v200 | 0x80;
    v201 = v200 >> 7;
    if (v200 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v201 | 0x80;
        v202 = v201 >> 7;
        ++v4;
        v203 = v201 >> 14;
        v201 >>= 7;
      }
      while (v203);
      *(v4 - 1) = v202;
      if ((*((_BYTE *)this + 18) & 0x40) != 0)
        goto LABEL_614;
    }
    else
    {
      v4[3] = v201;
      v4 += 4;
      if ((*((_BYTE *)this + 18) & 0x40) != 0)
        goto LABEL_614;
    }
LABEL_362:
    v125 = *((_DWORD *)this + 6);
    if ((v125 & 0x40000000) == 0)
      goto LABEL_363;
    goto LABEL_617;
  }
LABEL_592:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v196 = *((int *)this + 101);
    *(_WORD *)v4 = 1664;
    if (v196 <= 0x7F)
    {
LABEL_594:
      v4[2] = v196;
      v4 += 3;
      if ((v124 & 0x20000000) != 0)
        goto LABEL_603;
      goto LABEL_361;
    }
  }
  else
  {
    v196 = *((int *)this + 101);
    *(_WORD *)v4 = 1664;
    if (v196 <= 0x7F)
      goto LABEL_594;
  }
  v4[2] = v196 | 0x80;
  v197 = v196 >> 7;
  if (v196 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v197 | 0x80;
      v198 = v197 >> 7;
      ++v4;
      v199 = v197 >> 14;
      v197 >>= 7;
    }
    while (v199);
    *(v4 - 1) = v198;
    if ((v124 & 0x20000000) != 0)
      goto LABEL_603;
  }
  else
  {
    v4[3] = v197;
    v4 += 4;
    if ((v124 & 0x20000000) != 0)
      goto LABEL_603;
  }
LABEL_361:
  if ((*((_BYTE *)this + 18) & 0x40) == 0)
    goto LABEL_362;
LABEL_614:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v204 = *((_BYTE *)this + 131);
  *(_WORD *)v4 = 1680;
  v4[2] = v204;
  v4 += 3;
  v125 = *((_DWORD *)this + 6);
  if ((v125 & 0x40000000) == 0)
  {
LABEL_363:
    if ((v125 & 0x80000000) == 0)
      goto LABEL_364;
LABEL_628:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v209 = *((int *)this + 104);
      *(_WORD *)v4 = 1696;
      if (v209 <= 0x7F)
      {
LABEL_630:
        v4[2] = v209;
        v4 += 3;
        v126 = *((_DWORD *)this + 5);
        if ((v126 & 0x80) != 0)
          goto LABEL_639;
        goto LABEL_365;
      }
    }
    else
    {
      v209 = *((int *)this + 104);
      *(_WORD *)v4 = 1696;
      if (v209 <= 0x7F)
        goto LABEL_630;
    }
    v4[2] = v209 | 0x80;
    v210 = v209 >> 7;
    if (v209 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v210 | 0x80;
        v211 = v210 >> 7;
        ++v4;
        v212 = v210 >> 14;
        v210 >>= 7;
      }
      while (v212);
      *(v4 - 1) = v211;
      v126 = *((_DWORD *)this + 5);
      if ((v126 & 0x80) != 0)
        goto LABEL_639;
    }
    else
    {
      v4[3] = v210;
      v4 += 4;
      v126 = *((_DWORD *)this + 5);
      if ((v126 & 0x80) != 0)
        goto LABEL_639;
    }
LABEL_365:
    if ((v126 & 8) == 0)
      goto LABEL_366;
    goto LABEL_642;
  }
LABEL_617:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v205 = *((int *)this + 103);
    *(_WORD *)v4 = 1688;
    if (v205 <= 0x7F)
    {
LABEL_619:
      v4[2] = v205;
      v4 += 3;
      if (v125 < 0)
        goto LABEL_628;
      goto LABEL_364;
    }
  }
  else
  {
    v205 = *((int *)this + 103);
    *(_WORD *)v4 = 1688;
    if (v205 <= 0x7F)
      goto LABEL_619;
  }
  v4[2] = v205 | 0x80;
  v206 = v205 >> 7;
  if (v205 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v206 | 0x80;
      v207 = v206 >> 7;
      ++v4;
      v208 = v206 >> 14;
      v206 >>= 7;
    }
    while (v208);
    *(v4 - 1) = v207;
    if (v125 < 0)
      goto LABEL_628;
  }
  else
  {
    v4[3] = v206;
    v4 += 4;
    if (v125 < 0)
      goto LABEL_628;
  }
LABEL_364:
  v126 = *((_DWORD *)this + 5);
  if ((v126 & 0x80) == 0)
    goto LABEL_365;
LABEL_639:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v213 = *((_BYTE *)this + 155);
  *(_WORD *)v4 = 1704;
  v4[2] = v213;
  v4 += 3;
  if ((v126 & 8) == 0)
  {
LABEL_366:
    if ((*((_BYTE *)this + 19) & 8) == 0)
      goto LABEL_367;
LABEL_645:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v215 = *((_QWORD *)this + 17);
      *(_WORD *)v4 = 1728;
      if (v215 <= 0x7F)
      {
LABEL_647:
        v4[2] = v215;
        v4 += 3;
        if ((*((_BYTE *)this + 20) & 1) != 0)
          goto LABEL_656;
        goto LABEL_368;
      }
    }
    else
    {
      v215 = *((_QWORD *)this + 17);
      *(_WORD *)v4 = 1728;
      if (v215 <= 0x7F)
        goto LABEL_647;
    }
    v4[2] = v215 | 0x80;
    v216 = v215 >> 7;
    if (v215 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v216 | 0x80;
        v217 = v216 >> 7;
        ++v4;
        v218 = v216 >> 14;
        v216 >>= 7;
      }
      while (v218);
      *(v4 - 1) = v217;
      if ((*((_BYTE *)this + 20) & 1) != 0)
        goto LABEL_656;
    }
    else
    {
      v4[3] = v216;
      v4 += 4;
      if ((*((_BYTE *)this + 20) & 1) != 0)
        goto LABEL_656;
    }
LABEL_368:
    v127 = *((_DWORD *)this + 7);
    if ((v127 & 2) == 0)
      goto LABEL_369;
    goto LABEL_659;
  }
LABEL_642:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v214 = *((_BYTE *)this + 151);
  *(_WORD *)v4 = 1720;
  v4[2] = v214;
  v4 += 3;
  if ((*((_BYTE *)this + 19) & 8) != 0)
    goto LABEL_645;
LABEL_367:
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_368;
LABEL_656:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v219 = *((_BYTE *)this + 148);
  *(_WORD *)v4 = 1736;
  v4[2] = v219;
  v4 += 3;
  v127 = *((_DWORD *)this + 7);
  if ((v127 & 2) == 0)
  {
LABEL_369:
    if ((v127 & 1) == 0)
      goto LABEL_370;
LABEL_662:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v221 = *((int *)this + 105);
      *(_WORD *)v4 = 1752;
      if (v221 <= 0x7F)
      {
LABEL_664:
        v4[2] = v221;
        v4 += 3;
        if ((v127 & 0x20000000) != 0)
          goto LABEL_673;
        goto LABEL_371;
      }
    }
    else
    {
      v221 = *((int *)this + 105);
      *(_WORD *)v4 = 1752;
      if (v221 <= 0x7F)
        goto LABEL_664;
    }
    v4[2] = v221 | 0x80;
    v222 = v221 >> 7;
    if (v221 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v222 | 0x80;
        v223 = v222 >> 7;
        ++v4;
        v224 = v222 >> 14;
        v222 >>= 7;
      }
      while (v224);
      *(v4 - 1) = v223;
      if ((v127 & 0x20000000) != 0)
        goto LABEL_673;
    }
    else
    {
      v4[3] = v222;
      v4 += 4;
      if ((v127 & 0x20000000) != 0)
        goto LABEL_673;
    }
LABEL_371:
    if ((v127 & 0x40000000) == 0)
      goto LABEL_372;
    goto LABEL_676;
  }
LABEL_659:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v220 = *((_BYTE *)this + 424);
  *(_WORD *)v4 = 1744;
  v4[2] = v220;
  v4 += 3;
  if ((v127 & 1) != 0)
    goto LABEL_662;
LABEL_370:
  if ((v127 & 0x20000000) == 0)
    goto LABEL_371;
LABEL_673:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v225 = *((_BYTE *)this + 502);
  *(_WORD *)v4 = 1760;
  v4[2] = v225;
  v4 += 3;
  if ((v127 & 0x40000000) == 0)
  {
LABEL_372:
    if ((v127 & 0x20) == 0)
      goto LABEL_373;
LABEL_679:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v227 = *((int *)this + 107);
      *(_WORD *)v4 = 1776;
      if (v227 <= 0x7F)
      {
LABEL_681:
        v4[2] = v227;
        v4 += 3;
        if ((*((_BYTE *)this + 19) & 0x10) != 0)
          goto LABEL_690;
        goto LABEL_374;
      }
    }
    else
    {
      v227 = *((int *)this + 107);
      *(_WORD *)v4 = 1776;
      if (v227 <= 0x7F)
        goto LABEL_681;
    }
    v4[2] = v227 | 0x80;
    v228 = v227 >> 7;
    if (v227 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v228 | 0x80;
        v229 = v228 >> 7;
        ++v4;
        v230 = v228 >> 14;
        v228 >>= 7;
      }
      while (v230);
      *(v4 - 1) = v229;
      if ((*((_BYTE *)this + 19) & 0x10) != 0)
        goto LABEL_690;
    }
    else
    {
      v4[3] = v228;
      v4 += 4;
      if ((*((_BYTE *)this + 19) & 0x10) != 0)
        goto LABEL_690;
    }
LABEL_374:
    v128 = *((_DWORD *)this + 7);
    if ((v128 & 0x80) == 0)
      goto LABEL_375;
    goto LABEL_693;
  }
LABEL_676:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v226 = *((_BYTE *)this + 503);
  *(_WORD *)v4 = 1768;
  v4[2] = v226;
  v4 += 3;
  if ((v127 & 0x20) != 0)
    goto LABEL_679;
LABEL_373:
  if ((*((_BYTE *)this + 19) & 0x10) == 0)
    goto LABEL_374;
LABEL_690:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v231 = *((_BYTE *)this + 144);
  *(_WORD *)v4 = 1784;
  v4[2] = v231;
  v4 += 3;
  v128 = *((_DWORD *)this + 7);
  if ((v128 & 0x80) == 0)
  {
LABEL_375:
    if ((v128 & 8) == 0)
      goto LABEL_376;
    goto LABEL_696;
  }
LABEL_693:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v232 = *((_BYTE *)this + 440);
  *(_WORD *)v4 = 1920;
  v4[2] = v232;
  v4 += 3;
  if ((v128 & 8) == 0)
  {
LABEL_376:
    if ((v128 & 0x10) == 0)
      goto LABEL_377;
    goto LABEL_699;
  }
LABEL_696:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v233 = *((_BYTE *)this + 426);
  *(_WORD *)v4 = 1928;
  v4[2] = v233;
  v4 += 3;
  if ((v128 & 0x10) == 0)
  {
LABEL_377:
    if ((v128 & 0x40) == 0)
      goto LABEL_378;
    goto LABEL_702;
  }
LABEL_699:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v234 = *((_BYTE *)this + 427);
  *(_WORD *)v4 = 1936;
  v4[2] = v234;
  v4 += 3;
  if ((v128 & 0x40) == 0)
  {
LABEL_378:
    if ((v128 & 0x200) == 0)
      goto LABEL_379;
    goto LABEL_705;
  }
LABEL_702:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v235 = *((_QWORD *)this + 54);
  *(_WORD *)v4 = 1945;
  *(_QWORD *)(v4 + 2) = v235;
  v4 += 10;
  if ((v128 & 0x200) == 0)
  {
LABEL_379:
    if ((v128 & 0x1000) == 0)
      goto LABEL_380;
    goto LABEL_708;
  }
LABEL_705:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v236 = *((_BYTE *)this + 442);
  *(_WORD *)v4 = 1952;
  v4[2] = v236;
  v4 += 3;
  if ((v128 & 0x1000) == 0)
  {
LABEL_380:
    if ((v128 & 0x8000) == 0)
      goto LABEL_381;
LABEL_711:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v238 = *((int *)this + 112);
      *(_WORD *)v4 = 1976;
      if (v238 <= 0x7F)
      {
LABEL_713:
        v4[2] = v238;
        v4 += 3;
        if ((v128 & 0x2000) != 0)
          goto LABEL_722;
        goto LABEL_382;
      }
    }
    else
    {
      v238 = *((int *)this + 112);
      *(_WORD *)v4 = 1976;
      if (v238 <= 0x7F)
        goto LABEL_713;
    }
    v4[2] = v238 | 0x80;
    v239 = v238 >> 7;
    if (v238 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v239 | 0x80;
        v240 = v239 >> 7;
        ++v4;
        v241 = v239 >> 14;
        v239 >>= 7;
      }
      while (v241);
      *(v4 - 1) = v240;
      if ((v128 & 0x2000) != 0)
        goto LABEL_722;
    }
    else
    {
      v4[3] = v239;
      v4 += 4;
      if ((v128 & 0x2000) != 0)
        goto LABEL_722;
    }
LABEL_382:
    if ((v128 & 0x100000) == 0)
      goto LABEL_383;
LABEL_725:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v243 = *((int *)this + 114);
      *(_WORD *)v4 = 1992;
      if (v243 <= 0x7F)
      {
LABEL_727:
        v4[2] = v243;
        v4 += 3;
        if ((v128 & 0x200000) != 0)
          goto LABEL_736;
        goto LABEL_384;
      }
    }
    else
    {
      v243 = *((int *)this + 114);
      *(_WORD *)v4 = 1992;
      if (v243 <= 0x7F)
        goto LABEL_727;
    }
    v4[2] = v243 | 0x80;
    v244 = v243 >> 7;
    if (v243 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v244 | 0x80;
        v245 = v244 >> 7;
        ++v4;
        v246 = v244 >> 14;
        v244 >>= 7;
      }
      while (v246);
      *(v4 - 1) = v245;
      if ((v128 & 0x200000) != 0)
        goto LABEL_736;
    }
    else
    {
      v4[3] = v244;
      v4 += 4;
      if ((v128 & 0x200000) != 0)
        goto LABEL_736;
    }
LABEL_384:
    if ((v128 & 0x400000) == 0)
      goto LABEL_385;
LABEL_747:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v251 = *((_QWORD *)this + 58);
      *(_WORD *)v4 = 2008;
      if (v251 <= 0x7F)
      {
LABEL_749:
        v4[2] = v251;
        v4 += 3;
        if ((v128 & 0x800000) != 0)
          goto LABEL_758;
        goto LABEL_386;
      }
    }
    else
    {
      v251 = *((_QWORD *)this + 58);
      *(_WORD *)v4 = 2008;
      if (v251 <= 0x7F)
        goto LABEL_749;
    }
    v4[2] = v251 | 0x80;
    v252 = v251 >> 7;
    if (v251 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v252 | 0x80;
        v253 = v252 >> 7;
        ++v4;
        v254 = v252 >> 14;
        v252 >>= 7;
      }
      while (v254);
      *(v4 - 1) = v253;
      if ((v128 & 0x800000) != 0)
        goto LABEL_758;
    }
    else
    {
      v4[3] = v252;
      v4 += 4;
      if ((v128 & 0x800000) != 0)
        goto LABEL_758;
    }
LABEL_386:
    if ((v128 & 0x1000000) == 0)
      goto LABEL_387;
    goto LABEL_761;
  }
LABEL_708:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v237 = *((_BYTE *)this + 445);
  *(_WORD *)v4 = 1960;
  v4[2] = v237;
  v4 += 3;
  if ((v128 & 0x8000) != 0)
    goto LABEL_711;
LABEL_381:
  if ((v128 & 0x2000) == 0)
    goto LABEL_382;
LABEL_722:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v242 = *((_BYTE *)this + 446);
  *(_WORD *)v4 = 1984;
  v4[2] = v242;
  v4 += 3;
  if ((v128 & 0x100000) != 0)
    goto LABEL_725;
LABEL_383:
  if ((v128 & 0x200000) == 0)
    goto LABEL_384;
LABEL_736:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v247 = *((int *)this + 115);
    *(_WORD *)v4 = 2000;
    if (v247 <= 0x7F)
    {
LABEL_738:
      v4[2] = v247;
      v4 += 3;
      if ((v128 & 0x400000) != 0)
        goto LABEL_747;
      goto LABEL_385;
    }
  }
  else
  {
    v247 = *((int *)this + 115);
    *(_WORD *)v4 = 2000;
    if (v247 <= 0x7F)
      goto LABEL_738;
  }
  v4[2] = v247 | 0x80;
  v248 = v247 >> 7;
  if (v247 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v248 | 0x80;
      v249 = v248 >> 7;
      ++v4;
      v250 = v248 >> 14;
      v248 >>= 7;
    }
    while (v250);
    *(v4 - 1) = v249;
    if ((v128 & 0x400000) != 0)
      goto LABEL_747;
  }
  else
  {
    v4[3] = v248;
    v4 += 4;
    if ((v128 & 0x400000) != 0)
      goto LABEL_747;
  }
LABEL_385:
  if ((v128 & 0x800000) == 0)
    goto LABEL_386;
LABEL_758:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v255 = *((_QWORD *)this + 59);
  *(_WORD *)v4 = 2017;
  *(_QWORD *)(v4 + 2) = v255;
  v4 += 10;
  if ((v128 & 0x1000000) == 0)
  {
LABEL_387:
    if ((v128 & 0x2000000) == 0)
      goto LABEL_388;
    goto LABEL_764;
  }
LABEL_761:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v256 = *((_QWORD *)this + 60);
  *(_WORD *)v4 = 2025;
  *(_QWORD *)(v4 + 2) = v256;
  v4 += 10;
  if ((v128 & 0x2000000) == 0)
  {
LABEL_388:
    if ((v128 & 0x4000000) == 0)
      goto LABEL_389;
LABEL_767:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v258 = *((int *)this + 124);
      *(_WORD *)v4 = 2040;
      if (v258 <= 0x7F)
      {
LABEL_769:
        v4[2] = v258;
        v4 += 3;
        if (v128 < 0)
          goto LABEL_778;
        goto LABEL_390;
      }
    }
    else
    {
      v258 = *((int *)this + 124);
      *(_WORD *)v4 = 2040;
      if (v258 <= 0x7F)
        goto LABEL_769;
    }
    v4[2] = v258 | 0x80;
    v259 = v258 >> 7;
    if (v258 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v259 | 0x80;
        v260 = v259 >> 7;
        ++v4;
        v261 = v259 >> 14;
        v259 >>= 7;
      }
      while (v261);
      *(v4 - 1) = v260;
      if (v128 < 0)
        goto LABEL_778;
    }
    else
    {
      v4[3] = v259;
      v4 += 4;
      if (v128 < 0)
        goto LABEL_778;
    }
LABEL_390:
    if ((v128 & 0x8000000) == 0)
      goto LABEL_391;
    goto LABEL_781;
  }
LABEL_764:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v257 = *((_QWORD *)this + 61);
  *(_WORD *)v4 = 2033;
  *(_QWORD *)(v4 + 2) = v257;
  v4 += 10;
  if ((v128 & 0x4000000) != 0)
    goto LABEL_767;
LABEL_389:
  if ((v128 & 0x80000000) == 0)
    goto LABEL_390;
LABEL_778:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v262 = *((_QWORD *)this + 63);
  *(_WORD *)v4 = 2177;
  *(_QWORD *)(v4 + 2) = v262;
  v4 += 10;
  if ((v128 & 0x8000000) == 0)
  {
LABEL_391:
    if ((*((_BYTE *)this + 19) & 0x20) == 0)
      goto LABEL_392;
    goto LABEL_784;
  }
LABEL_781:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v263 = *((_BYTE *)this + 500);
  *(_WORD *)v4 = 2184;
  v4[2] = v263;
  v4 += 3;
  if ((*((_BYTE *)this + 19) & 0x20) == 0)
  {
LABEL_392:
    if ((*((_BYTE *)this + 29) & 4) == 0)
      goto LABEL_393;
    goto LABEL_787;
  }
LABEL_784:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v264 = *((_BYTE *)this + 145);
  *(_WORD *)v4 = 2192;
  v4[2] = v264;
  v4 += 3;
  if ((*((_BYTE *)this + 29) & 4) == 0)
  {
LABEL_393:
    if ((*((_BYTE *)this + 18) & 0x20) == 0)
      goto LABEL_394;
    goto LABEL_790;
  }
LABEL_787:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v265 = *((_BYTE *)this + 443);
  *(_WORD *)v4 = 2200;
  v4[2] = v265;
  v4 += 3;
  if ((*((_BYTE *)this + 18) & 0x20) == 0)
  {
LABEL_394:
    if ((*((_BYTE *)this + 21) & 2) == 0)
      goto LABEL_395;
    goto LABEL_793;
  }
LABEL_790:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v266 = *((_BYTE *)this + 130);
  *(_WORD *)v4 = 2208;
  v4[2] = v266;
  v4 += 3;
  if ((*((_BYTE *)this + 21) & 2) == 0)
  {
LABEL_395:
    v129 = *((_DWORD *)this + 8);
    if ((v129 & 1) == 0)
      goto LABEL_396;
LABEL_796:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v268 = *((int *)this + 128);
      *(_WORD *)v4 = 2224;
      if (v268 <= 0x7F)
      {
LABEL_798:
        v4[2] = v268;
        v4 += 3;
        if ((v129 & 0x40) != 0)
          goto LABEL_807;
        goto LABEL_397;
      }
    }
    else
    {
      v268 = *((int *)this + 128);
      *(_WORD *)v4 = 2224;
      if (v268 <= 0x7F)
        goto LABEL_798;
    }
    v4[2] = v268 | 0x80;
    v269 = v268 >> 7;
    if (v268 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v269 | 0x80;
        v270 = v269 >> 7;
        ++v4;
        v271 = v269 >> 14;
        v269 >>= 7;
      }
      while (v271);
      *(v4 - 1) = v270;
      if ((v129 & 0x40) != 0)
        goto LABEL_807;
    }
    else
    {
      v4[3] = v269;
      v4 += 4;
      if ((v129 & 0x40) != 0)
        goto LABEL_807;
    }
LABEL_397:
    v130 = *((_DWORD *)this + 5);
    if ((v130 & 0x20) == 0)
      goto LABEL_398;
    goto LABEL_810;
  }
LABEL_793:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v267 = *((_BYTE *)this + 157);
  *(_WORD *)v4 = 2216;
  v4[2] = v267;
  v4 += 3;
  v129 = *((_DWORD *)this + 8);
  if ((v129 & 1) != 0)
    goto LABEL_796;
LABEL_396:
  if ((v129 & 0x40) == 0)
    goto LABEL_397;
LABEL_807:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v272 = *((_BYTE *)this + 544);
  *(_WORD *)v4 = 2232;
  v4[2] = v272;
  v4 += 3;
  v130 = *((_DWORD *)this + 5);
  if ((v130 & 0x20) == 0)
  {
LABEL_398:
    if ((v130 & 4) == 0)
      goto LABEL_399;
    goto LABEL_813;
  }
LABEL_810:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v273 = *((_BYTE *)this + 153);
  *(_WORD *)v4 = 2240;
  v4[2] = v273;
  v4 += 3;
  if ((v130 & 4) == 0)
  {
LABEL_399:
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_400;
LABEL_816:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v275 = *((int *)this + 129);
      *(_WORD *)v4 = 2256;
      if (v275 <= 0x7F)
      {
LABEL_818:
        v4[2] = v275;
        v4 += 3;
        if ((*((_BYTE *)this + 21) & 1) != 0)
          goto LABEL_827;
        goto LABEL_401;
      }
    }
    else
    {
      v275 = *((int *)this + 129);
      *(_WORD *)v4 = 2256;
      if (v275 <= 0x7F)
        goto LABEL_818;
    }
    v4[2] = v275 | 0x80;
    v276 = v275 >> 7;
    if (v275 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v276 | 0x80;
        v277 = v276 >> 7;
        ++v4;
        v278 = v276 >> 14;
        v276 >>= 7;
      }
      while (v278);
      *(v4 - 1) = v277;
      if ((*((_BYTE *)this + 21) & 1) != 0)
        goto LABEL_827;
    }
    else
    {
      v4[3] = v276;
      v4 += 4;
      if ((*((_BYTE *)this + 21) & 1) != 0)
        goto LABEL_827;
    }
LABEL_401:
    if ((*((_BYTE *)this + 30) & 1) == 0)
      goto LABEL_402;
    goto LABEL_830;
  }
LABEL_813:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v274 = *((_BYTE *)this + 150);
  *(_WORD *)v4 = 2248;
  v4[2] = v274;
  v4 += 3;
  if ((*((_BYTE *)this + 32) & 2) != 0)
    goto LABEL_816;
LABEL_400:
  if ((*((_BYTE *)this + 21) & 1) == 0)
    goto LABEL_401;
LABEL_827:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v279 = *((_BYTE *)this + 156);
  *(_WORD *)v4 = 2264;
  v4[2] = v279;
  v4 += 3;
  if ((*((_BYTE *)this + 30) & 1) == 0)
  {
LABEL_402:
    v131 = *((_DWORD *)this + 5);
    if ((v131 & 0x40) == 0)
      goto LABEL_403;
    goto LABEL_833;
  }
LABEL_830:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v280 = *((_BYTE *)this + 452);
  *(_WORD *)v4 = 2272;
  v4[2] = v280;
  v4 += 3;
  v131 = *((_DWORD *)this + 5);
  if ((v131 & 0x40) == 0)
  {
LABEL_403:
    if ((v131 & 0x400) == 0)
      goto LABEL_404;
LABEL_836:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v282 = *((_QWORD *)this + 20);
      *(_WORD *)v4 = 2288;
      if (v282 <= 0x7F)
      {
LABEL_838:
        v4[2] = v282;
        v4 += 3;
        if ((*((_BYTE *)this + 30) & 2) != 0)
          goto LABEL_847;
        goto LABEL_405;
      }
    }
    else
    {
      v282 = *((_QWORD *)this + 20);
      *(_WORD *)v4 = 2288;
      if (v282 <= 0x7F)
        goto LABEL_838;
    }
    v4[2] = v282 | 0x80;
    v283 = v282 >> 7;
    if (v282 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v283 | 0x80;
        v284 = v283 >> 7;
        ++v4;
        v285 = v283 >> 14;
        v283 >>= 7;
      }
      while (v285);
      *(v4 - 1) = v284;
      if ((*((_BYTE *)this + 30) & 2) != 0)
        goto LABEL_847;
    }
    else
    {
      v4[3] = v283;
      v4 += 4;
      if ((*((_BYTE *)this + 30) & 2) != 0)
        goto LABEL_847;
    }
LABEL_405:
    v132 = *((_DWORD *)this + 8);
    if ((v132 & 0x80) == 0)
      goto LABEL_406;
    goto LABEL_850;
  }
LABEL_833:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v281 = *((_BYTE *)this + 154);
  *(_WORD *)v4 = 2280;
  v4[2] = v281;
  v4 += 3;
  if ((v131 & 0x400) != 0)
    goto LABEL_836;
LABEL_404:
  if ((*((_BYTE *)this + 30) & 2) == 0)
    goto LABEL_405;
LABEL_847:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v286 = *((_BYTE *)this + 453);
  *(_WORD *)v4 = 2296;
  v4[2] = v286;
  v4 += 3;
  v132 = *((_DWORD *)this + 8);
  if ((v132 & 0x80) == 0)
  {
LABEL_406:
    if ((v132 & 4) == 0)
      goto LABEL_407;
    goto LABEL_853;
  }
LABEL_850:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v287 = *((_BYTE *)this + 545);
  *(_WORD *)v4 = 2432;
  v4[2] = v287;
  v4 += 3;
  if ((v132 & 4) == 0)
  {
LABEL_407:
    if ((v132 & 8) == 0)
      goto LABEL_408;
    goto LABEL_856;
  }
LABEL_853:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v288 = *((_QWORD *)this + 65);
  *(_WORD *)v4 = 2441;
  *(_QWORD *)(v4 + 2) = v288;
  v4 += 10;
  if ((v132 & 8) == 0)
  {
LABEL_408:
    if ((v132 & 0x10) == 0)
      goto LABEL_409;
    goto LABEL_859;
  }
LABEL_856:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v289 = *((_QWORD *)this + 66);
  *(_WORD *)v4 = 2449;
  *(_QWORD *)(v4 + 2) = v289;
  v4 += 10;
  if ((v132 & 0x10) == 0)
  {
LABEL_409:
    if ((v132 & 0x20) == 0)
      goto LABEL_410;
LABEL_870:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v294 = *((int *)this + 135);
      *(_WORD *)v4 = 2464;
      if (v294 <= 0x7F)
      {
LABEL_872:
        v4[2] = v294;
        v4 += 3;
        v133 = *((_DWORD *)this + 5);
        if ((v133 & 0x10) != 0)
          goto LABEL_881;
        goto LABEL_411;
      }
    }
    else
    {
      v294 = *((int *)this + 135);
      *(_WORD *)v4 = 2464;
      if (v294 <= 0x7F)
        goto LABEL_872;
    }
    v4[2] = v294 | 0x80;
    v295 = v294 >> 7;
    if (v294 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v295 | 0x80;
        v296 = v295 >> 7;
        ++v4;
        v297 = v295 >> 14;
        v295 >>= 7;
      }
      while (v297);
      *(v4 - 1) = v296;
      v133 = *((_DWORD *)this + 5);
      if ((v133 & 0x10) != 0)
        goto LABEL_881;
    }
    else
    {
      v4[3] = v295;
      v4 += 4;
      v133 = *((_DWORD *)this + 5);
      if ((v133 & 0x10) != 0)
        goto LABEL_881;
    }
LABEL_411:
    if ((v133 & 2) == 0)
      goto LABEL_412;
    goto LABEL_884;
  }
LABEL_859:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v290 = *((int *)this + 134);
    *(_WORD *)v4 = 2456;
    if (v290 <= 0x7F)
    {
LABEL_861:
      v4[2] = v290;
      v4 += 3;
      if ((v132 & 0x20) != 0)
        goto LABEL_870;
      goto LABEL_410;
    }
  }
  else
  {
    v290 = *((int *)this + 134);
    *(_WORD *)v4 = 2456;
    if (v290 <= 0x7F)
      goto LABEL_861;
  }
  v4[2] = v290 | 0x80;
  v291 = v290 >> 7;
  if (v290 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v291 | 0x80;
      v292 = v291 >> 7;
      ++v4;
      v293 = v291 >> 14;
      v291 >>= 7;
    }
    while (v293);
    *(v4 - 1) = v292;
    if ((v132 & 0x20) != 0)
      goto LABEL_870;
  }
  else
  {
    v4[3] = v291;
    v4 += 4;
    if ((v132 & 0x20) != 0)
      goto LABEL_870;
  }
LABEL_410:
  v133 = *((_DWORD *)this + 5);
  if ((v133 & 0x10) == 0)
    goto LABEL_411;
LABEL_881:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v298 = *((_BYTE *)this + 152);
  *(_WORD *)v4 = 2472;
  v4[2] = v298;
  v4 += 3;
  if ((v133 & 2) == 0)
  {
LABEL_412:
    if ((v133 & 0x800) == 0)
      goto LABEL_413;
LABEL_887:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v300 = *((int *)this + 42);
      *(_WORD *)v4 = 2488;
      if (v300 <= 0x7F)
      {
LABEL_889:
        v4[2] = v300;
        v4 += 3;
        if ((*((_BYTE *)this + 29) & 0x40) != 0)
          goto LABEL_898;
        goto LABEL_414;
      }
    }
    else
    {
      v300 = *((int *)this + 42);
      *(_WORD *)v4 = 2488;
      if (v300 <= 0x7F)
        goto LABEL_889;
    }
    v4[2] = v300 | 0x80;
    v301 = v300 >> 7;
    if (v300 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v301 | 0x80;
        v302 = v301 >> 7;
        ++v4;
        v303 = v301 >> 14;
        v301 >>= 7;
      }
      while (v303);
      *(v4 - 1) = v302;
      if ((*((_BYTE *)this + 29) & 0x40) != 0)
        goto LABEL_898;
    }
    else
    {
      v4[3] = v301;
      v4 += 4;
      if ((*((_BYTE *)this + 29) & 0x40) != 0)
        goto LABEL_898;
    }
LABEL_414:
    v134 = *((_DWORD *)this + 8);
    if ((v134 & 0x200) == 0)
      goto LABEL_415;
    goto LABEL_901;
  }
LABEL_884:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v299 = *((_BYTE *)this + 149);
  *(_WORD *)v4 = 2480;
  v4[2] = v299;
  v4 += 3;
  if ((v133 & 0x800) != 0)
    goto LABEL_887;
LABEL_413:
  if ((*((_BYTE *)this + 29) & 0x40) == 0)
    goto LABEL_414;
LABEL_898:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v304 = *((_BYTE *)this + 447);
  *(_WORD *)v4 = 2496;
  v4[2] = v304;
  v4 += 3;
  v134 = *((_DWORD *)this + 8);
  if ((v134 & 0x200) == 0)
  {
LABEL_415:
    if ((v134 & 0x800) == 0)
      goto LABEL_416;
LABEL_912:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v309 = *((int *)this + 140);
      *(_WORD *)v4 = 2512;
      if (v309 <= 0x7F)
      {
LABEL_914:
        v4[2] = v309;
        v4 += 3;
        if ((v134 & 0x400) != 0)
          goto LABEL_923;
        goto LABEL_417;
      }
    }
    else
    {
      v309 = *((int *)this + 140);
      *(_WORD *)v4 = 2512;
      if (v309 <= 0x7F)
        goto LABEL_914;
    }
    v4[2] = v309 | 0x80;
    v310 = v309 >> 7;
    if (v309 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v310 | 0x80;
        v311 = v310 >> 7;
        ++v4;
        v312 = v310 >> 14;
        v310 >>= 7;
      }
      while (v312);
      *(v4 - 1) = v311;
      if ((v134 & 0x400) != 0)
        goto LABEL_923;
    }
    else
    {
      v4[3] = v310;
      v4 += 4;
      if ((v134 & 0x400) != 0)
        goto LABEL_923;
    }
LABEL_417:
    if ((v134 & 0x2000) == 0)
      goto LABEL_418;
    goto LABEL_926;
  }
LABEL_901:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v305 = *((int *)this + 137);
    *(_WORD *)v4 = 2504;
    if (v305 <= 0x7F)
    {
LABEL_903:
      v4[2] = v305;
      v4 += 3;
      if ((v134 & 0x800) != 0)
        goto LABEL_912;
      goto LABEL_416;
    }
  }
  else
  {
    v305 = *((int *)this + 137);
    *(_WORD *)v4 = 2504;
    if (v305 <= 0x7F)
      goto LABEL_903;
  }
  v4[2] = v305 | 0x80;
  v306 = v305 >> 7;
  if (v305 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v306 | 0x80;
      v307 = v306 >> 7;
      ++v4;
      v308 = v306 >> 14;
      v306 >>= 7;
    }
    while (v308);
    *(v4 - 1) = v307;
    if ((v134 & 0x800) != 0)
      goto LABEL_912;
  }
  else
  {
    v4[3] = v306;
    v4 += 4;
    if ((v134 & 0x800) != 0)
      goto LABEL_912;
  }
LABEL_416:
  if ((v134 & 0x400) == 0)
    goto LABEL_417;
LABEL_923:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v313 = *((_QWORD *)this + 69);
  *(_WORD *)v4 = 2521;
  *(_QWORD *)(v4 + 2) = v313;
  v4 += 10;
  if ((v134 & 0x2000) == 0)
  {
LABEL_418:
    if ((v134 & 0x1000) == 0)
      goto LABEL_419;
LABEL_929:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v315 = *((int *)this + 141);
      *(_WORD *)v4 = 2536;
      if (v315 <= 0x7F)
      {
LABEL_931:
        v4[2] = v315;
        v4 += 3;
        if ((*((_BYTE *)this + 30) & 4) != 0)
          goto LABEL_940;
        goto LABEL_420;
      }
    }
    else
    {
      v315 = *((int *)this + 141);
      *(_WORD *)v4 = 2536;
      if (v315 <= 0x7F)
        goto LABEL_931;
    }
    v4[2] = v315 | 0x80;
    v316 = v315 >> 7;
    if (v315 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v316 | 0x80;
        v317 = v316 >> 7;
        ++v4;
        v318 = v316 >> 14;
        v316 >>= 7;
      }
      while (v318);
      *(v4 - 1) = v317;
      if ((*((_BYTE *)this + 30) & 4) != 0)
        goto LABEL_940;
    }
    else
    {
      v4[3] = v316;
      v4 += 4;
      if ((*((_BYTE *)this + 30) & 4) != 0)
        goto LABEL_940;
    }
LABEL_420:
    v135 = *((_DWORD *)this + 5);
    if ((v135 & 0x1000) == 0)
      goto LABEL_421;
    goto LABEL_943;
  }
LABEL_926:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v314 = *((_QWORD *)this + 71);
  *(_WORD *)v4 = 2529;
  *(_QWORD *)(v4 + 2) = v314;
  v4 += 10;
  if ((v134 & 0x1000) != 0)
    goto LABEL_929;
LABEL_419:
  if ((*((_BYTE *)this + 30) & 4) == 0)
    goto LABEL_420;
LABEL_940:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v319 = *((_BYTE *)this + 454);
  *(_WORD *)v4 = 2544;
  v4[2] = v319;
  v4 += 3;
  v135 = *((_DWORD *)this + 5);
  if ((v135 & 0x1000) == 0)
  {
LABEL_421:
    if ((v135 & 0x2000) == 0)
      goto LABEL_422;
    goto LABEL_946;
  }
LABEL_943:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v320 = *((_QWORD *)this + 22);
  *(_WORD *)v4 = 2553;
  *(_QWORD *)(v4 + 2) = v320;
  v4 += 10;
  if ((v135 & 0x2000) == 0)
  {
LABEL_422:
    v136 = *((_DWORD *)this + 4);
    if ((v136 & 0x40000000) == 0)
      goto LABEL_423;
    goto LABEL_949;
  }
LABEL_946:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v321 = *((_QWORD *)this + 23);
  *(_WORD *)v4 = 2689;
  *(_QWORD *)(v4 + 2) = v321;
  v4 += 10;
  v136 = *((_DWORD *)this + 4);
  if ((v136 & 0x40000000) == 0)
  {
LABEL_423:
    if ((v136 & 0x2000000) == 0)
      goto LABEL_424;
    goto LABEL_952;
  }
LABEL_949:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v322 = *((_BYTE *)this + 146);
  *(_WORD *)v4 = 2696;
  v4[2] = v322;
  v4 += 3;
  if ((v136 & 0x2000000) == 0)
  {
LABEL_424:
    if ((v136 & 0x4000000) == 0)
      goto LABEL_425;
    goto LABEL_955;
  }
LABEL_952:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v323 = *((_BYTE *)this + 134);
  *(_WORD *)v4 = 2704;
  v4[2] = v323;
  v4 += 3;
  if ((v136 & 0x4000000) == 0)
  {
LABEL_425:
    if ((*((_BYTE *)this + 31) & 0x10) == 0)
      goto LABEL_426;
    goto LABEL_958;
  }
LABEL_955:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v324 = *((_BYTE *)this + 135);
  *(_WORD *)v4 = 2712;
  v4[2] = v324;
  v4 += 3;
  if ((*((_BYTE *)this + 31) & 0x10) == 0)
  {
LABEL_426:
    if ((*((_BYTE *)this + 21) & 0x40) == 0)
      goto LABEL_427;
    goto LABEL_961;
  }
LABEL_958:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v325 = *((_BYTE *)this + 501);
  *(_WORD *)v4 = 2720;
  v4[2] = v325;
  v4 += 3;
  if ((*((_BYTE *)this + 21) & 0x40) == 0)
  {
LABEL_427:
    if ((*((_BYTE *)this + 33) & 1) == 0)
      goto LABEL_428;
LABEL_972:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v330 = *((_BYTE *)this + 546);
    *(_WORD *)v4 = 2736;
    v4[2] = v330;
    v4 += 3;
    v137 = *((_QWORD *)this + 1);
    if ((v137 & 1) == 0)
      return (const google::protobuf::UnknownFieldSet *)v4;
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  }
LABEL_961:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v326 = *((int *)this + 48);
    *(_WORD *)v4 = 2728;
    if (v326 <= 0x7F)
    {
LABEL_963:
      v4[2] = v326;
      v4 += 3;
      if ((*((_BYTE *)this + 33) & 1) != 0)
        goto LABEL_972;
      goto LABEL_428;
    }
  }
  else
  {
    v326 = *((int *)this + 48);
    *(_WORD *)v4 = 2728;
    if (v326 <= 0x7F)
      goto LABEL_963;
  }
  v4[2] = v326 | 0x80;
  v327 = v326 >> 7;
  if (v326 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v327 | 0x80;
      v328 = v327 >> 7;
      ++v4;
      v329 = v327 >> 14;
      v327 >>= 7;
    }
    while (v329);
    *(v4 - 1) = v328;
    if ((*((_BYTE *)this + 33) & 1) != 0)
      goto LABEL_972;
  }
  else
  {
    v4[3] = v327;
    v4 += 4;
    if ((*((_BYTE *)this + 33) & 1) != 0)
      goto LABEL_972;
  }
LABEL_428:
  v137 = *((_QWORD *)this + 1);
  if ((v137 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)v4;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
}

char *operations_research::sat::SatParameters::ByteSizeLong(operations_research::sat::SatParameters *this)
{
  uint64_t v1;
  int32x2_t *v2;
  int v3;
  uint64_t v4;
  int32x2_t *v5;
  int64x2_t v6;
  int v7;
  int64x2_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  const google::protobuf::UnknownFieldSet *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const google::protobuf::UnknownFieldSet *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const google::protobuf::UnknownFieldSet *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const google::protobuf::UnknownFieldSet *v30;
  unsigned int v31;
  const google::protobuf::UnknownFieldSet *v32;
  const google::protobuf::UnknownFieldSet *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  const google::protobuf::UnknownFieldSet *v43;
  const google::protobuf::UnknownFieldSet *v44;
  unsigned int v45;
  const google::protobuf::UnknownFieldSet *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  const google::protobuf::UnknownFieldSet *v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  const google::protobuf::UnknownFieldSet *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  const google::protobuf::UnknownFieldSet *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  const google::protobuf::UnknownFieldSet *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  const google::protobuf::UnknownFieldSet *v81;
  int v82;
  uint64_t v83;
  int v84;
  const google::protobuf::UnknownFieldSet *v85;
  const google::protobuf::UnknownFieldSet *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  const google::protobuf::UnknownFieldSet *v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  const google::protobuf::UnknownFieldSet *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  __int32 v122;
  uint64_t v123;

  v1 = *((unsigned int *)this + 10);
  if ((_DWORD)v1)
  {
    v2 = (int32x2_t *)*((_QWORD *)this + 6);
    if ((v1 + 0x7FFFFFFF) >= 0x80000003)
    {
      v3 = v1 & 0xFFFFFFFC;
      v5 = v2 + 1;
      v6 = 0uLL;
      v7 = v1 & 0xFFFFFFFC;
      v8 = 0uLL;
      do
      {
        v6 = (int64x2_t)vaddw_u32((uint64x2_t)v6, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v5[-1]), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(_QWORD *)&v5[-1] | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        v8 = (int64x2_t)vaddw_u32((uint64x2_t)v8, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*v5), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(_QWORD *)v5 | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        v5 += 2;
        v7 -= 4;
      }
      while (v7);
      v4 = vaddvq_s64(vaddq_s64(v8, v6));
      goto LABEL_486;
    }
    v3 = 0;
    v4 = 0;
    do
    {
      v122 = v2->i32[v3];
      if (v122 < 0)
        v123 = 10;
      else
        v123 = (9 * (__clz(v122 | 1) ^ 0x1F) + 73) >> 6;
      v4 += v123;
      ++v3;
LABEL_486:
      ;
    }
    while ((_DWORD)v1 != v3);
  }
  else
  {
    v4 = 0;
  }
  v9 = (const google::protobuf::UnknownFieldSet *)(v4 + 2 * v1);
  v10 = *((_DWORD *)this + 4);
  if ((_BYTE)v10)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *((_QWORD *)this + 7);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v10 & 2) == 0)
      {
LABEL_11:
        if ((v10 & 4) == 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_11;
    }
    v14 = *((_DWORD *)this + 16);
    if (v14 < 0)
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 11);
      if ((v10 & 4) == 0)
      {
LABEL_24:
        v17 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
        if ((v10 & 8) == 0)
          v17 = v9;
        if ((v10 & 0x10) != 0)
          v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + 10);
        if ((v10 & 0x20) != 0)
        {
          v18 = *((_DWORD *)this + 22);
          if (v18 < 0)
            v19 = 10;
          else
            v19 = (9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6;
          v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + v19 + 2);
        }
        if ((v10 & 0x40) != 0)
        {
          v20 = *((_DWORD *)this + 23);
          if (v20 < 0)
            v21 = 10;
          else
            v21 = (9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6;
          v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + v21 + 2);
        }
        if ((v10 & 0x80) != 0)
          v9 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + 3);
        else
          v9 = v17;
        goto LABEL_41;
      }
    }
    else
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
      if ((v10 & 4) == 0)
        goto LABEL_24;
    }
LABEL_20:
    v15 = *((_DWORD *)this + 17);
    if (v15 < 0)
      v16 = 10;
    else
      v16 = (9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6;
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v16 + 2);
    goto LABEL_24;
  }
LABEL_41:
  if ((v10 & 0xFF00) != 0)
  {
    v22 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x100) == 0)
      v22 = v9;
    if ((v10 & 0x200) != 0)
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    if ((v10 & 0x400) != 0)
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    if ((v10 & 0x800) != 0)
    {
      v23 = *((_DWORD *)this + 25);
      v24 = (9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6;
      if (v23 >= 0)
        v25 = v24;
      else
        v25 = 10;
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + v25 + 2);
    }
    if ((v10 & 0x1000) != 0)
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 10);
    if ((v10 & 0x2000) != 0)
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 10);
    if ((v10 & 0x4000) != 0)
      v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    if ((v10 & 0x8000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    else
      v9 = v22;
  }
  if ((v10 & 0xFF0000) != 0)
  {
    v26 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x10000) == 0)
      v26 = v9;
    if ((v10 & 0x20000) != 0)
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    if ((v10 & 0x40000) != 0)
    {
      v27 = *((_DWORD *)this + 31);
      v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
      if (v27 >= 0)
        v29 = v28;
      else
        v29 = 10;
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + v29 + 2);
    }
    if ((v10 & 0x80000) != 0)
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    if ((v10 & 0x100000) != 0)
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    if ((v10 & 0x200000) != 0)
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    if ((v10 & 0x400000) != 0)
      v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    if ((v10 & 0x800000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    else
      v9 = v26;
  }
  if (HIBYTE(v10))
  {
    v30 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x1000000) == 0)
      v30 = v9;
    if ((v10 & 0x2000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    if ((v10 & 0x4000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    if ((v10 & 0x8000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30
                                                      + ((9 * (__clz(*((_QWORD *)this + 17) | 1) ^ 0x3F) + 73) >> 6)
                                                      + 2);
    if ((v10 & 0x10000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    if ((v10 & 0x20000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    if ((v10 & 0x40000000) != 0)
      v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    if (v10 >= 0)
      v9 = v30;
    else
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
  }
  v31 = *((_DWORD *)this + 5);
  if ((_BYTE)v31)
  {
    v32 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v31 & 1) == 0)
      v32 = v9;
    if ((v31 & 2) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 4) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 8) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 0x10) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 0x20) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 0x40) != 0)
      v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    if ((v31 & 0x80) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    else
      v9 = v32;
  }
  if ((v31 & 0xFF00) != 0)
  {
    v33 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v31 & 0x100) == 0)
      v33 = v9;
    if ((v31 & 0x200) != 0)
      v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 3);
    if ((v31 & 0x400) != 0)
      v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33
                                                      + ((9 * (__clz(*((_QWORD *)this + 20) | 1) ^ 0x3F) + 73) >> 6)
                                                      + 2);
    if ((v31 & 0x800) != 0)
    {
      v34 = *((_DWORD *)this + 42);
      if (v34 < 0)
        v35 = 10;
      else
        v35 = (9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6;
      v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + v35 + 2);
    }
    if ((v31 & 0x1000) != 0)
      v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 10);
    if ((v31 & 0x2000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 10);
    else
      v9 = v33;
    if ((v31 & 0x4000) != 0)
    {
      v36 = *((_DWORD *)this + 48);
      if (v36 < 0)
        v37 = 10;
      else
        v37 = (9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v37 + 2);
    }
    if ((v31 & 0x8000) != 0)
    {
      v38 = *((_DWORD *)this + 49);
      if (v38 < 0)
        v39 = 10;
      else
        v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v39 + 1);
    }
  }
  if ((v31 & 0xFF0000) != 0)
  {
    if ((v31 & 0x10000) != 0)
    {
      v47 = *((_DWORD *)this + 50);
      v48 = (9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 10;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v49 + 1);
      if ((v31 & 0x20000) == 0)
      {
LABEL_149:
        if ((v31 & 0x40000) == 0)
        {
LABEL_154:
          v43 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 9);
          if ((v31 & 0x80000) == 0)
            v43 = v9;
          if ((v31 & 0x100000) != 0)
            v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          if ((v31 & 0x200000) != 0)
            v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          if ((v31 & 0x400000) != 0)
            v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          if ((v31 & 0x800000) != 0)
            v9 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          else
            v9 = v43;
          goto LABEL_165;
        }
LABEL_150:
        v40 = *((_DWORD *)this + 52);
        v41 = (9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6;
        if (v40 >= 0)
          v42 = v41;
        else
          v42 = 10;
        v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v42 + 1);
        goto LABEL_154;
      }
    }
    else if ((v31 & 0x20000) == 0)
    {
      goto LABEL_149;
    }
    v50 = *((_DWORD *)this + 51);
    v51 = (9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6;
    if (v50 >= 0)
      v52 = v51;
    else
      v52 = 10;
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v52 + 1);
    if ((v31 & 0x40000) == 0)
      goto LABEL_154;
    goto LABEL_150;
  }
LABEL_165:
  if (!HIBYTE(v31))
    goto LABEL_177;
  v44 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
  if ((v31 & 0x1000000) == 0)
    v44 = v9;
  if ((v31 & 0x2000000) != 0)
  {
    v58 = *((_DWORD *)this + 66);
    if (v58 < 0)
    {
      v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
      if ((v31 & 0x4000000) != 0)
        goto LABEL_441;
    }
    else
    {
      v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v58 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v31 & 0x4000000) != 0)
        goto LABEL_441;
    }
LABEL_170:
    if ((v31 & 0x8000000) == 0)
      goto LABEL_171;
LABEL_449:
    v114 = *((_DWORD *)this + 68);
    if (v114 < 0)
    {
      v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
      if ((v31 & 0x10000000) != 0)
        goto LABEL_457;
    }
    else
    {
      v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v114 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v31 & 0x10000000) != 0)
        goto LABEL_457;
    }
LABEL_172:
    if ((v31 & 0x20000000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 10);
    else
      v9 = v44;
    if ((v31 & 0x40000000) == 0)
      goto LABEL_176;
    goto LABEL_468;
  }
  if ((v31 & 0x4000000) == 0)
    goto LABEL_170;
LABEL_441:
  v112 = *((_DWORD *)this + 67);
  if (v112 < 0)
  {
    v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
    if ((v31 & 0x8000000) != 0)
      goto LABEL_449;
  }
  else
  {
    v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v112 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v31 & 0x8000000) != 0)
      goto LABEL_449;
  }
LABEL_171:
  if ((v31 & 0x10000000) == 0)
    goto LABEL_172;
LABEL_457:
  v116 = *((_DWORD *)this + 69);
  if (v116 < 0)
    v117 = 10;
  else
    v117 = (9 * (__clz(v116 | 1) ^ 0x1F) + 73) >> 6;
  v119 = (uint64_t)v44 + v117 + 2;
  if ((v31 & 0x20000000) != 0)
    v9 = (const google::protobuf::UnknownFieldSet *)(v119 + 10);
  else
    v9 = (const google::protobuf::UnknownFieldSet *)v119;
  if ((v31 & 0x40000000) == 0)
  {
LABEL_176:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_469;
  }
LABEL_468:
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                 + ((9 * (__clz(*((_QWORD *)this + 36) | 1) ^ 0x3F) + 73) >> 6)
                                                 + 2);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_177:
    v45 = *((_DWORD *)this + 6);
    if (!(_BYTE)v45)
      goto LABEL_220;
    goto LABEL_178;
  }
LABEL_469:
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                 + ((9 * (__clz(*((_QWORD *)this + 37) | 1) ^ 0x3F) + 73) >> 6)
                                                 + 2);
  v45 = *((_DWORD *)this + 6);
  if (!(_BYTE)v45)
    goto LABEL_220;
LABEL_178:
  v46 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v45 & 1) == 0)
    v46 = v9;
  if ((v45 & 2) != 0)
    v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  if ((v45 & 4) != 0)
    v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  if ((v45 & 8) != 0)
    v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  if ((v45 & 0x10) == 0)
  {
    if ((v45 & 0x20) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 10);
    else
      v9 = v46;
    if ((v45 & 0x40) == 0)
      goto LABEL_191;
LABEL_209:
    v57 = *((_DWORD *)this + 80);
    if (v57 < 0)
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x80) == 0)
        goto LABEL_220;
    }
    else
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v57 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x80) == 0)
        goto LABEL_220;
    }
    goto LABEL_216;
  }
  v53 = *((_DWORD *)this + 77);
  v54 = (9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6;
  if (v53 >= 0)
    v55 = v54;
  else
    v55 = 10;
  v56 = (uint64_t)v46 + v55 + 2;
  if ((v45 & 0x20) != 0)
    v9 = (const google::protobuf::UnknownFieldSet *)(v56 + 10);
  else
    v9 = (const google::protobuf::UnknownFieldSet *)v56;
  if ((v45 & 0x40) != 0)
    goto LABEL_209;
LABEL_191:
  if ((v45 & 0x80) == 0)
    goto LABEL_220;
LABEL_216:
  v59 = *((_DWORD *)this + 81);
  if (v59 < 0)
    v60 = 10;
  else
    v60 = (9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6;
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v60 + 2);
LABEL_220:
  if ((v45 & 0xFF00) == 0)
    goto LABEL_253;
  v61 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
  if ((v45 & 0x100) == 0)
    v61 = v9;
  if ((v45 & 0x200) != 0)
  {
    v62 = *((_DWORD *)this + 84);
    if (v62 < 0)
    {
      v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 12);
      if ((v45 & 0x400) != 0)
        goto LABEL_234;
    }
    else
    {
      v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x400) != 0)
        goto LABEL_234;
    }
LABEL_225:
    if ((v45 & 0x800) != 0)
      v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
    if ((v45 & 0x1000) == 0)
      goto LABEL_228;
    goto LABEL_240;
  }
  if ((v45 & 0x400) == 0)
    goto LABEL_225;
LABEL_234:
  v63 = *((_DWORD *)this + 85);
  if (v63 < 0)
    v64 = 10;
  else
    v64 = (9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6;
  v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + v64 + 2);
  if ((v45 & 0x800) != 0)
    v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  if ((v45 & 0x1000) == 0)
  {
LABEL_228:
    if ((v45 & 0x2000) == 0)
      goto LABEL_248;
LABEL_244:
    v66 = *((_DWORD *)this + 89);
    if (v66 < 0)
      v67 = 10;
    else
      v67 = (9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6;
    v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + v67 + 2);
    goto LABEL_248;
  }
LABEL_240:
  v65 = *((_DWORD *)this + 88);
  if ((v65 & 0x80000000) == 0)
  {
    v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + ((9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x2000) == 0)
      goto LABEL_248;
    goto LABEL_244;
  }
  v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 12);
  if ((v45 & 0x2000) != 0)
    goto LABEL_244;
LABEL_248:
  if ((v45 & 0x4000) != 0)
    v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  if ((v45 & 0x8000) != 0)
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  else
    v9 = v61;
LABEL_253:
  if ((v45 & 0xFF0000) != 0)
  {
    v68 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v45 & 0x10000) == 0)
      v68 = v9;
    if ((v45 & 0x20000) != 0)
    {
      v69 = *((_DWORD *)this + 96);
      v70 = (9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6;
      if (v69 >= 0)
        v71 = v70;
      else
        v71 = 10;
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + v71 + 2);
    }
    if ((v45 & 0x40000) != 0)
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    if ((v45 & 0x80000) != 0)
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    if ((v45 & 0x100000) != 0)
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    if ((v45 & 0x200000) != 0)
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    if ((v45 & 0x400000) != 0)
      v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    if ((v45 & 0x800000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    else
      v9 = v68;
  }
  if (!HIBYTE(v45))
    goto LABEL_286;
  v72 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v45 & 0x1000000) == 0)
    v72 = v9;
  if ((v45 & 0x2000000) != 0)
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v72 + 3);
  else
    v9 = v72;
  if ((v45 & 0x4000000) != 0)
  {
    v84 = *((_DWORD *)this + 99);
    if (v84 < 0)
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x8000000) != 0)
        goto LABEL_445;
    }
    else
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v84 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x8000000) != 0)
        goto LABEL_445;
    }
LABEL_282:
    if ((v45 & 0x10000000) == 0)
      goto LABEL_283;
LABEL_453:
    v115 = *((_DWORD *)this + 101);
    if (v115 < 0)
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x20000000) != 0)
        goto LABEL_460;
    }
    else
    {
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v115 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x20000000) != 0)
        goto LABEL_460;
    }
LABEL_284:
    if ((v45 & 0x40000000) == 0)
      goto LABEL_285;
    goto LABEL_472;
  }
  if ((v45 & 0x8000000) == 0)
    goto LABEL_282;
LABEL_445:
  v113 = *((_DWORD *)this + 100);
  if (v113 < 0)
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    if ((v45 & 0x10000000) != 0)
      goto LABEL_453;
  }
  else
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v113 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x10000000) != 0)
      goto LABEL_453;
  }
LABEL_283:
  if ((v45 & 0x20000000) == 0)
    goto LABEL_284;
LABEL_460:
  v118 = *((_DWORD *)this + 102);
  if (v118 < 0)
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    if ((v45 & 0x40000000) != 0)
      goto LABEL_472;
  }
  else
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v118 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x40000000) != 0)
    {
LABEL_472:
      v120 = *((_DWORD *)this + 103);
      if (v120 < 0)
      {
        v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
        if ((v45 & 0x80000000) != 0)
          goto LABEL_476;
      }
      else
      {
        v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v120 | 1) ^ 0x1F) + 73) >> 6) + 2);
        if ((v45 & 0x80000000) != 0)
          goto LABEL_476;
      }
LABEL_286:
      v73 = *((_DWORD *)this + 7);
      if (!(_BYTE)v73)
        goto LABEL_310;
      goto LABEL_287;
    }
  }
LABEL_285:
  if ((v45 & 0x80000000) == 0)
    goto LABEL_286;
LABEL_476:
  v121 = *((_DWORD *)this + 104);
  if (v121 < 0)
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    v73 = *((_DWORD *)this + 7);
    if (!(_BYTE)v73)
      goto LABEL_310;
  }
  else
  {
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v121 | 1) ^ 0x1F) + 73) >> 6) + 2);
    v73 = *((_DWORD *)this + 7);
    if (!(_BYTE)v73)
      goto LABEL_310;
  }
LABEL_287:
  if ((v73 & 1) != 0)
  {
    v74 = *((_DWORD *)this + 105);
    v75 = (9 * (__clz(v74 | 1) ^ 0x1F) + 73) >> 6;
    if (v74 >= 0)
      v76 = v75;
    else
      v76 = 10;
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v76 + 2);
  }
  v77 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v73 & 2) == 0)
    v77 = v9;
  if ((v73 & 4) != 0)
    v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  if ((v73 & 8) != 0)
    v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  if ((v73 & 0x10) != 0)
    v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  if ((v73 & 0x20) != 0)
  {
    v78 = *((_DWORD *)this + 107);
    v79 = (9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6;
    if (v78 >= 0)
      v80 = v79;
    else
      v80 = 10;
    v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + v80 + 2);
  }
  if ((v73 & 0x40) != 0)
    v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 10);
  if ((v73 & 0x80) != 0)
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  else
    v9 = v77;
LABEL_310:
  if ((v73 & 0xFF00) != 0)
  {
    v81 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v73 & 0x100) == 0)
      v81 = v9;
    if ((v73 & 0x200) != 0)
      v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    if ((v73 & 0x400) != 0)
      v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    if ((v73 & 0x800) != 0)
      v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    if ((v73 & 0x1000) != 0)
      v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    if ((v73 & 0x2000) != 0)
      v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    if ((v73 & 0x4000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    else
      v9 = v81;
    if ((v73 & 0x8000) != 0)
    {
      v82 = *((_DWORD *)this + 112);
      if (v82 < 0)
        v83 = 10;
      else
        v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v83 + 2);
    }
  }
  if ((v73 & 0xFF0000) != 0)
  {
    v85 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v73 & 0x10000) == 0)
      v85 = v9;
    if ((v73 & 0x20000) != 0)
      v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    if ((v73 & 0x40000) != 0)
      v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    if ((v73 & 0x80000) != 0)
      v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    if ((v73 & 0x100000) != 0)
    {
      v93 = *((_DWORD *)this + 114);
      v94 = (9 * (__clz(v93 | 1) ^ 0x1F) + 73) >> 6;
      if (v93 >= 0)
        v95 = v94;
      else
        v95 = 10;
      v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + v95 + 2);
      if ((v73 & 0x200000) == 0)
      {
LABEL_345:
        if ((v73 & 0x400000) == 0)
          goto LABEL_347;
        goto LABEL_346;
      }
    }
    else if ((v73 & 0x200000) == 0)
    {
      goto LABEL_345;
    }
    v96 = *((_DWORD *)this + 115);
    v97 = (9 * (__clz(v96 | 1) ^ 0x1F) + 73) >> 6;
    if (v96 >= 0)
      v98 = v97;
    else
      v98 = 10;
    v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + v98 + 2);
    if ((v73 & 0x400000) == 0)
      goto LABEL_347;
LABEL_346:
    v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85
                                                    + ((9 * (__clz(*((_QWORD *)this + 58) | 1) ^ 0x3F) + 73) >> 6)
                                                    + 2);
LABEL_347:
    if ((v73 & 0x800000) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 10);
    else
      v9 = v85;
  }
  if (HIBYTE(v73))
  {
    v86 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v73 & 0x1000000) == 0)
      v86 = v9;
    if ((v73 & 0x2000000) != 0)
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 10);
    if ((v73 & 0x4000000) != 0)
    {
      v87 = *((_DWORD *)this + 124);
      v88 = (9 * (__clz(v87 | 1) ^ 0x1F) + 73) >> 6;
      if (v87 >= 0)
        v89 = v88;
      else
        v89 = 10;
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + v89 + 2);
    }
    if ((v73 & 0x8000000) != 0)
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    if ((v73 & 0x10000000) != 0)
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    if ((v73 & 0x20000000) != 0)
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    if ((v73 & 0x40000000) != 0)
      v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    if (v73 >= 0)
      v9 = v86;
    else
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 10);
  }
  v90 = *((_DWORD *)this + 8);
  if ((_BYTE)v90)
  {
    if ((v90 & 1) != 0)
    {
      v91 = *((_DWORD *)this + 128);
      if (v91 < 0)
        v92 = 10;
      else
        v92 = (9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v92 + 2);
    }
    if ((v90 & 2) != 0)
    {
      v99 = *((_DWORD *)this + 129);
      if (v99 < 0)
        v100 = 12;
      else
        v100 = ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6) + 2;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v100);
    }
    v101 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v90 & 4) == 0)
      v101 = v9;
    if ((v90 & 8) != 0)
      v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 10);
    if ((v90 & 0x10) != 0)
    {
      v102 = *((_DWORD *)this + 134);
      if (v102 < 0)
        v103 = 12;
      else
        v103 = ((9 * (__clz(v102 | 1) ^ 0x1F) + 73) >> 6) + 2;
      v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + v103);
    }
    if ((v90 & 0x20) != 0)
    {
      v104 = *((_DWORD *)this + 135);
      if (v104 < 0)
        v105 = 12;
      else
        v105 = ((9 * (__clz(v104 | 1) ^ 0x1F) + 73) >> 6) + 2;
      v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + v105);
    }
    if ((v90 & 0x40) != 0)
      v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 3);
    if ((v90 & 0x80) != 0)
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 3);
    else
      v9 = v101;
  }
  if ((v90 & 0x3F00) != 0)
  {
    v106 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v90 & 0x100) == 0)
      v106 = v9;
    if ((v90 & 0x200) == 0)
    {
      if ((v90 & 0x400) != 0)
        v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      if ((v90 & 0x800) == 0)
        goto LABEL_417;
LABEL_427:
      v108 = *((_DWORD *)this + 140);
      if (v108 < 0)
      {
        v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 12);
        if ((v90 & 0x1000) == 0)
          goto LABEL_435;
      }
      else
      {
        v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + ((9 * (__clz(v108 | 1) ^ 0x1F) + 73) >> 6) + 2);
        if ((v90 & 0x1000) == 0)
        {
LABEL_435:
          if ((v90 & 0x2000) != 0)
            v9 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
          else
            v9 = v106;
          goto LABEL_438;
        }
      }
LABEL_431:
      v109 = *((_DWORD *)this + 141);
      if (v109 < 0)
        v110 = 12;
      else
        v110 = ((9 * (__clz(v109 | 1) ^ 0x1F) + 73) >> 6) + 2;
      v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + v110);
      goto LABEL_435;
    }
    v107 = *((_DWORD *)this + 137);
    if (v107 < 0)
    {
      v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 12);
      if ((v90 & 0x400) != 0)
        v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      if ((v90 & 0x800) != 0)
        goto LABEL_427;
    }
    else
    {
      v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + ((9 * (__clz(v107 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v90 & 0x400) != 0)
        v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      if ((v90 & 0x800) != 0)
        goto LABEL_427;
    }
LABEL_417:
    if ((v90 & 0x1000) == 0)
      goto LABEL_435;
    goto LABEL_431;
  }
LABEL_438:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::SatParameters *)((char *)this + 8), v9, (_DWORD *)this + 9);
  *((_DWORD *)this + 9) = (_DWORD)v9;
  return (char *)v9;
}

void operations_research::sat::SatParameters::MergeFrom(operations_research::sat::SatParameters *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::SatParameters *__hidden))a2 == &off_24F9878E8)
    operations_research::sat::SatParameters::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::SatParameters::MergeFrom(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  std::string *v17;
  std::string **v18;
  uint64_t v19;
  google::protobuf::Arena *v20;
  std::string *v21;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 10);
  if (v9)
  {
    v10 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v10 + v9);
    v11 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  v12 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v12)
  {
    if ((v12 & 1) == 0)
    {
      if ((v12 & 2) == 0)
        goto LABEL_10;
LABEL_341:
      *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
      if ((v12 & 4) == 0)
      {
LABEL_11:
        if ((v12 & 8) == 0)
          goto LABEL_12;
        goto LABEL_343;
      }
LABEL_342:
      *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
      if ((v12 & 8) == 0)
      {
LABEL_12:
        if ((v12 & 0x10) == 0)
          goto LABEL_13;
        goto LABEL_344;
      }
LABEL_343:
      *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
      if ((v12 & 0x10) == 0)
      {
LABEL_13:
        if ((v12 & 0x20) == 0)
          goto LABEL_14;
        goto LABEL_345;
      }
LABEL_344:
      *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
      if ((v12 & 0x20) == 0)
      {
LABEL_14:
        if ((v12 & 0x40) == 0)
          goto LABEL_15;
        goto LABEL_346;
      }
LABEL_345:
      *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
      if ((v12 & 0x40) == 0)
      {
LABEL_15:
        if ((v12 & 0x80) == 0)
        {
LABEL_17:
          *((_DWORD *)this + 4) |= v12;
          goto LABEL_18;
        }
LABEL_16:
        *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
        goto LABEL_17;
      }
LABEL_346:
      *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
      if ((v12 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    v17 = (std::string *)*((_QWORD *)a2 + 7);
    *((_DWORD *)this + 4) |= 1u;
    v18 = (std::string **)((char *)this + 56);
    v19 = *((_QWORD *)this + 1);
    v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if ((v19 & 1) != 0)
    {
      v20 = *(google::protobuf::Arena **)v20;
      v21 = *v18;
      if (*v18 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
      {
LABEL_202:
        std::string::operator=(v21, v17);
        if ((v12 & 2) != 0)
          goto LABEL_341;
LABEL_10:
        if ((v12 & 4) == 0)
          goto LABEL_11;
        goto LABEL_342;
      }
    }
    else
    {
      v21 = *v18;
      if (*v18 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
        goto LABEL_202;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, v20, (__int128 *)v17);
    if ((v12 & 2) != 0)
      goto LABEL_341;
    goto LABEL_10;
  }
LABEL_18:
  if ((v12 & 0xFF00) == 0)
    goto LABEL_29;
  if ((v12 & 0x100) != 0)
  {
    *((_BYTE *)this + 97) = *((_BYTE *)a2 + 97);
    if ((v12 & 0x200) == 0)
    {
LABEL_21:
      if ((v12 & 0x400) == 0)
        goto LABEL_22;
      goto LABEL_206;
    }
  }
  else if ((v12 & 0x200) == 0)
  {
    goto LABEL_21;
  }
  *((_BYTE *)this + 98) = *((_BYTE *)a2 + 98);
  if ((v12 & 0x400) == 0)
  {
LABEL_22:
    if ((v12 & 0x800) == 0)
      goto LABEL_23;
    goto LABEL_207;
  }
LABEL_206:
  *((_BYTE *)this + 99) = *((_BYTE *)a2 + 99);
  if ((v12 & 0x800) == 0)
  {
LABEL_23:
    if ((v12 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_208;
  }
LABEL_207:
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  if ((v12 & 0x1000) == 0)
  {
LABEL_24:
    if ((v12 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_209;
  }
LABEL_208:
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  if ((v12 & 0x2000) == 0)
  {
LABEL_25:
    if ((v12 & 0x4000) == 0)
      goto LABEL_26;
LABEL_210:
    *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
    if ((v12 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_209:
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  if ((v12 & 0x4000) != 0)
    goto LABEL_210;
LABEL_26:
  if ((v12 & 0x8000) != 0)
LABEL_27:
    *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
LABEL_28:
  *((_DWORD *)this + 4) |= v12;
LABEL_29:
  if ((v12 & 0xFF0000) == 0)
    goto LABEL_40;
  if ((v12 & 0x10000) != 0)
  {
    *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
    if ((v12 & 0x20000) == 0)
    {
LABEL_32:
      if ((v12 & 0x40000) == 0)
        goto LABEL_33;
      goto LABEL_214;
    }
  }
  else if ((v12 & 0x20000) == 0)
  {
    goto LABEL_32;
  }
  *((_BYTE *)this + 123) = *((_BYTE *)a2 + 123);
  if ((v12 & 0x40000) == 0)
  {
LABEL_33:
    if ((v12 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_215;
  }
LABEL_214:
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  if ((v12 & 0x80000) == 0)
  {
LABEL_34:
    if ((v12 & 0x100000) == 0)
      goto LABEL_35;
    goto LABEL_216;
  }
LABEL_215:
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  if ((v12 & 0x100000) == 0)
  {
LABEL_35:
    if ((v12 & 0x200000) == 0)
      goto LABEL_36;
    goto LABEL_217;
  }
LABEL_216:
  *((_BYTE *)this + 129) = *((_BYTE *)a2 + 129);
  if ((v12 & 0x200000) == 0)
  {
LABEL_36:
    if ((v12 & 0x400000) == 0)
      goto LABEL_37;
LABEL_218:
    *((_BYTE *)this + 131) = *((_BYTE *)a2 + 131);
    if ((v12 & 0x800000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_217:
  *((_BYTE *)this + 130) = *((_BYTE *)a2 + 130);
  if ((v12 & 0x400000) != 0)
    goto LABEL_218;
LABEL_37:
  if ((v12 & 0x800000) != 0)
LABEL_38:
    *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
LABEL_39:
  *((_DWORD *)this + 4) |= v12;
LABEL_40:
  if (!HIBYTE(v12))
    goto LABEL_50;
  if ((v12 & 0x1000000) != 0)
  {
    *((_BYTE *)this + 133) = *((_BYTE *)a2 + 133);
    if ((v12 & 0x2000000) == 0)
    {
LABEL_43:
      if ((v12 & 0x4000000) == 0)
        goto LABEL_44;
      goto LABEL_308;
    }
  }
  else if ((v12 & 0x2000000) == 0)
  {
    goto LABEL_43;
  }
  *((_BYTE *)this + 134) = *((_BYTE *)a2 + 134);
  if ((v12 & 0x4000000) == 0)
  {
LABEL_44:
    if ((v12 & 0x8000000) == 0)
      goto LABEL_45;
    goto LABEL_309;
  }
LABEL_308:
  *((_BYTE *)this + 135) = *((_BYTE *)a2 + 135);
  if ((v12 & 0x8000000) == 0)
  {
LABEL_45:
    if ((v12 & 0x10000000) == 0)
      goto LABEL_46;
    goto LABEL_310;
  }
LABEL_309:
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  if ((v12 & 0x10000000) == 0)
  {
LABEL_46:
    if ((v12 & 0x20000000) == 0)
      goto LABEL_47;
    goto LABEL_311;
  }
LABEL_310:
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 144);
  if ((v12 & 0x20000000) == 0)
  {
LABEL_47:
    if ((v12 & 0x40000000) == 0)
      goto LABEL_48;
LABEL_312:
    *((_BYTE *)this + 146) = *((_BYTE *)a2 + 146);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_49;
LABEL_313:
    *((_BYTE *)this + 147) = *((_BYTE *)a2 + 147);
    goto LABEL_49;
  }
LABEL_311:
  *((_BYTE *)this + 145) = *((_BYTE *)a2 + 145);
  if ((v12 & 0x40000000) != 0)
    goto LABEL_312;
LABEL_48:
  if ((v12 & 0x80000000) != 0)
    goto LABEL_313;
LABEL_49:
  *((_DWORD *)this + 4) |= v12;
LABEL_50:
  v13 = *((_DWORD *)a2 + 5);
  if (!(_BYTE)v13)
    goto LABEL_61;
  if ((v13 & 1) != 0)
  {
    *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
    if ((v13 & 2) == 0)
    {
LABEL_53:
      if ((v13 & 4) == 0)
        goto LABEL_54;
      goto LABEL_222;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_53;
  }
  *((_BYTE *)this + 149) = *((_BYTE *)a2 + 149);
  if ((v13 & 4) == 0)
  {
LABEL_54:
    if ((v13 & 8) == 0)
      goto LABEL_55;
    goto LABEL_223;
  }
LABEL_222:
  *((_BYTE *)this + 150) = *((_BYTE *)a2 + 150);
  if ((v13 & 8) == 0)
  {
LABEL_55:
    if ((v13 & 0x10) == 0)
      goto LABEL_56;
    goto LABEL_224;
  }
LABEL_223:
  *((_BYTE *)this + 151) = *((_BYTE *)a2 + 151);
  if ((v13 & 0x10) == 0)
  {
LABEL_56:
    if ((v13 & 0x20) == 0)
      goto LABEL_57;
    goto LABEL_225;
  }
LABEL_224:
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  if ((v13 & 0x20) == 0)
  {
LABEL_57:
    if ((v13 & 0x40) == 0)
      goto LABEL_58;
LABEL_226:
    *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
    if ((v13 & 0x80) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_225:
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  if ((v13 & 0x40) != 0)
    goto LABEL_226;
LABEL_58:
  if ((v13 & 0x80) != 0)
LABEL_59:
    *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
LABEL_60:
  *((_DWORD *)this + 5) |= v13;
LABEL_61:
  if ((v13 & 0xFF00) == 0)
    goto LABEL_72;
  if ((v13 & 0x100) != 0)
  {
    *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
    if ((v13 & 0x200) == 0)
    {
LABEL_64:
      if ((v13 & 0x400) == 0)
        goto LABEL_65;
      goto LABEL_230;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  if ((v13 & 0x400) == 0)
  {
LABEL_65:
    if ((v13 & 0x800) == 0)
      goto LABEL_66;
    goto LABEL_231;
  }
LABEL_230:
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  if ((v13 & 0x800) == 0)
  {
LABEL_66:
    if ((v13 & 0x1000) == 0)
      goto LABEL_67;
    goto LABEL_232;
  }
LABEL_231:
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  if ((v13 & 0x1000) == 0)
  {
LABEL_67:
    if ((v13 & 0x2000) == 0)
      goto LABEL_68;
    goto LABEL_233;
  }
LABEL_232:
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  if ((v13 & 0x2000) == 0)
  {
LABEL_68:
    if ((v13 & 0x4000) == 0)
      goto LABEL_69;
LABEL_234:
    *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
    if ((v13 & 0x8000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_233:
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  if ((v13 & 0x4000) != 0)
    goto LABEL_234;
LABEL_69:
  if ((v13 & 0x8000) != 0)
LABEL_70:
    *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
LABEL_71:
  *((_DWORD *)this + 5) |= v13;
LABEL_72:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_83;
  if ((v13 & 0x10000) != 0)
  {
    *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
    if ((v13 & 0x20000) == 0)
    {
LABEL_75:
      if ((v13 & 0x40000) == 0)
        goto LABEL_76;
      goto LABEL_238;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_75;
  }
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  if ((v13 & 0x40000) == 0)
  {
LABEL_76:
    if ((v13 & 0x80000) == 0)
      goto LABEL_77;
    goto LABEL_239;
  }
LABEL_238:
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  if ((v13 & 0x80000) == 0)
  {
LABEL_77:
    if ((v13 & 0x100000) == 0)
      goto LABEL_78;
    goto LABEL_240;
  }
LABEL_239:
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  if ((v13 & 0x100000) == 0)
  {
LABEL_78:
    if ((v13 & 0x200000) == 0)
      goto LABEL_79;
    goto LABEL_241;
  }
LABEL_240:
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  if ((v13 & 0x200000) == 0)
  {
LABEL_79:
    if ((v13 & 0x400000) == 0)
      goto LABEL_80;
LABEL_242:
    *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
    if ((v13 & 0x800000) == 0)
      goto LABEL_82;
    goto LABEL_81;
  }
LABEL_241:
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  if ((v13 & 0x400000) != 0)
    goto LABEL_242;
LABEL_80:
  if ((v13 & 0x800000) != 0)
LABEL_81:
    *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
LABEL_82:
  *((_DWORD *)this + 5) |= v13;
LABEL_83:
  if (!HIBYTE(v13))
    goto LABEL_93;
  if ((v13 & 0x1000000) != 0)
  {
    *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_86:
      if ((v13 & 0x4000000) == 0)
        goto LABEL_87;
      goto LABEL_316;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_86;
  }
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_87:
    if ((v13 & 0x8000000) == 0)
      goto LABEL_88;
    goto LABEL_317;
  }
LABEL_316:
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_88:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_89;
    goto LABEL_318;
  }
LABEL_317:
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_89:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_90;
    goto LABEL_319;
  }
LABEL_318:
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_90:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_91;
LABEL_320:
    *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_92;
LABEL_321:
    *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
    goto LABEL_92;
  }
LABEL_319:
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  if ((v13 & 0x40000000) != 0)
    goto LABEL_320;
LABEL_91:
  if ((v13 & 0x80000000) != 0)
    goto LABEL_321;
LABEL_92:
  *((_DWORD *)this + 5) |= v13;
LABEL_93:
  v14 = *((_DWORD *)a2 + 6);
  if (!(_BYTE)v14)
    goto LABEL_104;
  if ((v14 & 1) != 0)
  {
    *((_BYTE *)this + 304) = *((_BYTE *)a2 + 304);
    if ((v14 & 2) == 0)
    {
LABEL_96:
      if ((v14 & 4) == 0)
        goto LABEL_97;
      goto LABEL_246;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_96;
  }
  *((_BYTE *)this + 305) = *((_BYTE *)a2 + 305);
  if ((v14 & 4) == 0)
  {
LABEL_97:
    if ((v14 & 8) == 0)
      goto LABEL_98;
    goto LABEL_247;
  }
LABEL_246:
  *((_BYTE *)this + 306) = *((_BYTE *)a2 + 306);
  if ((v14 & 8) == 0)
  {
LABEL_98:
    if ((v14 & 0x10) == 0)
      goto LABEL_99;
    goto LABEL_248;
  }
LABEL_247:
  *((_BYTE *)this + 307) = *((_BYTE *)a2 + 307);
  if ((v14 & 0x10) == 0)
  {
LABEL_99:
    if ((v14 & 0x20) == 0)
      goto LABEL_100;
    goto LABEL_249;
  }
LABEL_248:
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  if ((v14 & 0x20) == 0)
  {
LABEL_100:
    if ((v14 & 0x40) == 0)
      goto LABEL_101;
LABEL_250:
    *((_DWORD *)this + 80) = *((_DWORD *)a2 + 80);
    if ((v14 & 0x80) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
LABEL_249:
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  if ((v14 & 0x40) != 0)
    goto LABEL_250;
LABEL_101:
  if ((v14 & 0x80) != 0)
LABEL_102:
    *((_DWORD *)this + 81) = *((_DWORD *)a2 + 81);
LABEL_103:
  *((_DWORD *)this + 6) |= v14;
LABEL_104:
  if ((v14 & 0xFF00) == 0)
    goto LABEL_115;
  if ((v14 & 0x100) != 0)
  {
    *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
    if ((v14 & 0x200) == 0)
    {
LABEL_107:
      if ((v14 & 0x400) == 0)
        goto LABEL_108;
      goto LABEL_254;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_107;
  }
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  if ((v14 & 0x400) == 0)
  {
LABEL_108:
    if ((v14 & 0x800) == 0)
      goto LABEL_109;
    goto LABEL_255;
  }
LABEL_254:
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  if ((v14 & 0x800) == 0)
  {
LABEL_109:
    if ((v14 & 0x1000) == 0)
      goto LABEL_110;
    goto LABEL_256;
  }
LABEL_255:
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  if ((v14 & 0x1000) == 0)
  {
LABEL_110:
    if ((v14 & 0x2000) == 0)
      goto LABEL_111;
    goto LABEL_257;
  }
LABEL_256:
  *((_DWORD *)this + 88) = *((_DWORD *)a2 + 88);
  if ((v14 & 0x2000) == 0)
  {
LABEL_111:
    if ((v14 & 0x4000) == 0)
      goto LABEL_112;
LABEL_258:
    *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
    if ((v14 & 0x8000) == 0)
      goto LABEL_114;
    goto LABEL_113;
  }
LABEL_257:
  *((_DWORD *)this + 89) = *((_DWORD *)a2 + 89);
  if ((v14 & 0x4000) != 0)
    goto LABEL_258;
LABEL_112:
  if ((v14 & 0x8000) != 0)
LABEL_113:
    *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
LABEL_114:
  *((_DWORD *)this + 6) |= v14;
LABEL_115:
  if ((v14 & 0xFF0000) == 0)
    goto LABEL_126;
  if ((v14 & 0x10000) != 0)
  {
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
    if ((v14 & 0x20000) == 0)
    {
LABEL_118:
      if ((v14 & 0x40000) == 0)
        goto LABEL_119;
      goto LABEL_262;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_118;
  }
  *((_DWORD *)this + 96) = *((_DWORD *)a2 + 96);
  if ((v14 & 0x40000) == 0)
  {
LABEL_119:
    if ((v14 & 0x80000) == 0)
      goto LABEL_120;
    goto LABEL_263;
  }
LABEL_262:
  *((_BYTE *)this + 388) = *((_BYTE *)a2 + 388);
  if ((v14 & 0x80000) == 0)
  {
LABEL_120:
    if ((v14 & 0x100000) == 0)
      goto LABEL_121;
    goto LABEL_264;
  }
LABEL_263:
  *((_BYTE *)this + 389) = *((_BYTE *)a2 + 389);
  if ((v14 & 0x100000) == 0)
  {
LABEL_121:
    if ((v14 & 0x200000) == 0)
      goto LABEL_122;
    goto LABEL_265;
  }
LABEL_264:
  *((_BYTE *)this + 390) = *((_BYTE *)a2 + 390);
  if ((v14 & 0x200000) == 0)
  {
LABEL_122:
    if ((v14 & 0x400000) == 0)
      goto LABEL_123;
LABEL_266:
    *((_BYTE *)this + 392) = *((_BYTE *)a2 + 392);
    if ((v14 & 0x800000) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
LABEL_265:
  *((_BYTE *)this + 391) = *((_BYTE *)a2 + 391);
  if ((v14 & 0x400000) != 0)
    goto LABEL_266;
LABEL_123:
  if ((v14 & 0x800000) != 0)
LABEL_124:
    *((_BYTE *)this + 393) = *((_BYTE *)a2 + 393);
LABEL_125:
  *((_DWORD *)this + 6) |= v14;
LABEL_126:
  if (!HIBYTE(v14))
    goto LABEL_136;
  if ((v14 & 0x1000000) != 0)
  {
    *((_BYTE *)this + 394) = *((_BYTE *)a2 + 394);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_129:
      if ((v14 & 0x4000000) == 0)
        goto LABEL_130;
      goto LABEL_324;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_129;
  }
  *((_BYTE *)this + 395) = *((_BYTE *)a2 + 395);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_130:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_131;
    goto LABEL_325;
  }
LABEL_324:
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_131:
    if ((v14 & 0x10000000) == 0)
      goto LABEL_132;
    goto LABEL_326;
  }
LABEL_325:
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_132:
    if ((v14 & 0x20000000) == 0)
      goto LABEL_133;
    goto LABEL_327;
  }
LABEL_326:
  *((_DWORD *)this + 101) = *((_DWORD *)a2 + 101);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_133:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_134;
LABEL_328:
    *((_DWORD *)this + 103) = *((_DWORD *)a2 + 103);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_135;
LABEL_329:
    *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
    goto LABEL_135;
  }
LABEL_327:
  *((_DWORD *)this + 102) = *((_DWORD *)a2 + 102);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_328;
LABEL_134:
  if ((v14 & 0x80000000) != 0)
    goto LABEL_329;
LABEL_135:
  *((_DWORD *)this + 6) |= v14;
LABEL_136:
  v15 = *((_DWORD *)a2 + 7);
  if (!(_BYTE)v15)
    goto LABEL_147;
  if ((v15 & 1) != 0)
  {
    *((_DWORD *)this + 105) = *((_DWORD *)a2 + 105);
    if ((v15 & 2) == 0)
    {
LABEL_139:
      if ((v15 & 4) == 0)
        goto LABEL_140;
      goto LABEL_270;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_139;
  }
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 424);
  if ((v15 & 4) == 0)
  {
LABEL_140:
    if ((v15 & 8) == 0)
      goto LABEL_141;
    goto LABEL_271;
  }
LABEL_270:
  *((_BYTE *)this + 425) = *((_BYTE *)a2 + 425);
  if ((v15 & 8) == 0)
  {
LABEL_141:
    if ((v15 & 0x10) == 0)
      goto LABEL_142;
    goto LABEL_272;
  }
LABEL_271:
  *((_BYTE *)this + 426) = *((_BYTE *)a2 + 426);
  if ((v15 & 0x10) == 0)
  {
LABEL_142:
    if ((v15 & 0x20) == 0)
      goto LABEL_143;
    goto LABEL_273;
  }
LABEL_272:
  *((_BYTE *)this + 427) = *((_BYTE *)a2 + 427);
  if ((v15 & 0x20) == 0)
  {
LABEL_143:
    if ((v15 & 0x40) == 0)
      goto LABEL_144;
LABEL_274:
    *((_QWORD *)this + 54) = *((_QWORD *)a2 + 54);
    if ((v15 & 0x80) == 0)
      goto LABEL_146;
    goto LABEL_145;
  }
LABEL_273:
  *((_DWORD *)this + 107) = *((_DWORD *)a2 + 107);
  if ((v15 & 0x40) != 0)
    goto LABEL_274;
LABEL_144:
  if ((v15 & 0x80) != 0)
LABEL_145:
    *((_BYTE *)this + 440) = *((_BYTE *)a2 + 440);
LABEL_146:
  *((_DWORD *)this + 7) |= v15;
LABEL_147:
  if ((v15 & 0xFF00) == 0)
    goto LABEL_158;
  if ((v15 & 0x100) != 0)
  {
    *((_BYTE *)this + 441) = *((_BYTE *)a2 + 441);
    if ((v15 & 0x200) == 0)
    {
LABEL_150:
      if ((v15 & 0x400) == 0)
        goto LABEL_151;
      goto LABEL_278;
    }
  }
  else if ((v15 & 0x200) == 0)
  {
    goto LABEL_150;
  }
  *((_BYTE *)this + 442) = *((_BYTE *)a2 + 442);
  if ((v15 & 0x400) == 0)
  {
LABEL_151:
    if ((v15 & 0x800) == 0)
      goto LABEL_152;
    goto LABEL_279;
  }
LABEL_278:
  *((_BYTE *)this + 443) = *((_BYTE *)a2 + 443);
  if ((v15 & 0x800) == 0)
  {
LABEL_152:
    if ((v15 & 0x1000) == 0)
      goto LABEL_153;
    goto LABEL_280;
  }
LABEL_279:
  *((_BYTE *)this + 444) = *((_BYTE *)a2 + 444);
  if ((v15 & 0x1000) == 0)
  {
LABEL_153:
    if ((v15 & 0x2000) == 0)
      goto LABEL_154;
    goto LABEL_281;
  }
LABEL_280:
  *((_BYTE *)this + 445) = *((_BYTE *)a2 + 445);
  if ((v15 & 0x2000) == 0)
  {
LABEL_154:
    if ((v15 & 0x4000) == 0)
      goto LABEL_155;
LABEL_282:
    *((_BYTE *)this + 447) = *((_BYTE *)a2 + 447);
    if ((v15 & 0x8000) == 0)
      goto LABEL_157;
    goto LABEL_156;
  }
LABEL_281:
  *((_BYTE *)this + 446) = *((_BYTE *)a2 + 446);
  if ((v15 & 0x4000) != 0)
    goto LABEL_282;
LABEL_155:
  if ((v15 & 0x8000) != 0)
LABEL_156:
    *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
LABEL_157:
  *((_DWORD *)this + 7) |= v15;
LABEL_158:
  if ((v15 & 0xFF0000) == 0)
    goto LABEL_169;
  if ((v15 & 0x10000) != 0)
  {
    *((_BYTE *)this + 452) = *((_BYTE *)a2 + 452);
    if ((v15 & 0x20000) == 0)
    {
LABEL_161:
      if ((v15 & 0x40000) == 0)
        goto LABEL_162;
      goto LABEL_286;
    }
  }
  else if ((v15 & 0x20000) == 0)
  {
    goto LABEL_161;
  }
  *((_BYTE *)this + 453) = *((_BYTE *)a2 + 453);
  if ((v15 & 0x40000) == 0)
  {
LABEL_162:
    if ((v15 & 0x80000) == 0)
      goto LABEL_163;
    goto LABEL_287;
  }
LABEL_286:
  *((_BYTE *)this + 454) = *((_BYTE *)a2 + 454);
  if ((v15 & 0x80000) == 0)
  {
LABEL_163:
    if ((v15 & 0x100000) == 0)
      goto LABEL_164;
    goto LABEL_288;
  }
LABEL_287:
  *((_BYTE *)this + 455) = *((_BYTE *)a2 + 455);
  if ((v15 & 0x100000) == 0)
  {
LABEL_164:
    if ((v15 & 0x200000) == 0)
      goto LABEL_165;
    goto LABEL_289;
  }
LABEL_288:
  *((_DWORD *)this + 114) = *((_DWORD *)a2 + 114);
  if ((v15 & 0x200000) == 0)
  {
LABEL_165:
    if ((v15 & 0x400000) == 0)
      goto LABEL_166;
LABEL_290:
    *((_QWORD *)this + 58) = *((_QWORD *)a2 + 58);
    if ((v15 & 0x800000) == 0)
      goto LABEL_168;
    goto LABEL_167;
  }
LABEL_289:
  *((_DWORD *)this + 115) = *((_DWORD *)a2 + 115);
  if ((v15 & 0x400000) != 0)
    goto LABEL_290;
LABEL_166:
  if ((v15 & 0x800000) != 0)
LABEL_167:
    *((_QWORD *)this + 59) = *((_QWORD *)a2 + 59);
LABEL_168:
  *((_DWORD *)this + 7) |= v15;
LABEL_169:
  if (!HIBYTE(v15))
    goto LABEL_179;
  if ((v15 & 0x1000000) != 0)
  {
    *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_172:
      if ((v15 & 0x4000000) == 0)
        goto LABEL_173;
      goto LABEL_332;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_172;
  }
  *((_QWORD *)this + 61) = *((_QWORD *)a2 + 61);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_173:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_174;
    goto LABEL_333;
  }
LABEL_332:
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_174:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_175;
    goto LABEL_334;
  }
LABEL_333:
  *((_BYTE *)this + 500) = *((_BYTE *)a2 + 500);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_175:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_176;
    goto LABEL_335;
  }
LABEL_334:
  *((_BYTE *)this + 501) = *((_BYTE *)a2 + 501);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_176:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_177;
LABEL_336:
    *((_BYTE *)this + 503) = *((_BYTE *)a2 + 503);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_178;
LABEL_337:
    *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
    goto LABEL_178;
  }
LABEL_335:
  *((_BYTE *)this + 502) = *((_BYTE *)a2 + 502);
  if ((v15 & 0x40000000) != 0)
    goto LABEL_336;
LABEL_177:
  if ((v15 & 0x80000000) != 0)
    goto LABEL_337;
LABEL_178:
  *((_DWORD *)this + 7) |= v15;
LABEL_179:
  v16 = *((_DWORD *)a2 + 8);
  if (!(_BYTE)v16)
    goto LABEL_190;
  if ((v16 & 1) != 0)
  {
    *((_DWORD *)this + 128) = *((_DWORD *)a2 + 128);
    if ((v16 & 2) == 0)
    {
LABEL_182:
      if ((v16 & 4) == 0)
        goto LABEL_183;
      goto LABEL_294;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_182;
  }
  *((_DWORD *)this + 129) = *((_DWORD *)a2 + 129);
  if ((v16 & 4) == 0)
  {
LABEL_183:
    if ((v16 & 8) == 0)
      goto LABEL_184;
    goto LABEL_295;
  }
LABEL_294:
  *((_QWORD *)this + 65) = *((_QWORD *)a2 + 65);
  if ((v16 & 8) == 0)
  {
LABEL_184:
    if ((v16 & 0x10) == 0)
      goto LABEL_185;
    goto LABEL_296;
  }
LABEL_295:
  *((_QWORD *)this + 66) = *((_QWORD *)a2 + 66);
  if ((v16 & 0x10) == 0)
  {
LABEL_185:
    if ((v16 & 0x20) == 0)
      goto LABEL_186;
    goto LABEL_297;
  }
LABEL_296:
  *((_DWORD *)this + 134) = *((_DWORD *)a2 + 134);
  if ((v16 & 0x20) == 0)
  {
LABEL_186:
    if ((v16 & 0x40) == 0)
      goto LABEL_187;
LABEL_298:
    *((_BYTE *)this + 544) = *((_BYTE *)a2 + 544);
    if ((v16 & 0x80) == 0)
      goto LABEL_189;
    goto LABEL_188;
  }
LABEL_297:
  *((_DWORD *)this + 135) = *((_DWORD *)a2 + 135);
  if ((v16 & 0x40) != 0)
    goto LABEL_298;
LABEL_187:
  if ((v16 & 0x80) != 0)
LABEL_188:
    *((_BYTE *)this + 545) = *((_BYTE *)a2 + 545);
LABEL_189:
  *((_DWORD *)this + 8) |= v16;
LABEL_190:
  if ((v16 & 0x3F00) == 0)
    return;
  if ((v16 & 0x100) != 0)
  {
    *((_BYTE *)this + 546) = *((_BYTE *)a2 + 546);
    if ((v16 & 0x200) == 0)
    {
LABEL_193:
      if ((v16 & 0x400) == 0)
        goto LABEL_194;
      goto LABEL_302;
    }
  }
  else if ((v16 & 0x200) == 0)
  {
    goto LABEL_193;
  }
  *((_DWORD *)this + 137) = *((_DWORD *)a2 + 137);
  if ((v16 & 0x400) == 0)
  {
LABEL_194:
    if ((v16 & 0x800) == 0)
      goto LABEL_195;
    goto LABEL_303;
  }
LABEL_302:
  *((_QWORD *)this + 69) = *((_QWORD *)a2 + 69);
  if ((v16 & 0x800) == 0)
  {
LABEL_195:
    if ((v16 & 0x1000) == 0)
      goto LABEL_196;
LABEL_304:
    *((_DWORD *)this + 141) = *((_DWORD *)a2 + 141);
    if ((v16 & 0x2000) == 0)
      goto LABEL_198;
    goto LABEL_197;
  }
LABEL_303:
  *((_DWORD *)this + 140) = *((_DWORD *)a2 + 140);
  if ((v16 & 0x1000) != 0)
    goto LABEL_304;
LABEL_196:
  if ((v16 & 0x2000) != 0)
LABEL_197:
    *((_QWORD *)this + 71) = *((_QWORD *)a2 + 71);
LABEL_198:
  *((_DWORD *)this + 8) |= v16;
}

void operations_research::sat::SatParameters::CopyFrom(operations_research::sat::SatParameters *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    operations_research::sat::SatParameters::Clear(this);
    if (*(void (***)(operations_research::sat::SatParameters *__hidden))a2 == &off_24F9878E8)
      operations_research::sat::SatParameters::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
}

void operations_research::sat::SatParameters::CopyFrom(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  if (a2 != this)
  {
    operations_research::sat::SatParameters::Clear(this);
    operations_research::sat::SatParameters::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::SatParameters::IsInitialized(operations_research::sat::SatParameters *this)
{
  return 1;
}

uint64_t operations_research::sat::SatParameters::GetMetadata(operations_research::sat::SatParameters *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0);
  return *off_25407A240;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x240uLL);
    *(_QWORD *)AlignedNoHook = &off_24F9878E8;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_OWORD *)(AlignedNoHook + 16) = 0u;
    *(_OWORD *)(AlignedNoHook + 32) = 0u;
    *(_QWORD *)(AlignedNoHook + 48) = this;
    operations_research::sat::SatParameters::SharedCtor((operations_research::sat::SatParameters *)AlignedNoHook);
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)AlignedNoHook = &off_24F9878E8;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_OWORD *)(AlignedNoHook + 16) = 0u;
    *(_OWORD *)(AlignedNoHook + 32) = 0u;
    *(_QWORD *)(AlignedNoHook + 48) = 0;
    operations_research::sat::SatParameters::SharedCtor((operations_research::sat::SatParameters *)AlignedNoHook);
  }
  return AlignedNoHook;
}

void sub_22DBEF938(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  MEMORY[0x22E31DF78](v1, 0x10A1C4095D8551FLL);
  _Unwind_Resume(a1);
}

void sub_22DBEF964(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::SatParameters::New(operations_research::sat::SatParameters *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(0);
}

unint64_t operations_research::sat::SatParameters::New(operations_research::sat::SatParameters *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(a2);
}

uint64_t operations_research::sat::SatParameters::GetCachedSize(operations_research::sat::SatParameters *this)
{
  return *((unsigned int *)this + 9);
}

char *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(google::protobuf::internal::EpsCopyInputStream *this, google::protobuf::internal *a2, unsigned int **a3)
{
  int v6;
  const char *v7;
  char *SizeFallback;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  char v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  int v24;

  v6 = *(char *)a2;
  v7 = (const char *)*(unsigned __int8 *)a2;
  if (v6 < 0)
  {
    SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(a2, v7);
    if (!SizeFallback)
      return SizeFallback;
  }
  else
  {
    SizeFallback = (char *)a2 + 1;
  }
  v9 = *((_QWORD *)this + 1);
  v10 = (_DWORD)v7 + (_DWORD)SizeFallback - v9;
  v11 = v9 + (v10 & (v10 >> 31));
  *(_QWORD *)this = v11;
  v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v10;
  v13 = v12 - v10;
  if (v12 - v10 < 0)
    return 0;
LABEL_8:
  if ((unint64_t)SizeFallback < v11)
    goto LABEL_11;
LABEL_9:
  if (&SizeFallback[-*((_QWORD *)this + 1)] != (char *)*((int *)this + 7))
  {
    SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, SizeFallback, -1);
    if ((v15 & 1) == 0)
    {
      while (1)
      {
LABEL_11:
        v16 = *SizeFallback;
        if (*SizeFallback < 0)
        {
          v19 = v16 + (SizeFallback[1] << 7);
          v16 = (v19 - 128);
          if (SizeFallback[1] < 0)
          {
            SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)SizeFallback, (const char *)(v19 - 128));
            if (!SizeFallback)
              return SizeFallback;
            v16 = v23;
            if (((unsigned int (*)(uint64_t))a3[1])(v23))
            {
LABEL_13:
              v17 = *a3;
              v18 = **a3;
              if ((_DWORD)v18 == (*a3)[1])
                google::protobuf::RepeatedField<int>::Reserve(*a3, v18 + 1);
              *(_DWORD *)(*((_QWORD *)v17 + 1) + 4 * v18) = v16;
              *v17 = v18 + 1;
              v11 = *(_QWORD *)this;
              goto LABEL_8;
            }
          }
          else
          {
            SizeFallback += 2;
            if (((unsigned int (*)(_QWORD))a3[1])((v19 - 128)))
              goto LABEL_13;
          }
        }
        else
        {
          ++SizeFallback;
          if (((unsigned int (*)(uint64_t))a3[1])(v16))
            goto LABEL_13;
        }
        v20 = *((_DWORD *)a3 + 6);
        v21 = (uint64_t *)a3[2];
        if ((*v21 & 1) != 0)
          v22 = (google::protobuf::UnknownFieldSet *)((*v21 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v21);
        google::protobuf::UnknownFieldSet::AddVarint(v22, v20, v16);
        if ((unint64_t)SizeFallback >= *(_QWORD *)this)
          goto LABEL_9;
      }
    }
  }
  if (!*((_DWORD *)this + 20))
  {
    v24 = *((_DWORD *)this + 7) + v13;
    *((_DWORD *)this + 7) = v24;
    *(_QWORD *)this = *((_QWORD *)this + 1) + (v24 & (v24 >> 31));
    return SizeFallback;
  }
  return 0;
}

void _GLOBAL__sub_I_sat_parameters_pb_cc()
{
  google::protobuf::internal::AddDescriptors((std::string::size_type)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
}

operations_research::sat::SatSolver *operations_research::sat::SatSolver::SatSolver(operations_research::sat::SatSolver *this, operations_research::sat::Model *a2)
{
  operations_research::sat::PbConstraints *v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  *((_QWORD *)this + 4) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PbConstraints>((uint64_t)a2);
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 5) = v4;
  *((_QWORD *)this + 17) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_BYTE *)this + 128) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 26) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((_QWORD *)this + 27) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((_QWORD *)this + 28) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_QWORD *)this + 29) = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)a2);
  *((_QWORD *)this + 30) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)a2);
  *((_DWORD *)this + 62) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = (char *)this + 248;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 72) = -1;
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 457) = 0u;
  *((_QWORD *)this + 63) = 0x3FF0000000000000;
  *((_DWORD *)this + 128) = 0;
  *((_DWORD *)this + 130) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 69) = (char *)this + 520;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 140) = -1;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_DWORD *)this + 150) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 79) = (char *)this + 600;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_DWORD *)this + 160) = -1;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_DWORD *)this + 170) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 89) = (char *)this + 680;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_DWORD *)this + 180) = -1;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 110) = 0;
  *(_OWORD *)((char *)this + 844) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 111) = (char *)this + 856;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_DWORD *)this + 224) = -1;
  *(_OWORD *)((char *)this + 1017) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_QWORD *)this + 130) = *((_QWORD *)this + 26);
  *((_QWORD *)this + 136) = 0;
  *((_QWORD *)this + 135) = 0;
  *((_QWORD *)this + 137) = 0;
  *((_QWORD *)this + 132) = 0;
  *((_QWORD *)this + 131) = 0;
  *((_DWORD *)this + 268) = 0;
  *((_QWORD *)this + 133) = 0;
  *((_QWORD *)this + 138) = (char *)this + 1072;
  *((_QWORD *)this + 140) = 0;
  *((_QWORD *)this + 139) = 0;
  *((_DWORD *)this + 278) = -1;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *((_BYTE *)this + 1176) = 1;
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 154) = 0;
  *((_QWORD *)this + 156) = 0;
  *(_OWORD *)((char *)this + 1212) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_QWORD *)this + 157) = (char *)this + 1224;
  *((_QWORD *)this + 159) = 0;
  *((_QWORD *)this + 158) = 0;
  *((_DWORD *)this + 316) = -1;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_BYTE *)this + 1312) = 1;
  *((_QWORD *)this + 165) = 0;
  strcpy((char *)this + 1328, "SatSolver");
  *((_BYTE *)this + 1351) = 9;
  *((_DWORD *)this + 338) = 0;
  *((_QWORD *)this + 171) = 0;
  *((_QWORD *)this + 170) = 0;
  *((_QWORD *)this + 172) = 0;
  *((_QWORD *)this + 175) = 0;
  *((_QWORD *)this + 174) = 0;
  *((_QWORD *)this + 173) = (char *)this + 1392;
  operations_research::sat::SatSolver::InitializePropagators(this);
  return this;
}

void sub_22DBEFE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, operations_research::sat::MutableUpperBoundedLinearConstraint *a9, void **a10, operations_research::sat::BinaryClauseManager *a11, uint64_t *a12)
{
  operations_research::sat::MutableUpperBoundedLinearConstraint *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  operations_research::sat::VariableWithSameReasonIdentifier *v20;
  operations_research::StatsGroup *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  operations_research::sat::MutableUpperBoundedLinearConstraint *v36;

  v36 = v12;
  operations_research::StatsGroup::~StatsGroup(v21);
  operations_research::sat::MutableUpperBoundedLinearConstraint::~MutableUpperBoundedLinearConstraint(v36);
  v23 = (void *)v13[144];
  if (v23)
  {
    v13[145] = v23;
    operator delete(v23);
    operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(v20);
    v24 = (void *)v13[126];
    if (!v24)
    {
LABEL_3:
      v25 = (void *)v13[123];
      if (!v25)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else
  {
    operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(v20);
    v24 = (void *)v13[126];
    if (!v24)
      goto LABEL_3;
  }
  v13[127] = v24;
  operator delete(v24);
  v25 = (void *)v13[123];
  if (!v25)
  {
LABEL_4:
    v26 = (void *)v13[120];
    if (!v26)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  v13[124] = v25;
  operator delete(v25);
  v26 = (void *)v13[120];
  if (!v26)
  {
LABEL_5:
    v27 = (void *)v13[117];
    if (!v27)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  v13[121] = v26;
  operator delete(v26);
  v27 = (void *)v13[117];
  if (!v27)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v19);
    v28 = (void *)v13[104];
    if (!v28)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  v13[118] = v27;
  operator delete(v27);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v19);
  v28 = (void *)v13[104];
  if (!v28)
  {
LABEL_7:
    v29 = (void *)v13[101];
    if (!v29)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  v13[105] = v28;
  operator delete(v28);
  v29 = (void *)v13[101];
  if (!v29)
  {
LABEL_8:
    v30 = (void *)v13[98];
    if (!v30)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  v13[102] = v29;
  operator delete(v29);
  v30 = (void *)v13[98];
  if (!v30)
  {
LABEL_9:
    v31 = (void *)v13[95];
    if (!v31)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_22:
  v13[99] = v30;
  operator delete(v30);
  v31 = (void *)v13[95];
  if (!v31)
  {
LABEL_11:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v17);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v16);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v15);
    v32 = *v18;
    if (*v18)
    {
      v13[40] = v32;
      operator delete(v32);
    }
    v33 = *a10;
    if (*a10)
    {
      v13[33] = v33;
      operator delete(v33);
    }
    operations_research::sat::BinaryClauseManager::~BinaryClauseManager(a11);
    std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100]((_QWORD *)(v14 + 56));
    v34 = (void *)v13[9];
    if (v34)
    {
      v13[10] = v34;
      operator delete(v34);
      v35 = *(void **)v14;
      if (!*(_QWORD *)v14)
      {
LABEL_26:
        std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100](a12);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      v35 = *(void **)v14;
      if (!*(_QWORD *)v14)
        goto LABEL_26;
    }
    v13[7] = v35;
    operator delete(v35);
    std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100](a12);
    _Unwind_Resume(a1);
  }
LABEL_10:
  v13[96] = v31;
  operator delete(v31);
  goto LABEL_11;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SatSolver>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DBF0174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::SatSolver::~SatSolver(operations_research::sat::SatSolver *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;

  operations_research::StatsGroup::~StatsGroup((operations_research::sat::SatSolver *)((char *)this + 1328));
  v2 = (void *)*((_QWORD *)this + 160);
  if (v2)
  {
    *((_QWORD *)this + 161) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 154);
  if (v3)
  {
    *((_QWORD *)this + 155) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 148);
  if (v4)
  {
    *((_QWORD *)this + 149) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 144);
  if (v5)
  {
    *((_QWORD *)this + 145) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 141);
  if (v6)
  {
    *((_QWORD *)this + 142) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 135);
  if (v7)
  {
    *((_QWORD *)this + 136) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 131);
  if (v8)
  {
    *((_QWORD *)this + 132) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 126);
  if (v9)
  {
    *((_QWORD *)this + 127) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 123);
  if (v10)
  {
    *((_QWORD *)this + 124) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 120);
  if (v11)
  {
    *((_QWORD *)this + 121) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 117);
  if (v12)
  {
    *((_QWORD *)this + 118) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 114);
  if (v13)
  {
    *((_QWORD *)this + 115) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 108);
  if (v14)
  {
    *((_QWORD *)this + 109) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 104);
  if (v15)
  {
    *((_QWORD *)this + 105) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 101);
  if (v16)
  {
    *((_QWORD *)this + 102) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 98);
  if (v17)
  {
    *((_QWORD *)this + 99) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 95);
  if (v18)
  {
    *((_QWORD *)this + 96) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 92);
  if (v19)
  {
    *((_QWORD *)this + 93) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 86);
  if (v20)
  {
    *((_QWORD *)this + 87) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 82);
  if (v21)
  {
    *((_QWORD *)this + 83) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 76);
  if (v22)
  {
    *((_QWORD *)this + 77) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 72);
  if (v23)
  {
    *((_QWORD *)this + 73) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 66);
  if (v24)
  {
    *((_QWORD *)this + 67) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 39);
  if (v25)
  {
    *((_QWORD *)this + 40) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 32);
  if (v26)
  {
    *((_QWORD *)this + 33) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 23);
  if (v27)
  {
    *((_QWORD *)this + 24) = v27;
    operator delete(v27);
  }
  if (*((_QWORD *)this + 20))
  {
    operator delete(*((void **)this + 17));
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 17) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 20) = 0;
  }
  v28 = (_QWORD *)*((_QWORD *)this + 21);
  if (v28)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
  v29 = (_QWORD *)*((_QWORD *)this + 13);
  if (v29)
  {
    v30 = (_QWORD *)*((_QWORD *)this + 14);
    v31 = (void *)*((_QWORD *)this + 13);
    if (v30 != v29)
    {
      do
      {
        v33 = *--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      while (v30 != v29);
      v31 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v29;
    operator delete(v31);
  }
  v34 = (void *)*((_QWORD *)this + 9);
  if (v34)
  {
    *((_QWORD *)this + 10) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 6);
  if (v35)
  {
    *((_QWORD *)this + 7) = v35;
    operator delete(v35);
  }
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1);
}

operations_research::sat::SatSolver *operations_research::sat::SatSolver::SatSolver(operations_research::sat::SatSolver *this)
{
  operations_research::sat::Model *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (operations_research::sat::Model *)operator new();
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = (char *)v2 + 32;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 8) = 0;
  operations_research::sat::SatSolver::SatSolver(this, v2);
  v3 = *(uint64_t **)this;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 48);
    if (v5)
    {
      v6 = *(_QWORD **)(v4 + 56);
      v7 = *(void **)(v4 + 48);
      if (v6 != v5)
      {
        do
        {
          v9 = *--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        }
        while (v6 != v5);
        v7 = *(void **)(v4 + 48);
      }
      *(_QWORD *)(v4 + 56) = v5;
      operator delete(v7);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v4 + 24, *(_QWORD **)(v4 + 32));
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E31DF78](v4, 0x1032C402B90307BLL);
    v3 = *(uint64_t **)this;
  }
  operations_research::sat::Model::Register<operations_research::sat::SatSolver>(v3, (uint64_t *)this);
  return this;
}

void sub_22DBF04F4(_Unwind_Exception *a1)
{
  operations_research::sat::SatSolver *v1;

  operations_research::sat::SatSolver::~SatSolver(v1);
  _Unwind_Resume(a1);
}

operations_research::sat::PbConstraints *operations_research::sat::Model::GetOrCreate<operations_research::sat::PbConstraints>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::PbConstraints *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d)
    return (operations_research::sat::PbConstraints *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::PbConstraints *)operator new();
  operations_research::sat::PbConstraints::PbConstraints(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9879B0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DBF0698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C408FEC3A86);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::InitializePropagators(operations_research::sat::SatSolver *this)
{
  char **v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  v2 = (char **)((char *)this + 48);
  v3 = (char *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 7) = v3;
  v4 = *((_QWORD *)this + 3);
  if (*(_OWORD *)(v4 + 216) != __PAIR128__(*(_QWORD *)(v4 + 232), 0))
  {
    v5 = *((_QWORD *)this + 8);
    if ((unint64_t)v3 >= v5)
    {
      v7 = v5 - (_QWORD)v3;
      v8 = v7 >> 2;
      if ((unint64_t)(v7 >> 2) <= 1)
        v8 = 1;
      v9 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8;
      v10 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v9)
        v10 = v8;
      if (v10 >> 61)
        goto LABEL_122;
      v11 = v10;
      v12 = operator new(8 * v10);
      v13 = &v12[v11];
      *v12 = v4;
      v6 = (char *)(v12 + 1);
      *((_QWORD *)this + 6) = v12;
      *((_QWORD *)this + 7) = v12 + 1;
      *((_QWORD *)this + 8) = v13;
      if (v3)
        operator delete(v3);
    }
    else
    {
      *(_QWORD *)v3 = v4;
      v6 = v3 + 8;
    }
    *((_QWORD *)this + 7) = v6;
    v3 = v6;
  }
  v14 = *((_QWORD *)this + 4);
  v15 = *((_QWORD *)this + 8);
  if ((unint64_t)v3 < v15)
  {
    *(_QWORD *)v3 = v14;
    v16 = v3 + 8;
    goto LABEL_36;
  }
  v17 = *v2;
  v18 = v3 - *v2;
  v19 = v18 >> 3;
  v20 = (v18 >> 3) + 1;
  if (v20 >> 61)
    goto LABEL_121;
  v21 = v15 - (_QWORD)v17;
  if (v21 >> 2 > v20)
    v20 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
  {
    if (v22 >> 61)
      goto LABEL_122;
    v23 = operator new(8 * v22);
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = v14;
    v16 = (char *)(v24 + 1);
    v26 = (char *)(v3 - v17);
    if (v3 == v17)
      goto LABEL_34;
  }
  else
  {
    v23 = 0;
    v24 = (_QWORD *)(8 * v19);
    v25 = 0;
    *(_QWORD *)(8 * v19) = v14;
    v16 = (char *)(8 * v19 + 8);
    v26 = (char *)(v3 - v17);
    if (v3 == v17)
      goto LABEL_34;
  }
  v27 = (unint64_t)(v26 - 8);
  if (v27 >= 0x58)
  {
    if ((unint64_t)(v3 - v23 - v18) >= 0x20)
    {
      v29 = (v27 >> 3) + 1;
      v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v3[-v30];
      v24 = (_QWORD *)((char *)v24 - v30);
      v31 = &v23[8 * v19 - 16];
      v32 = (__int128 *)(v3 - 16);
      v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *v32;
        *(v31 - 1) = *(v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
    }
    else
    {
      v28 = v3;
    }
  }
  else
  {
    v28 = v3;
  }
  do
  {
    v35 = *((_QWORD *)v28 - 1);
    v28 -= 8;
    *--v24 = v35;
  }
  while (v28 != v17);
LABEL_33:
  v3 = *v2;
LABEL_34:
  *((_QWORD *)this + 6) = v24;
  *((_QWORD *)this + 7) = v16;
  *((_QWORD *)this + 8) = v25;
  if (v3)
    operator delete(v3);
LABEL_36:
  *((_QWORD *)this + 7) = v16;
  v36 = *((_QWORD *)this + 5);
  if ((int)((*(_QWORD *)(v36 + 48) - *(_QWORD *)(v36 + 40)) >> 3) < 1)
    goto LABEL_61;
  v37 = *((_QWORD *)this + 8);
  if ((unint64_t)v16 >= v37)
  {
    v39 = *v2;
    v40 = v16 - *v2;
    v41 = v40 >> 3;
    v42 = (v40 >> 3) + 1;
    if (v42 >> 61)
      goto LABEL_121;
    v43 = v37 - (_QWORD)v39;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        goto LABEL_122;
      v45 = operator new(8 * v44);
      v46 = &v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = v36;
      v38 = (uint64_t)(v46 + 1);
      v48 = (char *)(v16 - v39);
      if (v16 != v39)
      {
LABEL_48:
        v49 = (unint64_t)(v48 - 8);
        if (v49 >= 0x58)
        {
          if ((unint64_t)(v16 - v45 - v40) >= 0x20)
          {
            v51 = (v49 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v50 = &v16[-v52];
            v46 = (_QWORD *)((char *)v46 - v52);
            v53 = &v45[8 * v41 - 16];
            v54 = v16 - 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_58:
              v16 = (char *)*((_QWORD *)this + 6);
              *((_QWORD *)this + 6) = v46;
              *((_QWORD *)this + 7) = v38;
              *((_QWORD *)this + 8) = v47;
              if (!v16)
                goto LABEL_60;
LABEL_59:
              operator delete(v16);
              goto LABEL_60;
            }
          }
          else
          {
            v50 = v16;
          }
        }
        else
        {
          v50 = v16;
        }
        do
        {
          v57 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v46 = v57;
        }
        while (v50 != v39);
        goto LABEL_58;
      }
    }
    else
    {
      v45 = 0;
      v46 = (_QWORD *)(8 * v41);
      v47 = 0;
      *(_QWORD *)(8 * v41) = v36;
      v38 = 8 * v41 + 8;
      v48 = (char *)(v16 - v39);
      if (v16 != v39)
        goto LABEL_48;
    }
    *((_QWORD *)this + 6) = v46;
    *((_QWORD *)this + 7) = v38;
    *((_QWORD *)this + 8) = v47;
    goto LABEL_59;
  }
  *(_QWORD *)v16 = v36;
  v38 = (uint64_t)(v16 + 8);
LABEL_60:
  *((_QWORD *)this + 7) = v38;
  v16 = (char *)v38;
LABEL_61:
  v58 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v58)
  {
    v59 = 0;
    while (1)
    {
      v61 = *((_QWORD *)this + 8);
      if ((unint64_t)v16 >= v61)
        break;
      *(_QWORD *)v16 = *(_QWORD *)(v58 + 8 * v59);
      v60 = v16 + 8;
LABEL_64:
      *((_QWORD *)this + 7) = v60;
      ++v59;
      v58 = *((_QWORD *)this + 9);
      v16 = v60;
      if (v59 >= (*((_QWORD *)this + 10) - v58) >> 3)
        goto LABEL_95;
    }
    v62 = *v2;
    v63 = v16 - *v2;
    v64 = v63 >> 3;
    v65 = (v63 >> 3) + 1;
    if (v65 >> 61)
      goto LABEL_121;
    v66 = v61 - (_QWORD)v62;
    if (v66 >> 2 > v65)
      v65 = v66 >> 2;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 61)
        goto LABEL_122;
      v68 = operator new(8 * v67);
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[8 * v64];
    v70 = &v68[8 * v67];
    *v69 = *(_QWORD *)(v58 + 8 * v59);
    v60 = (char *)(v69 + 1);
    if (v16 == v62)
    {
      *((_QWORD *)this + 6) = v69;
      *((_QWORD *)this + 7) = v60;
      *((_QWORD *)this + 8) = v70;
LABEL_83:
      operator delete(v16);
      goto LABEL_64;
    }
    v71 = v16 - 8 - v62;
    if (v71 >= 0x168)
    {
      if (&v68[v63 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v68[v63 - 8])
      {
        v72 = v16;
      }
      else if (&v16[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
      {
        v72 = v16;
      }
      else if ((unint64_t)(v16 - v68 - v63) >= 0x20)
      {
        v74 = (v71 >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &v16[-v75];
        v69 = (_QWORD *)((char *)v69 - v75);
        v76 = &v68[8 * v64 - 16];
        v77 = v16 - 16;
        v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_80:
          v16 = (char *)*((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v69;
          *((_QWORD *)this + 7) = v60;
          *((_QWORD *)this + 8) = v70;
          if (!v16)
            goto LABEL_64;
          goto LABEL_83;
        }
      }
      else
      {
        v72 = v16;
      }
    }
    else
    {
      v72 = v16;
    }
    do
    {
      v73 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *--v69 = v73;
    }
    while (v72 != v62);
    goto LABEL_80;
  }
  v60 = v16;
LABEL_95:
  v80 = *((_QWORD *)this + 12);
  if (v80)
  {
    v81 = *((_QWORD *)this + 8);
    if ((unint64_t)v60 < v81)
    {
      *(_QWORD *)v60 = v80;
      v82 = (uint64_t)(v60 + 8);
LABEL_119:
      *((_QWORD *)this + 7) = v82;
      return;
    }
    v83 = *v2;
    v84 = v60 - *v2;
    v85 = v84 >> 3;
    v86 = (v84 >> 3) + 1;
    if (!(v86 >> 61))
    {
      v87 = v81 - (_QWORD)v83;
      if (v87 >> 2 > v86)
        v86 = v87 >> 2;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (!v88)
      {
        v89 = 0;
        v90 = (_QWORD *)(8 * v85);
        v91 = 0;
        *(_QWORD *)(8 * v85) = v80;
        v82 = 8 * v85 + 8;
        v92 = (char *)(v60 - v83);
        if (v60 != v83)
        {
LABEL_107:
          v93 = (unint64_t)(v92 - 8);
          if (v93 >= 0x58)
          {
            if ((unint64_t)(v60 - &v89[v84]) >= 0x20)
            {
              v95 = (v93 >> 3) + 1;
              v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
              v94 = &v60[-v96];
              v90 = (_QWORD *)((char *)v90 - v96);
              v97 = &v89[8 * v85 - 16];
              v98 = v60 - 16;
              v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v100 = *(_OWORD *)v98;
                *(v97 - 1) = *((_OWORD *)v98 - 1);
                *v97 = v100;
                v97 -= 2;
                v98 -= 32;
                v99 -= 4;
              }
              while (v99);
              if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_117:
                v60 = (char *)*((_QWORD *)this + 6);
                *((_QWORD *)this + 6) = v90;
                *((_QWORD *)this + 7) = v82;
                *((_QWORD *)this + 8) = v91;
                if (!v60)
                  goto LABEL_119;
LABEL_118:
                operator delete(v60);
                goto LABEL_119;
              }
            }
            else
            {
              v94 = v60;
            }
          }
          else
          {
            v94 = v60;
          }
          do
          {
            v101 = *((_QWORD *)v94 - 1);
            v94 -= 8;
            *--v90 = v101;
          }
          while (v94 != v83);
          goto LABEL_117;
        }
LABEL_110:
        *((_QWORD *)this + 6) = v90;
        *((_QWORD *)this + 7) = v82;
        *((_QWORD *)this + 8) = v91;
        goto LABEL_118;
      }
      if (!(v88 >> 61))
      {
        v89 = operator new(8 * v88);
        v90 = &v89[8 * v85];
        v91 = &v89[8 * v88];
        *v90 = v80;
        v82 = (uint64_t)(v90 + 1);
        v92 = (char *)(v60 - v83);
        if (v60 != v83)
          goto LABEL_107;
        goto LABEL_110;
      }
LABEL_122:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_121:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::~MutableUpperBoundedLinearConstraint(operations_research::sat::MutableUpperBoundedLinearConstraint *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(operations_research::sat::VariableWithSameReasonIdentifier *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void operations_research::sat::BinaryClauseManager::~BinaryClauseManager(operations_research::sat::BinaryClauseManager *this)
{
  void *v2;
  _QWORD *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((_QWORD *)this + 3))
  {
    operator delete(*(void **)this);
    *((_QWORD *)this + 5) = 0;
    *(_QWORD *)this = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
}

void operations_research::sat::SatSolver::SetNumVariables(operations_research::sat::SatSolver *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8[2];
  uint64_t *v9;

  LODWORD(v8[0]) = a2;
  if (*((_DWORD *)this + 4) > a2)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<int,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)v8, (int)this + 16, "num_variables >= num_variables_");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 66, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
    }
  }
  *((_DWORD *)this + 4) = a2;
  operations_research::sat::BinaryImplicationGraph::Resize(*((operations_research::sat::BinaryImplicationGraph **)this + 3), a2);
  operations_research::sat::LiteralWatchers::Resize(*((std::vector<int> **)this + 4), a2);
  operations_research::sat::Trail::Resize(*((operations_research::sat::Trail **)this + 26), a2);
  operations_research::sat::SatDecisionPolicy::IncreaseNumVariables(*((operations_research::sat::SatDecisionPolicy **)this + 30), a2);
  operations_research::sat::PbConstraints::Resize(*((operations_research::sat::PbConstraints **)this + 5), a2);
  v4 = *((_QWORD *)this + 131);
  v5 = (*((_QWORD *)this + 132) - v4) >> 2;
  if (a2 <= v5)
  {
    if (a2 < v5)
      *((_QWORD *)this + 132) = v4 + 4 * a2;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 1048), a2 - v5);
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 1072, a2);
  v6 = *((_QWORD *)this + 39);
  v7 = (*((_QWORD *)this + 40) - v6) >> 3;
  if (a2 + 1 <= v7)
  {
    if (a2 + 1 < v7)
      *((_QWORD *)this + 40) = v6 + 8 * (a2 + 1);
  }
  else
  {
    std::vector<operations_research::sat::SatSolver::Decision>::__append((uint64_t *)this + 39, a2 + 1 - v7);
  }
}

void sub_22DBF0F78(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PbConstraints::Resize(operations_research::sat::PbConstraints *this, int a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;

  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 6))
  {
    v4 = 2 * a2;
    v7 = *((_QWORD *)this + 11);
    v6 = *((_QWORD *)this + 12);
    v5 = (char *)this + 88;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    if (v4 <= v8)
    {
      if (v4 < v8)
      {
        v9 = v7 + 24 * (int)v4;
        if (v6 != v9)
        {
          v10 = v6;
          do
          {
            v12 = *(void **)(v10 - 24);
            v10 -= 24;
            v11 = v12;
            if (v12)
            {
              *(_QWORD *)(v6 - 16) = v11;
              operator delete(v11);
            }
            v6 = v10;
          }
          while (v10 != v9);
        }
        *((_QWORD *)this + 12) = v9;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v5, v4 - v8);
    }
    v13 = *((_QWORD *)this + 34);
    v14 = (*((_QWORD *)this + 35) - v13) >> 4;
    if (a2 <= v14)
    {
      if (a2 < v14)
        *((_QWORD *)this + 35) = v13 + 16 * a2;
    }
    else
    {
      std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 34, a2 - v14);
    }
  }
}

uint64_t operations_research::sat::SatSolver::num_branches(operations_research::sat::SatSolver *this)
{
  return *((_QWORD *)this + 46);
}

uint64_t operations_research::sat::SatSolver::num_failures(operations_research::sat::SatSolver *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t operations_research::sat::SatSolver::num_propagations(operations_research::sat::SatSolver *this)
{
  return **((_QWORD **)this + 26) + *(int *)(*((_QWORD *)this + 26) + 12) - *((_QWORD *)this + 46);
}

double operations_research::sat::SatSolver::deterministic_time(operations_research::sat::SatSolver *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)*((_QWORD *)this + 5);
  return ((double)*(uint64_t *)(*((_QWORD *)this + 3) + 280)
        + (double)(**((_QWORD **)this + 26) + *(int *)(*((_QWORD *)this + 26) + 12)) * 8.0
        + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 192) * 4.0
        + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 200)
        + (double)v1[51] * 20.0
        + (double)v1[53] * 2.0
        + (double)v1[52])
       * 0.00000001;
}

uint64_t operations_research::sat::SatSolver::parameters(operations_research::sat::SatSolver *this)
{
  return *((_QWORD *)this + 28);
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::sat::SatSolver::SetParameters(operations_research::sat::SatParameters **this, const operations_research::sat::SatParameters *a2)
{
  absl::lts_2020_02_25 *CurrentTimeNanos;
  operations_research::sat::SatParameters *v5;
  double v6;
  uint64_t v7;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result;
  uint64_t v9;

  operations_research::sat::SatParameters::CopyFrom(this[28], a2);
  operations_research::sat::RestartPolicy::Reset(this[29]);
  v5 = this[27];
  v6 = *((double *)a2 + 35);
  v7 = *((_QWORD *)a2 + 46);
  *((_QWORD *)v5 + 14) = 0;
  *((_QWORD *)v5 + 13) = v7;
  *((_QWORD *)v5 + 16) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *((_BYTE *)v5 + 72) = 1;
    CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    *((_QWORD *)v5 + 10) = CurrentTimeNanos;
    *((double *)v5 + 12) = v6;
  }
  result = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  *(_QWORD *)v5 = result;
  *((_QWORD *)v5 + 1) = result;
  v9 = result + (uint64_t)(v6 * 1000000000.0);
  if ((double)(result ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v6)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  *((_QWORD *)v5 + 2) = v9;
  return result;
}

uint64_t operations_research::sat::SatSolver::AddClauseDuringSearch(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8[2];
  uint64_t *v9;

  if (*(_BYTE *)(a1 + 496))
    return 0;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12);
  switch(a3)
  {
    case 2uLL:
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(_QWORD *)(v6 + 216);
      if ((operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(v6, *a2, a2[1]) & 1) == 0)
      {
        LODWORD(v8[0]) = *(_DWORD *)(a1 + 304);
        LODWORD(v9) = 0;
        if (LODWORD(v8[0]))
        {
          v9 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v8, (int)&v9, "CurrentDecisionLevel() == 0");
          if (v9)
          {
            google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 141, &v9);
            google::LogMessage::stream((google::LogMessage *)v8);
LABEL_26:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
          }
        }
LABEL_18:
        result = 0;
        *(_BYTE *)(a1 + 496) = 1;
        return result;
      }
      if (!v7)
        operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
      break;
    case 1uLL:
      return operations_research::sat::SatSolver::AddUnitClause(a1, *a2);
    case 0uLL:
      goto LABEL_18;
    default:
      if ((operations_research::sat::LiteralWatchers::AddClause(*(_QWORD **)(a1 + 32), a2, a3) & 1) == 0)
      {
        LODWORD(v8[0]) = *(_DWORD *)(a1 + 304);
        LODWORD(v9) = 0;
        if (LODWORD(v8[0]))
        {
          v9 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v8, (int)&v9, "CurrentDecisionLevel() == 0");
          if (v9)
          {
            google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 150, &v9);
            google::LogMessage::stream((google::LogMessage *)v8);
            goto LABEL_26;
          }
        }
        goto LABEL_18;
      }
      break;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 208) + 12) == v5)
    return 1;
  if (*(_BYTE *)(a1 + 496))
    return 0;
  do
    result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1);
  while ((result & 1) == 0 && !*(_BYTE *)(a1 + 496));
  return result;
}

void sub_22DBF138C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF1394(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddUnitClause(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unint64_t v18[2];
  uint64_t *v19;

  LODWORD(v18[0]) = *(_DWORD *)(a1 + 304);
  LODWORD(v19) = 0;
  if (LODWORD(v18[0]))
  {
    v19 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v18, (int)&v19, "CurrentDecisionLevel() == 0");
    if (v19)
    {
      google::LogMessageFatal::LogMessageFatal(v18, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 164, &v19);
      google::LogMessage::stream((google::LogMessage *)v18);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
    }
  }
  if (*(_BYTE *)(a1 + 496))
    return 0;
  v5 = *(_QWORD *)(a1 + 208);
  v6 = (unint64_t)a2 >> 6;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6);
  v8 = a2 & 0x3F;
  if (((v7 >> (a2 & 0x3F ^ 1u)) & 1) != 0)
  {
LABEL_6:
    result = 0;
    *(_BYTE *)(a1 + 496) = 1;
    return result;
  }
  result = 1;
  v9 = 1 << v8;
  if ((v7 & (1 << v8)) == 0)
  {
    v10 = *(_QWORD *)(a1 + 1320);
    if (v10)
    {
      LODWORD(v18[0]) = a2;
      operations_research::sat::DratProofHandler::AddClause(v10, (int *)v18, 1);
      v5 = *(_QWORD *)(a1 + 208);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 72) + 4 * *(int *)(v5 + 12)) = a2;
    *(_DWORD *)(v5 + 8) = (*(_DWORD *)(v5 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
    *(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) |= v9;
    ++*(_DWORD *)(v5 + 12);
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
      return 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12);
LABEL_12:
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 56);
    if (v12 == v13)
      return 1;
    v14 = v12 + 8;
    while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 - 8) + 16))(*(_QWORD *)(v14 - 8)))
    {
      v15 = *(_QWORD *)(a1 + 208);
      v16 = *(_DWORD *)(v15 + 12);
      v17 = v16 > v11 || v14 == v13;
      v14 += 8;
      if (v17)
      {
        result = 1;
        v17 = v16 == v11;
        v11 = *(_DWORD *)(v15 + 12);
        if (v17)
          return result;
        goto LABEL_12;
      }
    }
    goto LABEL_6;
  }
  return result;
}

void sub_22DBF1570(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::FinishPropagation(operations_research::sat::SatSolver *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 496))
    return 0;
  do
    result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
  while ((result & 1) == 0 && !*((_BYTE *)this + 496));
  return result;
}

uint64_t operations_research::sat::SatSolver::Propagate(operations_research::sat::SatSolver *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  BOOL v9;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
    return 1;
  v2 = *(_DWORD *)(*((_QWORD *)this + 26) + 12);
LABEL_3:
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  if (v3 == v4)
    return 1;
  v5 = v3 + 8;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 - 8) + 16))(*(_QWORD *)(v5 - 8));
    if (!(_DWORD)result)
      return result;
    v7 = *((_QWORD *)this + 26);
    v8 = *(_DWORD *)(v7 + 12);
    v9 = v8 > v2 || v5 == v4;
    v5 += 8;
    if (v9)
    {
      v9 = v8 == v2;
      v2 = *(_DWORD *)(v7 + 12);
      if (v9)
        return 1;
      goto LABEL_3;
    }
  }
}

uint64_t operations_research::sat::SatSolver::AddBinaryClause(uint64_t a1, int a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char **v14;
  _DWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;

  v6 = *(char **)(a1 + 1152);
  *(_QWORD *)(a1 + 1160) = v6;
  v7 = *(char **)(a1 + 1168);
  if (v6 >= v7)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
    v10 = 2 * v9;
    if (2 * v9 <= 1)
      v10 = 1;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v10;
    if (v11 > 0x1555555555555555)
      goto LABEL_30;
    v12 = 12 * v11;
    v13 = (char *)operator new(12 * v11);
    *(_DWORD *)v13 = a2;
    v7 = &v13[v12];
    *(_QWORD *)(v13 + 4) = 1;
    v8 = v13 + 12;
    *(_QWORD *)(a1 + 1152) = v13;
    *(_QWORD *)(a1 + 1160) = v13 + 12;
    *(_QWORD *)(a1 + 1168) = &v13[v12];
    if (v6)
    {
      operator delete(v6);
      v7 = *(char **)(a1 + 1168);
    }
  }
  else
  {
    *(_DWORD *)v6 = a2;
    *(_QWORD *)(v6 + 4) = 1;
    v8 = v6 + 12;
  }
  v14 = (char **)(a1 + 1152);
  *(_QWORD *)(a1 + 1160) = v8;
  if (v8 < v7)
  {
    *(_DWORD *)v8 = a3;
    *(_QWORD *)(v8 + 4) = 1;
    v15 = v8 + 12;
    goto LABEL_29;
  }
  v16 = *v14;
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *v14) >> 2);
  v18 = v17 + 1;
  if (v17 + 1 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v16) >> 2);
  if (2 * v19 > v18)
    v18 = 2 * v19;
  if (v19 >= 0xAAAAAAAAAAAAAAALL)
    v20 = 0x1555555555555555;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 <= 0x1555555555555555)
    {
      v21 = (char *)operator new(12 * v20);
      goto LABEL_23;
    }
LABEL_30:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v21 = 0;
LABEL_23:
  v22 = &v21[12 * v17];
  v23 = &v21[12 * v20];
  *(_DWORD *)v22 = a3;
  *(_QWORD *)(v22 + 4) = 1;
  v15 = v22 + 12;
  if (v8 == v16)
  {
    *(_QWORD *)(a1 + 1152) = v22;
    *(_QWORD *)(a1 + 1160) = v15;
    *(_QWORD *)(a1 + 1168) = v23;
LABEL_28:
    operator delete(v8);
    goto LABEL_29;
  }
  do
  {
    v24 = *(_QWORD *)(v8 - 12);
    v8 -= 12;
    v25 = *((_DWORD *)v8 + 2);
    *(_QWORD *)(v22 - 12) = v24;
    v22 -= 12;
    *((_DWORD *)v22 + 2) = v25;
  }
  while (v8 != v16);
  v8 = *(char **)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = v22;
  *(_QWORD *)(a1 + 1160) = v15;
  *(_QWORD *)(a1 + 1168) = v23;
  if (v8)
    goto LABEL_28;
LABEL_29:
  *(_QWORD *)(a1 + 1160) = v15;
  return operations_research::sat::SatSolver::AddLinearConstraint(a1, 1, 1, 0, 0, (void **)(a1 + 1152));
}

uint64_t operations_research::sat::SatSolver::AddLinearConstraint(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, void **a6)
{
  uint64_t result;
  int *v13;
  int *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  unint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54[2];
  uint64_t v55;

  LODWORD(v54[0]) = *(_DWORD *)(a1 + 304);
  LODWORD(v55) = 0;
  if (LODWORD(v54[0]))
  {
    v55 = google::MakeCheckOpString<int,int>((int)v54, (int)&v55, "CurrentDecisionLevel() == 0");
    if (v55)
    {
      google::LogMessageFatal::LogMessageFatal(v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 303, (uint64_t **)&v55);
      google::LogMessage::stream((google::LogMessage *)v54);
      goto LABEL_55;
    }
  }
  if (*(_BYTE *)(a1 + 496))
    return 0;
  v13 = (int *)*a6;
  v14 = (int *)a6[1];
  v15 = __OFSUB__(*a6, v14);
  if (*a6 == v14)
  {
    v17 = 0;
    v16 = 0;
    v27 = *a6;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 24)
                      + (((unint64_t)*v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v21 = *v13 & 0x3F;
      if (((v20 >> (v21 ^ 1u)) & 1) == 0)
      {
        if (((v20 >> v21) & 1) != 0)
        {
          v22 = *(_QWORD *)(v13 + 1);
          v23 = -v22;
          v24 = v17 - v22;
          v25 = v24 ^ v17;
          v17 = v24;
          if (((v24 ^ v23) & v25) < 0 != v15)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 313);
            v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v54);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: SafeAddInto(-term.coefficient, &fixed_variable_shift) ", 68);
            goto LABEL_55;
          }
        }
        else
        {
          v18 = (uint64_t)*a6 + 12 * v16;
          v19 = *(_QWORD *)v13;
          *(_DWORD *)(v18 + 8) = v13[2];
          *(_QWORD *)v18 = v19;
          ++v16;
        }
      }
      v13 += 3;
      v15 = __OFSUB__(v13, v14);
    }
    while (v13 != v14);
    v13 = (int *)*a6;
    v27 = a6[1];
  }
  v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (_BYTE *)v13) >> 2);
  if (v16 <= v28)
  {
    if (v16 < v28)
      a6[1] = &v13[3 * v16];
  }
  else
  {
    std::vector<operations_research::sat::LiteralWithCoeff>::__append(a6, v16 - v28);
  }
  v55 = 0;
  v53 = 0;
  if ((operations_research::sat::ComputeBooleanLinearExpressionCanonicalForm((uint64_t **)a6, &v55, &v53) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 327);
    v51 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: ComputeBooleanLinearExpressionCanonicalForm(cst, &bound_shift, &max_value) ", 89);
    goto LABEL_55;
  }
  v30 = (char *)(v55 + v17);
  if ((((v55 + v17) ^ v17) & ((v55 + v17) ^ v55)) < 0 != v29)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 328);
    v52 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: SafeAddInto(fixed_variable_shift, &bound_shift) ", 62);
LABEL_55:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v54);
  }
  v55 += v17;
  if (a4)
  {
    v31 = operations_research::sat::ComputeCanonicalRhs(a5, (uint64_t)v30, v53);
    if (!operations_research::sat::SatSolver::AddLinearConstraintInternal(a1, (uint64_t *)a6, v31, v53))
      goto LABEL_50;
  }
  if (a2)
  {
    v32 = (char *)*a6;
    v33 = (_BYTE *)a6[1] - (_BYTE *)*a6;
    if (!v33)
      goto LABEL_34;
    v34 = v33 / 12;
    if (v34 <= 1)
      v34 = 1;
    if (v34 >= 2)
    {
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
      v37 = *a6;
      do
      {
        v38 = v37[3] ^ 1;
        *v37 ^= 1u;
        v37[3] = v38;
        v37 += 6;
        v36 -= 2;
      }
      while (v36);
      if (v34 == v35)
      {
LABEL_34:
        v41 = operations_research::sat::ComputeNegatedCanonicalRhs(a3, v55, v53);
        if ((operations_research::sat::SatSolver::AddLinearConstraintInternal(a1, (uint64_t *)a6, v41, v53) & 1) == 0)
          goto LABEL_50;
        goto LABEL_35;
      }
    }
    else
    {
      v35 = 0;
    }
    v39 = &v32[12 * v35];
    v40 = v34 - v35;
    do
    {
      *(_DWORD *)v39 ^= 1u;
      v39 += 12;
      --v40;
    }
    while (v40);
    goto LABEL_34;
  }
LABEL_35:
  v42 = *(_QWORD *)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 56);
  if (v42 == v43)
    return 1;
  v44 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12);
  while (*(_DWORD *)(*(_QWORD *)v42 + 36) == v44)
  {
    v42 += 8;
    if (v42 == v43)
      return 1;
  }
LABEL_48:
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(_QWORD *)(a1 + 56);
  if (v49 == v50)
    return 1;
  v45 = v49 + 8;
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v45 - 8) + 16))(*(_QWORD *)(v45 - 8)))
  {
    v46 = *(_QWORD *)(a1 + 208);
    v47 = *(_DWORD *)(v46 + 12);
    v48 = v47 > v44 || v45 == v50;
    v45 += 8;
    if (v48)
    {
      result = 1;
      v48 = v47 == v44;
      v44 = *(_DWORD *)(v46 + 12);
      if (v48)
        return result;
      goto LABEL_48;
    }
  }
LABEL_50:
  result = 0;
  *(_BYTE *)(a1 + 496) = 1;
  return result;
}

void sub_22DBF1C30(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF1C38(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF1C40(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF1C48(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddProblemClause(_QWORD *a1, int *a2, uint64_t a3)
{
  void **v4;
  char *v5;
  int *v6;
  int *v7;
  int v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;

  v4 = (void **)(a1 + 144);
  v5 = (char *)a1[144];
  a1[145] = v5;
  if (a3)
  {
    v6 = a2;
    v7 = &a2[a3];
    do
    {
      while (1)
      {
        v8 = *v6;
        v9 = a1[146];
        if ((unint64_t)v5 >= v9)
          break;
        *(_DWORD *)v5 = v8;
        *(_QWORD *)(v5 + 4) = 1;
        a1[145] = v5 + 12;
        ++v6;
        v5 += 12;
        if (v6 == v7)
          return operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)a1, 1, 1, 0, 0, v4);
      }
      v10 = (char *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 2);
      v12 = v11 + 1;
      if (v11 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v10) >> 2);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0xAAAAAAAAAAAAAAALL)
        v14 = 0x1555555555555555;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(12 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[12 * v11];
      *(_DWORD *)v16 = v8;
      *(_QWORD *)(v16 + 4) = 1;
      v17 = v16;
      if (v5 != v10)
      {
        do
        {
          v18 = *(_QWORD *)(v5 - 12);
          v5 -= 12;
          v19 = *((_DWORD *)v5 + 2);
          *(_QWORD *)(v17 - 12) = v18;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v19;
        }
        while (v5 != v10);
        v5 = (char *)*v4;
      }
      v20 = &v15[12 * v14];
      a1[144] = v17;
      v21 = v16 + 12;
      a1[145] = v16 + 12;
      a1[146] = v20;
      if (v5)
        operator delete(v5);
      a1[145] = v21;
      ++v6;
      v5 = v21;
    }
    while (v6 != v7);
  }
  return operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)a1, 1, 1, 0, 0, v4);
}

uint64_t operations_research::sat::SatSolver::AddProblemClauseInternal(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17[2];
  uint64_t *v18;

  LODWORD(v17[0]) = *(_DWORD *)(a1 + 304);
  LODWORD(v18) = 0;
  if (LODWORD(v17[0]))
  {
    v18 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v17, (int)&v18, "CurrentDecisionLevel() == 0");
    if (v18)
    {
      google::LogMessageFatal::LogMessageFatal(v17, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 219, &v18);
      google::LogMessage::stream((google::LogMessage *)v17);
      goto LABEL_23;
    }
  }
  v17[0] = a3;
  v16 = 0;
  if (!a3)
  {
    v18 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v17, (int)&v16, "literals.size() > 0");
    if (v18)
    {
      google::LogMessageFatal::LogMessageFatal(v17, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 224, &v18);
      google::LogMessage::stream((google::LogMessage *)v17);
LABEL_23:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
LABEL_10:
    v12 = operations_research::sat::LiteralWatchers::AddClause(*(_QWORD **)(a1 + 32), a2, a3, *(_QWORD *)(a1 + 208));
    result = 1;
    if ((v12 & 1) == 0)
    {
      *(_BYTE *)(a1 + 496) = 1;
      return 0;
    }
    return result;
  }
  if (a3 == 1)
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7 = *a2;
    v8 = (unint64_t)(int)*a2 >> 6;
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8);
    if (((v9 >> (*a2 & 0x3F ^ 1)) & 1) != 0)
      return 0;
    result = 1;
    v15 = 1 << (*a2 & 0x3F);
    if ((v15 & v9) == 0)
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * *(int *)(v6 + 12)) = v7;
      *(_DWORD *)(v6 + 8) = (*(_DWORD *)(v6 + 8) & 0xFFFFFFE | v7 & 1) ^ 0x10000001;
      *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * (v7 >> 1)) = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v8) |= v15;
      ++*(_DWORD *)(v6 + 12);
      return 1;
    }
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 306))
    v11 = a3 == 2;
  else
    v11 = 0;
  if (!v11)
    goto LABEL_10;
  v14 = *a2;
  v13 = a2[1];
  if (!*(_BYTE *)(a1 + 128)
    || operations_research::sat::BinaryClauseManager::Add((uint64_t *)(a1 + 136), v14 | (v13 << 32)))
  {
    operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(_QWORD *)(a1 + 24), v14, v13);
    operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
  }
  return 1;
}

void sub_22DBF2028(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF2030(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddLinearConstraintInternal(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  int *v17;
  int v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  int *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  unsigned int *v38;
  char *v39;
  char **v40;
  int v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  int *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  void **v61;

  if (a3 < 0)
    goto LABEL_83;
  if (a3 >= a4)
    return 1;
  if (a3)
    operations_research::sat::SatDecisionPolicy::UpdateWeightedSign(*(_QWORD *)(a1 + 240), a2, a3);
  v8 = (int *)*a2;
  v9 = (int *)a2[1];
  v10 = *(_QWORD *)(*a2 + 4);
  if (a4 - v10 <= a3)
  {
    v17 = *(int **)(a1 + 832);
    *(_QWORD *)(a1 + 840) = v17;
    if (v8 == v9)
    {
      v38 = (unsigned int *)v17;
      return operations_research::sat::SatSolver::AddProblemClauseInternal(a1, v38, ((char *)v17 - (char *)v38) >> 2);
    }
    v61 = (void **)(a1 + 832);
    while (1)
    {
      while (1)
      {
        v18 = *v8 ^ 1;
        v19 = *(_QWORD *)(a1 + 848);
        if ((unint64_t)v17 >= v19)
          break;
        *v17++ = v18;
        *(_QWORD *)(a1 + 840) = v17;
        v8 += 3;
        if (v8 == v9)
          goto LABEL_47;
      }
      v20 = (int *)*v61;
      v21 = (char *)v17 - (_BYTE *)*v61;
      v22 = v21 >> 2;
      v23 = (v21 >> 2) + 1;
      if (v23 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v24 = v19 - (_QWORD)v20;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
LABEL_85:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = operator new(4 * v25);
        v27 = (int *)&v26[4 * v22];
        *v27 = v18;
        v28 = (uint64_t)(v27 + 1);
        if (v17 == v20)
          goto LABEL_44;
      }
      else
      {
        v26 = 0;
        v27 = (int *)(4 * v22);
        *(_DWORD *)(4 * v22) = v18;
        v28 = 4 * v22 + 4;
        if (v17 == v20)
          goto LABEL_44;
      }
      v29 = (char *)(v17 - 1) - (char *)v20;
      if (v29 >= 0xBC)
      {
        if (&v26[v21 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4])
        {
          v30 = v17;
        }
        else if ((int *)((char *)v17 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v17 - 1)
        {
          v30 = v17;
        }
        else if ((unint64_t)((char *)v17 - &v26[v21]) >= 0x20)
        {
          v31 = (v29 >> 2) + 1;
          v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
          v30 = &v17[v32 / 0xFFFFFFFFFFFFFFFCLL];
          v27 = (int *)((char *)v27 - v32);
          v33 = &v26[4 * v22 - 16];
          v34 = v17 - 4;
          v35 = v31 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 8;
            v35 -= 8;
          }
          while (v35);
          if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
        }
        else
        {
          v30 = v17;
        }
      }
      else
      {
        v30 = v17;
      }
      do
      {
        v37 = *--v30;
        *--v27 = v37;
      }
      while (v30 != v20);
LABEL_44:
      *(_QWORD *)(a1 + 832) = v27;
      *(_QWORD *)(a1 + 840) = v28;
      *(_QWORD *)(a1 + 848) = &v26[4 * v25];
      if (v20)
        operator delete(v20);
      v17 = (int *)v28;
      *(_QWORD *)(a1 + 840) = v28;
      v8 += 3;
      if (v8 == v9)
      {
LABEL_47:
        v38 = (unsigned int *)*v61;
        return operations_research::sat::SatSolver::AddProblemClauseInternal(a1, v38, ((char *)v17 - (char *)v38) >> 2);
      }
    }
  }
  v11 = *(_QWORD *)(a1 + 224);
  if (!*(_BYTE *)(v11 + 306)
    || ((v12 = 2 * v10, !*(_BYTE *)(v11 + 132)) ? (v13 = *((_QWORD *)v9 - 1) <= a3) : (v13 = 0),
        v13 ? (v14 = v12 <= a3) : (v14 = 1),
        v14))
  {
    *(_BYTE *)(a1 + 1312) = 0;
    v15 = operations_research::sat::PbConstraints::AddConstraint(*(_QWORD *)(a1 + 40), (int **)a2, a3, *(_QWORD *)(a1 + 208));
    operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
    return v15;
  }
  v39 = *(char **)(a1 + 832);
  *(_QWORD *)(a1 + 840) = v39;
  if (v8 == v9)
  {
    if (!operations_research::sat::BinaryImplicationGraph::AddAtMostOne(*(_QWORD *)(a1 + 24), v39, 0))
      goto LABEL_83;
LABEL_81:
    operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
    return 1;
  }
  v40 = (char **)(a1 + 832);
  do
  {
    while (1)
    {
      v42 = *(_QWORD *)(a1 + 848);
      if ((unint64_t)v39 >= v42)
        break;
      v41 = *v8;
      v8 += 3;
      *(_DWORD *)v39 = v41;
      v39 += 4;
      *(_QWORD *)(a1 + 840) = v39;
      if (v8 == v9)
        goto LABEL_80;
    }
    v43 = *v40;
    v44 = v39 - *v40;
    v45 = v44 >> 2;
    v46 = (v44 >> 2) + 1;
    if (v46 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v47 = v42 - (_QWORD)v43;
    if (v47 >> 1 > v46)
      v46 = v47 >> 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 62)
        goto LABEL_85;
      v49 = operator new(4 * v48);
      v50 = (int *)&v49[4 * v45];
      *v50 = *v8;
      v51 = (uint64_t)(v50 + 1);
      if (v39 == v43)
        goto LABEL_77;
    }
    else
    {
      v49 = 0;
      v50 = (int *)(4 * v45);
      *(_DWORD *)(4 * v45) = *v8;
      v51 = 4 * v45 + 4;
      if (v39 == v43)
        goto LABEL_77;
    }
    v52 = v39 - 4 - v43;
    if (v52 >= 0xBC)
    {
      if (&v49[v44 - 4 - (v52 & 0xFFFFFFFFFFFFFFFCLL)] > &v49[v44 - 4])
      {
        v53 = v39;
      }
      else if (&v39[-(v52 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v39 - 4)
      {
        v53 = v39;
      }
      else if ((unint64_t)(v39 - v49 - v44) >= 0x20)
      {
        v54 = (v52 >> 2) + 1;
        v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v39[-v55];
        v50 = (int *)((char *)v50 - v55);
        v56 = &v49[4 * v45 - 16];
        v57 = v39 - 16;
        v58 = v54 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 8;
        }
        while (v58);
        if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_77;
      }
      else
      {
        v53 = v39;
      }
    }
    else
    {
      v53 = v39;
    }
    do
    {
      v60 = *((_DWORD *)v53 - 1);
      v53 -= 4;
      *--v50 = v60;
    }
    while (v53 != v43);
LABEL_77:
    *(_QWORD *)(a1 + 832) = v50;
    *(_QWORD *)(a1 + 840) = v51;
    *(_QWORD *)(a1 + 848) = &v49[4 * v48];
    if (v43)
      operator delete(v43);
    v39 = (char *)v51;
    *(_QWORD *)(a1 + 840) = v51;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_80:
  if (operations_research::sat::BinaryImplicationGraph::AddAtMostOne(*(_QWORD *)(a1 + 24), *v40, (v39 - *v40) >> 2))
    goto LABEL_81;
LABEL_83:
  result = 0;
  *(_BYTE *)(a1 + 496) = 1;
  return result;
}

uint64_t operations_research::sat::SatSolver::AddLearnedClauseAndEnqueueUnitPropagation(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int *v21[2];
  uint64_t *v22;

  v7 = *(int **)a2;
  v8 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  if (v8 == 2)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 306))
    {
      if (*(_BYTE *)(a1 + 128))
      {
        if (!operations_research::sat::BinaryClauseManager::Add((uint64_t *)(a1 + 136), *(_QWORD *)v7))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 373);
          v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: binary_clauses_.Add(BinaryClause(literals[0], literals[1])) ", 74);
          goto LABEL_23;
        }
        v7 = *(int **)a2;
      }
      if ((operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(*(_QWORD *)(a1 + 24), *v7, v7[1]) & 1) == 0)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 376);
        v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: binary_implication_graph_->AddBinaryClauseDuringSearch(literals[0], literals[1]) ", 95);
        goto LABEL_23;
      }
      operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
      return 2;
    }
  }
  else if (v8 == 1)
  {
    LODWORD(v21[0]) = *(_DWORD *)(a1 + 304);
    LODWORD(v22) = 0;
    if (!LODWORD(v21[0]))
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 208);
      v10 = *v7;
      *(_DWORD *)(*(_QWORD *)(v9 + 72) + 4 * *(int *)(v9 + 12)) = v10;
      *(_DWORD *)(v9 + 8) = (*(_DWORD *)(v9 + 8) & 0xFFFFFFE | v10 & 1) ^ 0x10000001;
      *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * (v10 >> 1)) = *(_QWORD *)(v9 + 8);
      v11 = 1;
      *(_QWORD *)(*(_QWORD *)(v9 + 24) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      ++*(_DWORD *)(v9 + 12);
      return v11;
    }
    v22 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v21, (int)&v22, "CurrentDecisionLevel() == 0");
    if (!v22)
    {
      v7 = *(int **)a2;
      goto LABEL_4;
    }
    google::LogMessageFatal::LogMessageFatal((unint64_t *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 366, &v22);
    google::LogMessage::stream((google::LogMessage *)v21);
LABEL_23:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded((operations_research::sat::SatSolver *)a1, a4);
  v13 = operations_research::sat::SatSolver::ComputeLbd<std::vector<operations_research::sat::Literal>>(a1, (int **)a2);
  v11 = v13;
  if (!a3 || (int)v13 <= *(_DWORD *)(*(_QWORD *)(a1 + 224) + 340))
  {
    if ((operations_research::sat::LiteralWatchers::AddClause(*(_QWORD **)(a1 + 32), *(const void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(_QWORD *)(a1 + 208)) & 1) != 0)return v11;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 398);
    v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: clauses_propagator_->AddClause(literals, trail_) ", 63);
    goto LABEL_23;
  }
  --*(_DWORD *)(a1 + 512);
  v21[0] = (int *)operations_research::sat::LiteralWatchers::AddRemovableClause(*(_QWORD **)(a1 + 32), a2, *(_QWORD *)(a1 + 208));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::find_or_prepare_insert<operations_research::sat::SatClause *>((uint64_t *)(v14 + 336), (uint64_t *)v21);
  if (v16)
  {
    v17 = *(_QWORD *)(v14 + 344) + 24 * v15;
    *(int **)v17 = v21[0];
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(v14 + 344) + 24 * v15 + 16) = v11;
  operations_research::sat::SatSolver::BumpClauseActivity(a1, v21[0]);
  return v11;
}

void sub_22DBF27EC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF27F4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF27FC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF2804(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryClauseManager::Add(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int v18;
  int v19;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;

  v4 = ~((int)a2 >> 1);
  if ((a2 & 1) == 0)
    v4 = ((int)a2 >> 1) + 1;
  if ((a2 & 0x100000000) != 0)
    v5 = ~(a2 >> 33);
  else
    v5 = (a2 >> 33) + 1;
  v45 = __PAIR64__(v5, v4);
  if (v4 <= (int)v5)
  {
    v6 = v5;
    v5 = v4;
  }
  else
  {
    v45 = __PAIR64__(v4, v5);
    v6 = v4;
  }
  v7 = 0;
  v8 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v5)))
     + v6;
  v9 = ((v8 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v8);
  v10 = (v9 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  v12 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    v13 = v10 & v11;
    v14 = *(_QWORD *)(*a1 + v13);
    v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15)
      break;
LABEL_16:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      goto LABEL_19;
    v7 += 8;
    v10 = v7 + v13;
  }
  while (1)
  {
    v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
    v17 = (int *)(a1[1] + 8 * v16);
    v19 = *v17;
    v18 = v17[1];
    if (v19 == v5 && v18 == v6)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_16;
  }
  if (v16 != v11)
    return 0;
LABEL_19:
  v21 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>(a1, (unsigned int *)&v45);
  if (v22)
    *(_QWORD *)(a1[1] + 8 * v21) = v45;
  v24 = (uint64_t *)a1[7];
  v23 = a1[8];
  if ((unint64_t)v24 >= v23)
  {
    v26 = (char *)a1[6];
    v27 = ((char *)v24 - v26) >> 3;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = v23 - (_QWORD)v26;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = (char *)operator new(8 * v30);
      v32 = (uint64_t *)&v31[8 * v27];
      v33 = &v31[8 * v30];
      *v32 = a2;
      v25 = (uint64_t)(v32 + 1);
      v34 = (char *)((char *)v24 - v26);
      if (v24 == (uint64_t *)v26)
        goto LABEL_42;
    }
    else
    {
      v31 = 0;
      v32 = (uint64_t *)(8 * v27);
      v33 = 0;
      *(_QWORD *)(8 * v27) = a2;
      v25 = 8 * v27 + 8;
      v34 = (char *)((char *)v24 - v26);
      if (v24 == (uint64_t *)v26)
      {
LABEL_42:
        a1[6] = (uint64_t)v32;
        a1[7] = v25;
        a1[8] = (uint64_t)v33;
        if (v24)
          operator delete(v24);
        goto LABEL_44;
      }
    }
    v36 = (unint64_t)(v34 - 8);
    if (v36 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v26 - v31) < 0x20)
      goto LABEL_49;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v24[v38 / 0xFFFFFFFFFFFFFFF8];
    v32 = (uint64_t *)((char *)v32 - v38);
    v40 = &v31[8 * v27 - 16];
    v41 = v24 - 2;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
      *(_OWORD *)v40 = v43;
      v40 -= 32;
      v41 -= 4;
      v42 -= 4;
    }
    while (v42);
    v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v44 = *--v24;
        *--v32 = v44;
      }
      while (v24 != (uint64_t *)v26);
    }
    v24 = (uint64_t *)a1[6];
    goto LABEL_42;
  }
  *v24 = a2;
  v25 = (uint64_t)(v24 + 1);
LABEL_44:
  a1[7] = v25;
  return 1;
}

void operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(operations_research::sat::SatSolver *this, __n128 a2)
{
  operations_research::sat::SatSolver *v2;
  _QWORD *v3;
  char *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  operations_research::sat::LiteralWatchers *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int **v39;
  char *v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  double v44;
  double v45;
  unsigned int v46;
  _DWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  __n128 v52;
  void *__p;
  char *v54;
  unint64_t v55;

  if (*((int *)this + 128) <= 0)
  {
    v2 = this;
    __p = 0;
    v54 = 0;
    v55 = 0;
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (char *)v3[42];
    v5 = (uint64_t *)v3[43];
    if (*v4 > -2)
    {
      v6 = (_QWORD *)v3[42];
      v36 = v3[45];
      v8 = &v4[v36];
      if (v4 != &v4[v36])
        goto LABEL_8;
    }
    else
    {
      v6 = (_QWORD *)v3[42];
      do
      {
        v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v6 = (_QWORD *)((char *)v6 + v7);
        v5 += 3 * v7;
      }
      while (*(char *)v6 < -1);
      v8 = &v4[v3[45]];
      if (v6 != (_QWORD *)v8)
      {
LABEL_8:
        while (1)
        {
          v9 = *v5;
          v10 = *(_DWORD *)(*v5 + 4);
          v11 = *((_QWORD *)v2 + 26);
          v12 = *(_QWORD *)(v11 + 120);
          v13 = (unsigned int *)(v12 + 8 * (v10 >> 1));
          v14 = (int)v13[1];
          if ((int)v14 < *(_DWORD *)(v11 + 12))
          {
            v15 = (uint64_t)v10 >> 1;
            if ((_DWORD)v15 == *(int *)(*(_QWORD *)(v11 + 72) + 4 * v14) >> 1)
              break;
          }
LABEL_18:
          if (!*((_BYTE *)v5 + 20))
          {
            v20 = *v5;
            v52 = *(__n128 *)(v5 + 1);
            v21 = v54;
            if ((unint64_t)v54 >= v55)
            {
              v23 = v8;
              v24 = (char *)__p;
              v25 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (_BYTE *)__p) >> 3);
              v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v55 - (_QWORD)__p) >> 3) > v26)
                v26 = 0x5555555555555556 * ((uint64_t)(v55 - (_QWORD)__p) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (_QWORD)__p) >> 3) >= 0x555555555555555)
                v27 = 0xAAAAAAAAAAAAAAALL;
              else
                v27 = v26;
              if (v27)
              {
                if (v27 > 0xAAAAAAAAAAAAAAALL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v28 = (char *)operator new(24 * v27);
              }
              else
              {
                v28 = 0;
              }
              v29 = &v28[8 * ((v54 - (_BYTE *)__p) >> 3)];
              *(_QWORD *)v29 = v20;
              a2 = v52;
              *(__n128 *)(v29 + 8) = v52;
              v30 = &v28[24 * v25];
              v8 = v23;
              if (v21 != v24)
              {
                do
                {
                  a2 = *(__n128 *)(v21 - 24);
                  *((_QWORD *)v30 - 1) = *((_QWORD *)v21 - 1);
                  *(__n128 *)(v30 - 24) = a2;
                  v30 -= 24;
                  v21 -= 24;
                }
                while (v21 != v24);
                v21 = v24;
              }
              v2 = this;
              v31 = &v28[24 * v27];
              v22 = v29 + 24;
              __p = v30;
              v55 = (unint64_t)v31;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_QWORD *)v54 = v20;
              a2 = v52;
              *(__n128 *)(v21 + 8) = v52;
              v22 = v21 + 24;
            }
            v54 = v22;
            v32 = *((char *)v6 + 1);
            v6 = (_QWORD *)((char *)v6 + 1);
            v5 += 3;
            if (v32 > -2)
              goto LABEL_7;
            do
            {
LABEL_40:
              v33 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v6 = (_QWORD *)((char *)v6 + v33);
              v5 += 3 * v33;
            }
            while (*(char *)v6 < -1);
            goto LABEL_7;
          }
          *((_BYTE *)v5 + 20) = 0;
LABEL_20:
          v19 = *((char *)v6 + 1);
          v6 = (_QWORD *)((char *)v6 + 1);
          v5 += 3;
          if (v19 <= -2)
            goto LABEL_40;
LABEL_7:
          if (v6 == (_QWORD *)v8)
          {
            v34 = __p;
            v35 = (unint64_t)v54;
            goto LABEL_45;
          }
        }
        v16 = *v13;
        if (v16 >> 28 == 3)
        {
          v15 = *(int *)(*(_QWORD *)(v11 + 152) + 4 * v15);
          v17 = *(_DWORD *)(v12 + 8 * v15) >> 28;
          if (v17)
            goto LABEL_12;
        }
        else
        {
          v17 = v16 >> 28;
          if (v16 >> 28)
          {
LABEL_12:
            v18 = (operations_research::sat::LiteralWatchers *)*((_QWORD *)v2 + 4);
            if (v17 == *((_DWORD *)v18 + 8))
              goto LABEL_13;
LABEL_17:
            if (!v9)
              goto LABEL_20;
            goto LABEL_18;
          }
        }
        v18 = (operations_research::sat::LiteralWatchers *)*((_QWORD *)v2 + 4);
        if (*(_DWORD *)(*(_QWORD *)(v11 + 248) + 4 * v15) == *((_DWORD *)v18 + 8))
        {
LABEL_13:
          if (operations_research::sat::LiteralWatchers::ReasonClause(v18, v14) == v9)
            goto LABEL_20;
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    v34 = 0;
    v35 = 0;
LABEL_45:
    v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v34) >> 3));
    if ((void *)v35 == v34)
      v38 = 0;
    else
      v38 = v37;
    if (*(_DWORD *)(*((_QWORD *)v2 + 28) + 92) == 1)
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>((uint64_t)v34, v35, v38, 1, a2);
    else
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>((uint64_t)v34, v35, v38, 1, a2);
    v39 = (int **)__p;
    v40 = v54;
    v41 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (_BYTE *)__p) >> 3);
    if (*(_DWORD *)(*((_QWORD *)v2 + 28) + 208) >= (int)v41)
      v42 = -1431655765 * ((v54 - (_BYTE *)__p) >> 3);
    else
      v42 = *(_DWORD *)(*((_QWORD *)v2 + 28) + 208);
    v43 = v41 - v42;
    if ((int)v41 - v42 >= 1)
    {
      v44 = *((double *)__p + 3 * v43 + 1);
      while (1)
      {
        v45 = v44;
        v44 = *((double *)__p + 3 * v43 - 2);
        if (v45 != v44 || *((_DWORD *)__p + 6 * v43 + 4) != *((_DWORD *)__p + 6 * v43 - 2))
          break;
        ++v42;
        v46 = v43--;
        if (v46 <= 1)
          goto LABEL_68;
      }
      if (v43 <= v41)
      {
        if (v43 < v41)
        {
          v40 = (char *)__p + 24 * v43;
          v54 = v40;
        }
      }
      else
      {
        std::vector<std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>>::__append((char **)&__p, v43 - v41);
        v39 = (int **)__p;
        v40 = v54;
      }
      while (v39 != (int **)v40)
      {
        v47 = *v39;
        *((_QWORD *)v2 + 52) += **v39;
        operations_research::sat::LiteralWatchers::LazyDetach(*((_QWORD *)v2 + 4), v47);
        v39 += 3;
      }
      operations_research::sat::LiteralWatchers::CleanUpWatchers(*((_QWORD *)v2 + 4));
      if (!*((_BYTE *)v2 + 1032))
        operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2
                                                                        + 4));
    }
LABEL_68:
    *((_DWORD *)v2 + 128) = *(_DWORD *)(*((_QWORD *)v2 + 28) + 204);
    if (*operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__ >= 1
      && (operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v52, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2504);
      v48 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Database cleanup, #protected:", 29);
      v49 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" #kept:", 7);
      v50 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" #deleted:", 10);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)&v52);
    }
    if (__p)
    {
      v54 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_22DBF3040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::ComputeLbd<std::vector<operations_research::sat::Literal>>(uint64_t a1, int **a2)
{
  int v4;
  int *v5;
  int *v6;
  unint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 307))
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + 340);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 856, ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (**a2 >> 1)) >> 1) & 0x7FFFFFF) + 1);
  v6 = *a2;
  v5 = a2[1];
  while (v6 != v5)
  {
    v7 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (*v6 >> 1)) >> 1) & 0x7FFFFFF;
    if ((int)v7 > v4
      && ((*(_QWORD *)(*(_QWORD *)(a1 + 864) + ((v7 >> 3) & 0xFFFFF8)) >> ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (*v6 >> 1)) >> 1)) & 1) == 0)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)(a1 + 856), v7);
    }
    ++v6;
  }
  return (*(_QWORD *)(a1 + 920) - *(_QWORD *)(a1 + 912)) >> 2;
}

uint64_t operations_research::sat::SatSolver::BumpClauseActivity(uint64_t a1, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  int *v31;

  v3 = 0;
  v31 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  v5 = (unint64_t)a2
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (_QWORD)a2)));
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = v4[42];
  v8 = (v6 >> 7) ^ (v7 >> 12);
  v9 = v4[45];
  v10 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    v11 = v8 & v9;
    v12 = *(_QWORD *)(v7 + v11);
    result = (v12 ^ v10) - 0x101010101010101;
    v14 = result & ~(v12 ^ v10) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
      return result;
    v3 += 8;
    v8 = v3 + v11;
  }
  result = v4[43];
  while (1)
  {
    v15 = (v11 + (__clz(__rbit64(v14)) >> 3)) & v9;
    v16 = result + 24 * v15;
    if (*(int **)v16 == a2)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  if (v15 != v9)
  {
    result = operations_research::sat::SatSolver::ComputeLbd<operations_research::sat::SatClause>(a1, a2);
    v17 = *(_QWORD *)(a1 + 224);
    if ((int)result >= *(_DWORD *)(v17 + 340))
    {
      v18 = *(_DWORD *)(v17 + 88);
      if (v18 == 2)
      {
        if ((int)result + 1 < *(_DWORD *)(v16 + 16))
        {
          *(_BYTE *)(v16 + 20) = 1;
          *(_DWORD *)(v16 + 16) = result;
        }
      }
      else if (v18 == 1)
      {
        *(_BYTE *)(v16 + 20) = 1;
      }
      v19 = *(double *)(a1 + 504);
      v20 = v19 + *(double *)(v16 + 8);
      *(double *)(v16 + 8) = v20;
      v21 = *(double *)(v17 + 240);
      if (v20 > v21)
      {
        v22 = 1.0 / v21;
        *(double *)(a1 + 504) = v19 * v22;
        v23 = *(_QWORD **)(a1 + 32);
        v25 = (char *)v23[42];
        v24 = v23[43];
        if (*v25 > -2)
        {
          v26 = (_QWORD *)v23[42];
        }
        else
        {
          v26 = (_QWORD *)v23[42];
          do
          {
            v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v26 = (_QWORD *)((char *)v26 + v27);
            v24 += 24 * v27;
          }
          while (*(char *)v26 < -1);
        }
        v28 = &v25[v23[45]];
        while (v26 != (_QWORD *)v28)
        {
          *(double *)(v24 + 8) = v22 * *(double *)(v24 + 8);
          v29 = *((char *)v26 + 1);
          v26 = (_QWORD *)((char *)v26 + 1);
          v24 += 24;
          if (v29 <= -2)
          {
            do
            {
              v30 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v26 = (_QWORD *)((char *)v26 + v30);
              v24 += 24 * v30;
            }
            while (*(char *)v26 < -1);
          }
        }
      }
    }
    else
    {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(*(_QWORD *)(a1 + 32) + 336), (uint64_t *)&v31);
    }
  }
  return result;
}

void operations_research::sat::SatSolver::AddPropagator(operations_research::sat::SatSolver *this, operations_research::sat::SatPropagator *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25[2];
  uint64_t *v26;

  LODWORD(v25[0]) = *((_DWORD *)this + 76);
  LODWORD(v26) = 0;
  if (LODWORD(v25[0]))
  {
    v26 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v25, (int)&v26, "CurrentDecisionLevel() == 0");
    if (v26)
    {
      google::LogMessageFatal::LogMessageFatal(v25, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 404, &v26);
      google::LogMessage::stream((google::LogMessage *)v25);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
    }
  }
  *((_BYTE *)this + 1312) = 0;
  operations_research::sat::Trail::RegisterPropagator(*((operations_research::sat::Trail **)this + 26), a2);
  v5 = (char *)*((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11);
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v6 = (uint64_t)(v5 + 8);
    goto LABEL_24;
  }
  v7 = (char *)*((_QWORD *)this + 9);
  v8 = (v5 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(8 * v11);
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = (uint64_t)(v13 + 8);
    v15 = (char *)(v5 - v7);
    if (v5 == v7)
      goto LABEL_22;
    goto LABEL_15;
  }
  v12 = 0;
  v13 = (char *)(8 * v8);
  v14 = 0;
  *(_QWORD *)(8 * v8) = a2;
  v6 = 8 * v8 + 8;
  v15 = (char *)(v5 - v7);
  if (v5 != v7)
  {
LABEL_15:
    v16 = (unint64_t)(v15 - 8);
    if (v16 < 0x58)
      goto LABEL_31;
    if ((unint64_t)(v7 - v12) < 0x20)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v5[-v18];
    v13 -= v18;
    v20 = &v12[8 * v8 - 16];
    v21 = v5 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v5 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v24 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v24;
        v13 -= 8;
      }
      while (v5 != v7);
    }
    v5 = (char *)*((_QWORD *)this + 9);
  }
LABEL_22:
  *((_QWORD *)this + 9) = v13;
  *((_QWORD *)this + 10) = v6;
  *((_QWORD *)this + 11) = v14;
  if (v5)
    operator delete(v5);
LABEL_24:
  *((_QWORD *)this + 10) = v6;
  operations_research::sat::SatSolver::InitializePropagators(this);
}

void sub_22DBF35C4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SatSolver::AddLastPropagator(operations_research::sat::SatSolver *this, operations_research::sat::SatPropagator *a2)
{
  _QWORD *v4;
  unint64_t v5[2];
  uint64_t *v6;

  LODWORD(v5[0]) = *((_DWORD *)this + 76);
  LODWORD(v6) = 0;
  if (LODWORD(v5[0]))
  {
    v6 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v5, (int)&v6, "CurrentDecisionLevel() == 0");
    if (v6)
    {
      google::LogMessageFatal::LogMessageFatal(v5, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 412, &v6);
      google::LogMessage::stream((google::LogMessage *)v5);
      goto LABEL_7;
    }
  }
  if (*((_QWORD *)this + 12))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 413);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: last_propagator_ == nullptr ", 42);
LABEL_7:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  *((_BYTE *)this + 1312) = 0;
  operations_research::sat::Trail::RegisterPropagator(*((operations_research::sat::Trail **)this + 26), a2);
  *((_QWORD *)this + 12) = a2;
  operations_research::sat::SatSolver::InitializePropagators(this);
}

void sub_22DBF369C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF36A4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v10[16];

  if (*(_BYTE *)(a1 + 496))
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if (v4 != v5)
  {
    while (*(_DWORD *)(*(_QWORD *)v4 + 36) == *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12))
    {
      v4 += 8;
      if (v4 == v5)
        goto LABEL_6;
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 500);
    v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: PropagationIsDone() ", 34);
LABEL_16:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v10);
  }
LABEL_6:
  operations_research::sat::SatSolver::EnqueueNewDecision(a1, a2);
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 496))
      return 0xFFFFFFFFLL;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  if (v6 != v7)
  {
    while (*(_DWORD *)(*(_QWORD *)v6 + 36) == *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12))
    {
      v6 += 8;
      if (v6 == v7)
        return *(unsigned int *)(a1 + 336);
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 505);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: PropagationIsDone() ", 34);
    goto LABEL_16;
  }
  return *(unsigned int *)(a1 + 336);
}

void sub_22DBF37E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBF37F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::SatSolver::EnqueueNewDecision(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];

  v3 = *(_QWORD *)(a1 + 208);
  v4 = (int)a2 >> 1;
  if (((*(_QWORD *)(*(_QWORD *)(v3 + 24) + (((unint64_t)(2 * ((int)a2 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1711);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: !Assignment().VariableIsAssigned(literal.Variable()) ", 67);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
  }
  v6 = *(_DWORD *)(a1 + 304);
  if (!v6)
  {
    v7 = *(int *)(v3 + 12);
    if (*(_DWORD *)(a1 + 344) >= (int)v7
      || ((double)*(uint64_t *)(*(_QWORD *)(a1 + 24) + 280)
        + (double)(*(_QWORD *)v3 + v7) * 8.0
        + (double)*(uint64_t *)(*(_QWORD *)(a1 + 32) + 192) * 4.0
        + (double)*(uint64_t *)(*(_QWORD *)(a1 + 32) + 200)
        + (double)*(uint64_t *)(*(_QWORD *)(a1 + 40) + 408) * 20.0
        + (double)*(uint64_t *)(*(_QWORD *)(a1 + 40) + 424) * 2.0
        + (double)*(uint64_t *)(*(_QWORD *)(a1 + 40) + 416))
       * 0.00000001 <= *(double *)(a1 + 352) + 1.0)
    {
      v6 = 0;
    }
    else
    {
      operations_research::sat::SatSolver::ProcessNewlyFixedVariables((operations_research::sat::SatSolver *)a1);
      v3 = *(_QWORD *)(a1 + 208);
      v6 = *(_DWORD *)(a1 + 304);
    }
  }
  ++*(_QWORD *)(a1 + 368);
  v8 = *(unsigned int *)(v3 + 12);
  *(_DWORD *)(a1 + 336) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v6) = v8 | (a2 << 32);
  LODWORD(v8) = *(_DWORD *)(a1 + 304) + 1;
  *(_DWORD *)(a1 + 304) = v8;
  *(_DWORD *)(*(_QWORD *)(a1 + 208) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 8) & 0xF0000001 | (2 * (v8 & 0x7FFFFFF));
  v9 = *(_QWORD *)(a1 + 208);
  *(_DWORD *)(*(_QWORD *)(v9 + 72) + 4 * *(int *)(v9 + 12)) = a2;
  *(_DWORD *)(v9 + 8) = (*(_DWORD *)(v9 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x20000001;
  *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * v4) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(*(_QWORD *)(v9 + 24) + (((unint64_t)(int)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(v9 + 12);
}

void sub_22DBF39E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(operations_research::sat::SatSolver *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t result;
  int v10;
  int v11;
  _QWORD *v12;
  int *v13;
  int *v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  unint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  uint64_t *v27;
  int *v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  operations_research::sat::PbConstraints *v42;
  uint64_t v43;
  uint64_t v44;
  operations_research::sat::UpperBoundedLinearConstraint *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int *v54;
  int *v55;
  int *v56;
  int *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int *v62;
  int v63;
  unint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  _OWORD *v79;
  int *v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  int v84;
  int v85;
  char v86;
  int *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int *v112;
  unint64_t v113;
  unint64_t v114;
  int *v115;
  int v116;
  int v117;
  __n128 v118;
  uint64_t v119;
  _DWORD **v120;
  _DWORD **v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _DWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  unint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t *v145;
  unint64_t v146[2];
  int *v147;
  int *v148;
  uint64_t v149;
  int v150;
  uint64_t *v151;
  int v152;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
    return 1;
  v2 = *(_DWORD *)(*((_QWORD *)this + 26) + 12);
LABEL_3:
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  if (v3 == v4)
    return 1;
  v5 = v3 + 8;
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 - 8) + 16))(*(_QWORD *)(v5 - 8)))
  {
    v6 = *((_QWORD *)this + 26);
    v7 = *(_DWORD *)(v6 + 12);
    v8 = v7 > v2 || v5 == v4;
    v5 += 8;
    if (v8)
    {
      v8 = v7 == v2;
      v2 = *(_DWORD *)(v6 + 12);
      if (v8)
        return 1;
      goto LABEL_3;
    }
  }
  ++*((_QWORD *)this + 47);
  v10 = *(_DWORD *)(*((_QWORD *)this + 26) + 12);
  v11 = *((_DWORD *)this + 76);
  bzero(*((void **)this + 135), *((_QWORD *)this + 136) - *((_QWORD *)this + 135));
  *((_QWORD *)this + 142) = *((_QWORD *)this + 141);
  v12 = (_QWORD *)*((_QWORD *)this + 26);
  v14 = (int *)v12[12];
  v13 = (int *)v12[13];
  v15 = (char *)v13 - (char *)v14;
  if (v13 == v14)
  {
    v17 = -1;
  }
  else
  {
    v16 = v12[15];
    if ((unint64_t)(v15 - 4) >= 4)
    {
      v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
      v18 = &v14[v19 & 0x7FFFFFFFFFFFFFFELL];
      v20 = v14 + 1;
      v21 = -1;
      v22 = v19 & 0x7FFFFFFFFFFFFFFELL;
      v23 = -1;
      do
      {
        if (v21 <= *(_DWORD *)(v16 + 8 * (*(v20 - 1) >> 1) + 4))
          v21 = *(_DWORD *)(v16 + 8 * (*(v20 - 1) >> 1) + 4);
        if (v23 <= *(_DWORD *)(v16 + 8 * (*v20 >> 1) + 4))
          v23 = *(_DWORD *)(v16 + 8 * (*v20 >> 1) + 4);
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      if (v21 <= v23)
        v17 = v23;
      else
        v17 = v21;
      if (v19 == (v19 & 0x7FFFFFFFFFFFFFFELL))
        goto LABEL_32;
    }
    else
    {
      v17 = -1;
      v18 = v14;
    }
    v24 = (int *)((char *)v14 + (v15 & 0xFFFFFFFFFFFFFFFCLL));
    do
    {
      v25 = *v18++;
      v26 = *(_DWORD *)(v16 + 8 * (v25 >> 1) + 4);
      if (v17 <= v26)
        v17 = v26;
    }
    while (v18 != v24);
  }
LABEL_32:
  v27 = (uint64_t *)((char *)this + 936);
  operations_research::sat::SatSolver::ComputeFirstUIPConflict((uint64_t)this, v17, (int **)this + 117, (int **)this + 120, (uint64_t **)this + 126);
  if (*((_QWORD *)this + 117) == *((_QWORD *)this + 118))
    goto LABEL_74;
  operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((_QWORD **)this + 30), (int **)this + 117);
  operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((_QWORD **)this + 30), (int **)this + 120);
  if (*(_BYTE *)(*((_QWORD *)this + 28) + 97))
  {
    operations_research::sat::SatSolver::ComputeUnionOfReasons((uint64_t)this, (int **)this + 117, (int **)this + 123);
    operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((_QWORD **)this + 30), (int **)this + 123);
  }
  v28 = *(int **)(*((_QWORD *)this + 26) + 144);
  if (v28)
    operations_research::sat::SatSolver::BumpClauseActivity((uint64_t)this, v28);
  operations_research::sat::SatSolver::BumpReasonActivities(this, (int **)this + 120);
  operations_research::sat::SatDecisionPolicy::UpdateVariableActivityIncrement(*((operations_research::sat::SatDecisionPolicy **)this
                                                                               + 30));
  *((double *)this + 63) = *((double *)this + 63) * (1.0 / *(double *)(*((_QWORD *)this + 28) + 232));
  operations_research::sat::PbConstraints::UpdateActivityIncrement(*((operations_research::sat::PbConstraints **)this + 5));
  v29 = *((_QWORD *)this + 28);
  if (!(*((_QWORD *)this + 47) % *(int *)(v29 + 264)))
  {
    v30 = *(double *)(v29 + 216);
    if (v30 < *(double *)(v29 + 248))
    {
      v31 = v30 + *(double *)(v29 + 256);
      *(_DWORD *)(v29 + 20) |= 0x80000u;
      *(double *)(v29 + 216) = v31;
    }
  }
  if (!*(_BYTE *)(v29 + 132))
  {
LABEL_114:
    v90 = (_QWORD *)*((_QWORD *)this + 3);
    if (v90[27] || v90[28] != v90[29])
    {
      v91 = *(_DWORD *)(*((_QWORD *)this + 28) + 276);
      if (v91 == 4)
      {
        v95 = *((_QWORD *)this + 26);
        v96 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(_QWORD *)this);
        operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirstWithTransitiveReduction(v90, v95, (uint64_t)v27, (uint64_t)this + 520, v96);
        v92 = *((_QWORD *)this + 118);
        v93 = *((_QWORD *)this + 117);
        v94 = *(_DWORD *)(*((_QWORD *)this + 28) + 200);
        goto LABEL_122;
      }
      if (v91 == 1)
        operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirst(*((_QWORD **)this + 3), *((_QWORD *)this + 26), v27, (_QWORD *)this + 65);
    }
    v92 = *((_QWORD *)this + 118);
    v93 = *((_QWORD *)this + 117);
    v94 = *(_DWORD *)(*((_QWORD *)this + 28) + 200);
    if (v94 > 3)
    {
LABEL_126:
      v97 = (uint64_t)(*((_QWORD *)this + 118) - *((_QWORD *)this + 117)) >> 2;
      v98 = (int)((v92 - v93) >> 2);
      v99 = v98 > v97;
      v100 = v98 - v97;
      if (v99)
      {
        v101 = v100 + *((_QWORD *)this + 49);
        ++*((_QWORD *)this + 48);
        *((_QWORD *)this + 49) = v101;
      }
      goto LABEL_129;
    }
LABEL_122:
    switch(v94)
    {
      case 0u:
        break;
      case 1u:
        operations_research::sat::SatSolver::MinimizeConflictSimple((uint64_t)this, v27);
        goto LABEL_126;
      case 2u:
        operations_research::sat::SatSolver::MinimizeConflictRecursively((uint64_t)this, v27);
        goto LABEL_126;
      case 3u:
        operations_research::sat::SatSolver::MinimizeConflictExperimental((uint64_t)this, v27);
        goto LABEL_126;
      default:
        goto LABEL_126;
    }
LABEL_129:
    v102 = (_QWORD *)*((_QWORD *)this + 3);
    if (v102[27] || v102[28] != v102[29])
    {
      v103 = *(_DWORD *)(*((_QWORD *)this + 28) + 276);
      if (v103 == 3)
      {
        operations_research::sat::BinaryImplicationGraph::MinimizeConflictExperimental(v102, *((_QWORD *)this + 26), (int **)v27);
      }
      else if (v103 == 2)
      {
        operations_research::sat::BinaryImplicationGraph::MinimizeConflictWithReachability(v102, v27);
      }
    }
    v104 = *((_QWORD *)this + 117);
    v105 = *((_QWORD *)this + 118) - v104;
    v106 = v105 >> 2;
    *((_QWORD *)this + 51) += v105 >> 2;
    if ((unint64_t)v105 < 5)
    {
      v108 = 0;
    }
    else
    {
      v107 = *(_QWORD *)(*((_QWORD *)this + 26) + 120);
      if (v106 <= 2)
        v106 = 2;
      if (v106 >= 3)
      {
        v110 = 0;
        v111 = 0;
        v109 = (v106 - 1) | 1;
        v112 = (int *)(v104 + 8);
        v113 = (v106 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v110 <= ((*(_DWORD *)(v107 + 8 * (*(v112 - 1) >> 1)) >> 1) & 0x7FFFFFF))
            v110 = (*(_DWORD *)(v107 + 8 * (*(v112 - 1) >> 1)) >> 1) & 0x7FFFFFF;
          if (v111 <= ((*(_DWORD *)(v107 + 8 * (*v112 >> 1)) >> 1) & 0x7FFFFFF))
            v111 = (*(_DWORD *)(v107 + 8 * (*v112 >> 1)) >> 1) & 0x7FFFFFF;
          v112 += 2;
          v113 -= 2;
        }
        while (v113);
        if (v110 <= v111)
          v108 = v111;
        else
          v108 = v110;
        if (v106 - 1 == ((v106 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_155;
      }
      else
      {
        v108 = 0;
        v109 = 1;
      }
      v114 = v106 - v109;
      v115 = (int *)(v104 + 4 * v109);
      do
      {
        v116 = *v115++;
        v117 = (*(_DWORD *)(v107 + 8 * (v116 >> 1)) >> 1) & 0x7FFFFFF;
        if (v108 <= v117)
          v108 = v117;
        --v114;
      }
      while (v114);
    }
LABEL_155:
    operations_research::sat::SatSolver::Backtrack(this, v108);
    v119 = *((_QWORD *)this + 165);
    if (v119)
      operations_research::sat::DratProofHandler::AddClause(v119, *((int **)this + 117), (uint64_t)(*((_QWORD *)this + 118) - *((_QWORD *)this + 117)) >> 2);
    v120 = (_DWORD **)*((_QWORD *)this + 126);
    v121 = (_DWORD **)*((_QWORD *)this + 127);
    if (v120 == v121 || !*(_BYTE *)(*((_QWORD *)this + 28) + 305))
    {
      v136 = 1;
    }
    else
    {
      v122 = 1;
      do
      {
        v127 = 0;
        v129 = *v120;
        v130 = (_QWORD *)*((_QWORD *)this + 4);
        v131 = (unint64_t)*v120
             + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v120)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + (_QWORD)*v120)));
        v132 = ((v131 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v131);
        v133 = v130[42];
        v128 = (v132 >> 7) ^ (v133 >> 12);
        v134 = v130[45];
        v135 = 0x101010101010101 * (v132 & 0x7F);
        while (1)
        {
          v123 = v128 & v134;
          v124 = *(_QWORD *)(v133 + v123);
          v125 = ((v124 ^ v135) - 0x101010101010101) & ~(v124 ^ v135) & 0x8080808080808080;
          if (v125)
            break;
LABEL_163:
          if ((v124 & (~v124 << 6) & 0x8080808080808080) != 0)
          {
            v126 = v130[45];
            goto LABEL_166;
          }
          v127 += 8;
          v128 = v127 + v123;
        }
        while (1)
        {
          v126 = (v123 + (__clz(__rbit64(v125)) >> 3)) & v134;
          if (*(_DWORD **)(v130[43] + 24 * v126) == v129)
            break;
          v125 &= v125 - 1;
          if (!v125)
            goto LABEL_163;
        }
LABEL_166:
        if (v126 == v134)
          v122 = 0;
        operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v130, v129);
        ++v120;
      }
      while (v120 != v121);
      operations_research::sat::LiteralWatchers::CleanUpWatchers(*((_QWORD *)this + 4));
      *((_QWORD *)this + 53) += (uint64_t)(*((_QWORD *)this + 127) - *((_QWORD *)this + 126)) >> 3;
      v136 = v122 & 1;
    }
    v137 = operations_research::sat::SatSolver::AddLearnedClauseAndEnqueueUnitPropagation((uint64_t)this, (uint64_t)v27, v136, v118);
    operations_research::sat::SatDecisionPolicy::OnConflict(*((operations_research::sat::SatDecisionPolicy **)this + 30));
    operations_research::sat::RestartPolicy::OnConflict(*((operations_research::sat::RestartPolicy **)this + 29), v10, v11, v137);
    return 0;
  }
  v32 = *((_QWORD *)this + 5);
  v33 = *(int *)(v32 + 296);
  if ((_DWORD)v33 == -1 || !*(_QWORD *)(*(_QWORD *)(v32 + 40) + 8 * v33))
  {
    v34 = (int *)*((_QWORD *)this + 120);
    v35 = (int *)*((_QWORD *)this + 121);
    while (1)
    {
      if (v34 == v35)
        goto LABEL_114;
      v36 = (_QWORD *)*((_QWORD *)this + 26);
      v37 = (uint64_t)*v34 >> 1;
      v38 = v36[15];
      v39 = *(_DWORD *)(v38 + 8 * (*v34 >> 1));
      if (v39 >> 28 != 3)
        break;
      v37 = *(int *)(v36[19] + 4 * v37);
      v39 = *(_DWORD *)(v38 + 8 * v37);
      v40 = v37;
      if (v39 >> 28 != 3)
        goto LABEL_48;
      v40 = *(int *)(v36[19] + 4 * v37);
      v41 = *(_DWORD *)(v38 + 8 * v40) >> 28;
      if (v41)
      {
LABEL_53:
        v42 = (operations_research::sat::PbConstraints *)*((_QWORD *)this + 5);
        if (v41 != *((_DWORD *)v42 + 8))
          goto LABEL_44;
        goto LABEL_54;
      }
LABEL_49:
      v42 = (operations_research::sat::PbConstraints *)*((_QWORD *)this + 5);
      if (*(_DWORD *)(v36[31] + 4 * v40) != *((_DWORD *)v42 + 8))
        goto LABEL_44;
LABEL_54:
      if (operations_research::sat::PbConstraints::ReasonPbConstraint(v42, *(_DWORD *)(v38 + 8 * v37 + 4)))
        goto LABEL_55;
LABEL_44:
      ++v34;
    }
    v40 = (uint64_t)*v34 >> 1;
LABEL_48:
    v41 = v39 >> 28;
    if (v41)
      goto LABEL_53;
    goto LABEL_49;
  }
LABEL_55:
  operations_research::sat::MutableUpperBoundedLinearConstraint::ClearAndResize((operations_research::sat::SatSolver *)((char *)this + 1184), *((_DWORD *)this + 4));
  v43 = *((_QWORD *)this + 5);
  v44 = *(int *)(v43 + 296);
  if ((_DWORD)v44 == -1
    || (v45 = *(operations_research::sat::UpperBoundedLinearConstraint **)(*(_QWORD *)(v43 + 40) + 8 * v44)) == 0)
  {
    v47 = *((_QWORD *)this + 26);
    v48 = *(int **)(v47 + 96);
    v49 = *(_QWORD *)(v47 + 104) - (_QWORD)v48;
    if (v49)
    {
      v50 = (unint64_t)(v49 - 4) >> 2;
      v51 = 4 * (v49 >> 2);
      do
      {
        v52 = *v48++;
        operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)this + 148, v52 ^ 1, 1);
        v51 -= 4;
      }
      while (v51);
      v146[0] = v50;
      v27 = (uint64_t *)((char *)this + 936);
    }
    else
    {
      v146[0] = -1;
      LODWORD(v147) = 0;
      v151 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)v146, (int)&v147, "value >= 0");
      if (v151)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v147, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.h", 265, &v151);
        google::LogMessage::stream((google::LogMessage *)&v147);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v147);
      }
      v50 = v146[0];
    }
    *((_QWORD *)this + 151) += v50;
    v46 = -1;
  }
  else
  {
    operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(v45, (operations_research::sat::SatSolver *)((char *)this + 1184));
    *(_DWORD *)(*((_QWORD *)this + 5) + 296) = -1;
    v46 = operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix((operations_research::sat::SatSolver *)((char *)this + 1184), *((const operations_research::sat::Trail **)this + 26), v17 + 1);
  }
  v150 = 0;
  operations_research::sat::SatSolver::ComputePBConflict((uint64_t)this, v17, v46, (operations_research::sat::SatSolver *)((char *)this + 1184), &v150);
  v53 = v150;
  if (v150 == -1)
  {
LABEL_74:
    result = 0;
    *((_BYTE *)this + 496) = 1;
    return result;
  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  operations_research::sat::MutableUpperBoundedLinearConstraint::CopyIntoVector((_QWORD *)this + 148, (uint64_t *)&v147);
  v54 = v147;
  if (*((_QWORD *)this + 151) != 0xAAAAAAAAAAAAAAABLL * (v148 - v147) - 1)
    goto LABEL_103;
  if (v147 != v148)
  {
    v55 = v147;
    while (*(_QWORD *)(v55 + 1) == 1)
    {
      v55 += 3;
      if (v55 == v148)
        goto LABEL_71;
    }
LABEL_103:
    v84 = *((_DWORD *)this + 76);
    LODWORD(v146[0]) = v53;
    v152 = v84;
    if (v53 >= v84)
    {
      v151 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v146, (int)&v152, "pb_backjump_level < CurrentDecisionLevel()");
      if (v151)
      {
        google::LogMessageFatal::LogMessageFatal(v146, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 676, &v151);
        google::LogMessage::stream((google::LogMessage *)v146);
        goto LABEL_180;
      }
    }
    operations_research::sat::SatSolver::Backtrack(this, v53);
    if ((operations_research::sat::PbConstraints::AddLearnedConstraint(*((operations_research::sat::PbConstraints **)this + 5), &v147, *((_QWORD *)this + 151), *((_QWORD *)this + 26)) & 1) == 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v146, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 679);
      v138 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v146);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Check failed: pb_constraints_->AddLearnedConstraint(cst, pb_conflict_.Rhs(), trail_) ", 85);
      goto LABEL_180;
    }
    v85 = *((_DWORD *)this + 84);
    LODWORD(v146[0]) = *(_DWORD *)(*((_QWORD *)this + 26) + 12);
    v152 = v85;
    if (SLODWORD(v146[0]) <= v85)
    {
      v151 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v146, (int)&v152, "trail_->Index() > last_decision_or_backtrack_trail_index_");
      if (v151)
      {
        google::LogMessageFatal::LogMessageFatal(v146, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 680, &v151);
        google::LogMessage::stream((google::LogMessage *)v146);
        goto LABEL_180;
      }
    }
    v86 = 0;
    v54 = v147;
    *((_QWORD *)this + 50) -= 0x5555555555555555 * (v148 - v147);
    goto LABEL_111;
  }
LABEL_71:
  if (v53 >= (int)operations_research::sat::SatSolver::ComputeBacktrackLevel((uint64_t)this, v27))
  {
    v86 = 1;
    goto LABEL_111;
  }
  *((_QWORD *)this + 127) = *((_QWORD *)this + 126);
  *((_QWORD *)this + 118) = *((_QWORD *)this + 117);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 520, *((_DWORD *)this + 4));
  v144 = v11;
  v140 = v10;
  v57 = v147;
  v56 = v148;
  if (v147 != v148)
  {
    LODWORD(v141) = 0;
    v58 = 0;
    v145 = v27;
    while (1)
    {
      v60 = *v57 >> 1;
      v61 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 120) + 8 * v60) >> 1) & 0x7FFFFFF;
      if (!v61)
        goto LABEL_77;
      v62 = (int *)*((_QWORD *)this + 118);
      if (v61 > v58)
      {
        v141 = ((unint64_t)v62 - *v27) >> 2;
        v58 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 120) + 8 * v60) >> 1) & 0x7FFFFFF;
      }
      v63 = *v57 ^ 1;
      v64 = *((_QWORD *)this + 119);
      if ((unint64_t)v62 >= v64)
        break;
      *v62 = v63;
      v59 = (uint64_t)(v62 + 1);
LABEL_76:
      *((_QWORD *)this + 118) = v59;
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)this + 65, v60);
LABEL_77:
      v57 += 3;
      if (v57 == v56)
        goto LABEL_109;
    }
    v142 = *v57 >> 1;
    v143 = v58;
    v65 = (int *)*v27;
    v66 = (uint64_t)v62 - *v27;
    v67 = v66 >> 2;
    v68 = (v66 >> 2) + 1;
    if (v68 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v69 = v64 - (_QWORD)v65;
    if (v69 >> 1 > v68)
      v68 = v69 >> 1;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
      v70 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v71 = v70;
      v72 = operator new(4 * v70);
      v70 = v71;
      v73 = (int *)&v72[4 * v67];
      *v73 = v63;
      v59 = (uint64_t)(v73 + 1);
      if (v62 != v65)
        goto LABEL_91;
    }
    else
    {
      v72 = 0;
      v73 = (int *)(4 * v67);
      *(_DWORD *)(4 * v67) = v63;
      v59 = 4 * v67 + 4;
      if (v62 != v65)
      {
LABEL_91:
        v74 = (char *)(v62 - 1) - (char *)v65;
        if (v74 >= 0x2C)
        {
          v75 = (char *)v62 - &v72[v66];
          v27 = v145;
          if (v75 >= 0x20)
          {
            v76 = (v74 >> 2) + 1;
            v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
            v78 = &v62[v77 / 0xFFFFFFFFFFFFFFFCLL];
            v73 = (int *)((char *)v73 - v77);
            v79 = &v72[4 * v67 - 16];
            v80 = v62 - 4;
            v81 = v76 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v82 = *(_OWORD *)v80;
              *(v79 - 1) = *((_OWORD *)v80 - 1);
              *v79 = v82;
              v79 -= 2;
              v80 -= 8;
              v81 -= 8;
            }
            while (v81);
            v62 = v78;
            if (v76 == (v76 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_100;
          }
        }
        else
        {
          v27 = v145;
        }
        do
        {
          v83 = *--v62;
          *--v73 = v83;
        }
        while (v62 != v65);
LABEL_100:
        *((_QWORD *)this + 117) = v73;
        *((_QWORD *)this + 118) = v59;
        *((_QWORD *)this + 119) = &v72[4 * v70];
        if (v65)
          operator delete(v65);
        v58 = v143;
        v60 = v142;
        goto LABEL_76;
      }
    }
    v27 = v145;
    goto LABEL_100;
  }
  LODWORD(v141) = 0;
LABEL_109:
  v87 = (int *)*((_QWORD *)this + 117);
  if (v87 == *((int **)this + 118))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v146, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 708);
    v139 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v146);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Check failed: !learned_conflict_.empty() ", 41);
LABEL_180:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v146);
  }
  v88 = (int)v141;
  v89 = *v87;
  *v87 = v87[v88];
  v87[v88] = v89;
  v86 = 1;
  v54 = v147;
  v10 = v140;
  v11 = v144;
LABEL_111:
  if (v54)
  {
    v148 = v54;
    operator delete(v54);
  }
  if ((v86 & 1) != 0)
    goto LABEL_114;
  return 0;
}

void sub_22DBF46E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF46EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF46F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(operations_research::sat::SatSolver *this)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (*((_BYTE *)this + 496))
    return 0;
  v2 = *((_DWORD *)this + 85);
  if (*((_DWORD *)this + 76) > v2)
  {
    operations_research::sat::SatSolver::Backtrack(this, v2);
    return 1;
  }
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
  {
    if (*((_BYTE *)this + 496))
      return 0;
  }
  if (*((_BYTE *)this + 496))
    return 0;
  v4 = *((_DWORD *)this + 76);
  v5 = *((_DWORD *)this + 85);
  if (v4 >= v5)
    return 1;
  v6 = *((_QWORD *)this + 46);
  v7 = *((_DWORD *)this + 76);
  while (1)
  {
    v8 = *((_QWORD *)this + 39);
    v9 = *(int *)(v8 + 8 * v7++ + 4);
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v10 >> v9) & 1) == 0)
      break;
LABEL_11:
    if (v7 >= v5)
    {
      result = 1;
      goto LABEL_22;
    }
  }
  if (((v10 >> (v9 & 0x3F ^ 1)) & 1) != 0)
  {
    result = 0;
    *(_DWORD *)(v8 + 8 * v4 + 4) = v9;
    goto LABEL_22;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v9) != -1)
  {
    if (*((_DWORD *)this + 76) <= v4)
      v7 = *((_DWORD *)this + 76);
    v4 = *((_DWORD *)this + 76);
    goto LABEL_11;
  }
  result = 0;
LABEL_22:
  *((_QWORD *)this + 46) = v6;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  return result;
}

void operations_research::sat::SatSolver::Backtrack(operations_research::sat::SatSolver *this, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;

  if (*((_DWORD *)this + 76) == a2)
    return;
  *(_DWORD *)(*((_QWORD *)this + 26) + 8) = *(_DWORD *)(*((_QWORD *)this + 26) + 8) & 0xF0000001 | (2 * (a2 & 0x7FFFFFF));
  if (*((_DWORD *)this + 76) > a2)
  {
    *((_DWORD *)this + 76) = a2;
    v3 = *(unsigned int *)(*((_QWORD *)this + 39) + 8 * a2);
    v4 = (uint64_t *)*((_QWORD *)this + 6);
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    if (v4 == v5)
      goto LABEL_7;
    do
    {
LABEL_6:
      v6 = *v4++;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 24))(v6, *((_QWORD *)this + 26), v3);
    }
    while (v4 != v5);
    goto LABEL_7;
  }
  v3 = 0;
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  if (v4 != v5)
    goto LABEL_6;
LABEL_7:
  operations_research::sat::SatDecisionPolicy::Untrail(*((operations_research::sat::SatDecisionPolicy **)this + 30), v3);
  v7 = *((_QWORD *)this + 26);
  v8 = *(int *)(v7 + 12);
  *(_QWORD *)v7 += (int)v8 - (int)v3;
  if ((int)v8 > (int)v3)
  {
    v9 = *(_QWORD *)(v7 + 24);
    v10 = v8 - (int)v3;
    v11 = (int *)(*(_QWORD *)(v7 + 72) + 4 * (int)v3);
    do
    {
      v12 = *v11++;
      *(_QWORD *)(v9 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v12 & 0x3E));
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(v7 + 12) = v3;
  *((_DWORD *)this + 84) = v3;
}

uint64_t operations_research::sat::SatSolver::ReapplyAssumptionsIfNeeded(operations_research::sat::SatSolver *this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (*((_BYTE *)this + 496))
    return 0;
  v3 = *((_DWORD *)this + 76);
  v4 = *((_DWORD *)this + 85);
  if (v3 >= v4)
    return 1;
  v5 = *((_QWORD *)this + 46);
  v6 = *((_DWORD *)this + 76);
  while (1)
  {
    v7 = *((_QWORD *)this + 39);
    v8 = *(int *)(v7 + 8 * v6++ + 4);
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v9 >> v8) & 1) == 0)
      break;
LABEL_5:
    if (v6 >= v4)
    {
      result = 1;
      goto LABEL_16;
    }
  }
  if (((v9 >> (v8 & 0x3F ^ 1)) & 1) != 0)
  {
    result = 0;
    *(_DWORD *)(v7 + 8 * v3 + 4) = v8;
    goto LABEL_16;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v8) != -1)
  {
    if (*((_DWORD *)this + 76) <= v3)
      v6 = *((_DWORD *)this + 76);
    v3 = *((_DWORD *)this + 76);
    goto LABEL_5;
  }
  result = 0;
LABEL_16:
  *((_QWORD *)this + 46) = v5;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  return result;
}

uint64_t operations_research::sat::SatSolver::ResetToLevelZero(operations_research::sat::SatSolver *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 496))
    return 0;
  *((_DWORD *)this + 85) = 0;
  operations_research::sat::SatSolver::Backtrack(this, 0);
  result = 0;
  do
  {
    if (*((_BYTE *)this + 496))
      break;
    result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
  }
  while ((result & 1) == 0);
  return result;
}

uint64_t operations_research::sat::SatSolver::ResetWithGivenAssumptions(uint64_t a1, int **a2)
{
  uint64_t result;
  int *v5;
  BOOL v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_BYTE *)(a1 + 496))
    return 0;
  *(_DWORD *)(a1 + 340) = 0;
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  result = 0;
  if (*(_BYTE *)(a1 + 496))
    return result;
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 496))
      return 0;
  }
  v5 = *a2;
  v6 = a2[1] == *a2;
  v7 = a2[1] - *a2;
  *(_DWORD *)(a1 + 340) = v7;
  if (!v6)
  {
    if (v7 <= 1)
      v7 = 1;
    v8 = (_DWORD *)(*(_QWORD *)(a1 + 312) + 4);
    do
    {
      v9 = *v5++;
      *v8 = v9;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  if (*(_BYTE *)(a1 + 496))
    return 0;
  v10 = *(_DWORD *)(a1 + 304);
  v11 = *(_DWORD *)(a1 + 340);
  if (v10 >= v11)
    return 1;
  v12 = *(_QWORD *)(a1 + 368);
  v13 = *(_DWORD *)(a1 + 304);
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 312);
    v15 = *(int *)(v14 + 8 * v13++ + 4);
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 24) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v16 >> v15) & 1) == 0)
      break;
LABEL_16:
    if (v13 >= v11)
    {
      result = 1;
      goto LABEL_27;
    }
  }
  if (((v16 >> (v15 & 0x3F ^ 1)) & 1) != 0)
  {
    result = 0;
    *(_DWORD *)(v14 + 8 * v10 + 4) = v15;
    goto LABEL_27;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(a1, v15) != -1)
  {
    if (*(_DWORD *)(a1 + 304) <= v10)
      v13 = *(_DWORD *)(a1 + 304);
    v10 = *(_DWORD *)(a1 + 304);
    goto LABEL_16;
  }
  result = 0;
LABEL_27:
  *(_QWORD *)(a1 + 368) = v12;
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 304);
  return result;
}

void operations_research::sat::SatSolver::ComputeFirstUIPConflict(uint64_t a1, int a2, int **a3, int **a4, uint64_t **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  _OWORD *v39;
  int *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _BYTE *v57;
  int *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  _BYTE *v66;
  int *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _OWORD *v72;
  int *v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _OWORD *v81;
  int *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  int **v86;
  uint64_t v87;
  char **v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  int *v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  int *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  int **v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  unint64_t v151;
  int v152;
  operations_research::sat::LiteralWatchers *v153;
  int v154;
  unint64_t v155;
  int *v156;
  uint64_t v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  int *v165;
  char *v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  _OWORD *v172;
  int *v173;
  uint64_t v174;
  __int128 v175;
  int v176;
  int *v177;
  int v178;
  _QWORD *v179;
  uint64_t **v180;
  uint64_t v181;
  void **v182;
  int **v183;
  int *v184;
  unint64_t v185;
  int v186;
  int v187;
  int **v188;
  _QWORD *v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unint64_t v194;

  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 520, *(_DWORD *)(a1 + 16));
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (a2 == -1)
    return;
  v10 = (_QWORD *)a1;
  v11 = *(_QWORD **)(a1 + 208);
  v187 = (*(_DWORD *)(v11[15] + 8 * (*(int *)(v11[9] + 4 * a2) >> 1)) >> 1) & 0x7FFFFFF;
  if (!v187)
    return;
  v180 = a5;
  v190 = 0;
  v12 = (int *)v11[12];
  v13 = (uint64_t)(v11[13] - (_QWORD)v12) >> 2;
  v182 = (void **)(a1 + 576);
  v183 = a4;
  v179 = (_QWORD *)(a1 + 1072);
  v181 = v11[18];
  v188 = a3;
  v189 = (_QWORD *)a1;
  if (!v13)
    goto LABEL_87;
  while (2)
  {
    v15 = 0;
    v16 = 0;
    v17 = &v12[v13];
    v184 = v17;
    do
    {
      v18 = *v12;
      v19 = *v12 >> 1;
      v20 = (*(_DWORD *)(*(_QWORD *)(v10[26] + 120) + 8 * v19) >> 1) & 0x7FFFFFF;
      if (v20)
        ++v16;
      v21 = (unint64_t)((uint64_t)v18 >> 1) >> 6;
      v22 = v10[66];
      v23 = *(_QWORD *)(v22 + 8 * v21);
      if ((v23 & (1 << v19)) == 0)
      {
        *(_QWORD *)(v22 + 8 * v21) = v23 | (1 << v19);
        v24 = (int *)v10[73];
        v25 = v10[74];
        if ((unint64_t)v24 < v25)
        {
          *v24 = v19;
          v10[73] = v24 + 1;
          if (v20 == v187)
            goto LABEL_7;
          goto LABEL_35;
        }
        v26 = (int *)*v182;
        v27 = (char *)v24 - (_BYTE *)*v182;
        v28 = v27 >> 2;
        v29 = (v27 >> 2) + 1;
        if (v29 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = v25 - (_QWORD)v26;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        v186 = v16;
        v191 = v15;
        v185 = v29;
        if (v29)
        {
          if (v29 >> 62)
            goto LABEL_183;
          v31 = operator new(4 * v29);
          v10 = v189;
          v32 = (int *)&v31[4 * v28];
          *v32 = v19;
          v33 = (uint64_t)(v32 + 1);
          if (v24 != v26)
            goto LABEL_23;
        }
        else
        {
          v31 = 0;
          v32 = (int *)(4 * v28);
          *(_DWORD *)(4 * v28) = v19;
          v33 = 4 * v28 + 4;
          if (v24 != v26)
          {
LABEL_23:
            v34 = (char *)(v24 - 1) - (char *)v26;
            v35 = v185;
            if (v34 < 0x2C)
              goto LABEL_190;
            if ((unint64_t)((char *)v24 - &v31[v27]) < 0x20)
              goto LABEL_190;
            v36 = (v34 >> 2) + 1;
            v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
            v38 = &v24[v37 / 0xFFFFFFFFFFFFFFFCLL];
            v32 = (int *)((char *)v32 - v37);
            v39 = &v31[4 * v28 - 16];
            v40 = v24 - 4;
            v41 = v36 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              *v39 = v42;
              v39 -= 2;
              v40 -= 8;
              v41 -= 8;
            }
            while (v41);
            v24 = v38;
            if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_190:
              do
              {
                v43 = *--v24;
                *--v32 = v43;
              }
              while (v24 != v26);
            }
LABEL_32:
            v10[72] = v32;
            v10[73] = v33;
            v10[74] = &v31[4 * v35];
            if (v26)
            {
              operator delete(v26);
              v10 = v189;
            }
            a3 = v188;
            v16 = v186;
            v15 = v191;
            v17 = v184;
            v10[73] = v33;
            if (v20 == v187)
            {
LABEL_7:
              ++v15;
              ++v190;
              goto LABEL_8;
            }
LABEL_35:
            if (v20)
            {
              v45 = a3[1];
              v44 = (unint64_t)a3[2];
              if ((unint64_t)v45 < v44)
              {
                *v45 = v18;
                v46 = (uint64_t)(v45 + 1);
LABEL_70:
                ++v15;
                a3[1] = (int *)v46;
                goto LABEL_8;
              }
              v50 = *a3;
              v51 = (char *)v45 - (char *)*a3;
              v52 = v51 >> 2;
              v53 = (v51 >> 2) + 1;
              if (v53 >> 62)
                goto LABEL_186;
              v54 = v44 - (_QWORD)v50;
              if (v54 >> 1 > v53)
                v53 = v54 >> 1;
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                v55 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v55 = v53;
              v192 = v15;
              if (v55)
              {
                if (v55 >> 62)
                  goto LABEL_183;
                v56 = v16;
                v57 = operator new(4 * v55);
                v10 = v189;
                v58 = (int *)&v57[4 * v52];
                *v58 = v18;
                v46 = (uint64_t)(v58 + 1);
                if (v45 == v50)
                  goto LABEL_67;
LABEL_61:
                v68 = (char *)(v45 - 1) - (char *)v50;
                if (v68 < 0x2C)
                  goto LABEL_191;
                if ((unint64_t)((char *)v45 - &v57[v51]) < 0x20)
                  goto LABEL_191;
                v69 = (v68 >> 2) + 1;
                v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
                v71 = &v45[v70 / 0xFFFFFFFFFFFFFFFCLL];
                v58 = (int *)((char *)v58 - v70);
                v72 = &v57[4 * v52 - 16];
                v73 = v45 - 4;
                v74 = v69 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v75 = *(_OWORD *)v73;
                  *(v72 - 1) = *((_OWORD *)v73 - 1);
                  *v72 = v75;
                  v72 -= 2;
                  v73 -= 8;
                  v74 -= 8;
                }
                while (v74);
                v45 = v71;
                if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_191:
                  do
                  {
                    v76 = *--v45;
                    *--v58 = v76;
                  }
                  while (v45 != v50);
                }
              }
              else
              {
                v56 = v16;
                v57 = 0;
                v58 = (int *)(4 * v52);
                *(_DWORD *)(4 * v52) = v18;
                v46 = 4 * v52 + 4;
                if (v45 != v50)
                  goto LABEL_61;
              }
LABEL_67:
              *v188 = v58;
              v188[1] = (int *)v46;
              v188[2] = (int *)&v57[4 * v55];
              if (v50)
              {
                operator delete(v50);
                v10 = v189;
              }
              v16 = v56;
              a3 = v188;
              v15 = v192;
              v17 = v184;
              goto LABEL_70;
            }
            v48 = v183[1];
            v47 = (unint64_t)v183[2];
            if ((unint64_t)v48 < v47)
            {
              *v48 = v18;
              v49 = (uint64_t)(v48 + 1);
LABEL_81:
              v183[1] = (int *)v49;
              goto LABEL_8;
            }
            v59 = *v183;
            v60 = (char *)v48 - (char *)*v183;
            v61 = v60 >> 2;
            v62 = (v60 >> 2) + 1;
            if (v62 >> 62)
              goto LABEL_185;
            v63 = v47 - (_QWORD)v59;
            if (v63 >> 1 > v62)
              v62 = v63 >> 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
              v64 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            v193 = v15;
            if (v64)
            {
              if (v64 >> 62)
                goto LABEL_183;
              v65 = v16;
              v66 = operator new(4 * v64);
              v10 = v189;
              v67 = (int *)&v66[4 * v61];
              *v67 = v18;
              v49 = (uint64_t)(v67 + 1);
              if (v48 == v59)
                goto LABEL_78;
            }
            else
            {
              v65 = v16;
              v66 = 0;
              v67 = (int *)(4 * v61);
              *(_DWORD *)(4 * v61) = v18;
              v49 = 4 * v61 + 4;
              if (v48 == v59)
              {
LABEL_78:
                *v183 = v67;
                v183[1] = (int *)v49;
                v183[2] = (int *)&v66[4 * v64];
                if (v59)
                {
                  operator delete(v59);
                  v10 = v189;
                }
                v16 = v65;
                a3 = v188;
                v15 = v193;
                v17 = v184;
                goto LABEL_81;
              }
            }
            v77 = (char *)(v48 - 1) - (char *)v59;
            if (v77 < 0x2C)
              goto LABEL_192;
            if ((unint64_t)((char *)v48 - &v66[v60]) < 0x20)
              goto LABEL_192;
            v78 = (v77 >> 2) + 1;
            v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
            v80 = &v48[v79 / 0xFFFFFFFFFFFFFFFCLL];
            v67 = (int *)((char *)v67 - v79);
            v81 = &v66[4 * v61 - 16];
            v82 = v48 - 4;
            v83 = v78 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              *v81 = v84;
              v81 -= 2;
              v82 -= 8;
              v83 -= 8;
            }
            while (v83);
            v48 = v80;
            if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_192:
              do
              {
                v85 = *--v48;
                *--v67 = v85;
              }
              while (v48 != v59);
            }
            goto LABEL_78;
          }
        }
        v35 = v185;
        goto LABEL_32;
      }
LABEL_8:
      ++v12;
    }
    while (v12 != v17);
    v86 = v183;
    v87 = v181;
    if (v15 <= 0)
    {
      v88 = (char **)v180;
      if (!v181)
        goto LABEL_109;
    }
    else
    {
      v88 = (char **)v180;
      v180[1] = *v180;
      if (!v181)
        goto LABEL_109;
    }
LABEL_88:
    if (a3[1] - *a3 + v190 != v16)
      goto LABEL_109;
    v90 = v88[1];
    v89 = (unint64_t)v88[2];
    if ((unint64_t)v90 < v89)
    {
      *(_QWORD *)v90 = v87;
      v91 = (uint64_t)(v90 + 8);
      goto LABEL_108;
    }
    v92 = *v88;
    v93 = (v90 - v92) >> 3;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v95 = v89 - (_QWORD)v92;
    if (v95 >> 2 > v94)
      v94 = v95 >> 2;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v96 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    if (!v96)
    {
      v97 = 0;
      v98 = (uint64_t *)(8 * v93);
      *(_QWORD *)(8 * v93) = v181;
      v91 = 8 * v93 + 8;
      if (v90 != v92)
        goto LABEL_100;
      goto LABEL_158;
    }
    if (v96 >> 61)
      goto LABEL_183;
    v97 = (char *)operator new(8 * v96);
    v10 = v189;
    v98 = (uint64_t *)&v97[8 * v93];
    *v98 = v181;
    v91 = (uint64_t)(v98 + 1);
    if (v90 == v92)
    {
LABEL_158:
      v88 = (char **)v180;
      *v180 = v98;
      v180[1] = (uint64_t *)v91;
      v180[2] = (uint64_t *)&v97[8 * v96];
      if (v90)
        goto LABEL_107;
      goto LABEL_108;
    }
LABEL_100:
    v99 = v90 - 8 - v92;
    if (v99 < 0x58)
      goto LABEL_193;
    if ((unint64_t)(v92 - v97) < 0x20)
      goto LABEL_193;
    v100 = (v99 >> 3) + 1;
    v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
    v102 = &v90[-v101];
    v98 = (uint64_t *)((char *)v98 - v101);
    v103 = &v97[8 * v93 - 16];
    v104 = (__int128 *)(v90 - 16);
    v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v106 = *v104;
      *((_OWORD *)v103 - 1) = *(v104 - 1);
      *(_OWORD *)v103 = v106;
      v103 -= 32;
      v104 -= 2;
      v105 -= 4;
    }
    while (v105);
    v90 = v102;
    if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_193:
      do
      {
        v107 = *((_QWORD *)v90 - 1);
        v90 -= 8;
        *--v98 = v107;
      }
      while (v90 != v92);
    }
    v88 = (char **)v180;
    v90 = (char *)*v180;
    *v180 = v98;
    v180[1] = (uint64_t *)v91;
    v180[2] = (uint64_t *)&v97[8 * v96];
    if (v90)
    {
LABEL_107:
      operator delete(v90);
      v10 = v189;
    }
LABEL_108:
    v88[1] = (char *)v91;
LABEL_109:
    v108 = (int *)(*(_QWORD *)(v10[26] + 72) + 4 * a2);
    do
    {
      v110 = *v108--;
      v109 = v110;
      v111 = v110 >> 1;
      v112 = (uint64_t)v110 >> 1;
      v113 = 1 << (v110 >> 1);
      --a2;
    }
    while ((v113 & *(_QWORD *)(v10[66] + 8 * (v112 >> 6))) == 0);
    if (--v190)
    {
      v115 = (char *)v86[1];
      v114 = (unint64_t)v86[2];
      if ((unint64_t)v115 < v114)
      {
        *(_DWORD *)v115 = v109;
        v116 = (uint64_t)(v115 + 4);
        a3 = v188;
        goto LABEL_134;
      }
      v117 = (char *)*v86;
      v118 = (v115 - v117) >> 2;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62)
LABEL_185:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v120 = v114 - (_QWORD)v117;
      if (v120 >> 1 > v119)
        v119 = v120 >> 1;
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
        v119 = 0x3FFFFFFFFFFFFFFFLL;
      v194 = v119;
      if (v119)
      {
        if (!(v119 >> 62))
        {
          v121 = operator new(4 * v119);
          v10 = v189;
          v122 = (int *)&v121[4 * v118];
          *v122 = v109;
          v116 = (uint64_t)(v122 + 1);
          if (v115 != v117)
            goto LABEL_122;
          goto LABEL_131;
        }
LABEL_183:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v121 = 0;
      v122 = (int *)(4 * v118);
      *(_DWORD *)(4 * v118) = v109;
      v116 = 4 * v118 + 4;
      if (v115 != v117)
      {
LABEL_122:
        v123 = v115 - 4 - v117;
        if (v123 < 0x2C)
          goto LABEL_194;
        if ((unint64_t)(v117 - v121) < 0x20)
          goto LABEL_194;
        v124 = (v123 >> 2) + 1;
        v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
        v126 = &v115[-v125];
        v122 = (int *)((char *)v122 - v125);
        v127 = &v121[4 * v118 - 16];
        v128 = v115 - 16;
        v129 = v124 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v130 = *(_OWORD *)v128;
          *(v127 - 1) = *((_OWORD *)v128 - 1);
          *v127 = v130;
          v127 -= 2;
          v128 -= 32;
          v129 -= 8;
        }
        while (v129);
        v115 = v126;
        if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_194:
          do
          {
            v131 = *((_DWORD *)v115 - 1);
            v115 -= 4;
            *--v122 = v131;
          }
          while (v115 != v117);
        }
      }
LABEL_131:
      *v183 = v122;
      v183[1] = (int *)v116;
      v183[2] = (int *)&v121[4 * v194];
      if (v117)
      {
        v132 = v116;
        operator delete(v117);
        v116 = v132;
        v10 = v189;
      }
      a3 = v188;
      v86 = v183;
LABEL_134:
      v86[1] = (int *)v116;
      v133 = v10[135];
      v134 = v112;
      if ((*(_QWORD *)(v133 + 8 * (v112 >> 6)) & v113) != 0)
      {
LABEL_135:
        if (*(_DWORD *)(v10[131] + 4 * v134) != v111)
        {
          v12 = 0;
          v13 = 0;
          goto LABEL_149;
        }
      }
      else
      {
        v135 = v10[130];
        if (*(_DWORD *)(*(_QWORD *)(v135 + 120) + 8 * v112) >> 28 == 3)
        {
          v136 = *(_DWORD *)(*(_QWORD *)(v135 + 152) + 4 * v112);
          if (v136 != v111)
          {
            v134 = v136;
            if (((*(_QWORD *)(v133 + (((unint64_t)v136 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v136) & 1) != 0)
              goto LABEL_135;
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v179, v136);
            v10 = v189;
            *(_DWORD *)(v189[131] + 4 * v134) = v111;
          }
        }
      }
      v137 = (_QWORD *)v10[26];
      v138 = v137[15];
      v139 = *(_DWORD *)(v138 + 8 * v112);
      v140 = v112;
      if (v139 >> 28 == 3)
      {
        v140 = *(int *)(v137[19] + 4 * v112);
        v139 = *(_DWORD *)(v138 + 8 * v140);
      }
      v141 = v139 >> 28;
      if (v141)
      {
        if (v141 - 1 > 1)
        {
          v143 = *(_QWORD *)(v137[34] + 8 * v141);
          v144 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v143 + 32))(v143, v10[26], *(unsigned int *)(v138 + 8 * v140 + 4));
          v10 = v189;
          v145 = (uint64_t *)(v137[28] + 16 * v140);
          *v145 = v144;
          v145[1] = v146;
        }
        else
        {
          v142 = (_QWORD *)(v137[28] + 16 * v140);
          *v142 = 0;
          v142[1] = 0;
        }
        *(_DWORD *)(v137[31] + 4 * v140) = *(_DWORD *)(v138 + 8 * v140) >> 28;
        *(_DWORD *)(v137[15] + 8 * v140) &= 0xFFFFFFFu;
      }
      v147 = (int **)(v137[28] + 16 * v140);
      v12 = *v147;
      v13 = (uint64_t)v147[1];
LABEL_149:
      v148 = (_QWORD *)v10[26];
      v149 = v148[15];
      v150 = *(_DWORD *)(v149 + 8 * v112);
      if (v150 >> 28 == 3)
      {
        v151 = *(int *)(v148[19] + 4 * v112);
        v152 = *(_DWORD *)(v149 + 8 * v151) >> 28;
        if (v152)
        {
LABEL_154:
          v153 = (operations_research::sat::LiteralWatchers *)v10[4];
          if (v152 == *((_DWORD *)v153 + 8))
          {
            v14 = operations_research::sat::LiteralWatchers::ReasonClause(v153, *(_DWORD *)(v149 + 8 * v112 + 4));
            v10 = v189;
            v181 = v14;
            if (!v13)
              goto LABEL_87;
            continue;
          }
          v181 = 0;
          if (!v13)
          {
LABEL_87:
            v16 = 0;
            v86 = v183;
            v88 = (char **)v180;
            v87 = v181;
            if (v181)
              goto LABEL_88;
            goto LABEL_109;
          }
          continue;
        }
      }
      else
      {
        v151 = v112;
        v152 = v150 >> 28;
        if (v152)
          goto LABEL_154;
      }
      v152 = *(_DWORD *)(v148[31] + 4 * v151);
      goto LABEL_154;
    }
    break;
  }
  v154 = v109 ^ 1;
  v156 = a3[1];
  v155 = (unint64_t)a3[2];
  if ((unint64_t)v156 < v155)
  {
    *v156 = v154;
    v157 = (uint64_t)(v156 + 1);
    goto LABEL_181;
  }
  v158 = *a3;
  v159 = (char *)v156 - (char *)*a3;
  v160 = v159 >> 2;
  v161 = (v159 >> 2) + 1;
  if (v161 >> 62)
LABEL_186:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v162 = v155 - (_QWORD)v158;
  if (v162 >> 1 > v161)
    v161 = v162 >> 1;
  if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
    v163 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v163 = v161;
  if (v163)
  {
    if (v163 >> 62)
      goto LABEL_183;
    v164 = operator new(4 * v163);
    v165 = (int *)&v164[4 * v160];
    v166 = &v164[4 * v163];
    *v165 = v154;
    v157 = (uint64_t)(v165 + 1);
    v167 = (char *)v156 - (char *)v158;
    if (v156 == v158)
      goto LABEL_179;
LABEL_173:
    v168 = v167 - 4;
    if (v168 < 0x2C)
      goto LABEL_195;
    if ((unint64_t)((char *)v156 - &v164[v159]) < 0x20)
      goto LABEL_195;
    v169 = (v168 >> 2) + 1;
    v170 = 4 * (v169 & 0x7FFFFFFFFFFFFFF8);
    v171 = &v156[v170 / 0xFFFFFFFFFFFFFFFCLL];
    v165 = (int *)((char *)v165 - v170);
    v172 = &v164[4 * v160 - 16];
    v173 = v156 - 4;
    v174 = v169 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v175 = *(_OWORD *)v173;
      *(v172 - 1) = *((_OWORD *)v173 - 1);
      *v172 = v175;
      v172 -= 2;
      v173 -= 8;
      v174 -= 8;
    }
    while (v174);
    v156 = v171;
    if (v169 != (v169 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_195:
      do
      {
        v176 = *--v156;
        *--v165 = v176;
      }
      while (v156 != v158);
    }
  }
  else
  {
    v164 = 0;
    v165 = (int *)(4 * v160);
    v166 = 0;
    *(_DWORD *)(4 * v160) = v154;
    v157 = 4 * v160 + 4;
    v167 = (char *)v156 - (char *)v158;
    if (v156 != v158)
      goto LABEL_173;
  }
LABEL_179:
  *a3 = v165;
  a3[1] = (int *)v157;
  a3[2] = (int *)v166;
  if (v158)
    operator delete(v158);
LABEL_181:
  a3[1] = (int *)v157;
  v177 = *a3;
  v178 = *(_DWORD *)(v157 - 4);
  *(_DWORD *)(v157 - 4) = **a3;
  *v177 = v178;
}

void operations_research::sat::SatSolver::ComputeUnionOfReasons(uint64_t a1, int **a2, int **a3)
{
  _QWORD *v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  int *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _OWORD *v65;
  int *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  int *v70;
  int *v71;
  uint64_t v72;
  int v73;
  int *v74;
  int *v75;
  uint64_t v76;
  int v77;
  int **v78;
  int *v79;
  int *v80;
  void **v81;
  int **v82;
  uint64_t v83;

  v6 = (_QWORD *)(a1 + 680);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 680, *(_DWORD *)(a1 + 16));
  a3[1] = *a3;
  v78 = a2;
  v7 = *a2;
  v8 = a2[1];
  if (v7 == v8)
    goto LABEL_68;
  do
  {
    v9 = *v7++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v6, v9 >> 1);
  }
  while (v7 != v8);
  v10 = *v78;
  v79 = v78[1];
  if (*v78 == v79)
    goto LABEL_68;
  v81 = (void **)(a1 + 736);
  v82 = a3;
  do
  {
    v11 = *(_QWORD **)(a1 + 208);
    v12 = (uint64_t)*v10 >> 1;
    v13 = v11[15];
    v14 = *(_DWORD *)(v13 + 8 * (*v10 >> 1));
    v80 = v10;
    if (v14 >> 28 == 3)
    {
      v12 = *(int *)(v11[19] + 4 * v12);
      v15 = *(_DWORD *)(v13 + 8 * v12) >> 28;
      if (!v15)
        goto LABEL_8;
LABEL_11:
      if (v15 - 1 > 1)
      {
        v19 = *(_QWORD *)(v11[34] + 8 * v15);
        v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v19 + 32))(v19, v11, *(unsigned int *)(v13 + 8 * v12 + 4));
        v21 = (uint64_t *)(v11[28] + 16 * v12);
        *v21 = v20;
        v21[1] = v22;
      }
      else
      {
        v18 = (_QWORD *)(v11[28] + 16 * v12);
        *v18 = 0;
        v18[1] = 0;
      }
      *(_DWORD *)(v11[31] + 4 * v12) = *(_DWORD *)(v13 + 8 * v12) >> 28;
      *(_DWORD *)(v11[15] + 8 * v12) &= 0xFFFFFFFu;
      v16 = v11[28] + 16 * v12;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        goto LABEL_5;
LABEL_15:
      v23 = *(int **)v16;
      v24 = *(_QWORD *)v16 + 4 * v17;
      v83 = v24;
      while (1)
      {
        v26 = *v23;
        v27 = *v23 >> 1;
        v28 = (unint64_t)((uint64_t)*v23 >> 1) >> 6;
        v29 = *(_QWORD *)(a1 + 688);
        v30 = *(_QWORD *)(v29 + 8 * v28);
        if (((1 << v27) & v30) != 0)
          goto LABEL_18;
        *(_QWORD *)(v29 + 8 * v28) = (1 << v27) | v30;
        v31 = *(int **)(a1 + 744);
        v32 = *(_QWORD *)(a1 + 752);
        if ((unint64_t)v31 < v32)
        {
          *v31 = v27;
          *(_QWORD *)(a1 + 744) = v31 + 1;
          v34 = a3[1];
          v33 = (unint64_t)a3[2];
          if ((unint64_t)v34 >= v33)
            goto LABEL_44;
          goto LABEL_16;
        }
        v35 = (int *)*v81;
        v36 = (char *)v31 - (_BYTE *)*v81;
        v37 = v36 >> 2;
        v38 = (v36 >> 2) + 1;
        if (v38 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v39 = v32 - (_QWORD)v35;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v38;
        if (!v40)
          break;
        if (v40 >> 62)
          goto LABEL_72;
        v41 = operator new(4 * v40);
        v42 = (int *)&v41[4 * v37];
        *v42 = v27;
        v43 = (uint64_t)(v42 + 1);
        if (v31 != v35)
          goto LABEL_32;
LABEL_41:
        *(_QWORD *)(a1 + 736) = v42;
        *(_QWORD *)(a1 + 744) = v43;
        *(_QWORD *)(a1 + 752) = &v41[4 * v40];
        if (v35)
          operator delete(v35);
        a3 = v82;
        v24 = v83;
        *(_QWORD *)(a1 + 744) = v43;
        v34 = v82[1];
        v33 = (unint64_t)v82[2];
        if ((unint64_t)v34 >= v33)
        {
LABEL_44:
          v53 = *a3;
          v54 = (char *)v34 - (char *)*a3;
          v55 = v54 >> 2;
          v56 = (v54 >> 2) + 1;
          if (v56 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v57 = v33 - (_QWORD)v53;
          if (v57 >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            if (v58 >> 62)
LABEL_72:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v59 = operator new(4 * v58);
            v60 = (int *)&v59[4 * v55];
            *v60 = v26;
            v25 = (uint64_t)(v60 + 1);
            if (v34 != v53)
            {
LABEL_53:
              v61 = (char *)(v34 - 1) - (char *)v53;
              if (v61 < 0x2C)
                goto LABEL_77;
              if ((unint64_t)((char *)v34 - &v59[v54]) < 0x20)
                goto LABEL_77;
              v62 = (v61 >> 2) + 1;
              v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
              v64 = &v34[v63 / 0xFFFFFFFFFFFFFFFCLL];
              v60 = (int *)((char *)v60 - v63);
              v65 = &v59[4 * v55 - 16];
              v66 = v34 - 4;
              v67 = v62 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v68 = *(_OWORD *)v66;
                *(v65 - 1) = *((_OWORD *)v66 - 1);
                *v65 = v68;
                v65 -= 2;
                v66 -= 8;
                v67 -= 8;
              }
              while (v67);
              v34 = v64;
              if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_77:
                do
                {
                  v69 = *--v34;
                  *--v60 = v69;
                }
                while (v34 != v53);
              }
            }
          }
          else
          {
            v59 = 0;
            v60 = (int *)(4 * v55);
            *(_DWORD *)(4 * v55) = v26;
            v25 = 4 * v55 + 4;
            if (v34 != v53)
              goto LABEL_53;
          }
          a3 = v82;
          *v82 = v60;
          v82[1] = (int *)v25;
          v82[2] = (int *)&v59[4 * v58];
          if (v53)
            operator delete(v53);
          v24 = v83;
          goto LABEL_17;
        }
LABEL_16:
        *v34 = v26;
        v25 = (uint64_t)(v34 + 1);
LABEL_17:
        a3[1] = (int *)v25;
LABEL_18:
        if (++v23 == (int *)v24)
          goto LABEL_5;
      }
      v41 = 0;
      v42 = (int *)(4 * v37);
      *(_DWORD *)(4 * v37) = v27;
      v43 = 4 * v37 + 4;
      if (v31 == v35)
        goto LABEL_41;
LABEL_32:
      v44 = (char *)(v31 - 1) - (char *)v35;
      if (v44 < 0x2C)
        goto LABEL_78;
      if ((unint64_t)((char *)v31 - &v41[v36]) < 0x20)
        goto LABEL_78;
      v45 = (v44 >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v47 = &v31[v46 / 0xFFFFFFFFFFFFFFFCLL];
      v42 = (int *)((char *)v42 - v46);
      v48 = &v41[4 * v37 - 16];
      v49 = v31 - 4;
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v51 = *(_OWORD *)v49;
        *(v48 - 1) = *((_OWORD *)v49 - 1);
        *v48 = v51;
        v48 -= 2;
        v49 -= 8;
        v50 -= 8;
      }
      while (v50);
      v31 = v47;
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_78:
        do
        {
          v52 = *--v31;
          *--v42 = v52;
        }
        while (v31 != v35);
      }
      goto LABEL_41;
    }
    v15 = v14 >> 28;
    if (v15)
      goto LABEL_11;
LABEL_8:
    v16 = v11[28] + 16 * v12;
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      goto LABEL_15;
LABEL_5:
    v10 = v80 + 1;
  }
  while (v80 + 1 != v79);
  v70 = *v78;
  v71 = v78[1];
  if (*v78 != v71)
  {
    v72 = *(_QWORD *)(a1 + 688);
    do
    {
      v73 = *v70++;
      *(_QWORD *)(v72 + (((unint64_t)((uint64_t)v73 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v73 >> 1));
    }
    while (v70 != v71);
  }
LABEL_68:
  v74 = *a3;
  v75 = a3[1];
  if (*a3 != v75)
  {
    v76 = *(_QWORD *)(a1 + 688);
    do
    {
      v77 = *v74++;
      *(_QWORD *)(v76 + (((unint64_t)((uint64_t)v77 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v77 >> 1));
    }
    while (v74 != v75);
  }
}

_DWORD *operations_research::sat::SatSolver::BumpReasonActivities(_DWORD *result, int **a2)
{
  int *v2;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  operations_research::sat::LiteralWatchers *v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      v5 = (_QWORD *)v4[26];
      v6 = v5[15];
      v7 = *(_DWORD *)(v6 + 8 * (*v2 >> 1));
      if ((v7 & 0xFFFFFFE) == 0)
        goto LABEL_4;
      v8 = (uint64_t)*v2 >> 1;
      v9 = v8;
      if (v7 >> 28 == 3)
      {
        v9 = *(int *)(v5[19] + 4 * v8);
        v10 = *(_DWORD *)(v6 + 8 * v9) >> 28;
        if (v10)
        {
LABEL_8:
          v11 = (operations_research::sat::LiteralWatchers *)v4[4];
          if (v10 != *((_DWORD *)v11 + 8))
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      else
      {
        v10 = v7 >> 28;
        if (v7 >> 28)
          goto LABEL_8;
      }
      v11 = (operations_research::sat::LiteralWatchers *)v4[4];
      if (*(_DWORD *)(v5[31] + 4 * v9) != *((_DWORD *)v11 + 8))
      {
LABEL_9:
        if (v7 >> 28 != 3)
          goto LABEL_10;
        goto LABEL_18;
      }
LABEL_16:
      v14 = (int *)operations_research::sat::LiteralWatchers::ReasonClause(v11, *(_DWORD *)(v6 + 8 * v8 + 4));
      if (v14)
      {
        result = (_DWORD *)operations_research::sat::SatSolver::BumpClauseActivity((uint64_t)v4, v14);
        goto LABEL_4;
      }
      v5 = (_QWORD *)v4[26];
      v6 = v5[15];
      v7 = *(_DWORD *)(v6 + 8 * v8);
      if (v7 >> 28 != 3)
      {
LABEL_10:
        v12 = v8;
        if (v7 >> 28 != 3)
          goto LABEL_11;
        goto LABEL_19;
      }
LABEL_18:
      v8 = *(int *)(v5[19] + 4 * v8);
      v7 = *(_DWORD *)(v6 + 8 * v8);
      v12 = v8;
      if (v7 >> 28 != 3)
      {
LABEL_11:
        v13 = v7 >> 28;
        if (v13)
          goto LABEL_12;
        goto LABEL_20;
      }
LABEL_19:
      v12 = *(int *)(v5[19] + 4 * v8);
      v13 = *(_DWORD *)(v6 + 8 * v12) >> 28;
      if (v13)
      {
LABEL_12:
        result = (_DWORD *)v4[5];
        if (v13 == result[8])
          goto LABEL_21;
        goto LABEL_4;
      }
LABEL_20:
      result = (_DWORD *)v4[5];
      if (*(_DWORD *)(v5[31] + 4 * v12) == result[8])
      {
LABEL_21:
        result = (_DWORD *)operations_research::sat::PbConstraints::ReasonPbConstraint((operations_research::sat::PbConstraints *)result, *(_DWORD *)(v6 + 8 * v8 + 4));
        if (result)
          result = (_DWORD *)operations_research::sat::PbConstraints::BumpActivity(v4[5], (uint64_t)result);
      }
LABEL_4:
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void operations_research::sat::SatSolver::ComputePBConflict(uint64_t a1, int a2, uint64_t a3, operations_research::sat::MutableUpperBoundedLinearConstraint *this, _DWORD *a5)
{
  uint64_t v9;
  unsigned int i;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  const operations_research::sat::Trail *v35;
  int64_t *v36;
  char *v37;
  int *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  unint64_t v59[2];
  uint64_t *v60;
  uint64_t v61;

  v61 = a3;
  LODWORD(v59[0]) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v60 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v61, (int)v59, "slack < 0");
    if (v60)
    {
      google::LogMessageFatal::LogMessageFatal(v59, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1929, &v60);
      v56 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v59);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v56, "We don't have a conflict!");
      goto LABEL_75;
    }
  }
  v9 = a2;
  for (i = a2 - 1; ; --i)
  {
    v11 = *(_QWORD **)(a1 + 208);
    v12 = v11[9];
    v13 = *(int *)(v12 + 4 * v9);
    v14 = (int)v13 >> 1;
    v15 = *(_QWORD *)this;
    v16 = *(_QWORD *)(*(_QWORD *)this + 8 * ((int)v13 >> 1));
    if (v16 >= 0)
      v17 = *(_QWORD *)(*(_QWORD *)this + 8 * v14);
    else
      v17 = -v16;
    if (!v16)
      goto LABEL_3;
    v18 = v13 & 0x3E | (v16 < 1);
    v19 = v11[3];
    if (((*(_QWORD *)(v19 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_3;
    v20 = (uint64_t)(int)v13 >> 1;
    v21 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 224) + 133);
    v22 = 8 * v20;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 133))
    {
      v24 = *((_QWORD *)this + 3);
      v23 = *((_QWORD *)this + 4);
      v25 = v17 - (v23 - v24);
      if (v25 >= 1)
      {
        *((_QWORD *)this + 3) = v23 - v17;
        *((_QWORD *)this + 4) = v23 - v25;
        if (*(uint64_t *)(v15 + v22) > 0)
          v26 = v23 - v24;
        else
          v26 = v24 - v23;
        *(_QWORD *)(v15 + v22) = v26;
        if (v23 - v24 >= 0)
          v17 = v23 - v24;
        else
          v17 = v24 - v23;
      }
    }
    v61 += v17;
    if (v61 < 0)
      goto LABEL_3;
    if (v9 < 1)
      break;
    v27 = v11[15];
    v28 = (*(_DWORD *)(v27 + v22) >> 1) & 0x7FFFFFF;
    v29 = (int *)(v12 + 4 * i);
    v30 = v9;
    while (1)
    {
      v31 = *v29;
      v32 = *(_QWORD *)(v15 + 8 * ((int)v31 >> 1));
      if (v32)
      {
        if (((*(_QWORD *)(v19 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v31 & 0x3Eu | (v32 < 1))) & 1) != 0)
          break;
      }
      --v29;
      if (--v30 <= 0)
        goto LABEL_37;
    }
    v33 = (*(_DWORD *)(v27 + 8 * (*v29 >> 1)) >> 1) & 0x7FFFFFF;
    if (v33 < v28)
      goto LABEL_38;
    if (operations_research::sat::SatSolver::ResolvePBConflict(a1, v14, this, &v61))
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 224) + 133))
        operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients((uint64_t *)this);
      v34 = v61;
    }
    else
    {
      v35 = *(const operations_research::sat::Trail **)(a1 + 208);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 133))
        v34 = operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix(this, v35, v9);
      else
        v34 = operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficientsAndComputeSlackForTrailPrefix(this, v35, v9);
      v61 = v34;
    }
    LODWORD(v59[0]) = 0;
    if ((v34 & 0x8000000000000000) == 0)
    {
      v60 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v61, (int)v59, "slack < 0");
      if (v60)
      {
        google::LogMessageFatal::LogMessageFatal(v59, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2008, &v60);
        google::LogMessage::stream((google::LogMessage *)v59);
        goto LABEL_75;
      }
    }
    if ((*((_QWORD *)this + 3) & 0x8000000000000000) != 0)
    {
      *a5 = -1;
      return;
    }
LABEL_3:
    --v9;
  }
LABEL_37:
  v33 = 0;
LABEL_38:
  if (!v21)
    operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients((uint64_t *)this);
  v36 = (int64_t *)operator new(8 * (v33 + 2));
  bzero(v36, 8 * v33 + 16);
  v37 = (char *)operator new(8 * (v33 + 2));
  bzero(v37, 8 * v33 + 16);
  v38 = (int *)*((_QWORD *)this + 12);
  v39 = (int *)*((_QWORD *)this + 13);
  if (v38 != v39)
  {
    v40 = *(_QWORD *)this;
    do
    {
      v43 = *v38;
      v44 = *(_QWORD *)(v40 + 8 * v43);
      if (v44 >= 0)
        v42 = *(_QWORD *)(v40 + 8 * v43);
      else
        v42 = -v44;
      if (v44)
      {
        v45 = *(_QWORD *)(a1 + 208);
        v46 = *(_QWORD *)(v45 + 24);
        v41 = &v37[8 * v33 + 8];
        if (((*(_QWORD *)(v46 + (((unint64_t)(2 * (int)v43) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v43 & 0x1Fu))) & 3) != 0)
        {
          v47 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v45 + 120) + 8 * v43) >> 1) & 0x7FFFFFF;
          v41 = &v37[8 * v33 + 8];
          if (v47 <= v33)
          {
            if (((*(_QWORD *)(v46 + (((unint64_t)(2 * (int)v43) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v44 < 1) | (2 * (v43 & 0x1F)))) & 1) != 0)
              v36[v47] += v42;
            v41 = &v37[8 * v47];
          }
        }
        if (*(_QWORD *)v41 > v42)
          v42 = *(_QWORD *)v41;
        *(_QWORD *)v41 = v42;
      }
      ++v38;
    }
    while (v38 != v39);
  }
  v48 = 0;
  v49 = *v36;
  do
  {
    v49 += v36[v48 / 8 + 1];
    v36[v48 / 8 + 1] = v49;
    v48 += 8;
  }
  while (8 * v33 + 8 != v48);
  v50 = 8 * v33;
  v51 = *(_QWORD *)&v37[v50 + 8];
  do
  {
    if (*(_QWORD *)&v37[v50] > v51)
      v51 = *(_QWORD *)&v37[v50];
    *(_QWORD *)&v37[v50] = v51;
    v50 -= 8;
  }
  while (v50 != -8);
  v52 = *((_QWORD *)this + 3);
  if (*v36 > v52)
  {
    *a5 = -1;
    goto LABEL_71;
  }
  v53 = 0;
  v54 = v33 + 1;
  while (2)
  {
    v55 = (uint64_t *)v36[v53];
    v60 = v55;
    v59[0] = v52;
    if ((uint64_t)v55 <= v52)
    {
      if (v52 - (uint64_t)v55 < *(_QWORD *)&v37[8 * v53 + 8])
        goto LABEL_70;
LABEL_66:
      if (v54 != ++v53)
        continue;
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2071);
      v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v59);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v57, "The code should never reach here.");
LABEL_75:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
    }
    break;
  }
  v58 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v60, (int)v59, "level_sum <= conflict->Rhs()");
  if (v58)
  {
    google::LogMessageFatal::LogMessageFatal(v59, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2065, &v58);
    google::LogMessage::stream((google::LogMessage *)v59);
    goto LABEL_75;
  }
  v52 = *((_QWORD *)this + 3);
  if (v52 - (uint64_t)v60 >= *(_QWORD *)&v37[8 * v53 + 8])
    goto LABEL_66;
LABEL_70:
  *a5 = v53;
LABEL_71:
  operator delete(v37);
  operator delete(v36);
}

void sub_22DBF6528(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF6530(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF6538(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatSolver::ComputeBacktrackLevel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  int v14;
  int v15;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if ((unint64_t)v3 < 5)
    return 0;
  v4 = v3 >> 2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 120);
  if (v4 <= 2)
    v4 = 2;
  if (v4 < 3)
  {
    LODWORD(result) = 0;
    v7 = 1;
LABEL_17:
    v12 = (int *)(v2 + 4 * v7);
    v13 = v4 - v7;
    do
    {
      v14 = *v12++;
      v15 = (*(_DWORD *)(v5 + 8 * (v14 >> 1)) >> 1) & 0x7FFFFFF;
      if ((int)result <= v15)
        result = v15;
      else
        result = result;
      --v13;
    }
    while (v13);
    return result;
  }
  v8 = 0;
  v9 = 0;
  v7 = (v4 - 1) | 1;
  v10 = (int *)(v2 + 8);
  v11 = (v4 - 1) & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    if (v8 <= ((*(_DWORD *)(v5 + 8 * (*(v10 - 1) >> 1)) >> 1) & 0x7FFFFFF))
      v8 = (*(_DWORD *)(v5 + 8 * (*(v10 - 1) >> 1)) >> 1) & 0x7FFFFFF;
    if (v9 <= ((*(_DWORD *)(v5 + 8 * (*v10 >> 1)) >> 1) & 0x7FFFFFF))
      v9 = (*(_DWORD *)(v5 + 8 * (*v10 >> 1)) >> 1) & 0x7FFFFFF;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v8 <= v9)
    result = v9;
  else
    result = v8;
  if (v4 - 1 != ((v4 - 1) & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_17;
  return result;
}

void operations_research::sat::SatDecisionPolicy::OnConflict(operations_research::sat::SatDecisionPolicy *this)
{
  int v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  char **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  if (*(_BYTE *)(*(_QWORD *)this + 96))
  {
    ++*((_QWORD *)this + 11);
    v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 12);
    v4 = (char *)*((_QWORD *)this + 13);
    v3 = *((_QWORD *)this + 14);
    if ((unint64_t)v4 >= v3)
    {
      v6 = (char **)((char *)this + 96);
      v7 = (char *)*((_QWORD *)this + 12);
      v8 = (v4 - v7) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v10 = v3 - (_QWORD)v7;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(16 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_DWORD *)v13 = v2;
      *((_QWORD *)v13 + 1) = 1;
      v5 = v13 + 16;
      if (v4 != v7)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
          v13 -= 16;
          v4 -= 16;
        }
        while (v4 != v7);
        v4 = *v6;
      }
      *((_QWORD *)this + 12) = v13;
      *((_QWORD *)this + 13) = v5;
      *((_QWORD *)this + 14) = &v12[16 * v11];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_DWORD *)v4 = v2;
      *((_QWORD *)v4 + 1) = 1;
      v5 = v4 + 16;
    }
    *((_QWORD *)this + 13) = v5;
  }
}

uint64_t operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  _BYTE v15[16];

  v3 = *(_QWORD *)(a1 + 48);
  for (i = *(_QWORD *)(a1 + 56); v3 != i; v3 += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)v3 + 36) != *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 845);
      v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: PropagationIsDone() ", 34);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v15);
    }
  }
  if (!*(_BYTE *)(a1 + 496))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 312) + 8 * *(int *)(a1 + 304) + 4) = a2;
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 208) + 12);
    v7 = *(_DWORD *)(a1 + 304);
    v8 = v7;
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 312);
      v11 = *(int *)(v10 + 8 * v9++ + 4);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v12 >> v11) & 1) == 0)
      {
        if (((v12 >> (v11 & 0x3F ^ 1)) & 1) != 0)
        {
          *(_DWORD *)(v10 + 8 * v8 + 4) = v11;
          return v5;
        }
        v13 = operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(a1, v11);
        if (v13 >= (int)v5)
          v5 = v5;
        else
          v5 = v13;
        if (v13 == -1)
          return v5;
        if (*(_DWORD *)(a1 + 304) <= v8)
          v9 = *(_DWORD *)(a1 + 304);
        v8 = *(_DWORD *)(a1 + 304);
      }
      if (v9 > v7)
        return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_22DBF68E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::SatSolver::SolveInternal(operations_research::sat::SatSolver *this, operations_research::TimeLimit *a2)
{
  uint64_t v2;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v6;
  _QWORD *v7;
  operations_research *v8;
  void *p_p;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  operations_research::sat::RestartPolicy **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  double v30;
  double v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v34;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int Branch;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  operations_research::sat::RestartPolicy **v61;
  void *__p;
  uint64_t v63;
  unsigned __int8 v64;
  _BYTE v65[16];

  v2 = 1;
  if (*((_BYTE *)this + 496))
    return v2;
  *((_QWORD *)this + 61) = 0;
  *((_BYTE *)this + 472) = 1;
  CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  *((_QWORD *)this + 60) = CurrentTimeNanos;
  v6 = *((_QWORD *)this + 28);
  if (*(_BYTE *)(v6 + 99))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v65, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1108);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v65);
    v8 = (operations_research *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initial memory usage: ", 22);
    operations_research::MemoryUsage(v8, (uint64_t)&__p);
    if ((v64 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v64 & 0x80u) == 0)
      v10 = v64;
    else
      v10 = v63;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v10);
    if ((char)v64 < 0)
      operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)v65);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1109);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Number of variables: ", 21);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1110);
    v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Number of clauses (size > 2): ", 30);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1112);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of binary clauses: ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1114);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Number of linear constraints: ", 30);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1116);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Number of fixed variables: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1117);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Number of watched clauses: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)v65, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1119);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v65);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Parameters: ", 12);
    google::protobuf::Message::ShortDebugString(*((google::protobuf::Message **)this + 28), (uint64_t)&__p);
    if ((v64 & 0x80u) == 0)
      v19 = &__p;
    else
      v19 = __p;
    if ((v64 & 0x80u) == 0)
      v20 = v64;
    else
      v20 = v63;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    if ((char)v64 < 0)
      operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)v65);
    v21 = (operations_research::sat::RestartPolicy **)((char *)this + 232);
    v6 = *((_QWORD *)this + 28);
    v22 = *(int *)(v6 + 404) + (uint64_t)*(int *)(*((_QWORD *)this + 29) + 8);
    if (*(_BYTE *)(v6 + 99))
    {
      v23 = *((_QWORD *)this + 47);
      v24 = 10000 * (v23 / 10000) + 10000;
      v25 = v24;
      goto LABEL_23;
    }
  }
  else
  {
    v21 = (operations_research::sat::RestartPolicy **)((char *)this + 232);
    v22 = *(int *)(v6 + 404) + (uint64_t)*(int *)(*((_QWORD *)this + 29) + 8);
  }
  v23 = *((_QWORD *)this + 47);
  v24 = 10000 * (v23 / 10000) + 10000;
  v25 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
  v26 = *(_QWORD *)(v6 + 288);
  v27 = v26 + v23;
  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
    v28 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  while (1)
  {
    while (1)
    {
      if (a2)
      {
        v29 = (uint64_t *)*((_QWORD *)this + 5);
        v30 = ((double)*(uint64_t *)(*((_QWORD *)this + 3) + 280)
             + (double)(**((_QWORD **)this + 26) + *(int *)(*((_QWORD *)this + 26) + 12)) * 8.0
             + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 192) * 4.0
             + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 200)
             + (double)v29[51] * 20.0
             + (double)v29[53] * 2.0
             + (double)v29[52])
            * 0.00000001;
        v31 = *((double *)a2 + 14) + v30 - *((double *)this + 163);
        *((double *)a2 + 14) = v31;
        *((double *)this + 163) = v30;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
        if (v32)
        {
          v33 = atomic_load(v32);
          if ((v33 & 1) != 0)
            goto LABEL_83;
          v31 = *((double *)a2 + 14);
        }
        if (fmax(*((double *)a2 + 13) - v31, 0.0) <= 0.0)
          goto LABEL_83;
        v34 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
        v35 = v34;
        v36 = *((_QWORD *)a2 + 3) <= v34 - *((_QWORD *)a2 + 1) ? v34 - *((_QWORD *)a2 + 1) : *((_QWORD *)a2 + 3);
        operations_research::RunningMax<long long>::Add((int *)a2 + 8, v36);
        *((_QWORD *)a2 + 1) = v35;
        if (*(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * *((int *)a2 + 17)) + v35 >= *((_QWORD *)a2 + 2))
        {
          if (!FLAGS_time_limit_use_usertime)
            goto LABEL_82;
          v37 = *((double *)a2 + 12);
          if (*((_BYTE *)a2 + 72))
          {
            CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
            v38 = v37 + (double)(CurrentTimeNanos - *((_QWORD *)a2 + 10) + *((_QWORD *)a2 + 11)) * -0.000000001;
            if (v38 <= 0.0001)
              goto LABEL_82;
          }
          else
          {
            v38 = v37 + (double)*((uint64_t *)a2 + 11) * -0.000000001;
            if (v38 <= 0.0001)
            {
LABEL_82:
              *((_QWORD *)a2 + 2) = 0;
LABEL_83:
              if (*(_BYTE *)(*((_QWORD *)this + 28) + 99))
              {
                google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1153);
                v56 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"The time limit has been reached. Aborting.", 42);
                goto LABEL_87;
              }
LABEL_88:
              v2 = 3;
              goto LABEL_89;
            }
          }
          *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1) + (uint64_t)(v38 * 1000000000.0);
        }
      }
      v39 = *((_QWORD *)this + 47);
      if (v39 >= v28)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 28) + 99))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1160);
          v55 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"The conflict limit has been reached. Aborting.", 46);
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      if (v39 < v24)
        goto LABEL_45;
      v40 = operations_research::sysinfo::MemoryUsageProcess((operations_research::sysinfo *)CurrentTimeNanos);
      v41 = *((_QWORD *)this + 28);
      if (v40 > *(_QWORD *)(v41 + 296) << 20)
      {
        if (*(_BYTE *)(v41 + 99))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1174);
          v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"The memory limit has been reached. Aborting.", 44);
LABEL_87:
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        goto LABEL_88;
      }
      v24 = 10000 * (v39 / 10000) + 10000;
      v39 = *((_QWORD *)this + 47);
LABEL_45:
      if (v39 >= v25)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v65, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1183);
        v42 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v65);
        operations_research::sat::SatSolver::RunningStatisticsString(this, (uint64_t)&__p);
        if ((v64 & 0x80u) == 0)
          v43 = &__p;
        else
          v43 = __p;
        if ((v64 & 0x80u) == 0)
          v44 = v64;
        else
          v44 = v63;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        if ((char)v64 < 0)
          operator delete(__p);
        google::LogMessage::~LogMessage((google::LogMessage *)v65);
        v25 = 10000 * (*((_QWORD *)this + 47) / 10000) + 10000;
      }
      CurrentTimeNanos = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
      if ((CurrentTimeNanos & 1) != 0)
        break;
      if (*((_BYTE *)this + 496))
        goto LABEL_81;
    }
    if (*((_BYTE *)this + 496))
      goto LABEL_81;
    v60 = v22;
    v61 = v21;
    v45 = *((_DWORD *)this + 76);
    v46 = *((_DWORD *)this + 85);
    if (v45 < v46)
      break;
LABEL_70:
    if (*(_DWORD *)(*((_QWORD *)this + 26) + 12) == *((_DWORD *)this + 4))
      goto LABEL_93;
    v21 = v61;
    if (operations_research::sat::RestartPolicy::ShouldRestart(*v61))
      operations_research::sat::SatSolver::Backtrack(this, *((_DWORD *)this + 85));
    v22 = v60;
    if (!*((_DWORD *)this + 76))
    {
      v51 = *((int *)*v61 + 2);
      if (v60 <= v51)
      {
        v52 = *((_QWORD *)this + 28);
        v53 = *(int *)(v52 + 404);
        operations_research::sat::SatSolver::MinimizeSomeClauses(this, *(_DWORD *)(v52 + 408));
        if (*((_BYTE *)this + 496))
        {
LABEL_81:
          v2 = 1;
          goto LABEL_89;
        }
        if (*(_DWORD *)(*((_QWORD *)this + 26) + 12) == *((_DWORD *)this + 4))
        {
LABEL_93:
          v2 = 2;
          goto LABEL_89;
        }
        v22 = v53 + v51;
      }
    }
    Branch = operations_research::sat::SatDecisionPolicy::NextBranch(*((std::vector<int> **)this + 30));
    operations_research::sat::SatSolver::EnqueueNewDecision((uint64_t)this, Branch);
  }
  v59 = *((_QWORD *)this + 46);
  v47 = *((_DWORD *)this + 76);
  while (1)
  {
    v48 = *((_QWORD *)this + 39);
    v49 = *(int *)(v48 + 8 * v47++ + 4);
    v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24) + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v50 >> v49) & 1) != 0)
      goto LABEL_64;
    if (((v50 >> (v49 & 0x3F ^ 1)) & 1) != 0)
      break;
    if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v49) == -1)
      goto LABEL_92;
    if (*((_DWORD *)this + 76) <= v45)
      v47 = *((_DWORD *)this + 76);
    v45 = *((_DWORD *)this + 76);
LABEL_64:
    if (v47 >= v46)
    {
      *((_QWORD *)this + 46) = v59;
      *((_DWORD *)this + 85) = v45;
      goto LABEL_70;
    }
  }
  *(_DWORD *)(v48 + 8 * v45 + 4) = v49;
LABEL_92:
  *((_QWORD *)this + 46) = v59;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  v2 = *((unsigned __int8 *)this + 496);
LABEL_89:
  operations_research::sat::SatSolver::StatusWithLog(this, v2);
  return v2;
}

void sub_22DBF7164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBF7178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBF718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DBF71A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a18);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatSolver::StatusWithLog(operations_research::sat::SatSolver *a1, uint64_t a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string __p;
  _BYTE v12[16];

  if (*(_BYTE *)(*((_QWORD *)a1 + 28) + 99))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 935);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v12);
    operations_research::sat::SatSolver::RunningStatisticsString(a1, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 936);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v12);
    operations_research::sat::SatSolver::StatusString((uint64_t)a1, a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &__p;
    else
      v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v9 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
  }
  return a2;
}

void sub_22DBF73D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::RunningStatisticsString(operations_research::sat::SatSolver *this@<X0>, uint64_t a2@<X8>)
{
  operations_research::sat::SatSolver *v2;
  char *v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *__p[2];
  char v14;
  double v15[19];

  v2 = this;
  v15[18] = *(double *)MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 472))
  {
    this = (operations_research::sat::SatSolver *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
    v4 = (char *)this + *((_QWORD *)v2 + 61) - *((_QWORD *)v2 + 60);
  }
  else
  {
    v4 = (char *)*((_QWORD *)this + 61);
  }
  operations_research::MemoryUsage(this, (uint64_t)__p);
  *(_QWORD *)&v5 = *((unsigned int *)v2 + 76);
  v6 = (double *)*((_QWORD *)v2 + 4);
  v7 = (uint64_t)(*((_QWORD *)v6 + 39) - *((_QWORD *)v6 + 38)) >> 3;
  v8 = v6[44];
  v9 = *(double *)(*((_QWORD *)v2 + 3) + 216);
  *(_QWORD *)&v10 = *(unsigned int *)(*((_QWORD *)v2 + 29) + 8);
  *(_QWORD *)&v11 = (*((_DWORD *)v2 + 4) - *((_DWORD *)v2 + 86));
  v15[0] = (double)(uint64_t)v4 * 0.000000001;
  *(_QWORD *)&v15[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(_QWORD *)&v15[2] = __p;
  v12 = *((double *)v2 + 47);
  *(_QWORD *)&v15[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v15[4] = v12;
  *(_QWORD *)&v15[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[6] = v5;
  *(_QWORD *)&v15[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  *(_QWORD *)&v15[8] = v7 - *(_QWORD *)&v8;
  *(_QWORD *)&v15[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[10] = v8;
  *(_QWORD *)&v15[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[12] = v9;
  *(_QWORD *)&v15[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[14] = v10;
  *(_QWORD *)&v15[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v15[16] = v11;
  *(_QWORD *)&v15[17] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("%6.2fs, mem:%s, fails:%d, depth:%d, clauses:%d, tmp:%d, bin:%u, restarts:%d, vars:%d", 84, (uint64_t)v15, 9, a2);
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_22DBF758C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatSolver::StatusString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6;
  double v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  double v40;
  void **v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double v47;
  void **v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  double v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  double v65;
  void **v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  const std::string::value_type *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type size;
  std::string *v108;
  __int128 v109;
  uint64_t *v110;
  void **v111;
  std::string::size_type v112;
  std::string *v113;
  void *__p[2];
  unsigned __int8 v115;
  void *v116[2];
  unsigned __int8 v117;
  void *v118[2];
  unsigned __int8 v119;
  void *v120[2];
  unsigned __int8 v121;
  void *v122[2];
  unsigned __int8 v123;
  void *v124[2];
  unsigned __int8 v125;
  void *v126[2];
  unsigned __int8 v127;
  void *v128[2];
  unsigned __int8 v129;
  void *v130[2];
  unsigned __int8 v131;
  void *v132[2];
  unsigned __int8 v133;
  void *v134[2];
  unsigned __int8 v135;
  void *v136[2];
  unsigned __int8 v137;
  void *v138[2];
  unsigned __int8 v139;
  void *v140[2];
  char v141;
  void *v142[2];
  unsigned __int8 v143;
  void *v144[2];
  unsigned __int8 v145;
  void *v146[2];
  char v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  void *v174;
  BOOL (*v175)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v176;
  void *v177;
  BOOL (*v178)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v179;
  void *v180;
  BOOL (*v181)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v182;
  std::string::value_type *v183;
  BOOL (*v184)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v185;
  std::string::value_type *v186;
  BOOL (*v187)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v188;
  std::string::value_type *v189;
  BOOL (*v190)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v191;
  std::string::value_type *v192;
  BOOL (*v193)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v194;
  std::string::value_type *v195;
  BOOL (*v196)(uint64_t, uint64_t, unsigned int, char *);
  unsigned __int8 v197;
  double v198;
  void *v199;
  double v200;
  void *v201;
  double v202[3];

  v202[2] = *(double *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 472))
    v6 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1)
       - *(_QWORD *)(a1 + 480)
       + *(_QWORD *)(a1 + 488);
  else
    v6 = *(_QWORD *)(a1 + 488);
  operations_research::sat::SatStatusString(a2, (char *)v146);
  v198 = COERCE_DOUBLE(v146);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("\n  status: %s\n", 14, (uint64_t)&v198, 1, (uint64_t)&v148);
  v7 = (double)v6 * 0.000000001;
  v198 = v7;
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  time: %fs\n", 12, (uint64_t)&v198, 1, (uint64_t)v144);
  if ((v145 & 0x80u) == 0)
    v8 = v144;
  else
    v8 = (void **)v144[0];
  if ((v145 & 0x80u) == 0)
    v9 = v145;
  else
    v9 = (std::string::size_type)v144[1];
  v10 = std::string::append(&v148, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operations_research::MemoryUsage((operations_research *)v10, (uint64_t)v140);
  v198 = COERCE_DOUBLE(v140);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  memory: %s\n", 13, (uint64_t)&v198, 1, (uint64_t)v142);
  if ((v143 & 0x80u) == 0)
    v12 = v142;
  else
    v12 = (void **)v142[0];
  if ((v143 & 0x80u) == 0)
    v13 = v143;
  else
    v13 = (std::string::size_type)v142[1];
  v14 = std::string::append(&v149, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(a1 + 376);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = (double)*(uint64_t *)&v198 / v7;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num failures: %d  (%.0f /sec)\n", 32, (uint64_t)&v198, 2, (uint64_t)v138);
  if ((v139 & 0x80u) == 0)
    v16 = v138;
  else
    v16 = (void **)v138[0];
  if ((v139 & 0x80u) == 0)
    v17 = v139;
  else
    v17 = (std::string::size_type)v138[1];
  v18 = std::string::append(&v150, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(a1 + 368);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = (double)*(uint64_t *)&v198 / v7;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num branches: %d (%.0f /sec)\n", 31, (uint64_t)&v198, 2, (uint64_t)v136);
  if ((v137 & 0x80u) == 0)
    v20 = v136;
  else
    v20 = (void **)v136[0];
  if ((v137 & 0x80u) == 0)
    v21 = v137;
  else
    v21 = (std::string::size_type)v136[1];
  v22 = std::string::append(&v151, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v198 = **(_QWORD **)(a1 + 208) + *(int *)(*(_QWORD *)(a1 + 208) + 12) - *(_QWORD *)(a1 + 368);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = (double)*(uint64_t *)&v198 / v7;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num propagations: %d  (%.0f /sec)\n", 36, (uint64_t)&v198, 2, (uint64_t)v134);
  if ((v135 & 0x80u) == 0)
    v24 = v134;
  else
    v24 = (void **)v134[0];
  if ((v135 & 0x80u) == 0)
    v25 = v135;
  else
    v25 = (std::string::size_type)v134[1];
  v26 = std::string::append(&v152, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v153.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(*(_QWORD *)(a1 + 24) + 272);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary propagations: %d\n", 30, (uint64_t)&v198, 1, (uint64_t)v132);
  if ((v133 & 0x80u) == 0)
    v28 = v132;
  else
    v28 = (void **)v132[0];
  if ((v133 & 0x80u) == 0)
    v29 = v133;
  else
    v29 = (std::string::size_type)v132[1];
  v30 = std::string::append(&v153, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(*(_QWORD *)(a1 + 24) + 280);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary inspections: %d\n", 29, (uint64_t)&v198, 1, (uint64_t)v130);
  if ((v131 & 0x80u) == 0)
    v32 = v130;
  else
    v32 = (void **)v130[0];
  if ((v131 & 0x80u) == 0)
    v33 = v131;
  else
    v33 = (std::string::size_type)v130[1];
  v34 = std::string::append(&v154, (const std::string::value_type *)v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(*(_QWORD *)(a1 + 24) + 304);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary redundant implications: %d\n", 40, (uint64_t)&v198, 1, (uint64_t)v128);
  if ((v129 & 0x80u) == 0)
    v36 = v128;
  else
    v36 = (void **)v128[0];
  if ((v129 & 0x80u) == 0)
    v37 = v129;
  else
    v37 = (std::string::size_type)v128[1];
  v38 = std::string::append(&v155, (const std::string::value_type *)v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v156.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = *(double *)(a1 + 392);
  v198 = *(double *)(a1 + 384);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = v40;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num classic minimizations: %d  (literals removed: %d)\n", 56, (uint64_t)&v198, 2, (uint64_t)v126);
  if ((v127 & 0x80u) == 0)
    v41 = v126;
  else
    v41 = (void **)v126[0];
  if ((v127 & 0x80u) == 0)
    v42 = v127;
  else
    v42 = (std::string::size_type)v126[1];
  v43 = std::string::append(&v156, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v157.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = *(_QWORD *)(a1 + 24);
  v47 = *(double *)(v45 + 288);
  v46 = *(double *)(v45 + 296);
  v198 = v47;
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = v46;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary minimizations: %d  (literals removed: %d)\n", 55, (uint64_t)&v198, 2, (uint64_t)v124);
  if ((v125 & 0x80u) == 0)
    v48 = v124;
  else
    v48 = (void **)v124[0];
  if ((v125 & 0x80u) == 0)
    v49 = v125;
  else
    v49 = (std::string::size_type)v124[1];
  v50 = std::string::append(&v157, (const std::string::value_type *)v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v158.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(*(_QWORD *)(a1 + 32) + 192);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num inspected clauses: %d\n", 28, (uint64_t)&v198, 1, (uint64_t)v122);
  if ((v123 & 0x80u) == 0)
    v52 = v122;
  else
    v52 = (void **)v122[0];
  if ((v123 & 0x80u) == 0)
    v53 = v123;
  else
    v53 = (std::string::size_type)v122[1];
  v54 = std::string::append(&v158, (const std::string::value_type *)v52, v53);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v159.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v198 = *(double *)(*(_QWORD *)(a1 + 32) + 200);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num inspected clause_literals: %d\n", 36, (uint64_t)&v198, 1, (uint64_t)v120);
  if ((v121 & 0x80u) == 0)
    v56 = v120;
  else
    v56 = (void **)v120[0];
  if ((v121 & 0x80u) == 0)
    v57 = v121;
  else
    v57 = (std::string::size_type)v120[1];
  v58 = std::string::append(&v159, (const std::string::value_type *)v56, v57);
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = (double)*(uint64_t *)(a1 + 376);
  v198 = *(double *)(a1 + 408);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = (double)*(uint64_t *)&v198 / v60;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num learned literals: %d  (avg: %.1f /clause)\n", 48, (uint64_t)&v198, 2, (uint64_t)v118);
  if ((v119 & 0x80u) == 0)
    v61 = v118;
  else
    v61 = (void **)v118[0];
  if ((v119 & 0x80u) == 0)
    v62 = v119;
  else
    v62 = (std::string::size_type)v118[1];
  v63 = std::string::append(&v160, (const std::string::value_type *)v61, v62);
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  v65 = (double)*(uint64_t *)(a1 + 376);
  v198 = *(double *)(a1 + 400);
  v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v200 = (double)*(uint64_t *)&v198 / v65;
  v201 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num learned PB literals: %d  (avg: %.1f /clause)\n", 51, (uint64_t)&v198, 2, (uint64_t)v116);
  if ((v117 & 0x80u) == 0)
    v66 = v116;
  else
    v66 = (void **)v116[0];
  if ((v117 & 0x80u) == 0)
    v67 = v117;
  else
    v67 = (std::string::size_type)v116[1];
  v68 = std::string::append(&v161, (const std::string::value_type *)v66, v67);
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v195 = *(std::string::value_type **)(a1 + 424);
  v196 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num subsumed clauses: %d\n", 27, (uint64_t)&v195, 1, (uint64_t)&v198);
  if (v200 >= 0.0)
    v70 = (const std::string::value_type *)&v198;
  else
    v70 = *(const std::string::value_type **)&v198;
  if (v200 >= 0.0)
    v71 = HIBYTE(v200);
  else
    v71 = (std::string::size_type)v199;
  v72 = std::string::append(&v162, v70, v71);
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  v192 = *(std::string::value_type **)(a1 + 432);
  v193 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_clauses: %d\n", 31, (uint64_t)&v192, 1, (uint64_t)&v195);
  if ((v197 & 0x80u) == 0)
    v74 = (const std::string::value_type *)&v195;
  else
    v74 = v195;
  if ((v197 & 0x80u) == 0)
    v75 = v197;
  else
    v75 = (std::string::size_type)v196;
  v76 = std::string::append(&v163, v74, v75);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v164.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v189 = *(std::string::value_type **)(a1 + 440);
  v190 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_decisions: %d\n", 33, (uint64_t)&v189, 1, (uint64_t)&v192);
  if ((v194 & 0x80u) == 0)
    v78 = (const std::string::value_type *)&v192;
  else
    v78 = v192;
  if ((v194 & 0x80u) == 0)
    v79 = v194;
  else
    v79 = (std::string::size_type)v193;
  v80 = std::string::append(&v164, v78, v79);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v186 = *(std::string::value_type **)(a1 + 448);
  v187 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_true: %d\n", 28, (uint64_t)&v186, 1, (uint64_t)&v189);
  if ((v191 & 0x80u) == 0)
    v82 = (const std::string::value_type *)&v189;
  else
    v82 = v189;
  if ((v191 & 0x80u) == 0)
    v83 = v191;
  else
    v83 = (std::string::size_type)v190;
  v84 = std::string::append(&v165, v82, v83);
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  v183 = *(std::string::value_type **)(a1 + 456);
  v184 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_subsumed: %d\n", 32, (uint64_t)&v183, 1, (uint64_t)&v186);
  if ((v188 & 0x80u) == 0)
    v86 = (const std::string::value_type *)&v186;
  else
    v86 = v186;
  if ((v188 & 0x80u) == 0)
    v87 = v188;
  else
    v87 = (std::string::size_type)v187;
  v88 = std::string::append(&v166, v86, v87);
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  v180 = *(void **)(a1 + 464);
  v181 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_removed_literals: %d\n", 40, (uint64_t)&v180, 1, (uint64_t)&v183);
  if ((v185 & 0x80u) == 0)
    v90 = (const std::string::value_type *)&v183;
  else
    v90 = v183;
  if ((v185 & 0x80u) == 0)
    v91 = v185;
  else
    v91 = (std::string::size_type)v184;
  v92 = std::string::append(&v167, v90, v91);
  v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v168.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  v177 = *(void **)(*(_QWORD *)(a1 + 40) + 424);
  v178 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num threshold updates: %d\n", 31, (uint64_t)&v177, 1, (uint64_t)&v180);
  if ((v182 & 0x80u) == 0)
    v94 = (const std::string::value_type *)&v180;
  else
    v94 = (const std::string::value_type *)v180;
  if ((v182 & 0x80u) == 0)
    v95 = v182;
  else
    v95 = (std::string::size_type)v181;
  v96 = std::string::append(&v168, v94, v95);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  v174 = *(void **)(*(_QWORD *)(a1 + 40) + 408);
  v175 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num constraint lookups: %d\n", 32, (uint64_t)&v174, 1, (uint64_t)&v177);
  if ((v179 & 0x80u) == 0)
    v98 = (const std::string::value_type *)&v177;
  else
    v98 = (const std::string::value_type *)v177;
  if ((v179 & 0x80u) == 0)
    v99 = v179;
  else
    v99 = (std::string::size_type)v178;
  v100 = std::string::append(&v169, v98, v99);
  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  v173.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 416);
  v173.__r_.__value_.__l.__size_ = (std::string::size_type)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num inspected constraint literals: %d\n", 43, (uint64_t)&v173, 1, (uint64_t)&v174);
  if ((v176 & 0x80u) == 0)
    v102 = (const std::string::value_type *)&v174;
  else
    v102 = (const std::string::value_type *)v174;
  if ((v176 & 0x80u) == 0)
    v103 = v176;
  else
    v103 = (std::string::size_type)v175;
  v104 = std::string::append(&v170, v102, v103);
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v171.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::RestartPolicy::InfoString(*(operations_research::sat::RestartPolicy **)(a1 + 232), &v173);
  if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &v173;
  else
    v106 = (std::string *)v173.__r_.__value_.__r.__words[0];
  if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v173.__r_.__value_.__r.__words[2]);
  else
    size = v173.__r_.__value_.__l.__size_;
  v108 = std::string::append(&v171, (const std::string::value_type *)v106, size);
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v172.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  v110 = *(uint64_t **)(a1 + 40);
  v202[0] = ((double)*(uint64_t *)(*(_QWORD *)(a1 + 24) + 280)
           + (double)(**(_QWORD **)(a1 + 208) + *(int *)(*(_QWORD *)(a1 + 208) + 12)) * 8.0
           + (double)*(uint64_t *)(*(_QWORD *)(a1 + 32) + 192) * 4.0
           + (double)*(uint64_t *)(*(_QWORD *)(a1 + 32) + 200)
           + (double)v110[51] * 20.0
           + (double)v110[53] * 2.0
           + (double)v110[52])
          * 0.00000001;
  *(_QWORD *)&v202[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  deterministic time: %f\n", 25, (uint64_t)v202, 1, (uint64_t)__p);
  if ((v115 & 0x80u) == 0)
    v111 = __p;
  else
    v111 = (void **)__p[0];
  if ((v115 & 0x80u) == 0)
    v112 = v115;
  else
    v112 = (std::string::size_type)__p[1];
  v113 = std::string::append(&v172, (const std::string::value_type *)v111, v112);
  *a3 = *v113;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  if ((char)v115 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_157;
      goto LABEL_209;
    }
  }
  else if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v172.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v171.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
    goto LABEL_210;
  }
LABEL_209:
  operator delete(v173.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v171.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_158:
    if (((char)v176 & 0x80000000) == 0)
      goto LABEL_159;
    goto LABEL_211;
  }
LABEL_210:
  operator delete(v171.__r_.__value_.__l.__data_);
  if (((char)v176 & 0x80000000) == 0)
  {
LABEL_159:
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_160;
    goto LABEL_212;
  }
LABEL_211:
  operator delete(v174);
  if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_160:
    if (((char)v179 & 0x80000000) == 0)
      goto LABEL_161;
    goto LABEL_213;
  }
LABEL_212:
  operator delete(v170.__r_.__value_.__l.__data_);
  if (((char)v179 & 0x80000000) == 0)
  {
LABEL_161:
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_162;
    goto LABEL_214;
  }
LABEL_213:
  operator delete(v177);
  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_162:
    if (((char)v182 & 0x80000000) == 0)
      goto LABEL_163;
    goto LABEL_215;
  }
LABEL_214:
  operator delete(v169.__r_.__value_.__l.__data_);
  if (((char)v182 & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_216;
  }
LABEL_215:
  operator delete(v180);
  if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_164:
    if (((char)v185 & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v168.__r_.__value_.__l.__data_);
  if (((char)v185 & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_166;
    goto LABEL_218;
  }
LABEL_217:
  operator delete(v183);
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_166:
    if (((char)v188 & 0x80000000) == 0)
      goto LABEL_167;
    goto LABEL_219;
  }
LABEL_218:
  operator delete(v167.__r_.__value_.__l.__data_);
  if (((char)v188 & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v186);
  if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if (((char)v191 & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v166.__r_.__value_.__l.__data_);
  if (((char)v191 & 0x80000000) == 0)
  {
LABEL_169:
    if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
    goto LABEL_222;
  }
LABEL_221:
  operator delete(v189);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if (((char)v194 & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_223;
  }
LABEL_222:
  operator delete(v165.__r_.__value_.__l.__data_);
  if (((char)v194 & 0x80000000) == 0)
  {
LABEL_171:
    if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_172;
    goto LABEL_224;
  }
LABEL_223:
  operator delete(v192);
  if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_172:
    if (((char)v197 & 0x80000000) == 0)
      goto LABEL_173;
    goto LABEL_225;
  }
LABEL_224:
  operator delete(v164.__r_.__value_.__l.__data_);
  if (((char)v197 & 0x80000000) == 0)
  {
LABEL_173:
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_226;
  }
LABEL_225:
  operator delete(v195);
  if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_174:
    if ((SHIBYTE(v200) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_227;
  }
LABEL_226:
  operator delete(v163.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v200) & 0x80000000) == 0)
  {
LABEL_175:
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_176;
    goto LABEL_228;
  }
LABEL_227:
  operator delete(*(void **)&v198);
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_176:
    if (((char)v117 & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_229;
  }
LABEL_228:
  operator delete(v162.__r_.__value_.__l.__data_);
  if (((char)v117 & 0x80000000) == 0)
  {
LABEL_177:
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_178;
    goto LABEL_230;
  }
LABEL_229:
  operator delete(v116[0]);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_178:
    if (((char)v119 & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_231;
  }
LABEL_230:
  operator delete(v161.__r_.__value_.__l.__data_);
  if (((char)v119 & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_232;
  }
LABEL_231:
  operator delete(v118[0]);
  if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_180:
    if (((char)v121 & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_233;
  }
LABEL_232:
  operator delete(v160.__r_.__value_.__l.__data_);
  if (((char)v121 & 0x80000000) == 0)
  {
LABEL_181:
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_234;
  }
LABEL_233:
  operator delete(v120[0]);
  if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_182:
    if (((char)v123 & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_235;
  }
LABEL_234:
  operator delete(v159.__r_.__value_.__l.__data_);
  if (((char)v123 & 0x80000000) == 0)
  {
LABEL_183:
    if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_184;
    goto LABEL_236;
  }
LABEL_235:
  operator delete(v122[0]);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_184:
    if (((char)v125 & 0x80000000) == 0)
      goto LABEL_185;
    goto LABEL_237;
  }
LABEL_236:
  operator delete(v158.__r_.__value_.__l.__data_);
  if (((char)v125 & 0x80000000) == 0)
  {
LABEL_185:
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_186;
    goto LABEL_238;
  }
LABEL_237:
  operator delete(v124[0]);
  if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_186:
    if (((char)v127 & 0x80000000) == 0)
      goto LABEL_187;
    goto LABEL_239;
  }
LABEL_238:
  operator delete(v157.__r_.__value_.__l.__data_);
  if (((char)v127 & 0x80000000) == 0)
  {
LABEL_187:
    if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_188;
    goto LABEL_240;
  }
LABEL_239:
  operator delete(v126[0]);
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_188:
    if (((char)v129 & 0x80000000) == 0)
      goto LABEL_189;
    goto LABEL_241;
  }
LABEL_240:
  operator delete(v156.__r_.__value_.__l.__data_);
  if (((char)v129 & 0x80000000) == 0)
  {
LABEL_189:
    if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_190;
    goto LABEL_242;
  }
LABEL_241:
  operator delete(v128[0]);
  if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_190:
    if (((char)v131 & 0x80000000) == 0)
      goto LABEL_191;
    goto LABEL_243;
  }
LABEL_242:
  operator delete(v155.__r_.__value_.__l.__data_);
  if (((char)v131 & 0x80000000) == 0)
  {
LABEL_191:
    if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_192;
    goto LABEL_244;
  }
LABEL_243:
  operator delete(v130[0]);
  if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_192:
    if (((char)v133 & 0x80000000) == 0)
      goto LABEL_193;
    goto LABEL_245;
  }
LABEL_244:
  operator delete(v154.__r_.__value_.__l.__data_);
  if (((char)v133 & 0x80000000) == 0)
  {
LABEL_193:
    if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_194;
    goto LABEL_246;
  }
LABEL_245:
  operator delete(v132[0]);
  if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_194:
    if (((char)v135 & 0x80000000) == 0)
      goto LABEL_195;
    goto LABEL_247;
  }
LABEL_246:
  operator delete(v153.__r_.__value_.__l.__data_);
  if (((char)v135 & 0x80000000) == 0)
  {
LABEL_195:
    if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_196;
    goto LABEL_248;
  }
LABEL_247:
  operator delete(v134[0]);
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_196:
    if (((char)v137 & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_249;
  }
LABEL_248:
  operator delete(v152.__r_.__value_.__l.__data_);
  if (((char)v137 & 0x80000000) == 0)
  {
LABEL_197:
    if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_198;
    goto LABEL_250;
  }
LABEL_249:
  operator delete(v136[0]);
  if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_198:
    if (((char)v139 & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_251;
  }
LABEL_250:
  operator delete(v151.__r_.__value_.__l.__data_);
  if (((char)v139 & 0x80000000) == 0)
  {
LABEL_199:
    if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_200;
    goto LABEL_252;
  }
LABEL_251:
  operator delete(v138[0]);
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_200:
    if (((char)v143 & 0x80000000) == 0)
      goto LABEL_201;
    goto LABEL_253;
  }
LABEL_252:
  operator delete(v150.__r_.__value_.__l.__data_);
  if (((char)v143 & 0x80000000) == 0)
  {
LABEL_201:
    if ((v141 & 0x80000000) == 0)
      goto LABEL_202;
    goto LABEL_254;
  }
LABEL_253:
  operator delete(v142[0]);
  if ((v141 & 0x80000000) == 0)
  {
LABEL_202:
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_203;
    goto LABEL_255;
  }
LABEL_254:
  operator delete(v140[0]);
  if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_203:
    if (((char)v145 & 0x80000000) == 0)
      goto LABEL_204;
    goto LABEL_256;
  }
LABEL_255:
  operator delete(v149.__r_.__value_.__l.__data_);
  if (((char)v145 & 0x80000000) == 0)
  {
LABEL_204:
    if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_257;
  }
LABEL_256:
  operator delete(v144[0]);
  if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_205:
    if ((v147 & 0x80000000) == 0)
      return;
LABEL_258:
    operator delete(v146[0]);
    return;
  }
LABEL_257:
  operator delete(v148.__r_.__value_.__l.__data_);
  if (v147 < 0)
    goto LABEL_258;
}

void sub_22DBF861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  uint64_t v91;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_56;
    }
  }
  else if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x490]);
  if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_57;
  }
LABEL_56:
  operator delete((void *)STACK[0x4B0]);
  if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_58;
  }
LABEL_57:
  operator delete((void *)STACK[0x470]);
  if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_59;
  }
LABEL_58:
  operator delete((void *)STACK[0x4C8]);
  if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_60;
  }
LABEL_59:
  operator delete((void *)STACK[0x450]);
  if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_61;
  }
LABEL_60:
  operator delete((void *)STACK[0x4E0]);
  if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_62;
  }
LABEL_61:
  operator delete((void *)STACK[0x430]);
  if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x427]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_63;
  }
LABEL_62:
  operator delete((void *)STACK[0x4F8]);
  if ((SLOBYTE(STACK[0x427]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v91 - 233) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_64;
  }
LABEL_63:
  operator delete((void *)STACK[0x410]);
  if ((*(char *)(v91 - 233) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(v91 - 256));
  if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*(char *)(v91 - 209) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_66;
  }
LABEL_65:
  operator delete((void *)STACK[0x3F0]);
  if ((*(char *)(v91 - 209) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x3E7]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(v91 - 232));
  if ((SLOBYTE(STACK[0x3E7]) & 0x80000000) == 0)
  {
LABEL_15:
    if ((*(char *)(v91 - 185) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_68;
  }
LABEL_67:
  operator delete((void *)STACK[0x3D0]);
  if ((*(char *)(v91 - 185) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(v91 - 208));
  if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(v91 - 161) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_70;
  }
LABEL_69:
  operator delete((void *)STACK[0x3B0]);
  if ((*(char *)(v91 - 161) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(v91 - 184));
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(v91 - 137) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_72;
  }
LABEL_71:
  operator delete((void *)STACK[0x390]);
  if ((*(char *)(v91 - 137) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(v91 - 160));
  if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(v91 - 113) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_74;
  }
LABEL_73:
  operator delete((void *)STACK[0x370]);
  if ((*(char *)(v91 - 113) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(v91 - 136));
  if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_76;
  }
LABEL_75:
  operator delete((void *)STACK[0x350]);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(a15);
  if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_78;
  }
LABEL_77:
  operator delete((void *)STACK[0x330]);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_79;
  }
LABEL_78:
  operator delete(a21);
  if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_80;
  }
LABEL_79:
  operator delete((void *)STACK[0x310]);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(a27);
  if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_82;
  }
LABEL_81:
  operator delete((void *)STACK[0x2F0]);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(a33);
  if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_84;
  }
LABEL_83:
  operator delete((void *)STACK[0x2D0]);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_85;
  }
LABEL_84:
  operator delete(a39);
  if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_86;
  }
LABEL_85:
  operator delete((void *)STACK[0x2B0]);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(a45);
  if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((a56 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_88;
  }
LABEL_87:
  operator delete((void *)STACK[0x290]);
  if ((a56 & 0x80000000) == 0)
  {
LABEL_36:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(a51);
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
  {
LABEL_37:
    if ((a62 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_90;
  }
LABEL_89:
  operator delete((void *)STACK[0x270]);
  if ((a62 & 0x80000000) == 0)
  {
LABEL_38:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(a57);
  if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((a68 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_92;
  }
LABEL_91:
  operator delete((void *)STACK[0x250]);
  if ((a68 & 0x80000000) == 0)
  {
LABEL_40:
    if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(a63);
  if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_94;
  }
LABEL_93:
  operator delete((void *)STACK[0x230]);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_42:
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_95;
  }
LABEL_94:
  operator delete(a69);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_96;
  }
LABEL_95:
  operator delete((void *)STACK[0x210]);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_44:
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_97;
  }
LABEL_96:
  operator delete(a73);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_98;
  }
LABEL_97:
  operator delete(a91);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_46:
    if ((a90 & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_99;
  }
LABEL_98:
  operator delete(a75);
  if ((a90 & 0x80000000) == 0)
  {
LABEL_47:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(a89);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_48:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_49:
    if ((a88 & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(a77);
  if ((a88 & 0x80000000) == 0)
  {
LABEL_50:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(a87);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_51:
    if ((a86 & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_104;
  }
LABEL_103:
  operator delete(a81);
  if ((a86 & 0x80000000) == 0)
  {
LABEL_52:
    if ((a84 & 0x80000000) == 0)
LABEL_106:
      _Unwind_Resume(a1);
LABEL_105:
    operator delete(a83);
    _Unwind_Resume(a1);
  }
LABEL_104:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
    goto LABEL_106;
  goto LABEL_105;
}

uint64_t *operations_research::sat::SatSolver::SetAssumptionLevel(uint64_t *this, int a2)
{
  uint64_t *v3;
  int v4;
  unint64_t v5[2];
  uint64_t *v6;

  v3 = this;
  LODWORD(v5[0]) = a2;
  LODWORD(v6) = 0;
  if (a2 < 0)
  {
    this = (uint64_t *)google::MakeCheckOpString<int,int>((int)v5, (int)&v6, "assumption_level >= 0");
    v6 = this;
    if (this)
    {
      google::LogMessageFatal::LogMessageFatal(v5, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 942, &v6);
      google::LogMessage::stream((google::LogMessage *)v5);
      goto LABEL_8;
    }
  }
  v4 = *((_DWORD *)v3 + 76);
  LODWORD(v5[0]) = a2;
  LODWORD(v6) = v4;
  if (v4 < a2)
  {
    this = (uint64_t *)google::MakeCheckOpString<int,int>((int)v5, (int)&v6, "assumption_level <= CurrentDecisionLevel()");
    v6 = this;
    if (this)
    {
      google::LogMessageFatal::LogMessageFatal(v5, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 943, &v6);
      google::LogMessage::stream((google::LogMessage *)v5);
LABEL_8:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
    }
  }
  *((_DWORD *)v3 + 85) = a2;
  return this;
}

void sub_22DBF8F10(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF8F18(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::SolveWithTimeLimit(operations_research::sat::SatSolver *this, operations_research::TimeLimit *a2)
{
  if (!a2)
    a2 = (operations_research::TimeLimit *)*((_QWORD *)this + 27);
  return operations_research::sat::SatSolver::SolveInternal(this, a2);
}

void operations_research::sat::SatSolver::KeepAllClauseUsedToInfer(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  operations_research::sat::LiteralWatchers *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 208);
  if (((*(_QWORD *)(*(_QWORD *)(v2 + 24) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v43, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 954);
    v41 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: Assignment().VariableIsAssigned(variable) ", 56);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v43);
  }
  v3 = *(_QWORD *)(v2 + 120);
  if ((*(_DWORD *)(v3 + 8 * a2) & 0xFFFFFFE) == 0)
    return;
  v5 = *(int *)(v3 + 8 * a2 + 4);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = v5 + 1;
  if ((_DWORD)v5 == -1)
  {
    v8 = 0;
  }
  else
  {
    if ((int)v5 <= -2)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = operator new(8 * ((v5 >> 6) + 1));
    v8 = v7;
    v44 = v5 + 1;
    v45 = (v5 >> 6) + 1;
    v43 = v7;
    if (v6 >= 0x41)
      v9 = v5 >> 6;
    else
      v9 = 0;
    v7[v9] = 0;
    if (v6 >= 0x40)
      bzero(v7, 8 * (v6 >> 6));
    if ((v6 & 0x3F) != 0)
      v8[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
  }
  *(_QWORD *)((char *)v8 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_41:
    operator delete(v8);
    return;
  }
  v10 = v5;
  v11 = 1;
  do
  {
    v12 = v8[v10 >> 6];
    if ((v12 & (1 << v10)) == 0)
      goto LABEL_37;
    v8[v10 >> 6] = v12 & ~(1 << v10);
    v13 = *(_QWORD **)(a1 + 208);
    v14 = *(_DWORD *)(v13[9] + 4 * v10);
    v15 = v14 >> 1;
    v42 = 0;
    v16 = (uint64_t)v14 >> 1;
    v17 = v13[15];
    v18 = *(_DWORD *)(v17 + 8 * v15);
    v19 = v16;
    if (v18 >> 28 == 3)
    {
      v19 = *(int *)(v13[19] + 4 * v16);
      v20 = *(_DWORD *)(v17 + 8 * v19) >> 28;
      if (v20)
      {
LABEL_18:
        v21 = *(operations_research::sat::LiteralWatchers **)(a1 + 32);
        if (v20 == *((_DWORD *)v21 + 8))
          goto LABEL_22;
        goto LABEL_24;
      }
    }
    else
    {
      v20 = v18 >> 28;
      if (v20)
        goto LABEL_18;
    }
    v21 = *(operations_research::sat::LiteralWatchers **)(a1 + 32);
    if (*(_DWORD *)(v13[31] + 4 * v19) == *((_DWORD *)v21 + 8))
    {
LABEL_22:
      v42 = operations_research::sat::LiteralWatchers::ReasonClause(v21, *(_DWORD *)(v17 + 8 * v16 + 4));
      if (v42)
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(*(_QWORD *)(a1 + 32) + 336), &v42);
    }
LABEL_24:
    v22 = *(_QWORD **)(a1 + 208);
    v23 = v22[15];
    v24 = *(_DWORD *)(v23 + 8 * v16);
    if (v24 >> 28 == 3)
    {
      v16 = *(int *)(v22[19] + 4 * v16);
      v24 = *(_DWORD *)(v23 + 8 * v16);
    }
    v25 = v24 >> 28;
    if (v25)
    {
      if (v25 - 1 > 1)
      {
        v27 = *(_QWORD *)(v22[34] + 8 * v25);
        v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, *(_QWORD *)(a1 + 208), *(unsigned int *)(v23 + 8 * v16 + 4));
        v29 = (uint64_t *)(v22[28] + 16 * v16);
        *v29 = v28;
        v29[1] = v30;
      }
      else
      {
        v26 = (_QWORD *)(v22[28] + 16 * v16);
        *v26 = 0;
        v26[1] = 0;
      }
      *(_DWORD *)(v22[31] + 4 * v16) = *(_DWORD *)(v23 + 8 * v16) >> 28;
      *(_DWORD *)(v22[15] + 8 * v16) &= 0xFFFFFFFu;
    }
    --v11;
    v31 = v22[28] + 16 * v16;
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      v33 = *(int **)v31;
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 120);
      v8 = v43;
      v35 = 4 * v32;
      do
      {
        if ((*(_DWORD *)(v34 + 8 * (*v33 >> 1)) & 0xFFFFFFE) != 0)
        {
          v36 = *(int *)(v34 + 8 * ((uint64_t)*v33 >> 1) + 4);
          v37 = v36 >> 6;
          v38 = 1 << v36;
          v39 = v8[v37];
          if ((v38 & v39) == 0)
          {
            v8[v37] = v38 | v39;
            ++v11;
          }
        }
        ++v33;
        v35 -= 4;
      }
      while (v35);
    }
LABEL_37:
    if (v11 < 1)
      break;
  }
  while ((uint64_t)v10-- > 0);
  v8 = v43;
  if (v43)
    goto LABEL_41;
}

void sub_22DBF92B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBF92CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBF92E0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SatSolver::TryToMinimizeClause(operations_research::sat::SatSolver *this, int *a2)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  char *v7;
  int *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  operations_research::sat::LiteralWatchers *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int i;
  uint64_t v57;
  void *__p;
  int *v59;
  char *v60;
  unint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;

  LODWORD(v61) = *((_DWORD *)this + 76);
  LODWORD(__p) = 0;
  if ((_DWORD)v61)
  {
    __p = (void *)google::MakeCheckOpString<int,int>((int)&v61, (int)&__p, "CurrentDecisionLevel() == 0");
    if (__p)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 985, (uint64_t **)&__p);
      google::LogMessage::stream((google::LogMessage *)&v61);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v61);
    }
  }
  ++*((_QWORD *)this + 54);
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = (unint64_t *)&v62;
  v4 = *a2;
  v5 = 4 * v4;
  __p = 0;
  v59 = 0;
  if (4 * v4)
  {
    if ((v4 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(4 * v4);
    v7 = &v6[4 * v4];
    __p = v6;
    v60 = v7;
    memcpy(v6, a2 + 1, v5);
    v59 = (int *)v7;
  }
  if (!*((_BYTE *)this + 496))
  {
    while (1)
    {
      v16 = operations_research::sat::MoveOneUnprocessedLiteralLast((uint64_t)&v61, *((_DWORD *)this + 76), (unsigned __int8 **)&__p);
      if (v16 == -1)
        goto LABEL_6;
      operations_research::sat::SatSolver::Backtrack(this, v16);
      v17 = *((_DWORD *)this + 76);
      v18 = v17;
      v20 = (int *)__p;
      v19 = v59;
      if (v17 >= (unint64_t)(((char *)v59 - (_BYTE *)__p) >> 2))
        goto LABEL_56;
      while (1)
      {
        while (1)
        {
          v21 = &v20[v18];
          v22 = *v21;
          v23 = *((_QWORD *)this + 26);
          v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v24 >> (v22 & 0x3F ^ 1)) & 1) == 0)
            break;
          if (v19 != v21 + 1)
            memmove(v21, v21 + 1, (char *)v19 - (char *)(v21 + 1));
          v59 = --v19;
          v17 = *((_DWORD *)this + 76);
          v18 = v17;
          v20 = (int *)__p;
          if (v17 >= (unint64_t)(((char *)v19 - (_BYTE *)__p) >> 2))
            goto LABEL_56;
        }
        if (((v24 >> (v22 & 0x3F)) & 1) != 0)
          break;
        ++*((_QWORD *)this + 55);
        operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v22 ^ 1);
        if (*a2 <= 0)
        {
          operations_research::sat::SatSolver::Backtrack(this, 0);
          goto LABEL_81;
        }
        if (*((_BYTE *)this + 496))
          goto LABEL_81;
        v20 = (int *)__p;
        v19 = v59;
        v17 = *((_DWORD *)this + 76);
        v18 = v17;
        if (v17 >= (unint64_t)(((char *)v59 - (_BYTE *)__p) >> 2))
          goto LABEL_56;
      }
      v25 = *(_QWORD *)(v23 + 120);
      v26 = *(unsigned int *)(v25 + 8 * ((int)v22 >> 1));
      v27 = (v26 >> 1) & 0x7FFFFFF;
      if (!(_DWORD)v27)
      {
        if (!v17)
        {
          if (*((_QWORD *)this + 165))
          {
            for (i = *((_DWORD *)this + 90); i < *(_DWORD *)(v23 + 12); v23 = *((_QWORD *)this + 26))
            {
              v64 = *(_DWORD *)(*(_QWORD *)(v23 + 72) + 4 * i);
              operations_research::sat::DratProofHandler::AddClause(*((_QWORD *)this + 165), &v64, 1);
              i = *((_DWORD *)this + 90) + 1;
              *((_DWORD *)this + 90) = i;
            }
          }
        }
        ++*((_QWORD *)this + 56);
        *((_QWORD *)this + 58) += *a2;
        goto LABEL_92;
      }
      v28 = (uint64_t)(int)v22 >> 1;
      if (v26 >> 28 == 3)
        break;
      v29 = (uint64_t)(int)v22 >> 1;
      v30 = v26 >> 28;
      if (!v30)
        goto LABEL_32;
LABEL_33:
      v31 = (operations_research::sat::LiteralWatchers *)*((_QWORD *)this + 4);
      if (v30 == *((_DWORD *)v31 + 8))
        v32 = operations_research::sat::LiteralWatchers::ReasonClause(v31, *(_DWORD *)(v25 + 8 * v28 + 4));
      else
        v32 = 0;
      if ((int *)v32 != a2)
      {
        v57 = *((_QWORD *)this + 58);
        ++*((_QWORD *)this + 57);
        *((_QWORD *)this + 58) = v57 + *a2;
        operations_research::sat::SatSolver::KeepAllClauseUsedToInfer((uint64_t)this, v28);
LABEL_92:
        operations_research::sat::SatSolver::Backtrack(this, 0);
        operations_research::sat::LiteralWatchers::Detach(*((_QWORD **)this + 4), a2);
        goto LABEL_81;
      }
      v20 = (int *)__p;
      v19 = v59;
      if (v27 + 1 < (unint64_t)(((char *)v59 - (_BYTE *)__p) >> 2))
      {
        v33 = (int *)((char *)__p + 4 * v27);
        v59 = v33;
        if (v33 >= (int *)v60)
        {
          v34 = v27;
          v35 = v60 - (_BYTE *)__p;
          if ((v60 - (_BYTE *)__p) >> 1 <= (unint64_t)v27 + 1)
            v36 = v27 + 1;
          else
            v36 = v35 >> 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v38 = operator new(4 * v37);
          v39 = (int *)&v38[4 * v34];
          *v39 = v22;
          v19 = v39 + 1;
          v40 = (v34 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v40 < 0xF)
            goto LABEL_99;
          if ((unint64_t)((char *)v20 - v38) < 0x20)
            goto LABEL_99;
          v41 = v40 + 1;
          v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v33 = (int *)((char *)v33 - v42);
          v39 = (int *)((char *)v39 - v42);
          v43 = &v38[4 * v34 - 16];
          v44 = &v20[v34 - 4];
          v45 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *v43 = v46;
            v43 -= 2;
            v44 -= 8;
            v45 -= 8;
          }
          while (v45);
          if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_99:
            do
            {
              v47 = *--v33;
              *--v39 = v47;
            }
            while (v33 != v20);
          }
          __p = v39;
          v59 = v19;
          v60 = &v38[4 * v37];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v33 = v22;
          v19 = v33 + 1;
        }
        v59 = v19;
        v20 = (int *)__p;
      }
LABEL_56:
      if (v20 == v19)
      {
        *((_BYTE *)this + 496) = 1;
        if (v19)
          goto LABEL_82;
        goto LABEL_83;
      }
      v48 = *(v19 - 1);
      v49 = v62;
      v50 = &v62;
      v51 = &v62;
      if (v62)
      {
        while (1)
        {
          while (1)
          {
            v51 = (uint64_t **)v49;
            v52 = *(_DWORD *)((char *)v49 + 25);
            if (v48 >= v52)
              break;
            v49 = *v51;
            v50 = v51;
            if (!*v51)
              goto LABEL_64;
          }
          if (v52 >= v48)
            break;
          v49 = v51[1];
          if (!v49)
          {
            v50 = v51 + 1;
            goto LABEL_64;
          }
        }
      }
      else
      {
LABEL_64:
        v53 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v53 + 25) = v48;
        *(_QWORD *)v53 = 0;
        *((_QWORD *)v53 + 1) = 0;
        *((_QWORD *)v53 + 2) = v51;
        *v50 = (uint64_t *)v53;
        if (*v61)
        {
          v61 = (unint64_t *)*v61;
          v53 = (char *)*v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v62, (uint64_t *)v53);
        ++v63;
      }
      if (*((_BYTE *)this + 496))
        goto LABEL_6;
    }
    v29 = *(int *)(*(_QWORD *)(v23 + 152) + 4 * v28);
    v30 = *(_DWORD *)(v25 + 8 * v29) >> 28;
    if (v30)
      goto LABEL_33;
LABEL_32:
    v30 = *(_DWORD *)(*(_QWORD *)(v23 + 248) + 4 * v29);
    goto LABEL_33;
  }
LABEL_6:
  operations_research::sat::SatSolver::Backtrack(this, 0);
  v8 = (int *)__p;
  v9 = (char *)v59 - (_BYTE *)__p;
  v10 = ((char *)v59 - (_BYTE *)__p) >> 2;
  v11 = *a2;
  if (v11 != v10)
  {
    if (v9 == 4)
    {
      v12 = *((_QWORD *)this + 165);
      if (v12)
      {
        operations_research::sat::DratProofHandler::AddClause(v12, (int *)__p, ((char *)v59 - (_BYTE *)__p) >> 2);
        v8 = (int *)__p;
      }
      v13 = *((_QWORD *)this + 26);
      v14 = *v8;
      v15 = *v8 >> 1;
      if (((*(_QWORD *)(*(_QWORD *)(v13 + 24) + (((unint64_t)(2 * v15) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v8 & 0x3E)) & 3) == 0)
      {
        *((_QWORD *)this + 58) += *a2;
        *(_DWORD *)(*(_QWORD *)(v13 + 72) + 4 * *(int *)(v13 + 12)) = v14;
        *(_DWORD *)(v13 + 8) = (*(_DWORD *)(v13 + 8) & 0xFFFFFFE | v14 & 1) ^ 0x10000001;
        *(_QWORD *)(*(_QWORD *)(v13 + 120) + 8 * v15) = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(*(_QWORD *)(v13 + 24) + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        ++*(_DWORD *)(v13 + 12);
        while (!*((_BYTE *)this + 496)
             && (operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
          ;
      }
    }
    else if (v9 == 8 && *(_BYTE *)(*((_QWORD *)this + 28) + 306))
    {
      *((_QWORD *)this + 58) += (int)v11 - 2;
      v54 = *v8;
      v55 = v8[1];
      if (!*((_BYTE *)this + 128)
        || operations_research::sat::BinaryClauseManager::Add((uint64_t *)this + 17, v54 | (v55 << 32)))
      {
        operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*((_QWORD *)this + 3), v54, v55);
        operations_research::sat::SatSolver::InitializePropagators(this);
      }
      operations_research::sat::LiteralWatchers::Detach(*((_QWORD **)this + 4), a2);
      while (!*((_BYTE *)this + 496)
           && (operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
        ;
    }
    else
    {
      *((_QWORD *)this + 58) += v11 - v10;
      if (!operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((_QWORD *)this + 4), a2, v8, v10))
        *((_BYTE *)this + 496) = 1;
    }
  }
LABEL_81:
  v19 = (int *)__p;
  if (__p)
  {
LABEL_82:
    v59 = v19;
    operator delete(v19);
  }
LABEL_83:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v61, v62);
}

void sub_22DBF99CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBF99D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::MinimizeSomeClauses(operations_research::sat::SatSolver *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v8;
  absl::lts_2020_02_25 *v9;
  double v10;
  double v11;
  int *ClauseToMinimize;
  _QWORD *v13;
  _BYTE v14[16];

  *((_BYTE *)this + 1032) = 1;
  v3 = *((_QWORD *)this + 46) + a2;
  while (*((_QWORD *)this + 46) < v3)
  {
    v4 = *((_QWORD *)this + 27);
    if (v4)
    {
      v5 = *(unsigned __int8 **)(v4 + 120);
      if (v5)
      {
        v6 = atomic_load(v5);
        if ((v6 & 1) != 0)
          break;
      }
      if (fmax(*(double *)(v4 + 104) - *(double *)(v4 + 112), 0.0) <= 0.0)
        break;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
      v8 = *(_QWORD *)(v4 + 24) <= CurrentTimeNanos - *(_QWORD *)(v4 + 8)
         ? CurrentTimeNanos - *(_QWORD *)(v4 + 8)
         : *(_QWORD *)(v4 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v4 + 32), v8);
      *(_QWORD *)(v4 + 8) = CurrentTimeNanos;
      if (*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * *(int *)(v4 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v4 + 16))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_25;
        v10 = *(double *)(v4 + 96);
        if (*(_BYTE *)(v4 + 72))
        {
          v11 = v10
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(_QWORD *)(v4 + 80) + *(_QWORD *)(v4 + 88))
              * -0.000000001;
          if (v11 <= 0.0001)
            goto LABEL_25;
        }
        else
        {
          v11 = v10 + (double)*(uint64_t *)(v4 + 88) * -0.000000001;
          if (v11 <= 0.0001)
          {
LABEL_25:
            *(_QWORD *)(v4 + 16) = 0;
            break;
          }
        }
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + 8) + (uint64_t)(v11 * 1000000000.0);
      }
    }
    ClauseToMinimize = operations_research::sat::LiteralWatchers::NextClauseToMinimize(*((operations_research::sat::LiteralWatchers **)this
                                                                                       + 4));
    if (!ClauseToMinimize)
    {
      if (*operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__[0] >= 1
        && (operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1240);
        v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Minimized all clauses, restarting from first one.", 49);
        google::LogMessage::~LogMessage((google::LogMessage *)v14);
      }
      *(_DWORD *)(*((_QWORD *)this + 4) + 328) = 0;
      break;
    }
    operations_research::sat::SatSolver::TryToMinimizeClause(this, ClauseToMinimize);
    if (*((_BYTE *)this + 496))
      return;
  }
  *((_BYTE *)this + 1032) = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 4));
}

void sub_22DBF9C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

int *operations_research::sat::LiteralWatchers::NextClauseToMinimize(operations_research::sat::LiteralWatchers *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 38);
  v2 = (*((_QWORD *)this + 39) - v1) >> 3;
  for (i = *((int *)this + 82); v2 > i; *((_DWORD *)this + 82) = i)
  {
    v10 = *(int **)(v1 + 8 * i);
    if (*v10 >= 1)
    {
      v8 = 0;
      v11 = (unint64_t)v10
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v10)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (_QWORD)v10)));
      v12 = ((v11 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v11);
      v13 = *((_QWORD *)this + 42);
      v9 = (v12 >> 7) ^ (v13 >> 12);
      v14 = *((_QWORD *)this + 45);
      v15 = 0x101010101010101 * (v12 & 0x7F);
      while (1)
      {
        v4 = v9 & v14;
        v5 = *(_QWORD *)(v13 + v4);
        v6 = ((v5 ^ v15) - 0x101010101010101) & ~(v5 ^ v15) & 0x8080808080808080;
        if (v6)
          break;
LABEL_6:
        if ((v5 & (~v5 << 6) & 0x8080808080808080) != 0)
          goto LABEL_13;
        v8 += 8;
        v9 = v8 + v4;
      }
      while (1)
      {
        v7 = (v4 + (__clz(__rbit64(v6)) >> 3)) & v14;
        if (*(int **)(*((_QWORD *)this + 43) + 24 * v7) == v10)
          break;
        v6 &= v6 - 1;
        if (!v6)
          goto LABEL_6;
      }
      if (v7 == v14)
      {
LABEL_13:
        *((_DWORD *)this + 82) = i + 1;
        return v10;
      }
    }
    ++i;
  }
  return 0;
}

void operations_research::sat::SatSolver::GetLastIncompatibleDecisions(operations_research::sat::SatSolver *this@<X0>, _QWORD *a2@<X8>)
{
  operations_research::sat::SatSolver *v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int **v32;
  int v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int *v43;
  unsigned int v44;
  _QWORD *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int **v60;
  int *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  unint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  int *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _OWORD *v86;
  int *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  _OWORD *v94;
  int *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  int *v99;
  int *v100;
  int *v101;
  BOOL v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  int v107;
  void **v108;
  unint64_t v110[2];
  uint64_t *v111;
  int v112;

  v2 = this;
  v3 = *((int *)this + 76);
  v4 = *(_DWORD *)(*((_QWORD *)this + 39) + 8 * v3 + 4);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4 & 0x3F ^ 1u)) & 1) == 0)
  {
    if (!(_DWORD)v3)
      return;
    if ((v3 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(4 * v3);
    v10 = 0;
    v11 = a2;
    *a2 = v9;
    a2[1] = v9;
    a2[2] = &v9[4 * v3];
    while (1)
    {
      v13 = (_DWORD *)(*((_QWORD *)v2 + 39) + 8 * v10 + 4);
      v14 = v11[2];
      if ((unint64_t)v9 < v14)
      {
        *(_DWORD *)v9 = *v13;
        v12 = (uint64_t)(v9 + 4);
      }
      else
      {
        v15 = (char *)*v11;
        v16 = (uint64_t)&v9[-*v11];
        v17 = v16 >> 2;
        v18 = (v16 >> 2) + 1;
        if (v18 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v19 = v14 - (_QWORD)v15;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(4 * v20);
          v22 = &v21[4 * v17];
          *v22 = *v13;
          v12 = (uint64_t)(v22 + 1);
          if (v9 != v15)
          {
LABEL_19:
            v23 = v9 - 4 - v15;
            if (v23 < 0xBC
              || &v21[v16 - 4 - (v23 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v16 - 4]
              || &v9[-(v23 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4
              || (unint64_t)(v9 - v21 - v16) < 0x20)
            {
              v24 = v9;
              v11 = a2;
              v2 = this;
            }
            else
            {
              v26 = (v23 >> 2) + 1;
              v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              v24 = &v9[-v27];
              v22 = (_DWORD *)((char *)v22 - v27);
              v28 = &v21[4 * v17 - 16];
              v29 = v9 - 16;
              v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              v2 = this;
              do
              {
                v31 = *(_OWORD *)v29;
                *(v28 - 1) = *((_OWORD *)v29 - 1);
                *v28 = v31;
                v28 -= 2;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              v11 = a2;
              if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_22:
                *v11 = v22;
                v11[1] = v12;
                v11[2] = &v21[4 * v20];
                if (!v15)
                  goto LABEL_8;
LABEL_26:
                operator delete(v15);
                goto LABEL_8;
              }
            }
            do
            {
              v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *--v22 = v25;
            }
            while (v24 != v15);
            goto LABEL_22;
          }
        }
        else
        {
          v21 = 0;
          v22 = (_DWORD *)(4 * v17);
          *(_DWORD *)(4 * v17) = *v13;
          v12 = 4 * v17 + 4;
          if (v9 != v15)
            goto LABEL_19;
        }
        v11 = a2;
        v2 = this;
        *a2 = v22;
        a2[1] = v12;
        a2[2] = &v21[4 * v20];
        if (v15)
          goto LABEL_26;
      }
LABEL_8:
      v11[1] = v12;
      ++v10;
      v9 = (char *)v12;
      if (v10 >= *((int *)v2 + 76))
        return;
    }
  }
  v5 = operator new(4uLL);
  *v5 = v4;
  a2[1] = v5 + 1;
  a2[2] = v5 + 1;
  *a2 = v5;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v2 + 520, *((_DWORD *)v2 + 4));
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)v2 + 65, v4 >> 1);
  v6 = *((_QWORD *)v2 + 26);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 + 120) + 8 * (v4 >> 1) + 4);
  if (*((int *)v2 + 76) < 1)
    v8 = (int *)(v6 + 12);
  else
    v8 = (int *)*((_QWORD *)v2 + 39);
  v32 = (int **)a2;
  v107 = *v8;
  v33 = *(_DWORD *)(v6 + 12);
  LODWORD(v110[0]) = v7;
  v112 = v33;
  if (v7 >= v33)
  {
    v111 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v110, (int)&v112, "trail_index < trail_->Index()");
    if (v111)
    {
      google::LogMessageFatal::LogMessageFatal(v110, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1285, &v111);
      google::LogMessage::stream((google::LogMessage *)v110);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v110);
    }
  }
  v108 = (void **)((char *)v2 + 576);
  while (1)
  {
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 26) + 72) + 4 * v7);
        if (((*(_QWORD *)(*((_QWORD *)v2 + 66) + (((unint64_t)((uint64_t)v34 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v34 >> 1)) & 1) != 0)
          break;
        v102 = v7-- <= 0;
        if (v102)
        {
          v7 = -1;
          break;
        }
      }
    }
    if (v7 < v107)
      break;
    v35 = (_QWORD *)*((_QWORD *)v2 + 26);
    v36 = *(_DWORD *)(v35[9] + 4 * v7);
    v37 = (uint64_t)v36 >> 1;
    v38 = v35[15];
    v39 = *(_DWORD *)(v38 + 8 * (v36 >> 1));
    v40 = v37;
    if ((v39 & 0xF0000000) == 0x30000000)
    {
      v40 = *(int *)(v35[19] + 4 * v37);
      v41 = *(_DWORD *)(v38 + 8 * v40) >> 28;
      if (!v41)
      {
LABEL_50:
        --v7;
        if (*(_DWORD *)(v35[31] + 4 * v40) == 2)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else
    {
      v41 = *(_DWORD *)(v38 + 8 * (v36 >> 1)) >> 28;
      if (!v41)
        goto LABEL_50;
    }
    --v7;
    if (v41 == 2)
    {
LABEL_47:
      v43 = v32[1];
      v42 = (unint64_t)v32[2];
      if ((unint64_t)v43 >= v42)
      {
        v46 = *v32;
        v47 = (char *)v43 - (char *)*v32;
        v48 = v47 >> 2;
        v49 = (v47 >> 2) + 1;
        if (v49 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v50 = v42 - (_QWORD)v46;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (!v51)
        {
          v52 = 0;
          v53 = (int *)(4 * v48);
          *(_DWORD *)(4 * v48) = v36;
          v54 = 4 * v48 + 4;
          if (v43 == v46)
            goto LABEL_104;
LABEL_65:
          v55 = (char *)(v43 - 1) - (char *)v46;
          if (v55 < 0x2C)
            goto LABEL_127;
          if ((unint64_t)((char *)v43 - &v52[v47]) < 0x20)
            goto LABEL_127;
          v91 = (v55 >> 2) + 1;
          v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
          v93 = &v43[v92 / 0xFFFFFFFFFFFFFFFCLL];
          v53 = (int *)((char *)v53 - v92);
          v94 = &v52[4 * v48 - 16];
          v95 = v43 - 4;
          v96 = v91 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v97 = *(_OWORD *)v95;
            *(v94 - 1) = *((_OWORD *)v95 - 1);
            *v94 = v97;
            v94 -= 2;
            v95 -= 8;
            v96 -= 8;
          }
          while (v96);
          v43 = v93;
          if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_127:
            do
            {
              v98 = *--v43;
              *--v53 = v98;
            }
            while (v43 != v46);
          }
          goto LABEL_104;
        }
        if (v51 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v52 = operator new(4 * v51);
        v53 = (int *)&v52[4 * v48];
        *v53 = v36;
        v54 = (uint64_t)(v53 + 1);
        if (v43 != v46)
          goto LABEL_65;
LABEL_104:
        v32 = (int **)a2;
        *a2 = v53;
        a2[1] = v54;
        a2[2] = &v52[4 * v51];
        if (v46)
          operator delete(v46);
        a2[1] = v54;
      }
      else
      {
        *v43 = v36;
        v32[1] = v43 + 1;
      }
    }
    else
    {
LABEL_51:
      if ((v39 & 0xF0000000) == 0x30000000)
      {
        v37 = *(int *)(v35[19] + 4 * v37);
        v39 = *(_DWORD *)(v38 + 8 * v37);
      }
      v44 = v39 >> 28;
      if (v44)
      {
        if (v44 - 1 > 1)
        {
          v56 = *(_QWORD *)(v35[34] + 8 * v44);
          v57 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 32))(v56, *((_QWORD *)v2 + 26), *(unsigned int *)(v38 + 8 * v37 + 4));
          v58 = (uint64_t *)(v35[28] + 16 * v37);
          *v58 = v57;
          v58[1] = v59;
        }
        else
        {
          v45 = (_QWORD *)(v35[28] + 16 * v37);
          *v45 = 0;
          v45[1] = 0;
        }
        *(_DWORD *)(v35[31] + 4 * v37) = *(_DWORD *)(v38 + 8 * v37) >> 28;
        *(_DWORD *)(v35[15] + 8 * v37) &= 0xFFFFFFFu;
      }
      v60 = (int **)(v35[28] + 16 * v37);
      v61 = v60[1];
      if (v61)
      {
        v62 = *v60;
        v63 = (uint64_t)&(*v60)[(_QWORD)v61];
LABEL_74:
        v65 = *v62;
        v66 = *v62 >> 1;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 26) + 120) + 8 * v66) & 0xFFFFFFE) == 0)
          goto LABEL_73;
        v67 = v65 >> 1;
        v68 = (unint64_t)((uint64_t)v65 >> 1) >> 6;
        v69 = *((_QWORD *)v2 + 66);
        v70 = *(_QWORD *)(v69 + 8 * v68);
        v71 = 1 << v67;
        if ((v70 & v71) != 0)
          goto LABEL_73;
        *(_QWORD *)(v69 + 8 * v68) = v70 | v71;
        v72 = (int *)*((_QWORD *)v2 + 73);
        v73 = *((_QWORD *)v2 + 74);
        if ((unint64_t)v72 < v73)
        {
          *v72 = v66;
          v64 = (uint64_t)(v72 + 1);
        }
        else
        {
          v74 = (int *)*v108;
          v75 = (char *)v72 - (_BYTE *)*v108;
          v76 = v75 >> 2;
          v77 = (v75 >> 2) + 1;
          if (v77 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v78 = v73 - (_QWORD)v74;
          if (v78 >> 1 > v77)
            v77 = v78 >> 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            if (v79 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v80 = operator new(4 * v79);
            v81 = (int *)&v80[4 * v76];
            *v81 = v66;
            v64 = (uint64_t)(v81 + 1);
            if (v72 != v74)
            {
LABEL_86:
              v82 = (char *)(v72 - 1) - (char *)v74;
              if (v82 < 0x2C)
                goto LABEL_128;
              if ((unint64_t)((char *)v72 - &v80[v75]) < 0x20)
                goto LABEL_128;
              v83 = (v82 >> 2) + 1;
              v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
              v85 = &v72[v84 / 0xFFFFFFFFFFFFFFFCLL];
              v81 = (int *)((char *)v81 - v84);
              v86 = &v80[4 * v76 - 16];
              v87 = v72 - 4;
              v88 = v83 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v89 = *(_OWORD *)v87;
                *(v86 - 1) = *((_OWORD *)v87 - 1);
                *v86 = v89;
                v86 -= 2;
                v87 -= 8;
                v88 -= 8;
              }
              while (v88);
              v72 = v85;
              if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_128:
                do
                {
                  v90 = *--v72;
                  *--v81 = v90;
                }
                while (v72 != v74);
              }
            }
          }
          else
          {
            v80 = 0;
            v81 = (int *)(4 * v76);
            *(_DWORD *)(4 * v76) = v66;
            v64 = 4 * v76 + 4;
            if (v72 != v74)
              goto LABEL_86;
          }
          v2 = this;
          *((_QWORD *)this + 72) = v81;
          *((_QWORD *)this + 73) = v64;
          *((_QWORD *)this + 74) = &v80[4 * v79];
          if (v74)
            operator delete(v74);
        }
        *((_QWORD *)v2 + 73) = v64;
LABEL_73:
        if (++v62 == (int *)v63)
        {
          v32 = (int **)a2;
          continue;
        }
        goto LABEL_74;
      }
    }
  }
  v99 = *v32;
  v100 = v32[1];
  v101 = v100 - 1;
  v102 = *v32 != v100 && v101 > v99;
  if (v102)
  {
    v103 = (unint64_t)(v99 + 1);
    do
    {
      v104 = *(_DWORD *)(v103 - 4);
      *(_DWORD *)(v103 - 4) = *v101;
      *v101-- = v104;
      v105 = v103 >= (unint64_t)v101;
      v103 += 4;
    }
    while (!v105);
  }
}

void sub_22DBFA5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBFA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v10;

  v10 = *(void **)a9;
  if (*(_QWORD *)a9)
  {
    *(_QWORD *)(a9 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::ComputeLbd<operations_research::sat::SatClause>(uint64_t a1, int *a2)
{
  int v4;
  int *v5;
  uint64_t i;
  unint64_t v8;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 224) + 307))
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + 340);
  v5 = a2 + 1;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 856, ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (a2[1] >> 1)) >> 1) & 0x7FFFFFF) + 1);
  for (i = 4 * *a2; i; i -= 4)
  {
    v8 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (*v5 >> 1)) >> 1) & 0x7FFFFFF;
    if ((int)v8 > v4
      && ((*(_QWORD *)(*(_QWORD *)(a1 + 864) + ((v8 >> 3) & 0xFFFFF8)) >> ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * (*v5 >> 1)) >> 1)) & 1) == 0)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)(a1 + 856), v8);
    }
    ++v5;
  }
  return (*(_QWORD *)(a1 + 920) - *(_QWORD *)(a1 + 912)) >> 2;
}

void operations_research::sat::SatStatusString(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _BYTE v8[16];
  void *__p[2];
  unsigned __int8 v10;

  switch((int)a1)
  {
    case 0:
      a2[23] = 17;
      strcpy(a2, "ASSUMPTIONS_UNSAT");
      break;
    case 1:
      a2[23] = 10;
      strcpy(a2, "INFEASIBLE");
      break;
    case 2:
      a2[23] = 8;
      strcpy(a2, "FEASIBLE");
      break;
    case 3:
      a2[23] = 13;
      strcpy(a2, "LIMIT_REACHED");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2522, 2);
      v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid SatSolver::Status ", 26);
      operations_research::sat::SatStatusString(__p, a1);
      if ((v10 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v7 = v10;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      if ((char)v10 < 0)
        operator delete(__p[0]);
      google::LogMessage::~LogMessage((google::LogMessage *)v8);
      a2[23] = 7;
      strcpy(a2, "UNKNOWN");
      break;
  }
}

void sub_22DBFA8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a10);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

double operations_research::sat::SatSolver::ProcessNewlyFixedVariables(operations_research::sat::SatSolver *this)
{
  uint64_t v2;
  int **v3;
  int **v4;
  int v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  int v20;
  uint64_t i;
  unint64_t v22[2];
  int v23;
  uint64_t *v24;

  if (*((_QWORD *)this + 165))
  {
    if (!*((_DWORD *)this + 76))
    {
      v20 = *((_DWORD *)this + 90);
      for (i = *((_QWORD *)this + 26); v20 < *(_DWORD *)(i + 12); i = *((_QWORD *)this + 26))
      {
        LODWORD(v22[0]) = *(_DWORD *)(*(_QWORD *)(i + 72) + 4 * v20);
        operations_research::sat::DratProofHandler::AddClause(*((_QWORD *)this + 165), (int *)v22, 1);
        v20 = *((_DWORD *)this + 90) + 1;
        *((_DWORD *)this + 90) = v20;
      }
    }
  }
  v2 = *((_QWORD *)this + 4);
  v4 = *(int ***)(v2 + 304);
  v3 = *(int ***)(v2 + 312);
  if (v4 == v3)
  {
    v6 = 0;
    operations_research::sat::LiteralWatchers::CleanUpWatchers(v2);
    goto LABEL_24;
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *v4;
    v8 = **v4;
    if ((int)v8 >= 1)
    {
      if (operations_research::sat::SatClause::RemoveFixedLiteralsAndTestIfTrue(*v4, *((_QWORD *)this + 26) + 16))
      {
        operations_research::sat::LiteralWatchers::LazyDetach(*((_QWORD *)this + 4), v7);
        ++v5;
      }
      else
      {
        v9 = *v7;
        if ((_DWORD)v9 != (_DWORD)v8)
        {
          v10 = *((_QWORD *)this + 165);
          if (v10)
          {
            v22[0] = *v7;
            v23 = 0;
            if (!(_DWORD)v9)
            {
              v24 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v22, (int)&v23, "new_size > 0");
              if (v24)
              {
                google::LogMessageFatal::LogMessageFatal(v22, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1568, &v24);
                google::LogMessage::stream((google::LogMessage *)v22);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v22);
              }
              v10 = *((_QWORD *)this + 165);
            }
            operations_research::sat::DratProofHandler::AddClause(v10, v7 + 1, v9);
            operations_research::sat::DratProofHandler::DeleteClause(*((_QWORD *)this + 165), v7 + 1, v8);
          }
          if ((_DWORD)v9 == 2 && *(_BYTE *)(*((_QWORD *)this + 28) + 306))
          {
            v11 = v7[1];
            v12 = v7[2];
            if (!*((_BYTE *)this + 128)
              || operations_research::sat::BinaryClauseManager::Add((uint64_t *)this + 17, v11 | (v12 << 32)))
            {
              operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*((_QWORD *)this + 3), v11, v12);
              operations_research::sat::SatSolver::InitializePropagators(this);
            }
            operations_research::sat::LiteralWatchers::LazyDetach(*((_QWORD *)this + 4), v7);
            ++v6;
          }
        }
      }
    }
    ++v4;
  }
  while (v4 != v3);
  operations_research::sat::LiteralWatchers::CleanUpWatchers(*((_QWORD *)this + 4));
  if (v5 <= 0)
  {
LABEL_24:
    if (v6 <= 0)
      goto LABEL_29;
  }
  if (*operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__ >= 1
    && (operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1587);
    google::LogMessage::stream((google::LogMessage *)v22);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" fixed variables at level 0. ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Detached ", 9);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" clauses. ", 10);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" converted to binary.", 21);
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
LABEL_29:
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(*((_QWORD *)this + 3));
  v17 = *((_QWORD *)this + 26);
  v18 = *(int *)(v17 + 12);
  *((_DWORD *)this + 86) = v18;
  result = ((double)*(uint64_t *)(*((_QWORD *)this + 3) + 280)
          + (double)(*(_QWORD *)v17 + v18) * 8.0
          + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 192) * 4.0
          + (double)*(uint64_t *)(*((_QWORD *)this + 4) + 200)
          + (double)*(uint64_t *)(*((_QWORD *)this + 5) + 408) * 20.0
          + (double)*(uint64_t *)(*((_QWORD *)this + 5) + 424) * 2.0
          + (double)*(uint64_t *)(*((_QWORD *)this + 5) + 416))
         * 0.00000001;
  *((double *)this + 44) = result;
  return result;
}

void sub_22DBFAC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBFAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatSolver::ResolvePBConflict(uint64_t a1, int a2, operations_research::sat::MutableUpperBoundedLinearConstraint *a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  operations_research::sat::PbConstraints *v17;
  operations_research::sat::UpperBoundedLinearConstraint *v18;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int **v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  LODWORD(v6) = a2;
  v8 = *(_QWORD **)(a1 + 208);
  v9 = v8[15];
  v10 = (_DWORD *)(v9 + 8 * (int)v6);
  if (*v10 >> 28 != 3)
  {
    v11 = (int)v6;
    v12 = *(_DWORD *)(v9 + 8 * (int)v6);
    if (v12 >> 28 == 3)
      goto LABEL_3;
LABEL_6:
    v13 = v11;
    v14 = v6;
    v15 = v12 >> 28;
    if (!v15)
      goto LABEL_9;
LABEL_7:
    v16 = v10[1];
    v17 = *(operations_research::sat::PbConstraints **)(a1 + 40);
    if (v15 != *((_DWORD *)v17 + 8))
      goto LABEL_12;
    goto LABEL_10;
  }
  v11 = *(int *)(v8[19] + 4 * (int)v6);
  v12 = *(_DWORD *)(v9 + 8 * v11);
  if (v12 >> 28 != 3)
    goto LABEL_6;
LABEL_3:
  v13 = *(int *)(v8[19] + 4 * v11);
  v14 = v6;
  v15 = *(_DWORD *)(v9 + 8 * v13) >> 28;
  if (v15)
    goto LABEL_7;
LABEL_9:
  v16 = v10[1];
  v17 = *(operations_research::sat::PbConstraints **)(a1 + 40);
  if (*(_DWORD *)(v8[31] + 4 * v13) != *((_DWORD *)v17 + 8))
    goto LABEL_12;
LABEL_10:
  v18 = (operations_research::sat::UpperBoundedLinearConstraint *)operations_research::sat::PbConstraints::ReasonPbConstraint(v17, *(_DWORD *)(v9 + 8 * v11 + 4));
  v8 = *(_QWORD **)(a1 + 208);
  if (v18)
  {
    operations_research::sat::UpperBoundedLinearConstraint::ResolvePBConflict(v18, v8, v14, a3, a4);
    return 0;
  }
LABEL_12:
  operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo((uint64_t)a3, v8, v16, *a4, 0);
  operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a3, ((2 * v6) | (~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 24)+ (((unint64_t)(2 * (int)v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v14 & 0x1Fu))) & 1) ^ 1, 1);
  v20 = *(_QWORD **)(a1 + 208);
  v21 = v20[15];
  if (*(_DWORD *)(v21 + 8 * (int)v6) >> 28 != 3)
  {
    v6 = (int)v6;
    v22 = (_DWORD *)(v21 + 8 * (int)v6);
    v23 = *v22;
    if (!(v23 >> 28))
      goto LABEL_14;
LABEL_17:
    v26 = v23 >> 28;
    if ((v26 - 1) > 1)
    {
      v28 = *(_QWORD *)(v20[34] + 8 * v26);
      v29 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v28 + 32))(v28, v20, *(unsigned int *)(v21 + 8 * v6 + 4));
      v30 = (uint64_t *)(v20[28] + 16 * v6);
      *v30 = v29;
      v30[1] = v31;
    }
    else
    {
      v27 = (_QWORD *)(v20[28] + 16 * v6);
      *v27 = 0;
      v27[1] = 0;
    }
    *(_DWORD *)(v20[31] + 4 * v6) = *v22 >> 28;
    *(_DWORD *)(v20[15] + 8 * v6) &= 0xFFFFFFFu;
    v24 = (int **)(v20[28] + 16 * v6);
    v25 = (uint64_t)v24[1];
    if (!v25)
      goto LABEL_24;
    goto LABEL_21;
  }
  v6 = *(int *)(v20[19] + 4 * (int)v6);
  v22 = (_DWORD *)(v21 + 8 * v6);
  v23 = *v22;
  if (v23 >> 28)
    goto LABEL_17;
LABEL_14:
  v24 = (int **)(v20[28] + 16 * v6);
  v25 = (uint64_t)v24[1];
  if (v25)
  {
LABEL_21:
    v32 = *v24;
    v33 = (v25 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v34 = 4 * v25;
    do
    {
      v35 = *v32++;
      operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a3, v35 ^ 1, 1);
      v34 -= 4;
    }
    while (v34);
    v25 = v33 + 1;
  }
LABEL_24:
  *((_QWORD *)a3 + 3) += v25;
  *a4 = -1;
  return 1;
}

uint64_t operations_research::sat::SatSolver::MinimizeConflictSimple(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) >= 5)
  {
    v5 = result;
    v6 = *(_DWORD *)(result + 304);
    v7 = 1;
    v8 = 1;
    while (1)
    {
      v9 = *(_DWORD *)(v3 + 4 * v7);
      v10 = *(_QWORD **)(v5 + 208);
      v11 = v10[15];
      v12 = *(_DWORD *)(v11 + 8 * (v9 >> 1));
      if (((v12 >> 1) & 0x7FFFFFF) == v6)
        goto LABEL_3;
      v13 = (uint64_t)v9 >> 1;
      if (v12 >> 28 == 3)
      {
        v13 = *(int *)(v10[19] + 4 * v13);
        v14 = *(_DWORD *)(v11 + 8 * v13) >> 28;
        if (!v14)
        {
LABEL_8:
          v15 = v10[28] + 16 * v13;
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
            goto LABEL_15;
          goto LABEL_3;
        }
      }
      else
      {
        v14 = v12 >> 28;
        if (!v14)
          goto LABEL_8;
      }
      if (v14 - 1 > 1)
      {
        v18 = *(_QWORD *)(v10[34] + 8 * v14);
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, *(_QWORD *)(v5 + 208), *(unsigned int *)(v11 + 8 * v13 + 4));
        v19 = (uint64_t *)(v10[28] + 16 * v13);
        *v19 = result;
        v19[1] = v20;
      }
      else
      {
        v17 = (_QWORD *)(v10[28] + 16 * v13);
        *v17 = 0;
        v17[1] = 0;
      }
      *(_DWORD *)(v10[31] + 4 * v13) = *(_DWORD *)(v11 + 8 * v13) >> 28;
      *(_DWORD *)(v10[15] + 8 * v13) &= 0xFFFFFFFu;
      v15 = v10[28] + 16 * v13;
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
LABEL_15:
        v21 = *(int **)v15;
        v22 = 4 * v16;
        while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 208) + 120) + 8 * (*v21 >> 1)) & 0xFFFFFFE) == 0
             || ((*(_QWORD *)(*(_QWORD *)(v5 + 528)
                            + (((unint64_t)((uint64_t)*v21 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v21 >> 1)) & 1) != 0)
        {
          ++v21;
          v22 -= 4;
          if (!v22)
            goto LABEL_4;
        }
      }
LABEL_3:
      *(_DWORD *)(*a2 + 4 * v8++) = *(_DWORD *)(*a2 + 4 * v7);
LABEL_4:
      ++v7;
      v3 = *a2;
      v4 = a2[1];
      if (v7 >= (v4 - *a2) >> 2)
        goto LABEL_21;
    }
  }
  v8 = 1;
LABEL_21:
  v23 = v3 + 4 * v8;
  if (v23 != v4)
    a2[1] = v23;
  return result;
}

void operations_research::sat::SatSolver::MinimizeConflictRecursively(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _BOOL8 CanBeInferedFromConflictVariables;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  signed int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v28;
  absl::lts_2020_02_25 *v29;
  double v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  std::vector<int>::value_type __x;

  v4 = (_QWORD *)(a1 + 600);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 600, *(_DWORD *)(a1 + 16));
  v6 = *(int *)(a1 + 304);
  v7 = *(_QWORD *)(a1 + 760);
  v8 = (*(_QWORD *)(a1 + 768) - v7) >> 2;
  if (v8 <= v6)
  {
    v9 = v6 + 1;
    __x = 0x7FFFFFFF;
    if (v9 <= v8)
    {
      if (v9 < v8)
        *(_QWORD *)(a1 + 768) = v7 + 4 * v9;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 760), v9 - v8, &__x);
    }
  }
  v10 = *(int **)(a1 + 576);
  v11 = *(int **)(a1 + 584);
  if (v10 != v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 120);
    v13 = *(_QWORD *)(a1 + 760);
    do
    {
      v14 = *v10++;
      v15 = (unsigned int *)(v12 + 8 * v14);
      v17 = *v15;
      v16 = v15[1];
      v18 = 4 * ((v17 >> 1) & 0x7FFFFFF);
      if (v16 >= *(_DWORD *)(v13 + v18))
        v16 = *(_DWORD *)(v13 + v18);
      *(_DWORD *)(v13 + v18) = v16;
    }
    while (v10 != v11);
  }
  v19 = *a2;
  v20 = a2[1] - *a2;
  if (v20 >= 5)
  {
    v21 = 1;
    v22 = 1;
    while (1)
    {
      v23 = *(int *)(v19 + 4 * v21) >> 1;
      v24 = *(_QWORD *)(a1 + 216);
      v25 = *(unsigned __int8 **)(v24 + 120);
      if (v25)
      {
        v26 = atomic_load(v25);
        if ((v26 & 1) != 0)
          goto LABEL_29;
      }
      if (fmax(*(double *)(v24 + 104) - *(double *)(v24 + 112), 0.0) <= 0.0)
        goto LABEL_29;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CanBeInferedFromConflictVariables);
      if (*(_QWORD *)(v24 + 24) <= CurrentTimeNanos - *(_QWORD *)(v24 + 8))
        v28 = CurrentTimeNanos - *(_QWORD *)(v24 + 8);
      else
        v28 = *(_QWORD *)(v24 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v24 + 32), v28);
      *(_QWORD *)(v24 + 8) = CurrentTimeNanos;
      if (*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * *(int *)(v24 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v24 + 16))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_23;
        v30 = *(double *)(v24 + 96);
        if (*(_BYTE *)(v24 + 72))
        {
          v31 = v30
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v29) - *(_QWORD *)(v24 + 80) + *(_QWORD *)(v24 + 88))
              * -0.000000001;
          if (v31 <= 0.0001)
            goto LABEL_23;
        }
        else
        {
          v31 = v30 + (double)*(uint64_t *)(v24 + 88) * -0.000000001;
          if (v31 <= 0.0001)
          {
LABEL_23:
            *(_QWORD *)(v24 + 16) = 0;
LABEL_29:
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v23);
            v19 = *a2;
            *(_DWORD *)(*a2 + 4 * v22++) = *(_DWORD *)(*a2 + 4 * v21);
            goto LABEL_30;
          }
        }
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v24 + 8) + (uint64_t)(v31 * 1000000000.0);
      }
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * v23 + 4) <= *(_DWORD *)(*(_QWORD *)(a1 + 760)
                                                                                                + 4
                                                                                                * (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 120) + 8 * v23) >> 1) & 0x7FFFFFF)))
        goto LABEL_29;
      CanBeInferedFromConflictVariables = operations_research::sat::SatSolver::CanBeInferedFromConflictVariables((_QWORD *)a1, v23);
      if (!CanBeInferedFromConflictVariables)
        goto LABEL_29;
      v19 = *a2;
LABEL_30:
      ++v21;
      v32 = (a2[1] - v19) >> 2;
      if (v32 <= v21)
      {
        v33 = v22;
        v34 = v22 >= v32;
        v35 = v22 - v32;
        if (v22 > v32)
          goto LABEL_32;
LABEL_34:
        if (!v34)
          a2[1] = v19 + 4 * v33;
        goto LABEL_36;
      }
    }
  }
  v36 = v20 >> 2;
  v33 = 1;
  v34 = v36 <= 1;
  v35 = 1 - v36;
  if (v36)
    goto LABEL_34;
LABEL_32:
  std::vector<operations_research::sat::Literal>::__append((uint64_t)a2, v35);
LABEL_36:
  v37 = *(_QWORD *)(a1 + 760);
  v38 = *(int **)(a1 + 584);
  v39 = *(int **)(a1 + 576);
  if (v38 - v39 >= (unint64_t)(int)((unint64_t)(*(_QWORD *)(a1 + 768) - v37) >> 3))
  {
    *(_QWORD *)(a1 + 768) = v37;
  }
  else if (v39 != v38)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 120);
    do
    {
      v41 = *v39++;
      *(_DWORD *)(v37 + 4 * (((unint64_t)*(unsigned int *)(v40 + 8 * v41) >> 1) & 0x7FFFFFF)) = 0x7FFFFFFF;
    }
    while (v39 != v38);
  }
}

void operations_research::sat::SatSolver::MinimizeConflictExperimental(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int **v52;
  int *v53;
  int *v54;
  char *v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  BOOL v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  int *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  char *v134;
  uint64_t v135;
  int *v136;
  int v137;
  int *v138;
  int *v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int *v144;
  int v145;
  int v146;
  int *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t *v150;
  uint64_t *v151;
  int v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;

  v3 = a1;
  v4 = (_QWORD *)(a1 + 520);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 520, *(_DWORD *)(a1 + 16));
  v148 = a2;
  v149 = v4;
  v5 = (int *)*a2;
  v6 = (int *)a2[1];
  v155 = v3;
  if ((int *)*a2 != v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)(v3 + 304);
    v153 = v10;
    while (1)
    {
      v12 = (*v5 >> 1);
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, *v5 >> 1);
      v13 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 120) + 8 * (int)v12) >> 1) & 0x7FFFFFF;
      if ((int)v13 >= v10)
      {
        v11 = v8;
      }
      else
      {
        v14 = v12 | (v13 << 32);
        if (v8 >= v9)
        {
          v15 = v7;
          v16 = (char *)v8 - (char *)v7;
          v17 = v16 >> 3;
          v18 = (v16 >> 3) + 1;
          if (v18 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v19 = v15;
          v20 = (char *)v9 - (char *)v15;
          v21 = ((char *)v9 - (char *)v15) >> 2;
          if (v21 > v18)
            v18 = v21;
          if (v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v18;
          if (v22)
          {
            if (v22 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = (uint64_t *)&v23[8 * v17];
          *v24 = v14;
          v25 = v24 + 1;
          v26 = v19;
          if (v8 != v19)
          {
            v27 = (char *)(v8 - 1) - (char *)v19;
            v3 = v155;
            if (v27 < 0x168
              || &v23[v16 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v23[v16 - 8]
              || (uint64_t *)((char *)v8 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1
              || (unint64_t)((char *)v8 - &v23[v16]) < 0x20)
            {
              v28 = v8;
              v26 = v19;
              v4 = v149;
              v11 = v24 + 1;
            }
            else
            {
              v30 = (v27 >> 3) + 1;
              v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              v28 = &v8[v31 / 0xFFFFFFFFFFFFFFF8];
              v24 = (uint64_t *)((char *)v24 - v31);
              v32 = &v23[8 * v17 - 16];
              v33 = v8 - 2;
              v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              v26 = v19;
              do
              {
                v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *v32 = v35;
                v32 -= 2;
                v33 -= 4;
                v34 -= 4;
              }
              while (v34);
              v4 = v149;
              v11 = v25;
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_22:
                v9 = (uint64_t *)&v23[8 * v22];
                if (v26)
                  goto LABEL_23;
                goto LABEL_24;
              }
            }
            do
            {
              v29 = *--v28;
              *--v24 = v29;
            }
            while (v28 != v26);
            goto LABEL_22;
          }
          v3 = v155;
          v4 = v149;
          v11 = v24 + 1;
          v9 = (uint64_t *)&v23[8 * v22];
          if (v26)
LABEL_23:
            operator delete(v26);
LABEL_24:
          v7 = v24;
          v10 = v153;
          goto LABEL_4;
        }
        *v8 = v14;
        v11 = v8 + 1;
        v3 = v155;
      }
LABEL_4:
      ++v5;
      v8 = v11;
      if (v5 == v6)
        goto LABEL_35;
    }
  }
  v11 = 0;
  v7 = 0;
LABEL_35:
  v36 = 126 - 2 * __clz(v11 - v7);
  if (v11 == v7)
    v37 = 0;
  else
    v37 = v36;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  if (v11 == v7)
  {
    v134 = 0;
    v139 = (int *)*v148;
    v138 = (int *)v148[1];
    v140 = 0;
    v141 = (uint64_t)v138 - *v148;
    if (v138 == (int *)*v148)
      goto LABEL_166;
    goto LABEL_160;
  }
  v38 = v7;
  v150 = v7;
  v151 = v11;
  while (2)
  {
    v39 = *v38;
    v40 = *(_QWORD **)(v3 + 208);
    v41 = v40[15];
    v42 = *v38;
    if (*(_DWORD *)(v41 + (*v38 << 32 >> 29)) >> 28 == 3)
      LODWORD(v42) = *(_DWORD *)(v40[19] + 4 * (int)v39);
    v43 = (int)v42;
    v44 = (_DWORD *)(v41 + 8 * (int)v42);
    v45 = *v44;
    if (v45 >> 28)
    {
      v46 = v45 >> 28;
      if ((v46 - 1) > 1)
      {
        v48 = *(_QWORD *)(v40[34] + 8 * v46);
        v49 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v48 + 32))(v48, *(_QWORD *)(v3 + 208), *(unsigned int *)(v41 + 8 * v43 + 4));
        v50 = (uint64_t *)(v40[28] + 16 * v43);
        *v50 = v49;
        v50[1] = v51;
      }
      else
      {
        v47 = (_QWORD *)(v40[28] + 16 * v43);
        *v47 = 0;
        v47[1] = 0;
      }
      *(_DWORD *)(v40[31] + 4 * v43) = *v44 >> 28;
      *(_DWORD *)(v40[15] + 8 * v43) &= 0xFFFFFFFu;
    }
    v52 = (int **)(v40[28] + 16 * v43);
    v53 = v52[1];
    if (!v53)
      goto LABEL_40;
    v152 = v39;
    v154 = v38;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = *v52;
    v59 = (uint64_t)&(*v52)[(_QWORD)v53];
    do
    {
      v61 = *v58;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 120) + 8 * (*v58 >> 1)) & 0xFFFFFFE) == 0
        || ((*(_QWORD *)(*(_QWORD *)(v3 + 528) + (((unint64_t)((uint64_t)v61 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v61 >> 1)) & 1) != 0)
      {
        goto LABEL_52;
      }
      if (v56 < v57)
      {
        *(_DWORD *)v56 = v61;
        v60 = (uint64_t)(v56 + 4);
        goto LABEL_51;
      }
      v62 = (v56 - v55) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v57 - v55) >> 1 > v63)
        v63 = (v57 - v55) >> 1;
      if ((unint64_t)(v57 - v55) >= 0x7FFFFFFFFFFFFFFCLL)
        v64 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
      {
        if (v64 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v65 = operator new(4 * v64);
        v54 = (int *)&v65[4 * v62];
        *v54 = v61;
        v60 = (uint64_t)(v54 + 1);
        if (v56 == v55)
        {
LABEL_71:
          v3 = v155;
          v57 = &v65[4 * v64];
          if (!v55)
            goto LABEL_51;
LABEL_72:
          operator delete(v55);
          goto LABEL_51;
        }
      }
      else
      {
        v65 = 0;
        v54 = (int *)(4 * v62);
        *(_DWORD *)(4 * v62) = v61;
        v60 = 4 * v62 + 4;
        if (v56 == v55)
          goto LABEL_71;
      }
      v66 = v56 - 4 - v55;
      if (v66 < 0xBC
        || &v65[v56 - v55 - 4 - (v66 & 0xFFFFFFFFFFFFFFFCLL)] > &v65[v56 - v55 - 4]
        || &v56[-(v66 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
        || (unint64_t)(v55 - v65) < 0x20)
      {
        v67 = v56;
        v3 = v155;
        do
        {
LABEL_67:
          v68 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *--v54 = v68;
        }
        while (v67 != v55);
        goto LABEL_68;
      }
      v69 = (v66 >> 2) + 1;
      v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
      v67 = &v56[-v70];
      v54 = (int *)((char *)v54 - v70);
      v71 = &v65[4 * v62 - 16];
      v72 = v56 - 16;
      v73 = v69 & 0x7FFFFFFFFFFFFFF8;
      v3 = v155;
      do
      {
        v74 = *(_OWORD *)v72;
        *(v71 - 1) = *((_OWORD *)v72 - 1);
        *v71 = v74;
        v71 -= 2;
        v72 -= 32;
        v73 -= 8;
      }
      while (v73);
      if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_67;
LABEL_68:
      v57 = &v65[4 * v64];
      if (v55)
        goto LABEL_72;
LABEL_51:
      v55 = (char *)v54;
      v56 = (char *)v60;
      if ((unint64_t)(v60 - (_QWORD)v54) > 4)
        break;
LABEL_52:
      ++v58;
      v60 = (uint64_t)v56;
    }
    while (v58 != (int *)v59);
    if (v54 == (int *)v60)
    {
      v78 = v157;
      v7 = v150;
      if (v157 < v158)
      {
        v11 = v151;
        *(_DWORD *)v157 = v152;
        v38 = v154;
        v157 += 4;
        goto LABEL_152;
      }
      v79 = v156;
      v80 = (v157 - v156) >> 2;
      v81 = v80 + 1;
      v38 = v154;
      if ((unint64_t)(v80 + 1) >> 62)
LABEL_176:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v82 = v158 - v156;
      if ((v158 - v156) >> 1 > v81)
        v81 = v82 >> 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
        v83 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 >> 62)
          goto LABEL_177;
        v84 = (char *)operator new(4 * v83);
        v85 = &v84[4 * v80];
        *(_DWORD *)v85 = v152;
        v86 = (uint64_t)(v85 + 4);
        if (v157 != v156)
          goto LABEL_96;
      }
      else
      {
        v84 = 0;
        v85 = (char *)(4 * v80);
        *(_DWORD *)(4 * v80) = v152;
        v86 = 4 * v80 + 4;
        if (v157 != v156)
        {
LABEL_96:
          v87 = v157 - 4 - v156;
          if (v87 >= 0x2C)
          {
            v3 = v155;
            if ((unint64_t)(v156 - v84) >= 0x20)
            {
              v117 = (v87 >> 2) + 1;
              v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
              v119 = &v157[-v118];
              v85 -= v118;
              v120 = &v84[4 * v80 - 16];
              v121 = (__int128 *)(v157 - 16);
              v122 = v117 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v123 = *v121;
                *((_OWORD *)v120 - 1) = *(v121 - 1);
                *(_OWORD *)v120 = v123;
                v120 -= 32;
                v121 -= 2;
                v122 -= 8;
              }
              while (v122);
              v78 = v119;
              if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_137;
            }
          }
          else
          {
            v3 = v155;
          }
          do
          {
            v124 = *((_DWORD *)v78 - 1);
            v78 -= 4;
            *((_DWORD *)v85 - 1) = v124;
            v85 -= 4;
          }
          while (v78 != v156);
LABEL_137:
          v156 = v85;
          v158 = &v84[4 * v83];
          if (v79)
            operator delete(v79);
          v11 = v151;
          v157 = (char *)v86;
          goto LABEL_152;
        }
      }
      v3 = v155;
      goto LABEL_137;
    }
    v75 = v60 - (_QWORD)v54 == 4;
    v7 = v150;
    v11 = v151;
    v38 = v154;
    if (!v75)
      goto LABEL_152;
    v76 = v157;
    if (v157 < v158)
    {
      *(_DWORD *)v157 = v152;
      v77 = (uint64_t)(v157 + 4);
      goto LABEL_119;
    }
    v88 = v156;
    v89 = (v157 - v156) >> 2;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 62)
      goto LABEL_176;
    v91 = v158 - v156;
    if ((v158 - v156) >> 1 > v90)
      v90 = v91 >> 1;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
      v92 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (!v92)
    {
      v93 = 0;
      v94 = (char *)(4 * v89);
      *(_DWORD *)(4 * v89) = v152;
      v77 = 4 * v89 + 4;
      if (v157 == v156)
        goto LABEL_117;
      goto LABEL_111;
    }
    if (v92 >> 62)
      goto LABEL_177;
    v93 = (char *)operator new(4 * v92);
    v94 = &v93[4 * v89];
    *(_DWORD *)v94 = v152;
    v77 = (uint64_t)(v94 + 4);
    if (v157 != v156)
    {
LABEL_111:
      v95 = v157 - 4 - v156;
      if (v95 < 0x2C)
        goto LABEL_182;
      if ((unint64_t)(v156 - v93) < 0x20)
        goto LABEL_182;
      v96 = (v95 >> 2) + 1;
      v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
      v98 = &v157[-v97];
      v94 -= v97;
      v99 = &v93[4 * v89 - 16];
      v100 = (__int128 *)(v157 - 16);
      v101 = v96 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v102 = *v100;
        *((_OWORD *)v99 - 1) = *(v100 - 1);
        *(_OWORD *)v99 = v102;
        v99 -= 32;
        v100 -= 2;
        v101 -= 8;
      }
      while (v101);
      v76 = v98;
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_182:
        do
        {
          v103 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *((_DWORD *)v94 - 1) = v103;
          v94 -= 4;
        }
        while (v76 != v156);
      }
    }
LABEL_117:
    v156 = v94;
    v158 = &v93[4 * v92];
    if (v88)
      operator delete(v88);
LABEL_119:
    v157 = (char *)v77;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v149, *v54 >> 1);
    v104 = v148;
    v106 = (char *)v148[1];
    v105 = v148[2];
    if ((unint64_t)v106 < v105)
    {
      *(_DWORD *)v106 = *v54;
      v107 = (uint64_t)(v106 + 4);
      v3 = v155;
      goto LABEL_151;
    }
    v108 = (char *)*v148;
    v109 = (uint64_t)&v106[-*v148];
    v110 = v109 >> 2;
    v111 = (v109 >> 2) + 1;
    if (v111 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v112 = v105 - (_QWORD)v108;
    if (v112 >> 1 > v111)
      v111 = v112 >> 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
      v113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v113 = v111;
    if (v113)
    {
      if (!(v113 >> 62))
      {
        v114 = operator new(4 * v113);
        v115 = (int *)&v114[4 * v110];
        *v115 = *v54;
        v107 = (uint64_t)(v115 + 1);
        if (v106 != v108)
          goto LABEL_130;
LABEL_141:
        v3 = v155;
        goto LABEL_147;
      }
LABEL_177:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v114 = 0;
    v115 = (int *)(4 * v110);
    *(_DWORD *)(4 * v110) = *v54;
    v107 = 4 * v110 + 4;
    if (v106 == v108)
      goto LABEL_141;
LABEL_130:
    v116 = v106 - 4 - v108;
    if (v116 >= 0x2C)
    {
      v125 = v106 - &v114[v109];
      v3 = v155;
      if (v125 >= 0x20)
      {
        v126 = (v116 >> 2) + 1;
        v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
        v128 = &v106[-v127];
        v115 = (int *)((char *)v115 - v127);
        v129 = &v114[4 * v110 - 16];
        v130 = v106 - 16;
        v131 = v126 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v132 = *(_OWORD *)v130;
          *(v129 - 1) = *((_OWORD *)v130 - 1);
          *v129 = v132;
          v129 -= 2;
          v130 -= 32;
          v131 -= 8;
        }
        while (v131);
        v106 = v128;
        if (v126 == (v126 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_147;
      }
    }
    else
    {
      v3 = v155;
    }
    do
    {
      v133 = *((_DWORD *)v106 - 1);
      v106 -= 4;
      *--v115 = v133;
    }
    while (v106 != v108);
LABEL_147:
    *v148 = v115;
    v148[1] = v107;
    v148[2] = &v114[4 * v113];
    if (v108)
      operator delete(v108);
    v104 = v148;
LABEL_151:
    v104[1] = v107;
    v11 = v151;
LABEL_152:
    if (v54)
      operator delete(v54);
LABEL_40:
    if (++v38 != v11)
      continue;
    break;
  }
  v134 = v156;
  if (v156 != v157)
  {
    v135 = *(_QWORD *)(v3 + 528);
    v136 = (int *)v156;
    do
    {
      v137 = *v136++;
      *(_QWORD *)(v135 + (((unint64_t)v137 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v137);
    }
    while (v136 != (int *)v157);
  }
  v139 = (int *)*v148;
  v138 = (int *)v148[1];
  v140 = 0;
  v141 = (uint64_t)v138 - *v148;
  if (v138 != (int *)*v148)
  {
LABEL_160:
    v142 = v141 >> 2;
    v143 = *(_QWORD *)(v3 + 528);
    if (v142 <= 1)
      v142 = 1;
    v144 = v139;
    do
    {
      v146 = *v144++;
      v145 = v146;
      if (((*(_QWORD *)(v143 + (((unint64_t)((uint64_t)v146 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v146 >> 1)) & 1) != 0)
        v139[v140++] = v145;
      --v142;
    }
    while (v142);
  }
LABEL_166:
  v147 = &v139[v140];
  if (v147 != v138)
    v148[1] = v147;
  if (v134)
    operator delete(v134);
  if (v7)
    operator delete(v7);
}

void sub_22DBFBF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  if (v21)
    operator delete(v21);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::SatSolver::CanBeInferedFromConflictVariables(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  int *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _OWORD *v65;
  int *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  unint64_t v92;
  char *v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD *v99;
  int **v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int *v115;
  unint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  int *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  _OWORD *v130;
  int *v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  int *v141;
  int *v142;
  int v143;
  _QWORD *v145;
  void **v146;

  v3 = a2;
  v4 = a1[135];
  v145 = a1 + 134;
  v6 = 8 * a2;
  v7 = a2;
  if (((*(_QWORD *)(v4 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    v10 = a1[130];
    if (*(_DWORD *)(*(_QWORD *)(v10 + 120) + 8 * a2) >> 28 == 3)
    {
      v11 = *(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * a2);
      if (v11 != a2)
      {
        v7 = v11;
        if (((*(_QWORD *)(v4 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          goto LABEL_2;
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v145, v11);
        *(_DWORD *)(a1[131] + 4 * v7) = a2;
      }
    }
LABEL_8:
    v12 = (_DWORD *)a1[98];
    a1[99] = v12;
    v13 = a1[100];
    if ((unint64_t)v12 >= v13)
    {
      v15 = v13 - (_QWORD)v12;
      v16 = v15 >> 1;
      if ((unint64_t)(v15 >> 1) <= 1)
        v16 = 1;
      v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
      v18 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v16;
      if (v18 >> 62)
        goto LABEL_152;
      v19 = v18;
      v20 = operator new(4 * v18);
      v21 = &v20[v19];
      a1[98] = v20;
      *v20 = a2;
      v14 = v20 + 1;
      a1[99] = v20 + 1;
      a1[100] = v21;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = a2;
      v14 = v12 + 1;
    }
    a1[99] = v14;
    v22 = (_DWORD *)a1[101];
    a1[102] = v22;
    v23 = a1[103];
    if ((unint64_t)v22 < v23)
    {
      *v22 = a2;
      v24 = v22 + 1;
      goto LABEL_26;
    }
    v25 = v23 - (_QWORD)v22;
    v26 = v25 >> 1;
    if ((unint64_t)(v25 >> 1) <= 1)
      v26 = 1;
    v17 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
    v27 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v17)
      v27 = v26;
    if (!(v27 >> 62))
    {
      v28 = v27;
      v29 = operator new(4 * v27);
      v30 = &v29[v28];
      a1[101] = v29;
      *v29 = a2;
      v24 = v29 + 1;
      a1[102] = v29 + 1;
      a1[103] = v30;
      if (v22)
        operator delete(v22);
LABEL_26:
      a1[102] = v24;
      v31 = (_QWORD *)a1[26];
      v32 = v31[15];
      if (*(_DWORD *)(v32 + v6) >> 28 == 3)
      {
        v33 = *(int *)(v31[19] + 4 * v3);
        v34 = (_DWORD *)(v32 + 8 * v33);
        v35 = *v34;
        if (v35 >> 28)
          goto LABEL_28;
      }
      else
      {
        v33 = a2;
        v34 = (_DWORD *)(v32 + 8 * a2);
        v35 = *v34;
        if (v35 >> 28)
        {
LABEL_28:
          v36 = v35 >> 28;
          if ((v36 - 1) > 1)
          {
            v40 = *(_QWORD *)(v31[34] + 8 * v36);
            v41 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v40 + 32))(v40, a1[26], *(unsigned int *)(v32 + 8 * v33 + 4));
            v42 = (uint64_t *)(v31[28] + 16 * v33);
            *v42 = v41;
            v42[1] = v43;
          }
          else
          {
            v37 = (_QWORD *)(v31[28] + 16 * v33);
            *v37 = 0;
            v37[1] = 0;
          }
          *(_DWORD *)(v31[31] + 4 * v33) = *v34 >> 28;
          *(_DWORD *)(v31[15] + 8 * v33) &= 0xFFFFFFFu;
          v146 = (void **)(a1 + 101);
          v38 = v31[28] + 16 * v33;
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
            goto LABEL_35;
LABEL_64:
          v70 = a1[102];
          if (a1[101] == v70)
          {
LABEL_144:
            v141 = (int *)a1[98];
            v142 = (int *)a1[99];
            if (v141 == v142)
            {
              return 1;
            }
            else
            {
              do
              {
                v143 = *v141++;
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 75, v143);
              }
              while (v141 != v142);
              return a1[98] == a1[99];
            }
          }
          v71 = a1 + 98;
          while (1)
          {
            v72 = v70 - 4;
            v73 = *(_DWORD *)(v70 - 4);
            v74 = (char *)a1[99];
            if (v73 == *((_DWORD *)v74 - 1))
            {
              if ((unint64_t)&v74[-*v71] >= 5)
              {
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 65, *(_DWORD *)(v70 - 4));
                v70 = a1[102];
                v74 = (char *)a1[99];
              }
              a1[102] = v70 - 4;
              a1[99] = v74 - 4;
              goto LABEL_67;
            }
            v75 = v73;
            v76 = (unint64_t)v73 >> 6;
            if ((*(_QWORD *)(a1[66] + 8 * v76) & (1 << v73)) != 0)
              goto LABEL_72;
            v77 = a1[135];
            v78 = v73;
            if ((*(_QWORD *)(v77 + 8 * v76) & (1 << v73)) == 0)
            {
              v80 = a1[130];
              if (*(_DWORD *)(*(_QWORD *)(v80 + 120) + 8 * v73) >> 28 != 3)
                goto LABEL_81;
              v81 = *(_DWORD *)(*(_QWORD *)(v80 + 152) + 4 * v73);
              if (v81 == v73)
                goto LABEL_81;
              v78 = v81;
              if (((*(_QWORD *)(v77 + (((unint64_t)v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v81) & 1) == 0)
              {
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v145, v81);
                *(_DWORD *)(a1[131] + 4 * v78) = v73;
                v74 = (char *)a1[99];
                goto LABEL_81;
              }
            }
            v79 = *(int *)(a1[131] + 4 * v78);
            if ((_DWORD)v79 != v73)
            {
              if (((*(_QWORD *)(a1[76] + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v79) & 1) != 0)
                goto LABEL_144;
LABEL_72:
              a1[102] = v72;
              goto LABEL_67;
            }
LABEL_81:
            v82 = a1[100];
            if ((unint64_t)v74 < v82)
            {
              *(_DWORD *)v74 = v73;
              v83 = (uint64_t)(v74 + 4);
              goto LABEL_98;
            }
            v84 = (char *)*v71;
            v85 = (uint64_t)&v74[-*v71];
            v86 = v85 >> 2;
            v87 = (v85 >> 2) + 1;
            if (v87 >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v88 = v82 - (_QWORD)v84;
            if (v88 >> 1 > v87)
              v87 = v88 >> 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v89 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              if (v89 >> 62)
                goto LABEL_152;
              v90 = operator new(4 * v89);
              v91 = &v90[4 * v86];
              *v91 = v73;
              v83 = (uint64_t)(v91 + 1);
              if (v74 == v84)
              {
LABEL_138:
                v71 = a1 + 98;
                a1[98] = v91;
                a1[99] = v83;
                a1[100] = &v90[4 * v89];
                if (!v84)
                  goto LABEL_98;
LABEL_97:
                operator delete(v84);
                goto LABEL_98;
              }
            }
            else
            {
              v90 = 0;
              v91 = (_DWORD *)(4 * v86);
              *(_DWORD *)(4 * v86) = v73;
              v83 = 4 * v86 + 4;
              if (v74 == v84)
                goto LABEL_138;
            }
            v92 = v74 - 4 - v84;
            if (v92 < 0x2C || (unint64_t)(v74 - &v90[v85]) < 0x20)
            {
              v93 = v74;
              v71 = a1 + 98;
              do
              {
LABEL_95:
                v94 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *--v91 = v94;
              }
              while (v93 != v84);
              goto LABEL_96;
            }
            v135 = (v92 >> 2) + 1;
            v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
            v93 = &v74[-v136];
            v91 = (_DWORD *)((char *)v91 - v136);
            v137 = &v90[4 * v86 - 16];
            v138 = v74 - 16;
            v139 = v135 & 0x7FFFFFFFFFFFFFF8;
            v71 = a1 + 98;
            do
            {
              v140 = *(_OWORD *)v138;
              *(v137 - 1) = *((_OWORD *)v138 - 1);
              *v137 = v140;
              v137 -= 2;
              v138 -= 32;
              v139 -= 8;
            }
            while (v139);
            if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_95;
LABEL_96:
            a1[98] = v91;
            a1[99] = v83;
            a1[100] = &v90[4 * v89];
            if (v84)
              goto LABEL_97;
LABEL_98:
            a1[99] = v83;
            v95 = (_QWORD *)a1[26];
            v96 = v95[15];
            v97 = *(_DWORD *)(v96 + 8 * v75);
            if (v97 >> 28 == 3)
            {
              v75 = *(int *)(v95[19] + 4 * v75);
              v98 = *(_DWORD *)(v96 + 8 * v75) >> 28;
              if (v98)
                goto LABEL_100;
            }
            else
            {
              v98 = v97 >> 28;
              if (v98)
              {
LABEL_100:
                if (v98 - 1 > 1)
                {
                  v102 = *(_QWORD *)(v95[34] + 8 * v98);
                  v103 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v102 + 32))(v102, a1[26], *(unsigned int *)(v96 + 8 * v75 + 4));
                  v104 = (uint64_t *)(v95[28] + 16 * v75);
                  *v104 = v103;
                  v104[1] = v105;
                }
                else
                {
                  v99 = (_QWORD *)(v95[28] + 16 * v75);
                  *v99 = 0;
                  v99[1] = 0;
                }
                *(_DWORD *)(v95[31] + 4 * v75) = *(_DWORD *)(v96 + 8 * v75) >> 28;
                *(_DWORD *)(v95[15] + 8 * v75) &= 0xFFFFFFFu;
                v100 = (int **)(v95[28] + 16 * v75);
                v101 = v100[1];
                if (!v101)
                  goto LABEL_67;
LABEL_107:
                v106 = *v100;
                v107 = (uint64_t)&(*v100)[(_QWORD)v101];
                while (2)
                {
                  v109 = *v106;
                  v110 = *v106 >> 1;
                  v111 = *(_QWORD *)(a1[26] + 120);
                  v112 = ((unint64_t)*(unsigned int *)(v111 + 8 * v110) >> 1) & 0x7FFFFFF;
                  if (!(_DWORD)v112)
                    goto LABEL_110;
                  v113 = (uint64_t)v109 >> 1;
                  v114 = 1 << (v109 >> 1);
                  if ((*(_QWORD *)(a1[66] + 8 * (v113 >> 6)) & v114) != 0)
                    goto LABEL_110;
                  if (*(_DWORD *)(v111 + 8 * v113 + 4) <= *(_DWORD *)(a1[95] + 4 * v112)
                    || (*(_QWORD *)(a1[76] + 8 * (v113 >> 6)) & v114) != 0)
                  {
                    goto LABEL_144;
                  }
                  v115 = (int *)a1[102];
                  v116 = a1[103];
                  if ((unint64_t)v115 < v116)
                  {
                    *v115 = v110;
                    v108 = (uint64_t)(v115 + 1);
                    goto LABEL_109;
                  }
                  v117 = (int *)*v146;
                  v118 = (char *)v115 - (_BYTE *)*v146;
                  v119 = v118 >> 2;
                  v120 = (v118 >> 2) + 1;
                  if (v120 >> 62)
                    goto LABEL_153;
                  v121 = v116 - (_QWORD)v117;
                  if (v121 >> 1 > v120)
                    v120 = v121 >> 1;
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                    v122 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v122 = v120;
                  if (v122)
                  {
                    if (v122 >> 62)
                      goto LABEL_152;
                    v123 = operator new(4 * v122);
                    v124 = (int *)&v123[4 * v119];
                    *v124 = v110;
                    v108 = (uint64_t)(v124 + 1);
                    if (v115 != v117)
                    {
LABEL_125:
                      v125 = (char *)(v115 - 1) - (char *)v117;
                      if (v125 < 0x2C)
                      {
                        v71 = a1 + 98;
                        goto LABEL_133;
                      }
                      v126 = (char *)v115 - &v123[v118];
                      v71 = a1 + 98;
                      if (v126 < 0x20)
                        goto LABEL_157;
                      v127 = (v125 >> 2) + 1;
                      v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
                      v129 = &v115[v128 / 0xFFFFFFFFFFFFFFFCLL];
                      v124 = (int *)((char *)v124 - v128);
                      v130 = &v123[4 * v119 - 16];
                      v131 = v115 - 4;
                      v132 = v127 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v133 = *(_OWORD *)v131;
                        *(v130 - 1) = *((_OWORD *)v131 - 1);
                        *v130 = v133;
                        v130 -= 2;
                        v131 -= 8;
                        v132 -= 8;
                      }
                      while (v132);
                      v115 = v129;
                      if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_157:
                        do
                        {
LABEL_133:
                          v134 = *--v115;
                          *--v124 = v134;
                        }
                        while (v115 != v117);
                      }
LABEL_134:
                      a1[101] = v124;
                      a1[102] = v108;
                      a1[103] = &v123[4 * v122];
                      if (v117)
                        operator delete(v117);
LABEL_109:
                      a1[102] = v108;
LABEL_110:
                      if (++v106 == (int *)v107)
                        goto LABEL_67;
                      continue;
                    }
                  }
                  else
                  {
                    v123 = 0;
                    v124 = (int *)(4 * v119);
                    *(_DWORD *)(4 * v119) = v110;
                    v108 = 4 * v119 + 4;
                    if (v115 != v117)
                      goto LABEL_125;
                  }
                  break;
                }
                v71 = a1 + 98;
                goto LABEL_134;
              }
            }
            v100 = (int **)(v95[28] + 16 * v75);
            v101 = v100[1];
            if (v101)
              goto LABEL_107;
LABEL_67:
            v70 = a1[102];
            if (a1[101] == v70)
              goto LABEL_144;
          }
        }
      }
      v146 = (void **)(a1 + 101);
      v38 = v31[28] + 16 * v33;
      v39 = *(_QWORD *)(v38 + 8);
      if (v39)
      {
LABEL_35:
        v44 = *(int **)v38;
        v45 = *(_QWORD *)v38 + 4 * v39;
        while (1)
        {
          v46 = *v44 >> 1;
          v47 = (uint64_t)*v44 >> 1;
          if (((1 << v46) & *(_QWORD *)(a1[66] + 8 * (v47 >> 6))) == 0)
          {
            v48 = *(_QWORD *)(a1[26] + 120);
            v49 = ((unint64_t)*(unsigned int *)(v48 + 8 * v47) >> 1) & 0x7FFFFFF;
            if ((_DWORD)v49)
            {
              if (*(_DWORD *)(v48 + 8 * v47 + 4) <= *(_DWORD *)(a1[95] + 4 * v49)
                || (*(_QWORD *)(a1[76] + 8 * (v47 >> 6)) & (1 << v46)) != 0)
              {
                return 0;
              }
              v50 = (int *)a1[102];
              v51 = a1[103];
              if ((unint64_t)v50 < v51)
              {
                *v50 = v46;
                v52 = (uint64_t)(v50 + 1);
LABEL_63:
                a1[102] = v52;
                goto LABEL_37;
              }
              v53 = (int *)*v146;
              v54 = (char *)v50 - (_BYTE *)*v146;
              v55 = v54 >> 2;
              v56 = (v54 >> 2) + 1;
              if (v56 >> 62)
LABEL_153:
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v57 = v51 - (_QWORD)v53;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                if (v58 >> 62)
                  goto LABEL_152;
                v59 = operator new(4 * v58);
                v60 = (int *)&v59[4 * v55];
                *v60 = v46;
                v52 = (uint64_t)(v60 + 1);
                if (v50 == v53)
                  goto LABEL_61;
LABEL_55:
                v61 = (char *)(v50 - 1) - (char *)v53;
                if (v61 < 0x2C)
                  goto LABEL_158;
                if ((unint64_t)((char *)v50 - &v59[v54]) < 0x20)
                  goto LABEL_158;
                v62 = (v61 >> 2) + 1;
                v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
                v64 = &v50[v63 / 0xFFFFFFFFFFFFFFFCLL];
                v60 = (int *)((char *)v60 - v63);
                v65 = &v59[4 * v55 - 16];
                v66 = v50 - 4;
                v67 = v62 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v68 = *(_OWORD *)v66;
                  *(v65 - 1) = *((_OWORD *)v66 - 1);
                  *v65 = v68;
                  v65 -= 2;
                  v66 -= 8;
                  v67 -= 8;
                }
                while (v67);
                v50 = v64;
                if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_158:
                  do
                  {
                    v69 = *--v50;
                    *--v60 = v69;
                  }
                  while (v50 != v53);
                }
              }
              else
              {
                v59 = 0;
                v60 = (int *)(4 * v55);
                *(_DWORD *)(4 * v55) = v46;
                v52 = 4 * v55 + 4;
                if (v50 != v53)
                  goto LABEL_55;
              }
LABEL_61:
              a1[101] = v60;
              a1[102] = v52;
              a1[103] = &v59[4 * v58];
              if (v53)
                operator delete(v53);
              goto LABEL_63;
            }
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 65, *v44 >> 1);
          }
LABEL_37:
          if (++v44 == (int *)v45)
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    }
LABEL_152:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
LABEL_2:
  v8 = *(int *)(a1[131] + 4 * v7);
  if ((_DWORD)v8 == a2)
    goto LABEL_8;
  return ((*(_QWORD *)(a1[76] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0;
}

operations_research::sat::PbConstraints *operations_research::sat::PbConstraints::PbConstraints(operations_research::sat::PbConstraints *this, operations_research::sat::Model *a2)
{
  operations_research::sat::Trail *v4;

  *((_WORD *)this + 11) = 0;
  *((_BYTE *)this + 31) = 13;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *(_QWORD *)this = &off_24F987760;
  strcpy((char *)this + 8, "PbConstraints");
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = (char *)this + 112;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 38) = -1;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 24) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = -1;
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 39) = 0x3FF0000000000000;
  *((_QWORD *)this + 40) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  strcpy((char *)this + 328, "PbConstraints");
  *((_BYTE *)this + 351) = 13;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_22DBFCB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a2);
  operations_research::ConnectedComponents<int,int>::~ConnectedComponents((_QWORD *)(v5 + 48));
  absl::lts_2020_02_25::flat_hash_map<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::~flat_hash_map(v5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v4);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v3);
  v7 = *(void **)(v2 + 64);
  if (v7)
  {
    *(_QWORD *)(v2 + 72) = v7;
    operator delete(v7);
  }
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(_QWORD *)v2 = off_24F980668;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(_QWORD *)(v6 + 16) = v7;
          operator delete(v7);
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v5 = 0;
  }
  v8 = *(_QWORD **)(a1 + 32);
  if (v8)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::PbConstraints>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9879B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PbConstraints>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9879B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

uint64_t google::MakeCheckOpString<int,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DBFCD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::SatSolver::Decision>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 3)
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
      v14 = (uint64_t)&v13[8 * v9];
      v15 = v14 + 8 * a2;
      v16 = (_DWORD *)v14;
      v17 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        goto LABEL_24;
    }
    else
    {
      v13 = 0;
      v14 = 8 * v9;
      v15 = 8 * v9 + 8 * a2;
      v16 = (_DWORD *)(8 * v9);
      v17 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
      {
        do
        {
LABEL_24:
          *v16 = -1;
          v16 += 2;
        }
        while (v16 != (_DWORD *)v15);
LABEL_25:
        v24 = &v13[8 * v12];
        if (v5 != v7)
        {
          v25 = v5 - v7 - 8;
          if (v25 < 0x58)
            goto LABEL_39;
          if ((unint64_t)(v5 - &v13[v8]) < 0x20)
            goto LABEL_39;
          v26 = (v25 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v6 = &v5[-v27];
          v14 -= v27;
          v28 = &v13[8 * v9 - 16];
          v29 = v5 - 16;
          v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_39:
            do
            {
              v32 = *((_QWORD *)v6 - 1);
              v6 -= 8;
              *(_QWORD *)(v14 - 8) = v32;
              v14 -= 8;
            }
            while (v6 != v7);
          }
        }
        v33 = (void *)*a1;
        *a1 = v14;
        a1[1] = v15;
        a1[2] = (uint64_t)v24;
        if (v33)
          operator delete(v33);
        return;
      }
    }
    v21 = v17 + 1;
    v16 = (_DWORD *)(v14 + 8 * (v21 & 0x3FFFFFFFFFFFFFFELL));
    v22 = (_DWORD *)(v14 + 8);
    v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -1;
      *v22 = -1;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 == (v21 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_25;
    goto LABEL_24;
  }
  if (a2)
  {
    if (((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_40;
    v18 = ((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v6 = &v5[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
    v19 = v5 + 8;
    v20 = v18 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -1;
      *v19 = -1;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_40:
      do
      {
        *(_DWORD *)v6 = -1;
        v6 += 8;
      }
      while (v6 != &v5[8 * a2]);
    }
    v6 = &v5[8 * a2];
  }
  a1[1] = (uint64_t)v6;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::find_or_prepare_insert<operations_research::sat::SatClause *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = 0;
  v3 = *a2;
  v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  v6 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  while (1)
  {
    v8 = v6 & v7;
    v9 = *(_QWORD *)(*a1 + (v6 & v7));
    v10 = ((v9 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v5 & 0x7F))) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::prepare_insert(a1, v5);
    v2 += 8;
    v6 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
    if (*(_QWORD *)(a1[1] + 24 * v11) == v3)
      return v11;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v27 = a1[4];
    if (!v27)
      return;
LABEL_21:
    *((_QWORD *)v27 + 4) = v14 >> 3;
    *((_QWORD *)v27 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[24 * (_QWORD)v13];
      v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(_QWORD *)v20)))
          + *(_QWORD *)v20;
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = *a1;
      v24 = a1[3];
      v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      v26 = *(_QWORD *)&(*a1)[v25] & (~*(_QWORD *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v25 = (v15 + v25) & (unint64_t)v24;
          v26 = *(_QWORD *)&v23[v25] & (~*(_QWORD *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_OWORD *)v20;
      v19 = (uint64_t)&a1[1][24 * v16];
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v27 = a1[4];
  if (v27)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v39 = *(_QWORD *)(result + 32);
    if (!v39)
      return result;
LABEL_26:
    *(_QWORD *)(v39 + 32) = v15 >> 3;
    *(_QWORD *)(v39 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24 * v14);
      v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v20)))
          + v20;
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v24 = *(uint64_t *)((_BYTE *)v19->i64 + v23) & (~*(uint64_t *)((char *)v19->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v24 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v18 = (v17 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v23) ^ (v14 - v23)) & v13) > 7)
      {
        v25 = v19->u8[v18];
        v19->i8[v18] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(result + 8);
        if (v25 == 128)
        {
          v27 = v26 + 24 * v18;
          v28 = (__int128 *)(v26 + 24 * v14);
          v29 = *v28;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v27 = v29;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v30 = (__int128 *)(v26 + 24 * v14);
          v31 = *v30;
          v32 = *((_QWORD *)v30 + 2);
          v33 = (__int128 *)(v26 + 24 * v18);
          v34 = *((_QWORD *)v33 + 2);
          *v30 = *v33;
          *((_QWORD *)v30 + 2) = v34;
          v35 = *(_QWORD *)(result + 8) + 24 * v18;
          *(_OWORD *)v35 = v31;
          *(_QWORD *)(v35 + 16) = v32;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v22 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v36 = v14 - (v14 >> 3);
  v37 = v14 == 7;
  v38 = 6;
  if (!v37)
    v38 = v36;
  *(_QWORD *)(result + 40) = v38 - *(_QWORD *)(result + 16);
  v39 = *(_QWORD *)(result + 32);
  if (v39)
    goto LABEL_26;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::`anonymous namespace'::WeightedVariable *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v37;
  int v38;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  uint64_t *v48;
  _DWORD *i;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t *v56;
  int v57;
  _QWORD *v59;
  unint64_t v60;
  int v61;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  BOOL v80;
  uint64_t v81;
  _DWORD *v82;
  _QWORD *v83;
  uint64_t *v84;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  unsigned int *v97;
  signed int v98;
  signed int v99;
  BOOL v100;
  unsigned int *v101;
  signed int v102;
  signed int v103;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  signed int v121;
  signed int v122;
  BOOL v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  signed int v128;
  signed int v129;
  BOOL v130;
  uint64_t v131;
  unint64_t v132;
  _DWORD *v133;
  int v134;
  uint64_t *v136;
  int v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  int v143;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v63 = *((_DWORD *)a2 - 1);
        v64 = *(_DWORD *)(v8 + 4);
        if (v63 > v64 || (v63 == v64 ? (v65 = *((_DWORD *)a2 - 2) < *(_DWORD *)v8) : (v65 = 0), v65))
        {
          v66 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v66;
        }
        return result;
      case 3uLL:
      case 4uLL:
        v67 = (_DWORD *)(v8 + 16);
        v68 = *((_DWORD *)a2 - 1);
        v69 = *(_DWORD *)(v8 + 20);
        if (v68 > v69 || (v68 == v69 ? (v70 = *((_DWORD *)a2 - 2) < *v67) : (v70 = 0), v70))
        {
          v71 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = *(a2 - 1);
          *(a2 - 1) = v71;
          v72 = *(_DWORD *)(v8 + 20);
          v73 = *(_DWORD *)(v8 + 12);
          if (v72 > v73 || v72 == v73 && *v67 < *(_DWORD *)(v8 + 8))
          {
            v75 = *(_QWORD *)(v8 + 8);
            v74 = *(_QWORD *)(v8 + 16);
            *(_QWORD *)(v8 + 8) = v74;
            *(_QWORD *)(v8 + 16) = v75;
            v76 = *(_DWORD *)(v8 + 4);
            if (v76 < SHIDWORD(v74) || v76 == HIDWORD(v74) && *(_DWORD *)v8 > (int)v74)
            {
              v77 = *(_QWORD *)v8;
              *(_QWORD *)v8 = v74;
              *(_QWORD *)(v8 + 8) = v77;
            }
          }
        }
        return result;
      case 5uLL:
      default:
        if (v9 <= 191)
        {
          v78 = (uint64_t *)(v8 + 8);
          v80 = (uint64_t *)v8 == a2 || v78 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 0;
              v82 = (_DWORD *)v8;
              do
              {
                v84 = v78;
                v85 = v82[3];
                v86 = v82[1];
                if (v85 > v86 || (v85 == v86 ? (v87 = *(_DWORD *)v84 < *v82) : (v87 = 0), v87))
                {
                  v88 = *((_QWORD *)v82 + 1);
                  *((_QWORD *)v82 + 1) = *(_QWORD *)v82;
                  v83 = (_QWORD *)v8;
                  if (v82 != (_DWORD *)v8)
                  {
                    v89 = v81;
                    while (1)
                    {
                      v90 = (_QWORD *)(v8 + v89);
                      v91 = *(_DWORD *)(v8 + v89 - 4);
                      if (v91 >= SHIDWORD(v88) && (v91 != HIDWORD(v88) || *((_DWORD *)v90 - 2) <= (int)v88))
                        break;
                      *v90 = *(v90 - 1);
                      v89 -= 8;
                      if (!v89)
                      {
                        v83 = (_QWORD *)v8;
                        goto LABEL_138;
                      }
                    }
                    v83 = (_QWORD *)(v8 + v89);
                  }
LABEL_138:
                  *v83 = v88;
                }
                v78 = v84 + 1;
                v81 += 8;
                v82 = v84;
              }
              while (v84 + 1 != a2);
            }
          }
          else if (!v80)
          {
            do
            {
              v136 = v78;
              v137 = *(_DWORD *)(v7 + 12);
              v138 = *(_DWORD *)(v7 + 4);
              if (v137 > v138 || (v137 == v138 ? (v139 = *(_DWORD *)v136 < *(_DWORD *)v7) : (v139 = 0), v139))
              {
                v140 = *v136;
                v141 = HIDWORD(*v136);
                do
                {
                  do
                  {
                    v142 = (_QWORD *)v7;
                    *(_QWORD *)(v7 + 8) = *(_QWORD *)v7;
                    v7 -= 8;
                    v143 = *((_DWORD *)v142 - 1);
                  }
                  while (v143 < (int)v141);
                }
                while (v143 == (_DWORD)v141 && *((_DWORD *)v142 - 2) > (int)v140);
                *v142 = v140;
              }
              v78 = v136 + 1;
              v7 = (uint64_t)v136;
            }
            while (v136 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((uint64_t *)v8 != a2)
          {
            v93 = (v10 - 2) >> 1;
            v94 = v93;
            do
            {
              v95 = v94;
              if (v93 >= v94)
              {
                v96 = (2 * v94) | 1;
                v97 = (unsigned int *)(v8 + 8 * v96);
                if (2 * v95 + 2 < (uint64_t)v10)
                {
                  v98 = v97[1];
                  v99 = v97[3];
                  if (v98 > v99
                    || ((result = *v97, v98 == v99) ? (v100 = (int)result < (int)v97[2]) : (v100 = 0), v100))
                  {
                    v97 += 2;
                    v96 = 2 * v95 + 2;
                  }
                }
                v101 = (unsigned int *)(v8 + 8 * v95);
                v102 = v97[1];
                v103 = v101[1];
                if (v102 <= v103)
                {
                  result = *v97;
                  if (v102 != v103 || (int)result >= (int)*v101)
                  {
                    v105 = *(_QWORD *)v101;
                    v106 = HIDWORD(*(_QWORD *)v101);
                    do
                    {
                      v107 = v101;
                      v101 = v97;
                      *v107 = *(_QWORD *)v97;
                      if (v93 < v96)
                        break;
                      v108 = 2 * v96;
                      v96 = (2 * v96) | 1;
                      v97 = (unsigned int *)(v8 + 8 * v96);
                      v109 = v108 + 2;
                      if (v109 < (uint64_t)v10)
                      {
                        result = v97[1];
                        v110 = v97[3];
                        if ((int)result > v110
                          || ((_DWORD)result == v110 ? (v111 = (int)*v97 < (int)v97[2]) : (v111 = 0), v111))
                        {
                          v97 += 2;
                          v96 = v109;
                        }
                      }
                      v112 = v97[1];
                      if (v112 > (int)v106)
                        break;
                    }
                    while (v112 != (_DWORD)v106 || (int)*v97 >= (int)v105);
                    *(_QWORD *)v101 = v105;
                  }
                }
              }
              v94 = v95 - 1;
            }
            while (v95);
            v114 = (unint64_t)v9 >> 3;
            do
            {
              v115 = 0;
              v116 = *(_QWORD *)v8;
              v117 = (uint64_t *)v8;
              do
              {
                v118 = v117;
                v117 += v115 + 1;
                v119 = 2 * v115;
                v115 = (2 * v115) | 1;
                v120 = v119 + 2;
                if (v120 < v114)
                {
                  v121 = *((_DWORD *)v117 + 1);
                  v122 = *((_DWORD *)v117 + 3);
                  if (v121 > v122
                    || ((result = *(unsigned int *)v117, v121 == v122)
                      ? (v123 = (int)result < *((_DWORD *)v117 + 2))
                      : (v123 = 0),
                        v123))
                  {
                    ++v117;
                    v115 = v120;
                  }
                }
                *v118 = *v117;
              }
              while (v115 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
              if (v117 == --a2)
              {
                *v117 = v116;
              }
              else
              {
                *v117 = *a2;
                *a2 = v116;
                v124 = (uint64_t)v117 - v8 + 8;
                if (v124 >= 9)
                {
                  v125 = ((unint64_t)v124 >> 3) - 2;
                  v126 = v125 >> 1;
                  v127 = (_DWORD *)(v8 + 8 * (v125 >> 1));
                  v128 = v127[1];
                  v129 = *((_DWORD *)v117 + 1);
                  if (v128 > v129 || (v128 == v129 ? (v130 = *v127 < *(_DWORD *)v117) : (v130 = 0), v130))
                  {
                    v131 = *v117;
                    *v117 = *(_QWORD *)v127;
                    if (v125 >= 2)
                    {
                      while (1)
                      {
                        v132 = v126 - 1;
                        v126 = (v126 - 1) >> 1;
                        v133 = (_DWORD *)(v8 + 8 * v126);
                        v134 = v133[1];
                        if (v134 <= SHIDWORD(v131) && (v134 != HIDWORD(v131) || *v133 >= (int)v131))
                          break;
                        *(_QWORD *)v127 = *(_QWORD *)v133;
                        v127 = (_DWORD *)(v8 + 8 * v126);
                        if (v132 <= 1)
                          goto LABEL_221;
                      }
                    }
                    v133 = v127;
LABEL_221:
                    *(_QWORD *)v133 = v131;
                  }
                }
              }
              v21 = v114-- <= 2;
            }
            while (!v21);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (int *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          v13 = (int *)(v7 + 8 * v11);
          v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v15 = *(_DWORD *)(v7 - 4);
        v16 = *(_DWORD *)(v7 + 4);
        if (v15 <= v16 && (v15 != v16 || *(_DWORD *)(v7 - 8) >= *(_DWORD *)v7))
        {
          v41 = *(_QWORD *)v7;
          v42 = HIDWORD(*(_QWORD *)v7);
          v43 = *((_DWORD *)a2 - 1);
          if (v43 < (int)v42 || v43 == (_DWORD)v42 && *((_DWORD *)a2 - 2) > (int)v41)
          {
            v44 = v7 + 8;
            do
            {
              v8 = v44;
              v45 = *(_DWORD *)(v44 + 4);
              v46 = v45 == (_DWORD)v42;
              if (v45 < (int)v42)
                break;
              v44 = v8 + 8;
            }
            while (!v46 || *(_DWORD *)v8 <= (int)v41);
          }
          else
          {
            v60 = v7 + 8;
            do
            {
              v8 = v60;
              if (v60 >= (unint64_t)a2)
                break;
              v61 = *(_DWORD *)(v60 + 4);
              if (v61 < (int)v42)
                break;
              v60 += 8;
            }
            while (v61 != (_DWORD)v42 || *(_DWORD *)v8 <= (int)v41);
          }
          v48 = a2;
          if (v8 < (unint64_t)a2)
          {
            for (i = (_DWORD *)a2 - 3; v43 < (int)v42 || v43 == (_DWORD)v42 && i[1] > (int)v41; i -= 2)
            {
              v50 = *i;
              v43 = v50;
            }
            v48 = (uint64_t *)(i + 1);
          }
          while (v8 < (unint64_t)v48)
          {
            v51 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v48;
            *v48 = v51;
            v52 = v8 + 8;
            do
            {
              v8 = v52;
              v53 = *(_DWORD *)(v52 + 4);
              v54 = v53 == (_DWORD)v42;
              if (v53 < (int)v42)
                break;
              v52 = v8 + 8;
            }
            while (!v54 || *(_DWORD *)v8 <= (int)v41);
            v56 = v48 - 1;
            do
            {
              do
              {
                v48 = v56;
                v57 = *((_DWORD *)v56-- + 1);
              }
              while (v57 < (int)v42);
            }
            while (v57 == (_DWORD)v42 && *(_DWORD *)v48 > (int)v41);
          }
          v59 = (_QWORD *)(v8 - 8);
          if (v8 - 8 != v7)
            *(_QWORD *)v7 = *v59;
          a4 = 0;
          *v59 = v41;
          continue;
        }
LABEL_13:
        v17 = 0;
        v18 = *(_QWORD *)v7;
        v19 = HIDWORD(*(_QWORD *)v7);
        while (1)
        {
          v20 = *(_DWORD *)(v7 + v17 + 12);
          if (v20 <= (int)v19)
          {
            v21 = v20 == (_DWORD)v19 && *(_DWORD *)(v7 + v17 + 8) < (int)v18;
            if (!v21)
              break;
          }
          v17 += 8;
        }
        v22 = (uint64_t *)(v7 + v17);
        v23 = v7 + v17 + 8;
        v24 = a2 - 1;
        if (v17)
        {
          do
          {
            v25 = v24;
            v26 = *((_DWORD *)v24-- + 1);
            if (v26 > (int)v19)
              break;
          }
          while (v26 != (_DWORD)v19 || *(_DWORD *)v25 >= (int)v18);
LABEL_36:
          if (v23 < (unint64_t)v25)
          {
            v32 = v23;
            v33 = v25;
            do
            {
              v34 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *v33;
              v32 += 8;
              *v33 = v34;
              while (1)
              {
                v35 = *(_DWORD *)(v32 + 4);
                if (v35 <= (int)v19 && (v35 != (_DWORD)v19 || *(_DWORD *)v32 >= (int)v18))
                  break;
                v32 += 8;
              }
              v37 = v33 - 1;
              do
              {
                v33 = v37;
                v38 = *((_DWORD *)v37-- + 1);
                if (v38 > (int)v19)
                  break;
              }
              while (v38 != (_DWORD)v19 || *(_DWORD *)v33 >= (int)v18);
            }
            while (v32 < (unint64_t)v33);
            v22 = (uint64_t *)(v32 - 8);
          }
        }
        else
        {
          v28 = a2 - 1;
          while (1)
          {
            v25 = v28;
            v29 = v28 + 1;
            if (v23 >= (unint64_t)v29)
              break;
            v30 = *((_DWORD *)v25 + 1);
            if (v30 <= (int)v19)
            {
              v28 = v25 - 1;
              if (v30 != (_DWORD)v19 || *(_DWORD *)v25 >= (int)v18)
                continue;
            }
            goto LABEL_36;
          }
          v25 = v29;
        }
        if (v22 != (uint64_t *)v7)
          *(_QWORD *)v7 = *v22;
        *v22 = v18;
        if (v23 < (unint64_t)v25)
        {
LABEL_60:
          a4 = 0;
          v8 = (unint64_t)(v22 + 1);
          continue;
        }
        v8 = (unint64_t)(v22 + 1);
        if (!(_DWORD)result)
        {
          if (v40)
            continue;
          goto LABEL_60;
        }
        a2 = v22;
        if (!v40)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::`anonymous namespace'::WeightedVariable *,0>(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v11 = *((_DWORD *)a4 + 1);
  v12 = *(_DWORD *)(a3 + 4);
  if (v11 > v12 || (v11 == v12 ? (v13 = *(_DWORD *)a4 < *(_DWORD *)a3) : (v13 = 0), v13))
  {
    v14 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v14;
    v15 = *(_DWORD *)(a3 + 4);
    v16 = a2[1];
    if (v15 > v16 || (v15 == v16 ? (v17 = *(_DWORD *)a3 < *a2) : (v17 = 0), v17))
    {
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      v19 = a2[1];
      v20 = *(_DWORD *)(a1 + 4);
      if (v19 > v20 || v19 == v20 && *a2 < *(_DWORD *)a1)
      {
        v21 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
      }
    }
  }
  v22 = *((_DWORD *)a5 + 1);
  v23 = *((_DWORD *)a4 + 1);
  if (v22 > v23 || v22 == v23 && *(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v24 = *a4;
    *a4 = *a5;
    *a5 = v24;
    v25 = *((_DWORD *)a4 + 1);
    v26 = *(_DWORD *)(a3 + 4);
    if (v25 > v26 || v25 == v26 && *(_DWORD *)a4 < *(_DWORD *)a3)
    {
      v27 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v27;
      v28 = *(_DWORD *)(a3 + 4);
      v29 = a2[1];
      if (v28 > v29 || v28 == v29 && *(_DWORD *)a3 < *a2)
      {
        v30 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v30;
        v31 = a2[1];
        v32 = *(_DWORD *)(a1 + 4);
        if (v31 > v32 || v31 == v32 && *a2 < *(_DWORD *)a1)
        {
          v33 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v33;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::`anonymous namespace'::WeightedVariable *>(uint64_t *result, int *a2, uint64_t *a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_DWORD *)result + 1);
  if (v4 > v5 || (v4 == v5 ? (v6 = v3 < *(_DWORD *)result) : (v6 = 0), v6))
  {
    v13 = *((_DWORD *)a3 + 1);
    if (v13 > v4 || (v13 == v4 ? (v14 = *(_DWORD *)a3 < v3) : (v14 = 0), v14))
    {
      v15 = *result;
      *result = *a3;
    }
    else
    {
      v15 = *result;
      *result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v15;
      v16 = *((_DWORD *)a3 + 1);
      if (v16 <= SHIDWORD(v15) && (v16 != HIDWORD(v15) || *(_DWORD *)a3 >= (int)v15))
        return result;
      *(_QWORD *)a2 = *a3;
    }
    *a3 = v15;
    return result;
  }
  v7 = *((_DWORD *)a3 + 1);
  if (v7 > v4 || (v7 == v4 ? (v8 = *(_DWORD *)a3 < v3) : (v8 = 0), v8))
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *a3;
    *a3 = v9;
    v10 = a2[1];
    v11 = *((_DWORD *)result + 1);
    if (v10 > v11 || v10 == v11 && *a2 < *(_DWORD *)result)
    {
      v12 = *result;
      *result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::`anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::`anonymous namespace'::WeightedVariable *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(_DWORD *)(a2 - 4);
      v20 = *(_DWORD *)(a1 + 4);
      if (v19 > v20 || (v19 == v20 ? (v21 = *(_DWORD *)(a2 - 8) < *(_DWORD *)a1) : (v21 = 0), v21))
      {
        v22 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v22;
      }
      return result;
    case 3:
      return 1;
    case 4:
      v23 = (_DWORD *)(a1 + 16);
      v24 = *(_DWORD *)(a2 - 4);
      v25 = *(_DWORD *)(a1 + 20);
      if (v24 > v25 || (result = 1, v24 == v25) && *(_DWORD *)(a2 - 8) < *v23)
      {
        v26 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v26;
        v27 = *(_DWORD *)(a1 + 20);
        v28 = *(_DWORD *)(a1 + 12);
        if (v27 > v28 || (result = 1, v27 == v28) && *v23 < *(_DWORD *)(a1 + 8))
        {
          v30 = *(_QWORD *)(a1 + 8);
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v29;
          *(_QWORD *)(a1 + 16) = v30;
          v31 = *(_DWORD *)(a1 + 4);
          if (v31 < SHIDWORD(v29) || (result = 1, v31 == HIDWORD(v29)) && *(_DWORD *)a1 > (int)v29)
          {
            v32 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v29;
            *(_QWORD *)(a1 + 8) = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      return 1;
    default:
      v6 = a1 + 16;
      v7 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v7 + 4);
    v12 = *(_DWORD *)(v6 + 4);
    if (v11 > v12 || (v11 == v12 ? (v13 = *(_DWORD *)v7 < *(_DWORD *)v6) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v6;
      v10 = (_QWORD *)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = a1 + v15;
          v17 = *(_DWORD *)(a1 + v15 + 12);
          if (v17 >= SHIDWORD(v14) && (v17 != HIDWORD(v14) || *(_DWORD *)(v16 + 8) <= (int)v14))
            break;
          *(_QWORD *)(v16 + 16) = *(_QWORD *)(v16 + 8);
          v15 -= 8;
          if (v15 == -16)
          {
            v10 = (_QWORD *)a1;
            goto LABEL_6;
          }
        }
        v10 = (_QWORD *)(a1 + v15 + 16);
      }
LABEL_6:
      *v10 = v14;
      if (++v9 == 8)
        return v7 + 8 == a2;
    }
    v6 = v7;
    v8 += 8;
    v7 += 8;
    if (v7 == a2)
      return 1;
  }
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  double v23;
  int v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  double v35;
  int v36;
  _BOOL4 v37;
  _BOOL4 v38;
  unint64_t v39;
  double v40;
  int v41;
  BOOL v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int v48;
  BOOL v49;
  double v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  double v56;
  int v57;
  _BOOL4 v58;
  _BOOL4 v59;
  double *v60;
  double *v61;
  double v62;
  int v63;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  int v71;
  _BOOL4 v72;
  double v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  int v78;
  __n128 *v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  BOOL v85;
  char v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  int v92;
  _BOOL4 v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  int v107;
  _BOOL4 v108;
  unint64_t v109;
  int v110;
  int v111;
  BOOL v112;
  uint64_t v113;
  int v114;
  int v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  _BOOL4 v124;
  int64_t v125;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  _BOOL4 v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  _BOOL4 v144;
  uint64_t v145;
  int v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  BOOL v150;
  _BYTE *v151;
  uint64_t *v152;
  int v153;
  int v154;
  _BOOL4 v155;
  uint64_t v156;
  int v157;
  _BYTE *v158;
  int v159;
  BOOL v160;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __n128 v165;
  _BYTE v166[13];

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  __n128 result;
  int v12;
  __int128 *v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a2, a3, a4);
  v10 = (_QWORD *)(a5 + 8);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  v12 = *(_DWORD *)(a5 + 16);
  v13 = (__int128 *)(a4 + 8);
  v14 = *(_DWORD *)(a4 + 16);
  v15 = v12 == v14;
  v16 = v12 > v14;
  if (v15)
    v16 = result.n128_f64[0] < *(double *)(a4 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v17;
    v34 = *v13;
    v18 = *(_QWORD *)(a5 + 13);
    *(_QWORD *)v13 = *v10;
    *(_QWORD *)(a4 + 13) = v18;
    *(_QWORD *)(a5 + 13) = *(_QWORD *)((char *)&v34 + 5);
    *v10 = v34;
    result.n128_u64[0] = *(_QWORD *)(a4 + 8);
    LODWORD(v18) = *(_DWORD *)(a4 + 16);
    v19 = (__int128 *)(a3 + 8);
    v20 = *(_DWORD *)(a3 + 16);
    v15 = (_DWORD)v18 == v20;
    v21 = (int)v18 > v20;
    if (v15)
      v21 = result.n128_f64[0] < *(double *)(a3 + 8);
    if (v21)
    {
      v22 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v22;
      v35 = *v19;
      v23 = *(_QWORD *)(a4 + 13);
      *(_QWORD *)v19 = *(_QWORD *)v13;
      *(_QWORD *)(a3 + 13) = v23;
      *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v35 + 5);
      *(_QWORD *)v13 = v35;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      LODWORD(v23) = *(_DWORD *)(a3 + 16);
      v24 = (__int128 *)(a2 + 8);
      v25 = *(_DWORD *)(a2 + 16);
      v15 = (_DWORD)v23 == v25;
      v26 = (int)v23 > v25;
      if (v15)
        v26 = result.n128_f64[0] < *(double *)(a2 + 8);
      if (v26)
      {
        v27 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v27;
        v36 = *v24;
        v28 = *(_QWORD *)(a3 + 13);
        *(_QWORD *)v24 = *(_QWORD *)v19;
        *(_QWORD *)(a2 + 13) = v28;
        *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)&v36 + 5);
        *(_QWORD *)v19 = v36;
        result.n128_u64[0] = *(_QWORD *)(a2 + 8);
        LODWORD(v28) = *(_DWORD *)(a2 + 16);
        v29 = (__n128 *)(a1 + 8);
        v30 = *(_DWORD *)(a1 + 16);
        v15 = (_DWORD)v28 == v30;
        v31 = (int)v28 > v30;
        if (v15)
          v31 = result.n128_f64[0] < *(double *)(a1 + 8);
        if (v31)
        {
          v32 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v32;
          result = *v29;
          v37 = *v29;
          v33 = *(_QWORD *)(a2 + 13);
          v29->n128_u64[0] = *(_QWORD *)v24;
          *(_QWORD *)(a1 + 13) = v33;
          *(_QWORD *)(a2 + 13) = *(unint64_t *)((char *)v37.n128_u64 + 5);
          *(_QWORD *)v24 = v37.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  double v4;
  int v5;
  __int128 *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  _QWORD *v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = a2 + 1;
  v4 = *((double *)a2 + 1);
  v5 = *((_DWORD *)a2 + 4);
  v6 = (__int128 *)(result + 1);
  v7 = *((_DWORD *)result + 4);
  v8 = v5 == v7;
  v9 = v5 > v7;
  if (v8)
    v10 = v4 < *((double *)result + 1);
  else
    v10 = v9;
  v11 = a3 + 1;
  v12 = *((_DWORD *)a3 + 4);
  v8 = v12 == v5;
  v13 = v12 > v5;
  if (v8)
    v14 = *((double *)a3 + 1) < v4;
  else
    v14 = v13;
  if (v10)
  {
    v15 = *result;
    if (v14)
    {
      *result = *a3;
      *a3 = v15;
      v28 = *v6;
      v16 = *(uint64_t *)((char *)a3 + 13);
      *(_QWORD *)v6 = *v11;
      *(uint64_t *)((char *)result + 13) = v16;
LABEL_19:
      *(uint64_t *)((char *)a3 + 13) = *(_QWORD *)((char *)&v28 + 5);
      *v11 = v28;
      return result;
    }
    *result = *a2;
    *a2 = v15;
    v31 = *v6;
    v23 = *(uint64_t *)((char *)a2 + 13);
    *(_QWORD *)v6 = *v3;
    *(uint64_t *)((char *)result + 13) = v23;
    *(uint64_t *)((char *)a2 + 13) = *(_QWORD *)((char *)&v31 + 5);
    *v3 = v31;
    v24 = *((_DWORD *)a3 + 4);
    LODWORD(v23) = *((_DWORD *)a2 + 4);
    v8 = v24 == (_DWORD)v23;
    v25 = v24 > (int)v23;
    if (v8)
      v25 = *((double *)a3 + 1) < *((double *)a2 + 1);
    if (v25)
    {
      v26 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v26;
      v28 = *(_OWORD *)v3;
      v27 = *(uint64_t *)((char *)a3 + 13);
      *v3 = *v11;
      *(uint64_t *)((char *)a2 + 13) = v27;
      goto LABEL_19;
    }
  }
  else if (v14)
  {
    v17 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v17;
    v29 = *(_OWORD *)v3;
    v18 = *(uint64_t *)((char *)a3 + 13);
    *v3 = *v11;
    *(uint64_t *)((char *)a2 + 13) = v18;
    *(uint64_t *)((char *)a3 + 13) = *(_QWORD *)((char *)&v29 + 5);
    *v11 = v29;
    v19 = *((_DWORD *)a2 + 4);
    LODWORD(v18) = *((_DWORD *)result + 4);
    v8 = v19 == (_DWORD)v18;
    v20 = v19 > (int)v18;
    if (v8)
      v20 = *((double *)a2 + 1) < *((double *)result + 1);
    if (v20)
    {
      v21 = *result;
      *result = *a2;
      *a2 = v21;
      v30 = *v6;
      v22 = *(uint64_t *)((char *)a2 + 13);
      *(_QWORD *)v6 = *v3;
      *(uint64_t *)((char *)result + 13) = v22;
      *(uint64_t *)((char *)a2 + 13) = *(_QWORD *)((char *)&v30 + 5);
      *v3 = v30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  _QWORD *v23;
  int v24;
  __int128 *v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v23 = (_QWORD *)(a2 - 16);
      v24 = *(_DWORD *)(a2 - 8);
      v25 = (__int128 *)(a1 + 8);
      v26 = *(_DWORD *)(a1 + 16);
      v14 = v24 == v26;
      v27 = v24 > v26;
      if (v14)
        v27 = *(double *)(a2 - 16) < *(double *)(a1 + 8);
      if (v27)
      {
        v28 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v28;
        v30 = *v25;
        v29 = *(_QWORD *)(a2 - 11);
        *(_QWORD *)v25 = *v23;
        *(_QWORD *)(a1 + 13) = v29;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)((char *)&v30 + 5);
        *v23 = v30;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v7 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(double *)(v7 + 8);
    v12 = *(_DWORD *)(v7 + 16);
    v13 = *(_DWORD *)(v6 + 16);
    v14 = v12 == v13;
    v15 = v12 > v13;
    if (v14)
      v15 = v11 < *(double *)(v6 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)v7;
      v17 = *(_DWORD *)(v7 + 20);
      v18 = v8;
      do
      {
        v19 = a1 + v18;
        v20 = *(_QWORD *)(a1 + v18 + 56);
        *(_QWORD *)(v19 + 72) = *(_QWORD *)(a1 + v18 + 48);
        *(_QWORD *)(v19 + 80) = v20;
        *(_QWORD *)(v19 + 85) = *(_QWORD *)(a1 + v18 + 61);
        if (v18 == -48)
        {
          v10 = a1;
          goto LABEL_6;
        }
        v21 = *(_DWORD *)(v19 + 40);
        v14 = v12 == v21;
        v22 = v12 > v21;
        if (v14)
          v22 = v11 < *(double *)(v19 + 32);
        v18 -= 24;
      }
      while (v22);
      v10 = a1 + v18 + 72;
LABEL_6:
      *(_QWORD *)v10 = v16;
      *(double *)(v19 + 56) = v11;
      *(_DWORD *)(v10 + 16) = v12;
      *(_BYTE *)(v10 + 20) = v17;
      if (++v9 == 8)
        return v7 + 24 == a2;
    }
    v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __n128 result;
  int v10;
  __int128 *v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v8 = (_QWORD *)(a4 + 8);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a4 + 16);
  v11 = (__int128 *)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 16);
  v13 = v10 == v12;
  v14 = v10 > v12;
  if (v13)
    v14 = result.n128_f64[0] < *(double *)(a3 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v15;
    v27 = *v11;
    v16 = *(_QWORD *)(a4 + 13);
    *(_QWORD *)v11 = *v8;
    *(_QWORD *)(a3 + 13) = v16;
    *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v27 + 5);
    *v8 = v27;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    LODWORD(v16) = *(_DWORD *)(a3 + 16);
    v17 = (__int128 *)(a2 + 8);
    v18 = *(_DWORD *)(a2 + 16);
    v13 = (_DWORD)v16 == v18;
    v19 = (int)v16 > v18;
    if (v13)
      v19 = result.n128_f64[0] < *(double *)(a2 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v20;
      v28 = *v17;
      v21 = *(_QWORD *)(a3 + 13);
      *(_QWORD *)v17 = *(_QWORD *)v11;
      *(_QWORD *)(a2 + 13) = v21;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)&v28 + 5);
      *(_QWORD *)v11 = v28;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      LODWORD(v21) = *(_DWORD *)(a2 + 16);
      v22 = (__n128 *)(a1 + 8);
      v23 = *(_DWORD *)(a1 + 16);
      v13 = (_DWORD)v21 == v23;
      v24 = (int)v21 > v23;
      if (v13)
        v24 = result.n128_f64[0] < *(double *)(a1 + 8);
      if (v24)
      {
        v25 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v25;
        result = *v22;
        v29 = *v22;
        v26 = *(_QWORD *)(a2 + 13);
        v22->n128_u64[0] = *(_QWORD *)v17;
        *(_QWORD *)(a1 + 13) = v26;
        *(_QWORD *)(a2 + 13) = *(unint64_t *)((char *)v29.n128_u64 + 5);
        *(_QWORD *)v17 = v29.n128_u64[0];
      }
    }
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  BOOL v19;
  double v20;
  BOOL v21;
  unint64_t v22;
  double v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  double v34;
  _BOOL4 v35;
  _BOOL4 v36;
  unint64_t v37;
  double v38;
  BOOL v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  int v45;
  BOOL v46;
  double v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  double v53;
  _BOOL4 v54;
  _BOOL4 v55;
  double *v56;
  double *v57;
  double v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  int v66;
  _BOOL4 v67;
  double v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  __n128 *v73;
  double v74;
  _BOOL4 v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  BOOL v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  double v86;
  _BOOL4 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  double v93;
  BOOL v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  double v100;
  double v101;
  _BOOL4 v102;
  unint64_t v103;
  double v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  int v108;
  double v109;
  _BOOL4 v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  _BOOL4 v117;
  int64_t v118;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  double v134;
  int v135;
  _BOOL4 v136;
  uint64_t v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  double v141;
  BOOL v142;
  _BYTE *v143;
  uint64_t *v144;
  int v145;
  double v146;
  _BOOL4 v147;
  uint64_t v148;
  int v149;
  _BYTE *v150;
  double v151;
  BOOL v152;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __n128 v157;
  _BYTE v158[13];

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  __n128 result;
  __int128 *v12;
  double v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  double v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  double v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  double v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a2, a3, a4);
  v10 = (_QWORD *)(a5 + 8);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  v12 = (__int128 *)(a4 + 8);
  v13 = *(double *)(a4 + 8);
  v14 = *(_DWORD *)(a5 + 16) > *(_DWORD *)(a4 + 16);
  if (result.n128_f64[0] != v13)
    v14 = result.n128_f64[0] < v13;
  if (v14)
  {
    v15 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v15;
    v32 = *v12;
    v16 = *(_QWORD *)(a5 + 13);
    *(_QWORD *)v12 = *v10;
    *(_QWORD *)(a4 + 13) = v16;
    *(_QWORD *)(a5 + 13) = *(_QWORD *)((char *)&v32 + 5);
    *v10 = v32;
    result.n128_u64[0] = *(_QWORD *)(a4 + 8);
    v17 = (__int128 *)(a3 + 8);
    v18 = *(double *)(a3 + 8);
    v19 = *(_DWORD *)(a4 + 16) > *(_DWORD *)(a3 + 16);
    if (result.n128_f64[0] != v18)
      v19 = result.n128_f64[0] < v18;
    if (v19)
    {
      v20 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v20;
      v33 = *v17;
      v21 = *(_QWORD *)(a4 + 13);
      *(_QWORD *)v17 = *(_QWORD *)v12;
      *(_QWORD *)(a3 + 13) = v21;
      *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v33 + 5);
      *(_QWORD *)v12 = v33;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      v22 = (__int128 *)(a2 + 8);
      v23 = *(double *)(a2 + 8);
      v24 = *(_DWORD *)(a3 + 16) > *(_DWORD *)(a2 + 16);
      if (result.n128_f64[0] != v23)
        v24 = result.n128_f64[0] < v23;
      if (v24)
      {
        v25 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v25;
        v34 = *v22;
        v26 = *(_QWORD *)(a3 + 13);
        *(_QWORD *)v22 = *(_QWORD *)v17;
        *(_QWORD *)(a2 + 13) = v26;
        *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)&v34 + 5);
        *(_QWORD *)v17 = v34;
        result.n128_u64[0] = *(_QWORD *)(a2 + 8);
        v27 = (__n128 *)(a1 + 8);
        v28 = *(double *)(a1 + 8);
        v29 = *(_DWORD *)(a2 + 16) > *(_DWORD *)(a1 + 16);
        if (result.n128_f64[0] != v28)
          v29 = result.n128_f64[0] < v28;
        if (v29)
        {
          v30 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v30;
          result = *v27;
          v35 = *v27;
          v31 = *(_QWORD *)(a2 + 13);
          v27->n128_u64[0] = *(_QWORD *)v22;
          *(_QWORD *)(a1 + 13) = v31;
          *(_QWORD *)(a2 + 13) = *(unint64_t *)((char *)v35.n128_u64 + 5);
          *(_QWORD *)v22 = v35.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  double v4;
  int v5;
  __int128 *v6;
  double v7;
  BOOL v8;
  _QWORD *v9;
  double v10;
  _BOOL4 v11;
  _BOOL4 v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  _BOOL4 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  _BOOL4 v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = a2 + 1;
  v4 = *((double *)a2 + 1);
  v5 = *((_DWORD *)a2 + 4);
  v6 = (__int128 *)(result + 1);
  v7 = *((double *)result + 1);
  if (v4 == v7)
    v8 = v5 > *((_DWORD *)result + 4);
  else
    v8 = v4 < v7;
  v9 = a3 + 1;
  v10 = *((double *)a3 + 1);
  v11 = *((_DWORD *)a3 + 4) > v5;
  v12 = v10 < v4;
  if (v10 == v4)
    v12 = v11;
  if (v8)
  {
    v13 = *(double *)result;
    if (v12)
    {
      *result = *a3;
      *(double *)a3 = v13;
      v28 = *v6;
      v14 = *(uint64_t *)((char *)a3 + 13);
      *(_QWORD *)v6 = *v9;
      *(uint64_t *)((char *)result + 13) = v14;
LABEL_18:
      *(uint64_t *)((char *)a3 + 13) = *(_QWORD *)((char *)&v28 + 5);
      *v9 = v28;
      return result;
    }
    *result = *a2;
    *(double *)a2 = v13;
    v31 = *v6;
    v22 = *(uint64_t *)((char *)a2 + 13);
    *(_QWORD *)v6 = *v3;
    *(uint64_t *)((char *)result + 13) = v22;
    *(uint64_t *)((char *)a2 + 13) = *(_QWORD *)((char *)&v31 + 5);
    *v3 = v31;
    v23 = *((double *)a3 + 1);
    v24 = *((double *)a2 + 1);
    v25 = *((_DWORD *)a3 + 4) > *((_DWORD *)a2 + 4);
    if (v23 != v24)
      v25 = v23 < v24;
    if (v25)
    {
      v26 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v26;
      v28 = *(_OWORD *)v3;
      v27 = *(uint64_t *)((char *)a3 + 13);
      *v3 = *v9;
      *(uint64_t *)((char *)a2 + 13) = v27;
      goto LABEL_18;
    }
  }
  else if (v12)
  {
    v15 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v15;
    v29 = *(_OWORD *)v3;
    v16 = *(uint64_t *)((char *)a3 + 13);
    *v3 = *v9;
    *(uint64_t *)((char *)a2 + 13) = v16;
    *(uint64_t *)((char *)a3 + 13) = *(_QWORD *)((char *)&v29 + 5);
    *v9 = v29;
    v17 = *((double *)a2 + 1);
    v18 = *((double *)result + 1);
    v19 = *((_DWORD *)a2 + 4) > *((_DWORD *)result + 4);
    if (v17 != v18)
      v19 = v17 < v18;
    if (v19)
    {
      v20 = *(double *)result;
      *result = *a2;
      *(double *)a2 = v20;
      v30 = *v6;
      v21 = *(uint64_t *)((char *)a2 + 13);
      *(_QWORD *)v6 = *v3;
      *(uint64_t *)((char *)result + 13) = v21;
      *(uint64_t *)((char *)a2 + 13) = *(_QWORD *)((char *)&v30 + 5);
      *v3 = v30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  int v12;
  double v13;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  _QWORD *v22;
  double v23;
  __int128 *v24;
  double v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v22 = (_QWORD *)(a2 - 16);
      v23 = *(double *)(a2 - 16);
      v24 = (__int128 *)(a1 + 8);
      v25 = *(double *)(a1 + 8);
      v26 = *(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 16);
      if (v23 != v25)
        v26 = v23 < v25;
      if (v26)
      {
        v27 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v27;
        v29 = *v24;
        v28 = *(_QWORD *)(a2 - 11);
        *(_QWORD *)v24 = *v22;
        *(_QWORD *)(a1 + 13) = v28;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)((char *)&v29 + 5);
        *v22 = v29;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v7 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(double *)(v7 + 8);
    v12 = *(_DWORD *)(v7 + 16);
    v13 = *(double *)(v6 + 8);
    v14 = v12 > *(_DWORD *)(v6 + 16);
    if (v11 != v13)
      v14 = v11 < v13;
    if (v14)
    {
      v15 = *(_QWORD *)v7;
      v16 = *(_DWORD *)(v7 + 20);
      v17 = v8;
      do
      {
        v18 = a1 + v17;
        v19 = *(_QWORD *)(a1 + v17 + 56);
        *(_QWORD *)(v18 + 72) = *(_QWORD *)(a1 + v17 + 48);
        *(_QWORD *)(v18 + 80) = v19;
        *(_QWORD *)(v18 + 85) = *(_QWORD *)(a1 + v17 + 61);
        if (v17 == -48)
        {
          v10 = a1;
          goto LABEL_6;
        }
        v20 = *(double *)(v18 + 32);
        v21 = v12 > *(_DWORD *)(v18 + 40);
        if (v11 != v20)
          v21 = v11 < v20;
        v17 -= 24;
      }
      while (v21);
      v10 = a1 + v17 + 72;
LABEL_6:
      *(_QWORD *)v10 = v15;
      *(double *)(v18 + 56) = v11;
      *(_DWORD *)(v10 + 16) = v12;
      *(_BYTE *)(v10 + 20) = v16;
      if (++v9 == 8)
        return v7 + 24 == a2;
    }
    v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __n128 result;
  __int128 *v10;
  double v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  double v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  double v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v8 = (_QWORD *)(a4 + 8);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  v10 = (__int128 *)(a3 + 8);
  v11 = *(double *)(a3 + 8);
  v12 = *(_DWORD *)(a4 + 16) > *(_DWORD *)(a3 + 16);
  if (result.n128_f64[0] != v11)
    v12 = result.n128_f64[0] < v11;
  if (v12)
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v13;
    v25 = *v10;
    v14 = *(_QWORD *)(a4 + 13);
    *(_QWORD *)v10 = *v8;
    *(_QWORD *)(a3 + 13) = v14;
    *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v25 + 5);
    *v8 = v25;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    v15 = (__int128 *)(a2 + 8);
    v16 = *(double *)(a2 + 8);
    v17 = *(_DWORD *)(a3 + 16) > *(_DWORD *)(a2 + 16);
    if (result.n128_f64[0] != v16)
      v17 = result.n128_f64[0] < v16;
    if (v17)
    {
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      v26 = *v15;
      v19 = *(_QWORD *)(a3 + 13);
      *(_QWORD *)v15 = *(_QWORD *)v10;
      *(_QWORD *)(a2 + 13) = v19;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)&v26 + 5);
      *(_QWORD *)v10 = v26;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      v20 = (__n128 *)(a1 + 8);
      v21 = *(double *)(a1 + 8);
      v22 = *(_DWORD *)(a2 + 16) > *(_DWORD *)(a1 + 16);
      if (result.n128_f64[0] != v21)
        v22 = result.n128_f64[0] < v21;
      if (v22)
      {
        v23 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v23;
        result = *v20;
        v27 = *v20;
        v24 = *(_QWORD *)(a2 + 13);
        v20->n128_u64[0] = *(_QWORD *)v15;
        *(_QWORD *)(a1 + 13) = v24;
        *(_QWORD *)(a2 + 13) = *(unint64_t *)((char *)v27.n128_u64 + 5);
        *(_QWORD *)v15 = v27.n128_u64[0];
      }
    }
  }
  return result;
}

void std::vector<std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

operations_research::sat::SatPostsolver *operations_research::sat::SatPostsolver::SatPostsolver(operations_research::sat::SatPostsolver *this, int a2)
{
  int32x4_t **v4;
  char *v5;
  int32x4_t *v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t *v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v4 = (int32x4_t **)((char *)this + 104);
  *((_QWORD *)this + 17) = 0;
  v5 = (char *)this + 136;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((_QWORD *)this + 20) = (char *)this + 128;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 42) = -1;
  if (a2)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 104), a2);
    if (a2 >= 1)
    {
      v6 = *v4;
      if (a2 < 8)
      {
        v7 = 0;
        do
        {
LABEL_8:
          v6->i32[v7] = v7;
          ++v7;
        }
        while (a2 != v7);
        goto LABEL_9;
      }
      v7 = a2 & 0x7FFFFFF8;
      v8 = (int32x4_t)xmmword_22DCE64F0;
      v9 = v6 + 1;
      v10.i64[0] = 0x400000004;
      v10.i64[1] = 0x400000004;
      v11.i64[0] = 0x800000008;
      v11.i64[1] = 0x800000008;
      v12 = a2 & 0xFFFFFFF8;
      do
      {
        v9[-1] = v8;
        *v9 = vaddq_s32(v8, v10);
        v8 = vaddq_s32(v8, v11);
        v9 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v7 != a2)
        goto LABEL_8;
    }
  }
LABEL_9:
  v13 = (2 * a2) & ~((2 * a2) >> 31);
  *((_DWORD *)this + 32) = v13;
  v14 = (v13 + 63) >> 6;
  v18 = 0;
  v15 = *((_QWORD *)this + 17);
  v16 = (*((_QWORD *)this + 18) - v15) >> 3;
  if (v14 <= v16)
  {
    if (v14 < v16)
      *((_QWORD *)this + 18) = v15 + 8 * v14;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v14 - v16, &v18);
  }
  return this;
}

void sub_22DC00DF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v4;
  if (*v4)
  {
    v1[18] = v7;
    operator delete(v7);
    v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      v9 = (void *)v1[10];
      if (!v9)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[14] = v8;
  operator delete(v8);
  v9 = (void *)v1[10];
  if (!v9)
  {
LABEL_4:
    std::deque<int>::~deque[abi:ne180100](v2);
    v10 = *v5;
    if (!*v5)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[11] = v9;
  operator delete(v9);
  std::deque<int>::~deque[abi:ne180100](v2);
  v10 = *v5;
  if (!*v5)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  v1[2] = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatPostsolver::Add(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v7 = operations_research::sat::SatPostsolver::ApplyReverseMapping(a1, a2);
  v8 = v7;
  v10 = *(char **)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v11 = v10;
  if ((unint64_t)v10 < v9)
  {
    *(_DWORD *)v10 = v7;
    v12 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v13 = *(char **)(a1 + 80);
  v14 = (v10 - v13) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v9 - (_QWORD)v13;
  if (v16 >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      goto LABEL_52;
    v18 = operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v8;
    v12 = (uint64_t)(v19 + 1);
    v21 = v10 - v13;
    if (v10 == v13)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (_DWORD *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = v8;
  v12 = 4 * v14 + 4;
  v21 = v10 - v13;
  if (v10 != v13)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_57;
    if ((unint64_t)(v13 - v18) < 0x20)
      goto LABEL_57;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v11 = &v10[-v24];
    v19 = (_DWORD *)((char *)v19 - v24);
    v25 = &v18[4 * v14 - 16];
    v26 = v10 - 16;
    v27 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        v29 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--v19 = v29;
      }
      while (v11 != v13);
    }
  }
LABEL_20:
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v20;
  if (v13)
    operator delete(v13);
LABEL_22:
  *(_QWORD *)(a1 + 88) = v12;
  v30 = *(_DWORD *)(a1 + 72);
  v32 = *(char **)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v32 < v31)
  {
    *(_DWORD *)v32 = v30;
    v33 = (uint64_t)(v32 + 4);
    goto LABEL_43;
  }
  v34 = *(char **)(a1 + 8);
  v35 = (v32 - v34) >> 2;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v37 = v31 - (_QWORD)v34;
  if (v37 >> 1 > v36)
    v36 = v37 >> 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
    v38 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (!v38)
  {
    v39 = 0;
    v40 = (_DWORD *)(4 * v35);
    v41 = 0;
    *(_DWORD *)(4 * v35) = v30;
    v33 = 4 * v35 + 4;
    v42 = v32 - v34;
    if (v32 == v34)
      goto LABEL_41;
LABEL_35:
    v43 = v42 - 4;
    if (v43 < 0x2C)
      goto LABEL_58;
    if ((unint64_t)(v34 - v39) < 0x20)
      goto LABEL_58;
    v44 = (v43 >> 2) + 1;
    v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
    v46 = &v32[-v45];
    v40 = (_DWORD *)((char *)v40 - v45);
    v47 = &v39[4 * v35 - 16];
    v48 = v32 - 16;
    v49 = v44 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 8;
    }
    while (v49);
    v32 = v46;
    if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v51 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--v40 = v51;
      }
      while (v32 != v34);
    }
    goto LABEL_41;
  }
  if (v38 >> 62)
LABEL_52:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v39 = operator new(4 * v38);
  v40 = &v39[4 * v35];
  v41 = &v39[4 * v38];
  *v40 = v30;
  v33 = (uint64_t)(v40 + 1);
  v42 = v32 - v34;
  if (v32 != v34)
    goto LABEL_35;
LABEL_41:
  *(_QWORD *)(a1 + 8) = v40;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v41;
  if (v34)
    operator delete(v34);
LABEL_43:
  *(_QWORD *)(a1 + 16) = v33;
  if (a4)
  {
    v52 = 4 * a4;
    do
    {
      v53 = operations_research::sat::SatPostsolver::ApplyReverseMapping(a1, *a3);
      v54 = *(_QWORD *)(a1 + 48);
      v55 = *(_QWORD *)(a1 + 40);
      if (v54 == v55)
        v56 = 0;
      else
        v56 = ((v54 - v55) << 7) - 1;
      v57 = *(_QWORD *)(a1 + 72);
      v58 = v57 + *(_QWORD *)(a1 + 64);
      if (v56 == v58)
      {
        std::deque<operations_research::sat::Literal>::__add_back_capacity(a1 + 32);
        v55 = *(_QWORD *)(a1 + 40);
        v57 = *(_QWORD *)(a1 + 72);
        v58 = *(_QWORD *)(a1 + 64) + v57;
      }
      *(_DWORD *)(*(_QWORD *)(v55 + ((v58 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v58 & 0x3FF)) = v53;
      *(_QWORD *)(a1 + 72) = v57 + 1;
      ++a3;
      v52 -= 4;
    }
    while (v52);
  }
}

uint64_t operations_research::sat::SatPostsolver::ApplyReverseMapping(uint64_t a1, int a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;

  v2 = a2;
  v3 = a2 >> 1;
  v4 = *(_QWORD *)(a1 + 104);
  v5 = (uint64_t *)(a1 + 104);
  if (a2 >> 1 >= (int)((unint64_t)(*(_QWORD *)(a1 + 112) - v4) >> 2))
  {
    do
    {
      v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v7 + 1;
      v14 = v7;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v5, &v14);
      v4 = *(_QWORD *)(a1 + 104);
    }
    while (v3 >= (int)((unint64_t)(*(_QWORD *)(a1 + 112) - v4) >> 2));
    v8 = (2 * *(_DWORD *)(a1 + 4)) & ~((2 * *(_DWORD *)(a1 + 4)) >> 31);
    *(_DWORD *)(a1 + 128) = v8;
    v9 = *(_QWORD *)(a1 + 136);
    v10 = *(_QWORD *)(a1 + 144);
    v11 = (v8 + 63) >> 6;
    v15 = 0;
    v12 = (v10 - v9) >> 3;
    if (v11 <= v12)
    {
      if (v11 < v12)
        *(_QWORD *)(a1 + 144) = v9 + 8 * v11;
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 136, v11 - v12, &v15);
      v4 = *v5;
    }
  }
  return v2 & 1 | (2 * *(_DWORD *)(v4 + 4 * v3));
}

void operations_research::sat::SatPostsolver::ApplyMapping(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  int *v20;
  int *v21;
  std::vector<int> v22;
  uint64_t v23;

  memset(&v22, 0, sizeof(v22));
  v4 = (_QWORD *)(a1 + 104);
  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  if (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104) < v7)
  {
    do
    {
      v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v8 + 1;
      LODWORD(v23) = v8;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v4, &v23);
      v6 = *a2;
      v5 = a2[1];
    }
    while (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104) < (unint64_t)(v5 - *a2));
    v9 = (2 * *(_DWORD *)(a1 + 4)) & ~((2 * *(_DWORD *)(a1 + 4)) >> 31);
    *(_DWORD *)(a1 + 128) = v9;
    v10 = *(_QWORD *)(a1 + 136);
    v11 = *(_QWORD *)(a1 + 144);
    v12 = (v9 + 63) >> 6;
    v23 = 0;
    v13 = (v11 - v10) >> 3;
    if (v12 <= v13)
    {
      if (v12 < v13)
        *(_QWORD *)(a1 + 144) = v10 + 8 * v12;
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 136, v12 - v13, &v23);
      v6 = *a2;
      v5 = a2[1];
    }
    v7 = v5 - v6;
  }
  if ((int)(v7 >> 2) < 1)
  {
    begin = 0;
    v19 = 0uLL;
  }
  else
  {
    begin = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(int *)(v6 + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = v22.__end_ - v15;
        if ((int)v17 >= (int)v18)
        {
          if (v17 + 1 <= v18)
          {
            if (v17 + 1 < v18)
              v22.__end_ = &v15[v17 + 1];
          }
          else
          {
            std::vector<int>::__append(&v22, v17 + 1 - v18, &operations_research::sat::kNoBooleanVariable);
            begin = v22.__begin_;
            v6 = *a2;
            v5 = a2[1];
          }
        }
        begin[v17] = *(_DWORD *)(*v4 + 4 * v16);
        v15 = begin;
      }
      ++v16;
    }
    while (v16 < (int)((unint64_t)(v5 - v6) >> 2));
    v19 = *(_OWORD *)&v22.__end_;
  }
  v21 = *(int **)(a1 + 120);
  v22.__begin_ = *(std::vector<int>::pointer *)(a1 + 104);
  v20 = v22.__begin_;
  v22.__end_cap_.__value_ = v21;
  *(_QWORD *)(a1 + 104) = begin;
  *(_OWORD *)(a1 + 112) = v19;
  if (v20)
  {
    v22.__end_ = v20;
    operator delete(v20);
  }
}

void sub_22DC01450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPostsolver::Postsolve(uint64_t a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;

  v2 = *a2;
  if ((int)v2 > 1)
  {
    v3 = 0;
    v4 = v2 >> 1;
    v5 = *((_QWORD *)a2 + 1);
    do
    {
      v6 = 2 * (v3 & 0x1F);
      if (((*(_QWORD *)(v5 + (((unint64_t)(2 * (int)v3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 3) == 0)
        *(_QWORD *)(v5 + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) |= 1 << v6;
      ++v3;
    }
    while (v3 != v4);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16) - v7;
  if ((int)(v8 >> 2) < 1)
  {
    v11 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 72);
    v10 = (v8 >> 2);
    v11 = *((_QWORD *)a2 + 1);
    do
    {
      v14 = *(_DWORD *)(v7 + 4 * (v10 - 1));
      if (v14 >= v9)
      {
LABEL_8:
        v12 = *(int *)(*(_QWORD *)(a1 + 80) + 4 * (v10 - 1));
        *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) = *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) & ~(3 << (v12 & 0x3E)) | (1 << v12);
      }
      else
      {
        v15 = v9;
        v16 = *(_QWORD *)(a1 + 64) + v14;
        v17 = v15 - v14;
        while (1)
        {
          v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v16 & 0x3FF));
          if (((*(_QWORD *)(v11 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
            break;
          ++v16;
          if (!--v17)
            goto LABEL_8;
        }
      }
      v9 = v14;
    }
    while (v10-- > 1);
  }
  v19 = (2 * *(_DWORD *)a1) & ~((2 * *(_DWORD *)a1) >> 31);
  *a2 = v19;
  v20 = (v19 + 63) >> 6;
  v24 = 0;
  v21 = (*((_QWORD *)a2 + 2) - v11) >> 3;
  v22 = v20 >= v21;
  v23 = v20 - v21;
  if (v23 != 0 && v22)
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 2), v23, &v24);
  }
  else if (!v22)
  {
    *((_QWORD *)a2 + 2) = v11 + 8 * v20;
  }
}

void operations_research::sat::SatPostsolver::ExtractAndPostsolveSolution(operations_research::sat::SatPostsolver *this@<X0>, const operations_research::sat::SatSolver *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;

  v5 = *((int *)a2 + 4);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  if ((_DWORD)v5)
  {
    if ((v5 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (v5 - 1) >> 6;
    v8 = operator new(8 * (v7 + 1));
    v9 = v8;
    v17 = v5;
    v18 = v7 + 1;
    v16 = v8;
    if (v5 >= 0x41)
      v10 = (v5 - 1) >> 6;
    else
      v10 = 0;
    v8[v10] = 0;
    if (v5 >= 0x40)
      bzero(v8, 8 * (v5 >> 6));
    if ((v5 & 0x3F) != 0)
      v9[v5 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 26) + 24);
    do
    {
      while (1)
      {
        v14 = v12 >> 6;
        v15 = 1 << v12;
        if (((*(_QWORD *)(v13 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v11 & 0x3E)) & 1) != 0)
          break;
        v9[v14] &= ~v15;
        ++v12;
        v11 += 2;
        if (v5 == v12)
          goto LABEL_16;
      }
      v9[v14] |= v15;
      ++v12;
      v11 += 2;
    }
    while (v5 != v12);
  }
  else
  {
    v9 = 0;
  }
LABEL_16:
  operations_research::sat::SatPostsolver::PostsolveSolution((int *)this, (uint64_t *)&v16, a3);
  if (v9)
    operator delete(v9);
}

void sub_22DC01798(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPostsolver::PostsolveSolution(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if ((int)a2[1] >= 1)
  {
    v5 = 0;
    v6 = a2[1];
    v7 = *((_QWORD *)a1 + 13);
    v8 = *a2;
    v9 = *((_QWORD *)a1 + 17);
    do
    {
      *(_QWORD *)(v9 + (((unint64_t)(2 * *(_DWORD *)(v7 + 4 * v5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << ((((*(_QWORD *)(v8 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) | (2 * (*(_DWORD *)(v7 + 4 * v5) & 0x1F)));
      ++v5;
    }
    while (v6 != v5);
  }
  operations_research::sat::SatPostsolver::Postsolve((uint64_t)a1, a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<BOOL>::reserve((uint64_t)a3, *a1);
  if (*a1 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = *(_QWORD *)(*((_QWORD *)a1 + 17) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v13 = a3[1];
        v14 = a3[2];
        if (v13 == v14 << 6)
        {
          if ((uint64_t)(v13 + 1) < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v15 = v14 << 7;
          if (v15 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64)
            v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v13 <= 0x3FFFFFFFFFFFFFFELL)
            v16 = v15;
          else
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          std::vector<BOOL>::reserve((uint64_t)a3, v16);
          v13 = a3[1];
        }
        a3[1] = v13 + 1;
        v17 = *a3;
        v18 = v13 >> 6;
        v19 = 1 << v13;
        if ((v12 & (1 << (v10 & 0x3E))) != 0)
          break;
        *(_QWORD *)(v17 + 8 * v18) &= ~v19;
        ++v11;
        v10 += 2;
        if (v11 >= *a1)
          return;
      }
      *(_QWORD *)(v17 + 8 * v18) |= v19;
      ++v11;
      v10 += 2;
    }
    while (v11 < *a1);
  }
}

void sub_22DC0195C(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::AddClause(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  unsigned __int8 v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int32x2_t **v52;
  int32x2_t *v53;
  int32x2_t *v54;
  unint64_t v55;
  int8x8_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  int32x2_t *v69;
  int8x16_t v70;
  uint64x2_t v71;
  uint64_t v72;
  int8x16_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  int8x16_t v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  int8x8_t *v86;
  uint64_t v87;
  int8x8_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  int8x8_t *v94;
  char *v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x8_t *v100;
  _OWORD *v101;
  int8x8_t *v102;
  uint64_t v103;
  __int128 v104;
  int8x8_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  _DWORD *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  _OWORD *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *__p;
  char *v146;
  char *v147;

  v7 = *(_QWORD *)(a1 + 328);
  v6 = *(_QWORD **)(a1 + 336);
  __p = 0;
  v146 = 0;
  v147 = 0;
  if (a3)
  {
    if (4 * a3 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(4 * a3);
    v9 = &v8[4 * ((4 * a3) >> 2)];
    __p = v8;
    v147 = v9;
    memcpy(v8, a2, 4 * a3);
    v146 = v9;
    if ((unint64_t)v6 < *(_QWORD *)(a1 + 344))
      goto LABEL_4;
LABEL_6:
    v10 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 328), (uint64_t)&__p);
    v11 = (char *)__p;
    *(_QWORD *)(a1 + 336) = v10;
    if (v11)
    {
      v146 = v11;
      operator delete(v11);
    }
    goto LABEL_8;
  }
  v9 = 0;
  v8 = 0;
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 344))
    goto LABEL_6;
LABEL_4:
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v9;
  *(_QWORD *)(a1 + 336) = v6 + 3;
LABEL_8:
  v13 = *(_QWORD *)(a1 + 264);
  v12 = *(_QWORD *)(a1 + 272);
  if (v13 == v12 << 6)
  {
    if ((uint64_t)(v13 + 1) < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (v13 > 0x3FFFFFFFFFFFFFFELL)
    {
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v14 = v12 << 7;
      v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v14 <= v15)
        v16 = v15;
      else
        v16 = v14;
    }
    std::vector<BOOL>::reserve(a1 + 256, v16);
    v13 = *(_QWORD *)(a1 + 264);
  }
  v144 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v7) >> 3);
  v17 = *(_QWORD *)(a1 + 296);
  v18 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 264) = v13 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 256) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  if (v17 == v18)
    v19 = 0;
  else
    v19 = ((v17 - v18) << 7) - 1;
  v20 = *(_QWORD *)(a1 + 320);
  v21 = v20 + *(_QWORD *)(a1 + 312);
  if (v19 == v21)
  {
    std::deque<int>::__add_back_capacity(a1 + 280);
    v18 = *(_QWORD *)(a1 + 288);
    v20 = *(_QWORD *)(a1 + 320);
    v21 = *(_QWORD *)(a1 + 312) + v20;
  }
  *(_DWORD *)(*(_QWORD *)(v18 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF)) = v144;
  *(_QWORD *)(a1 + 320) = v20 + 1;
  v22 = *(_QWORD *)(a1 + 336);
  v23 = *(_QWORD *)(a1 + 448);
  v24 = *(_QWORD *)(a1 + 456);
  v25 = *(int **)(v22 - 24);
  v26 = *(char **)(v22 - 16);
  v142 = a1;
  v27 = 0;
  if (v23 != v24)
  {
    if (v26 == (char *)v25)
    {
      v26 = *(char **)(v22 - 24);
    }
    else
    {
      v28 = (v26 - (char *)v25) >> 2;
      if (v28 <= 1)
        v28 = 1;
      v29 = *(int **)(v22 - 24);
      do
      {
        v30 = *v29;
        v31 = *(_DWORD *)(v23 + 4 * v30);
        *v29++ = v31;
        v27 |= (_DWORD)v30 != v31;
        --v28;
      }
      while (v28);
    }
  }
  v32 = 126 - 2 * __clz((v26 - (char *)v25) >> 2);
  if (v26 == (char *)v25)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v25, v26, (uint64_t)&__p, v33, 1);
  v34 = *(char **)(v22 - 24);
  v35 = *(char **)(v22 - 16);
  if (v34 == v35)
    goto LABEL_47;
  v36 = v34 + 4;
  do
  {
    if (v36 == v35)
      goto LABEL_47;
    v38 = *((_DWORD *)v36 - 1);
    v37 = *(_DWORD *)v36;
    v36 += 4;
  }
  while (v38 != v37);
  v39 = v36 - 8;
  while (v36 != v35)
  {
    v40 = v37;
    v37 = *(_DWORD *)v36;
    if (v40 != *(_DWORD *)v36)
    {
      *((_DWORD *)v39 + 1) = v37;
      v39 += 4;
    }
    v36 += 4;
  }
  v42 = v39 + 4;
  v43 = v35 - (v39 + 4);
  if (v35 == v39 + 4)
  {
LABEL_47:
    v41 = v35 - v34;
    if ((unint64_t)v41 >= 5)
      goto LABEL_48;
LABEL_53:
    v52 = (int32x2_t **)(*(_QWORD *)(v142 + 328) + 24 * (int)v144);
    v54 = *v52;
    v53 = v52[1];
    if (v54 == v53)
    {
      v56 = 0;
      goto LABEL_70;
    }
    v55 = (char *)v53 - (char *)v54 - 4;
    if (v55 >= 0xC)
    {
      v68 = (v55 >> 2) + 1;
      v57 = (int *)v54 + (v68 & 0x7FFFFFFFFFFFFFFCLL);
      v69 = v54 + 1;
      v70 = 0uLL;
      v71 = (uint64x2_t)vdupq_n_s64(1uLL);
      v72 = v68 & 0x7FFFFFFFFFFFFFFCLL;
      v73 = 0uLL;
      do
      {
        v74 = v69[-1];
        v75 = vshr_n_s32(v74, 1uLL);
        v76 = vshr_n_s32(*v69, 1uLL);
        v77 = vsub_s32(v75, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v75, (uint32x2_t)vcltz_s32(v74), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
        v78 = vsub_s32(v76, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v76, (uint32x2_t)vcltz_s32(*v69), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
        v79.i64[0] = v77.u32[0];
        v79.i64[1] = v77.u32[1];
        v80 = v79;
        v79.i64[0] = v78.u32[0];
        v79.i64[1] = v78.u32[1];
        v70 = vorrq_s8((int8x16_t)vshlq_u64(v71, v80), v70);
        v73 = vorrq_s8((int8x16_t)vshlq_u64(v71, v79), v73);
        v69 += 2;
        v72 -= 4;
      }
      while (v72);
      v81 = vorrq_s8(v73, v70);
      v56 = vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL));
      if (v68 == (v68 & 0x7FFFFFFFFFFFFFFCLL))
        goto LABEL_70;
    }
    else
    {
      v56 = 0;
      v57 = (int *)v54;
    }
    do
    {
      v82 = *v57++;
      v83 = -(v82 >> 1) & 0x3F;
      v84 = (v82 >> 1) & 0x3F;
      if (v82 >> 1 <= 0)
        v84 = -v83;
      *(_QWORD *)&v56 |= 1 << v84;
    }
    while (v57 != (int *)v53);
LABEL_70:
    v86 = *(int8x8_t **)(v142 + 360);
    v85 = *(_QWORD *)(v142 + 368);
    if ((unint64_t)v86 < v85)
    {
      *v86 = v56;
      v87 = (uint64_t)&v86[1];
LABEL_91:
      *(_QWORD *)(v142 + 360) = v87;
      v106 = *(_QWORD *)(v142 + 1056);
      v107 = (v106 != 0) & v27;
      v108 = v142;
      v109 = *(_QWORD *)(v22 - 16);
      if (v107 == 1)
      {
        operations_research::sat::DratProofHandler::AddClause(v106, *(int **)(v22 - 24), (v109 - *(_QWORD *)(v22 - 24)) >> 2);
        operations_research::sat::DratProofHandler::DeleteClause(*(_QWORD *)(v142 + 1056), (int *)a2, a3);
        v109 = *(_QWORD *)(v22 - 16);
      }
      v110 = (*(int *)(v109 - 4) | 1) + 1;
      v111 = (_QWORD *)(v142 + 392);
      v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v142 + 400) - *(_QWORD *)(v142 + 392)) >> 3);
      if (v110 > v112)
      {
        std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v142 + 392, v110 - v112);
        v113 = *(_QWORD *)(v142 + 416);
        v114 = (*(_QWORD *)(v142 + 424) - v113) >> 2;
        if (v110 <= v114)
        {
          if (v110 < v114)
            *(_QWORD *)(v142 + 424) = v113 + 4 * v110;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(v142 + 416), v110 - v114);
        }
      }
      v116 = *(int **)(v22 - 24);
      v115 = *(int **)(v22 - 16);
      if (v116 == v115)
        return;
      v141 = *(int **)(v22 - 16);
      while (1)
      {
        v118 = *v116;
        v119 = *v111 + 24 * (int)v118;
        v121 = (uint64_t *)(v119 + 8);
        v120 = *(char **)(v119 + 8);
        v122 = *(_QWORD *)(v119 + 16);
        if ((unint64_t)v120 >= v122)
          break;
        *(_DWORD *)v120 = v144;
        v117 = (uint64_t)(v120 + 4);
LABEL_101:
        *v121 = v117;
        ++*(_DWORD *)(*(_QWORD *)(v108 + 416) + 4 * v118);
        if (++v116 == v115)
          return;
      }
      v123 = *(char **)v119;
      v124 = (uint64_t)&v120[-*(_QWORD *)v119];
      v125 = v124 >> 2;
      v126 = (v124 >> 2) + 1;
      if (v126 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v127 = v122 - (_QWORD)v123;
      if (v127 >> 1 > v126)
        v126 = v127 >> 1;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
        v126 = 0x3FFFFFFFFFFFFFFFLL;
      v143 = *v116;
      if (v126)
      {
        if (v126 >> 62)
          goto LABEL_125;
        v128 = v126;
        v129 = operator new(4 * v126);
        v130 = &v129[4 * v125];
        *v130 = v144;
        v117 = (uint64_t)(v130 + 1);
        if (v120 != v123)
          goto LABEL_111;
      }
      else
      {
        v128 = 0;
        v129 = 0;
        v130 = (_DWORD *)(4 * v125);
        *(_DWORD *)(4 * v125) = v144;
        v117 = 4 * v125 + 4;
        if (v120 != v123)
        {
LABEL_111:
          v131 = v120 - 4 - v123;
          if (v131 >= 0x2C)
          {
            v132 = v120 - &v129[v124];
            v108 = v142;
            if (v132 >= 0x20)
            {
              v133 = (v131 >> 2) + 1;
              v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
              v135 = &v120[-v134];
              v130 = (_DWORD *)((char *)v130 - v134);
              v136 = &v129[4 * v125 - 16];
              v137 = v120 - 16;
              v138 = v133 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v139 = *(_OWORD *)v137;
                *(v136 - 1) = *((_OWORD *)v137 - 1);
                *v136 = v139;
                v136 -= 2;
                v137 -= 32;
                v138 -= 8;
              }
              while (v138);
              v120 = v135;
              if (v133 == (v133 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_120;
            }
          }
          else
          {
            v108 = v142;
          }
          do
          {
            v140 = *((_DWORD *)v120 - 1);
            v120 -= 4;
            *--v130 = v140;
          }
          while (v120 != v123);
LABEL_120:
          *(_QWORD *)v119 = v130;
          *v121 = v117;
          *(_QWORD *)(v119 + 16) = &v129[4 * v128];
          if (v123)
            operator delete(v123);
          v115 = v141;
          v111 = (_QWORD *)(v142 + 392);
          v118 = v143;
          goto LABEL_101;
        }
      }
      v108 = v142;
      goto LABEL_120;
    }
    v88 = *(int8x8_t **)(v142 + 352);
    v89 = v86 - v88;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v91 = v85 - (_QWORD)v88;
    if (v91 >> 2 > v90)
      v90 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 61)
LABEL_125:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v93 = operator new(8 * v92);
      v94 = (int8x8_t *)&v93[8 * v89];
      v95 = &v93[8 * v92];
      *v94 = v56;
      v87 = (uint64_t)&v94[1];
      v96 = (char *)v86 - (char *)v88;
      if (v86 == v88)
        goto LABEL_89;
    }
    else
    {
      v93 = 0;
      v94 = (int8x8_t *)(8 * v89);
      v95 = 0;
      *(int8x8_t *)(8 * v89) = v56;
      v87 = 8 * v89 + 8;
      v96 = (char *)v86 - (char *)v88;
      if (v86 == v88)
      {
LABEL_89:
        *(_QWORD *)(v142 + 352) = v94;
        *(_QWORD *)(v142 + 360) = v87;
        *(_QWORD *)(v142 + 368) = v95;
        if (v88)
          operator delete(v88);
        goto LABEL_91;
      }
    }
    v97 = v96 - 8;
    if (v97 < 0x58)
      goto LABEL_131;
    if ((unint64_t)((char *)v88 - v93) < 0x20)
      goto LABEL_131;
    v98 = (v97 >> 3) + 1;
    v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    v100 = &v86[v99 / 0xFFFFFFFFFFFFFFF8];
    v94 = (int8x8_t *)((char *)v94 - v99);
    v101 = &v93[8 * v89 - 16];
    v102 = v86 - 2;
    v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v104 = *(_OWORD *)v102->i8;
      *(v101 - 1) = *(_OWORD *)v102[-2].i8;
      *v101 = v104;
      v101 -= 2;
      v102 -= 4;
      v103 -= 4;
    }
    while (v103);
    v86 = v100;
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_131:
      do
      {
        v105 = v86[-1];
        --v86;
        v94[-1] = v105;
        --v94;
      }
      while (v86 != v88);
    }
    goto LABEL_89;
  }
  if (v35 != &v42[v43])
  {
    memmove(v39 + 4, &v42[v43], 0);
    v34 = *(char **)(v22 - 24);
  }
  *(_QWORD *)(v22 - 16) = v42;
  v41 = v42 - v34;
  if ((unint64_t)(v42 - v34) < 5)
    goto LABEL_53;
LABEL_48:
  v44 = v41 >> 2;
  v45 = 2;
  if (v44 > 2)
    v45 = v44;
  v48 = *(_DWORD *)v34;
  v46 = (int *)(v34 + 4);
  v47 = v48;
  v49 = v45 - 1;
  while (1)
  {
    v50 = v47 ^ 1;
    v51 = *v46++;
    v47 = v51;
    if (v51 == v50)
      break;
    if (!--v49)
      goto LABEL_53;
  }
  v59 = *(_QWORD *)(v142 + 288);
  v58 = *(_QWORD *)(v142 + 296);
  v60 = ((v58 - v59) << 7) - 1;
  v61 = v58 == v59;
  ++*(_DWORD *)(v142 + 472);
  v63 = *(_QWORD *)(v142 + 312);
  v62 = *(_QWORD *)(v142 + 320);
  if (v61)
    v60 = 0;
  *(_QWORD *)(v142 + 320) = v62 - 1;
  if ((unint64_t)(v60 - (v62 + v63) + 1) >= 0x800)
  {
    operator delete(*(void **)(v58 - 8));
    *(_QWORD *)(v142 + 296) -= 8;
  }
  v64 = *(_QWORD *)(v142 + 336);
  v67 = *(void **)(v64 - 24);
  v66 = v64 - 24;
  v65 = v67;
  if (v67)
  {
    *(_QWORD *)(*(_QWORD *)(v142 + 336) - 16) = v65;
    operator delete(v65);
  }
  *(_QWORD *)(v142 + 336) = v66;
  --*(_QWORD *)(v142 + 264);
}

void sub_22DC021FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::SetNumVariables(operations_research::sat::SatPresolver *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v2 = 2 * a2;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 50) - *((_QWORD *)this + 49)) >> 3);
  if (v2 > v3)
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 392, v2 - v3);
    v5 = *((_QWORD *)this + 52);
    v6 = (*((_QWORD *)this + 53) - v5) >> 2;
    if (v2 <= v6)
    {
      if (v2 < v6)
        *((_QWORD *)this + 53) = v5 + 4 * v2;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 416), v2 - v6);
    }
  }
}

void operations_research::sat::SatPresolver::AddClauseInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  double *v52;
  unint64_t v53;
  uint64_t v54;
  double *v55;
  unint64_t v56;
  uint64_t v57;
  int32x2_t **v58;
  int32x2_t *v59;
  int32x2_t *v60;
  unint64_t v61;
  int8x8_t v62;
  int *v63;
  uint64_t v64;
  int32x2_t *v65;
  int8x16_t v66;
  uint64x2_t v67;
  uint64_t v68;
  int8x16_t v69;
  int32x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int32x2_t v73;
  int32x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  int8x16_t v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  int8x8_t *v82;
  uint64_t v83;
  int8x8_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  int8x8_t *v90;
  char *v91;
  int64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t *v96;
  _OWORD *v97;
  int8x8_t *v98;
  uint64_t v99;
  __int128 v100;
  int8x8_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  void *__p;
  void *v108;
  uint64_t v109;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 1056);
  if (v4)
    operations_research::sat::DratProofHandler::AddClause(v4, *(int **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v6 = *(_QWORD *)(v3 + 328);
  v5 = *(_QWORD **)(v3 + 336);
  __p = 0;
  v108 = 0;
  v109 = 0;
  if ((unint64_t)v5 >= *(_QWORD *)(v3 + 344))
  {
    v7 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(v3 + 328), (uint64_t)&__p);
    v8 = __p;
    *(_QWORD *)(v3 + 336) = v7;
    if (v8)
    {
      v108 = v8;
      operator delete(v8);
      v7 = *(char **)(v3 + 336);
    }
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[2] = v109;
    v7 = (char *)(v5 + 3);
    *(_QWORD *)(v3 + 336) = v5 + 3;
  }
  v9 = *((_QWORD *)v7 - 3);
  *((_QWORD *)v7 - 3) = *(_QWORD *)a2;
  *(_QWORD *)a2 = v9;
  v10 = *((_QWORD *)v7 - 2);
  *((_QWORD *)v7 - 2) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10;
  v11 = *((_QWORD *)v7 - 1);
  *((_QWORD *)v7 - 1) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v11;
  v13 = *(_QWORD *)(v3 + 264);
  v12 = *(_QWORD *)(v3 + 272);
  if (v13 == v12 << 6)
  {
    if ((uint64_t)(v13 + 1) < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (v13 > 0x3FFFFFFFFFFFFFFELL)
    {
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v14 = v12 << 7;
      v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v14 <= v15)
        v16 = v15;
      else
        v16 = v14;
    }
    std::vector<BOOL>::reserve(v3 + 256, v16);
    v13 = *(_QWORD *)(v3 + 264);
  }
  v106 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v6) >> 3);
  v17 = *(_QWORD *)(v3 + 296);
  v18 = *(_QWORD *)(v3 + 288);
  *(_QWORD *)(v3 + 264) = v13 + 1;
  *(_QWORD *)(*(_QWORD *)(v3 + 256) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  if (v17 == v18)
    v19 = 0;
  else
    v19 = ((v17 - v18) << 7) - 1;
  v20 = *(_QWORD *)(v3 + 320);
  v21 = v20 + *(_QWORD *)(v3 + 312);
  if (v19 == v21)
  {
    std::deque<int>::__add_back_capacity(v3 + 280);
    v18 = *(_QWORD *)(v3 + 288);
    v20 = *(_QWORD *)(v3 + 320);
    v21 = *(_QWORD *)(v3 + 312) + v20;
  }
  *(_DWORD *)(*(_QWORD *)(v18 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF)) = v106;
  *(_QWORD *)(v3 + 320) = v20 + 1;
  v22 = *(_QWORD *)(v3 + 336);
  v24 = *(int **)(v22 - 24);
  v23 = *(int **)(v22 - 16);
  v103 = v3;
  if (v24 != v23)
  {
    v104 = (_QWORD *)(v3 + 24);
    v102 = v3 + 104;
    do
    {
      v25 = *v24;
      v26 = *(_QWORD *)(v3 + 392) + 24 * (int)v25;
      v27 = (uint64_t *)(v26 + 8);
      v28 = *(char **)(v26 + 8);
      v30 = (_QWORD *)(v26 + 16);
      v29 = *(_QWORD *)(v26 + 16);
      if ((unint64_t)v28 < v29)
      {
        *(_DWORD *)v28 = v106;
        v31 = (uint64_t)(v28 + 4);
        goto LABEL_45;
      }
      v32 = v23;
      v33 = *(char **)v26;
      v34 = (uint64_t)&v28[-*(_QWORD *)v26];
      v35 = v34 >> 2;
      v36 = (v34 >> 2) + 1;
      if (v36 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = v29 - (_QWORD)v33;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      v105 = v36;
      if (v36)
      {
        if (v36 >> 62)
          goto LABEL_91;
        v38 = operator new(4 * v36);
        v30 = (_QWORD *)(v26 + 16);
        v39 = &v38[4 * v35];
        *v39 = v106;
        v31 = (uint64_t)(v39 + 1);
        if (v28 == v33)
        {
LABEL_36:
          v23 = v32;
          v41 = v105;
          goto LABEL_42;
        }
      }
      else
      {
        v38 = 0;
        v39 = (_DWORD *)(4 * v35);
        *(_DWORD *)(4 * v35) = v106;
        v31 = 4 * v35 + 4;
        if (v28 == v33)
          goto LABEL_36;
      }
      v40 = v28 - 4 - v33;
      v41 = v105;
      if (v40 >= 0x2C)
      {
        v42 = v28 - &v38[v34];
        v23 = v32;
        if (v42 >= 0x20)
        {
          v43 = (v40 >> 2) + 1;
          v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v28[-v44];
          v39 = (_DWORD *)((char *)v39 - v44);
          v46 = &v38[4 * v35 - 16];
          v47 = v28 - 16;
          v48 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          v28 = v45;
          if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_42;
        }
      }
      else
      {
        v23 = v32;
      }
      do
      {
        v50 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v39 = v50;
      }
      while (v28 != v33);
LABEL_42:
      *(_QWORD *)v26 = v39;
      *v27 = v31;
      *v30 = &v38[4 * v41];
      if (v33)
        operator delete(v33);
      v3 = v103;
LABEL_45:
      *v27 = v31;
      v51 = *(_QWORD *)(v3 + 416);
      ++*(_DWORD *)(v51 + 4 * v25);
      if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
        goto LABEL_50;
      v52 = (double *)(*(_QWORD *)v3 + 16 * ((int)v25 >> 1));
      v52[1] = (double)(*(_DWORD *)(v51 + 4 * (int)(v25 | 1)) + *(_DWORD *)(v51 + 4 * (int)(v25 & 0xFFFFFFFE)));
      v53 = *(unsigned int *)v52;
      if ((v53 & 0x80000000) != 0
        || (v54 = *(_QWORD *)(v3 + 32), v53 >= (*(_QWORD *)(v3 + 40) - v54) >> 3)
        || *(double **)(v54 + 8 * v53) != v52)
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v104, (uint64_t)v52);
LABEL_50:
        if (*(_QWORD *)(v3 + 96))
          goto LABEL_51;
        goto LABEL_22;
      }
      AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v104, (uint64_t)v52);
      if (*(_QWORD *)(v3 + 96))
      {
LABEL_51:
        v55 = (double *)(*(_QWORD *)(*(_QWORD *)(v3 + 64)
                                   + (((unint64_t)(*(_QWORD *)(v3 + 88) + v25) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*(_BYTE *)(v3 + 88) + v25));
        v55[1] = (double)*(int *)(*(_QWORD *)(v3 + 416) + 4 * v25);
        v56 = *(unsigned int *)v55;
        if ((v56 & 0x80000000) == 0)
        {
          v57 = *(_QWORD *)(v3 + 112);
          if (v56 < (*(_QWORD *)(v3 + 120) - v57) >> 3 && *(double **)(v57 + 8 * v56) == v55)
            AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority(v102, (uint64_t)v55);
        }
      }
LABEL_22:
      ++v24;
    }
    while (v24 != v23);
  }
  v58 = (int32x2_t **)(*(_QWORD *)(v3 + 328) + 24 * (int)v106);
  v60 = *v58;
  v59 = v58[1];
  if (v60 == v59)
  {
    v62 = 0;
    goto LABEL_67;
  }
  v61 = (char *)v59 - (char *)v60 - 4;
  if (v61 >= 0xC)
  {
    v64 = (v61 >> 2) + 1;
    v63 = (int *)v60 + (v64 & 0x7FFFFFFFFFFFFFFCLL);
    v65 = v60 + 1;
    v66 = 0uLL;
    v67 = (uint64x2_t)vdupq_n_s64(1uLL);
    v68 = v64 & 0x7FFFFFFFFFFFFFFCLL;
    v69 = 0uLL;
    do
    {
      v70 = v65[-1];
      v71 = vshr_n_s32(v70, 1uLL);
      v72 = vshr_n_s32(*v65, 1uLL);
      v73 = vsub_s32(v71, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v71, (uint32x2_t)vcltz_s32(v70), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
      v74 = vsub_s32(v72, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v72, (uint32x2_t)vcltz_s32(*v65), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
      v75.i64[0] = v73.u32[0];
      v75.i64[1] = v73.u32[1];
      v76 = v75;
      v75.i64[0] = v74.u32[0];
      v75.i64[1] = v74.u32[1];
      v66 = vorrq_s8((int8x16_t)vshlq_u64(v67, v76), v66);
      v69 = vorrq_s8((int8x16_t)vshlq_u64(v67, v75), v69);
      v65 += 2;
      v68 -= 4;
    }
    while (v68);
    v77 = vorrq_s8(v69, v66);
    v62 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
    if (v64 == (v64 & 0x7FFFFFFFFFFFFFFCLL))
      goto LABEL_67;
  }
  else
  {
    v62 = 0;
    v63 = (int *)v60;
  }
  do
  {
    v78 = *v63++;
    v79 = -(v78 >> 1) & 0x3F;
    v80 = (v78 >> 1) & 0x3F;
    if (v78 >> 1 <= 0)
      v80 = -v79;
    *(_QWORD *)&v62 |= 1 << v80;
  }
  while (v63 != (int *)v59);
LABEL_67:
  v82 = *(int8x8_t **)(v3 + 360);
  v81 = *(_QWORD *)(v3 + 368);
  if ((unint64_t)v82 < v81)
  {
    *v82 = v62;
    v83 = (uint64_t)&v82[1];
    goto LABEL_89;
  }
  v84 = *(int8x8_t **)(v3 + 352);
  v85 = v82 - v84;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v87 = v81 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (!v88)
  {
    v89 = 0;
    v90 = (int8x8_t *)(8 * v85);
    v91 = 0;
    *(int8x8_t *)(8 * v85) = v62;
    v83 = 8 * v85 + 8;
    v92 = (char *)v82 - (char *)v84;
    if (v82 != v84)
      goto LABEL_78;
LABEL_81:
    v3 = v103;
    goto LABEL_87;
  }
  if (v88 >> 61)
LABEL_91:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v89 = operator new(8 * v88);
  v90 = (int8x8_t *)&v89[8 * v85];
  v91 = &v89[8 * v88];
  *v90 = v62;
  v83 = (uint64_t)&v90[1];
  v92 = (char *)v82 - (char *)v84;
  if (v82 == v84)
    goto LABEL_81;
LABEL_78:
  v93 = v92 - 8;
  if (v93 < 0x58)
  {
    v3 = v103;
    do
    {
LABEL_86:
      v101 = v82[-1];
      --v82;
      v90[-1] = v101;
      --v90;
    }
    while (v82 != v84);
    goto LABEL_87;
  }
  v3 = v103;
  if ((unint64_t)((char *)v84 - v89) < 0x20)
    goto LABEL_86;
  v94 = (v93 >> 3) + 1;
  v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
  v96 = &v82[v95 / 0xFFFFFFFFFFFFFFF8];
  v90 = (int8x8_t *)((char *)v90 - v95);
  v97 = &v89[8 * v85 - 16];
  v98 = v82 - 2;
  v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v100 = *(_OWORD *)v98->i8;
    *(v97 - 1) = *(_OWORD *)v98[-2].i8;
    *v97 = v100;
    v97 -= 2;
    v98 -= 4;
    v99 -= 4;
  }
  while (v99);
  v82 = v96;
  if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_86;
LABEL_87:
  *(_QWORD *)(v3 + 352) = v90;
  *(_QWORD *)(v3 + 360) = v83;
  *(_QWORD *)(v3 + 368) = v91;
  if (v84)
    operator delete(v84);
LABEL_89:
  *(_QWORD *)(v3 + 360) = v83;
}

void sub_22DC0297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::VariableMapping(operations_research::sat::SatPresolver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = 0;
  v3 = *((_QWORD *)this + 52);
  if ((int)((unint64_t)(*((_QWORD *)this + 53) - v3) >> 3) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
    do
    {
      if (*(int *)(v3 + (v5 >> 30)) <= 0 && *(int *)(v3 + 4 * v7) < 1)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)a2, &operations_research::sat::kNoBooleanVariable);
      }
      else
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)a2, &v8);
        ++v8;
      }
      ++v6;
      v3 = *((_QWORD *)this + 52);
      v7 += 2;
      v5 += 0x200000000;
    }
    while (v6 < (int)((unint64_t)(*((_QWORD *)this + 53) - v3) >> 3));
  }
}

void sub_22DC02A78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::LoadProblemIntoSatSolver(operations_research::sat::SatPresolver *this, operations_research::sat::SatSolver *a2)
{
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  unint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  int *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v47;
  int *v48;
  void *__p;
  _BYTE *v50;

  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  *((_QWORD *)this + 33) = 0;
  v3 = (void **)*((_QWORD *)this + 36);
  v4 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 40) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v6 = *((_QWORD *)this + 37);
      v3 = (void **)(*((_QWORD *)this + 36) + 8);
      *((_QWORD *)this + 36) = v3;
      v5 = v6 - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v7 = 512;
  }
  else
  {
    if (v5 >> 3 != 2)
      goto LABEL_8;
    v7 = 1024;
  }
  *((_QWORD *)this + 39) = v7;
LABEL_8:
  v9 = *((_QWORD *)this + 49);
  v8 = *((_QWORD *)this + 50);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 50);
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v8 - 16) = v11;
        operator delete(v11);
      }
      v8 = v10;
    }
    while (v10 != v9);
  }
  *((_QWORD *)this + 50) = v9;
  *((_QWORD *)this + 45) = *((_QWORD *)this + 44);
  operations_research::sat::SatPresolver::VariableMapping(this, &__p);
  if (__p == v50)
  {
    v14 = 0;
  }
  else
  {
    v13 = v50 - (_BYTE *)__p - 4;
    if (v13 < 0x1C)
    {
      v14 = 0;
      v15 = (int *)__p;
      goto LABEL_20;
    }
    v16 = (v13 >> 2) + 1;
    v15 = (int *)((char *)__p + 4 * (v16 & 0x7FFFFFFFFFFFFFF8));
    v17 = (int32x4_t *)((char *)__p + 16);
    v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    v21 = 0uLL;
    do
    {
      v18 = vsubq_s32(v18, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v17[-1], v19)));
      v21 = vsubq_s32(v21, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v17, v19)));
      v17 += 2;
      v20 -= 8;
    }
    while (v20);
    v14 = vaddvq_s32(vaddq_s32(v21, v18));
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_20:
        v22 = *v15++;
        if (v22 != -1)
          ++v14;
      }
      while (v15 != (int *)v50);
    }
  }
  v48 = 0;
  operations_research::sat::SatSolver::SetNumVariables(a2, v14);
  v23 = *((_QWORD *)this + 41);
  v47 = *((_QWORD *)this + 42);
  if (v23 == v47)
    goto LABEL_65;
  v24 = 0;
  v25 = 0;
  while (2)
  {
    v26 = *(int **)v23;
    v27 = *(int **)(v23 + 8);
    v28 = v24;
    if (*(int **)v23 == v27)
    {
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      if (v26)
        goto LABEL_62;
      goto LABEL_25;
    }
    do
    {
      while (1)
      {
        v29 = *v26 & 1 | (2 * *((_DWORD *)__p + (*v26 >> 1)));
        if (v28 >= v25)
          break;
        *v28++ = v29;
        if (++v26 == v27)
          goto LABEL_59;
      }
      v30 = v48;
      v31 = v28 - v48;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (((char *)v25 - (char *)v48) >> 1 > v32)
        v32 = ((char *)v25 - (char *)v48) >> 1;
      if ((unint64_t)((char *)v25 - (char *)v48) >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
      {
        if (v33 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = operator new(4 * v33);
        v35 = (int *)&v34[4 * v31];
        *v35 = v29;
        v36 = (uint64_t)(v35 + 1);
        if (v28 == v48)
          goto LABEL_45;
      }
      else
      {
        v34 = 0;
        v35 = (int *)(4 * v31);
        *(_DWORD *)(4 * v31) = v29;
        v36 = 4 * v31 + 4;
        if (v28 == v48)
          goto LABEL_45;
      }
      v37 = (char *)(v28 - 1) - (char *)v48;
      if (v37 < 0xBC)
      {
        v38 = v28;
        goto LABEL_44;
      }
      if (&v34[(char *)v28 - (char *)v48 - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v34[(char *)v28 - (char *)v48 - 4])
      {
        v38 = v28;
        do
        {
LABEL_44:
          v39 = *--v38;
          *--v35 = v39;
        }
        while (v38 != v48);
        goto LABEL_45;
      }
      if ((int *)((char *)v28 - (v37 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v28 - 1)
      {
        v38 = v28;
        goto LABEL_44;
      }
      if ((unint64_t)((char *)v48 - v34) < 0x20)
      {
        v38 = v28;
        goto LABEL_44;
      }
      v40 = (v37 >> 2) + 1;
      v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      v38 = &v28[v41 / 0xFFFFFFFFFFFFFFFCLL];
      v35 = (int *)((char *)v35 - v41);
      v42 = &v34[4 * v31 - 16];
      v43 = v28 - 4;
      v44 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v45 = *(_OWORD *)v43;
        *(v42 - 1) = *((_OWORD *)v43 - 1);
        *v42 = v45;
        v42 -= 2;
        v43 -= 8;
        v44 -= 8;
      }
      while (v44);
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_44;
LABEL_45:
      v25 = (int *)&v34[4 * v33];
      v48 = v35;
      if (v30)
        operator delete(v30);
      v28 = (int *)v36;
      ++v26;
    }
    while (v26 != v27);
LABEL_59:
    v24 = v48;
    if (v48 != v28)
      operations_research::sat::SatSolver::AddProblemClause(a2, v48, v28 - v48);
    v26 = *(int **)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    if (v26)
LABEL_62:
      operator delete(v26);
LABEL_25:
    v23 += 24;
    if (v23 != v47)
      continue;
    break;
  }
  if (v24)
    operator delete(v24);
LABEL_65:
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
}

void sub_22DC02EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatPresolver::ProcessAllClauses(operations_research::sat::SatPresolver *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  absl::lts_2020_02_25 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v25;
  absl::lts_2020_02_25 *v26;
  double v27;
  double v28;
  _QWORD *v29;
  uint64_t v31[2];

  v2 = *((_QWORD *)this + 39);
  v3 = *((_QWORD *)this + 36);
  v4 = *((_QWORD *)this + 37);
  v5 = (char *)(v3 + 8 * (v2 >> 10));
  if (v4 == v3)
  {
    v6 = 0;
    v10 = 0;
    v7 = (_QWORD *)((char *)this + 320);
    v9 = (char *)(v3 + 8 * ((*((_QWORD *)this + 40) + v2) >> 10));
    v31[0] = (uint64_t)this;
  }
  else
  {
    v6 = (int *)(*(_QWORD *)v5 + 4 * (v2 & 0x3FF));
    v7 = (_QWORD *)((char *)this + 320);
    v8 = *((_QWORD *)this + 40) + v2;
    v9 = (char *)(v3 + 8 * (v8 >> 10));
    v10 = *(_QWORD *)v9 + 4 * (v8 & 0x3FF);
    v31[0] = (uint64_t)this;
    if ((int *)v10 != v6)
    {
      v11 = ((uint64_t)(v10 - *(_QWORD *)v9) >> 2) + ((v9 - v5) << 7);
      v12 = ((uint64_t)v6 - *(_QWORD *)v5) >> 2;
      if (v11 != v12)
      {
        v13 = 63 - __clz(v11 - v12);
        goto LABEL_8;
      }
    }
  }
  v13 = 0;
LABEL_8:
  v14 = 1;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v5, v6, v9, v10, v31, 2 * v13, 1);
  if (!*v7)
    return v14;
  v15 = 0;
  while (1)
  {
    v16 = (void **)*((_QWORD *)this + 36);
    v17 = (*(int **)((char *)v16 + ((*((_QWORD *)this + 39) >> 7) & 0x1FFFFFFFFFFFFF8)))[*((_QWORD *)this + 39) & 0x3FFLL];
    *(_QWORD *)(*((_QWORD *)this + 32) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
    v18 = *((_QWORD *)this + 40) - 1;
    v19 = *((_QWORD *)this + 39) + 1;
    *((_QWORD *)this + 39) = v19;
    *((_QWORD *)this + 40) = v18;
    if (v19 >= 0x800)
    {
      operator delete(*v16);
      *((_QWORD *)this + 36) += 8;
      *((_QWORD *)this + 39) -= 1024;
    }
    v20 = (absl::lts_2020_02_25 *)operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthers(this, v17);
    v14 = (uint64_t)v20;
    if (!(_DWORD)v20)
      return v14;
    if (v15 < 999)
    {
      ++v15;
      goto LABEL_11;
    }
    if ((uint64_t)(*((_QWORD *)this + 48) + *((_QWORD *)this + 47)) >= 1000000001)
      break;
    v21 = *((_QWORD *)this + 133);
    if (!v21)
      goto LABEL_25;
    v22 = *(unsigned __int8 **)(v21 + 120);
    if (v22)
    {
      v23 = atomic_load(v22);
      if ((v23 & 1) != 0)
        return v14;
    }
    if (fmax(*(double *)(v21 + 104) - *(double *)(v21 + 112), 0.0) <= 0.0)
      return v14;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v20);
    v25 = *(_QWORD *)(v21 + 24) <= CurrentTimeNanos - *(_QWORD *)(v21 + 8)
        ? CurrentTimeNanos - *(_QWORD *)(v21 + 8)
        : *(_QWORD *)(v21 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v21 + 32), v25);
    *(_QWORD *)(v21 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8 * *(int *)(v21 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v21 + 16))
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_36;
      v27 = *(double *)(v21 + 96);
      if (*(_BYTE *)(v21 + 72))
      {
        v28 = v27
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v26) - *(_QWORD *)(v21 + 80) + *(_QWORD *)(v21 + 88))
            * -0.000000001;
        if (v28 <= 0.0001)
          goto LABEL_36;
      }
      else
      {
        v28 = v27 + (double)*(uint64_t *)(v21 + 88) * -0.000000001;
        if (v28 <= 0.0001)
        {
LABEL_36:
          *(_QWORD *)(v21 + 16) = 0;
          return 1;
        }
      }
      v15 = 0;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v21 + 8) + (uint64_t)(v28 * 1000000000.0);
    }
    else
    {
LABEL_25:
      v15 = 0;
    }
LABEL_11:
    if (!*v7)
      return v14;
  }
  if (*operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__[0] < 1)
    return 1;
  if (operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__[0] != &google::kLogSiteUninitialized
    || (v14 = 1,
        google::InitVLOG3__((google *)operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 307);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Aborting ProcessAllClauses() because work limit has been reached", 64);
    google::LogMessage::~LogMessage((google::LogMessage *)v31);
    return 1;
  }
  return v14;
}

void sub_22DC0328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthers(operations_research::sat::SatPresolver *this, int a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int **v5;
  int *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int **v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  std::vector<int> *v22;
  std::vector<int>::pointer begin;
  int *end;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _QWORD *v33;
  int *v34;
  int *v35;
  unint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int8x8_t v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int *v55;
  size_t v56;
  uint64_t v57;
  int32x2_t *v58;
  int8x16_t v59;
  uint64_t v60;
  int8x16_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  int8x16_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  char v85;
  uint64_t v86;
  double *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  size_t v91;
  int *v92;
  std::vector<int>::pointer *p_end;
  uint64_t v94;
  uint64_t v95;
  int **v96;

  v2 = *(int **)(*((_QWORD *)this + 41) + 24 * a2);
  v3 = *((_QWORD *)this + 41) + 24 * a2;
  v6 = *(int **)(v3 + 8);
  v5 = (int **)(v3 + 8);
  v4 = v6;
  if (v2 == v6)
    return 1;
  v96 = (int **)(*((_QWORD *)this + 41) + 24 * a2);
  v9 = a2;
  v10 = *v2;
  v11 = *((_QWORD *)this + 52);
  v12 = *(_DWORD *)(v11 + 4 * v10);
  do
  {
    v14 = *v2++;
    v13 = v14;
    v15 = *(_DWORD *)(v11 + 4 * v14);
    if (v15 < v12)
    {
      LODWORD(v10) = v13;
      v12 = v15;
    }
  }
  while (v2 != v4);
  result = operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(this, a2, v10);
  if ((_DWORD)result)
  {
    v17 = v96;
    v18 = *v96;
    if (*v96 != *v5)
    {
      v19 = 0x7FFFFFFF;
      v20 = -1;
      do
      {
        v21 = *v18;
        if ((_DWORD)v21 != (_DWORD)v10 && *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v21) < v19)
        {
          v19 = *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v21);
          v20 = *v18;
        }
        ++v18;
      }
      while (v18 != *v5);
      if (v20 != -1
        && *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v20) < *(_DWORD *)(*((_QWORD *)this + 52) + 4 * ((int)v10 ^ 1)))
      {
        return operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(this, a2, v20);
      }
    }
    v22 = (std::vector<int> *)(*((_QWORD *)this + 49) + 24 * (int)(v10 ^ 1));
    begin = v22->__begin_;
    end = v22->__end_;
    p_end = &v22->__end_;
    if (v22->__begin_ != end)
    {
      v25 = 0;
      v26 = 0;
      v27 = *(_QWORD *)(*((_QWORD *)this + 44) + 8 * v9);
      v94 = v27;
      v95 = *((_QWORD *)this + 49) + 24 * (int)(v10 ^ 1);
      while (1)
      {
        v28 = *begin;
        v29 = *(_QWORD *)(*((_QWORD *)this + 44) + 8 * *begin);
        if (v29)
        {
          if ((v27 & ~v29) == 0)
          {
            v30 = *((_QWORD *)this + 41);
            v31 = v30 + 24 * v28;
            v34 = *(int **)(v31 + 8);
            v33 = (_QWORD *)(v31 + 8);
            v32 = v34;
            v35 = *(int **)(v30 + 24 * v28);
            v36 = v34 - v35;
            v37 = *v5;
            v38 = *v17;
            v39 = *v5 - *v17;
            if (v36 >= v39)
            {
              *((_QWORD *)this + 48) += v39 + v36;
              if (v38 == v37)
              {
LABEL_34:
                if (v35 == v32)
                  return 0;
              }
              else
              {
                v40 = 0;
                v41 = v36 - v39;
                v42 = v35 + 1;
                while (1)
                {
                  while (1)
                  {
                    v43 = v35[v40];
                    v44 = *v38;
                    if (*v38 != v43)
                      break;
                    ++v38;
                    ++v40;
                    ++v42;
                    if (v38 == v37)
                      goto LABEL_34;
                  }
                  if (v44 == (v43 ^ 1))
                    break;
                  if (v44 < v43 || v41 < 1)
                    goto LABEL_19;
                  --v41;
                  ++v40;
                  ++v42;
                  if (v38 == v37)
                    goto LABEL_34;
                }
                while (++v38 != v37)
                {
                  while (1)
                  {
                    v52 = *v42++;
                    v51 = v52;
                    v53 = *v38;
                    if (*v38 == v52)
                      break;
                    if (v53 == (v51 ^ 1))
                      goto LABEL_19;
                    if (v53 < v51 || v41 < 1)
                      goto LABEL_19;
                    --v41;
                    if (v38 == v37)
                      goto LABEL_48;
                  }
                }
LABEL_48:
                v55 = &v35[v40];
                v56 = (char *)v32 - (char *)(v55 + 1);
                if (v32 != v55 + 1)
                {
                  v91 = (char *)v32 - (char *)(v55 + 1);
                  v92 = v55;
                  memmove(v55, v55 + 1, v56);
                  v56 = v91;
                  v55 = v92;
                  v27 = v94;
                  v22 = (std::vector<int> *)v95;
                  v17 = v96;
                  v30 = *((_QWORD *)this + 41);
                  v35 = *(int **)(v30 + 24 * v28);
                }
                *v33 = (char *)v55 + v56;
                v32 = *(int **)(v30 + 24 * v28 + 8);
                if (v35 == v32)
                  return 0;
              }
              v46 = *((_QWORD *)this + 132);
              if (v46)
              {
                operations_research::sat::DratProofHandler::AddClause(v46, v35, v32 - v35);
                v27 = v94;
                v22 = (std::vector<int> *)v95;
                v17 = v96;
                v47 = *((_QWORD *)this + 41) + 24 * v28;
                v35 = *(int **)v47;
                v32 = *(int **)(v47 + 8);
              }
              if (v35 == v32)
              {
                v49 = 0;
              }
              else
              {
                v48 = (char *)v32 - (char *)v35 - 4;
                if (v48 >= 0xC)
                {
                  v57 = (v48 >> 2) + 1;
                  v50 = &v35[v57 & 0x7FFFFFFFFFFFFFFCLL];
                  v58 = (int32x2_t *)(v35 + 2);
                  v59 = 0uLL;
                  v60 = v57 & 0x7FFFFFFFFFFFFFFCLL;
                  v61 = 0uLL;
                  do
                  {
                    v62 = v58[-1];
                    v63 = vshr_n_s32(v62, 1uLL);
                    v64 = vshr_n_s32(*v58, 1uLL);
                    v65 = vsub_s32(v63, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v63, (uint32x2_t)vcltz_s32(v62), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                    v66 = vsub_s32(v64, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v64, (uint32x2_t)vcltz_s32(*v58), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                    v67.i64[0] = v65.u32[0];
                    v67.i64[1] = v65.u32[1];
                    v68 = v67;
                    v67.i64[0] = v66.u32[0];
                    v67.i64[1] = v66.u32[1];
                    v69 = (uint64x2_t)vdupq_n_s64(1uLL);
                    v59 = vorrq_s8((int8x16_t)vshlq_u64(v69, v68), v59);
                    v61 = vorrq_s8((int8x16_t)vshlq_u64(v69, v67), v61);
                    v58 += 2;
                    v60 -= 4;
                  }
                  while (v60);
                  v70 = vorrq_s8(v61, v59);
                  v49 = vorr_s8(*(int8x8_t *)v70.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
                  if (v57 != (v57 & 0x7FFFFFFFFFFFFFFCLL))
                    goto LABEL_56;
                }
                else
                {
                  v49 = 0;
                  v50 = v35;
                  do
                  {
LABEL_56:
                    v71 = *v50++;
                    v72 = -(v71 >> 1) & 0x3F;
                    v73 = (v71 >> 1) & 0x3F;
                    if (v71 >> 1 <= 0)
                      v73 = -v72;
                    *(_QWORD *)&v49 |= 1 << v73;
                  }
                  while (v50 != v32);
                }
              }
              *(int8x8_t *)(*((_QWORD *)this + 44) + 8 * v28) = v49;
              v74 = *((_QWORD *)this + 32);
              v26 = 1;
              v75 = *(_QWORD *)(v74 + 8 * ((unint64_t)v28 >> 6));
              if ((v75 & (1 << v28)) == 0)
              {
                v76 = *((_QWORD *)this + 37);
                v77 = *((_QWORD *)this + 36);
                *(_QWORD *)(v74 + 8 * ((unint64_t)v28 >> 6)) = v75 | (1 << v28);
                if (v76 == v77)
                  v78 = 0;
                else
                  v78 = ((v76 - v77) << 7) - 1;
                v79 = *((_QWORD *)this + 40);
                v80 = v79 + *((_QWORD *)this + 39);
                if (v78 == v80)
                {
                  std::deque<int>::__add_back_capacity((uint64_t)this + 280);
                  v27 = v94;
                  v22 = (std::vector<int> *)v95;
                  v17 = v96;
                  v77 = *((_QWORD *)this + 36);
                  v79 = *((_QWORD *)this + 40);
                  v80 = *((_QWORD *)this + 39) + v79;
                }
                *(_DWORD *)(*(_QWORD *)(v77 + ((v80 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v80 & 0x3FF)) = v28;
                *((_QWORD *)this + 40) = v79 + 1;
                v26 = 1;
              }
              goto LABEL_20;
            }
          }
LABEL_19:
          v22->__begin_[v25++] = v28;
        }
LABEL_20:
        if (++begin == end)
        {
          v81 = (int)v10 ^ 1;
          begin = v22->__begin_;
          v82 = v25;
          v83 = *p_end - v22->__begin_;
          v84 = v25 >= v83;
          if (v25 <= v83)
            goto LABEL_69;
          v85 = v26;
          std::vector<int>::__append(v22, v25 - v83);
          v26 = v85;
          goto LABEL_71;
        }
      }
    }
    v26 = 0;
    v25 = 0;
    v81 = (int)v10 ^ 1;
    v82 = 0;
    v84 = 1;
LABEL_69:
    if (!v84)
      *p_end = &begin[v82];
LABEL_71:
    v86 = *((_QWORD *)this + 52);
    *(_DWORD *)(v86 + 4 * v81) = v25;
    if ((v26 & 1) != 0 && *(_QWORD *)this != *((_QWORD *)this + 1))
    {
      v87 = (double *)(*(_QWORD *)this + 16 * ((int)v10 >> 1));
      v87[1] = (double)(*(_DWORD *)(v86 + ((4 * (int)v10) | 4))
                      + *(_DWORD *)(v86 + 4 * ((int)v10 & 0x3FFFFFFFFFFFFFFELL)));
      v88 = (_QWORD *)((char *)this + 24);
      v89 = *(unsigned int *)v87;
      if ((v89 & 0x80000000) == 0
        && (v90 = *((_QWORD *)this + 4), v89 < (*((_QWORD *)this + 5) - v90) >> 3)
        && *(double **)(v90 + 8 * v89) == v87)
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v88, (uint64_t)v87);
      }
      else
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v88, (uint64_t)v87);
      }
    }
    return 1;
  }
  return result;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::sat::SatPresolver::Presolve(uint64_t a1, uint64_t a2, int a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  _BOOL8 inited;
  BOOL v8;
  char v9;
  int v10;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  absl::lts_2020_02_25 *v26;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int **v44;
  uint64_t v45;
  unint64_t v46;
  double v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 v55;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v56;
  uint64_t v57;
  double v58;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v59;
  absl::lts_2020_02_25 *v60;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v61;
  int v62;
  _BYTE v63[16];

  if (*operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__ < 1)
  {
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
LABEL_6:
    if (!a3)
    {
      v9 = operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
      v10 = 0;
      result = 0;
      if ((v9 & 1) == 0)
        return result;
      v12 = *(_QWORD *)(a1 + 1064);
      if (!v12)
        goto LABEL_40;
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__ != &google::kLogSiteUninitialized)
  {
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
    goto LABEL_10;
  }
  inited = google::InitVLOG3__((google *)&operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1);
  v8 = inited;
  CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  if (!v8)
    goto LABEL_6;
LABEL_10:
  v13 = *(_QWORD *)(a2 + 8);
  v14 = v13 & 0x3F;
  if (v13 > 0x3F || v14 != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD **)a2;
    v20 = *(_QWORD *)a2 + 8 * (v13 >> 6);
    do
    {
      v17 += (*v19 >> v18) & 1;
      v21 = v18 + 1;
      v19 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        v16 = v21;
      v22 = v19 == (_QWORD *)v20 && v14 == v16;
      v18 = v16;
    }
    while (!v22);
  }
  google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 336);
  v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"num removable Booleans: ", 24);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" / ", 3);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v63);
  google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 338);
  v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"num trivial clauses: ", 21);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v63);
  operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, 0.0);
  v26 = (absl::lts_2020_02_25 *)operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
  if ((v26 & 1) == 0)
    return 0;
  v27 = absl::lts_2020_02_25::GetCurrentTimeNanos(v26);
  operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v27 - CurrentTimeNanos) * 0.000000001);
  v10 = 1;
  v12 = *(_QWORD *)(a1 + 1064);
  if (!v12)
    goto LABEL_40;
LABEL_25:
  v28 = *(unsigned __int8 **)(v12 + 120);
  if (!v28 || (v29 = atomic_load(v28), (v29 & 1) == 0))
  {
    if (fmax(*(double *)(v12 + 104) - *(double *)(v12 + 112), 0.0) > 0.0)
    {
      v30 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      if (*(_QWORD *)(v12 + 24) <= v30 - *(_QWORD *)(v12 + 8))
        v31 = v30 - *(_QWORD *)(v12 + 8);
      else
        v31 = *(_QWORD *)(v12 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v12 + 32), v31);
      *(_QWORD *)(v12 + 8) = v30;
      if (*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8 * *(int *)(v12 + 68)) + v30 >= *(_QWORD *)(v12 + 16))
      {
        if (!FLAGS_time_limit_use_usertime
          || ((v32 = *(double *)(v12 + 96), !*(_BYTE *)(v12 + 72))
            ? (v33 = *(_QWORD *)(v12 + 88))
            : (result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result),
               v33 = result - *(_QWORD *)(v12 + 80) + *(_QWORD *)(v12 + 88)),
              v34 = v32 + (double)v33 * -0.000000001,
              v34 <= 0.0001))
        {
          *(_QWORD *)(v12 + 16) = 0;
          return 1;
        }
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 8) + (uint64_t)(v34 * 1000000000.0);
      }
LABEL_40:
      if ((uint64_t)(*(_QWORD *)(a1 + 384) + *(_QWORD *)(a1 + 376)) > 1000000000)
        return 1;
      v35 = *(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416);
      v36 = (int)(v35 >> 3);
      v37 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
      v62 = v10;
      if (v36 <= v37)
      {
        if (v36 < v37)
          *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * v36;
      }
      else
      {
        std::vector<operations_research::sat::SatPresolver::PQElement>::__append((uint64_t *)a1, v36 - v37);
      }
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        v38 = 0;
        v39 = 0;
        v40 = 1;
        v41 = 4;
        do
        {
          v42 = *(_QWORD *)a1;
          v43 = (_DWORD *)(*(_QWORD *)a1 + v41);
          *v43 = v39;
          *(double *)(v42 + 8 * v40) = (double)(*(_DWORD *)(*(_QWORD *)(a1 + 416) + 4 * (int)v40)
                                              + *(_DWORD *)(*(_QWORD *)(a1 + 416) + (v38 >> 30)));
          AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add((_QWORD *)(a1 + 24), (uint64_t)(v43 - 1));
          ++v39;
          v40 += 2;
          v38 += 0x200000000;
          v41 += 16;
        }
        while (((unint64_t)v35 >> 3) != v39);
      }
      v44 = *(int ***)(a1 + 32);
      v45 = *(_QWORD *)(a1 + 40);
      v46 = (unint64_t)(v45 - (_QWORD)v44) >> 3;
      if ((int)v46 >= 1)
      {
        do
        {
          v48 = v46 - 1;
          v49 = **v44;
          v50 = (*v44)[1];
          if (v49 == v48)
          {
            *(_QWORD *)(a1 + 40) = v45 - 8;
            if (((*(_QWORD *)(*(_QWORD *)a2 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
              goto LABEL_73;
          }
          else
          {
            v51 = 8 * v49;
            v44[(unint64_t)v51 / 8] = v44[v48];
            v52 = *(_QWORD *)(a1 + 32);
            **(_DWORD **)(v52 + v51) = v49;
            *(_QWORD *)(a1 + 40) -= 8;
            result = AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority(a1 + 24, *(_QWORD *)(v52 + v51));
            if (((*(_QWORD *)(*(_QWORD *)a2 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
              goto LABEL_73;
          }
          result = operations_research::sat::SatPresolver::CrossProduct(a1, 2 * (int)v50);
          if ((_DWORD)result)
          {
            result = operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
            if (!(_DWORD)result)
              return result;
          }
          v53 = *(_QWORD *)(a1 + 1064);
          if (v53)
          {
            v54 = *(unsigned __int8 **)(v53 + 120);
            if (v54)
            {
              v55 = atomic_load(v54);
              if ((v55 & 1) != 0)
                return 1;
            }
            if (fmax(*(double *)(v53 + 104) - *(double *)(v53 + 112), 0.0) <= 0.0)
              return 1;
            v56 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
            v57 = *(_QWORD *)(v53 + 24) <= v56 - *(_QWORD *)(v53 + 8)
                ? v56 - *(_QWORD *)(v53 + 8)
                : *(_QWORD *)(v53 + 24);
            operations_research::RunningMax<long long>::Add((int *)(v53 + 32), v57);
            *(_QWORD *)(v53 + 8) = v56;
            if (*(_QWORD *)(*(_QWORD *)(v53 + 40) + 8 * *(int *)(v53 + 68)) + v56 >= *(_QWORD *)(v53 + 16))
            {
              if (!FLAGS_time_limit_use_usertime)
                goto LABEL_79;
              v58 = *(double *)(v53 + 96);
              if (*(_BYTE *)(v53 + 72))
              {
                result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
                v47 = v58 + (double)(result - *(_QWORD *)(v53 + 80) + *(_QWORD *)(v53 + 88)) * -0.000000001;
                if (v47 <= 0.0001)
                {
LABEL_79:
                  *(_QWORD *)(v53 + 16) = 0;
                  return 1;
                }
              }
              else
              {
                v47 = v58 + (double)*(uint64_t *)(v53 + 88) * -0.000000001;
                if (v47 <= 0.0001)
                  goto LABEL_79;
              }
              *(_QWORD *)(v53 + 16) = *(_QWORD *)(v53 + 8) + (uint64_t)(v47 * 1000000000.0);
            }
          }
          if ((uint64_t)(*(_QWORD *)(a1 + 384) + *(_QWORD *)(a1 + 376)) > 1000000000)
            return 1;
LABEL_73:
          v44 = *(int ***)(a1 + 32);
          v45 = *(_QWORD *)(a1 + 40);
          v46 = (unint64_t)(v45 - (_QWORD)v44) >> 3;
        }
        while ((int)v46 > 0);
      }
      if (v62)
      {
        v59 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v59 - CurrentTimeNanos) * 0.000000001);
        if (*(_BYTE *)(a1 + 873))
        {
          operations_research::sat::SatPresolver::PresolveWithBva((operations_research::sat::SatPresolver *)a1);
          v61 = absl::lts_2020_02_25::GetCurrentTimeNanos(v60);
          operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v61 - CurrentTimeNanos) * 0.000000001);
        }
      }
      else if (*(_BYTE *)(a1 + 873))
      {
        operations_research::sat::SatPresolver::PresolveWithBva((operations_research::sat::SatPresolver *)a1);
      }
    }
  }
  return 1;
}

void sub_22DC03EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DC03ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatPresolver::DisplayStats(operations_research::sat::SatPresolver *this, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE v31[16];

  v2 = (uint64_t *)*((_QWORD *)this + 41);
  v3 = (uint64_t *)*((_QWORD *)this + 42);
  if (v2 == v3)
  {
    v10 = *((_QWORD *)this + 52);
    v11 = *((_QWORD *)this + 53) - v10;
    if ((int)(v11 >> 3) < 1)
      goto LABEL_26;
    goto LABEL_10;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *v2;
    v8 = v2[1];
    v2 += 3;
    if (v8 - v7 == 4)
      v9 = v6 + 1;
    else
      v9 = v6;
    if (v7 != v8)
    {
      v6 = v9;
      ++v5;
      v4 += (unint64_t)(v8 - v7) >> 2;
    }
  }
  while (v2 != v3);
  v10 = *((_QWORD *)this + 52);
  v11 = *((_QWORD *)this + 53) - v10;
  if ((int)(v11 >> 3) >= 1)
  {
LABEL_10:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 2 * (v11 >> 3);
    do
    {
      v18 = *(_DWORD *)(v10 + (v12 >> 30));
      v19 = *(_DWORD *)(v10 + 4 * ((int)v13 + 1));
      if (v18 | v19)
      {
        ++v16;
        if (v18 == 1 || v19 == 1)
          v21 = v15 + 1;
        else
          v21 = v15;
        if (v18)
          v22 = v19 == 0;
        else
          v22 = 1;
        if (v22)
          ++v14;
        else
          v15 = v21;
      }
      v13 += 2;
      v12 += 0x200000000;
    }
    while (v17 != v13);
  }
LABEL_26:
  google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 923);
  v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" [", 2);
  v24 = (_QWORD *)std::ostream::operator<<();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"s]", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" clauses:", 9);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" literals:", 10);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" vars:", 6);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" one_side_vars:", 15);
  v29 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" simple_definition:", 19);
  v30 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" singleton_clauses:", 19);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v31);
}

void sub_22DC040F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatPresolver::CrossProduct(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  BOOL v8;
  int v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  char **v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int **v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int **v62;
  int *v63;
  int *v64;
  uint64_t v65;
  int *v66;
  int *v67;
  char v68;
  char **v69;
  char *v70;
  char *v71;
  int v72;
  int *v73;
  int v74;
  int v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  int *v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 416);
  v3 = *(_DWORD *)(v2 + 4 * a2);
  v4 = a2 ^ 1;
  v5 = *(_DWORD *)(v2 + 4 * v4);
  if (!(v3 | v5))
    return 0;
  v8 = v3 < 2 || v5 < 2;
  if (!v8 && v5 * v3 > *(_DWORD *)(a1 + 804))
    return 0;
  v9 = *(_DWORD *)(a1 + 816);
  v10 = *(_QWORD *)(a1 + 392);
  v11 = (char **)(v10 + 24 * a2);
  v12 = *v11;
  v13 = v11[1];
  if (v12 == v13)
  {
    v16 = 0;
    goto LABEL_22;
  }
  v14 = *(_QWORD *)(a1 + 328);
  v15 = v13 - v12 - 4;
  if (v15 < 4)
  {
    v16 = 0;
    v17 = v12;
    do
    {
LABEL_19:
      v32 = *(_DWORD *)v17;
      v17 += 4;
      v33 = v9 + ((*(_QWORD *)(v14 + 24 * v32 + 8) - *(_QWORD *)(v14 + 24 * v32)) >> 2);
      if (*(_QWORD *)(v14 + 24 * v32 + 8) == *(_QWORD *)(v14 + 24 * v32))
        v33 = 0;
      v16 += v33;
    }
    while (v17 != v13);
    goto LABEL_22;
  }
  v18 = 0;
  v19 = 0;
  v20 = (v15 >> 2) + 1;
  v17 = &v12[4 * (v20 & 0x7FFFFFFFFFFFFFFELL)];
  v21 = (int *)(v12 + 4);
  v22 = v20 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v23 = (_QWORD *)(v14 + 24 * *(v21 - 1));
    v24 = (uint64_t *)(v14 + 24 * *v21);
    v26 = *v24;
    v25 = v24[1];
    v28 = v23[1] - *v23;
    v27 = v28 == 0;
    v29 = v9 + (v28 >> 2);
    if (v27)
      v29 = 0;
    v30 = v25 - v26;
    v27 = v30 == 0;
    v31 = v9 + (v30 >> 2);
    if (v27)
      v31 = 0;
    v18 += v29;
    v19 += v31;
    v21 += 2;
    v22 -= 2;
  }
  while (v22);
  v16 = v19 + v18;
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFFELL))
    goto LABEL_19;
LABEL_22:
  v34 = (char **)(v10 + 24 * (int)v4);
  v35 = *v34;
  v36 = v34[1];
  if (v35 != v36)
  {
    v37 = *(_QWORD *)(a1 + 328);
    v38 = v36 - v35 - 4;
    if (v38 >= 4)
    {
      v40 = 0;
      v41 = (v38 >> 2) + 1;
      v39 = &v35[4 * (v41 & 0x7FFFFFFFFFFFFFFELL)];
      v42 = (int *)(v35 + 4);
      v43 = v41 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v44 = (_QWORD *)(v37 + 24 * *(v42 - 1));
        v45 = (uint64_t *)(v37 + 24 * *v42);
        v47 = *v45;
        v46 = v45[1];
        v48 = v44[1] - *v44;
        v27 = v48 == 0;
        v49 = v9 + (v48 >> 2);
        if (v27)
          v49 = 0;
        v50 = v46 - v47;
        v27 = v50 == 0;
        v51 = v9 + (v50 >> 2);
        if (v27)
          v51 = 0;
        v16 += v49;
        v40 += v51;
        v42 += 2;
        v43 -= 2;
      }
      while (v43);
      v16 += v40;
      if (v41 == (v41 & 0x7FFFFFFFFFFFFFFELL))
        goto LABEL_35;
    }
    else
    {
      v39 = v35;
    }
    do
    {
      v52 = *(_DWORD *)v39;
      v39 += 4;
      v53 = v9 + ((*(_QWORD *)(v37 + 24 * v52 + 8) - *(_QWORD *)(v37 + 24 * v52)) >> 2);
      if (*(_QWORD *)(v37 + 24 * v52 + 8) == *(_QWORD *)(v37 + 24 * v52))
        v53 = 0;
      v16 += v53;
    }
    while (v39 != v36);
  }
LABEL_35:
  if (v3 >= v5)
    v54 = a2;
  else
    v54 = a2 ^ 1;
  v55 = (int **)(v10 + 24 * v54);
  v56 = *v55;
  v57 = v55[1];
  if (*v55 == v57)
  {
    __p = 0;
    v87 = 0;
    i = 0;
    goto LABEL_65;
  }
  v58 = 0;
  v59 = v54 ^ 1;
  while (2)
  {
    v60 = *v56;
    v61 = *(_QWORD *)(a1 + 328);
    v62 = (int **)(v61 + 24 * *v56);
    v63 = *v62;
    v64 = v62[1];
    if (v63 == v64)
      goto LABEL_40;
    v65 = *(_QWORD *)(a1 + 392) + 24 * v59;
    v66 = *(int **)v65;
    v67 = *(int **)(v65 + 8);
    if (v66 == v67)
      goto LABEL_62;
    v68 = 1;
    while (2)
    {
      v69 = (char **)(v61 + 24 * *v66);
      v70 = *v69;
      v71 = v69[1];
      if (v70 == v71)
        goto LABEL_44;
      v72 = ((unint64_t)(v71 - v70) >> 2) + ((unint64_t)((char *)v64 - (char *)v63) >> 2) - 2;
      v73 = v63;
      while (1)
      {
        v74 = *(_DWORD *)v70;
        v75 = *v73;
        if (*v73 == *(_DWORD *)v70)
        {
          --v72;
          ++v73;
          v70 += 4;
          if (v73 == v64)
            goto LABEL_58;
          goto LABEL_48;
        }
        if (v75 == (v74 ^ 1))
          break;
        if (v75 < v74)
          ++v73;
        else
          v70 += 4;
        if (v73 == v64)
          goto LABEL_58;
LABEL_48:
        if (v70 == v71)
          goto LABEL_58;
      }
      if (v75 != v54)
        goto LABEL_44;
      ++v73;
      v70 += 4;
      if (v73 != v64)
        goto LABEL_48;
LABEL_58:
      if ((v72 & 0x80000000) == 0)
      {
        v68 = 0;
        result = 0;
        v58 += v9 + v72;
        if (v58 > v16)
          return result;
      }
LABEL_44:
      if (++v66 != v67)
        continue;
      break;
    }
    if ((v68 & 1) != 0)
    {
LABEL_62:
      if (*(_BYTE *)(a1 + 872))
      {
        operations_research::sat::SatPostsolver::Add(*(_QWORD *)(a1 + 440), v54, v63, v64 - v63);
        operations_research::sat::SatPresolver::Remove((operations_research::sat::SatPresolver *)a1, v60);
      }
    }
LABEL_40:
    if (++v56 != v57)
      continue;
    break;
  }
  v76 = *(_QWORD *)(a1 + 392) + 24 * v54;
  v77 = *(int **)v76;
  v78 = *(int **)(v76 + 8);
  __p = 0;
  v87 = 0;
  for (i = 0; v77 != v78; ++v77)
  {
    v79 = *v77;
    v80 = (_QWORD *)(*(_QWORD *)(a1 + 328) + 24 * *v77);
    if (*v80 != v80[1])
    {
      v81 = *(_QWORD *)(a1 + 392) + 24 * v59;
      v82 = *(int **)v81;
      v83 = *(int **)(v81 + 8);
      while (v82 != v83)
      {
        v84 = *(_QWORD *)(a1 + 328);
        v85 = v84 + 24 * *v82;
        if (*(_QWORD *)v85 != *(_QWORD *)(v85 + 8))
        {
          if (operations_research::sat::ComputeResolvant(v54, (char **)(v84 + 24 * v79), (char **)v85, (unint64_t *)&__p))operations_research::sat::SatPresolver::AddClauseInternal(a1, (uint64_t)&__p);
        }
        ++v82;
      }
    }
  }
LABEL_65:
  operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining((operations_research::sat::SatPresolver *)a1, v54);
  operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining((operations_research::sat::SatPresolver *)a1, v54 ^ 1);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_22DC04590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::PresolveWithBva(operations_research::sat::SatPresolver *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  std::vector<int>::value_type v17;
  __int128 v18;

  *((_QWORD *)this + 1) = *(_QWORD *)this;
  v2 = (*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) >> 2;
  v3 = (_QWORD *)((char *)this + 104);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  v18 = 0xFFFFFFFFFFFFFFFFLL;
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::assign((_QWORD *)this + 7, (int)(v2 & 0xFFFFFFFE), &v18);
  if ((int)(v2 & 0xFFFFFFFE) >= 1)
  {
    v4 = 0;
    v5 = v2 & 0xFFFFFFFE;
    do
    {
      v6 = v4 + *((_QWORD *)this + 11);
      v7 = *(_QWORD *)(*((_QWORD *)this + 8) + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8));
      v8 = v7 + 16 * v6;
      *(_DWORD *)(v8 + 4) = v4;
      v9 = *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v4);
      *(double *)(v8 + 8) = (double)v9;
      if (v9 >= 3)
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add(v3, v7 + 16 * v6);
      ++v4;
    }
    while (v5 != v4);
  }
  v10 = (int **)*((_QWORD *)this + 14);
  v11 = *((_QWORD *)this + 15);
  v12 = (unint64_t)(v11 - (_QWORD)v10) >> 3;
  if ((int)v12 >= 1)
  {
    do
    {
      v15 = v12 - 1;
      v16 = **v10;
      v17 = (*v10)[1];
      if (v16 == v15)
      {
        *((_QWORD *)this + 15) = v11 - 8;
      }
      else
      {
        v13 = 8 * v16;
        v10[(unint64_t)v13 / 8] = v10[v15];
        v14 = *((_QWORD *)this + 14);
        **(_DWORD **)(v14 + v13) = v16;
        *((_QWORD *)this + 15) -= 8;
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)v3, *(_QWORD *)(v14 + v13));
      }
      operations_research::sat::SatPresolver::SimpleBva(this, v17);
      v10 = (int **)*((_QWORD *)this + 14);
      v11 = *((_QWORD *)this + 15);
      v12 = (unint64_t)(v11 - (_QWORD)v10) >> 3;
    }
    while ((int)v12 > 0);
  }
}

void operations_research::sat::SatPresolver::SimpleBva(operations_research::sat::SatPresolver *a1, std::vector<int>::value_type a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  operations_research::sat::SatPresolver *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  unint64_t *v10;
  std::vector<int> *v11;
  unsigned int *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int **v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  _QWORD *v38;
  int v39;
  google::LogMessage *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  _OWORD *v58;
  unint64_t *v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t *v63;
  char **v64;
  char *v65;
  char **v66;
  int v67;
  char *v68;
  _QWORD *v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _DWORD *v83;
  unint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  unint64_t *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  operations_research::sat::DratProofHandler *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  BOOL v115;
  int *v116;
  int *v117;
  char **v118;
  uint64_t v119;
  char **v120;
  char *v121;
  int *v122;
  char *v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  int *i;
  int *v128;
  int v129;
  operations_research::sat::SatPresolver *v130;
  uint64_t v131;
  int *v132;
  int *v133;
  int **v134;
  int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  int v140;
  int v141;
  uint64_t v142;
  int *v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int **v149;
  int *v150;
  int *v151;
  int *v152;
  int v153;
  int v154;
  char *v155;
  char *v156;
  _QWORD *v157;
  _QWORD *v158;
  operations_research::sat::SatPresolver *v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  _QWORD **v169;
  int v170;
  char **v171;
  uint64_t *v172;
  _QWORD *v173;
  unint64_t **v174;
  char *v175;
  int *v176;
  std::vector<int> *v177;
  unint64_t v178;
  operations_research::sat::SatPresolver *v179;
  _QWORD *v180;
  unsigned int *v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  std::vector<int>::value_type __x;
  int v189;
  char v190[8];
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 50) - *((_QWORD *)a1 + 49)) >> 3);
  __x = 0;
  v4 = *((_QWORD *)a1 + 23);
  v5 = (*((_QWORD *)a1 + 24) - v4) >> 2;
  v179 = a1;
  v172 = (uint64_t *)((char *)a1 + 184);
  if (v3 <= v5)
  {
    if (v3 < v5)
      *((_QWORD *)a1 + 24) = v4 + 4 * v3;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)a1 + 184), v3 - v5, &__x);
    a1 = v179;
  }
  __x = a2;
  v169 = (_QWORD **)((char *)a1 + 136);
  std::__tree<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::__assign_unique<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const*>((uint64_t)a1 + 136, &__x, &v189);
  v6 = v179;
  v7 = *((_QWORD *)v179 + 49);
  v8 = (char **)(v7 + 24 * a2);
  v171 = (char **)((char *)v179 + 160);
  if ((char **)((char *)v179 + 160) != v8)
  {
    v9 = *(char **)(v7 + 24 * a2 + 8);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v171, *v8, v9, (v9 - *v8) >> 2);
    v6 = v179;
  }
  v10 = (unint64_t *)*((_QWORD *)v6 + 26);
  v11 = (std::vector<int> *)((char *)v6 + 416);
  v180 = (_QWORD *)((char *)v6 + 144);
  *((_QWORD *)v6 + 27) = v10;
  v12 = (unsigned int *)*((_QWORD *)v6 + 20);
  v13 = (char *)*((_QWORD *)v6 + 21);
  v173 = (_QWORD *)((char *)v6 + 392);
  v174 = (unint64_t **)((char *)v6 + 208);
  v177 = (std::vector<int> *)((char *)v6 + 416);
  if (v12 == (unsigned int *)v13)
  {
    v15 = 0;
    v93 = *v174;
    if (*v174 == v10)
      goto LABEL_133;
  }
  else
  {
    v14 = 0;
    while (1)
    {
      v170 = v14;
      v182 = 0;
      v16 = -1;
      v175 = v13;
      do
      {
        v17 = *((_QWORD *)v6 + 41) + 24 * (int)*v12;
        v18 = *(int **)v17;
        v20 = (int **)(v17 + 8);
        v19 = *(int **)(v17 + 8);
        v181 = v12;
        if (*(int **)v17 != v19)
        {
          v21 = 0x7FFFFFFF;
          v22 = -1;
          do
          {
            v23 = *v18;
            if ((_DWORD)v23 != a2 && v11->__begin_[v23] < v21)
            {
              v21 = v11->__begin_[v23];
              v22 = *v18;
            }
            ++v18;
          }
          while (v18 != v19);
          if (v22 != -1)
          {
            v24 = *v173 + 24 * v22;
            v25 = *(int **)v24;
            v26 = *(int **)(v24 + 8);
            if (*(int **)v24 != v26)
            {
              v178 = (unint64_t)*v12 << 32;
              v176 = *(int **)(v24 + 8);
              do
              {
                v31 = *v20;
                v32 = *(int **)v17;
                v33 = *(int **)(*((_QWORD *)v6 + 41) + 24 * *v25);
                v34 = *(int **)(*((_QWORD *)v6 + 41) + 24 * *v25 + 8);
                if ((int *)((char *)*v20 - *(_QWORD *)v17) == (int *)((char *)v34 - (char *)v33))
                {
                  if (v32 != v31)
                  {
                    v35 = -1;
                    do
                    {
                      if (v33 == v34)
                      {
                        if (*v32 != a2)
                          goto LABEL_27;
                        goto LABEL_47;
                      }
                      v36 = *v33;
                      v37 = *v32;
                      if (*v32 == *v33)
                      {
                        ++v32;
                        ++v33;
                      }
                      else if (v37 >= v36)
                      {
                        if (v35 != -1)
                          goto LABEL_27;
                        ++v33;
                        v35 = v36;
                      }
                      else
                      {
                        if (v37 != a2)
                          goto LABEL_27;
                        ++v32;
                      }
                    }
                    while (v32 != v31);
                    if (v33 == v34)
                      goto LABEL_47;
                    if (v35 != -1)
                      goto LABEL_27;
LABEL_41:
                    v35 = *v33;
LABEL_47:
                    if (v35 == -1)
                      goto LABEL_27;
                    v38 = v180;
                    while (1)
                    {
                      v38 = (_QWORD *)*v38;
                      if (!v38)
                        break;
                      v39 = *(_DWORD *)((char *)v38 + 25);
                      if (v35 >= v39)
                      {
                        if (v39 >= v35)
                          goto LABEL_27;
                        ++v38;
                      }
                    }
                    v185 = v16;
                    if (v35 == (a2 ^ 1)
                      && *operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__[0] >= 1)
                    {
                      if (operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
                        || (v6 = v179,
                            v11 = v177,
                            v13 = v175,
                            v26 = v176,
                            google::InitVLOG3__((google *)operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
                      {
                        v40 = google::LogMessage::LogMessage((google::LogMessage *)&__x, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 421);
                        v41 = (_QWORD *)google::LogMessage::stream(v40);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"self-subsumbtion", 16);
                        google::LogMessage::~LogMessage((google::LogMessage *)&__x);
                        v6 = v179;
                        v11 = v177;
                        v13 = v175;
                        v26 = v176;
                      }
                    }
                    v43 = (unint64_t *)*((_QWORD *)v6 + 27);
                    v42 = *((_QWORD *)v6 + 28);
                    if ((unint64_t)v43 < v42)
                    {
                      *v43 = v178 | v35;
                      v10 = v43 + 1;
                    }
                    else
                    {
                      v44 = *v174;
                      v45 = (char *)v43 - (char *)*v174;
                      v46 = v45 >> 3;
                      v47 = (v45 >> 3) + 1;
                      if (v47 >> 61)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v48 = v42 - (_QWORD)v44;
                      if (v48 >> 2 > v47)
                        v47 = v48 >> 2;
                      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                        v49 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v49 = v47;
                      if (v49)
                      {
                        if (v49 >> 61)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v50 = v49;
                        v51 = operator new(8 * v49);
                        v49 = v50;
                        v26 = v176;
                      }
                      else
                      {
                        v51 = 0;
                      }
                      v52 = (unint64_t *)&v51[8 * v46];
                      *v52 = v178 | v35;
                      v10 = v52 + 1;
                      if (v43 == v44)
                      {
                        v6 = v179;
                        *((_QWORD *)v179 + 26) = v52;
                        *((_QWORD *)v179 + 27) = v10;
                        *((_QWORD *)v179 + 28) = &v51[8 * v49];
                        v11 = v177;
                        if (v43)
                          goto LABEL_80;
                      }
                      else
                      {
                        v53 = (char *)(v43 - 1) - (char *)v44;
                        if (v53 < 0x58)
                        {
                          v6 = v179;
                          goto LABEL_78;
                        }
                        v54 = (char *)v43 - &v51[v45];
                        v6 = v179;
                        if (v54 < 0x20)
                          goto LABEL_236;
                        v55 = (v53 >> 3) + 1;
                        v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                        v57 = &v43[v56 / 0xFFFFFFFFFFFFFFF8];
                        v52 = (unint64_t *)((char *)v52 - v56);
                        v58 = &v51[8 * v46 - 16];
                        v59 = v43 - 2;
                        v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v61 = *(_OWORD *)v59;
                          *(v58 - 1) = *((_OWORD *)v59 - 1);
                          *v58 = v61;
                          v58 -= 2;
                          v59 -= 4;
                          v60 -= 4;
                        }
                        while (v60);
                        v43 = v57;
                        if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_236:
                          do
                          {
LABEL_78:
                            v62 = *--v43;
                            *--v52 = v62;
                          }
                          while (v43 != v44);
                        }
                        v43 = *v174;
                        *((_QWORD *)v6 + 26) = v52;
                        *((_QWORD *)v6 + 27) = v10;
                        *((_QWORD *)v6 + 28) = &v51[8 * v49];
                        v11 = v177;
                        if (v43)
                        {
LABEL_80:
                          v63 = v10;
                          operator delete(v43);
                          v10 = v63;
                        }
                      }
                      v13 = v175;
                    }
                    *((_QWORD *)v6 + 27) = v10;
                    v27 = *((_QWORD *)v6 + 23);
                    v28 = 4 * v35;
                    v29 = *(_DWORD *)(v27 + v28);
                    *(_DWORD *)(v27 + v28) = v29 + 1;
                    v30 = v182;
                    v16 = v185;
                    if (v29 >= v182)
                    {
                      v16 = v35;
                      v30 = v29 + 1;
                    }
                    v182 = v30;
                    goto LABEL_27;
                  }
                  if (v33 != v34)
                    goto LABEL_41;
                }
LABEL_27:
                ++v25;
              }
              while (v25 != v26);
            }
          }
        }
        v12 = v181 + 1;
      }
      while (v181 + 1 != (unsigned int *)v13);
      if (v16 == -1)
        break;
      if (~*((_DWORD *)v6 + 38) + v182 * *((_DWORD *)v6 + 38) <= v170)
      {
        v15 = v170;
        v93 = *v174;
        if (*v174 != v10)
          goto LABEL_131;
        goto LABEL_133;
      }
      v183 = ~*((_DWORD *)v6 + 38) + v182 * *((_DWORD *)v6 + 38);
      v64 = (char **)v180;
      v65 = (char *)*v180;
      v66 = (char **)v180;
      v186 = v16;
      if (!*v180)
      {
LABEL_91:
        v68 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v68 + 25) = v16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
        *((_QWORD *)v68 + 2) = v64;
        *v66 = v68;
        v69 = (_QWORD *)**v169;
        if (v69)
        {
          *v169 = v69;
          v68 = *v66;
        }
        v6 = v179;
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v179 + 18), (uint64_t *)v68);
        v13 = (char *)*((_QWORD *)v179 + 20);
        ++*((_QWORD *)v179 + 19);
        v70 = (unint64_t *)*((_QWORD *)v179 + 26);
        v10 = (unint64_t *)*((_QWORD *)v179 + 27);
        v11 = v177;
        *((_QWORD *)v179 + 21) = v13;
        if (v70 == v10)
          goto LABEL_10;
LABEL_96:
        v71 = v10;
        while (2)
        {
          v73 = *v70;
          *(_DWORD *)(*v172 + ((uint64_t)(*v70 << 32) >> 30)) = 0;
          if (v16 == (_DWORD)v73)
          {
            v74 = HIDWORD(v73);
            v75 = *((_QWORD *)v6 + 22);
            if ((unint64_t)v13 < v75)
            {
              *(_DWORD *)v13 = v74;
              v72 = (uint64_t)(v13 + 4);
            }
            else
            {
              v76 = *v171;
              v77 = v13 - *v171;
              v78 = v77 >> 2;
              v79 = (v77 >> 2) + 1;
              if (v79 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v80 = v75 - (_QWORD)v76;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                if (v81 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v82 = operator new(4 * v81);
                v10 = v71;
                v83 = &v82[4 * v78];
                *v83 = v74;
                v72 = (uint64_t)(v83 + 1);
                if (v13 != v76)
                {
LABEL_111:
                  v84 = v13 - 4 - v76;
                  if (v84 < 0xBC
                    || &v82[v77 - 4 - (v84 & 0xFFFFFFFFFFFFFFFCLL)] > &v82[v77 - 4]
                    || &v13[-(v84 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
                    || (unint64_t)(v13 - v82 - v77) < 0x20)
                  {
                    v85 = v13;
                    v6 = v179;
                    v11 = v177;
                  }
                  else
                  {
                    v87 = (v84 >> 2) + 1;
                    v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
                    v85 = &v13[-v88];
                    v83 = (_DWORD *)((char *)v83 - v88);
                    v89 = &v82[4 * v78 - 16];
                    v90 = v13 - 16;
                    v91 = v87 & 0x7FFFFFFFFFFFFFF8;
                    v6 = v179;
                    do
                    {
                      v92 = *(_OWORD *)v90;
                      *(v89 - 1) = *((_OWORD *)v90 - 1);
                      *v89 = v92;
                      v89 -= 2;
                      v90 -= 32;
                      v91 -= 8;
                    }
                    while (v91);
                    v11 = v177;
                    if (v87 == (v87 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_114:
                      *((_QWORD *)v6 + 20) = v83;
                      *((_QWORD *)v6 + 21) = v72;
                      *((_QWORD *)v6 + 22) = &v82[4 * v81];
                      if (v76)
                        goto LABEL_115;
                      goto LABEL_116;
                    }
                  }
                  do
                  {
                    v86 = *((_DWORD *)v85 - 1);
                    v85 -= 4;
                    *--v83 = v86;
                  }
                  while (v85 != v76);
                  goto LABEL_114;
                }
              }
              else
              {
                v82 = 0;
                v83 = (_DWORD *)(4 * v78);
                *(_DWORD *)(4 * v78) = v74;
                v72 = 4 * v78 + 4;
                if (v13 != v76)
                  goto LABEL_111;
              }
              v6 = v179;
              v11 = v177;
              *((_QWORD *)v179 + 20) = v83;
              *((_QWORD *)v179 + 21) = v72;
              *((_QWORD *)v179 + 22) = &v82[4 * v81];
              if (v76)
              {
LABEL_115:
                operator delete(v76);
                v10 = v71;
              }
LABEL_116:
              v16 = v186;
            }
            *((_QWORD *)v6 + 21) = v72;
            v13 = (char *)v72;
          }
          if (++v70 == v10)
          {
            v10 = *v174;
            goto LABEL_10;
          }
          continue;
        }
      }
      while (1)
      {
        while (1)
        {
          v64 = (char **)v65;
          v67 = *(_DWORD *)(v65 + 25);
          if (v16 >= v67)
            break;
          v65 = *v64;
          v66 = v64;
          if (!*v64)
            goto LABEL_91;
        }
        if (v67 >= v16)
          break;
        v65 = v64[1];
        if (!v65)
        {
          v66 = v64 + 1;
          goto LABEL_91;
        }
      }
      v11 = v177;
      v13 = (char *)*((_QWORD *)v6 + 20);
      *((_QWORD *)v6 + 21) = v13;
      v70 = (unint64_t *)*((_QWORD *)v6 + 26);
      if (v70 != v10)
        goto LABEL_96;
LABEL_10:
      *((_QWORD *)v6 + 27) = v10;
      v12 = (unsigned int *)*((_QWORD *)v6 + 20);
      v15 = v183;
      v14 = v183;
      if (v12 == (unsigned int *)v13)
        goto LABEL_130;
    }
    v15 = v170;
LABEL_130:
    v93 = *v174;
    if (*v174 == v10)
      goto LABEL_133;
  }
LABEL_131:
  v94 = *v172;
  v95 = (int *)v93;
  do
  {
    v96 = *v95;
    v95 += 2;
    *(_DWORD *)(v94 + 4 * v96) = 0;
  }
  while (v95 != (int *)v10);
LABEL_133:
  *((_QWORD *)v6 + 27) = v93;
  if (v15 > *((_DWORD *)v6 + 216))
  {
    v98 = *((_QWORD *)v6 + 49);
    v97 = *((_QWORD *)v6 + 50);
    v99 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v98) >> 3);
    v100 = 0xAAAAAAAB00000000 * ((v97 - v98) >> 3);
    v101 = (v100 + 0x200000000) >> 32;
    if (v101 <= v99)
    {
      if (v101 < v99)
      {
        v102 = v98 + 24 * (int)v101;
        if (v97 != v102)
        {
          v103 = *((_QWORD *)v6 + 50);
          do
          {
            v105 = *(void **)(v103 - 24);
            v103 -= 24;
            v104 = v105;
            if (v105)
            {
              *(_QWORD *)(v97 - 16) = v104;
              operator delete(v104);
            }
            v97 = v103;
          }
          while (v103 != v102);
        }
        v6 = v179;
        *((_QWORD *)v179 + 50) = v102;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v173, v101 - v99);
      v6 = v179;
    }
    v106 = *((_QWORD *)v6 + 52);
    v107 = (*((_QWORD *)v6 + 53) - v106) >> 2;
    if (v101 <= v107)
    {
      if (v101 < v107)
        *((_QWORD *)v6 + 53) = v106 + 4 * v101;
    }
    else
    {
      std::vector<int>::__append(v177, v101 - v107);
      v6 = v179;
    }
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::resize((_QWORD *)v6 + 7, (v100 + 0x200000000) >> 32);
    v108 = *((_QWORD *)v179 + 11);
    v187 = v100 >> 32;
    v109 = *((_QWORD *)v179 + 8);
    *(_DWORD *)(*(_QWORD *)(v109 + (((unint64_t)(v108 + (v100 >> 32)) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (v108 + BYTE4(v100))
              + 4) = v99;
    v184 = (int)v99 + 1;
    *(_DWORD *)(*(_QWORD *)(v109 + (((unint64_t)(v108 + v184) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (v108 + v99 + 1)
              + 4) = v99 + 1;
    v110 = (operations_research::sat::DratProofHandler *)*((_QWORD *)v179 + 132);
    if (v110)
      operations_research::sat::DratProofHandler::AddOneVariable(v110);
    v111 = *v169;
    if (*v169 != v180)
    {
      v112 = (_QWORD *)((char *)v179 + 232);
      do
      {
        __x = *(_DWORD *)((char *)v111 + 25);
        v189 = v99;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v112, (char *)&__x, v190, 2uLL);
        operations_research::sat::SatPresolver::AddClauseInternal((uint64_t)v179, (uint64_t)v112);
        v113 = (_QWORD *)v111[1];
        if (v113)
        {
          do
          {
            v114 = v113;
            v113 = (_QWORD *)*v113;
          }
          while (v113);
        }
        else
        {
          do
          {
            v114 = (_QWORD *)v111[2];
            v115 = *v114 == (_QWORD)v111;
            v111 = v114;
          }
          while (!v115);
        }
        v111 = v114;
      }
      while (v114 != v180);
    }
    v116 = (int *)*((_QWORD *)v179 + 20);
    v117 = (int *)*((_QWORD *)v179 + 21);
    if (v116 != v117)
    {
      v118 = (char **)((char *)v179 + 232);
      do
      {
        v119 = *((_QWORD *)v179 + 41);
        v120 = (char **)(v119 + 24 * *v116);
        if (v118 != v120)
        {
          v121 = *(char **)(v119 + 24 * *v116 + 8);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v118, *v120, v121, (v121 - *v120) >> 2);
        }
        v122 = (int *)*((_QWORD *)v179 + 29);
        v123 = (char *)*((_QWORD *)v179 + 30);
        if (v122 != (int *)v123)
        {
          v124 = (_DWORD *)*((_QWORD *)v179 + 29);
          while (*v124 != a2)
          {
            if (++v124 == (_DWORD *)v123)
              goto LABEL_170;
          }
          *v124 = v99 + 1;
        }
LABEL_170:
        v125 = 126 - 2 * __clz((v123 - (char *)v122) >> 2);
        if (v123 == (char *)v122)
          v126 = 0;
        else
          v126 = v125;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v122, v123, (uint64_t)&__x, v126, 1);
        operations_research::sat::SatPresolver::AddClauseInternal((uint64_t)v179, (uint64_t)v118);
        ++v116;
      }
      while (v116 != v117);
      v128 = (int *)*((_QWORD *)v179 + 20);
      for (i = (int *)*((_QWORD *)v179 + 21); v128 != i; ++v128)
      {
        v129 = *v128;
        v130 = v179;
        v131 = *((_QWORD *)v179 + 41) + 24 * *v128;
        v132 = *(int **)v131;
        v134 = (int **)(v131 + 8);
        v133 = *(int **)(v131 + 8);
        if (*(int **)v131 == v133)
        {
          v136 = -1;
          v137 = v169;
        }
        else
        {
          v135 = 0x7FFFFFFF;
          v136 = -1;
          v137 = v169;
          do
          {
            v138 = *v132;
            if ((_DWORD)v138 != a2 && v177->__begin_[v138] < v135)
            {
              v135 = v177->__begin_[v138];
              v136 = *v132;
            }
            ++v132;
          }
          while (v132 != v133);
        }
        v139 = (_QWORD *)*v137;
        if ((_QWORD *)*v137 != v180)
        {
          v140 = v136;
          do
          {
            v141 = *(_DWORD *)((char *)v139 + 25);
            if (v141 != a2)
            {
              v142 = *v173 + 24 * v140;
              v143 = *(int **)v142;
              v144 = *(int **)(v142 + 8);
              if (v143 != v144)
              {
                v145 = *((_QWORD *)v130 + 41);
                v146 = (uint64_t)*v134 - *(_QWORD *)v131;
                if (*v134 == *(int **)v131)
                {
                  while (1)
                  {
                    v148 = *v143;
                    v155 = *(char **)(v145 + 24 * *v143);
                    v156 = *(char **)(v145 + 24 * *v143 + 8);
                    if (v146 == v156 - v155)
                    {
                      if (v155 == v156)
                      {
                        if (v141 == -1)
                          goto LABEL_214;
                      }
                      else if (*(_DWORD *)v155 == v141)
                      {
                        goto LABEL_214;
                      }
                    }
                    if (++v143 == v144)
                      goto LABEL_215;
                  }
                }
                while (1)
                {
                  v148 = *v143;
                  v149 = (int **)(v145 + 24 * *v143);
                  v150 = *v149;
                  v151 = v149[1];
                  if (v146 == (char *)v151 - (char *)*v149)
                  {
                    v147 = -1;
                    v152 = *(int **)v131;
                    do
                    {
                      if (v150 == v151)
                      {
                        if (*v152 != a2)
                          v147 = -1;
                        goto LABEL_192;
                      }
                      v153 = *v150;
                      v154 = *v152;
                      if (*v152 == *v150)
                      {
                        ++v152;
                        ++v150;
                      }
                      else if (v154 >= v153)
                      {
                        if (v147 != -1)
                          goto LABEL_207;
                        ++v150;
                        v147 = v153;
                      }
                      else
                      {
                        if (v154 != a2)
                          goto LABEL_207;
                        ++v152;
                      }
                    }
                    while (v152 != *v134);
                    if (v150 == v151)
                      goto LABEL_192;
                    if (v147 != -1)
                    {
LABEL_207:
                      v147 = -1;
                      goto LABEL_192;
                    }
                    v147 = *v150;
LABEL_192:
                    if (v147 == v141)
                      break;
                  }
                  if (++v143 == v144)
                    goto LABEL_215;
                }
LABEL_214:
                operations_research::sat::SatPresolver::Remove(v130, v148);
                v130 = v179;
              }
            }
LABEL_215:
            v157 = (_QWORD *)v139[1];
            if (v157)
            {
              do
              {
                v158 = v157;
                v157 = (_QWORD *)*v157;
              }
              while (v157);
            }
            else
            {
              do
              {
                v158 = (_QWORD *)v139[2];
                v115 = *v158 == (_QWORD)v139;
                v139 = v158;
              }
              while (!v115);
            }
            v139 = v158;
          }
          while (v158 != v180);
        }
        operations_research::sat::SatPresolver::Remove(v130, v129);
      }
    }
    v159 = v179;
    if (*((_QWORD *)v179 + 12))
    {
      v160 = *((_QWORD *)v179 + 11) + v187;
      v161 = *(_QWORD *)(*((_QWORD *)v179 + 8) + ((v160 >> 5) & 0x7FFFFFFFFFFFFF8));
      v162 = *(_DWORD *)(*((_QWORD *)v179 + 52) + 4 * v187);
      *(double *)(v161 + 16 * v160 + 8) = (double)v162;
      if (v162 < 3
        || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((_QWORD *)v179 + 13, v161 + 16 * v160), v159 = v179, *((_QWORD *)v179 + 12)))
      {
        v163 = *((_QWORD *)v159 + 11) + v184;
        v164 = *(_QWORD *)(*((_QWORD *)v159 + 8) + ((v163 >> 5) & 0x7FFFFFFFFFFFFF8));
        v165 = *(_DWORD *)(*((_QWORD *)v159 + 52) + 4 * v184);
        *(double *)(v164 + 16 * v163 + 8) = (double)v165;
        if (v165 < 3
          || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((_QWORD *)v159 + 13, v164 + 16 * v163), v159 = v179, *((_QWORD *)v179 + 12)))
        {
          v166 = *((_QWORD *)v159 + 11) + a2;
          v167 = *(_QWORD *)(*((_QWORD *)v159 + 8) + ((v166 >> 5) & 0x7FFFFFFFFFFFFF8));
          v168 = *(_DWORD *)(*((_QWORD *)v159 + 52) + 4 * a2);
          *(double *)(v167 + 16 * v166 + 8) = (double)v168;
          if (v168 >= 3)
            AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((_QWORD *)v159 + 13, v167 + 16 * v166);
        }
      }
    }
  }
}

void sub_22DC055A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1[5];
  if (a2 > v3)
  {
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(a1, a2 - v3);
    return;
  }
  if (a2 < v3)
  {
    v4 = a1[4];
    v6 = a1[1];
    v5 = a1[2];
    v7 = (char *)(v6 + 8 * (v4 >> 8));
    if (v5 == v6)
    {
      v8 = 0;
      if (!a2)
        goto LABEL_10;
    }
    else
    {
      v8 = *(_QWORD *)v7 + 16 * v4;
      if (!a2)
        goto LABEL_10;
    }
    v9 = a2 + ((v8 - *(_QWORD *)v7) >> 4);
    if (v9 < 1)
    {
      v14 = 255 - v9;
      v7 -= 8 * (v14 >> 8);
      v8 = *(_QWORD *)v7 + 16 * ~(_BYTE)v14;
      v10 = v4 + v3;
      v11 = (char *)(v6 + 8 * ((v4 + v3) >> 8));
      v12 = v5 - v6;
      if (v5 != v6)
      {
LABEL_11:
        v13 = *(_QWORD *)v11 + 16 * v10;
        if (v8 == v13)
          return;
        goto LABEL_15;
      }
LABEL_14:
      v13 = 0;
      if (!v8)
        return;
LABEL_15:
      v15 = ((v13 - *(_QWORD *)v11) >> 4) + 32 * (v11 - v7) - ((v8 - *(_QWORD *)v7) >> 4);
      if (v15 >= 1)
      {
        v16 = v5 == v6 ? 0 : 32 * v12 - 1;
        v17 = v3 - v15;
        a1[5] = v17;
        if (v16 - v4 - v17 >= 0x200)
        {
          do
          {
            operator delete(*(void **)(v5 - 8));
            v18 = a1[1];
            v5 = a1[2] - 8;
            a1[2] = v5;
            if (v5 == v18)
              v19 = 0;
            else
              v19 = 32 * (v5 - v18) - 1;
          }
          while ((unint64_t)(v19 - (a1[5] + a1[4])) > 0x1FF);
        }
      }
      return;
    }
    v7 += 8 * ((unint64_t)v9 >> 8);
    v8 = *(_QWORD *)v7 + 16 * v9;
LABEL_10:
    v10 = v4 + v3;
    v11 = (char *)(v6 + 8 * ((v4 + v3) >> 8));
    v12 = v5 - v6;
    if (v5 != v6)
      goto LABEL_11;
    goto LABEL_14;
  }
}

void operations_research::sat::SatPresolver::Remove(operations_research::sat::SatPresolver *this, int a2)
{
  uint64_t v4;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  *(_QWORD *)(*((_QWORD *)this + 44) + 8 * a2) = 0;
  v4 = *((_QWORD *)this + 41);
  v5 = (int **)(v4 + 24 * a2);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    while (1)
    {
      v8 = *v6;
      v9 = *((_QWORD *)this + 52);
      --*(_DWORD *)(v9 + 4 * v8);
      if (*(_QWORD *)this == *((_QWORD *)this + 1))
        goto LABEL_9;
      v10 = (double *)(*(_QWORD *)this + 16 * ((int)v8 >> 1));
      v10[1] = (double)(*(_DWORD *)(v9 + 4 * (int)(v8 | 1)) + *(_DWORD *)(v9 + 4 * (int)(v8 & 0xFFFFFFFE)));
      v11 = *(unsigned int *)v10;
      if ((v11 & 0x80000000) != 0)
        break;
      v12 = *((_QWORD *)this + 4);
      if (v11 >= (*((_QWORD *)this + 5) - v12) >> 3 || *(double **)(v12 + 8 * v11) != v10)
        break;
      AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)this + 24, (uint64_t)v10);
      if (*((_QWORD *)this + 12))
      {
LABEL_10:
        v13 = (double *)(*(_QWORD *)(*((_QWORD *)this + 8)
                                   + (((*((_QWORD *)this + 11) + (v8 & 0xFFFFFFFFFFFFFFFELL)) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((_BYTE *)this + 88) + (v8 & 0xFE)));
        v13[1] = (double)*(int *)(*((_QWORD *)this + 52) + 4 * (v8 & 0xFFFFFFFFFFFFFFFELL));
        v14 = *(unsigned int *)v13;
        if ((v14 & 0x80000000) != 0
          || (v15 = *((_QWORD *)this + 14), v14 >= (*((_QWORD *)this + 15) - v15) >> 3)
          || *(double **)(v15 + 8 * v14) != v13
          || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)this + 104, (uint64_t)v13), *((_QWORD *)this + 12)))
        {
          v16 = (double *)(*(_QWORD *)(*((_QWORD *)this + 8)
                                     + (((*((_QWORD *)this + 11) + (v8 | 1uLL)) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((_BYTE *)this + 88) + (v8 | 1)));
          v16[1] = (double)*(int *)(*((_QWORD *)this + 52) + 4 * (v8 | 1));
          v17 = *(unsigned int *)v16;
          if ((v17 & 0x80000000) == 0)
          {
            v18 = *((_QWORD *)this + 14);
            if (v17 < (*((_QWORD *)this + 15) - v18) >> 3 && *(double **)(v18 + 8 * v17) == v16)
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)this + 104, (uint64_t)v16);
          }
        }
      }
LABEL_3:
      if (++v6 == v7)
      {
        v4 = *((_QWORD *)this + 41);
        goto LABEL_21;
      }
    }
    AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add((_QWORD *)this + 3, (uint64_t)v10);
LABEL_9:
    if (*((_QWORD *)this + 12))
      goto LABEL_10;
    goto LABEL_3;
  }
LABEL_21:
  v19 = *((_QWORD *)this + 132);
  if (v19)
  {
    operations_research::sat::DratProofHandler::DeleteClause(v19, *(int **)(v4 + 24 * a2), (uint64_t)(*(_QWORD *)(v4 + 24 * a2 + 8) - *(_QWORD *)(v4 + 24 * a2)) >> 2);
    v4 = *((_QWORD *)this + 41);
  }
  v20 = v4 + 24 * a2;
  v21 = *(void **)v20;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)v20 = 0;
  if (v21)
    operator delete(v21);
}

uint64_t operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(operations_research::sat::SatPresolver *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;
  char v10;
  int **v11;
  int **v12;
  int **v13;
  int v14;
  int **v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  int *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  int *v37;
  char *v38;
  _BYTE *v39;
  size_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int8x8_t v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v53;
  int32x2_t *v54;
  int8x16_t v55;
  uint64_t v56;
  int8x16_t v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  uint64x2_t v65;
  int8x16_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  __int32 *v71;
  __int32 *v72;
  __int32 *v73;
  __int32 *v74;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  std::vector<int> *v91;
  std::vector<int>::pointer begin;
  int *end;
  int v94;
  uint64_t v95;
  std::vector<int>::pointer v96;
  uint64_t v97;
  unint64_t v98;
  size_t v100;
  char *v101;
  __int32 **v102;
  int **v103;
  int **v104;
  unint64_t v105;
  char *v106;
  _QWORD *v107;

  v3 = *((_QWORD *)this + 41);
  v4 = *(_QWORD *)(*((_QWORD *)this + 44) + 8 * a2);
  v5 = *((_QWORD *)this + 49) + 24 * a3;
  v6 = *(__int32 **)v5;
  v7 = *(__int32 **)(v5 + 8);
  *((_QWORD *)this + 47) += ((uint64_t)v7 - *(_QWORD *)v5) >> 2;
  if (v7 != v6)
  {
    v10 = 0;
    v11 = (int **)(v3 + 24 * a2);
    v12 = v11 + 1;
    v107 = (_QWORD *)((char *)this + 24);
    v106 = (char *)this + 280;
    while (1)
    {
      v16 = *v6;
      v17 = *(_QWORD *)(*((_QWORD *)this + 44) + 8 * *v6);
      if (!v17)
        goto LABEL_4;
      v18 = v4 & ~v17;
      if (v16 == a2 || v18 != 0)
        goto LABEL_5;
      v20 = v16;
      v21 = *((_QWORD *)this + 41);
      v22 = v21 + 24 * v16;
      v25 = *(_BYTE **)(v22 + 8);
      v24 = (_QWORD *)(v22 + 8);
      v23 = v25;
      v26 = *(_QWORD *)(v21 + 24 * v16);
      v27 = (uint64_t)&v25[-v26] >> 2;
      v28 = *v12;
      v29 = *v11;
      v30 = *v12 - *v11;
      if (v27 < v30)
        goto LABEL_5;
      *((_QWORD *)this + 48) += v30 + v27;
      if (v29 != v28)
        break;
LABEL_3:
      v13 = v11;
      v14 = v16;
      v15 = v12;
      operations_research::sat::SatPresolver::Remove(this, v14);
      v12 = v15;
      v11 = v13;
LABEL_4:
      v10 = 1;
LABEL_5:
      if (++v6 == v7)
      {
        if ((v10 & 1) != 0)
        {
          v91 = (std::vector<int> *)(*((_QWORD *)this + 49) + 24 * a3);
          begin = v91->__begin_;
          end = v91->__end_;
          if (v91->__begin_ == end)
          {
            v94 = 0;
          }
          else
          {
            v94 = 0;
            v95 = *((_QWORD *)this + 44);
            v96 = v91->__begin_;
            do
            {
              v97 = *v96;
              if (*(_QWORD *)(v95 + 8 * v97))
                begin[v94++] = v97;
              ++v96;
            }
            while (v96 != end);
          }
          v98 = end - begin;
          if (v94 <= v98)
          {
            if (v94 < v98)
              v91->__end_ = &begin[v94];
          }
          else
          {
            std::vector<int>::__append(v91, v94 - v98);
          }
        }
        return 1;
      }
    }
    v31 = 0;
    v32 = v27 - v30;
    v33 = (int *)(v26 + 4);
    while (1)
    {
      while (1)
      {
        v34 = *(_DWORD *)(v26 + v31);
        v35 = *v29;
        if (*v29 != v34)
          break;
        ++v29;
        v31 += 4;
        ++v33;
        if (v29 == v28)
          goto LABEL_3;
      }
      if (v35 == (v34 ^ 1))
        break;
      if (v35 < v34 || v32 < 1)
        goto LABEL_5;
      --v32;
      v31 += 4;
      ++v33;
      if (v29 == v28)
        goto LABEL_3;
    }
    v37 = v29 + 1;
    if (v37 == v28)
    {
      v38 = (char *)(v26 + v31);
      v39 = (_BYTE *)(v26 + v31 + 4);
      v40 = v23 - v39;
      v104 = v11;
      v105 = v16;
      v103 = v12;
      if (v23 == v39)
        goto LABEL_27;
    }
    else
    {
      do
      {
        while (1)
        {
          v50 = *v33++;
          v49 = v50;
          v51 = *v37;
          if (*v37 != v50)
            break;
          if (++v37 == v28)
            goto LABEL_42;
        }
        if (v51 == (v49 ^ 1))
          goto LABEL_5;
        if (v51 < v49 || v32 < 1)
          goto LABEL_5;
        --v32;
      }
      while (v37 != v28);
LABEL_42:
      v34 = *(_DWORD *)(v26 + v31);
      v38 = (char *)(v26 + v31);
      v39 = (_BYTE *)(v26 + v31 + 4);
      v40 = v23 - v39;
      v104 = v11;
      v105 = v16;
      v103 = v12;
      if (v23 == v39)
      {
LABEL_27:
        *v24 = &v38[v40];
        if (v34 != -1)
        {
          v41 = *((_QWORD *)this + 41) + 24 * (int)v20;
          v42 = *(int **)v41;
          v43 = *(int **)(v41 + 8);
          if (v42 == v43)
            return 0;
          v44 = *((_QWORD *)this + 132);
          if (v44)
          {
            operations_research::sat::DratProofHandler::AddClause(v44, v42, v43 - v42);
            v20 = v105;
            v45 = *((_QWORD *)this + 41) + 24 * (int)v105;
            v42 = *(int **)v45;
            v43 = *(int **)(v45 + 8);
          }
          if (v42 == v43)
          {
            v47 = 0;
          }
          else
          {
            v46 = (char *)v43 - (char *)v42 - 4;
            if (v46 >= 0xC)
            {
              v53 = (v46 >> 2) + 1;
              v48 = &v42[v53 & 0x7FFFFFFFFFFFFFFCLL];
              v54 = (int32x2_t *)(v42 + 2);
              v55 = 0uLL;
              v56 = v53 & 0x7FFFFFFFFFFFFFFCLL;
              v57 = 0uLL;
              do
              {
                v58 = v54[-1];
                v59 = vshr_n_s32(v58, 1uLL);
                v60 = vshr_n_s32(*v54, 1uLL);
                v61 = vsub_s32(v59, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v59, (uint32x2_t)vcltz_s32(v58), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                v62 = vsub_s32(v60, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v60, (uint32x2_t)vcltz_s32(*v54), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                v63.i64[0] = v61.u32[0];
                v63.i64[1] = v61.u32[1];
                v64 = v63;
                v63.i64[0] = v62.u32[0];
                v63.i64[1] = v62.u32[1];
                v65 = (uint64x2_t)vdupq_n_s64(1uLL);
                v55 = vorrq_s8((int8x16_t)vshlq_u64(v65, v64), v55);
                v57 = vorrq_s8((int8x16_t)vshlq_u64(v65, v63), v57);
                v54 += 2;
                v56 -= 4;
              }
              while (v56);
              v66 = vorrq_s8(v57, v55);
              v47 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
              if (v53 != (v53 & 0x7FFFFFFFFFFFFFFCLL))
                goto LABEL_48;
            }
            else
            {
              v47 = 0;
              v48 = v42;
              do
              {
LABEL_48:
                v67 = *v48++;
                v68 = -(v67 >> 1) & 0x3F;
                v69 = (v67 >> 1) & 0x3F;
                if (v67 >> 1 <= 0)
                  v69 = -v68;
                *(_QWORD *)&v47 |= 1 << v69;
              }
              while (v48 != v43);
            }
          }
          *(int8x8_t *)(*((_QWORD *)this + 44) + 8 * v20) = v47;
          v70 = *((_QWORD *)this + 49) + 24 * v34;
          v71 = *(__int32 **)(v70 + 8);
          v102 = (__int32 **)(v70 + 8);
          v72 = wmemchr(*(__int32 **)v70, v16, ((uint64_t)v71 - *(_QWORD *)v70) >> 2);
          if (v72)
            v73 = v72;
          else
            v73 = v71;
          v74 = v73 + 1;
          if (v73 == v71 || v74 == v71)
          {
            v12 = v103;
            v11 = v104;
            v90 = v105;
          }
          else
          {
            v12 = v103;
            v11 = v104;
            v90 = v105;
            do
            {
              if (*v74 != v16)
                *v73++ = *v74;
              ++v74;
            }
            while (v74 != v71);
          }
          if (v73 != *v102)
            *v102 = v73;
          v76 = *((_QWORD *)this + 52);
          v77 = 4 * v34;
          --*(_DWORD *)(v76 + v77);
          if (*(_QWORD *)this != *((_QWORD *)this + 1))
          {
            v78 = (double *)(*(_QWORD *)this + 16 * (v34 >> 1));
            v78[1] = (double)(*(_DWORD *)(v76 + (v77 | 4)) + *(_DWORD *)(v76 + 4 * (v34 & 0x3FFFFFFFFFFFFFFELL)));
            v79 = *(unsigned int *)v78;
            if ((v79 & 0x80000000) == 0
              && (v80 = *((_QWORD *)this + 4), v79 < (*((_QWORD *)this + 5) - v80) >> 3)
              && *(double **)(v80 + 8 * v79) == v78)
            {
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v107, (uint64_t)v78);
            }
            else
            {
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v107, (uint64_t)v78);
            }
            v11 = v104;
            v90 = v105;
            v12 = v103;
          }
          v81 = *((_QWORD *)this + 32);
          v82 = v90 >> 6;
          v83 = 1 << v90;
          v84 = *(_QWORD *)(v81 + 8 * (v90 >> 6));
          if ((v84 & (1 << v90)) == 0)
          {
            v85 = *((_QWORD *)this + 37);
            v86 = *((_QWORD *)this + 36);
            *(_QWORD *)(v81 + 8 * v82) = v84 | v83;
            if (v85 == v86)
              v87 = 0;
            else
              v87 = ((v85 - v86) << 7) - 1;
            v88 = *((_QWORD *)this + 40);
            v89 = v88 + *((_QWORD *)this + 39);
            if (v87 == v89)
            {
              std::deque<int>::__add_back_capacity((uint64_t)v106);
              v12 = v103;
              v11 = v104;
              v86 = *((_QWORD *)this + 36);
              v88 = *((_QWORD *)this + 40);
              v89 = *((_QWORD *)this + 39) + v88;
            }
            *(_DWORD *)(*(_QWORD *)(v86 + ((v89 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v89 & 0x3FF)) = v16;
            *((_QWORD *)this + 40) = v88 + 1;
          }
          goto LABEL_5;
        }
        goto LABEL_3;
      }
    }
    v100 = v40;
    v101 = v38;
    memmove(v38, v39, v40);
    v40 = v100;
    v38 = v101;
    v11 = v104;
    v20 = v105;
    v12 = v103;
    goto LABEL_27;
  }
  return 1;
}

void operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining(operations_research::sat::SatPresolver *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int **v5;
  int *v6;
  int *v7;
  int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  _QWORD *v13;

  v3 = a2;
  v4 = *((_QWORD *)a1 + 49);
  v5 = (int **)(v4 + 24 * a2);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      v9 = *v6;
      v10 = *((_QWORD *)a1 + 41) + 24 * *v6;
      v11 = *(int **)v10;
      v12 = *(int **)(v10 + 8);
      if (v11 != v12)
      {
        operations_research::sat::SatPostsolver::Add(*((_QWORD *)a1 + 55), a2, v11, v12 - v11);
        operations_research::sat::SatPresolver::Remove(a1, v9);
      }
      ++v6;
    }
    while (v6 != v7);
    v4 = *((_QWORD *)a1 + 49);
    v6 = *(int **)(v4 + 24 * (int)v3);
  }
  v13 = (_QWORD *)(v4 + 24 * (int)v3);
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  if (v6)
    operator delete(v6);
  *(_DWORD *)(*((_QWORD *)a1 + 52) + 4 * v3) = 0;
}

uint64_t operations_research::sat::ComputeResolvant(int a1, char **a2, char **a3, unint64_t *a4)
{
  unint64_t *v4;
  char **v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char **v12;
  uint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  char **v18;
  char **v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  _DWORD *v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  unint64_t v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  unint64_t *v74;

  v4 = a4;
  v5 = a3;
  v6 = (_DWORD *)*a4;
  a4[1] = *a4;
  v8 = *a2;
  v7 = a2[1];
  v9 = *a3;
  if (*a2 == v7 || v9 == a3[1])
  {
LABEL_6:
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v4, v6, v8, v7, (v7 - v8) >> 2);
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v4, (void *)v4[1], v9, v5[1], (v5[1] - v9) >> 2);
    return 1;
  }
  v12 = a2;
  v74 = v4;
  while (1)
  {
    while (1)
    {
      v15 = *(_DWORD *)v9;
      v16 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 != *(_DWORD *)v9)
        break;
      v17 = v4[2];
      if ((unint64_t)v6 < v17)
      {
        *v6 = v15;
        v13 = (uint64_t)(v6 + 1);
      }
      else
      {
        v18 = v5;
        v19 = v12;
        v20 = (_BYTE *)*v4;
        v21 = (uint64_t)v6 - *v4;
        v22 = v21 >> 2;
        v23 = (v21 >> 2) + 1;
        if (v23 >> 62)
          goto LABEL_104;
        v24 = v17 - (_QWORD)v20;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 62)
            goto LABEL_105;
          v26 = operator new(4 * v25);
          v27 = &v26[4 * v22];
          *v27 = *(_DWORD *)v8;
          v13 = (uint64_t)(v27 + 1);
          if (v6 != (_DWORD *)v20)
          {
LABEL_25:
            v28 = (char *)(v6 - 1) - v20;
            if (v28 < 0xBC
              || &v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4]
              || (_DWORD *)((char *)v6 - (v28 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1
              || (unint64_t)((char *)v6 - v26 - v21) < 0x20)
            {
              v29 = v6;
              v12 = v19;
              v5 = v18;
              v4 = v74;
              goto LABEL_30;
            }
            v55 = (v28 >> 2) + 1;
            v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
            v29 = &v6[v56 / 0xFFFFFFFFFFFFFFFCLL];
            v27 = (_DWORD *)((char *)v27 - v56);
            v57 = &v26[4 * v22 - 16];
            v58 = (__int128 *)(v6 - 4);
            v59 = v55 & 0x7FFFFFFFFFFFFFF8;
            v12 = v19;
            do
            {
              v60 = *v58;
              *(v57 - 1) = *(v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 2;
              v59 -= 8;
            }
            while (v59);
            v5 = v18;
            v4 = v74;
            if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_30:
                v30 = *--v29;
                *--v27 = v30;
              }
              while (v29 != (_DWORD *)v20);
            }
            *v4 = (unint64_t)v27;
            v4[1] = v13;
            v4[2] = (unint64_t)&v26[4 * v25];
            if (!v20)
              goto LABEL_8;
LABEL_48:
            operator delete(v20);
            goto LABEL_8;
          }
        }
        else
        {
          v26 = 0;
          v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v15;
          v13 = 4 * v22 + 4;
          if (v6 != (_DWORD *)v20)
            goto LABEL_25;
        }
        v12 = v19;
        v5 = v18;
        v4 = v74;
        *v74 = (unint64_t)v27;
        v74[1] = v13;
        v74[2] = (unint64_t)&v26[4 * v25];
        if (v20)
          goto LABEL_48;
      }
LABEL_8:
      v4[1] = v13;
      v8 += 4;
LABEL_9:
      v9 += 4;
LABEL_10:
      v6 = (_DWORD *)v13;
      v7 = v12[1];
      if (v8 == v7 || v9 == v5[1])
        goto LABEL_6;
    }
    if (v16 != (v15 ^ 1))
    {
      v32 = v4[2];
      if (v16 < v15)
      {
        if ((unint64_t)v6 < v32)
        {
          *v6 = v16;
          v13 = (uint64_t)(v6 + 1);
LABEL_66:
          v4[1] = v13;
          v8 += 4;
          goto LABEL_10;
        }
        v33 = (_BYTE *)*v4;
        v34 = (uint64_t)v6 - *v4;
        v35 = v34 >> 2;
        v36 = (v34 >> 2) + 1;
        if (v36 >> 62)
          goto LABEL_104;
        v37 = v32 - (_QWORD)v33;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
            goto LABEL_105;
          v39 = operator new(4 * v38);
          v40 = &v39[4 * v35];
          *v40 = *(_DWORD *)v8;
          v13 = (uint64_t)(v40 + 1);
          if (v6 != (_DWORD *)v33)
          {
LABEL_58:
            v41 = (char *)(v6 - 1) - v33;
            if (v41 < 0xBC
              || &v39[v34 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v34 - 4]
              || (_DWORD *)((char *)v6 - (v41 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1
              || (unint64_t)((char *)v6 - v39 - v34) < 0x20)
            {
              v42 = v6;
              v4 = v74;
              goto LABEL_63;
            }
            v61 = (v41 >> 2) + 1;
            v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            v42 = &v6[v62 / 0xFFFFFFFFFFFFFFFCLL];
            v40 = (_DWORD *)((char *)v40 - v62);
            v63 = &v39[4 * v35 - 16];
            v64 = (__int128 *)(v6 - 4);
            v65 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v66 = *v64;
              *(v63 - 1) = *(v64 - 1);
              *v63 = v66;
              v63 -= 2;
              v64 -= 2;
              v65 -= 8;
            }
            while (v65);
            v4 = v74;
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_63:
                v43 = *--v42;
                *--v40 = v43;
              }
              while (v42 != (_DWORD *)v33);
            }
            *v4 = (unint64_t)v40;
            v4[1] = v13;
            v4[2] = (unint64_t)&v39[4 * v38];
            if (!v33)
              goto LABEL_66;
LABEL_65:
            operator delete(v33);
            goto LABEL_66;
          }
        }
        else
        {
          v39 = 0;
          v40 = (_DWORD *)(4 * v35);
          *(_DWORD *)(4 * v35) = v16;
          v13 = 4 * v35 + 4;
          if (v6 != (_DWORD *)v33)
            goto LABEL_58;
        }
        v4 = v74;
        *v74 = (unint64_t)v40;
        v74[1] = v13;
        v74[2] = (unint64_t)&v39[4 * v38];
        if (!v33)
          goto LABEL_66;
        goto LABEL_65;
      }
      if ((unint64_t)v6 < v32)
      {
        *v6 = v15;
        v13 = (uint64_t)(v6 + 1);
LABEL_84:
        v4[1] = v13;
        goto LABEL_9;
      }
      v44 = (_BYTE *)*v4;
      v45 = (uint64_t)v6 - *v4;
      v46 = v45 >> 2;
      v47 = (v45 >> 2) + 1;
      if (v47 >> 62)
LABEL_104:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v48 = v32 - (_QWORD)v44;
      if (v48 >> 1 > v47)
        v47 = v48 >> 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
        v49 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        if (v49 >> 62)
LABEL_105:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = operator new(4 * v49);
        v51 = &v50[4 * v46];
        *v51 = *(_DWORD *)v9;
        v13 = (uint64_t)(v51 + 1);
        if (v6 != (_DWORD *)v44)
        {
LABEL_76:
          v52 = (char *)(v6 - 1) - v44;
          if (v52 >= 0xBC
            && &v50[v45 - 4 - (v52 & 0xFFFFFFFFFFFFFFFCLL)] <= &v50[v45 - 4]
            && (_DWORD *)((char *)v6 - (v52 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v6 - 1
            && (unint64_t)((char *)v6 - v50 - v45) >= 0x20)
          {
            v67 = (v52 >> 2) + 1;
            v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            v53 = &v6[v68 / 0xFFFFFFFFFFFFFFFCLL];
            v51 = (_DWORD *)((char *)v51 - v68);
            v69 = &v50[4 * v46 - 16];
            v70 = (__int128 *)(v6 - 4);
            v71 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v72 = *v70;
              *(v69 - 1) = *(v70 - 1);
              *v69 = v72;
              v69 -= 2;
              v70 -= 2;
              v71 -= 8;
            }
            while (v71);
            v4 = v74;
            if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_82:
              *v4 = (unint64_t)v51;
              v4[1] = v13;
              v4[2] = (unint64_t)&v50[4 * v49];
              if (!v44)
                goto LABEL_84;
LABEL_83:
              operator delete(v44);
              goto LABEL_84;
            }
          }
          else
          {
            v53 = v6;
            v4 = v74;
          }
          do
          {
            v54 = *--v53;
            *--v51 = v54;
          }
          while (v53 != (_DWORD *)v44);
          goto LABEL_82;
        }
      }
      else
      {
        v50 = 0;
        v51 = (_DWORD *)(4 * v46);
        *(_DWORD *)(4 * v46) = v15;
        v13 = 4 * v46 + 4;
        if (v6 != (_DWORD *)v44)
          goto LABEL_76;
      }
      v4 = v74;
      *v74 = (unint64_t)v51;
      v74[1] = v13;
      v74[2] = (unint64_t)&v50[4 * v49];
      if (!v44)
        goto LABEL_84;
      goto LABEL_83;
    }
    if (v16 != a1)
      return 0;
    v8 += 4;
    v9 += 4;
    v7 = v12[1];
    if (v8 == v7 || v9 == v5[1])
      goto LABEL_6;
  }
}

uint64_t AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_DWORD *)a2;
  v3 = *(_DWORD *)a2 - 1;
  if (*(int *)a2 < 1)
    v3 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(result + 8);
  v5 = v2;
  v6 = *(double *)(*(_QWORD *)(v4 + 8 * (v3 >> 1)) + 8);
  v7 = *(_QWORD *)(v4 + 8 * v2);
  if (v6 <= *(double *)(a2 + 8))
  {
    v13 = (2 * v2) | 1;
    v14 = (*(_QWORD *)(result + 16) - v4) >> 3;
    if (v14 > v13)
    {
      v15 = 2 * v2;
      v16 = *(double *)(v7 + 8);
      v17 = (2 * v2) | 1;
      v18 = *(_DWORD *)a2;
      while (1)
      {
        v2 = v15 + 2;
        if (v14 <= v15 + 2
          || (v19 = *(_QWORD *)(v4 + 8 * v13),
              v20 = *(_QWORD *)(v4 + 8 * v2),
              v21 = *(double *)(v20 + 8),
              *(double *)(v19 + 8) <= v21))
        {
          v20 = *(_QWORD *)(v4 + 8 * v17);
          v21 = *(double *)(v20 + 8);
          v2 = v17;
        }
        if (v16 <= v21)
          break;
        v22 = 8 * v18;
        *(_QWORD *)(v4 + v22) = v20;
        v4 = *(_QWORD *)(result + 8);
        v23 = *(_QWORD *)(result + 16);
        **(_DWORD **)(v4 + v22) = v18;
        v15 = 2 * v2;
        v17 = (2 * v2) | 1;
        v13 = v17;
        v14 = (v23 - v4) >> 3;
        v18 = v2;
        if (v14 <= v17)
          goto LABEL_19;
      }
      v2 = v18;
LABEL_19:
      v5 = v2;
    }
    *(_QWORD *)(v4 + 8 * v5) = v7;
    *(_DWORD *)v7 = v2;
  }
  else
  {
    if (v2 >= 1)
    {
      v8 = *(double *)(v7 + 8);
      while (1)
      {
        v9 = v2 - 1;
        v10 = (v2 - 1) >> 1;
        v11 = *(_QWORD *)(v4 + 8 * v10);
        v5 = v2;
        if (*(double *)(v11 + 8) <= v8)
          break;
        v12 = 8 * v2;
        *(_QWORD *)(v4 + v12) = v11;
        v4 = *(_QWORD *)(result + 8);
        **(_DWORD **)(v4 + v12) = v2;
        v2 = v9 >> 1;
        if (v9 <= 1)
        {
          *(_QWORD *)(v4 + 8 * v10) = v7;
          *(_DWORD *)v7 = v10;
          return result;
        }
      }
    }
    *(_QWORD *)(v4 + 8 * v5) = v7;
    *(_DWORD *)v7 = v2;
  }
  return result;
}

void AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(_QWORD *a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = (char **)(a1 + 1);
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = *v4;
  v10 = v6 - *v4;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
    v7 = *v4;
  }
LABEL_21:
  a1[1] = v16;
  a1[2] = v8;
  a1[3] = v17;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  v27 = (char *)a1[1];
  v28 = ((unint64_t)(v8 - (_QWORD)v27) >> 3) - 1;
  v29 = *(_QWORD *)&v27[8 * v28];
  if (v28 < 1)
  {
    v33 = v28;
  }
  else
  {
    v30 = *(double *)(v29 + 8);
    while (1)
    {
      v31 = v28 - 1;
      v32 = *(_QWORD *)&v27[8 * ((v28 - 1) >> 1)];
      v33 = v28;
      if (*(double *)(v32 + 8) <= v30)
        break;
      v34 = 8 * v28;
      *(_QWORD *)&v27[v34] = v32;
      v27 = *v4;
      **(_DWORD **)&(*v4)[v34] = v28;
      v28 = v31 >> 1;
      if (v31 <= 1)
      {
        v33 = v31 >> 1;
        v28 = v31 >> 1;
        break;
      }
    }
  }
  *(_QWORD *)&v27[8 * v33] = v29;
  *(_DWORD *)v29 = v28;
}

uint64_t AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_DWORD *)a2;
  v3 = *(_DWORD *)a2 - 1;
  if (*(int *)a2 < 1)
    v3 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(result + 8);
  v5 = v2;
  v6 = *(double *)(*(_QWORD *)(v4 + 8 * (v3 >> 1)) + 8);
  v7 = *(_QWORD *)(v4 + 8 * v2);
  if (v6 >= *(double *)(a2 + 8))
  {
    v13 = (2 * v2) | 1;
    v14 = (*(_QWORD *)(result + 16) - v4) >> 3;
    if (v14 > v13)
    {
      v15 = 2 * v2;
      v16 = *(double *)(v7 + 8);
      v17 = (2 * v2) | 1;
      v18 = *(_DWORD *)a2;
      while (1)
      {
        v2 = v15 + 2;
        if (v14 <= v15 + 2
          || (v19 = *(_QWORD *)(v4 + 8 * v13),
              v20 = *(_QWORD *)(v4 + 8 * v2),
              v21 = *(double *)(v20 + 8),
              *(double *)(v19 + 8) >= v21))
        {
          v20 = *(_QWORD *)(v4 + 8 * v17);
          v21 = *(double *)(v20 + 8);
          v2 = v17;
        }
        if (v16 >= v21)
          break;
        v22 = 8 * v18;
        *(_QWORD *)(v4 + v22) = v20;
        v4 = *(_QWORD *)(result + 8);
        v23 = *(_QWORD *)(result + 16);
        **(_DWORD **)(v4 + v22) = v18;
        v15 = 2 * v2;
        v17 = (2 * v2) | 1;
        v13 = v17;
        v14 = (v23 - v4) >> 3;
        v18 = v2;
        if (v14 <= v17)
          goto LABEL_19;
      }
      v2 = v18;
LABEL_19:
      v5 = v2;
    }
    *(_QWORD *)(v4 + 8 * v5) = v7;
    *(_DWORD *)v7 = v2;
  }
  else
  {
    if (v2 >= 1)
    {
      v8 = *(double *)(v7 + 8);
      while (1)
      {
        v9 = v2 - 1;
        v10 = (v2 - 1) >> 1;
        v11 = *(_QWORD *)(v4 + 8 * v10);
        v5 = v2;
        if (*(double *)(v11 + 8) >= v8)
          break;
        v12 = 8 * v2;
        *(_QWORD *)(v4 + v12) = v11;
        v4 = *(_QWORD *)(result + 8);
        **(_DWORD **)(v4 + v12) = v2;
        v2 = v9 >> 1;
        if (v9 <= 1)
        {
          *(_QWORD *)(v4 + 8 * v10) = v7;
          *(_DWORD *)v7 = v10;
          return result;
        }
      }
    }
    *(_QWORD *)(v4 + 8 * v5) = v7;
    *(_DWORD *)v7 = v2;
  }
  return result;
}

void AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add(_QWORD *a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = (char **)(a1 + 1);
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = *v4;
  v10 = v6 - *v4;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
    v7 = *v4;
  }
LABEL_21:
  a1[1] = v16;
  a1[2] = v8;
  a1[3] = v17;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  v27 = (char *)a1[1];
  v28 = ((unint64_t)(v8 - (_QWORD)v27) >> 3) - 1;
  v29 = *(_QWORD *)&v27[8 * v28];
  if (v28 < 1)
  {
    v33 = v28;
  }
  else
  {
    v30 = *(double *)(v29 + 8);
    while (1)
    {
      v31 = v28 - 1;
      v32 = *(_QWORD *)&v27[8 * ((v28 - 1) >> 1)];
      v33 = v28;
      if (*(double *)(v32 + 8) >= v30)
        break;
      v34 = 8 * v28;
      *(_QWORD *)&v27[v34] = v32;
      v27 = *v4;
      **(_DWORD **)&(*v4)[v34] = v28;
      v28 = v31 >> 1;
      if (v31 <= 1)
      {
        v33 = v31 >> 1;
        v28 = v31 >> 1;
        break;
      }
    }
  }
  *(_QWORD *)&v27[8 * v33] = v29;
  *(_DWORD *)v29 = v28;
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::assign(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  _OWORD *v10;
  unsigned __int8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a1[4];
  v4 = a1[5];
  v7 = a1[1];
  v6 = a1[2];
  v8 = (char *)(v7 + 8 * (v5 >> 8));
  if (v4 < a2)
  {
    if (v6 == v7)
    {
      v9 = 0;
      if (!v4)
      {
LABEL_11:
        std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(a1, a2, a3);
        return;
      }
    }
    else
    {
      v9 = (_OWORD *)(*(_QWORD *)v8 + 16 * v5);
      if (!v4)
        goto LABEL_11;
    }
    do
    {
      *v9++ = *a3;
      if ((_OWORD *)((char *)v9 - *(_QWORD *)v8) == (_OWORD *)4096)
      {
        v15 = (_OWORD *)*((_QWORD *)v8 + 1);
        v8 += 8;
        v9 = v15;
      }
      --v4;
    }
    while (v4);
    a2 -= a1[5];
    goto LABEL_11;
  }
  if (v6 == v7)
  {
    v10 = 0;
    if (!a2)
    {
LABEL_7:
      v11 = v5 + v4;
      v12 = (char *)(v7 + 8 * ((v5 + v4) >> 8));
      v13 = v6 - v7;
      if (v6 != v7)
        goto LABEL_8;
      goto LABEL_22;
    }
  }
  else
  {
    v10 = (_OWORD *)(*(_QWORD *)v8 + 16 * v5);
    if (!a2)
      goto LABEL_7;
  }
  do
  {
    *v10++ = *a3;
    if ((_OWORD *)((char *)v10 - *(_QWORD *)v8) == (_OWORD *)4096)
    {
      v16 = (_OWORD *)*((_QWORD *)v8 + 1);
      v8 += 8;
      v10 = v16;
    }
    --a2;
  }
  while (a2);
  v5 = a1[4];
  v4 = a1[5];
  v7 = a1[1];
  v6 = a1[2];
  v11 = v5 + v4;
  v12 = (char *)(v7 + 8 * ((v5 + v4) >> 8));
  v13 = v6 - v7;
  if (v6 != v7)
  {
LABEL_8:
    v14 = *(_QWORD *)v12 + 16 * v11;
    if (v10 == (_OWORD *)v14)
      return;
    goto LABEL_23;
  }
LABEL_22:
  v14 = 0;
  if (!v10)
    return;
LABEL_23:
  v17 = ((v14 - *(_QWORD *)v12) >> 4) + 32 * (v12 - v8) - (((uint64_t)v10 - *(_QWORD *)v8) >> 4);
  if (v17 >= 1)
  {
    v18 = 32 * v13 - 1;
    if (v6 == v7)
      v18 = 0;
    v19 = v4 - v17;
    a1[5] = v19;
    if (v18 - (v5 + v19) >= 0x200)
    {
      do
      {
        operator delete(*(void **)(v6 - 8));
        v20 = a1[1];
        v6 = a1[2] - 8;
        v21 = 32 * (v6 - v20) - 1;
        a1[2] = v6;
        if (v6 == v20)
          v21 = 0;
      }
      while ((unint64_t)(v21 - (a1[5] + a1[4])) > 0x1FF);
    }
  }
}

void operations_research::sat::ProbeAndFindEquivalentLiteral(int *a1, uint64_t a2, uint64_t a3, std::vector<int> *a4)
{
  double v7;
  uint64_t v8;
  int v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  google::LogMessage *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  absl::lts_2020_02_25 *v23;
  char *v24;
  unsigned int **v25;
  void *v26;
  char *v27;
  unsigned int *v28;
  unsigned int *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int RootAndCompressPath;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  operations_research::sat::SatSolver *v46;
  void *v48[2];
  void *v49[2];
  __int128 v50;
  void *__p[2];
  uint64_t v52;
  void *v53;
  unsigned int **v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  int *v59;
  double v60;
  std::vector<int>::value_type __x;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  a4->__end_ = a4->__begin_;
  v7 = *(double *)(operations_research::sat::SatSolver::parameters((operations_research::sat::SatSolver *)a1) + 328);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = a1;
  v60 = v7 + operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)a1);
  v8 = a1[4];
  v9 = 2 * v8;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  FindStronglyConnectedComponents<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>(2 * v8, (uint64_t)&v56, (uint64_t)&v53);
  v46 = (operations_research::sat::SatSolver *)a1;
  v52 = 0;
  v50 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)v49 = 0u;
  operations_research::MergingPartition::Reset((operations_research::MergingPartition *)v48, 2 * v8);
  v11 = (unsigned int **)v53;
  v10 = v54;
  while (v11 != v10)
  {
    v12 = *v11;
    if ((unint64_t)((char *)v11[1] - (char *)*v11) >= 5)
    {
      if (a4->__begin_ != a4->__end_
        || (__x = -1, !(_DWORD)v8)
        || (std::vector<int>::__append(a4, 2 * v8, &__x),
            v12 = *v11,
            (unint64_t)((char *)v11[1] - (char *)*v11) >= 5))
      {
        v13 = *v12;
        v14 = 1;
        do
        {
          v15 = v12[v14];
          operations_research::MergingPartition::MergePartsOf((operations_research::MergingPartition *)v48, v13, v15);
          operations_research::MergingPartition::MergePartsOf((operations_research::MergingPartition *)v48, v13 ^ 1, v15 ^ 1);
          ++v14;
          v12 = *v11;
        }
        while (v14 < v11[1] - *v11);
      }
    }
    v11 += 3;
  }
  operations_research::sat::SatSolver::Backtrack(v46, 0);
  if (a4->__begin_ != a4->__end_ && (int)v8 >= 1)
  {
    v30 = 0;
    v31 = *((_QWORD *)v46 + 26);
    if (v9 <= 1)
      v32 = 1;
    else
      v32 = v9;
    do
    {
      RootAndCompressPath = operations_research::MergingPartition::GetRootAndCompressPath((operations_research::MergingPartition *)v48, v30);
      v34 = *(_QWORD *)(v31 + 24);
      v35 = *(_QWORD *)(v34 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v35 >> (v30 & 0x3E)) & 3) != 0
        && ((*(_QWORD *)(v34 + (((unint64_t)RootAndCompressPath >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (RootAndCompressPath & 0x3E)) & 3) == 0)
      {
        v36 = RootAndCompressPath ^ (((v35 >> v30) & 1) == 0);
        operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v36);
        if (a3)
        {
          __x = v36;
          operations_research::sat::DratProofHandler::AddClause(a3, &__x, 1);
        }
      }
      ++v30;
    }
    while (v32 != v30);
    v37 = 0;
    v38 = 0;
    while (1)
    {
      v39 = operations_research::MergingPartition::GetRootAndCompressPath((operations_research::MergingPartition *)v48, v37);
      a4->__begin_[v37] = v39;
      v40 = *(_QWORD *)(v31 + 24);
      v41 = *(_QWORD *)(v40 + (((unint64_t)v39 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v42 = *(_QWORD *)(v40 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v43 = v42 & (3 << (v37 & 0x3E));
      if (((v41 >> (v39 & 0x3E)) & 3) != 0)
        break;
      if (!v43)
      {
        if (v37 != v39)
        {
          v45 = v39 ^ 1;
          __x = v37;
          v62 = v39 ^ 1;
          operations_research::sat::SatPostsolver::Add(a2, v37, &__x, 2);
          ++v38;
          if (a3)
          {
            __x = v37;
            v62 = v45;
            operations_research::sat::DratProofHandler::AddClause(a3, &__x, 2);
          }
        }
        goto LABEL_40;
      }
      v44 = v39 ^ (((v42 >> v37) & 1) == 0);
      operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v44);
      if (a3)
        goto LABEL_44;
LABEL_40:
      if (v32 == ++v37)
        goto LABEL_17;
    }
    if (v43)
      goto LABEL_40;
    v44 = v37 ^ (((v41 >> v39) & 1) == 0);
    operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v44);
    if (!a3)
      goto LABEL_40;
LABEL_44:
    __x = v44;
    operations_research::sat::DratProofHandler::AddClause(a3, &__x, 1);
    goto LABEL_40;
  }
LABEL_17:
  if (*(_BYTE *)(operations_research::sat::SatSolver::parameters(v46) + 99)
    || *operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__ >= 1
    && (operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
  {
    v17 = google::LogMessage::LogMessage((google::LogMessage *)&__x, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1239);
    v18 = (_QWORD *)google::LogMessage::stream(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Probing. fixed ", 15);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" + ", 3);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" equiv ", 7);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" total ", 7);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__x);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v49[1])
  {
    *(void **)&v50 = v49[1];
    operator delete(v49[1]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  v24 = (char *)v53;
  if (v53)
  {
    v25 = v54;
    v26 = v53;
    if (v54 != v53)
    {
      v27 = (char *)v54;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v27 - 3);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *(v25 - 2) = v28;
          operator delete(v28);
        }
        v25 = (unsigned int **)v27;
      }
      while (v27 != v24);
      v26 = v53;
    }
    v54 = (unsigned int **)v24;
    operator delete(v26);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_22DC073A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  operations_research::MergingPartition::~MergingPartition((operations_research::MergingPartition *)&a13);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a23);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void FindStronglyConnectedComponents<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>(int a1, uint64_t a2, uint64_t a3)
{
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *v6[2];
  void *__p[2];
  __int128 v8;

  *(_OWORD *)__p = 0u;
  v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)v4 = 0u;
  StronglyConnectedComponentsFinder<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents((std::vector<int> *)v3, a1, a2, a3);
  if (__p[1])
  {
    *(void **)&v8 = __p[1];
    operator delete(__p[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v4[1])
  {
    *(void **)&v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_22DC0752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::~StronglyConnectedComponentsFinder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SolveWithPresolve(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  const operations_research::sat::SatParameters *v8;
  _BOOL8 inited;
  uint64_t begin;
  _QWORD *v11;
  operations_research::sat::SatSolver *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 v28;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30;
  uint64_t v31;
  absl::lts_2020_02_25 *v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  operations_research::sat::SatSolver *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  operations_research::sat::SatSolver *v53;
  double v54;
  operations_research::sat::SatSolver *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  operations_research::sat::SatSolver *v64;
  operations_research::sat::SatSolver *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  operations_research::sat::SatSolver *v71;
  operations_research::sat::SatSolver *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v92;
  int v93;
  _BOOL8 v94;
  void *v96;
  void *v97;
  uint64_t v98;
  void *__p;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[4];
  _QWORD v107[74];
  std::vector<int> __src;
  char v109[8];
  void *v110;
  void *v111;
  void *v112;
  void **v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  _BYTE v123[328];
  uint64_t v124;
  _DWORD v125[3];

  v8 = (const operations_research::sat::SatParameters *)operations_research::sat::SatSolver::parameters((operations_research::sat::SatSolver *)*a1);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v123, v8);
  operations_research::sat::SatPostsolver::SatPostsolver((operations_research::sat::SatPostsolver *)v109, *((_DWORD *)*a1 + 4));
  if (v123[99])
    goto LABEL_2;
  if (*_MergedGlobals_18[0] < 1)
  {
    inited = 0;
    goto LABEL_3;
  }
  if (_MergedGlobals_18[0] != &google::kLogSiteUninitialized)
LABEL_2:
    inited = 1;
  else
    inited = google::InitVLOG3__((google *)_MergedGlobals_18, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1);
LABEL_3:
  begin = operations_research::sat::LookForTrivialSatSolution(**a1, fmin(fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0), 1.0), (operations_research::sat::Model *)inited);
  if ((begin & 1) == 0)
  {
    if (*off_2540796E0[0] >= 1
      && (off_2540796E0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540796E0, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v102, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1264);
      v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v102);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"UNSAT during probing.", 21);
LABEL_27:
      google::LogMessage::~LogMessage((google::LogMessage *)&v102);
    }
LABEL_155:
    v26 = 1;
    v84 = v121;
    if (v121)
      goto LABEL_130;
    goto LABEL_131;
  }
  if (*(_DWORD *)((*a1)[26] + 12) == *((_DWORD *)*a1 + 4))
  {
    if (*off_2540796E8[0] >= 1
      && (off_2540796E8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540796E8, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v102, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1269);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v102);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Problem solved by trivial heuristic!", 36);
      google::LogMessage::~LogMessage((google::LogMessage *)&v102);
    }
    *(_QWORD *)(a3 + 8) = 0;
    v12 = (operations_research::sat::SatSolver *)*a1;
    if (*((int *)*a1 + 4) >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 26) + 24)
                        + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v17 = *(_QWORD *)(a3 + 8);
        v18 = *(_QWORD *)(a3 + 16);
        if (v17 == v18 << 6)
        {
          if ((uint64_t)(v17 + 1) < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v19 = v18 << 7;
          if (v19 <= (v17 & 0xFFFFFFFFFFFFFFC0) + 64)
            v19 = (v17 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v17 <= 0x3FFFFFFFFFFFFFFELL)
            v20 = v19;
          else
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          std::vector<BOOL>::reserve(a3, v20);
          v17 = *(_QWORD *)(a3 + 8);
        }
        *(_QWORD *)(a3 + 8) = v17 + 1;
        v21 = *(_QWORD **)a3;
        v22 = v17 >> 6;
        v23 = 1 << v17;
        if ((v16 & (1 << (v13 & 0x3E))) != 0)
          v15 = v21[v22] | v23;
        else
          v15 = v21[v22] & ~v23;
        v21[v22] = v15;
        ++v14;
        v12 = (operations_research::sat::SatSolver *)*a1;
        v13 += 2;
      }
      while (v14 < *((int *)*a1 + 4));
    }
LABEL_128:
    v26 = 2;
    goto LABEL_129;
  }
  v25 = 0;
  v93 = inited;
  v94 = inited;
  v26 = 2;
  do
  {
    v27 = *(unsigned __int8 **)(a2 + 120);
    if (v27)
    {
      v28 = atomic_load(v27);
      if ((v28 & 1) != 0)
        break;
    }
    if (fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0) <= 0.0)
      break;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)begin);
    v30 = CurrentTimeNanos;
    if (*(_QWORD *)(a2 + 24) <= CurrentTimeNanos - *(_QWORD *)(a2 + 8))
      v31 = CurrentTimeNanos - *(_QWORD *)(a2 + 8);
    else
      v31 = *(_QWORD *)(a2 + 24);
    operations_research::RunningMax<long long>::Add((int *)(a2 + 32), v31);
    *(_QWORD *)(a2 + 8) = v30;
    if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * *(int *)(a2 + 68)) + v30 >= *(_QWORD *)(a2 + 16))
    {
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_117;
      v33 = *(double *)(a2 + 96);
      if (*(_BYTE *)(a2 + 72))
      {
        v34 = v33
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v32) - *(_QWORD *)(a2 + 80) + *(_QWORD *)(a2 + 88))
            * -0.000000001;
        if (v34 <= 0.0001)
          goto LABEL_117;
      }
      else
      {
        v34 = v33 + (double)*(uint64_t *)(a2 + 88) * -0.000000001;
        if (v34 <= 0.0001)
        {
LABEL_117:
          *(_QWORD *)(a2 + 16) = 0;
          break;
        }
      }
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 8) + (uint64_t)(v34 * 1000000000.0);
    }
    v35 = *((_DWORD *)*a1 + 4);
    v36 = **a1;
    v37 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v36);
    operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v37, a2);
    v38 = v124;
    v39 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(v36);
    v4 = v4 & 0xFFFFFFFFFF000000 | v94;
    if ((operations_research::sat::Inprocessing::PresolveLoop(v39, v38, v4) & 1) == 0)
    {
      if (*off_2540796F0[0] >= 1
        && (off_2540796F0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_2540796F0, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v102, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1301);
        v92 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v102);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"UNSAT during probing.", 21);
        goto LABEL_27;
      }
      goto LABEL_155;
    }
    v40 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v36);
    v41 = v40[1];
    if (v40[2] != v41)
    {
      v42 = v40[4];
      v43 = (_QWORD *)(v41 + 8 * (v42 / 0xAA));
      v44 = *v43 + 24 * (v42 % 0xAA);
      v45 = *(_QWORD *)(v41 + 8 * ((v40[5] + v42) / 0xAA)) + 24 * ((v40[5] + v42) % 0xAA);
      while (v44 != v45)
      {
        operations_research::sat::SatPostsolver::Add((uint64_t)v109, **(_DWORD **)v44, *(int **)v44, (uint64_t)(*(_QWORD *)(v44 + 8) - *(_QWORD *)v44) >> 2);
        v44 += 24;
        if (v44 - *v43 == 4080)
        {
          v46 = v43[1];
          ++v43;
          v44 = v46;
        }
      }
    }
    memset(&__src, 0, sizeof(__src));
    operations_research::sat::ProbeAndFindEquivalentLiteral((int *)*a1, (uint64_t)v109, a4, &__src);
    v47 = (operations_research::sat::SatSolver *)*a1;
    if (*((_BYTE *)*a1 + 496))
    {
      if (*off_2540796F8[0] >= 1
        && (off_2540796F8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_2540796F8, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v102, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1315);
        v48 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v102);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"UNSAT during probing.", 21);
        google::LogMessage::~LogMessage((google::LogMessage *)&v102);
      }
      v49 = 1;
      v26 = 1;
      begin = (uint64_t)__src.__begin_;
      if (__src.__begin_)
        goto LABEL_89;
    }
    else
    {
      if (*((_BYTE *)v47 + 1312))
      {
        operations_research::sat::SatSolver::Backtrack(v47, 0);
        v50 = (*a1)[26];
        if (*(int *)(v50 + 12) >= 1)
        {
          v51 = 0;
          do
          {
            v52 = operations_research::sat::SatPostsolver::ApplyReverseMapping((uint64_t)v109, *(_DWORD *)(*(_QWORD *)(v50 + 72) + 4 * v51));
            *(_QWORD *)((char *)v121 + (((unint64_t)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
            ++v51;
            v50 = (*a1)[26];
          }
          while (v51 < *(int *)(v50 + 12));
        }
        operations_research::sat::SatPresolver::SatPresolver((operations_research::sat::SatPresolver *)&v102, (operations_research::sat::SatPostsolver *)v109);
        operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)v107, (const operations_research::sat::SatParameters *)v123);
        v107[72] = a4;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v106, (char *)__src.__begin_, (char *)__src.__end_, __src.__end_ - __src.__begin_);
        operations_research::sat::SatSolver::ExtractClauses<operations_research::sat::SatPresolver>((uint64_t)*a1, (uint64_t)&v102);
        v53 = (operations_research::sat::SatSolver *)*a1;
        v54 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)*a1);
        *(double *)(a2 + 112) = *(double *)(a2 + 112) + v54 - *((double *)v53 + 163);
        *((double *)v53 + 163) = v54;
        *(double *)(a2 + 112) = *((double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(**a1)
                                + 14)
                              + *(double *)(a2 + 112);
        v55 = (operations_research::sat::SatSolver *)*a1;
        *a1 = 0;
        if (v55)
        {
          operations_research::sat::SatSolver::~SatSolver(v55);
          MEMORY[0x22E31DF78]();
        }
        v56 = v105 - v104;
        v100 = 0;
        v101 = 0;
        __p = 0;
        if (((unint64_t)(v105 - v104) >> 3))
        {
          if (v56 << 29 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v57 = (int)(v56 >> 3);
          __p = operator new(8 * (((v57 - 1) >> 6) + 1));
          v100 = 0;
          v101 = ((v57 - 1) >> 6) + 1;
          std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v57, 1);
        }
        if ((operations_research::sat::SatPresolver::Presolve((uint64_t)&v102, (uint64_t)&__p, v93) & 1) != 0)
        {
          v96 = 0;
          v97 = 0;
          v98 = 0;
          v125[0] = 0;
          v58 = v104;
          if ((int)((unint64_t)(v105 - v104) >> 3) >= 1)
          {
            v59 = 0;
            v60 = 0;
            v61 = 1;
            do
            {
              if (*(int *)(v58 + (v59 >> 30)) <= 0 && *(int *)(v58 + 4 * v61) < 1)
              {
                gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v96, &operations_research::sat::kNoBooleanVariable);
              }
              else
              {
                gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v96, v125);
                ++v125[0];
              }
              ++v60;
              v58 = v104;
              v61 += 2;
              v59 += 0x200000000;
            }
            while (v60 < (int)((unint64_t)(v105 - v104) >> 3));
          }
          operations_research::sat::SatPostsolver::ApplyMapping((uint64_t)v109, (uint64_t *)&v96);
          if (v96)
          {
            v97 = v96;
            operator delete(v96);
          }
          if (a4)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v125[0] = 0;
            v67 = v104;
            if ((int)((unint64_t)(v105 - v104) >> 3) >= 1)
            {
              v68 = 0;
              v69 = 0;
              v70 = 1;
              do
              {
                if (*(int *)(v67 + (v68 >> 30)) <= 0 && *(int *)(v67 + 4 * v70) < 1)
                {
                  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v96, &operations_research::sat::kNoBooleanVariable);
                }
                else
                {
                  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v96, v125);
                  ++v125[0];
                }
                ++v69;
                v67 = v104;
                v70 += 2;
                v68 += 0x200000000;
              }
              while (v69 < (int)((unint64_t)(v105 - v104) >> 3));
            }
            operations_research::sat::DratProofHandler::ApplyMapping(a4, (uint64_t *)&v96);
            if (v96)
            {
              v97 = v96;
              operator delete(v96);
            }
          }
          v71 = (operations_research::sat::SatSolver *)operator new();
          operations_research::sat::SatSolver::SatSolver(v71);
          v72 = (operations_research::sat::SatSolver *)*a1;
          *a1 = (uint64_t *)v71;
          if (v72)
          {
            operations_research::sat::SatSolver::~SatSolver(v72);
            MEMORY[0x22E31DF78]();
            v71 = (operations_research::sat::SatSolver *)*a1;
          }
          *((_QWORD *)v71 + 165) = a4;
          *(_QWORD *)(*((_QWORD *)v71 + 4) + 384) = a4;
          *(_QWORD *)(*((_QWORD *)v71 + 3) + 136) = a4;
          operations_research::sat::SatSolver::SetParameters((operations_research::sat::SatParameters **)*a1, (const operations_research::sat::SatParameters *)v123);
          operations_research::sat::SatPresolver::LoadProblemIntoSatSolver((operations_research::sat::SatPresolver *)&v102, (operations_research::sat::SatSolver *)*a1);
          if (*((_DWORD *)*a1 + 4) == v35)
            v49 = 5;
          else
            v49 = 0;
          v66 = __p;
          if (!__p)
            goto LABEL_88;
        }
        else
        {
          if (*off_254079708[0] >= 1
            && (off_254079708[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079708, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)&v96, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1351);
            v63 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v96);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"UNSAT during presolve.", 22);
            google::LogMessage::~LogMessage((google::LogMessage *)&v96);
          }
          v64 = (operations_research::sat::SatSolver *)operator new();
          operations_research::sat::SatSolver::SatSolver(v64);
          v65 = (operations_research::sat::SatSolver *)*a1;
          *a1 = (uint64_t *)v64;
          if (v65)
          {
            operations_research::sat::SatSolver::~SatSolver(v65);
            MEMORY[0x22E31DF78]();
          }
          v49 = 1;
          v26 = 1;
          v66 = __p;
          if (!__p)
          {
LABEL_88:
            operations_research::sat::SatPresolver::~SatPresolver((operations_research::sat::SatPresolver *)&v102);
            begin = (uint64_t)__src.__begin_;
            if (!__src.__begin_)
              goto LABEL_90;
LABEL_89:
            __src.__end_ = (std::vector<int>::pointer)begin;
            operator delete((void *)begin);
            goto LABEL_90;
          }
        }
        operator delete(v66);
        goto LABEL_88;
      }
      if (*off_254079700[0] < 1
        || off_254079700[0] == &google::kLogSiteUninitialized
        && !google::InitVLOG3__((google *)off_254079700, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1))
      {
        v49 = 5;
        begin = (uint64_t)__src.__begin_;
        if (__src.__begin_)
          goto LABEL_89;
      }
      else
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v102, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1321);
        v62 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v102);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"The problem is not a pure SAT problem, skipping the SAT specific presolve.", 74);
        google::LogMessage::~LogMessage((google::LogMessage *)&v102);
        v49 = 5;
        begin = (uint64_t)__src.__begin_;
        if (__src.__begin_)
          goto LABEL_89;
      }
    }
LABEL_90:
    if (v49)
    {
      if (v49 != 5)
        goto LABEL_129;
      break;
    }
    ++v25;
  }
  while (v25 != 4);
  v73 = **a1;
  v74 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v73);
  operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v74, a2);
  v75 = *((_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(v73) + 41);
  v76 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(v73);
  if ((operations_research::sat::Inprocessing::PresolveLoop(v76, v75, v94 | 0x10100) & 1) == 0)
    goto LABEL_155;
  v77 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v73);
  v78 = v77[1];
  if (v77[2] != v78)
  {
    v79 = v77[4];
    v80 = (_QWORD *)(v78 + 8 * (v79 / 0xAA));
    v81 = *v80 + 24 * (v79 % 0xAA);
    v82 = *(_QWORD *)(v78 + 8 * ((v77[5] + v79) / 0xAA)) + 24 * ((v77[5] + v79) % 0xAA);
    while (v81 != v82)
    {
      operations_research::sat::SatPostsolver::Add((uint64_t)v109, **(_DWORD **)v81, *(int **)v81, (uint64_t)(*(_QWORD *)(v81 + 8) - *(_QWORD *)v81) >> 2);
      v81 += 24;
      if (v81 - *v80 == 4080)
      {
        v83 = v80[1];
        ++v80;
        v81 = v83;
      }
    }
  }
  v26 = operations_research::sat::SatSolver::SolveWithTimeLimit((operations_research::sat::SatSolver *)*a1, (operations_research::TimeLimit *)a2);
  if ((_DWORD)v26 == 2)
  {
    operations_research::sat::SatPostsolver::ExtractAndPostsolveSolution((operations_research::sat::SatPostsolver *)v109, (const operations_research::sat::SatSolver *)*a1, &v102);
    if (*(_QWORD *)a3)
    {
      operator delete(*(void **)a3);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v102;
    *(_OWORD *)(a3 + 8) = v103;
    goto LABEL_128;
  }
LABEL_129:
  v84 = v121;
  if (v121)
  {
LABEL_130:
    v122 = v84;
    operator delete(v84);
  }
LABEL_131:
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  v85 = v113;
  v86 = v114;
  v116 = 0;
  v87 = (char *)v114 - (char *)v113;
  if ((unint64_t)((char *)v114 - (char *)v113) >= 0x11)
  {
    do
    {
      operator delete(*v85);
      v86 = v114;
      v85 = v113 + 1;
      v113 = v85;
      v87 = (char *)v114 - (char *)v85;
    }
    while ((unint64_t)((char *)v114 - (char *)v85) > 0x10);
  }
  v88 = v87 >> 3;
  if (v88 == 1)
  {
    v89 = 512;
LABEL_141:
    v115 = v89;
  }
  else if (v88 == 2)
  {
    v89 = 1024;
    goto LABEL_141;
  }
  if (v85 != v86)
  {
    do
    {
      v90 = *v85++;
      operator delete(v90);
    }
    while (v85 != v86);
    if (v114 != v113)
      v114 = (void **)((char *)v114 + (((char *)v113 - (char *)v114 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  if (v112)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v123);
  return v26;
}

void sub_22DC08304(_Unwind_Exception *a1)
{
  operations_research::sat::SatPostsolver::~SatPostsolver((operations_research::sat::SatPostsolver *)&STACK[0x4A8]);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x560]);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::ExtractClauses<operations_research::sat::SatPresolver>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int **v9;
  int **i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE v26[16];

  if (*(_BYTE *)(a1 + 496))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.h", 322);
    v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !IsModelUnsat() ", 30);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v26);
  }
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  if (operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)a1))
  {
    if (*(_DWORD *)(a1 + 344) < *(_DWORD *)(*(_QWORD *)(a1 + 208) + 12))
      operations_research::sat::SatSolver::ProcessNewlyFixedVariables((operations_research::sat::SatSolver *)a1);
    operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*(operations_research::sat::LiteralWatchers **)(a1 + 32));
    v4 = 2 * *(int *)(a1 + 16);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 3);
    if (v4 > v5)
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a2 + 392, v4 - v5);
      v6 = *(_QWORD *)(a2 + 416);
      v7 = (*(_QWORD *)(a2 + 424) - v6) >> 2;
      if (v4 <= v7)
      {
        if (v4 < v7)
          *(_QWORD *)(a2 + 424) = v6 + 4 * v4;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a2 + 416), v4 - v7);
      }
    }
    operations_research::sat::BinaryImplicationGraph::ExtractAllBinaryClauses<operations_research::sat::SatPresolver>(*(_QWORD *)(a1 + 24), a2);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(int ***)(v8 + 304);
    for (i = *(int ***)(v8 + 312); v9 != i; ++v9)
    {
      v15 = 0;
      v17 = *v9;
      v18 = *(_QWORD **)(a1 + 32);
      v19 = (unint64_t)*v9
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v9)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (_QWORD)*v9)));
      v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      v21 = v18[42];
      v22 = v18[43];
      v16 = (v20 >> 7) ^ (v21 >> 12);
      v23 = v18[45];
      v24 = 0x101010101010101 * (v20 & 0x7F);
      while (1)
      {
        v11 = v16 & v23;
        v12 = *(_QWORD *)(v21 + v11);
        v13 = ((v12 ^ v24) - 0x101010101010101) & ~(v12 ^ v24) & 0x8080808080808080;
        if (v13)
          break;
LABEL_15:
        if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
          goto LABEL_18;
        v15 += 8;
        v16 = v15 + v11;
      }
      while (1)
      {
        v14 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v23;
        if (*(int **)(v22 + 24 * v14) == v17)
          break;
        v13 &= v13 - 1;
        if (!v13)
          goto LABEL_15;
      }
      if (v14 == v23)
      {
LABEL_18:
        operations_research::sat::SatPresolver::AddClause(a2, v17 + 1, *v17);
        continue;
      }
    }
  }
}

void sub_22DC086DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(unint64_t a1, int *a2, char *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v9;
  int *v11;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  int *v66;
  int *v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  int *v77;
  int *v78;
  int *v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  int v86;
  int v87;
  int v88;
  int *v89;
  int v90;
  int *v91;
  int v92;
  int *v93;
  int v94;
  unint64_t v95;
  int *v96;
  _QWORD *v97;
  int *v98;
  int v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int *v104;
  uint64_t v105;
  int *v106;
  int v107;
  int *v108;
  int v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  int *v113;
  int *v114;
  int v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int *v121;
  unint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  int *v128;
  char *v129;
  char *v130;
  int *v131;
  int v132;
  int *v133;
  char *v134;
  int v135;
  char *v136;
  int v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  int v143;
  uint64_t v144;
  int *v145;
  _QWORD *v146;
  int *v147;
  unint64_t v148;
  _QWORD *v149;
  int *v150;
  unint64_t v151;
  uint64_t v152;
  int *v153;
  char *v154;
  uint64_t v155;
  int **v156;
  uint64_t v157;
  int *v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  int *v163;
  uint64_t v164;
  int v165;
  int *v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  int *v171;
  uint64_t v172;
  unint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int *v181;
  uint64_t *v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  int *v191;
  int *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  int *v199;
  unint64_t v200;
  int *v201;
  int v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  int *v207;
  int *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  unint64_t v217;
  int v218;
  int v219;
  _QWORD *v220;
  int *v221;
  uint64_t v222;
  _QWORD *v223;
  int *v224;
  unint64_t v225;
  _QWORD *v226;
  int *v227;
  uint64_t v228;
  char **v229;
  int v230;
  unint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  __int16 v236;
  char **v237;
  unint64_t v238;
  char *v239;
  char *v240;
  int v241;
  int v242;
  unint64_t v243;
  char *v244;
  char *v245;
  int v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unsigned int v250;

  if ((int *)a4 == a2)
    return;
  v9 = a4;
  v11 = a2;
  while (2)
  {
    v13 = (_QWORD)&a3[-a1] << 7;
    v14 = *(int **)a3;
    v15 = v9 - *(_QWORD *)a3;
    v16 = v15 >> 2;
    v17 = *(char **)a1;
    v18 = (uint64_t)v11 - *(_QWORD *)a1;
    v19 = v18 >> 2;
    v20 = (v15 >> 2) + v13 - (v18 >> 2);
    switch(v20)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((int *)v9 == v14)
          v9 = *((_QWORD *)a3 - 1) + 4096;
        v142 = *(_DWORD *)(v9 - 4);
        v143 = *v11;
        v144 = *(_QWORD *)(*a5 + 328);
        if (*(_QWORD *)(v144 + 24 * v142 + 8) - *(_QWORD *)(v144 + 24 * v142) < *(_QWORD *)(v144 + 24 * v143 + 8)
                                                                                   - *(_QWORD *)(v144 + 24 * v143))
        {
          *v11 = v142;
          *(_DWORD *)(v9 - 4) = v143;
        }
        return;
      case 3uLL:
        if (v18 < -3)
        {
          v145 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10))
                       + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
          if ((int *)v9 != v14)
            goto LABEL_276;
        }
        else
        {
          v145 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v19 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (((_WORD)v19 + 1) & 0x3FF));
          if ((int *)v9 != v14)
            goto LABEL_276;
        }
        v9 = *((_QWORD *)a3 - 1) + 4096;
LABEL_276:
        v211 = *(_QWORD *)(*a5 + 328);
        v212 = *v145;
        v213 = *v11;
        v214 = *(_QWORD *)(v211 + 24 * v212 + 8) - *(_QWORD *)(v211 + 24 * v212);
        v215 = *(_QWORD *)(v211 + 24 * v213 + 8) - *(_QWORD *)(v211 + 24 * v213);
        v216 = *(_DWORD *)(v9 - 4);
        v217 = *(_QWORD *)(v211 + 24 * v216 + 8) - *(_QWORD *)(v211 + 24 * v216);
        if (v214 >= v215)
        {
          if (v217 < v214)
          {
            *v145 = v216;
            *(_DWORD *)(v9 - 4) = v212;
            v218 = *v145;
            v219 = *v11;
            if (*(_QWORD *)(v211 + 24 * v218 + 8) - *(_QWORD *)(v211 + 24 * v218) < *(_QWORD *)(v211 + 24 * v219 + 8)
                                                                                       - *(_QWORD *)(v211 + 24 * v219))
            {
              *v11 = v218;
              *v145 = v219;
            }
          }
        }
        else if (v217 >= v214)
        {
          *v11 = v212;
          *v145 = v213;
          v230 = *(_DWORD *)(v9 - 4);
          if (*(_QWORD *)(v211 + 24 * v230 + 8) - *(_QWORD *)(v211 + 24 * v230) < v215)
          {
            *v145 = v230;
            *(_DWORD *)(v9 - 4) = v213;
          }
        }
        else
        {
          *v11 = v216;
          *(_DWORD *)(v9 - 4) = v213;
        }
        return;
      case 4uLL:
        if (v18 < -3)
        {
          v146 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10));
          v147 = (int *)(*v146 + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
          if ((unint64_t)v18 < 0xFFFFFFFFFFFFFFF9)
          {
            v220 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v19) >> 10));
            v221 = (int *)(*v220 + 4 * (~(1021 - (_WORD)v19) & 0x3FF));
            if ((int *)v9 != v14)
              goto LABEL_286;
            goto LABEL_285;
          }
          v148 = 1;
        }
        else
        {
          v146 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 10));
          v147 = (int *)(*v146 + 4 * ((v19 + 1) & 0x3FF));
          v148 = v19 + 2;
        }
        v220 = (_QWORD *)(a1 + 8 * (v148 >> 10));
        v221 = (int *)(*v220 + 4 * (v148 & 0x3FF));
        if ((int *)v9 != v14)
        {
LABEL_286:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v11, (uint64_t)v146, v147, (uint64_t)v220, v221, (uint64_t)a3, (int *)(v9 - 4), *(_QWORD *)(*a5 + 328));
          return;
        }
LABEL_285:
        v222 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        v9 = v222 + 4096;
        goto LABEL_286;
      case 5uLL:
        if (v18 < -3)
        {
          v149 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10));
          v150 = (int *)(*v149 + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
          if ((unint64_t)v18 < 0xFFFFFFFFFFFFFFF9)
          {
            v223 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v19) >> 10));
            v224 = (int *)(*v223 + 4 * (~(1021 - (_WORD)v19) & 0x3FF));
            if ((unint64_t)v18 < 0xFFFFFFFFFFFFFFF5)
            {
              v226 = (_QWORD *)(a1 - 8 * ((unint64_t)(1020 - v19) >> 10));
              v227 = (int *)(*v226 + 4 * (~(1020 - (_WORD)v19) & 0x3FF));
              if ((int *)v9 != v14)
              {
LABEL_292:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(a1, v11, (uint64_t)v149, v150, (uint64_t)v223, v224, (uint64_t)v226, v227, (uint64_t)a3, (int *)(v9 - 4), (uint64_t)a5);
                return;
              }
LABEL_291:
              v228 = *((_QWORD *)a3 - 1);
              a3 -= 8;
              v9 = v228 + 4096;
              goto LABEL_292;
            }
            v225 = 1;
LABEL_290:
            v226 = (_QWORD *)(a1 + 8 * (v225 >> 10));
            v227 = (int *)(*v226 + 4 * (v225 & 0x3FF));
            if ((int *)v9 != v14)
              goto LABEL_292;
            goto LABEL_291;
          }
          v151 = 1;
        }
        else
        {
          v149 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 10));
          v150 = (int *)(*v149 + 4 * ((v19 + 1) & 0x3FF));
          v151 = v19 + 2;
        }
        v223 = (_QWORD *)(a1 + 8 * (v151 >> 10));
        v224 = (int *)(*v223 + 4 * (v151 & 0x3FF));
        v225 = v19 + 3;
        goto LABEL_290;
      default:
        if ((uint64_t)v20 <= 23)
        {
          v152 = *a5;
          if ((a7 & 1) != 0)
          {
            v153 = v11 + 1;
            if ((char *)(v11 + 1) - v17 == 4096)
            {
              v154 = *(char **)(a1 + 8);
              a1 += 8;
              v17 = v154;
              v153 = (int *)v154;
            }
            if (v153 == (int *)v9)
              return;
            v155 = *(_QWORD *)(v152 + 328);
            while (1)
            {
              v156 = (int **)a1;
              v157 = (uint64_t)v153;
              if (v153 == (int *)v17)
              {
                v156 = (int **)(a1 - 8);
                v157 = *(_QWORD *)(a1 - 8) + 4096;
              }
              v160 = *(_DWORD *)(v157 - 4);
              v158 = (int *)(v157 - 4);
              v159 = v160;
              v161 = *v153;
              v162 = *(_QWORD *)(v155 + 24 * v161 + 8) - *(_QWORD *)(v155 + 24 * v161);
              if (v162 >= *(_QWORD *)(v155 + 24 * v160 + 8) - *(_QWORD *)(v155 + 24 * v160))
              {
                if ((char *)++v153 - v17 == 4096)
                  goto LABEL_220;
              }
              else
              {
                v163 = v153;
                while (1)
                {
                  *v163 = v159;
                  if (v158 == v11)
                    break;
                  v166 = v158;
                  if (v158 == *v156)
                  {
                    v164 = (uint64_t)*--v156;
                    v158 = (int *)(v164 + 4096);
                  }
                  v165 = *--v158;
                  v159 = v165;
                  v163 = v166;
                  if (v162 >= *(_QWORD *)(v155 + 24 * v165 + 8) - *(_QWORD *)(v155 + 24 * v165))
                    goto LABEL_219;
                }
                v166 = v11;
LABEL_219:
                *v166 = v161;
                if ((char *)++v153 - v17 == 4096)
                {
LABEL_220:
                  v167 = *(char **)(a1 + 8);
                  a1 += 8;
                  v17 = v167;
                  v153 = (int *)v167;
                }
              }
              if (v153 == (int *)v9)
                return;
            }
          }
          if (v18 < -3)
          {
            v231 = 1022 - v19;
            LOWORD(v19) = ~(1022 - v19);
            v229 = (char **)(a1 - 8 * (v231 >> 10));
          }
          else
          {
            v229 = (char **)(a1 + 8 * ((unint64_t)++v19 >> 10));
          }
          v232 = *v229;
          v233 = &(*v229)[4 * (v19 & 0x3FF)];
          if (v233 == (char *)v9)
            return;
          v234 = *(_QWORD *)(v152 + 328);
          while (1)
          {
            v235 = (v233 - v232) >> 2;
            if (v233 - v232 < 5)
            {
              v238 = 1024 - v235;
              v236 = ~(_WORD)v238;
              v237 = &v229[-(v238 >> 10)];
            }
            else
            {
              v236 = v235 - 1;
              v237 = &v229[(unint64_t)(v235 - 1) >> 10];
            }
            v239 = *v237;
            v240 = &(*v237)[4 * (v236 & 0x3FF)];
            v241 = *(_DWORD *)v233;
            v242 = *(_DWORD *)v240;
            v243 = *(_QWORD *)(v234 + 24 * v241 + 8) - *(_QWORD *)(v234 + 24 * v241);
            if (v243 < *(_QWORD *)(v234 + 24 * v242 + 8) - *(_QWORD *)(v234 + 24 * v242))
              break;
            v233 += 4;
            if (v233 - v232 == 4096)
              goto LABEL_318;
LABEL_305:
            if (v233 == (char *)v9)
              return;
          }
          v244 = v233;
          do
          {
            v247 = v240;
            *(_DWORD *)v244 = v242;
            if (v240 == v239)
            {
              v245 = *--v237;
              v239 = v245;
              v240 = v245 + 4096;
            }
            v246 = *((_DWORD *)v240 - 1);
            v240 -= 4;
            v242 = v246;
            v244 = v247;
          }
          while (v243 < *(_QWORD *)(v234 + 24 * v246 + 8) - *(_QWORD *)(v234 + 24 * v246));
          *(_DWORD *)v247 = v241;
          v233 += 4;
          if (v233 - v232 != 4096)
            goto LABEL_305;
LABEL_318:
          v248 = v229[1];
          ++v229;
          v232 = v248;
          v233 = v248;
          goto LABEL_305;
        }
        if (a6)
        {
          v21 = v20 >> 1;
          v22 = v19 + (v20 >> 1);
          if (v20 >= 0x81)
          {
            if (v22 < 1)
            {
              v23 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v22) >> 10))
                          + 4 * (~(1023 - (_WORD)v22) & 0x3FF));
              v250 = a7;
              if (v15 >= 5)
                goto LABEL_12;
            }
            else
            {
              v23 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v22 & 0x3FF));
              v250 = a7;
              if (v15 >= 5)
              {
LABEL_12:
                v24 = (int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                            + 4 * ((v16 - 1) & 0x3FF));
                goto LABEL_18;
              }
            }
            v24 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v16) >> 10)]
                        + 4 * (~(1024 - (_WORD)v16) & 0x3FF));
LABEL_18:
            v27 = *(_QWORD *)(*a5 + 328);
            v28 = *v23;
            v29 = *v11;
            v30 = *(_QWORD *)(v27 + 24 * v28 + 8) - *(_QWORD *)(v27 + 24 * v28);
            v31 = *(_QWORD *)(v27 + 24 * v29 + 8) - *(_QWORD *)(v27 + 24 * v29);
            v32 = *v24;
            v33 = *(_QWORD *)(v27 + 24 * v32 + 8) - *(_QWORD *)(v27 + 24 * v32);
            if (v30 >= v31)
            {
              if (v33 < v30)
              {
                *v23 = v32;
                *v24 = v28;
                v34 = *v23;
                v35 = *v11;
                if (*(_QWORD *)(v27 + 24 * v34 + 8) - *(_QWORD *)(v27 + 24 * v34) < *(_QWORD *)(v27 + 24 * v35 + 8)
                                                                                       - *(_QWORD *)(v27 + 24 * v35))
                {
                  *v11 = v34;
                  *v23 = v35;
                }
              }
            }
            else
            {
              if (v33 >= v30)
              {
                *v11 = v28;
                *v23 = v29;
                v45 = *v24;
                if (*(_QWORD *)(v27 + 24 * v45 + 8) - *(_QWORD *)(v27 + 24 * v45) >= v31)
                  goto LABEL_36;
                *v23 = v45;
              }
              else
              {
                *v11 = v32;
              }
              *v24 = v29;
            }
LABEL_36:
            if (v18 < -3)
            {
              v46 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10))
                          + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
              v47 = v21 + v19 - 1;
              v48 = (unint64_t)v47 >> 7;
              if (v47 < 1)
              {
LABEL_38:
                v49 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v47) >> 10))
                            + 4 * (~(1023 - (_WORD)v47) & 0x3FF));
                if (v15 < 9)
                {
LABEL_39:
                  v50 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1025 - v16) >> 10)]
                              + 4 * (~(1025 - (_WORD)v16) & 0x3FF));
                  goto LABEL_43;
                }
LABEL_42:
                v50 = (int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 2) >> 7) & 0x1FFFFFFFFFFFFF8]
                            + 4 * ((v16 - 2) & 0x3FF));
LABEL_43:
                v51 = *v49;
                v52 = *v46;
                v53 = *(_QWORD *)(v27 + 24 * v51 + 8) - *(_QWORD *)(v27 + 24 * v51);
                v54 = *(_QWORD *)(v27 + 24 * v52 + 8) - *(_QWORD *)(v27 + 24 * v52);
                v55 = *v50;
                v56 = *(_QWORD *)(v27 + 24 * v55 + 8) - *(_QWORD *)(v27 + 24 * v55);
                if (v53 >= v54)
                {
                  if (v56 < v53)
                  {
                    *v49 = v55;
                    *v50 = v51;
                    v57 = *v49;
                    v58 = *v46;
                    if (*(_QWORD *)(v27 + 24 * v57 + 8) - *(_QWORD *)(v27 + 24 * v57) < *(_QWORD *)(v27 + 24 * v58 + 8)
                                                                                           - *(_QWORD *)(v27 + 24 * v58))
                    {
                      *v46 = v57;
                      *v49 = v58;
                    }
                  }
                }
                else
                {
                  if (v56 >= v53)
                  {
                    *v46 = v51;
                    *v49 = v52;
                    v62 = *v50;
                    if (*(_QWORD *)(v27 + 24 * v62 + 8) - *(_QWORD *)(v27 + 24 * v62) >= v54)
                      goto LABEL_57;
                    *v49 = v62;
                  }
                  else
                  {
                    *v46 = v55;
                  }
                  *v50 = v52;
                }
LABEL_57:
                if (v18 < -7)
                {
                  v63 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v19) >> 10))
                              + 4 * (~(1021 - (_WORD)v19) & 0x3FF));
                  v64 = v21 + v19 + 1;
                  v65 = (unint64_t)v64 >> 7;
                  if (v64 < 1)
                  {
LABEL_59:
                    v66 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v64) >> 10))
                                + 4 * (~(1023 - (_WORD)v64) & 0x3FF));
                    if (v15 < 13)
                    {
LABEL_60:
                      v67 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1026 - v16) >> 10)]
                                  + 4 * (~(1026 - (_WORD)v16) & 0x3FF));
                      goto LABEL_64;
                    }
LABEL_63:
                    v67 = (int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 3) >> 7) & 0x1FFFFFFFFFFFFF8]
                                + 4 * ((v16 - 3) & 0x3FF));
LABEL_64:
                    v68 = *v66;
                    v69 = *v63;
                    v70 = *(_QWORD *)(v27 + 24 * v68 + 8) - *(_QWORD *)(v27 + 24 * v68);
                    v71 = *(_QWORD *)(v27 + 24 * v69 + 8) - *(_QWORD *)(v27 + 24 * v69);
                    v72 = *v67;
                    v73 = *(_QWORD *)(v27 + 24 * v72 + 8) - *(_QWORD *)(v27 + 24 * v72);
                    if (v70 >= v71)
                    {
                      if (v73 < v70)
                      {
                        *v66 = v72;
                        *v67 = v68;
                        v74 = *v66;
                        v75 = *v63;
                        if (*(_QWORD *)(v27 + 24 * v74 + 8) - *(_QWORD *)(v27 + 24 * v74) < *(_QWORD *)(v27 + 24 * v75 + 8)
                                                                                               - *(_QWORD *)(v27 + 24 * v75))
                        {
                          *v63 = v74;
                          *v66 = v75;
                        }
                      }
                    }
                    else
                    {
                      if (v73 >= v70)
                      {
                        *v63 = v68;
                        *v66 = v69;
                        v76 = *v67;
                        if (*(_QWORD *)(v27 + 24 * v76 + 8) - *(_QWORD *)(v27 + 24 * v76) >= v71)
                          goto LABEL_73;
                        *v66 = v76;
                      }
                      else
                      {
                        *v63 = v72;
                      }
                      *v67 = v69;
                    }
LABEL_73:
                    if (v47 < 1)
                    {
                      v77 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v47) >> 10))
                                  + 4 * (~(1023 - (_WORD)v47) & 0x3FF));
                      if (v22 >= 1)
                      {
LABEL_75:
                        v78 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v22 & 0x3FF));
                        if (v64 >= 1)
                        {
LABEL_76:
                          v79 = (int *)(*(_QWORD *)(a1 + (v65 & 0x1FFFFFFFFFFFFF8)) + 4 * (v64 & 0x3FF));
                          goto LABEL_80;
                        }
LABEL_79:
                        v79 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v64) >> 10))
                                    + 4 * (~(1023 - (_WORD)v64) & 0x3FF));
LABEL_80:
                        v80 = *v78;
                        v81 = *v77;
                        v82 = *(_QWORD *)(v27 + 24 * v80 + 8) - *(_QWORD *)(v27 + 24 * v80);
                        v83 = *(_QWORD *)(v27 + 24 * v81 + 8) - *(_QWORD *)(v27 + 24 * v81);
                        v84 = *v79;
                        v85 = *(_QWORD *)(v27 + 24 * *v79 + 8) - *(_QWORD *)(v27 + 24 * *v79);
                        if (v82 >= v83)
                        {
                          v111 = v85 >= v82;
                          a7 = v250;
                          if (!v111)
                          {
                            *v78 = v84;
                            *v79 = v80;
                            v86 = *v78;
                            v87 = *v77;
                            if (*(_QWORD *)(v27 + 24 * v86 + 8) - *(_QWORD *)(v27 + 24 * v86) < *(_QWORD *)(v27 + 24 * v87 + 8) - *(_QWORD *)(v27 + 24 * v87))
                            {
                              *v77 = v86;
                              *v78 = v87;
                            }
                          }
                        }
                        else if (v85 >= v82)
                        {
                          *v77 = v80;
                          *v78 = v81;
                          v88 = *v79;
                          a7 = v250;
                          if (*(_QWORD *)(v27 + 24 * v88 + 8) - *(_QWORD *)(v27 + 24 * v88) < v83)
                          {
                            *v78 = v88;
                            *v79 = v81;
                          }
                        }
                        else
                        {
                          *v77 = v84;
                          *v79 = v81;
                          a7 = v250;
                        }
                        if (v22 < 1)
                        {
                          v91 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v22) >> 10))
                                      + 4 * (~(1023 - (_WORD)v22) & 0x3FF));
                          v92 = *v11;
                          *v11 = *v91;
                          *v91 = v92;
                          --a6;
                          if ((a7 & 1) == 0)
                            goto LABEL_92;
                        }
                        else
                        {
                          v89 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v22 & 0x3FF));
                          v90 = *v11;
                          *v11 = *v89;
                          *v89 = v90;
                          --a6;
                          if ((a7 & 1) == 0)
                          {
LABEL_92:
                            if (v18 < 5)
                              v93 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v19) >> 10))
                                          + 4 * (~(1024 - (_WORD)v19) & 0x3FF));
                            else
                              v93 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v19 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                          + 4 * ((v19 - 1) & 0x3FF));
                            v94 = *v93;
                            v59 = *v11;
                            v60 = *(_QWORD *)(*a5 + 328);
                            v95 = *(_QWORD *)(v60 + 24 * v94 + 8) - *(_QWORD *)(v60 + 24 * v94);
                            v61 = *(_QWORD *)(v60 + 24 * v59 + 8) - *(_QWORD *)(v60 + 24 * v59);
                            if (v95 < v61)
                              goto LABEL_96;
                            if (v15 < 5)
                            {
                              if (v61 >= *(_QWORD *)(v60
                                                    + 24
                                                    * *(int *)(*(_QWORD *)&a3[-8
                                                                            * ((unint64_t)(1024 - v16) >> 10)]
                                                             + 4 * (~(1024 - (_WORD)v16) & 0x3FF))
                                                    + 8)
                                        - *(_QWORD *)(v60
                                                    + 24
                                                    * *(int *)(*(_QWORD *)&a3[-8
                                                                            * ((unint64_t)(1024 - v16) >> 10)]
                                                             + 4 * (~(1024 - (_WORD)v16) & 0x3FF))))
                              {
LABEL_150:
                                v127 = v11;
                                do
                                {
                                  if ((char *)++v127 - v17 == 4096)
                                  {
                                    v129 = *(char **)(a1 + 8);
                                    a1 += 8;
                                    v17 = v129;
                                    v127 = (int *)v129;
                                  }
                                }
                                while ((a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v127 < v9)
                                     && v61 >= *(_QWORD *)(v60 + 24 * *v127 + 8) - *(_QWORD *)(v60 + 24 * *v127));
                                goto LABEL_157;
                              }
                            }
                            else if (v61 >= *(_QWORD *)(v60
                                                       + 24
                                                       * *(int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                                                + 4 * ((v16 - 1) & 0x3FF))
                                                       + 8)
                                           - *(_QWORD *)(v60
                                                       + 24
                                                       * *(int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                                                + 4 * ((v16 - 1) & 0x3FF))))
                            {
                              goto LABEL_150;
                            }
                            v127 = v11;
                            do
                            {
                              if ((char *)++v127 - v17 == 4096)
                              {
                                v134 = *(char **)(a1 + 8);
                                a1 += 8;
                                v17 = v134;
                                v127 = (int *)v134;
                              }
                            }
                            while (v61 >= *(_QWORD *)(v60 + 24 * *v127 + 8) - *(_QWORD *)(v60 + 24 * *v127));
LABEL_157:
                            if (a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v127 < v9)
                            {
                              v130 = a3;
                              v131 = (int *)v9;
                              do
                              {
                                if (v131 == v14)
                                {
                                  v133 = (int *)*((_QWORD *)v130 - 1);
                                  v130 -= 8;
                                  v14 = v133;
                                  v131 = v133 + 1024;
                                }
                                v132 = *--v131;
                              }
                              while (v61 < *(_QWORD *)(v60 + 24 * v132 + 8) - *(_QWORD *)(v60 + 24 * v132));
                            }
                            else
                            {
                              v130 = a3;
                              v131 = (int *)v9;
                            }
                            while (a1 < (unint64_t)v130 || (char *)a1 == v130 && v127 < v131)
                            {
                              v135 = *v127;
                              *v127 = *v131;
                              *v131 = v135;
                              do
                              {
                                if ((char *)++v127 - v17 == 4096)
                                {
                                  v136 = *(char **)(a1 + 8);
                                  a1 += 8;
                                  v17 = v136;
                                  v127 = (int *)v136;
                                }
                              }
                              while (v61 >= *(_QWORD *)(v60 + 24 * *v127 + 8) - *(_QWORD *)(v60 + 24 * *v127));
                              do
                              {
                                if (v131 == v14)
                                {
                                  v138 = (int *)*((_QWORD *)v130 - 1);
                                  v130 -= 8;
                                  v14 = v138;
                                  v131 = v138 + 1024;
                                }
                                v137 = *--v131;
                              }
                              while (v61 < *(_QWORD *)(v60 + 24 * v137 + 8) - *(_QWORD *)(v60 + 24 * v137));
                            }
                            v139 = (char *)v127 - v17;
                            v140 = v139 >> 2;
                            if (v139 < 5)
                            {
                              v141 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v140) >> 10))
                                           + 4 * (~(1024 - (_WORD)v140) & 0x3FF));
                              if (v141 == v11)
                              {
LABEL_188:
                                a7 = 0;
                                *v141 = v59;
LABEL_5:
                                v11 = v127;
                                if ((int *)v9 != v127)
                                  continue;
                                return;
                              }
                            }
                            else
                            {
                              v141 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v140 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((v140 - 1) & 0x3FF));
                              if (v141 == v11)
                                goto LABEL_188;
                            }
                            *v11 = *v141;
                            goto LABEL_188;
                          }
                        }
LABEL_53:
                        v59 = *v11;
                        v60 = *(_QWORD *)(*a5 + 328);
                        v61 = *(_QWORD *)(v60 + 24 * v59 + 8) - *(_QWORD *)(v60 + 24 * v59);
LABEL_96:
                        v96 = *(int **)a1;
                        v97 = (_QWORD *)a1;
                        v98 = v11;
                        do
                        {
                          if ((char *)++v98 - (char *)v96 == 4096)
                          {
                            v100 = (int *)v97[1];
                            ++v97;
                            v96 = v100;
                            v98 = v100;
                          }
                          v99 = *v98;
                        }
                        while (*(_QWORD *)(v60 + 24 * v99 + 8) - *(_QWORD *)(v60 + 24 * v99) < v61);
                        v101 = v98 - v96;
                        if ((char *)v98 - (char *)v96 < 5)
                        {
                          v105 = v97[-((unint64_t)(1024 - v101) >> 10)] + 4 * (~(1024 - (_WORD)v101) & 0x3FF);
                          v103 = a3;
                          v104 = (int *)v9;
                          if ((int *)v105 == v11)
                          {
LABEL_110:
                            while (v97 < (_QWORD *)v103 || v97 == (_QWORD *)v103 && v98 < v104)
                            {
                              if (v104 == *(int **)v103)
                              {
                                v110 = *((_QWORD *)v103 - 1);
                                v103 -= 8;
                                v104 = (int *)(v110 + 4092);
                                if (*(_QWORD *)(v60 + 24 * *(int *)(v110 + 4092) + 8)
                                   - *(_QWORD *)(v60 + 24 * *(int *)(v110 + 4092)) < v61)
                                  break;
                              }
                              else
                              {
                                v109 = *--v104;
                                if (*(_QWORD *)(v60 + 24 * v109 + 8) - *(_QWORD *)(v60 + 24 * v109) < v61)
                                  break;
                              }
                            }
LABEL_115:
                            v111 = v97 != (_QWORD *)v103 || v98 >= v104;
                            v112 = v111;
                            if (v97 < (_QWORD *)v103)
                              v112 = 0;
                            while (v97 < (_QWORD *)v103 || v97 == (_QWORD *)v103 && v98 < v104)
                            {
                              *v98 = *v104;
                              *v104 = v99;
                              do
                              {
                                if ((char *)++v98 - (char *)v96 == 4096)
                                {
                                  v113 = (int *)v97[1];
                                  ++v97;
                                  v96 = v113;
                                  v98 = v113;
                                }
                                v99 = *v98;
                              }
                              while (*(_QWORD *)(v60 + 24 * v99 + 8) - *(_QWORD *)(v60 + 24 * v99) < v61);
                              v114 = *(int **)v103;
                              do
                              {
                                if (v104 == v114)
                                {
                                  v116 = (int *)*((_QWORD *)v103 - 1);
                                  v103 -= 8;
                                  v114 = v116;
                                  v104 = v116 + 1024;
                                }
                                v115 = *--v104;
                              }
                              while (*(_QWORD *)(v60 + 24 * v115 + 8) - *(_QWORD *)(v60 + 24 * v115) >= v61);
                            }
                            v117 = (char *)v98 - (char *)v96;
                            v118 = v98 - v96;
                            if (v117 < 5)
                            {
                              v122 = 1024 - v118;
                              v120 = (unint64_t)&v97[-(v122 >> 10)];
                              v121 = (int *)(*(_QWORD *)v120 + 4 * (~(_DWORD)v122 & 0x3FFLL));
                              if (v121 == v11)
                                goto LABEL_139;
                            }
                            else
                            {
                              v119 = v118 - 1;
                              v120 = (unint64_t)&v97[v119 >> 10];
                              v121 = (int *)(*(_QWORD *)v120 + 4 * (v119 & 0x3FF));
                              if (v121 == v11)
                              {
LABEL_139:
                                *v121 = v59;
                                if (!v112)
                                  goto LABEL_145;
                                v249 = a6;
                                v123 = a7;
                                v124 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, (char *)v120, (uint64_t)v121, (uint64_t)a5);
                                v125 = (uint64_t)v121 - *(_QWORD *)v120;
                                v126 = v125 >> 2;
                                if (v125 < -3)
                                {
                                  if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v120 - 8 * ((unint64_t)(1022 - v126) >> 10)), (int *)(*(_QWORD *)(v120 - 8 * ((unint64_t)(1022 - v126) >> 10))+ 4 * (~(1022 - (_WORD)v126) & 0x3FF)), a3, v9, (uint64_t)a5))
                                  {
LABEL_142:
                                    a7 = v123;
                                    a6 = v249;
                                    if (v124)
                                    {
                                      v127 = v121 + 1;
                                      if ((int *)((char *)v121 - *(_QWORD *)v120 + 4) == (int *)4096)
                                        goto LABEL_147;
                                      goto LABEL_4;
                                    }
LABEL_145:
                                    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v11, v120, v121, a5, a6, a7 & 1);
                                    v127 = v121 + 1;
                                    if ((int *)((char *)v121 - *(_QWORD *)v120 + 4) == (int *)4096)
                                    {
                                      a7 = 0;
LABEL_147:
                                      v128 = *(int **)(v120 + 8);
                                      v120 += 8;
                                      v127 = v128;
                                      goto LABEL_4;
                                    }
                                    a7 = 0;
LABEL_4:
                                    a1 = v120;
                                    goto LABEL_5;
                                  }
                                }
                                else if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v120 + 8 * ((unint64_t)(v126 + 1) >> 10)), (int *)(*(_QWORD *)(v120 + 8 * ((unint64_t)(v126 + 1) >> 10))+ 4 * ((v126 + 1) & 0x3FF)), a3, v9, (uint64_t)a5))
                                {
                                  goto LABEL_142;
                                }
                                a3 = (char *)v120;
                                v9 = (unint64_t)v121;
                                v127 = v11;
                                a7 = v123;
                                a6 = v249;
                                if (v124)
                                  return;
                                goto LABEL_5;
                              }
                            }
                            *v11 = *v121;
                            goto LABEL_139;
                          }
                        }
                        else
                        {
                          v102 = *(_QWORD *)((char *)v97 + (((unint64_t)(v101 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                               + 4 * ((v101 - 1) & 0x3FF);
                          v103 = a3;
                          v104 = (int *)v9;
                          if ((int *)v102 == v11)
                            goto LABEL_110;
                        }
                        v106 = *(int **)a3;
                        v103 = a3;
                        v104 = (int *)v9;
                        do
                        {
                          if (v104 == v106)
                          {
                            v108 = (int *)*((_QWORD *)v103 - 1);
                            v103 -= 8;
                            v106 = v108;
                            v104 = v108 + 1024;
                          }
                          v107 = *--v104;
                        }
                        while (*(_QWORD *)(v60 + 24 * v107 + 8) - *(_QWORD *)(v60 + 24 * v107) >= v61);
                        goto LABEL_115;
                      }
                    }
                    else
                    {
                      v77 = (int *)(*(_QWORD *)(a1 + (v48 & 0x1FFFFFFFFFFFFF8)) + 4 * (v47 & 0x3FF));
                      if (v22 >= 1)
                        goto LABEL_75;
                    }
                    v78 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v22) >> 10))
                                + 4 * (~(1023 - (_WORD)v22) & 0x3FF));
                    if (v64 >= 1)
                      goto LABEL_76;
                    goto LABEL_79;
                  }
                }
                else
                {
                  v63 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v19 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v19 + 2) & 0x3FF));
                  v64 = v21 + v19 + 1;
                  v65 = (unint64_t)v64 >> 7;
                  if (v64 < 1)
                    goto LABEL_59;
                }
                v66 = (int *)(*(_QWORD *)(a1 + (v65 & 0x1FFFFFFFFFFFFF8)) + 4 * (v64 & 0x3FF));
                if (v15 < 13)
                  goto LABEL_60;
                goto LABEL_63;
              }
            }
            else
            {
              v46 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v19 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v19 + 1) & 0x3FF));
              v47 = v21 + v19 - 1;
              v48 = (unint64_t)v47 >> 7;
              if (v47 < 1)
                goto LABEL_38;
            }
            v49 = (int *)(*(_QWORD *)(a1 + (v48 & 0x1FFFFFFFFFFFFF8)) + 4 * (v47 & 0x3FF));
            if (v15 < 9)
              goto LABEL_39;
            goto LABEL_42;
          }
          if (v22 < 1)
          {
            v25 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v22) >> 10))
                        + 4 * (~(1023 - (_WORD)v22) & 0x3FF));
            if (v15 >= 5)
              goto LABEL_15;
          }
          else
          {
            v25 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v22 & 0x3FF));
            if (v15 >= 5)
            {
LABEL_15:
              v26 = (int *)(*(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v16 - 1) & 0x3FF));
              goto LABEL_26;
            }
          }
          v26 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v16) >> 10)]
                      + 4 * (~(1024 - (_WORD)v16) & 0x3FF));
LABEL_26:
          v36 = *(_QWORD *)(*a5 + 328);
          v37 = *v11;
          v38 = *v25;
          v39 = *(_QWORD *)(v36 + 24 * v37 + 8) - *(_QWORD *)(v36 + 24 * v37);
          v40 = *(_QWORD *)(v36 + 24 * v38 + 8) - *(_QWORD *)(v36 + 24 * v38);
          v41 = *v26;
          v42 = *(_QWORD *)(v36 + 24 * v41 + 8) - *(_QWORD *)(v36 + 24 * v41);
          if (v39 >= v40)
          {
            if (v42 < v39)
            {
              *v11 = v41;
              *v26 = v37;
              v43 = *v11;
              v44 = *v25;
              if (*(_QWORD *)(v36 + 24 * v43 + 8) - *(_QWORD *)(v36 + 24 * v43) < *(_QWORD *)(v36 + 24 * v44 + 8)
                                                                                     - *(_QWORD *)(v36 + 24 * v44))
              {
                *v25 = v43;
                *v11 = v44;
                --a6;
                if ((a7 & 1) == 0)
                  goto LABEL_92;
                goto LABEL_53;
              }
            }
          }
          else
          {
            if (v42 >= v39)
            {
              *v25 = v37;
              *v11 = v38;
              if (*(_QWORD *)(v36 + 24 * *v26 + 8) - *(_QWORD *)(v36 + 24 * *v26) >= v40)
                goto LABEL_52;
              *v11 = *v26;
            }
            else
            {
              *v25 = v41;
            }
            *v26 = v38;
          }
LABEL_52:
          --a6;
          if ((a7 & 1) == 0)
            goto LABEL_92;
          goto LABEL_53;
        }
        v168 = (v20 - 2) >> 1;
        v169 = 1023 - v168;
        do
        {
          v171 = v11;
          v170 = (char *)a1;
          if (v168)
          {
            v172 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
            v173 = v168 + v172;
            if ((uint64_t)(v168 + v172) < 1)
            {
              v170 = (char *)(a1 - 8 * ((v169 - v172) >> 10));
              v171 = (int *)(*(_QWORD *)v170 + 4 * (~((_WORD)v169 - (_WORD)v172) & 0x3FF));
            }
            else
            {
              v170 = (char *)(a1 + 8 * (v173 >> 10));
              v171 = (int *)(*(_QWORD *)v170 + 4 * (v173 & 0x3FF));
            }
          }
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, *a5, v20, v170, v171);
          --v168;
          ++v169;
        }
        while (v168 != -1);
        v174 = *(int **)a3;
        v175 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
        v176 = v13 + ((uint64_t)(v9 - *(_QWORD *)a3) >> 2) - v175;
        if (v176 < 2)
          return;
        while (2)
        {
          while (2)
          {
            v178 = 0;
            v179 = *v11;
            v180 = *a5;
            v181 = v11;
            v182 = (uint64_t *)a1;
            do
            {
              v183 = v181;
              if (v178 == -1)
              {
                v184 = -1;
                v178 = 0;
                if (v176 <= 0)
                  goto LABEL_232;
              }
              else
              {
                v185 = v178 + 1 + (((uint64_t)v181 - *v182) >> 2);
                if (v185 < 1)
                {
                  v186 = 1023 - v185;
                  v182 -= v186 >> 10;
                  v181 = (int *)(*v182 + 4 * (~(_WORD)v186 & 0x3FF));
                  v184 = (2 * v178) | 1;
                  v178 = 2 * v178 + 2;
                  if (v178 >= v176)
                    goto LABEL_232;
                }
                else
                {
                  v182 += (unint64_t)v185 >> 10;
                  v181 = (int *)(*v182 + 4 * (v185 & 0x3FF));
                  v184 = (2 * v178) | 1;
                  v178 = 2 * v178 + 2;
                  if (v178 >= v176)
                    goto LABEL_232;
                }
              }
              v187 = (uint64_t)v181 - *v182;
              v188 = v187 >> 2;
              if (v187 < -3)
                v189 = (int *)(v182[-((unint64_t)(1022 - v188) >> 10)] + 4 * (~(1022 - (_WORD)v188) & 0x3FF));
              else
                v189 = (int *)(*(uint64_t *)((char *)v182 + (((unint64_t)(v188 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v188 + 1) & 0x3FF));
              v190 = *(_QWORD *)(v180 + 328);
              if (*(_QWORD *)(v190 + 24 * *v181 + 8) - *(_QWORD *)(v190 + 24 * *v181) >= *(_QWORD *)(v190 + 24 * *v189 + 8)
                                                                                            - *(_QWORD *)(v190 + 24 * *v189))
              {
LABEL_232:
                v178 = v184;
                goto LABEL_233;
              }
              if ((int *)((char *)++v181 - *v182) == (int *)4096)
              {
                v191 = (int *)v182[1];
                ++v182;
                v181 = v191;
              }
LABEL_233:
              *v183 = *v181;
            }
            while (v178 <= (uint64_t)((unint64_t)(v176 - 2) >> 1));
            if (v174 != (int *)v9)
            {
              v192 = (int *)(v9 - 4);
              if (v181 != (int *)(v9 - 4))
                goto LABEL_249;
LABEL_261:
              *v181 = v179;
              goto LABEL_262;
            }
            v192 = (int *)(*((_QWORD *)a3 - 1) + 4092);
            if (v181 == v192)
              goto LABEL_261;
LABEL_249:
            *v181 = *v192;
            v193 = (uint64_t)(v181 + 1);
            v194 = *v182;
            if (v193 - *v182 == 4096)
            {
              v195 = v182[1];
              ++v182;
              v194 = v195;
              v193 = v195;
            }
            *v192 = v179;
            if ((int *)v193 == v11
              || (v196 = ((v193 - v194) >> 2) - v175 + (((_QWORD)v182 - a1) << 7), v197 = v196 - 2, v196 < 2))
            {
LABEL_262:
              if (v174 != (int *)v9)
                goto LABEL_230;
LABEL_263:
              v207 = (int *)*((_QWORD *)a3 - 1);
              a3 -= 8;
              v174 = v207;
              v9 = (unint64_t)(v207 + 1023);
              v177 = v176-- <= 2;
              if (v177)
                return;
              continue;
            }
            break;
          }
          v198 = v197 >> 1;
          v199 = v11;
          if (v197 < 2)
            goto LABEL_256;
          v200 = v198 + v175;
          if ((uint64_t)(v198 + v175) < 1)
          {
            v199 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v200) >> 10)) + 4 * (~(1023 - (_WORD)v200) & 0x3FF));
            if (v194 == v193)
              goto LABEL_257;
          }
          else
          {
            v199 = (int *)(*(_QWORD *)(a1 + ((v200 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v200 & 0x3FF));
LABEL_256:
            if (v194 == v193)
LABEL_257:
              v193 = *(v182 - 1) + 4096;
          }
          v203 = *(_DWORD *)(v193 - 4);
          v201 = (int *)(v193 - 4);
          v202 = v203;
          v204 = *(_QWORD *)(*a5 + 328);
          v205 = *(_QWORD *)(v204 + 24 * v203 + 8) - *(_QWORD *)(v204 + 24 * v203);
          if (*(_QWORD *)(v204 + 24 * *v199 + 8) - *(_QWORD *)(v204 + 24 * *v199) >= v205)
            goto LABEL_262;
          v206 = *v199;
          do
          {
            v208 = v199;
            *v201 = v206;
            if (!v198)
              break;
            v209 = (v198 - 1) >> 1;
            v199 = v11;
            if (v198 >= 3)
            {
              v210 = v209 + v175;
              if ((uint64_t)(v209 + v175) < 1)
                v199 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v210) >> 10)) + 4 * (~(1023 - (_WORD)v210) & 0x3FF));
              else
                v199 = (int *)(*(_QWORD *)(a1 + ((v210 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v210 & 0x3FF));
            }
            v206 = *v199;
            v201 = v208;
            v198 = (v198 - 1) >> 1;
          }
          while (*(_QWORD *)(v204 + 24 * v206 + 8) - *(_QWORD *)(v204 + 24 * v206) < v205);
          *v208 = v202;
          if (v174 == (int *)v9)
            goto LABEL_263;
LABEL_230:
          v9 -= 4;
          v177 = v176-- <= 2;
          if (!v177)
            continue;
          return;
        }
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10, uint64_t a11)
{
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)a11 + 328));
  v15 = *a10;
  v16 = *a8;
  v17 = *(_QWORD *)(*(_QWORD *)a11 + 328);
  if (*(_QWORD *)(v17 + 24 * v15 + 8) - *(_QWORD *)(v17 + 24 * v15) < *(_QWORD *)(v17 + 24 * v16 + 8)
                                                                         - *(_QWORD *)(v17 + 24 * v16))
  {
    *a8 = v15;
    *a10 = v16;
    v18 = *a8;
    v19 = *a6;
    if (*(_QWORD *)(v17 + 24 * v18 + 8) - *(_QWORD *)(v17 + 24 * v18) < *(_QWORD *)(v17 + 24 * v19 + 8)
                                                                           - *(_QWORD *)(v17 + 24 * v19))
    {
      *a6 = v18;
      *a8 = v19;
      v20 = *a6;
      v21 = *a4;
      if (*(_QWORD *)(v17 + 24 * v20 + 8) - *(_QWORD *)(v17 + 24 * v20) < *(_QWORD *)(v17 + 24 * v21 + 8)
                                                                             - *(_QWORD *)(v17 + 24 * v21))
      {
        *a4 = v20;
        *a6 = v21;
        v22 = *a4;
        v23 = *a2;
        if (*(_QWORD *)(v17 + 24 * v22 + 8) - *(_QWORD *)(v17 + 24 * v22) < *(_QWORD *)(v17 + 24 * v23 + 8)
                                                                               - *(_QWORD *)(v17 + 24 * v23))
        {
          *a2 = v22;
          *a4 = v23;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  char *v10;
  char *v11;
  int *v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  char *v18;
  int *v19;
  unint64_t v20;
  char *v21;
  int *v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  char *v32;
  int *v33;
  unint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  char *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  int *v60;
  int v61;
  int *v62;
  char *v63;
  _DWORD *v64;
  int v65;
  int v66;
  unint64_t v67;
  int *v68;
  _DWORD *v69;
  int v70;
  int *v71;
  _DWORD *v72;
  unint64_t v73;

  if ((int *)a4 == a2)
    return 1;
  v5 = (uint64_t)a3;
  v6 = *(_QWORD *)a3;
  v7 = (uint64_t)a2 - *(_QWORD *)a1;
  v8 = v7 >> 2;
  switch(((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v7 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v6 == a4)
        a4 = *((_QWORD *)a3 - 1) + 4096;
      v14 = *(_DWORD *)(a4 - 4);
      v15 = *a2;
      v16 = *(_QWORD *)(*(_QWORD *)a5 + 328);
      if (*(_QWORD *)(v16 + 24 * v14 + 8) - *(_QWORD *)(v16 + 24 * v14) < *(_QWORD *)(v16 + 24 * v15 + 8)
                                                                             - *(_QWORD *)(v16 + 24 * v15))
      {
        *a2 = v14;
        *(_DWORD *)(a4 - 4) = v15;
      }
      return 1;
    case 3:
      if (v7 < -3)
      {
        v17 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v8) >> 10)] + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
        if (v6 != a4)
          goto LABEL_23;
      }
      else
      {
        v17 = (int *)(*(_QWORD *)&a1[((unint64_t)(v8 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + 1) & 0x3FF));
        if (v6 != a4)
          goto LABEL_23;
      }
      a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_23:
      v25 = *(_QWORD *)(*(_QWORD *)a5 + 328);
      v26 = *v17;
      v27 = *a2;
      v28 = *(_QWORD *)(v25 + 24 * v26 + 8) - *(_QWORD *)(v25 + 24 * v26);
      v29 = *(_QWORD *)(v25 + 24 * v27 + 8) - *(_QWORD *)(v25 + 24 * v27);
      v30 = *(_DWORD *)(a4 - 4);
      v31 = *(_QWORD *)(v25 + 24 * v30 + 8) - *(_QWORD *)(v25 + 24 * v30);
      if (v28 >= v29)
      {
        if (v31 < v28)
        {
          *v17 = v30;
          *(_DWORD *)(a4 - 4) = v26;
          v38 = *v17;
          v39 = *a2;
          if (*(_QWORD *)(v25 + 24 * v38 + 8) - *(_QWORD *)(v25 + 24 * v38) < *(_QWORD *)(v25 + 24 * v39 + 8)
                                                                                 - *(_QWORD *)(v25 + 24 * v39))
          {
            *a2 = v38;
            *v17 = v39;
            return 1;
          }
        }
      }
      else
      {
        if (v31 < v28)
        {
          *a2 = v30;
          *(_DWORD *)(a4 - 4) = v27;
          return 1;
        }
        *a2 = v26;
        *v17 = v27;
        v52 = *(_DWORD *)(a4 - 4);
        if (*(_QWORD *)(v25 + 24 * v52 + 8) - *(_QWORD *)(v25 + 24 * v52) < v29)
        {
          *v17 = v52;
          *(_DWORD *)(a4 - 4) = v27;
          return 1;
        }
      }
      return 1;
    case 4:
      if (v7 >= -3)
      {
        v21 = &a1[8 * ((unint64_t)(v8 + 1) >> 10)];
        v22 = (int *)(*(_QWORD *)v21 + 4 * ((v8 + 1) & 0x3FF));
        v23 = v8 + 2;
        goto LABEL_37;
      }
      v21 = &a1[-8 * ((unint64_t)(1022 - v8) >> 10)];
      v22 = (int *)(*(_QWORD *)v21 + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF9)
      {
        v23 = 1;
LABEL_37:
        v40 = &a1[8 * (v23 >> 10)];
        v41 = (int *)(*(_QWORD *)v40 + 4 * (v23 & 0x3FF));
        if (v6 != a4)
          goto LABEL_39;
        goto LABEL_38;
      }
      v40 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
      v41 = (int *)(*(_QWORD *)v40 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
      if (v6 == a4)
      {
LABEL_38:
        v42 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        a4 = v42 + 4096;
      }
LABEL_39:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v21, v22, (uint64_t)v40, v41, v5, (int *)(a4 - 4), *(_QWORD *)(*(_QWORD *)a5 + 328));
      return 1;
    case 5:
      if (v7 >= -3)
      {
        v18 = &a1[8 * ((unint64_t)(v8 + 1) >> 10)];
        v19 = (int *)(*(_QWORD *)v18 + 4 * ((v8 + 1) & 0x3FF));
        v20 = v8 + 2;
LABEL_28:
        v32 = &a1[8 * (v20 >> 10)];
        v33 = (int *)(*(_QWORD *)v32 + 4 * (v20 & 0x3FF));
        v34 = v8 + 3;
        goto LABEL_29;
      }
      v18 = &a1[-8 * ((unint64_t)(1022 - v8) >> 10)];
      v19 = (int *)(*(_QWORD *)v18 + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF9)
      {
        v20 = 1;
        goto LABEL_28;
      }
      v32 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
      v33 = (int *)(*(_QWORD *)v32 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF5)
      {
        v34 = 1;
LABEL_29:
        v35 = &a1[8 * (v34 >> 10)];
        v36 = (int *)(*(_QWORD *)v35 + 4 * (v34 & 0x3FF));
        if (v6 != a4)
          goto LABEL_31;
        goto LABEL_30;
      }
      v73 = 1020 - v8;
      v35 = &a1[-8 * (v73 >> 10)];
      v36 = (int *)(*(_QWORD *)v35 + 4 * (~(_WORD)v73 & 0x3FF));
      if (v6 == a4)
      {
LABEL_30:
        v37 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        a4 = v37 + 4096;
      }
LABEL_31:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>((uint64_t)a1, a2, (uint64_t)v18, v19, (uint64_t)v32, v33, (uint64_t)v35, v36, v5, (int *)(a4 - 4), a5);
      return 1;
    default:
      if (v7 <= -8)
      {
        v10 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
        v11 = *(char **)v10;
        v12 = (int *)(*(_QWORD *)v10 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
        v13 = 1022 - v8;
        goto LABEL_20;
      }
      v10 = &a1[8 * ((unint64_t)(v8 + 2) >> 10)];
      v11 = *(char **)v10;
      v12 = (int *)(*(_QWORD *)v10 + 4 * ((v8 + 2) & 0x3FF));
      if (v8 == -1)
      {
        v13 = 1023;
LABEL_20:
        v24 = (int *)(*(_QWORD *)&a1[-8 * (v13 >> 10)] + 4 * (~(_WORD)v13 & 0x3FF));
        goto LABEL_41;
      }
      v24 = (int *)(*(_QWORD *)&a1[((unint64_t)(v8 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + 1) & 0x3FF));
LABEL_41:
      v43 = *(_QWORD *)(*(_QWORD *)a5 + 328);
      v44 = *v24;
      v45 = *a2;
      v46 = *(_QWORD *)(v43 + 24 * v44 + 8) - *(_QWORD *)(v43 + 24 * v44);
      v47 = *(_QWORD *)(v43 + 24 * v45 + 8) - *(_QWORD *)(v43 + 24 * v45);
      v48 = *v12;
      v49 = *(_QWORD *)(v43 + 24 * v48 + 8) - *(_QWORD *)(v43 + 24 * v48);
      if (v46 >= v47)
      {
        if (v49 < v46)
        {
          *v24 = v48;
          *v12 = v44;
          v50 = *v24;
          v51 = *a2;
          if (*(_QWORD *)(v43 + 24 * v50 + 8) - *(_QWORD *)(v43 + 24 * v50) < *(_QWORD *)(v43 + 24 * v51 + 8)
                                                                                 - *(_QWORD *)(v43 + 24 * v51))
          {
            *a2 = v50;
            *v24 = v51;
          }
        }
      }
      else
      {
        if (v49 >= v46)
        {
          *a2 = v44;
          *v24 = v45;
          v53 = *v12;
          if (*(_QWORD *)(v43 + 24 * v53 + 8) - *(_QWORD *)(v43 + 24 * v53) >= v47)
            goto LABEL_54;
          *v24 = v53;
        }
        else
        {
          *a2 = v48;
        }
        *v12 = v45;
      }
LABEL_54:
      v54 = ((char *)v12 - v11) >> 2;
      if ((char *)v12 - v11 < -3)
      {
        v59 = 1022 - v54;
        v56 = &v10[-8 * (v59 >> 10)];
        v57 = *(_DWORD **)v56;
        v58 = ~(_DWORD)v59 & 0x3FFLL;
      }
      else
      {
        v55 = v54 + 1;
        v56 = &v10[8 * (v55 >> 10)];
        v57 = *(_DWORD **)v56;
        v58 = v55 & 0x3FF;
      }
      v60 = &v57[v58];
      if (v60 == (int *)a4)
        return 1;
      v61 = 0;
      while (1)
      {
        v62 = v60;
        v63 = v56;
        v64 = v57;
        v65 = *v60;
        v66 = *v12;
        v67 = *(_QWORD *)(v43 + 24 * v65 + 8) - *(_QWORD *)(v43 + 24 * v65);
        if (v67 < *(_QWORD *)(v43 + 24 * v66 + 8) - *(_QWORD *)(v43 + 24 * v66))
        {
          v68 = v60;
          while (1)
          {
            *v68 = v66;
            if (v12 == a2)
              break;
            v71 = v12;
            if (v12 == (int *)v11)
            {
              v69 = (_DWORD *)*((_QWORD *)v10 - 1);
              v10 -= 8;
              v11 = (char *)v69;
              v12 = v69 + 1024;
            }
            v70 = *--v12;
            v66 = v70;
            v68 = v71;
            if (v67 >= *(_QWORD *)(v43 + 24 * v70 + 8) - *(_QWORD *)(v43 + 24 * v70))
              goto LABEL_68;
          }
          v71 = a2;
LABEL_68:
          *v71 = v65;
          if (++v61 == 8)
            break;
        }
        v60 = v62 + 1;
        v57 = v64;
        v56 = v63;
        if ((char *)(v62 + 1) - (char *)v64 == 4096)
        {
          v56 = v63 + 8;
          v57 = (_DWORD *)*((_QWORD *)v63 + 1);
          v60 = v57;
        }
        v11 = (char *)v64;
        v10 = v63;
        v12 = v62;
        if (v60 == (int *)a4)
          return 1;
      }
      v72 = v62 + 1;
      if ((char *)(v62 + 1) - (char *)v64 == 4096)
        v72 = (_DWORD *)*((_QWORD *)v63 + 1);
      result = v72 == (_DWORD *)a4;
      break;
  }
  return result;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v9 = *a4;
  v10 = *a2;
  v11 = *(_QWORD *)(a9 + 24 * v9 + 8) - *(_QWORD *)(a9 + 24 * v9);
  v12 = *(_QWORD *)(a9 + 24 * v10 + 8) - *(_QWORD *)(a9 + 24 * v10);
  v13 = *a6;
  v14 = *(_QWORD *)(a9 + 24 * v13 + 8) - *(_QWORD *)(a9 + 24 * v13);
  if (v11 >= v12)
  {
    if (v14 >= v11)
    {
      v15 = *a6;
      goto LABEL_13;
    }
    *a4 = v13;
    *a6 = v9;
    v16 = *a4;
    v17 = *a2;
    if (*(_QWORD *)(a9 + 24 * v16 + 8) - *(_QWORD *)(a9 + 24 * v16) >= *(_QWORD *)(a9 + 24 * v17 + 8)
                                                                          - *(_QWORD *)(a9 + 24 * v17))
    {
      v15 = v9;
      v13 = v9;
      goto LABEL_13;
    }
    *a2 = v16;
    *a4 = v17;
    v13 = *a6;
    goto LABEL_11;
  }
  v15 = *a2;
  if (v14 >= v11)
  {
    *a2 = v9;
    *a4 = v10;
    v13 = *a6;
    if (*(_QWORD *)(a9 + 24 * v13 + 8) - *(_QWORD *)(a9 + 24 * v13) < v12)
    {
      *a4 = v13;
      goto LABEL_9;
    }
LABEL_11:
    v15 = v13;
    goto LABEL_13;
  }
  *a2 = v13;
LABEL_9:
  *a6 = v10;
  v13 = v10;
LABEL_13:
  v18 = *a8;
  if (*(_QWORD *)(a9 + 24 * v18 + 8) - *(_QWORD *)(a9 + 24 * v18) < *(_QWORD *)(a9 + 24 * v15 + 8)
                                                                       - *(_QWORD *)(a9 + 24 * v15))
  {
    *a6 = v18;
    *a8 = v13;
    v19 = *a6;
    v20 = *a4;
    if (*(_QWORD *)(a9 + 24 * v19 + 8) - *(_QWORD *)(a9 + 24 * v19) < *(_QWORD *)(a9 + 24 * v20 + 8)
                                                                         - *(_QWORD *)(a9 + 24 * v20))
    {
      *a4 = v19;
      *a6 = v20;
      v21 = *a4;
      v22 = *a2;
      if (*(_QWORD *)(a9 + 24 * v21 + 8) - *(_QWORD *)(a9 + 24 * v21) < *(_QWORD *)(a9 + 24 * v22 + 8)
                                                                           - *(_QWORD *)(a9 + 24 * v22))
      {
        *a2 = v21;
        *a4 = v22;
      }
    }
  }
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;

  if (a6 == a2)
  {
    v6 = 0;
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  else
  {
    v6 = (((uint64_t)a6 - *(_QWORD *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(_QWORD *)result) >> 2);
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  v8 = v7 >> 1;
  if (v8 >= v6)
  {
    v9 = 2 * v6;
    v10 = (2 * v6) | 1;
    v11 = ((uint64_t)a2 - *(_QWORD *)result) >> 2;
    v12 = v11 + v10;
    if (v11 + v10 < 1)
    {
      v19 = 1023 - v12;
      v13 = &result[-8 * (v19 >> 10)];
      v14 = *(_QWORD *)v13;
      v15 = (int *)(*(_QWORD *)v13 + 4 * (~(_WORD)v19 & 0x3FF));
      v16 = v9 + 2;
      if (v9 + 2 < a4)
      {
LABEL_8:
        v17 = ((uint64_t)v15 - v14) >> 2;
        if ((uint64_t)v15 - v14 < -3)
          v18 = (int *)(*(_QWORD *)&v13[-8 * ((unint64_t)(1022 - v17) >> 10)]
                      + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        else
          v18 = (int *)(*(_QWORD *)&v13[((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                      + 4 * ((v17 + 1) & 0x3FF));
        v21 = *v18;
        v20 = *(_QWORD *)(a3 + 328);
        if (*(_QWORD *)(v20 + 24 * *v15 + 8) - *(_QWORD *)(v20 + 24 * *v15) < *(_QWORD *)(v20 + 24 * v21 + 8)
                                                                                 - *(_QWORD *)(v20 + 24 * v21))
        {
          if ((int *)((char *)++v15 - v14) == (int *)4096)
            v15 = (int *)*((_QWORD *)v13 + 1);
          v10 = v16;
        }
LABEL_17:
        v22 = *v15;
        v23 = *a6;
        v24 = *(_QWORD *)(v20 + 24 * v23 + 8) - *(_QWORD *)(v20 + 24 * v23);
        if (*(_QWORD *)(v20 + 24 * v22 + 8) - *(_QWORD *)(v20 + 24 * v22) < v24)
          return result;
        while (1)
        {
          *a6 = v22;
          a6 = v15;
          if (v8 < v10)
          {
LABEL_33:
            *a6 = v23;
            return result;
          }
          v25 = (2 * v10) | 1;
          v26 = v25 + v11;
          if (v25 + v11 < 1)
          {
            v29 = 1023 - v26;
            v27 = &result[-8 * (v29 >> 10)];
            v28 = *(_QWORD *)v27;
            v15 = (int *)(*(_QWORD *)v27 + 4 * (~(_DWORD)v29 & 0x3FFLL));
            v10 = 2 * v10 + 2;
            if (v10 >= a4)
              goto LABEL_20;
          }
          else
          {
            v27 = &result[8 * (v26 >> 10)];
            v28 = *(_QWORD *)v27;
            v15 = (int *)(*(_QWORD *)v27 + 4 * (v26 & 0x3FF));
            v10 = 2 * v10 + 2;
            if (v10 >= a4)
              goto LABEL_20;
          }
          v30 = ((uint64_t)v15 - v28) >> 2;
          if ((uint64_t)v15 - v28 < -3)
            v31 = (int *)(*(_QWORD *)&v27[-8 * ((unint64_t)(1022 - v30) >> 10)]
                        + 4 * (~(1022 - (_WORD)v30) & 0x3FF));
          else
            v31 = (int *)(*(_QWORD *)&v27[((unint64_t)(v30 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                        + 4 * ((v30 + 1) & 0x3FF));
          if (*(_QWORD *)(v20 + 24 * *v15 + 8) - *(_QWORD *)(v20 + 24 * *v15) < *(_QWORD *)(v20 + 24 * *v31 + 8)
                                                                                   - *(_QWORD *)(v20 + 24 * *v31))
          {
            if ((int *)((char *)++v15 - v28) == (int *)4096)
              v15 = (int *)*((_QWORD *)v27 + 1);
            goto LABEL_21;
          }
LABEL_20:
          v10 = v25;
LABEL_21:
          v22 = *v15;
          if (*(_QWORD *)(v20 + 24 * v22 + 8) - *(_QWORD *)(v20 + 24 * v22) < v24)
            goto LABEL_33;
        }
      }
    }
    else
    {
      v13 = &result[8 * (v12 >> 10)];
      v14 = *(_QWORD *)v13;
      v15 = (int *)(*(_QWORD *)v13 + 4 * (v12 & 0x3FF));
      v16 = v9 + 2;
      if (v9 + 2 < a4)
        goto LABEL_8;
    }
    v20 = *(_QWORD *)(a3 + 328);
    goto LABEL_17;
  }
  return result;
}

void std::__tree<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::__assign_unique<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const*>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
LABEL_36:
      v21 = a1;
      v22 = 0;
LABEL_42:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v21, v22);
      goto LABEL_43;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v33 = (uint64_t *)v10[1];
          if (!v33)
            break;
          do
          {
            v10 = v33;
            v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      while (1)
      {
        v12 = *v8;
        v13 = *a2;
        v14 = (uint64_t **)(a1 + 8);
        v15 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v12;
              v16 = *(_DWORD *)((char *)v12 + 25);
              if (v13 >= v16)
                break;
              v12 = (uint64_t *)*v12;
              v14 = v15;
              if (!*v15)
                goto LABEL_19;
            }
            if (v16 >= v13)
              break;
            v12 = (uint64_t *)v12[1];
            if (!v12)
            {
              v14 = v15 + 1;
              goto LABEL_19;
            }
          }
          v18 = v10;
          ++a2;
        }
        else
        {
LABEL_19:
          *(_DWORD *)((char *)v9 + 25) = v13;
          *v9 = 0;
          v9[1] = 0;
          v9[2] = (uint64_t)v15;
          *v14 = v9;
          v17 = **(_QWORD **)a1;
          if (v17)
          {
            *(_QWORD *)a1 = v17;
            v9 = *v14;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v9);
          ++*(_QWORD *)(a1 + 16);
          if (!v10)
          {
            ++a2;
            goto LABEL_36;
          }
          v18 = (uint64_t *)v10[2];
          if (v18)
          {
            v19 = (uint64_t *)*v18;
            if ((uint64_t *)*v18 == v10)
            {
              *v18 = 0;
              while (1)
              {
                v20 = (_QWORD *)v18[1];
                if (!v20)
                  break;
                do
                {
                  v18 = v20;
                  v20 = (_QWORD *)*v20;
                }
                while (v20);
              }
            }
            else
            {
              for (v18[1] = 0; v19; v19 = (uint64_t *)v18[1])
              {
                do
                {
                  v18 = v19;
                  v19 = (uint64_t *)*v19;
                }
                while (v19);
              }
            }
          }
          v9 = v10;
          ++a2;
        }
        v10 = v18;
        if (a2 == a3)
          goto LABEL_38;
      }
    }
    v18 = v10;
LABEL_38:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, v9);
    if (v18)
    {
      for (i = (_QWORD *)v18[2]; i; i = (_QWORD *)i[2])
        v18 = i;
      v21 = a1;
      v22 = v18;
      goto LABEL_42;
    }
  }
LABEL_43:
  if (a2 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    do
    {
      v26 = *v24;
      v27 = *a2;
      v28 = (uint64_t **)(a1 + 8);
      v29 = (uint64_t **)(a1 + 8);
      if (*v24)
      {
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v26;
            v30 = *(_DWORD *)((char *)v26 + 25);
            if (v27 >= v30)
              break;
            v26 = *v29;
            v28 = v29;
            if (!*v29)
              goto LABEL_55;
          }
          if (v30 >= v27)
            break;
          v26 = v29[1];
          if (!v26)
          {
            v28 = v29 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        v31 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v31 + 25) = v27;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = v29;
        *v28 = (uint64_t *)v31;
        v32 = **(_QWORD **)a1;
        if (v32)
        {
          *(_QWORD *)a1 = v32;
          v25 = *v28;
        }
        else
        {
          v25 = (uint64_t *)v31;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v25);
        ++*(_QWORD *)(a1 + 16);
      }
      ++a2;
    }
    while (a2 != a3);
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 32 * (v5 - v4) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  v9 = v6 - v8;
  v10 = a2 > v9;
  v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity((uint64_t)a1, v11);
    v7 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    v8 = a1[4] + v7;
  }
  v12 = (_QWORD *)(v4 + 8 * (v8 >> 8));
  if (v5 == v4)
  {
    v13 = 0;
    if (!a2)
      return;
  }
  else
  {
    v13 = *v12 + 16 * v8;
    if (!a2)
      return;
  }
  v14 = a2 + ((v13 - *v12) >> 4);
  if (v14 < 1)
  {
    v16 = 255 - v14;
    LOBYTE(v14) = ~(-1 - v14);
    v15 = &v12[-(v16 >> 8)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 8];
  }
  v17 = *v15 + 16 * v14;
  if (v13 != v17)
  {
    while (1)
    {
      v18 = v17;
      if (v12 != v15)
        v18 = *v12 + 4096;
      if (v13 == v18)
      {
        if (v12 == v15)
          goto LABEL_27;
      }
      else
      {
        v19 = v18 - v13 - 16;
        v20 = (_QWORD *)v13;
        if (v19 < 0x10)
          goto LABEL_30;
        v21 = (v19 >> 4) + 1;
        v20 = (_QWORD *)(v13 + 16 * (v21 & 0x1FFFFFFFFFFFFFFELL));
        v22 = (_QWORD *)(v13 + 16);
        v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 2) = -1;
          *v22 = -1;
          *(v22 - 1) = 0;
          v22[1] = 0;
          v22 += 4;
          v23 -= 2;
        }
        while (v23);
        if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_30:
          do
          {
            *v20 = -1;
            v20[1] = 0;
            v20 += 2;
          }
          while (v20 != (_QWORD *)v18);
        }
        v7 += (v18 - v13) >> 4;
        if (v12 == v15)
        {
LABEL_27:
          a1[5] = v7;
          return;
        }
      }
      v24 = v12[1];
      ++v12;
      v13 = v24;
      if (v24 == v17)
        goto LABEL_27;
    }
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 8);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 255;
        else
          v116 = 256;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 8);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_22DC0B8D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22DC0B920()
{
  __cxa_end_catch();
  JUMPOUT(0x22DC0B928);
}

void std::vector<operations_research::sat::SatPresolver::PQElement>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_35;
      v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[2 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v5 + 2;
      v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v18 - 2) = -1;
        *v18 = -1;
        *(v18 - 1) = 0;
        v18[1] = 0;
        v18 += 4;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *v6 = -1;
          v6[1] = 0;
          v6 += 2;
        }
        while (v6 != &v5[2 * a2]);
      }
      v6 = &v5[2 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  v7 = (_QWORD *)*a1;
  v8 = ((uint64_t)v5 - *a1) >> 4;
  v9 = v8 + a2;
  if ((v8 + a2) >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(16 * v11);
    v13 = (uint64_t)&v12[16 * v8];
    v14 = v13 + 16 * a2;
    v15 = (_QWORD *)v13;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    v12 = 0;
    v13 = 16 * v8;
    v14 = 16 * v8 + 16 * a2;
    v15 = (_QWORD *)(16 * v8);
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
    {
      do
      {
LABEL_24:
        *v15 = -1;
        v15[1] = 0;
        v15 += 2;
      }
      while (v15 != (_QWORD *)v14);
      goto LABEL_25;
    }
  }
  v20 = v16 + 1;
  v15 = (_QWORD *)(v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL));
  v21 = (_QWORD *)(v13 + 16);
  v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v21 - 2) = -1;
    *v21 = -1;
    *(v21 - 1) = 0;
    v21[1] = 0;
    v21 += 4;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
LABEL_28:
      operator delete(v25);
  }
  else
  {
    do
    {
      v24 = v13 - 16;
      *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
      v6 -= 2;
      v13 -= 16;
    }
    while (v6 != v7);
    v25 = (void *)*a1;
    *a1 = v24;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
      goto LABEL_28;
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = 32 * (v7 - v6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  v12 = a2 > v11;
  v13 = a2 - v11;
  if (v12)
  {
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity((uint64_t)a1, v13);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v14 = (_QWORD *)(v6 + 8 * (v10 >> 8));
  if (v7 == v6)
  {
    v15 = 0;
    if (a2)
      goto LABEL_9;
LABEL_12:
    v18 = v15;
    v17 = v14;
    goto LABEL_24;
  }
  v15 = *v14 + 16 * v10;
  if (!a2)
    goto LABEL_12;
LABEL_9:
  v16 = a2 + ((v15 - *v14) >> 4);
  if (v16 < 1)
  {
    v19 = 255 - v16;
    LOBYTE(v16) = ~(-1 - v16);
    v17 = &v14[-(v19 >> 8)];
  }
  else
  {
    v17 = &v14[(unint64_t)v16 >> 8];
  }
  v18 = *v17 + 16 * v16;
LABEL_24:
  while (v15 != v18)
  {
    v20 = v18;
    if (v14 != v17)
      v20 = *v14 + 4096;
    if (v15 == v20)
    {
      a1[5] = v9;
      if (v14 == v17)
        return;
    }
    else
    {
      v21 = (_OWORD *)v15;
      do
        *v21++ = *a3;
      while (v21 != (_OWORD *)v20);
      v9 = a1[5] + ((v20 - v15) >> 4);
      a1[5] = v9;
      if (v14 == v17)
        return;
    }
    v22 = v14[1];
    ++v14;
    v15 = v22;
  }
}

void StronglyConnectedComponentsFinder<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents(std::vector<int> *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::vector<int> *v6;
  std::vector<int> *v7;
  int *begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  signed int v20;
  signed int v21;
  std::vector<int>::pointer v22;
  int v23;
  unint64_t v24;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v26;
  int *v27;
  _QWORD *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int *v33;
  char *v34;
  uint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  int *v43;
  std::vector<int>::pointer v44;
  unint64_t v45;
  std::vector<int>::pointer v46;
  unint64_t v47;
  std::vector<int>::pointer v48;
  std::vector<int>::pointer v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  int *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  int *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  int *v81;
  int *v82;
  int v83;
  uint64_t v84;
  int v85;
  int *v86;
  std::vector<int>::pointer v87;
  std::vector<int>::pointer v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  _OWORD *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  int *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void **p_begin;
  uint64_t v112;
  std::vector<int> *v114;
  void **v115;
  std::vector<int> *v116;
  unint64_t v117;
  std::vector<int>::pointer v118;
  std::vector<int>::value_type __u[2];

  v6 = a1;
  a1->__end_ = a1->__begin_;
  p_begin = (void **)&a1[1].__begin_;
  a1[1].__end_ = a1[1].__begin_;
  v7 = a1 + 2;
  __u[0] = 0;
  std::vector<int>::assign(a1 + 2, a2, __u);
  begin = v6[3].__begin_;
  v115 = (void **)&v6[3].__begin_;
  v6[3].__end_ = begin;
  if (a2 < 1)
    return;
  v9 = 0;
  v10 = 0;
  v11 = a2;
  v112 = a4;
  v116 = v7;
  v109 = a2;
  v114 = v6;
  while (2)
  {
    if (v7->__begin_[v9])
      goto LABEL_4;
    value = v6[3].__end_cap_.__value_;
    v110 = v9;
    v117 = v10;
    if (begin >= value)
    {
      v14 = 1;
      v15 = (char *)value - (char *)begin;
      if ((unint64_t)(v15 >> 1) > 1)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 62)
LABEL_117:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (int *)operator new(4 * v16);
        v18 = v17;
        *v17 = v110;
        v13 = (uint64_t)(v17 + 1);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        MEMORY[0] = v9;
        v13 = 4;
      }
      v6[3].__begin_ = v18;
      v6[3].__end_ = (std::vector<int>::pointer)v13;
      v6[3].__end_cap_.__value_ = &v17[v16];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *begin = v9;
      v13 = (uint64_t)(begin + 1);
    }
    v6[3].__end_ = (std::vector<int>::pointer)v13;
    while (2)
    {
      v21 = *(_DWORD *)(v13 - 4);
      v19 = (int *)(v13 - 4);
      v20 = v21;
      v22 = v7->__begin_;
      v23 = v7->__begin_[v21];
      if (v23)
      {
        v6[3].__end_ = v19;
        if ((_DWORD)v117 != v23)
          goto LABEL_21;
        v24 = (int)v117 - 1;
        v26 = v6->__begin_;
        end = v6->__end_;
        v27 = &v6->__begin_[v24];
        v118 = end;
        *(_QWORD *)__u = v27;
        v28 = *(_QWORD **)(v112 + 8);
        if ((unint64_t)v28 >= *(_QWORD *)(v112 + 16))
        {
          v32 = std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>((char **)v112, (const void **)__u, (const void **)&v118);
        }
        else
        {
          *v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          if (end - v26 != v24)
          {
            v29 = (char *)end - (char *)v27;
            if ((char *)end - (char *)v27 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v30 = (char *)operator new((char *)end - (char *)v27);
            *v28 = v30;
            v28[1] = v30;
            v31 = &v30[4 * (v29 >> 2)];
            v28[2] = v31;
            memcpy(v30, v27, v29);
            v28[1] = v31;
            v7 = v116;
          }
          v32 = (char *)(v28 + 3);
          *(_QWORD *)(v112 + 8) = v28 + 3;
        }
        *(_QWORD *)(v112 + 8) = v32;
        v44 = v6->__begin_;
        v45 = v6->__end_ - v6->__begin_;
        if (v24 >= v45)
        {
          if (v24 <= v45)
            goto LABEL_49;
        }
        else
        {
          v46 = v7->__begin_;
          v47 = (int)v117 - 1;
          do
            v46[v44[v47++]] = 0x7FFFFFFF;
          while (v45 > v47);
          if (v24 <= v45)
          {
            v6->__end_ = &v44[v24];
            goto LABEL_49;
          }
        }
        std::vector<int>::__append(v6, v24 - v45);
LABEL_49:
        v49 = v6[1].__begin_;
        v48 = v6[1].__end_;
        v6[1].__end_ = v48 - 1;
        if (v49 == v48 - 1)
          v117 = 0;
        else
          v117 = *(v48 - 2);
        goto LABEL_21;
      }
      v34 = (char *)v6->__end_;
      v33 = v6->__end_cap_.__value_;
      if (v34 < (char *)v33)
      {
        *(_DWORD *)v34 = v20;
        v35 = (uint64_t)(v34 + 4);
        goto LABEL_61;
      }
      v36 = v6->__begin_;
      v37 = v34 - (char *)v6->__begin_;
      v38 = v37 >> 2;
      v39 = (v37 >> 2) + 1;
      if (v39 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = (char *)v33 - (char *)v36;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 62)
          goto LABEL_117;
        v42 = operator new(4 * v41);
        v43 = (int *)&v42[4 * v38];
        *v43 = v20;
        v35 = (uint64_t)(v43 + 1);
        if (v34 == (char *)v36)
          goto LABEL_58;
        goto LABEL_52;
      }
      v42 = 0;
      v43 = (int *)(4 * v38);
      *(_DWORD *)(4 * v38) = v20;
      v35 = 4 * v38 + 4;
      if (v34 != (char *)v36)
      {
LABEL_52:
        v50 = v34 - 4 - (char *)v36;
        if (v50 < 0x2C)
          goto LABEL_123;
        if ((unint64_t)(v34 - &v42[v37]) < 0x20)
          goto LABEL_123;
        v51 = (v50 >> 2) + 1;
        v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v34[-v52];
        v43 = (int *)((char *)v43 - v52);
        v54 = &v42[4 * v38 - 16];
        v55 = v34 - 16;
        v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        v34 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_123:
          do
          {
            v58 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--v43 = v58;
          }
          while (v34 != (char *)v36);
        }
      }
LABEL_58:
      v6->__begin_ = v43;
      v6->__end_ = (std::vector<int>::pointer)v35;
      v6->__end_cap_.__value_ = (int *)&v42[4 * v41];
      if (v36)
      {
        operator delete(v36);
        v7 = v116;
        v22 = v116->__begin_;
      }
      else
      {
        v7 = v116;
      }
LABEL_61:
      v6->__end_ = (std::vector<int>::pointer)v35;
      v59 = (v35 - (unint64_t)v6->__begin_) >> 2;
      v22[v20] = v59;
      v61 = (char *)v6[1].__end_;
      v60 = v6[1].__end_cap_.__value_;
      v117 = v59;
      if (v61 >= (char *)v60)
      {
        v63 = (char *)*p_begin;
        v64 = v61 - (_BYTE *)*p_begin;
        v65 = v64 >> 2;
        v66 = (v64 >> 2) + 1;
        if (v66 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v67 = (char *)v60 - v63;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 62)
            goto LABEL_117;
          v69 = operator new(4 * v68);
          v70 = (int *)&v69[4 * v65];
          *v70 = v117;
          v62 = (uint64_t)(v70 + 1);
          if (v61 == v63)
            goto LABEL_80;
        }
        else
        {
          v69 = 0;
          v70 = (int *)(4 * v65);
          *(_DWORD *)(4 * v65) = v117;
          v62 = 4 * v65 + 4;
          if (v61 == v63)
          {
LABEL_80:
            v6[1].__begin_ = v70;
            v6[1].__end_ = (std::vector<int>::pointer)v62;
            v6[1].__end_cap_.__value_ = (int *)&v69[4 * v68];
            if (v63)
              operator delete(v63);
            goto LABEL_82;
          }
        }
        v71 = v61 - 4 - v63;
        if (v71 < 0x2C)
          goto LABEL_124;
        if ((unint64_t)(v61 - &v69[v64]) < 0x20)
          goto LABEL_124;
        v72 = (v71 >> 2) + 1;
        v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        v74 = &v61[-v73];
        v70 = (int *)((char *)v70 - v73);
        v75 = &v69[4 * v65 - 16];
        v76 = v61 - 16;
        v77 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 8;
        }
        while (v77);
        v61 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          do
          {
            v79 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *--v70 = v79;
          }
          while (v61 != v63);
        }
        goto LABEL_80;
      }
      *(_DWORD *)v61 = v59;
      v62 = (uint64_t)(v61 + 4);
LABEL_82:
      v6[1].__end_ = (std::vector<int>::pointer)v62;
      v80 = operations_research::sat::PropagationGraph::operator[](a3, v20);
      v82 = *(int **)v80;
      v81 = *(int **)(v80 + 8);
      if (*(int **)v80 == v81)
        goto LABEL_21;
      v83 = 0x7FFFFFFF;
      do
      {
        v84 = *v82;
        v85 = v7->__begin_[v84];
        if (!v85)
        {
          v87 = v6[3].__end_;
          v86 = v6[3].__end_cap_.__value_;
          if (v87 < v86)
          {
            *v87 = v84;
            v6[3].__end_ = v87 + 1;
            goto LABEL_86;
          }
          v88 = (std::vector<int>::pointer)*v115;
          v89 = (char *)v87 - (_BYTE *)*v115;
          v90 = v89 >> 2;
          v91 = (v89 >> 2) + 1;
          if (v91 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v92 = (char *)v86 - (char *)v88;
          if (v92 >> 1 > v91)
            v91 = v92 >> 1;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
            v93 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            if (v93 >> 62)
              goto LABEL_117;
            v94 = operator new(4 * v93);
            v95 = (int *)&v94[4 * v90];
            *v95 = v84;
            v96 = (uint64_t)(v95 + 1);
            if (v87 != v88)
              goto LABEL_99;
          }
          else
          {
            v94 = 0;
            v95 = (int *)(4 * v90);
            *(_DWORD *)(4 * v90) = v84;
            v96 = 4 * v90 + 4;
            if (v87 != v88)
            {
LABEL_99:
              v97 = (char *)(v87 - 1) - (char *)v88;
              if (v97 >= 0x2C)
              {
                v98 = (char *)v87 - &v94[v89];
                v7 = v116;
                if (v98 >= 0x20)
                {
                  v99 = (v97 >> 2) + 1;
                  v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                  v101 = &v87[v100 / 0xFFFFFFFFFFFFFFFCLL];
                  v95 = (int *)((char *)v95 - v100);
                  v102 = &v94[4 * v90 - 16];
                  v103 = (__int128 *)(v87 - 4);
                  v104 = v99 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 8;
                  }
                  while (v104);
                  v87 = v101;
                  if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_108;
                }
              }
              else
              {
                v7 = v116;
              }
              do
              {
                v106 = *--v87;
                *--v95 = v106;
              }
              while (v87 != v88);
LABEL_108:
              v6 = v114;
              v114[3].__begin_ = v95;
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              v114[3].__end_cap_.__value_ = (int *)&v94[4 * v93];
              if (v88)
                operator delete(v88);
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              goto LABEL_86;
            }
          }
          v7 = v116;
          goto LABEL_108;
        }
        if (v85 < v83)
          v83 = v7->__begin_[v84];
LABEL_86:
        ++v82;
      }
      while (v82 != v81);
      if (v83 < (int)v117)
      {
        v107 = v6[1].__end_;
        do
        {
          v108 = *(v107 - 2);
          --v107;
        }
        while ((int)v108 > v83);
        v117 = v108;
        v6[1].__end_ = v107;
      }
LABEL_21:
      begin = v6[3].__begin_;
      v13 = (uint64_t)v6[3].__end_;
      if (begin != (int *)v13)
        continue;
      break;
    }
    v11 = v109;
    v9 = v110;
    v10 = v117;
LABEL_4:
    if (++v9 != v11)
      continue;
    break;
  }
}

void sub_22DC0C480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a13 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PropagationGraph::operator[](uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  operations_research::sat::SatSolver::Backtrack(*(operations_research::sat::SatSolver **)(a1 + 24), 0);
  if (operations_research::sat::SatSolver::deterministic_time(*(operations_research::sat::SatSolver **)(a1 + 24)) <= *(double *)(a1 + 32))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(v4 + 208);
    v6 = a2;
    if (((*(_QWORD *)(*(_QWORD *)(v5 + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 & 0x3E)) & 3) == 0)
    {
      v8 = *(int *)(v5 + 12);
      operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v4, v6);
      v9 = *(_QWORD *)(a1 + 24);
      if (*(int *)(v9 + 304) >= 1)
      {
        v10 = v8 + 1;
        v11 = *(_QWORD *)(v9 + 208);
        if ((int)v8 + 1 < *(_DWORD *)(v11 + 12))
        {
          v12 = *(char **)(a1 + 8);
          while (1)
          {
            v14 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4 * v10);
            v15 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)v12 >= v15)
              break;
            *(_DWORD *)v12 = v14;
            v13 = (uint64_t)(v12 + 4);
LABEL_8:
            *(_QWORD *)(a1 + 8) = v13;
            ++v10;
            v11 = *(_QWORD *)(v9 + 208);
            v12 = (char *)v13;
            if (v10 >= *(int *)(v11 + 12))
              return a1;
          }
          v16 = *(char **)a1;
          v17 = (uint64_t)&v12[-*(_QWORD *)a1];
          v18 = v17 >> 2;
          v19 = (v17 >> 2) + 1;
          if (v19 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v20 = v15 - (_QWORD)v16;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            if (v21 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v22 = operator new(4 * v21);
            v23 = &v22[4 * v18];
            *v23 = v14;
            v13 = (uint64_t)(v23 + 1);
            if (v12 == v16)
              goto LABEL_33;
          }
          else
          {
            v22 = 0;
            v23 = (_DWORD *)(4 * v18);
            *(_DWORD *)(4 * v18) = v14;
            v13 = 4 * v18 + 4;
            if (v12 == v16)
              goto LABEL_33;
          }
          v24 = v12 - 4 - v16;
          if (v24 >= 0xBC)
          {
            if (&v22[v17 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
            {
              v25 = v12;
            }
            else if (&v12[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
            {
              v25 = v12;
            }
            else if ((unint64_t)(v12 - &v22[v17]) >= 0x20)
            {
              v26 = (v24 >> 2) + 1;
              v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              v25 = &v12[-v27];
              v23 = (_DWORD *)((char *)v23 - v27);
              v28 = &v22[4 * v18 - 16];
              v29 = v12 - 16;
              v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v31 = *(_OWORD *)v29;
                *(v28 - 1) = *((_OWORD *)v29 - 1);
                *v28 = v31;
                v28 -= 2;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_33:
                *(_QWORD *)a1 = v23;
                *(_QWORD *)(a1 + 8) = v13;
                *(_QWORD *)(a1 + 16) = &v22[4 * v21];
                if (v16)
                {
                  operator delete(v16);
                  v9 = *(_QWORD *)(a1 + 24);
                }
                goto LABEL_8;
              }
            }
            else
            {
              v25 = v12;
            }
          }
          else
          {
            v25 = v12;
          }
          do
          {
            v32 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *--v23 = v32;
          }
          while (v25 != v16);
          goto LABEL_33;
        }
      }
    }
  }
  return a1;
}

void operations_research::sat::BinaryImplicationGraph::ExtractAllBinaryClauses<operations_research::sat::SatPresolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v20;
  unint64_t i;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *__p;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _DWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v3 = *(_QWORD *)(a1 + 192);
  v2 = *(_QWORD *)(a1 + 200);
  if ((int)((unint64_t)(v2 - v3) >> 5) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (_QWORD *)(v3 + 32 * v5);
      v9 = *v6;
      v8 = (unsigned int *)(v6 + 1);
      v7 = v9;
      if ((v9 & 1) != 0)
        v8 = *(unsigned int **)v8;
      if (v7 >= 2)
      {
        v10 = v5 ^ 1;
        v11 = &v8[v7 >> 1];
        do
        {
          v23 = *v8;
          if ((int)v10 < (int)v23)
          {
            v20 = 0;
            v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v10)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v10));
            v24 = (((unint64_t)(v12 + (int)v23) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v12 + (int)v23));
            for (i = (v24 >> 7) ^ ((unint64_t)__p >> 12); ; i = v20 + v13)
            {
              v13 = i & v28;
              v14 = *(_QWORD *)((char *)__p + v13);
              v15 = ((v14 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                                  * (v24 & 0x7F))) & 0x8080808080808080;
              if (v15)
                break;
LABEL_14:
              if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
              {
                v22 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::prepare_insert((uint64_t *)&__p, v24);
                *(_QWORD *)(v27 + 8 * v22) = v10 | (v23 << 32);
                v30[0] = v5 ^ 1;
                v30[1] = v23;
                operations_research::sat::SatPresolver::AddClause(a2, v30, 2);
                goto LABEL_19;
              }
              v20 += 8;
            }
            while (1)
            {
              v16 = (int *)(v27 + 8 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v28));
              v18 = *v16;
              v17 = v16[1];
              if (v18 == (_DWORD)v10 && v17 == (_DWORD)v23)
                break;
              v15 &= v15 - 1;
              if (!v15)
                goto LABEL_14;
            }
          }
LABEL_19:
          ++v8;
        }
        while (v8 != v11);
        v3 = *(_QWORD *)(a1 + 192);
        v2 = *(_QWORD *)(a1 + 200);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v2 - v3) >> 5));
    if ((_QWORD)v28)
    {
      operator delete(__p);
      __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v29 = 0;
      *(_QWORD *)&v28 = 0;
      v27 = 0uLL;
    }
  }
  if (*((_QWORD *)&v28 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v28 + 1));
}

void sub_22DC0C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 8 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = a1[2];
  a1[5] = (char *)(v9 - (_QWORD)v10);
  v11 = a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v13 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[(_QWORD)v4] & 0x80000000) == 0)
    {
      v17 = &v5[8 * (_QWORD)v12];
      v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v17)))
          + *((int *)v17 + 1);
      v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v22 = (v14 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v15 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v13 += v14;
      v16 = v19 & 0x7F;
      v20[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_QWORD *)&a1[1][8 * v15] = *(_QWORD *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(_QWORD *)(result + 8) + 8 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(_QWORD *)(result + 8) + 8 * v14))))
          + *(int *)(*(_QWORD *)(result + 8) + 8 * v14 + 4);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_QWORD *)(v25 + 8 * v18) = *(_QWORD *)(v25 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8 * v14);
          *(_QWORD *)(v25 + 8 * v14) = *(_QWORD *)(v25 + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void operations_research::sat::SequentialLoop(uint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v4 = v3 - v2;
  if (v3 == v2)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v5 = (char *)operator new(v3 - v2);
    v13 = v5;
    v15 = &v5[8 * (v4 >> 3)];
    bzero(v5, v4 & 0xFFFFFFFFFFFFFFF8);
    v14 = v15;
    v6 = 0;
    if (v2 != v3)
      goto LABEL_9;
  }
  while (1)
  {
    if (v9 == -1)
      break;
    v10 = 8 * v9;
    ++*(_QWORD *)&v5[v10];
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*a1 + v10) + 24))(v16, *(_QWORD *)(*a1 + v10), v6);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *))(*v17 + 48))(v17);
    v7 = v17;
    if (v17 == v16)
    {
      v7 = v16;
      v8 = 4;
    }
    else
    {
      if (!v17)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v11, v12);
LABEL_8:
    ++v6;
    v2 = (char *)*a1;
    v3 = (char *)a1[1];
    if ((char *)*a1 != v3)
    {
      do
      {
LABEL_9:
        (*(void (**)(_QWORD))(**(_QWORD **)v2 + 32))(*(_QWORD *)v2);
        v2 += 8;
      }
      while (v2 != v3);
    }
  }
  if (v5)
    operator delete(v5);
}

void sub_22DC0D1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::`anonymous namespace'::NextSubsolverToSchedule(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _BYTE v15[16];

  v2 = *a1;
  if (a1[1] == *a1)
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = 0xFFFFFFFFLL;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v5) + 16))(*(_QWORD *)(v2 + 8 * v5))
      && ((_DWORD)v6 == -1 || *(_QWORD *)(*a2 + 8 * v5) < *(_QWORD *)(*a2 + 8 * (int)v6)))
    {
      v6 = v5;
    }
    ++v5;
    v2 = *a1;
  }
  while (v5 < (a1[1] - *a1) >> 3);
  if ((_DWORD)v6 == -1
  {
    return v6;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 44);
  v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Scheduling ", 11);
  v9 = *(_QWORD *)(*a1 + 8 * (int)v6);
  if (*(char *)(v9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(v9 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::LogMessage::~LogMessage((google::LogMessage *)v15);
  return v6;
}

void sub_22DC0D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DC0D3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::DeterministicLoop(uint64_t *a1, int a2, int a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char __p[18];
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD v23[3];
  _QWORD *v24;
  unint64_t v25[30];

  v25[28] = *MEMORY[0x24BDAC8D0];
  LODWORD(v25[0]) = a2;
  LODWORD(v20) = 0;
  if (a2 < 1)
  {
    v20 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v25, (int)&v20, "num_threads > 0");
    if (v20)
    {
      google::LogMessageFatal::LogMessageFatal(v25, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 87, &v20);
      google::LogMessage::stream((google::LogMessage *)v25);
      goto LABEL_39;
    }
  }
  LODWORD(v25[0]) = a3;
  *(_DWORD *)__p = 0;
  if (a3 <= 0)
  {
    v20 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v25, (int)__p, "batch_size > 0");
    if (v20)
    {
      google::LogMessageFatal::LogMessageFatal(v25, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 88, &v20);
      google::LogMessage::stream((google::LogMessage *)v25);
LABEL_39:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
    }
  }
  else if (a3 == 1)
  {
    operations_research::sat::SequentialLoop(a1);
    return;
  }
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
    if (a3 <= 0)
    {
LABEL_33:
      v19 = 17;
      strcpy(__p, "DeterministicLoop");
      operations_research::ThreadPool::ThreadPool((uint64_t)v25, (uint64_t)__p, a2);
      if (v19 < 0)
        operator delete(*(void **)__p);
      operations_research::ThreadPool::StartWorkers((operations_research::ThreadPool *)v25);
      operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v25);
      if (v9)
        goto LABEL_31;
      return;
    }
  }
  else
  {
    if (v8 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (uint64_t *)operator new(v6 - v7);
    v20 = v9;
    v22 = &v9[v8 >> 3];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    v21 = &v9[v8 >> 3];
    if (a3 <= 0)
    {
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)v7 + 32))(*(_QWORD *)v7);
        v7 += 8;
      }
      while (v7 != v6);
      goto LABEL_33;
    }
  }
  v10 = 0;
  v11 = (_QWORD *)*a1;
  v12 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v12)
  {
    do
    {
LABEL_18:
      (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
      ++v11;
    }
    while (v11 != v12);
  }
LABEL_19:
  v19 = 17;
  strcpy(__p, "DeterministicLoop");
  operations_research::ThreadPool::ThreadPool((uint64_t)v25, (uint64_t)__p, a2);
  if (v19 < 0)
    operator delete(*(void **)__p);
  operations_research::ThreadPool::StartWorkers((operations_research::ThreadPool *)v25);
  v13 = 0;
  while (1)
  {
    if (v16 == -1)
      break;
    v17 = 8 * v16;
    ++v9[(unint64_t)v17 / 8];
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*a1 + v17) + 24))(v23, *(_QWORD *)(*a1 + v17), v10 + v13);
    operations_research::ThreadPool::Schedule((uint64_t)v25, v23);
    v14 = v24;
    if (v24 == v23)
    {
      v14 = v23;
      v15 = 4;
    }
    else
    {
      if (!v24)
        goto LABEL_24;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_24:
    if (a3 == (_DWORD)++v13)
    {
      v10 += v13;
      operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v25);
LABEL_17:
      v11 = (_QWORD *)*a1;
      v12 = (_QWORD *)a1[1];
      if ((_QWORD *)*a1 == v12)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v10 += v13;
  operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v25);
  if ((_DWORD)v13)
    goto LABEL_17;
  if (v9)
  {
LABEL_31:
    v21 = v9;
    operator delete(v9);
  }
}

void sub_22DC0D76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DC0D774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DC0D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)&a22);
  if (!v22)
    _Unwind_Resume(a1);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void operations_research::sat::NonDeterministicLoop(uint64_t *a1, int a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  absl::lts_2020_02_25::Mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  absl::lts_2020_02_25::Mutex *v21;
  int v22;
  absl::lts_2020_02_25::Mutex *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _QWORD *v59;
  int v60;
  std::string v61;
  __int128 v62;
  uint64_t *v63;
  _QWORD v64[3];
  _QWORD *v65;
  char __p[21];
  char v67;
  char *v68;
  unint64_t v69[30];

  v69[28] = *MEMORY[0x24BDAC8D0];
  LODWORD(v69[0]) = a2;
  LODWORD(v52) = 0;
  if (a2 <= 0)
  {
    *(_QWORD *)__p = google::MakeCheckOpString<int,int>((int)v69, (int)&v52, "num_threads > 0");
    if (*(_QWORD *)__p)
    {
      google::LogMessageFatal::LogMessageFatal(v69, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 119, (uint64_t **)__p);
      google::LogMessage::stream((google::LogMessage *)v69);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v69);
    }
  }
  else if (a2 == 1)
  {
    operations_research::sat::SequentialLoop(a1);
    return;
  }
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v67 = 20;
  strcpy(__p, "NonDeterministicLoop");
  operations_research::ThreadPool::ThreadPool((uint64_t)v69, (uint64_t)__p, a2);
  if (v67 < 0)
    operator delete(*(void **)__p);
  operations_research::ThreadPool::StartWorkers((operations_research::ThreadPool *)v69);
  v6 = *a1;
  v5 = a1[1];
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    v52 = v8;
    v54 = &v8[8 * (v7 >> 3)];
    bzero(v8, v7 & 0xFFFFFFFFFFFFFFF8);
    v53 = &v8[8 * (v7 >> 3)];
  }
  v9 = 0;
  while (1)
  {
    while (1)
    {
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)&v57, v4);
      v17 = v55;
      if (v55 == a2)
        absl::lts_2020_02_25::CondVar::Wait((absl::lts_2020_02_25::CondVar *)&v56, (absl::lts_2020_02_25::Mutex *)&v57);
      absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)&v57, v10, v11, v12, v13, v14, v15, v16);
      v18 = (_QWORD *)*a1;
      v19 = (_QWORD *)a1[1];
      if ((_QWORD *)*a1 != v19)
      {
        do
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 32))(*v18);
          ++v18;
        }
        while (v18 != v19);
      }
      v22 = v20;
      if (v20 == -1)
        break;
      ++*(_QWORD *)&v8[8 * v20];
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)&v57, v21);
      ++v55;
      absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)&v57, v23, v24, v25, v26, v27, v28, v29);
      v30 = *(_QWORD *)(*a1 + 8 * v22);
      (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(__p, v30, v9);
      v31 = *(_QWORD *)(*a1 + 8 * v22);
      if (*(char *)(v31 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
      }
      else
      {
        v32 = *(_OWORD *)(v31 + 8);
        v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 24);
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
      }
      v33 = (uint64_t)v68;
      if (!v68)
        goto LABEL_25;
      if (v68 != __p)
      {
        v33 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 16))();
LABEL_25:
        v59 = (_QWORD *)v33;
        goto LABEL_27;
      }
      v59 = v58;
      (*(void (**)(char *, _QWORD *))(*(_QWORD *)__p + 24))(__p, v58);
LABEL_27:
      v60 = a2;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v61, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      else
        v61 = v51;
      *(_QWORD *)&v62 = &v57;
      *((_QWORD *)&v62 + 1) = &v55;
      v63 = &v56;
      v65 = 0;
      v34 = operator new(0x60uLL);
      v35 = v34;
      *v34 = off_24F9879E8;
      v36 = v34 + 1;
      if (v59)
      {
        if (v59 == v58)
        {
          v34[4] = v36;
          (*(void (**)(_QWORD *, _QWORD *))(v58[0] + 24))(v58, v36);
        }
        else
        {
          v34[4] = v59;
          v59 = 0;
        }
      }
      else
      {
        v34[4] = 0;
      }
      *((_DWORD *)v35 + 10) = v60;
      v37 = (std::string *)(v35 + 6);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v37, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        v35[8] = *((_QWORD *)&v61.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v35 + 9) = v62;
      v35[11] = v63;
      v65 = v35;
      operations_research::ThreadPool::Schedule((uint64_t)v69, v64);
      v38 = v65;
      if (v65 == v64)
      {
        v38 = v64;
        v39 = 4;
      }
      else
      {
        if (!v65)
          goto LABEL_43;
        v39 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_43:
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v61.__r_.__value_.__l.__data_);
        v40 = v59;
        if (v59 == v58)
        {
LABEL_48:
          v40 = v58;
          v41 = 4;
          goto LABEL_49;
        }
      }
      else
      {
        v40 = v59;
        if (v59 == v58)
          goto LABEL_48;
      }
      if (!v40)
        goto LABEL_50;
      v41 = 5;
LABEL_49:
      (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_50:
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        v42 = v68;
        if (v68 == __p)
        {
LABEL_55:
          v42 = __p;
          v43 = 4;
          goto LABEL_56;
        }
      }
      else
      {
        v42 = v68;
        if (v68 == __p)
          goto LABEL_55;
      }
      if (!v42)
        goto LABEL_57;
      v43 = 5;
LABEL_56:
      (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_57:
      ++v9;
    }
    if (!v17)
      break;
    AbslInternalSleepFor(0, 4000000);
  }
  if (v8)
    operator delete(v8);
  operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v69);
  absl::lts_2020_02_25::CondVar::~CondVar((absl::lts_2020_02_25::CondVar *)&v56, v44, v45, v46, v47, v48, v49, v50);
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v57);
}

void sub_22DC0DD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a39);
}

void sub_22DC0DD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_22DC0DF10()
{
  JUMPOUT(0x22DC0DF1CLL);
}

uint64_t operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2 != (_QWORD *)a1)
      goto LABEL_3;
LABEL_6:
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
    goto LABEL_6;
LABEL_3:
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24F9879E8;
  v2 = (_QWORD *)(a1 + 8);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
      goto LABEL_3;
LABEL_6:
    v4 = 4;
    v3 = v2;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
    goto LABEL_6;
LABEL_3:
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24F9879E8;
  v2 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
    {
LABEL_3:
      if (!v3)
        goto LABEL_8;
      v4 = 5;
LABEL_7:
      (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
      JUMPOUT(0x22E31DF78);
    }
  }
  v4 = 4;
  v3 = v2;
  goto LABEL_7;
}

char *std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::string *v5;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = off_24F9879E8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
LABEL_6:
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  v5 = (std::string *)(v2 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  }
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  return v2;
}

void sub_22DC0E174(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[4];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
    {
      operator delete(v1);
      _Unwind_Resume(a1);
    }
    v5 = 5;
    v2 = (_QWORD *)v1[4];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  __n128 result;

  *(_QWORD *)a2 = off_24F9879E8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
    v5 = (std::string *)(a2 + 48);
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    goto LABEL_9;
  }
  if (v4 == a1 + 8)
  {
    *(_QWORD *)(a2 + 32) = a2 + 8;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 8);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
    v5 = (std::string *)(a2 + 48);
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_8;
  }
  *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  v5 = (std::string *)(a2 + 48);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_8;
LABEL_6:
  v6 = *(_OWORD *)(a1 + 48);
  v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
LABEL_9:
  result = *(__n128 *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_22DC0E2B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 8;
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_3;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  operator delete(*(void **)(a1 + 48));
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_3:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  if ((__p[71] & 0x80000000) == 0)
  {
    v3 = (char *)*((_QWORD *)__p + 4);
    if (v3 != v2)
      goto LABEL_3;
LABEL_6:
    v4 = 4;
    v3 = v2;
    goto LABEL_7;
  }
  operator delete(*((void **)__p + 6));
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
    goto LABEL_6;
LABEL_3:
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int v18;
  _BYTE v19[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = *(absl::lts_2020_02_25::Mutex **)(a1 + 72);
  absl::lts_2020_02_25::Mutex::Lock(v3, v4);
  if ((int)*operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__ >= 1
    && ((int *)operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/subsolver.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 179);
    v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
    v13 = *(char *)(a1 + 71);
    if (v13 >= 0)
      v14 = a1 + 48;
    else
      v14 = *(_QWORD *)(a1 + 48);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 71);
    else
      v15 = *(_QWORD *)(a1 + 56);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" done.", 6);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
  v17 = *(_DWORD **)(a1 + 80);
  v18 = (*v17)--;
  if (v18 == *(_DWORD *)(a1 + 40))
    absl::lts_2020_02_25::CondVar::SignalAll(*(absl::lts_2020_02_25::CondVar **)(a1 + 88), (uint64_t)v5, v6, v7, v8, v9, v10, v11);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
}

void sub_22DC0E4F0(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverE"
                     "NS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_"
                                "9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::SharedRelaxationSolutionRepository::NewRelaxationSolution(void **this, char **a2)
{
  size_t v2;
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  int v17;

  v2 = *((int *)a2 + 4);
  if ((_DWORD)v2)
  {
    __p = 0;
    v15 = 0;
    v17 = 0;
    v16 = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&__p, a2[3], &a2[3][8 * v2], v2);
    v13 = (uint64_t)-*((double *)a2 + 20);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(this + 1), v5);
    operations_research::sat::SharedSolutionRepository<long long>::AddInternal(this, &v13);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(this + 1), v6, v7, v8, v9, v10, v11, v12);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
  }
}

void sub_22DC0E630(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  absl::lts_2020_02_25::Mutex *v12;

  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedLPSolutionRepository::NewLPSolution(_QWORD *a1, char **a2)
{
  char *v3;
  char *v4;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  int v18;

  v3 = *a2;
  v4 = a2[1];
  if (v3 != v4)
  {
    __p = 0;
    v16 = 0;
    v18 = 0;
    v17 = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(&__p, v3, v4, (v4 - v3) >> 3);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), v6);
    v14 = -a1[2];
    operations_research::sat::SharedSolutionRepository<double>::AddInternal(a1, &v14);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a1 + 1), v7, v8, v9, v10, v11, v12, v13);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_22DC0E6F8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  absl::lts_2020_02_25::Mutex *v12;

  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void **operations_research::sat::SharedSolutionRepository<double>::AddInternal(_QWORD *a1, uint64_t *a2)
{
  void **result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  BOOL v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  BOOL v41;

  v5 = a1[9];
  v6 = a1[10];
  result = (void **)(a1 + 9);
  v7 = (uint64_t)(v6 - v5) / 40;
  if (v6 != v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = *a2;
    v11 = a2[2] - a2[1];
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = (uint64_t)(v6 - v5) / 40;
    while (1)
    {
      v13 = *(_QWORD *)(v5 + 40 * v8);
      if (v13 == v10)
      {
        v14 = *(double **)(v5 + 40 * v8 + 8);
        v15 = *(double **)(v5 + 40 * v8 + 16);
        if ((char *)v15 - (char *)v14 == v11)
        {
          if (v14 == v15)
            return result;
          for (i = (double *)a2[1]; *v14 == *i; ++i)
          {
            if (++v14 == v15)
              return result;
          }
        }
      }
      v17 = *(_QWORD *)(v5 + 40 * v9);
      if (v17 == v13)
      {
        v18 = v5 + 40 * v8;
        v19 = *(_QWORD *)(v18 + 8);
        v20 = *(_QWORD *)(v18 + 16);
        if (v19 == v20)
          goto LABEL_6;
        v21 = *(double **)(v5 + 40 * v9 + 8);
        v22 = v19 + 8;
        while (v21 != *(double **)(v5 + 40 * v9 + 16))
        {
          v23 = *v21;
          v24 = *(double *)(v22 - 8);
          if (*v21 < v24)
            break;
          ++v21;
          v25 = v24 < v23 || v22 == v20;
          v22 += 8;
          if (v25)
            goto LABEL_6;
        }
      }
      else if (v17 >= v13)
      {
        goto LABEL_6;
      }
      v9 = v8;
LABEL_6:
      if (++v8 == v12)
        goto LABEL_28;
    }
  }
  v9 = 0;
LABEL_28:
  if (v7 >= *(int *)a1)
  {
    v32 = v9;
    v33 = (uint64_t *)(v5 + 40 * v9);
    if (*a2 == *v33)
    {
      v34 = v5 + 40 * v9;
      v36 = *(_QWORD *)(v34 + 8);
      v35 = *(_QWORD *)(v34 + 16);
      if (v36 == v35)
        return result;
      v37 = (double *)a2[1];
      v38 = v36 + 8;
      while (v37 != (double *)a2[2])
      {
        v39 = *v37;
        v40 = *(double *)(v38 - 8);
        if (*v37 < v40)
          break;
        ++v37;
        v41 = v40 < v39 || v38 == v35;
        v38 += 8;
        if (v41)
          return result;
      }
    }
    else if (*a2 >= *v33)
    {
      return result;
    }
    *v33 = *a2;
    if (v33 != a2)
      result = (void **)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)(v5 + 40 * v9 + 8), (char *)a2[1], (char *)a2[2], (a2[2] - a2[1]) >> 3);
    *(_DWORD *)(v5 + 40 * v32 + 32) = *((_DWORD *)a2 + 8);
  }
  else if (v6 >= a1[11])
  {
    result = (void **)std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<double>::Solution const&>(result, a2);
    a1[10] = result;
  }
  else
  {
    v26 = *a2;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)v6 = v26;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v28 = (_BYTE *)a2[1];
    v27 = (_BYTE *)a2[2];
    v29 = v27 - v28;
    if (v27 != v28)
    {
      if (v29 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v30 = (char *)operator new(v27 - v28);
      *(_QWORD *)(v6 + 8) = v30;
      *(_QWORD *)(v6 + 16) = v30;
      v31 = &v30[8 * (v29 >> 3)];
      *(_QWORD *)(v6 + 24) = v31;
      result = (void **)memcpy(v30, v28, v29);
      *(_QWORD *)(v6 + 16) = v31;
    }
    *(_DWORD *)(v6 + 32) = *((_DWORD *)a2 + 8);
    a1[10] = v6 + 40;
    a1[10] = v6 + 40;
  }
  return result;
}

void sub_22DC0E9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(v1 + 80) = v3;
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(operations_research::sat::SharedIncompleteSolutionManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  uint64_t v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24), a2);
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v6, v7, v8, v9, v10, v11, v12);
  return v5 != v4;
}

void operations_research::sat::SharedIncompleteSolutionManager::GetNewSolution(operations_research::sat::SharedIncompleteSolutionManager *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, _QWORD *a3@<X8>)
{
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v5 = (operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24), a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v13)
  {
    v14 = *(_QWORD *)(v13 - 8);
    *(_OWORD *)a3 = *(_OWORD *)(v13 - 24);
    a3[2] = v14;
    *(_QWORD *)(v13 - 16) = 0;
    *(_QWORD *)(v13 - 8) = 0;
    *(_QWORD *)(v13 - 24) = 0;
    v15 = *((_QWORD *)this + 1);
    v18 = *(void **)(v15 - 24);
    v17 = v15 - 24;
    v16 = v18;
    if (v18)
    {
      *(_QWORD *)(*((_QWORD *)this + 1) - 16) = v16;
      operator delete(v16);
    }
    *((_QWORD *)this + 1) = v17;
  }
  absl::lts_2020_02_25::Mutex::Unlock(v5, v6, v7, v8, v9, v10, v11, v12);
}

void operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = (absl::lts_2020_02_25::Mutex *)(a1 + 24);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 24), a2);
  v12 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 16))
  {
    v17 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>((char **)a1, (uint64_t)a2);
  }
  else
  {
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v13 = *(const void **)a2;
    v14 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
    if (v14)
    {
      if (v14 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v15 = (char *)operator new(v14);
      *v12 = v15;
      v12[1] = v15;
      v16 = &v15[8 * (v14 >> 3)];
      v12[2] = v16;
      memcpy(v15, v13, v14);
      v12[1] = v16;
    }
    v17 = (char *)(v12 + 3);
    *(_QWORD *)(a1 + 8) = v12 + 3;
  }
  *(_QWORD *)(a1 + 8) = v17;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_22DC0EB80(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SharedResponseManager::SharedResponseManager(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)(a1 + 56), 0);
  *(_DWORD *)(a1 + 304) = 3;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_QWORD *)(a1 + 408) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 416) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 432) = xmmword_22DCF8AD0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  return a1;
}

void sub_22DC0EC58(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex *v1;

  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::UpdatePrimalIntegral(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  absl::lts_2020_02_25::Mutex *v12;
  double v13;
  absl::lts_2020_02_25::Mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  double v23;
  double v24;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v11 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v11 != &operations_research::sat::_CpModelProto_default_instance_ && *(_QWORD *)(v11 + 120))
  {
    v12 = (absl::lts_2020_02_25::Mutex *)*((_QWORD *)this + 3);
    absl::lts_2020_02_25::Mutex::ReaderLock(v12, v4);
    v13 = *(double *)(*((_QWORD *)v12 + 1) + 112);
    absl::lts_2020_02_25::Mutex::ReaderUnlock(v12, v14, v15, v16, v17, v18, v19, v20);
    v21 = v13 - *((double *)this + 57);
    *((double *)this + 57) = v13;
    v22 = *(uint64_t **)(*((_QWORD *)this + 1) + 120);
    if (!v22)
      v22 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    v23 = *((double *)v22 + 12);
    v24 = fabs(v23);
    if (v23 == 0.0)
      v24 = 1.0;
    *((long double *)this + 56) = *((double *)this + 56)
                                + v21
                                * log(v24 * vabdd_f64((double)*((uint64_t *)this + 52), (double)*((uint64_t *)this + 51))+ 1.0);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_22DC0ED44(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::SetGapLimitsFromParameters(operations_research::sat::SharedResponseManager *this, const operations_research::sat::SatParameters *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v12 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v12 != &operations_research::sat::_CpModelProto_default_instance_ && *(_QWORD *)(v12 + 120))
    *(_OWORD *)((char *)this + 40) = *((_OWORD *)a2 + 11);
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  absl::lts_2020_02_25::Mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned __int8 **v26;
  absl::lts_2020_02_25::Mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];

  v3 = *((double *)this + 5);
  if (v3 != 0.0 || *((double *)this + 6) != 0.0)
  {
    v4 = *((_QWORD *)this + 53);
    if (v4 <= 0x7FFFFFFFFFFFFFFDLL)
    {
      v5 = *((_QWORD *)this + 51);
      if (v5 >= (uint64_t)0x8000000000000003)
      {
        v6 = *(uint64_t **)(*((_QWORD *)this + 1) + 120);
        v7 = (double)v4;
        if (!v6)
          v6 = &operations_research::sat::_CpObjectiveProto_default_instance_;
        if (v4 == 0x8000000000000000)
          v7 = -INFINITY;
        v8 = *((double *)v6 + 11);
        v9 = *((double *)v6 + 12);
        v10 = v7 + v8;
        if (v9 == 0.0)
          v9 = 1.0;
        v11 = v10 * v9;
        v12 = (double)v5;
        if (v5 == 0x7FFFFFFFFFFFFFFFLL)
          v12 = INFINITY;
        v13 = vabdd_f64(v11, (v12 + v8) * v9);
        if (v13 <= v3)
        {
          if (*(_BYTE *)this)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 181);
            v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Absolute gap limit of ", 22);
            v15 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" reached.", 9);
            google::LogMessage::~LogMessage((google::LogMessage *)v34);
          }
          *((_DWORD *)this + 52) = 4;
          v16 = (unsigned __int8 **)*((_QWORD *)this + 3);
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v16, a2);
          atomic_store(1u, v16[3]);
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v16, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v13 / fmax(fabs(v11), 1.0) < *((double *)this + 6))
        {
          if (*(_BYTE *)this)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 191);
            v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Relative gap limit of ", 22);
            v25 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" reached.", 9);
            google::LogMessage::~LogMessage((google::LogMessage *)v34);
          }
          *((_DWORD *)this + 52) = 4;
          v26 = (unsigned __int8 **)*((_QWORD *)this + 3);
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v26, a2);
          atomic_store(1u, v26[3]);
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
  }
}

void sub_22DC0EFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DC0EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds(uint64_t a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4)
{
  absl::lts_2020_02_25::Mutex *v8;
  absl::lts_2020_02_25 *v9;
  absl::lts_2020_02_25::Mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24;
  _BOOL4 v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  _QWORD *v41;
  void *__p[2];
  char v43;

  v8 = (absl::lts_2020_02_25::Mutex *)(a1 + 32);
  v9 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  v17 = *(_QWORD *)(a1 + 8);
  if ((_UNKNOWN *)v17 == &operations_research::sat::_CpModelProto_default_instance_
    || (v18 = *(_QWORD *)(v17 + 120)) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 203);
    v41 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: model_proto_.has_objective() ", 43);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  v20 = *(_QWORD *)(a1 + 408);
  v19 = *(_QWORD *)(a1 + 416);
  if (v20 <= v19)
  {
    if (v20 >= a3)
    {
      v21 = v19 > a4;
      if (v19 <= a4)
        goto LABEL_12;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 424);
      if (v20 >= a3)
        v20 = a3;
      *(_QWORD *)(a1 + 408) = v20;
      v21 = 1;
      if (v19 <= a4)
        goto LABEL_12;
    }
    *(_QWORD *)(a1 + 416) = a4;
    v19 = a4;
LABEL_12:
    if (v20 <= v19)
    {
      if (*(_BYTE *)a1)
        v25 = v21;
      else
        v25 = 0;
      if (v25)
      {
        v26 = *(_QWORD *)(a1 + 424);
        if (v26 == 0x8000000000000000)
        {
          v27 = -INFINITY;
        }
        else if (v26 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v27 = INFINITY;
        }
        else
        {
          v27 = (double)v26;
        }
        v29 = *(double *)(v18 + 88);
        v28 = *(double *)(v18 + 96);
        if (v28 == 0.0)
          v30 = 1.0;
        else
          v30 = *(double *)(v18 + 96);
        v31 = -INFINITY;
        v32 = (double)v20;
        if (v20 == 0x7FFFFFFFFFFFFFFFLL)
          v32 = INFINITY;
        if (v20 != 0x8000000000000000)
          v31 = v32;
        v33 = v30 * (v29 + v31);
        v34 = -INFINITY;
        v35 = (double)v19;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL)
          v35 = INFINITY;
        if (v19 != 0x8000000000000000)
          v34 = v35;
        v36 = v30 * (v29 + v34);
        if (v28 >= 0.0)
          v37 = v33;
        else
          v37 = v36;
        if (v28 >= 0.0)
          v38 = v36;
        else
          v38 = v33;
        v43 = 5;
        strcpy((char *)__p, "Bound");
        v39 = *(_QWORD *)(a1 + 16);
        if (*(_BYTE *)v39)
          v40 = absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(_QWORD *)(v39 + 8) + *(_QWORD *)(v39 + 16);
        else
          v40 = *(_QWORD *)(v39 + 16);
        if (v43 < 0)
          operator delete(__p[0]);
      }
      if (v21)
        operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded((operations_research::sat::SharedResponseManager *)a1, v10);
    }
    else
    {
      if (((*(_DWORD *)(a1 + 208) - 2) & 0xFFFFFFFD) != 0)
        v22 = 3;
      else
        v22 = 4;
      *(_DWORD *)(a1 + 208) = v22;
      if (*(_BYTE *)a1)
      {
        v43 = 4;
        strcpy((char *)__p, "Done");
        v23 = *(_QWORD *)(a1 + 16);
        if (*(_BYTE *)v23)
          v24 = absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(_QWORD *)(v23 + 8) + *(_QWORD *)(v23 + 16);
        else
          v24 = *(_QWORD *)(v23 + 16);
        if (v43 < 0)
          operator delete(__p[0]);
      }
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v8, v10, v11, v12, v13, v14, v15, v16);
}

void sub_22DC0F2D4(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  absl::lts_2020_02_25::Mutex *v15;

  absl::lts_2020_02_25::Mutex::Unlock(v15, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::LogNewSatSolution(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v10;
  _BYTE v11[16];
  _QWORD v12[7];

  v12[6] = *MEMORY[0x24BDAC8D0];
  google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 133);
  v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
  v12[0] = a1;
  v12[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  *(double *)&v12[2] = a3;
  v12[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v12[4] = a2;
  v12[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("#%-5s %6.2fs  %s", 16, (uint64_t)v12, 3, (uint64_t)__p);
  if ((v10 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v8 = v10;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  google::LogMessage::~LogMessage((google::LogMessage *)v11);
}

void sub_22DC0F418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::LogNewSolution(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  _BYTE v15[16];
  void *v16[2];
  char v17;
  double v18;
  void *v19;
  double v20;
  BOOL (*v21)(uint64_t, uint64_t, int, char *);
  double v22;
  BOOL (*v23)(uint64_t, uint64_t, int, char *);
  void **v24;
  uint64_t (*v25)(uint64_t, uint64_t, int, char *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, int, char *);
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v18 = a5;
  v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v20 = a6;
  v21 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("next:[%.9g,%.9g]", 16, (uint64_t)&v18, 2, (uint64_t)v16);
  google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 125);
  v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
  v18 = *(double *)&a1;
  v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20 = a3;
  v21 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v22 = a4;
  v23 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v24 = v16;
  v25 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v26 = a2;
  v27 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("#%-5s %6.2fs best:%-5.9g %-15s %s", 33, (uint64_t)&v18, 5, (uint64_t)__p);
  if ((v14 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v12 = v14;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if (((char)v14 & 0x80000000) == 0)
  {
    google::LogMessage::~LogMessage((google::LogMessage *)v15);
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v16[0]);
    return;
  }
  operator delete(__p[0]);
  google::LogMessage::~LogMessage((google::LogMessage *)v15);
  if (v17 < 0)
    goto LABEL_11;
}

void sub_22DC0F5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  if (a23 < 0)
  {
    operator delete(a18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t *v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17;
  void *__p[2];
  char v19;
  uint64_t *v20;
  int v21;

  v4 = (absl::lts_2020_02_25::Mutex *)(a1 + 32);
  v5 = (uint64_t *)absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  v13 = *(_DWORD *)(a1 + 208);
  if (v13 == 4 || v13 == 2)
  {
    *(_DWORD *)(a1 + 208) = 4;
    v15 = *(_QWORD *)(a1 + 8);
    if ((_UNKNOWN *)v15 == &operations_research::sat::_CpModelProto_default_instance_ || !*(_QWORD *)(v15 + 120))
      *(_BYTE *)(a1 + 212) = 1;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 424);
    if (*(_BYTE *)a1)
      goto LABEL_13;
  }
  else
  {
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 400);
    v21 = 0;
    if (LODWORD(__p[0]))
    {
      v5 = (uint64_t *)google::MakeCheckOpString<int,int>((int)__p, (int)&v21, "num_solutions_ == 0");
      v20 = v5;
      if (v5)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 272, &v20);
        google::LogMessage::stream((google::LogMessage *)__p);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
      }
    }
    *(_DWORD *)(a1 + 208) = 3;
    if (*(_BYTE *)a1)
    {
LABEL_13:
      v19 = 4;
      strcpy((char *)__p, "Done");
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)v16)
        v17 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v5)
            - *(_QWORD *)(v16 + 8)
            + *(_QWORD *)(v16 + 16);
      else
        v17 = *(_QWORD *)(v16 + 16);
      if (v19 < 0)
        operator delete(__p[0]);
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v6, v7, v8, v9, v10, v11, v12);
}

void sub_22DC0F794(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DC0F79C(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  absl::lts_2020_02_25::Mutex *v15;

  absl::lts_2020_02_25::Mutex::Unlock(v15, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::AddUnsatCore(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;

  v4 = (absl::lts_2020_02_25::Mutex *)(a1 + 32);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 168) = 0;
  v12 = *(int **)a2;
  v13 = (int *)*((_QWORD *)a2 + 1);
  if (*(int **)a2 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *v12;
      if (v14 == *(_DWORD *)(a1 + 172))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(a1 + 168), v14 + 1);
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v14) = v15;
      *(_DWORD *)(a1 + 168) = v14 + 1;
      ++v12;
      ++v14;
    }
    while (v12 != v13);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_22DC0F880(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SharedResponseManager::GetInnerObjectiveLowerBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v4 = *((_QWORD *)this + 51);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v4 = *((_QWORD *)this + 52);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

void operations_research::sat::SharedResponseManager::Synchronize(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  *((_OWORD *)this + 27) = *(_OWORD *)((char *)this + 408);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveLowerBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v4 = *((_QWORD *)this + 54);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveUpperBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v4 = *((_QWORD *)this + 55);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::AddSolutionCallback(uint64_t a1, _QWORD *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  absl::lts_2020_02_25::Mutex *v13;
  _QWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  unsigned int v18;

  v4 = (absl::lts_2020_02_25::Mutex *)(a1 + 32);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), (absl::lts_2020_02_25::Mutex *)a2);
  v11 = *(unsigned int *)(a1 + 464);
  *(_DWORD *)(a1 + 464) = v11 + 1;
  v18 = v11;
  v12 = *(_QWORD *)(a1 + 480);
  if (v12 < *(_QWORD *)(a1 + 488))
  {
    *(_DWORD *)v12 = v11;
    v13 = (absl::lts_2020_02_25::Mutex *)(v12 + 8);
    v14 = a2 + 3;
    v15 = (_QWORD *)a2[3];
    if (v15)
    {
      if (v15 == a2)
      {
        *(_QWORD *)(v12 + 32) = v13;
        (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14);
        goto LABEL_9;
      }
      *(_QWORD *)(v12 + 32) = v15;
    }
    else
    {
      v14 = (_QWORD *)(v12 + 32);
    }
    *v14 = 0;
LABEL_9:
    v16 = (_DWORD *)(v12 + 40);
    goto LABEL_10;
  }
  v16 = std::vector<std::pair<int,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>>::__emplace_back_slow_path<int const&,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>((void **)(a1 + 472), &v18, a2);
  v11 = v18;
LABEL_10:
  *(_QWORD *)(a1 + 480) = v16;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v13, v5, v6, v7, v8, v9, v10);
  return v11;
}

void sub_22DC0FA9C(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::GetResponse(operations_research::sat::SharedResponseManager *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, operations_research::sat::CpSolverResponse *a3@<X8>)
{
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  absl::lts_2020_02_25::Mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v6 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v6 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
    {
      v8 = *((_DWORD *)this + 52);
      if (v8)
      {
        if (v8 == 3)
        {
          *((_QWORD *)this + 25) = 0;
          *((_QWORD *)this + 27) = 0;
          goto LABEL_19;
        }
        v9 = *((_QWORD *)this + 53);
      }
      else
      {
        v9 = *((_QWORD *)this + 52);
      }
      v10 = (double)v9;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        v10 = INFINITY;
      if (v9 == 0x8000000000000000)
        v10 = -INFINITY;
      v11 = *(double *)(v7 + 88);
      v12 = *(double *)(v7 + 96);
      v13 = v10 + v11;
      if (v12 == 0.0)
        v12 = 1.0;
      *((double *)this + 25) = v13 * v12;
      v14 = *((_QWORD *)this + 51);
      v15 = -INFINITY;
      v16 = (double)v14;
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        v16 = INFINITY;
      if (v14 != 0x8000000000000000)
        v15 = v16;
      *((double *)this + 27) = v12 * (v11 + v15);
      *((_QWORD *)this + 36) = *((_QWORD *)this + 56);
    }
  }
LABEL_19:
  operations_research::sat::CpSolverResponse::CpSolverResponse(a3, (operations_research::sat::SharedResponseManager *)((char *)this + 56));
  absl::lts_2020_02_25::Mutex::Unlock(v5, v17, v18, v19, v20, v21, v22, v23);
}

void sub_22DC0FBD4(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::NewSolution(operations_research::sat::SharedResponseManager *this, const operations_research::sat::CpSolverResponse *a2, operations_research::sat::Model *a3)
{
  absl::lts_2020_02_25::Mutex *v6;
  const operations_research::sat::CpSolverResponse *v7;
  uint64_t v8;
  operations_research::sat *v9;
  absl::lts_2020_02_25::Mutex *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  absl::lts_2020_02_25::Mutex *v18;
  absl::lts_2020_02_25::Mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string **v27;
  uint64_t v28;
  google::protobuf::Arena *v29;
  std::string *v30;
  absl::lts_2020_02_25::Mutex *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  absl::lts_2020_02_25 *v50;
  size_t v51;
  void **v52;
  uint64_t v53;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  absl::lts_2020_02_25 *v70;
  size_t v71;
  void **p_dst;
  uint64_t v73;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  __n128 v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  const char *v91;
  void *v92;
  _BYTE *v93;
  _QWORD *v94;
  _QWORD *v95;
  std::string *v96;
  std::string::size_type size;
  _QWORD *v98;
  std::string::size_type v99;
  std::string *v100;
  _QWORD *v101;
  std::string v102;
  _QWORD v103[6];
  std::string v104;
  char *__dst;
  uint64_t v106;
  _QWORD v107[4];
  std::string *v108;
  void *__p;
  _QWORD v110[2];
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v6 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  v8 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v8 == &operations_research::sat::_CpModelProto_default_instance_)
    goto LABEL_9;
  v9 = *(operations_research::sat **)(v8 + 120);
  if (!v9)
    goto LABEL_8;
  v16 = (const char *)operations_research::sat::ComputeInnerObjective(v9, a2, v7);
  v17 = *((int *)a2 + 4);
  if ((_DWORD)v17)
  {
    __p = 0;
    v110[0] = 0;
    v111 = 0;
    v110[1] = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&__p, *((char **)a2 + 3), (char *)(*((_QWORD *)a2 + 3) + 8 * v17), v17);
    v108 = (std::string *)v16;
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 312), v18);
    operations_research::sat::SharedSolutionRepository<long long>::AddInternal((void **)this + 38, (uint64_t *)&v108);
    absl::lts_2020_02_25::Mutex::Unlock((operations_research::sat::SharedResponseManager *)((char *)this + 312), v19, v20, v21, v22, v23, v24, v25);
    if (__p)
    {
      v110[0] = __p;
      operator delete(__p);
    }
  }
  if ((uint64_t)v16 <= *((_QWORD *)this + 52))
  {
    *((_QWORD *)this + 52) = v16 - 1;
    *((_QWORD *)this + 53) = v16;
    v8 = *((_QWORD *)this + 1);
    if ((_UNKNOWN *)v8 != &operations_research::sat::_CpModelProto_default_instance_)
    {
LABEL_8:
      if (*(_QWORD *)(v8 + 120))
        goto LABEL_10;
    }
LABEL_9:
    if (!*((_BYTE *)this + 1))
    {
      *((_DWORD *)this + 52) = 4;
      v26 = (std::string *)*((_QWORD *)a2 + 17);
      v27 = (std::string **)((char *)this + 192);
      v33 = *((_QWORD *)this + 8);
      v29 = (google::protobuf::Arena *)(v33 & 0xFFFFFFFFFFFFFFFELL);
      if ((v33 & 1) == 0)
      {
LABEL_11:
        v30 = *v27;
        if (*v27 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_12:
          std::string::operator=(v30, v26);
LABEL_16:
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 18) = 0;
            v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 4);
            if ((_DWORD)v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 18, (int)v31);
              v34 = (void *)*((_QWORD *)this + 10);
              *((_DWORD *)this + 18) += *((_DWORD *)a2 + 4);
              memcpy(v34, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
            }
          }
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 24) = 0;
            v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 10);
            if ((_DWORD)v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 24, (int)v31);
              v35 = (void *)*((_QWORD *)this + 13);
              *((_DWORD *)this + 24) += *((_DWORD *)a2 + 10);
              memcpy(v35, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
            }
          }
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 30) = 0;
            v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 16);
            if ((_DWORD)v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 30, (int)v31);
              v36 = (void *)*((_QWORD *)this + 16);
              *((_DWORD *)this + 30) += *((_DWORD *)a2 + 16);
              memcpy(v36, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
            }
          }
          v37 = *((_QWORD *)this + 1);
          if ((_UNKNOWN *)v37 != &operations_research::sat::_CpModelProto_default_instance_
            && *(_QWORD *)(v37 + 120)
            && *((_QWORD *)this + 51) > *((_QWORD *)this + 52))
          {
            *((_DWORD *)this + 52) = 4;
          }
          ++*((_DWORD *)this + 100);
          if (!*(_BYTE *)this)
            goto LABEL_91;
          v38 = (__int128 *)*((_QWORD *)a2 + 17);
          if (*((char *)v38 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
          }
          else
          {
            v39 = *v38;
            v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v39;
          }
          if (a3)
          {
            v108 = (std::string *)" num_BOOL:";
            __p = (void *)10;
            v40 = (char *)a3 + 32;
            v41 = (_QWORD *)*((_QWORD *)a3 + 4);
            do
            {
              v42 = v41[4];
              v43 = v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
              if (v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
                v44 = v41;
              else
                v44 = v41 + 1;
              if (v43)
                v40 = (char *)v41;
              v41 = (_QWORD *)*v44;
            }
            while (*v44);
            v45 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((*(_QWORD *)(*((_QWORD *)v40 + 5) + 80) - *(_QWORD *)(*((_QWORD *)v40 + 5) + 72)) >> 2, v107, v32);
            __dst = (char *)v107;
            v106 = v45 - (_BYTE *)v107;
            absl::lts_2020_02_25::StrAppend(&v104, (uint64_t)&v108, (uint64_t)&__dst);
          }
          v46 = *((_QWORD *)this + 1);
          if ((_UNKNOWN *)v46 != &operations_research::sat::_CpModelProto_default_instance_)
          {
            v47 = *(_QWORD *)(v46 + 120);
            if (v47)
            {
              v48 = *((_QWORD *)this + 53);
              if (v48 == 0x8000000000000000)
              {
                v49 = -INFINITY;
              }
              else if (v48 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v49 = INFINITY;
              }
              else
              {
                v49 = (double)v48;
              }
              v58 = *(double *)(v47 + 88);
              v57 = *(double *)(v47 + 96);
              if (v57 == 0.0)
                v59 = 1.0;
              else
                v59 = *(double *)(v47 + 96);
              v60 = -INFINITY;
              v61 = INFINITY;
              v62 = *((_QWORD *)this + 51);
              v63 = *((_QWORD *)this + 52);
              if (v62 != 0x7FFFFFFFFFFFFFFFLL)
                v61 = (double)v62;
              if (v62 != 0x8000000000000000)
                v60 = v61;
              v64 = v59 * (v58 + v60);
              v65 = -INFINITY;
              v66 = (double)v63;
              if (v63 == 0x7FFFFFFFFFFFFFFFLL)
                v66 = INFINITY;
              if (v63 != 0x8000000000000000)
                v65 = v66;
              v67 = v59 * (v58 + v65);
              if (v57 >= 0.0)
                v68 = v67;
              else
                v68 = v64;
              if (v57 >= 0.0)
                v69 = v64;
              else
                v69 = v67;
              v70 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)this + 100), v110, v32);
              v71 = v70 - (absl::lts_2020_02_25 *)v110;
              v108 = (std::string *)v110;
              __p = (void *)(v70 - (absl::lts_2020_02_25 *)v110);
              if ((unint64_t)(v70 - (absl::lts_2020_02_25 *)v110) > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v71 >= 0x17)
              {
                v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v71 | 7) != 0x17)
                  v75 = v71 | 7;
                v76 = v75 + 1;
                p_dst = (void **)operator new(v75 + 1);
                v106 = v71;
                v107[0] = v76 | 0x8000000000000000;
                __dst = (char *)p_dst;
              }
              else
              {
                HIBYTE(v107[0]) = v70 - (absl::lts_2020_02_25 *)v110;
                p_dst = (void **)&__dst;
                if (v70 == (absl::lts_2020_02_25 *)v110)
                {
                  *((_BYTE *)&__dst + v71) = 0;
                  v73 = *((_QWORD *)this + 2);
                  if (*(_BYTE *)v73)
                  {
LABEL_82:
                    v74 = absl::lts_2020_02_25::GetCurrentTimeNanos(v70) - *(_QWORD *)(v73 + 8) + *(_QWORD *)(v73 + 16);
LABEL_88:
                    goto LABEL_89;
                  }
LABEL_87:
                  v74 = *(_QWORD *)(v73 + 16);
                  goto LABEL_88;
                }
              }
              v70 = (absl::lts_2020_02_25 *)memcpy(p_dst, v110, v71);
              *((_BYTE *)p_dst + v71) = 0;
              v73 = *((_QWORD *)this + 2);
              if (*(_BYTE *)v73)
                goto LABEL_82;
              goto LABEL_87;
            }
          }
          v50 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)this + 100), v110, v32);
          v51 = v50 - (absl::lts_2020_02_25 *)v110;
          v108 = (std::string *)v110;
          __p = (void *)(v50 - (absl::lts_2020_02_25 *)v110);
          if ((unint64_t)(v50 - (absl::lts_2020_02_25 *)v110) > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v51 >= 0x17)
          {
            v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v55 = v51 | 7;
            v56 = v55 + 1;
            v52 = (void **)operator new(v55 + 1);
            v106 = v51;
            v107[0] = v56 | 0x8000000000000000;
            __dst = (char *)v52;
          }
          else
          {
            HIBYTE(v107[0]) = v50 - (absl::lts_2020_02_25 *)v110;
            v52 = (void **)&__dst;
            if (v50 == (absl::lts_2020_02_25 *)v110)
            {
              *((_BYTE *)&__dst + v51) = 0;
              v53 = *((_QWORD *)this + 2);
              if (*(_BYTE *)v53)
              {
LABEL_52:
                v54 = absl::lts_2020_02_25::GetCurrentTimeNanos(v50) - *(_QWORD *)(v53 + 8) + *(_QWORD *)(v53 + 16);
LABEL_58:
LABEL_89:
                if (SHIBYTE(v107[0]) < 0)
                {
                  operator delete(__dst);
                  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_91;
                }
                else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_91;
                }
                operator delete(v104.__r_.__value_.__l.__data_);
LABEL_91:
                operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded(this, v31);
                if (*((_QWORD *)this + 59) == *((_QWORD *)this + 60))
                {
LABEL_116:
                  if (FLAGS_cp_model_dump_solutions && *(_BYTE *)this)
                  {
                    v91 = (char *)this + 496;
                    v92 = (void *)*((unsigned __int8 *)this + 519);
                    if ((char)v92 < 0)
                    {
                      v91 = (const char *)*((_QWORD *)this + 62);
                      v92 = (void *)*((_QWORD *)this + 63);
                    }
                    v108 = (std::string *)v91;
                    __p = v92;
                    __dst = "solution_";
                    v106 = 9;
                    v93 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)this + 100), &v104.__r_.__value_.__s.__data_[16], v11);
                    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104.__r_.__value_.__r.__words[2];
                    v104.__r_.__value_.__l.__size_ = v93 - (_BYTE *)&v104.__r_.__value_.__r.__words[2];
                    v103[0] = ".pbtxt";
                    v103[1] = 6;
                    absl::lts_2020_02_25::StrCat((uint64_t)&v108, (uint64_t)&__dst, (uint64_t)&v104, (uint64_t)v103, &v102);
                    google::LogMessage::LogMessage((google::LogMessage *)&v108, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 474);
                    v94 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v108);
                    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Dumping solution to '", 21);
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v96 = &v102;
                    else
                      v96 = (std::string *)v102.__r_.__value_.__r.__words[0];
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                    else
                      size = v102.__r_.__value_.__l.__size_;
                    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, size);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"'.", 2);
                    google::LogMessage::~LogMessage((google::LogMessage *)&v108);
                    v99 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                    v100 = &v102;
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      v99 = v102.__r_.__value_.__l.__size_;
                      v100 = (std::string *)v102.__r_.__value_.__r.__words[0];
                    }
                    v108 = v100;
                    __p = (void *)v99;
                    file::SetTextProto((const char **)&v108, (operations_research::sat::SharedResponseManager *)((char *)this + 56), 47802, &v104);
                    if (v104.__r_.__value_.__r.__words[0])
                    {
                      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__dst, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 475);
                      v101 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__dst);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: (file::SetTextProto(file, best_response_, file::Defaults())).ok() ", 80);
                      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__dst);
                    }
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v102.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_131;
                }
                v77 = *((_QWORD *)this + 1);
                if ((_UNKNOWN *)v77 == &operations_research::sat::_CpModelProto_default_instance_
                  || (v78 = *(_QWORD *)(v77 + 120)) == 0)
                {
LABEL_113:
                  v87.n128_f64[0] = operations_research::sat::SharedResponseManager::SetStatsFromModelInternal((uint64_t)this, (uint64_t)a3);
                  v88 = *((_QWORD *)this + 59);
                  for (i = *((_QWORD *)this + 60); v88 != i; v88 += 40)
                  {
                    v90 = *(_QWORD *)(v88 + 32);
                    if (!v90)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(uint64_t, char *, __n128))(*(_QWORD *)v90 + 48))(v90, (char *)this + 56, v87);
                  }
                  goto LABEL_116;
                }
                v79 = *((_DWORD *)this + 52);
                if (v79)
                {
                  if (v79 == 3)
                  {
                    *((_QWORD *)this + 25) = 0;
                    *((_QWORD *)this + 27) = 0;
                    goto LABEL_113;
                  }
                  v80 = *((_QWORD *)this + 53);
                  if (v80 == 0x8000000000000000)
                    goto LABEL_103;
                }
                else
                {
                  v80 = *((_QWORD *)this + 52);
                  if (v80 == 0x8000000000000000)
                  {
LABEL_103:
                    v81 = -INFINITY;
LABEL_105:
                    v82 = *(double *)(v78 + 88);
                    v83 = v81 + v82;
                    v84 = *(double *)(v78 + 96);
                    if (v84 == 0.0)
                      v84 = 1.0;
                    *((double *)this + 25) = v83 * v84;
                    v85 = *((_QWORD *)this + 51);
                    if (v85 == 0x8000000000000000)
                    {
                      v86 = -INFINITY;
                    }
                    else if (v85 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v86 = INFINITY;
                    }
                    else
                    {
                      v86 = (double)v85;
                    }
                    *((double *)this + 27) = v84 * (v82 + v86);
                    *((_QWORD *)this + 36) = *((_QWORD *)this + 56);
                    goto LABEL_113;
                  }
                }
                if (v80 == 0x7FFFFFFFFFFFFFFFLL)
                  v81 = INFINITY;
                else
                  v81 = (double)v80;
                goto LABEL_105;
              }
LABEL_57:
              v54 = *(_QWORD *)(v53 + 16);
              goto LABEL_58;
            }
          }
          v50 = (absl::lts_2020_02_25 *)memcpy(v52, v110, v51);
          *((_BYTE *)v52 + v51) = 0;
          v53 = *((_QWORD *)this + 2);
          if (*(_BYTE *)v53)
            goto LABEL_52;
          goto LABEL_57;
        }
LABEL_15:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v27, v29, (__int128 *)v26);
        goto LABEL_16;
      }
LABEL_14:
      v29 = *(google::protobuf::Arena **)v29;
      v30 = *v27;
      if (*v27 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_12;
      goto LABEL_15;
    }
LABEL_10:
    *((_DWORD *)this + 52) = 2;
    v26 = (std::string *)*((_QWORD *)a2 + 17);
    v27 = (std::string **)((char *)this + 192);
    v28 = *((_QWORD *)this + 8);
    v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    if ((v28 & 1) == 0)
      goto LABEL_11;
    goto LABEL_14;
  }
LABEL_131:
  absl::lts_2020_02_25::Mutex::Unlock(v6, v10, (uint64_t)v11, v17, v12, v13, v14, v15);
}

void sub_22DC104EC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *__p,uint64_t a43)
{
  absl::lts_2020_02_25::Mutex *v43;

  absl::lts_2020_02_25::Mutex::Unlock(v43, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

double operations_research::sat::SharedResponseManager::SetStatsFromModelInternal(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  absl::lts_2020_02_25 *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  double result;

  if (a2)
  {
    v4 = (_QWORD *)(a2 + 32);
    v3 = *(_QWORD **)(a2 + 32);
    v5 = (_QWORD *)(a2 + 32);
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
      if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v5 == v4 || v5[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
      v10 = 0;
    else
      v10 = (int *)v5[5];
    v11 = (_QWORD *)(a2 + 32);
    do
    {
      v12 = v3[4];
      v13 = v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v14 = v3;
      else
        v14 = v3 + 1;
      if (v13)
        v11 = v3;
      v3 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == v4 || v11[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v15 = 0;
    else
      v15 = v11[5];
    *(_QWORD *)(a1 + 224) = v10[4];
    *(_QWORD *)(a1 + 240) = operations_research::sat::SatSolver::num_branches((operations_research::sat::SatSolver *)v10);
    *(_QWORD *)(a1 + 232) = operations_research::sat::SatSolver::num_failures((operations_research::sat::SatSolver *)v10);
    v16 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::num_propagations((operations_research::sat::SatSolver *)v10);
    *(_QWORD *)(a1 + 248) = v16;
    if (v15)
    {
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(v15 + 848);
      v17 = (_QWORD *)*v4;
      if (!*v4)
        goto LABEL_40;
    }
    else
    {
      *(_QWORD *)(a1 + 256) = 0;
      v17 = (_QWORD *)*v4;
      if (!*v4)
        goto LABEL_40;
    }
    v18 = v4;
    do
    {
      v19 = v17[4];
      v20 = v19 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
      if (v19 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
        v21 = v17;
      else
        v21 = v17 + 1;
      if (v20)
        v18 = v17;
      v17 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 != v4 && v18[4] <= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
    {
      v22 = v18[5];
      goto LABEL_41;
    }
LABEL_40:
    v22 = 0;
LABEL_41:
    *(double *)(a1 + 264) = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v16) - *(_QWORD *)v22) * 0.000000001;
    result = *(double *)(v22 + 112);
    *(double *)(a1 + 280) = result;
  }
  return result;
}

void operations_research::sat::SharedResponseManager::LoadDebugSolution(operations_research::sat::SharedResponseManager *this, operations_research::sat::Model *a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  int **v14;
  uint64_t *v15;
  operations_research::sat::IntegerTrail *v16;
  const operations_research::sat::CpSolverResponse *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  operations_research::sat *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v37[16];
  uint64_t v38;
  __int128 v39;
  _BYTE v40[16];
  int v41;
  _QWORD *v42;

  if (*FLAGS_cp_model_load_debug_solution)
  {
    v5 = (char *)a2 + 32;
    v4 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (!v4)
      goto LABEL_14;
    v6 = (char *)a2 + 32;
    do
    {
      v7 = v4[4];
      v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
      if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = (char *)v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 == v5
      || *((_QWORD *)v6 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d
      || !*((_QWORD *)v6 + 5))
    {
LABEL_14:
      operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v40, 0);
      google::LogMessage::LogMessage((google::LogMessage *)&v39, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 486);
      v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v39);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Reading solution from '", 23);
      v12 = strlen(FLAGS_cp_model_load_debug_solution);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, FLAGS_cp_model_load_debug_solution, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"'.", 2);
      google::LogMessage::~LogMessage((google::LogMessage *)&v39);
      *(_QWORD *)&v39 = FLAGS_cp_model_load_debug_solution;
      *((_QWORD *)&v39 + 1) = strlen(FLAGS_cp_model_load_debug_solution);
      file::GetTextProto(&v39, (google::protobuf::Message *)v40, 47802, &v38);
      if (v38)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v37, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 489);
        v36 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: (file::GetTextProto(FLAGS_cp_model_load_debug_solution, &response, file::Defaults())).ok() ", 105);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v37);
      }
      v14 = (int **)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
      v15 = operations_research::sat::Model::GetOrCreate<operations_research::sat::DebugSolution>((uint64_t)a2);
      v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
      v18 = (int)(-1431655765 * ((*((_QWORD *)v16 + 6) - *((_QWORD *)v16 + 5)) >> 2));
      v19 = (v15[1] - *v15) >> 3;
      if (v18 <= v19)
      {
        if (v18 < v19)
          v15[1] = *v15 + 8 * v18;
      }
      else
      {
        std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v15, v18 - v19);
      }
      v20 = v41;
      if (v41 >= 1)
      {
        v21 = *v14;
        v22 = v42;
        do
        {
          v24 = *v21++;
          v23 = v24;
          if ((_DWORD)v24 != -1)
          {
            v25 = *v15;
            *(_QWORD *)(*v15 + 8 * v23) = *v22;
            *(_QWORD *)(v25 + 8 * (int)(v23 ^ 1)) = -*v22;
          }
          ++v22;
          --v20;
        }
        while (v20);
      }
      v26 = *(_QWORD **)v5;
      if (*(_QWORD *)v5)
      {
        v27 = v5;
        do
        {
          v28 = v26[4];
          v29 = v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
          if (v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
            v30 = v26;
          else
            v30 = v26 + 1;
          if (v29)
            v27 = (char *)v26;
          v26 = (_QWORD *)*v30;
        }
        while (*v30);
        if (v27 != v5
          && *((_QWORD *)v27 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
        {
          v31 = *((_QWORD *)v27 + 5);
          if (v31)
          {
            v32 = *(int *)(v31 + 16);
            if (*(_QWORD *)(*((_QWORD *)this + 1) + 120))
              v33 = *(operations_research::sat **)(*((_QWORD *)this + 1) + 120);
            else
              v33 = (operations_research::sat *)&operations_research::sat::_CpObjectiveProto_default_instance_;
            v34 = operations_research::sat::ComputeInnerObjective(v33, (const operations_research::sat::CpObjectiveProto *)v40, v17);
            v35 = *v15;
            *(_QWORD *)(*v15 + 8 * v32) = v34;
            *(_QWORD *)(v35 + 8 * (int)(v32 ^ 1)) = -v34;
          }
        }
      }
      operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v40);
    }
  }
}

void sub_22DC10A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

void sub_22DC10A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va1);
  _Unwind_Resume(a1);
}

void sub_22DC10A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DC10A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  absl::lts_2020_02_25::Status::~Status((absl::lts_2020_02_25::Status *)va);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va1);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::DebugSolution>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
    return (_QWORD *)v4[5];
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F987A68;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void operations_research::sat::SharedResponseManager::SetStatsFromModel(operations_research::sat::SharedResponseManager *this, operations_research::sat::Model *a2)
{
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  operations_research::sat::SharedResponseManager::SetStatsFromModelInternal((uint64_t)this, (uint64_t)a2);
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_22DC10C50(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::SharedResponseManager::ProblemIsSolved(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  operations_research::sat::SharedResponseManager *v2;
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = this;
  v3 = (operations_research::sat::SharedResponseManager *)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  LODWORD(v2) = *((_DWORD *)v2 + 52);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
  return ((_DWORD)v2 - 3) < 2;
}

operations_research::sat::SharedBoundsManager *operations_research::sat::SharedBoundsManager::SharedBoundsManager(operations_research::sat::SharedBoundsManager *this, const operations_research::sat::CpModelProto *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *((int *)a2 + 6);
  *(_DWORD *)this = v4;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  if ((_DWORD)v4)
  {
    if ((v4 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v5 = (char *)operator new(8 * v4);
    *((_QWORD *)this + 3) = v5;
    v6 = &v5[8 * v4];
    *((_QWORD *)this + 5) = v6;
    memset_pattern16(v5, &unk_22DCF8AE0, 8 * v4);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = v6;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    v7 = (char *)operator new(8 * v4);
    *((_QWORD *)this + 6) = v7;
    v8 = &v7[8 * v4];
    *((_QWORD *)this + 8) = v8;
    memset_pattern16(v7, &unk_22DCF8AF0, 8 * v4);
    *((_QWORD *)this + 7) = v8;
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = (char *)this + 72;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 28) = -1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  if ((_DWORD)v4)
  {
    v9 = (char *)operator new(8 * v4);
    *((_QWORD *)this + 19) = v9;
    v10 = &v9[8 * v4];
    *((_QWORD *)this + 21) = v10;
    memset_pattern16(v9, &unk_22DCF8AE0, 8 * v4);
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 20) = v10;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    v11 = (char *)operator new(8 * v4);
    *((_QWORD *)this + 22) = v11;
    v12 = &v11[8 * v4];
    *((_QWORD *)this + 24) = v12;
    memset_pattern16(v11, &unk_22DCF8AF0, 8 * v4);
    *((_QWORD *)this + 23) = v12;
  }
  else
  {
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
  }
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  operations_research::SparseBitset<long long>::ClearAndResize((uint64_t *)this + 9, v4);
  v13 = *(unsigned int *)this;
  if ((int)v13 >= 1)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 3);
    v15 = (uint64_t *)*((_QWORD *)this + 6);
    v16 = (_QWORD *)*((_QWORD *)this + 19);
    v17 = (_QWORD *)*((_QWORD *)this + 22);
    v18 = (uint64_t *)(*((_QWORD *)a2 + 4) + 8);
    do
    {
      v19 = *v18++;
      v20 = *(uint64_t **)(v19 + 24);
      *v14 = *v20;
      *v15 = v20[*(int *)(v19 + 16) - 1];
      v21 = *v14++;
      *v16++ = v21;
      v22 = *v15++;
      *v17++ = v22;
      --v13;
    }
    while (v13);
  }
  return this;
}

void sub_22DC10ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, absl::lts_2020_02_25::Mutex *a10)
{
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  void *v15;
  void *v16;
  void *v17;

  v15 = (void *)v10[19];
  if (v15)
  {
    v10[20] = v15;
    operator delete(v15);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v11);
    v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      v17 = *a9;
      if (!*a9)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v11);
    v16 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *v13 = v16;
  operator delete(v16);
  v17 = *a9;
  if (!*a9)
  {
LABEL_5:
    absl::lts_2020_02_25::Mutex::~Mutex(a10);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v10[4] = v17;
  operator delete(v17);
  goto LABEL_5;
}

void sub_22DC10F90()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DC10F40);
  JUMPOUT(0x22DC10F38);
}

void operations_research::SparseBitset<long long>::ClearAndResize(uint64_t *a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v3 = (unint64_t *)a1[7];
  v4 = (unint64_t *)a1[8];
  if (300 * (v4 - v3) >= (unint64_t)a2)
  {
    v12 = a2 & ~(a2 >> 63);
    *a1 = v12;
    v14 = (void **)(a1 + 1);
    v13 = (char *)a1[1];
    v15 = (unint64_t)(v12 + 63) >> 6;
    v16 = a1[2] - (_QWORD)v13;
    v17 = v16 >> 3;
    v19 = 0;
    if (v15 <= v16 >> 3)
    {
      if (v15 < v16 >> 3)
        a1[2] = (uint64_t)&v13[8 * v15];
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 1), v15 - (v16 >> 3), &v19);
      v13 = (char *)*v14;
    }
    if (v15 >= v17)
      v18 = v17;
    else
      v18 = v15;
    bzero(v13, 8 * v18);
    a1[8] = a1[7];
  }
  else
  {
    v5 = (uint64_t)(a1 + 1);
    v6 = a1[1];
    if (v3 != v4)
    {
      v7 = v3;
      do
      {
        v8 = *v7++;
        *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
      }
      while (v7 != v4);
    }
    a1[8] = (uint64_t)v3;
    v9 = a2 & ~(a2 >> 63);
    *a1 = v9;
    v10 = (unint64_t)(v9 + 63) >> 6;
    v19 = 0;
    v11 = (a1[2] - v6) >> 3;
    if (v10 <= v11)
    {
      if (v10 < v11)
        a1[2] = v6 + 8 * v10;
    }
    else
    {
      std::vector<unsigned long long>::__append(v5, v10 - v11, &v19);
    }
  }
}

void **std::deque<operations_research::SparseBitset<long long>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<operations_research::SparseBitset<long long>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(uint64_t a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  absl::lts_2020_02_25::Mutex *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v26;
  __int128 v27;
  _BYTE *v28;
  google::LogMessage *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  std::string v50;
  _QWORD v51[6];
  uint64_t *v52[2];
  _BYTE v53[32];
  unint64_t v54[8];

  v54[6] = *MEMORY[0x24BDAC8D0];
  v9 = (a4[1] - *a4) >> 2;
  v54[0] = v9;
  v51[0] = (uint64_t)(a5[1] - *a5) >> 3;
  if (v9 != v51[0])
  {
    v52[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v54, (int)v51, "variables.size() == new_lower_bounds.size()");
    if (v52[0])
    {
      v46 = google::LogMessageFatal::LogMessageFatal(v54, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 564, v52);
      google::LogMessage::stream((google::LogMessage *)v46);
LABEL_42:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v54);
    }
    v9 = (a4[1] - *a4) >> 2;
  }
  v54[0] = v9;
  v51[0] = (uint64_t)(a6[1] - *a6) >> 3;
  if (v9 != v51[0])
  {
    v52[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v54, (int)v51, "variables.size() == new_upper_bounds.size()");
    if (v52[0])
    {
      v45 = google::LogMessageFatal::LogMessageFatal(v54, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 565, v52);
      google::LogMessage::stream((google::LogMessage *)v45);
      goto LABEL_42;
    }
  }
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 16), a2);
  v17 = *a4;
  if (a4[1] != *a4)
  {
    v18 = 0;
    while (1)
    {
      v19 = *(unsigned int *)(v17 + 4 * v18);
      if ((int)v19 < *(_DWORD *)a1)
      {
        v20 = 8 * (int)v19;
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v20);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v20);
        v23 = *(_QWORD *)(*a5 + 8 * v18);
        v24 = *(_QWORD *)(*a6 + 8 * v18);
        LODWORD(v54[0]) = *(_DWORD *)(v17 + 4 * v18);
        LODWORD(v51[0]) = 0;
        if ((v19 & 0x80000000) != 0)
        {
          v52[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v54, (int)v51, "var >= 0");
          if (v52[0])
          {
            v44 = google::LogMessageFatal::LogMessageFatal(v54, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 577, v52);
            google::LogMessage::stream((google::LogMessage *)v44);
            goto LABEL_42;
          }
        }
        if (v23 > v21 || v24 < v22)
        {
          if (v23 > v21)
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (int)v19) = v23;
          if (v24 < v22)
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (int)v19) = v24;
          operations_research::SparseBitset<long long>::Set((_QWORD *)(a1 + 72), (int)v19);
          if (*operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__ >= 2
            && (operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__ != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)&operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/synchronization.cc", (const char *)2)))
          {
            break;
          }
        }
      }
LABEL_5:
      ++v18;
      v17 = *a4;
      if (v18 >= (a4[1] - *a4) >> 2)
        goto LABEL_43;
    }
    v26 = *(__int128 **)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * (int)v19 + 8) + 40);
    if (*((char *)v26 + 23) < 0)
    {
      v11 = (char *)*((_QWORD *)v26 + 1);
      if (v11)
      {
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v26, (std::string::size_type)v11);
        goto LABEL_26;
      }
    }
    else if (*((_BYTE *)v26 + 23))
    {
      v27 = *v26;
      v50.__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
LABEL_26:
      v29 = google::LogMessage::LogMessage((google::LogMessage *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 593);
      v30 = (_QWORD *)google::LogMessage::stream(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  '", 3);
      v32 = *(char *)(a3 + 23);
      if (v32 >= 0)
        v33 = a3;
      else
        v33 = *(_QWORD *)a3;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(a3 + 23);
      else
        v34 = *(_QWORD *)(a3 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"' exports new bounds for ", 25);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v50;
      else
        v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        size = v50.__r_.__value_.__l.__size_;
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": from [", 8);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"] to [", 6);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", ", 2);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v54);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      goto LABEL_5;
    }
    v54[0] = (unint64_t)"anonymous_var(";
    v54[1] = 14;
    v28 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v19, v53, v11);
    v52[0] = (uint64_t *)v53;
    v52[1] = (uint64_t *)(v28 - v53);
    v51[0] = ")";
    v51[1] = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)v54, (uint64_t)v52, (uint64_t)v51, &v50);
    goto LABEL_26;
  }
LABEL_43:
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a1 + 16), v10, (uint64_t)v11, v12, v13, v14, v15, v16);
}

